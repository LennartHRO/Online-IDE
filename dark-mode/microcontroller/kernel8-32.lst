
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00b326 	b	34d00 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8074:	e24ddc21 	sub	sp, sp, #8448	; 0x2100
    8078:	e24dd034 	sub	sp, sp, #52	; 0x34
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000017 	bl	80e4 <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb0000a2 	bl	8318 <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000003 	beq	80a4 <main+0x34>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb0000df 	bl	841c <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000000 	beq	80a8 <main+0x38>
    80a4:	eb00b307 	bl	34cc8 <halt>
    80a8:	eb00b30b 	bl	34cdc <reboot>

000080ac <foo(void*)>:
    80ac:	e92d4010 	push	{r4, lr}
    80b0:	e1a04000 	mov	r4, r0
    80b4:	e2844a02 	add	r4, r4, #8192	; 0x2000
    80b8:	e2800d73 	add	r0, r0, #7360	; 0x1cc0
    80bc:	e3a02003 	mov	r2, #3
    80c0:	e2800038 	add	r0, r0, #56	; 0x38
    80c4:	e30a38d8 	movw	r3, #43224	; 0xa8d8
    80c8:	e3403003 	movt	r3, #3
    80cc:	e30a1a00 	movw	r1, #43520	; 0xaa00
    80d0:	e3401003 	movt	r1, #3
    80d4:	eb009e44 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    80d8:	e3a03001 	mov	r3, #1
    80dc:	e5c43000 	strb	r3, [r4]
    80e0:	e8bd8010 	pop	{r4, pc}

000080e4 <CKernel::CKernel()>:
    80e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    80e8:	e1a04000 	mov	r4, r0
    80ec:	e3a05000 	mov	r5, #0
    80f0:	e24dd014 	sub	sp, sp, #20
    80f4:	e2847d72 	add	r7, r4, #7296	; 0x1c80
    80f8:	eb009af5 	bl	2ecd4 <CKernelOptions::CKernelOptions()>
    80fc:	e2840e89 	add	r0, r4, #2192	; 0x890
    8100:	e2800004 	add	r0, r0, #4
    8104:	e2877038 	add	r7, r7, #56	; 0x38
    8108:	eb009485 	bl	2d324 <CDeviceNameService::CDeviceNameService()>
    810c:	e1a00004 	mov	r0, r4
    8110:	eb009a1e 	bl	2e990 <CKernelOptions::GetWidth() const>
    8114:	e1a06000 	mov	r6, r0
    8118:	e1a00004 	mov	r0, r4
    811c:	eb009a1d 	bl	2e998 <CKernelOptions::GetHeight() const>
    8120:	e1a02000 	mov	r2, r0
    8124:	e2840e89 	add	r0, r4, #2192	; 0x890
    8128:	e1a03005 	mov	r3, r5
    812c:	e1a01006 	mov	r1, r6
    8130:	e58d5000 	str	r5, [sp]
    8134:	e280000c 	add	r0, r0, #12
    8138:	e2846c1a 	add	r6, r4, #6656	; 0x1a00
    813c:	eb00a2b6 	bl	30c1c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    8140:	e2840e92 	add	r0, r4, #2336	; 0x920
    8144:	e1a03005 	mov	r3, r5
    8148:	e1a02005 	mov	r2, r5
    814c:	e1a01005 	mov	r1, r5
    8150:	e280000c 	add	r0, r0, #12
    8154:	eb00a940 	bl	3265c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8158:	e1a00006 	mov	r0, r6
    815c:	e2800014 	add	r0, r0, #20
    8160:	e2866018 	add	r6, r6, #24
    8164:	eb00bf02 	bl	37d74 <CExceptionHandler::CExceptionHandler()>
    8168:	e1a00006 	mov	r0, r6
    816c:	eb00c12a 	bl	3861c <CInterruptSystem::CInterruptSystem()>
    8170:	e1a01006 	mov	r1, r6
    8174:	e1a00007 	mov	r0, r7
    8178:	eb00b322 	bl	34e08 <CTimer::CTimer(CInterruptSystem*)>
    817c:	e1a00004 	mov	r0, r4
    8180:	eb009a09 	bl	2e9ac <CKernelOptions::GetLogLevel() const>
    8184:	e1a01000 	mov	r1, r0
    8188:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    818c:	e1a02007 	mov	r2, r7
    8190:	e3a03001 	mov	r3, #1
    8194:	e2800038 	add	r0, r0, #56	; 0x38
    8198:	eb009c0d 	bl	2f1d4 <CLogger::CLogger(unsigned int, CTimer*, bool)>
    819c:	e2840d77 	add	r0, r4, #7616	; 0x1dc0
    81a0:	e1a01006 	mov	r1, r6
    81a4:	e2800034 	add	r0, r0, #52	; 0x34
    81a8:	eb0095f6 	bl	2d988 <CGPIOManager::CGPIOManager(CInterruptSystem*)>
    81ac:	e2840d7b 	add	r0, r4, #7872	; 0x1ec0
    81b0:	e1a03005 	mov	r3, r5
    81b4:	e3a02001 	mov	r2, #1
    81b8:	e3a01012 	mov	r1, #18
    81bc:	e2800014 	add	r0, r0, #20
    81c0:	eb009967 	bl	2e764 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    81c4:	e2840d7b 	add	r0, r4, #7872	; 0x1ec0
    81c8:	e1a03005 	mov	r3, r5
    81cc:	e1a02007 	mov	r2, r7
    81d0:	e1a01006 	mov	r1, r6
    81d4:	e280003c 	add	r0, r0, #60	; 0x3c
    81d8:	eb00014b 	bl	870c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>
    81dc:	e2840d7e 	add	r0, r4, #8064	; 0x1f80
    81e0:	e2800014 	add	r0, r0, #20
    81e4:	eb008e13 	bl	2ba38 <CScheduler::CScheduler()>
    81e8:	e30a08ec 	movw	r0, #43244	; 0xa8ec
    81ec:	e3400003 	movt	r0, #3
    81f0:	e58d0004 	str	r0, [sp, #4]
    81f4:	e2840a02 	add	r0, r4, #8192	; 0x2000
    81f8:	e1a03005 	mov	r3, r5
    81fc:	e1a02005 	mov	r2, r5
    8200:	e1a01005 	mov	r1, r5
    8204:	e58d5008 	str	r5, [sp, #8]
    8208:	e2800004 	add	r0, r0, #4
    820c:	e58d5000 	str	r5, [sp]
    8210:	eb005fd5 	bl	2016c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    8214:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8218:	e3a020c8 	mov	r2, #200	; 0xc8
    821c:	e3a01005 	mov	r1, #5
    8220:	e3040e48 	movw	r0, #20040	; 0x4e48
    8224:	e3400004 	movt	r0, #4
    8228:	eb009179 	bl	2c814 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    822c:	e1a00004 	mov	r0, r4
    8230:	e28dd014 	add	sp, sp, #20
    8234:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008238 <CKernel::myInterruptHandler()>:
    8238:	e92d4010 	push	{r4, lr}
    823c:	e1a04000 	mov	r4, r0
    8240:	e2844a02 	add	r4, r4, #8192	; 0x2000
    8244:	e2800d73 	add	r0, r0, #7360	; 0x1cc0
    8248:	e3a02003 	mov	r2, #3
    824c:	e2800038 	add	r0, r0, #56	; 0x38
    8250:	e30a38d8 	movw	r3, #43224	; 0xa8d8
    8254:	e3403003 	movt	r3, #3
    8258:	e30a1a00 	movw	r1, #43520	; 0xaa00
    825c:	e3401003 	movt	r1, #3
    8260:	eb009de1 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8264:	e3a03001 	mov	r3, #1
    8268:	e5c43000 	strb	r3, [r4]
    826c:	e8bd8010 	pop	{r4, pc}

00008270 <CKernel::~CKernel()>:
    8270:	e92d4010 	push	{r4, lr}
    8274:	e1a04000 	mov	r4, r0
    8278:	e2800a02 	add	r0, r0, #8192	; 0x2000
    827c:	e2800004 	add	r0, r0, #4
    8280:	eb0060a1 	bl	2050c <CNetSubSystem::~CNetSubSystem()>
    8284:	e2840d7e 	add	r0, r4, #8064	; 0x1f80
    8288:	e2800014 	add	r0, r0, #20
    828c:	eb008e0e 	bl	2bacc <CScheduler::~CScheduler()>
    8290:	e2840d7b 	add	r0, r4, #7872	; 0x1ec0
    8294:	e280003c 	add	r0, r0, #60	; 0x3c
    8298:	eb000c40 	bl	b3a0 <CDWHCIDevice::~CDWHCIDevice()>
    829c:	e2840d7b 	add	r0, r4, #7872	; 0x1ec0
    82a0:	e2800014 	add	r0, r0, #20
    82a4:	eb009687 	bl	2dcc8 <CGPIOPin::~CGPIOPin()>
    82a8:	e2840d77 	add	r0, r4, #7616	; 0x1dc0
    82ac:	e2800034 	add	r0, r0, #52	; 0x34
    82b0:	eb0095bd 	bl	2d9ac <CGPIOManager::~CGPIOManager()>
    82b4:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    82b8:	e2800038 	add	r0, r0, #56	; 0x38
    82bc:	eb009bdc 	bl	2f234 <CLogger::~CLogger()>
    82c0:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    82c4:	e2800038 	add	r0, r0, #56	; 0x38
    82c8:	eb00b2f0 	bl	34e90 <CTimer::~CTimer()>
    82cc:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    82d0:	e2800018 	add	r0, r0, #24
    82d4:	eb00c0db 	bl	38648 <CInterruptSystem::~CInterruptSystem()>
    82d8:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    82dc:	e2800014 	add	r0, r0, #20
    82e0:	eb00be48 	bl	37c08 <CExceptionHandler::~CExceptionHandler()>
    82e4:	e2840e92 	add	r0, r4, #2336	; 0x920
    82e8:	e280000c 	add	r0, r0, #12
    82ec:	eb00ac0c 	bl	33324 <CSerialDevice::~CSerialDevice()>
    82f0:	e2840e89 	add	r0, r4, #2192	; 0x890
    82f4:	e280000c 	add	r0, r0, #12
    82f8:	eb00a1cd 	bl	30a34 <CScreenDevice::~CScreenDevice()>
    82fc:	e2840e89 	add	r0, r4, #2192	; 0x890
    8300:	e2800004 	add	r0, r0, #4
    8304:	eb009417 	bl	2d368 <CDeviceNameService::~CDeviceNameService()>
    8308:	e1a00004 	mov	r0, r4
    830c:	eb009984 	bl	2e924 <CKernelOptions::~CKernelOptions()>
    8310:	e1a00004 	mov	r0, r4
    8314:	e8bd8010 	pop	{r4, pc}

00008318 <CKernel::Initialize()>:
    8318:	e92d4070 	push	{r4, r5, r6, lr}
    831c:	e2805e89 	add	r5, r0, #2192	; 0x890
    8320:	e285500c 	add	r5, r5, #12
    8324:	e24dd008 	sub	sp, sp, #8
    8328:	e1a04000 	mov	r4, r0
    832c:	e1a00005 	mov	r0, r5
    8330:	eb00a5f7 	bl	31b14 <CScreenDevice::Initialize()>
    8334:	e3500000 	cmp	r0, #0
    8338:	1a000002 	bne	8348 <CKernel::Initialize()+0x30>
    833c:	e3a00000 	mov	r0, #0
    8340:	e28dd008 	add	sp, sp, #8
    8344:	e8bd8070 	pop	{r4, r5, r6, pc}
    8348:	e2840e92 	add	r0, r4, #2336	; 0x920
    834c:	e3a06000 	mov	r6, #0
    8350:	e3a03001 	mov	r3, #1
    8354:	e3a02008 	mov	r2, #8
    8358:	e280000c 	add	r0, r0, #12
    835c:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8360:	e3401001 	movt	r1, #1
    8364:	e58d6000 	str	r6, [sp]
    8368:	eb00a925 	bl	32804 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    836c:	e1500006 	cmp	r0, r6
    8370:	0afffff1 	beq	833c <CKernel::Initialize()+0x24>
    8374:	e1a00004 	mov	r0, r4
    8378:	eb009988 	bl	2e9a0 <CKernelOptions::GetLogDevice() const>
    837c:	e1a01000 	mov	r1, r0
    8380:	e2840e89 	add	r0, r4, #2192	; 0x890
    8384:	e1a02006 	mov	r2, r6
    8388:	e2800004 	add	r0, r0, #4
    838c:	eb00947e 	bl	2d58c <CDeviceNameService::GetDevice(char const*, bool)>
    8390:	e1a01000 	mov	r1, r0
    8394:	e1510006 	cmp	r1, r6
    8398:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    839c:	01a01005 	moveq	r1, r5
    83a0:	e2800038 	add	r0, r0, #56	; 0x38
    83a4:	eb009d9c 	bl	2fa1c <CLogger::Initialize(CDevice*)>
    83a8:	e1500006 	cmp	r0, r6
    83ac:	0affffe2 	beq	833c <CKernel::Initialize()+0x24>
    83b0:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    83b4:	e2800018 	add	r0, r0, #24
    83b8:	eb00c0b2 	bl	38688 <CInterruptSystem::Initialize()>
    83bc:	e1500006 	cmp	r0, r6
    83c0:	0affffdd 	beq	833c <CKernel::Initialize()+0x24>
    83c4:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    83c8:	e2800038 	add	r0, r0, #56	; 0x38
    83cc:	eb00b54d 	bl	35908 <CTimer::Initialize()>
    83d0:	e1500006 	cmp	r0, r6
    83d4:	0affffd8 	beq	833c <CKernel::Initialize()+0x24>
    83d8:	e2840d77 	add	r0, r4, #7616	; 0x1dc0
    83dc:	e2800034 	add	r0, r0, #52	; 0x34
    83e0:	eb009591 	bl	2da2c <CGPIOManager::Initialize()>
    83e4:	e1500006 	cmp	r0, r6
    83e8:	0affffd3 	beq	833c <CKernel::Initialize()+0x24>
    83ec:	e2840d7b 	add	r0, r4, #7872	; 0x1ec0
    83f0:	e3a01001 	mov	r1, #1
    83f4:	e280003c 	add	r0, r0, #60	; 0x3c
    83f8:	eb000c4f 	bl	b53c <CDWHCIDevice::Initialize(bool)>
    83fc:	e1500006 	cmp	r0, r6
    8400:	0affffcd 	beq	833c <CKernel::Initialize()+0x24>
    8404:	e2840a02 	add	r0, r4, #8192	; 0x2000
    8408:	e3a01001 	mov	r1, #1
    840c:	e2800004 	add	r0, r0, #4
    8410:	e28dd008 	add	sp, sp, #8
    8414:	e8bd4070 	pop	{r4, r5, r6, lr}
    8418:	ea005fa0 	b	202a0 <CNetSubSystem::Initialize(bool)>

0000841c <CKernel::Run()>:
    841c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8420:	e1a04000 	mov	r4, r0
    8424:	e2805d73 	add	r5, r0, #7360	; 0x1cc0
    8428:	e24dd09c 	sub	sp, sp, #156	; 0x9c
    842c:	e2855038 	add	r5, r5, #56	; 0x38
    8430:	e2841a02 	add	r1, r4, #8192	; 0x2000
    8434:	e3a02003 	mov	r2, #3
    8438:	e2819004 	add	r9, r1, #4
    843c:	e1a00005 	mov	r0, r5
    8440:	e30a38f8 	movw	r3, #43256	; 0xa8f8
    8444:	e3403003 	movt	r3, #3
    8448:	e30a1a00 	movw	r1, #43520	; 0xaa00
    844c:	e3401003 	movt	r1, #3
    8450:	e58d900c 	str	r9, [sp, #12]
    8454:	eb009d64 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8458:	e28d002c 	add	r0, sp, #44	; 0x2c
    845c:	e2847a02 	add	r7, r4, #8192	; 0x2000
    8460:	eb00ac3d 	bl	3355c <CString::CString()>
    8464:	e1a00009 	mov	r0, r9
    8468:	eb006005 	bl	20484 <CNetSubSystem::GetConfig()>
    846c:	e309af22 	movw	sl, #40738	; 0x9f22
    8470:	e34fadcf 	movt	sl, #64975	; 0xfdcf
    8474:	eb00800c 	bl	284ac <CNetConfig::GetIPAddress() const>
    8478:	e28d102c 	add	r1, sp, #44	; 0x2c
    847c:	e30a6a00 	movw	r6, #43520	; 0xaa00
    8480:	e3406003 	movt	r6, #3
    8484:	eb008145 	bl	289a0 <CIPAddress::Format(CString*) const>
    8488:	e3a02003 	mov	r2, #3
    848c:	e1a00005 	mov	r0, r5
    8490:	e30a391c 	movw	r3, #43292	; 0xa91c
    8494:	e3403003 	movt	r3, #3
    8498:	e30a1a00 	movw	r1, #43520	; 0xaa00
    849c:	e3401003 	movt	r1, #3
    84a0:	eb009d51 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84a4:	e2843d77 	add	r3, r4, #7616	; 0x1dc0
    84a8:	e2833034 	add	r3, r3, #52	; 0x34
    84ac:	e3a02000 	mov	r2, #0
    84b0:	e3a01011 	mov	r1, #17
    84b4:	e28d0070 	add	r0, sp, #112	; 0x70
    84b8:	eb0098a9 	bl	2e764 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    84bc:	e1a02004 	mov	r2, r4
    84c0:	e3a03001 	mov	r3, #1
    84c4:	e28d0070 	add	r0, sp, #112	; 0x70
    84c8:	e30810ac 	movw	r1, #32940	; 0x80ac
    84cc:	e3401000 	movt	r1, #0
    84d0:	eb009691 	bl	2df1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>
    84d4:	e3a01001 	mov	r1, #1
    84d8:	e28d0070 	add	r0, sp, #112	; 0x70
    84dc:	e3a04000 	mov	r4, #0
    84e0:	eb0096ed 	bl	2e09c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>
    84e4:	e3a02003 	mov	r2, #3
    84e8:	e1a00005 	mov	r0, r5
    84ec:	e30a3938 	movw	r3, #43320	; 0xa938
    84f0:	e3403003 	movt	r3, #3
    84f4:	e30a1a00 	movw	r1, #43520	; 0xaa00
    84f8:	e3401003 	movt	r1, #3
    84fc:	e30a89ac 	movw	r8, #43436	; 0xa9ac
    8500:	e3408003 	movt	r8, #3
    8504:	eb009d38 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8508:	e28d1014 	add	r1, sp, #20
    850c:	e28d001c 	add	r0, sp, #28
    8510:	e5c74000 	strb	r4, [r7]
    8514:	e58da014 	str	sl, [sp, #20]
    8518:	eb008006 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
    851c:	e28d201c 	add	r2, sp, #28
    8520:	e1a01009 	mov	r1, r9
    8524:	e28d004c 	add	r0, sp, #76	; 0x4c
    8528:	e58d4000 	str	r4, [sp]
    852c:	e3013f90 	movw	r3, #8080	; 0x1f90
    8530:	eb0087e4 	bl	2a4c8 <CHTTPClient::CHTTPClient(CNetSubSystem*, CIPAddress&, unsigned short, char const*)>
    8534:	e30a4954 	movw	r4, #43348	; 0xa954
    8538:	e3404003 	movt	r4, #3
    853c:	e1a03004 	mov	r3, r4
    8540:	e3a02003 	mov	r2, #3
    8544:	e1a01006 	mov	r1, r6
    8548:	e1a00005 	mov	r0, r5
    854c:	eb009d26 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8550:	e5d73000 	ldrb	r3, [r7]
    8554:	e3530000 	cmp	r3, #0
    8558:	0afffff7 	beq	853c <CKernel::Run()+0x120>
    855c:	e1a01006 	mov	r1, r6
    8560:	e3a02003 	mov	r2, #3
    8564:	e1a00005 	mov	r0, r5
    8568:	e30a3960 	movw	r3, #43360	; 0xa960
    856c:	e3403003 	movt	r3, #3
    8570:	eb009d1d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8574:	e3a000a0 	mov	r0, #160	; 0xa0
    8578:	eb00b9c7 	bl	36c9c <operator new(unsigned int)>
    857c:	e1a04000 	mov	r4, r0
    8580:	e59d100c 	ldr	r1, [sp, #12]
    8584:	e3a02006 	mov	r2, #6
    8588:	eb0061c8 	bl	20cb0 <CSocket::CSocket(CNetSubSystem*, int)>
    858c:	e28d1018 	add	r1, sp, #24
    8590:	e28d0024 	add	r0, sp, #36	; 0x24
    8594:	e58da018 	str	sl, [sp, #24]
    8598:	eb007fe6 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
    859c:	e5943000 	ldr	r3, [r4]
    85a0:	e3012f94 	movw	r2, #8084	; 0x1f94
    85a4:	e28d1024 	add	r1, sp, #36	; 0x24
    85a8:	e1a00004 	mov	r0, r4
    85ac:	e593300c 	ldr	r3, [r3, #12]
    85b0:	e12fff33 	blx	r3
    85b4:	e28d003c 	add	r0, sp, #60	; 0x3c
    85b8:	e30a1970 	movw	r1, #43376	; 0xa970
    85bc:	e3401003 	movt	r1, #3
    85c0:	eb00abeb 	bl	33574 <CString::CString(char const*)>
    85c4:	e28d003c 	add	r0, sp, #60	; 0x3c
    85c8:	e30a19b0 	movw	r1, #43440	; 0xa9b0
    85cc:	e3401003 	movt	r1, #3
    85d0:	eb00ac5b 	bl	33744 <CString::Append(char const*)>
    85d4:	e28d003c 	add	r0, sp, #60	; 0x3c
    85d8:	e30a19b8 	movw	r1, #43448	; 0xa9b8
    85dc:	e3401003 	movt	r1, #3
    85e0:	eb00ac57 	bl	33744 <CString::Append(char const*)>
    85e4:	e1a01008 	mov	r1, r8
    85e8:	e28d003c 	add	r0, sp, #60	; 0x3c
    85ec:	eb00ac54 	bl	33744 <CString::Append(char const*)>
    85f0:	e28d003c 	add	r0, sp, #60	; 0x3c
    85f4:	e30a19cc 	movw	r1, #43468	; 0xa9cc
    85f8:	e3401003 	movt	r1, #3
    85fc:	eb00ac50 	bl	33744 <CString::Append(char const*)>
    8600:	e28d003c 	add	r0, sp, #60	; 0x3c
    8604:	e30a19e4 	movw	r1, #43492	; 0xa9e4
    8608:	e3401003 	movt	r1, #3
    860c:	eb00ac4c 	bl	33744 <CString::Append(char const*)>
    8610:	e1a01008 	mov	r1, r8
    8614:	e28d003c 	add	r0, sp, #60	; 0x3c
    8618:	eb00ac49 	bl	33744 <CString::Append(char const*)>
    861c:	e5943000 	ldr	r3, [r4]
    8620:	e28d003c 	add	r0, sp, #60	; 0x3c
    8624:	e593b01c 	ldr	fp, [r3, #28]
    8628:	eb00ac03 	bl	3363c <CString::operator char const*() const>
    862c:	e1a09000 	mov	r9, r0
    8630:	e28d003c 	add	r0, sp, #60	; 0x3c
    8634:	eb00ac3e 	bl	33734 <CString::GetLength() const>
    8638:	e1a01009 	mov	r1, r9
    863c:	e1a02000 	mov	r2, r0
    8640:	e3a03000 	mov	r3, #0
    8644:	e1a00004 	mov	r0, r4
    8648:	e12fff3b 	blx	fp
    864c:	e5943000 	ldr	r3, [r4]
    8650:	e1a00004 	mov	r0, r4
    8654:	e5933004 	ldr	r3, [r3, #4]
    8658:	e12fff33 	blx	r3
    865c:	e3a03000 	mov	r3, #0
    8660:	e28d003c 	add	r0, sp, #60	; 0x3c
    8664:	e5c73000 	strb	r3, [r7]
    8668:	eb00ab88 	bl	33490 <CString::~CString()>
    866c:	e28d0024 	add	r0, sp, #36	; 0x24
    8670:	eb007fd0 	bl	285b8 <CIPAddress::~CIPAddress()>
    8674:	eaffffae 	b	8534 <CKernel::Run()+0x118>

00008678 <_GLOBAL__sub_I__ZN7CKernel6ActLEDE>:
    8678:	e92d4010 	push	{r4, lr}
    867c:	e3044e48 	movw	r4, #20040	; 0x4e48
    8680:	e3404004 	movt	r4, #4
    8684:	e3a01000 	mov	r1, #0
    8688:	e1a00004 	mov	r0, r4
    868c:	eb00900f 	bl	2c6d0 <CActLED::CActLED(bool)>
    8690:	e1a00004 	mov	r0, r4
    8694:	e3042f78 	movw	r2, #20344	; 0x4f78
    8698:	e3402004 	movt	r2, #4
    869c:	e30c17a0 	movw	r1, #51104	; 0xc7a0
    86a0:	e3401002 	movt	r1, #2
    86a4:	e8bd4010 	pop	{r4, lr}
    86a8:	ea00b181 	b	34cb4 <__aeabi_atexit>
    86ac:	00000000 	andeq	r0, r0, r0

000086b0 <CDWHCIDevice::CancelDeviceTransactions(CUSBDevice*)>:
    86b0:	e2800024 	add	r0, r0, #36	; 0x24
    86b4:	ea0010bd 	b	c9b0 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>

000086b8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    86b8:	e3520000 	cmp	r2, #0
    86bc:	e92d4010 	push	{r4, lr}
    86c0:	0a000005 	beq	86dc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    86c4:	e351000f 	cmp	r1, #15
    86c8:	8a000009 	bhi	86f4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x3c>
    86cc:	e0822001 	add	r2, r2, r1
    86d0:	e3a03000 	mov	r3, #0
    86d4:	e5c23070 	strb	r3, [r2, #112]	; 0x70
    86d8:	e8bd8010 	pop	{r4, pc}
    86dc:	e30a1a08 	movw	r1, #43528	; 0xaa08
    86e0:	e3401003 	movt	r1, #3
    86e4:	e30a0a18 	movw	r0, #43544	; 0xaa18
    86e8:	e3400003 	movt	r0, #3
    86ec:	e3a02fbb 	mov	r2, #748	; 0x2ec
    86f0:	eb009072 	bl	2c8c0 <assertion_failed>
    86f4:	e30a1a08 	movw	r1, #43528	; 0xaa08
    86f8:	e3401003 	movt	r1, #3
    86fc:	e30a0a24 	movw	r0, #43556	; 0xaa24
    8700:	e3400003 	movt	r0, #3
    8704:	e30022ef 	movw	r2, #751	; 0x2ef
    8708:	eb00906c 	bl	2c8c0 <assertion_failed>

0000870c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>:
    870c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8710:	e1a05000 	mov	r5, r0
    8714:	e1a04001 	mov	r4, r1
    8718:	e1a01003 	mov	r1, r3
    871c:	e1a07002 	mov	r7, r2
    8720:	e3a06001 	mov	r6, #1
    8724:	eb002c93 	bl	13978 <CUSBHostController::CUSBHostController(bool)>
    8728:	e59f30d8 	ldr	r3, [pc, #216]	; 8808 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xfc>
    872c:	e1a02006 	mov	r2, r6
    8730:	e5853000 	str	r3, [r5]
    8734:	e3a01010 	mov	r1, #16
    8738:	e5854010 	str	r4, [r5, #16]
    873c:	e2850024 	add	r0, r5, #36	; 0x24
    8740:	e3a04000 	mov	r4, #0
    8744:	e5857014 	str	r7, [r5, #20]
    8748:	e5854018 	str	r4, [r5, #24]
    874c:	e585401c 	str	r4, [r5, #28]
    8750:	e5856020 	str	r6, [r5, #32]
    8754:	eb001031 	bl	c820 <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)>
    8758:	e1a01005 	mov	r1, r5
    875c:	e2850088 	add	r0, r5, #136	; 0x88
    8760:	e585606c 	str	r6, [r5, #108]	; 0x6c
    8764:	e5854080 	str	r4, [r5, #128]	; 0x80
    8768:	e5854084 	str	r4, [r5, #132]	; 0x84
    876c:	eb000f5e 	bl	c4ec <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    8770:	e5953010 	ldr	r3, [r5, #16]
    8774:	e5c54094 	strb	r4, [r5, #148]	; 0x94
    8778:	e1530004 	cmp	r3, r4
    877c:	e5c54095 	strb	r4, [r5, #149]	; 0x95
    8780:	0a000014 	beq	87d8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xcc>
    8784:	e5953014 	ldr	r3, [r5, #20]
    8788:	e3530000 	cmp	r3, #0
    878c:	0a000017 	beq	87f0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xe4>
    8790:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
    8794:	e285102c 	add	r1, r5, #44	; 0x2c
    8798:	e285203c 	add	r2, r5, #60	; 0x3c
    879c:	e285004c 	add	r0, r5, #76	; 0x4c
    87a0:	e1a03004 	mov	r3, r4
    87a4:	f4410a8f 	vst1.32	{d16-d17}, [r1]
    87a8:	e1a01004 	mov	r1, r4
    87ac:	f4420a8f 	vst1.32	{d16-d17}, [r2]
    87b0:	e285205c 	add	r2, r5, #92	; 0x5c
    87b4:	f4400a8f 	vst1.32	{d16-d17}, [r0]
    87b8:	f4420a8f 	vst1.32	{d16-d17}, [r2]
    87bc:	e0852003 	add	r2, r5, r3
    87c0:	e2833001 	add	r3, r3, #1
    87c4:	e3530010 	cmp	r3, #16
    87c8:	e5c21070 	strb	r1, [r2, #112]	; 0x70
    87cc:	1afffffa 	bne	87bc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xb0>
    87d0:	e1a00005 	mov	r0, r5
    87d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    87d8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    87dc:	e3401003 	movt	r1, #3
    87e0:	e30a0a44 	movw	r0, #43588	; 0xaa44
    87e4:	e3400003 	movt	r0, #3
    87e8:	e3a0205a 	mov	r2, #90	; 0x5a
    87ec:	eb009033 	bl	2c8c0 <assertion_failed>
    87f0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    87f4:	e3401003 	movt	r1, #3
    87f8:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    87fc:	e3400003 	movt	r0, #3
    8800:	e3a0205b 	mov	r2, #91	; 0x5b
    8804:	eb00902d 	bl	2c8c0 <assertion_failed>
    8808:	0003afb8 	.word	0x0003afb8

0000880c <CDWHCIDevice::DeviceConnected()>:
    880c:	e92d4010 	push	{r4, lr}
    8810:	e3a01d11 	mov	r1, #1088	; 0x440
    8814:	e3431f98 	movt	r1, #16280	; 0x3f98
    8818:	e24dd010 	sub	sp, sp, #16
    881c:	e28d0004 	add	r0, sp, #4
    8820:	eb004776 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8824:	e28d0004 	add	r0, sp, #4
    8828:	eb00477e 	bl	1a628 <CDWHCIRegister::Read()>
    882c:	e1a04000 	mov	r4, r0
    8830:	e28d0004 	add	r0, sp, #4
    8834:	eb00477a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8838:	e2040001 	and	r0, r4, #1
    883c:	e28dd010 	add	sp, sp, #16
    8840:	e8bd8010 	pop	{r4, pc}

00008844 <CDWHCIDevice::GetPortSpeed()>:
    8844:	e92d4010 	push	{r4, lr}
    8848:	e3a01d11 	mov	r1, #1088	; 0x440
    884c:	e3431f98 	movt	r1, #16280	; 0x3f98
    8850:	e24dd010 	sub	sp, sp, #16
    8854:	e28d0004 	add	r0, sp, #4
    8858:	eb004768 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    885c:	e28d0004 	add	r0, sp, #4
    8860:	eb004770 	bl	1a628 <CDWHCIRegister::Read()>
    8864:	e7e108d0 	ubfx	r0, r0, #17, #2
    8868:	e3500003 	cmp	r0, #3
    886c:	12600002 	rsbne	r0, r0, #2
    8870:	03a04004 	moveq	r4, #4
    8874:	16ef4070 	uxtbne	r4, r0
    8878:	e28d0004 	add	r0, sp, #4
    887c:	eb004768 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8880:	e1a00004 	mov	r0, r4
    8884:	e28dd010 	add	sp, sp, #16
    8888:	e8bd8010 	pop	{r4, pc}

0000888c <CDWHCIDevice::OvercurrentDetected()>:
    888c:	e92d4010 	push	{r4, lr}
    8890:	e3a01d11 	mov	r1, #1088	; 0x440
    8894:	e3431f98 	movt	r1, #16280	; 0x3f98
    8898:	e24dd010 	sub	sp, sp, #16
    889c:	e28d0004 	add	r0, sp, #4
    88a0:	eb004756 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    88a4:	e28d0004 	add	r0, sp, #4
    88a8:	eb00475e 	bl	1a628 <CDWHCIRegister::Read()>
    88ac:	e1a04000 	mov	r4, r0
    88b0:	e28d0004 	add	r0, sp, #4
    88b4:	eb00475a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    88b8:	e7e00254 	ubfx	r0, r4, #4, #1
    88bc:	e28dd010 	add	sp, sp, #16
    88c0:	e8bd8010 	pop	{r4, pc}

000088c4 <CDWHCIDevice::DisableRootPort(bool)>:
    88c4:	e92d4030 	push	{r4, r5, lr}
    88c8:	e3a03000 	mov	r3, #0
    88cc:	e1a05001 	mov	r5, r1
    88d0:	e24dd014 	sub	sp, sp, #20
    88d4:	e5c03094 	strb	r3, [r0, #148]	; 0x94
    88d8:	e1a04000 	mov	r4, r0
    88dc:	e3a01d11 	mov	r1, #1088	; 0x440
    88e0:	e3431f98 	movt	r1, #16280	; 0x3f98
    88e4:	e28d0004 	add	r0, sp, #4
    88e8:	eb004744 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    88ec:	e28d0004 	add	r0, sp, #4
    88f0:	eb00474c 	bl	1a628 <CDWHCIRegister::Read()>
    88f4:	e28d0004 	add	r0, sp, #4
    88f8:	e3e01004 	mvn	r1, #4
    88fc:	eb00477d 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8900:	e3550000 	cmp	r5, #0
    8904:	1a000007 	bne	8928 <CDWHCIDevice::DisableRootPort(bool)+0x64>
    8908:	e28d0004 	add	r0, sp, #4
    890c:	eb00474c 	bl	1a644 <CDWHCIRegister::Write()>
    8910:	e2840024 	add	r0, r4, #36	; 0x24
    8914:	eb000fcc 	bl	c84c <CDWHCITransactionQueue::Flush()>
    8918:	e28d0004 	add	r0, sp, #4
    891c:	eb004740 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8920:	e28dd014 	add	sp, sp, #20
    8924:	e8bd8030 	pop	{r4, r5, pc}
    8928:	e28d0004 	add	r0, sp, #4
    892c:	e3e01a01 	mvn	r1, #4096	; 0x1000
    8930:	eb004770 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8934:	eafffff3 	b	8908 <CDWHCIDevice::DisableRootPort(bool)+0x44>

00008938 <CDWHCIDevice::PowerOn()>:
    8938:	e92d4030 	push	{r4, r5, lr}
    893c:	e3a01000 	mov	r1, #0
    8940:	e1a05001 	mov	r5, r1
    8944:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8948:	e28d0008 	add	r0, sp, #8
    894c:	eb008ffc 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    8950:	f2c00013 	vmov.i32	d16, #3	; 0x00000003
    8954:	e28d101c 	add	r1, sp, #28
    8958:	e58d5000 	str	r5, [sp]
    895c:	e3a03014 	mov	r3, #20
    8960:	e28d2010 	add	r2, sp, #16
    8964:	e28d0008 	add	r0, sp, #8
    8968:	f441078f 	vst1.32	{d16}, [r1]
    896c:	e3081001 	movw	r1, #32769	; 0x8001
    8970:	e3401002 	movt	r1, #2
    8974:	eb009044 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8978:	e2504000 	subs	r4, r0, #0
    897c:	0a000003 	beq	8990 <CDWHCIDevice::PowerOn()+0x58>
    8980:	e59d0020 	ldr	r0, [sp, #32]
    8984:	e3100002 	tst	r0, #2
    8988:	02004001 	andeq	r4, r0, #1
    898c:	11a04005 	movne	r4, r5
    8990:	e28d0008 	add	r0, sp, #8
    8994:	eb008ff1 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
    8998:	e1a00004 	mov	r0, r4
    899c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    89a0:	e8bd8030 	pop	{r4, r5, pc}

000089a4 <CDWHCIDevice::Reset()>:
    89a4:	e92d4030 	push	{r4, r5, lr}
    89a8:	e3a04064 	mov	r4, #100	; 0x64
    89ac:	e1a05000 	mov	r5, r0
    89b0:	e24dd014 	sub	sp, sp, #20
    89b4:	e3a02000 	mov	r2, #0
    89b8:	e3a01010 	mov	r1, #16
    89bc:	e3431f98 	movt	r1, #16280	; 0x3f98
    89c0:	e28d0004 	add	r0, sp, #4
    89c4:	eb004711 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    89c8:	e28d0004 	add	r0, sp, #4
    89cc:	eb004715 	bl	1a628 <CDWHCIRegister::Read()>
    89d0:	e3500000 	cmp	r0, #0
    89d4:	aa000016 	bge	8a34 <CDWHCIDevice::Reset()+0x90>
    89d8:	e28d0004 	add	r0, sp, #4
    89dc:	e3a01001 	mov	r1, #1
    89e0:	eb004752 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    89e4:	e28d0004 	add	r0, sp, #4
    89e8:	e3a0400a 	mov	r4, #10
    89ec:	eb004714 	bl	1a644 <CDWHCIRegister::Write()>
    89f0:	e28d0004 	add	r0, sp, #4
    89f4:	eb00470b 	bl	1a628 <CDWHCIRegister::Read()>
    89f8:	e3100001 	tst	r0, #1
    89fc:	0a00001a 	beq	8a6c <CDWHCIDevice::Reset()+0xc8>
    8a00:	e5953014 	ldr	r3, [r5, #20]
    8a04:	e3530000 	cmp	r3, #0
    8a08:	0a000011 	beq	8a54 <CDWHCIDevice::Reset()+0xb0>
    8a0c:	e3a00001 	mov	r0, #1
    8a10:	eb00b41f 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    8a14:	e2544001 	subs	r4, r4, #1
    8a18:	1afffff4 	bne	89f0 <CDWHCIDevice::Reset()+0x4c>
    8a1c:	e3a04000 	mov	r4, #0
    8a20:	e28d0004 	add	r0, sp, #4
    8a24:	eb0046fe 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8a28:	e1a00004 	mov	r0, r4
    8a2c:	e28dd014 	add	sp, sp, #20
    8a30:	e8bd8030 	pop	{r4, r5, pc}
    8a34:	e5953014 	ldr	r3, [r5, #20]
    8a38:	e3530000 	cmp	r3, #0
    8a3c:	0a000004 	beq	8a54 <CDWHCIDevice::Reset()+0xb0>
    8a40:	e3a00001 	mov	r0, #1
    8a44:	eb00b412 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    8a48:	e2544001 	subs	r4, r4, #1
    8a4c:	1affffdd 	bne	89c8 <CDWHCIDevice::Reset()+0x24>
    8a50:	eafffff1 	b	8a1c <CDWHCIDevice::Reset()+0x78>
    8a54:	e30a1a08 	movw	r1, #43528	; 0xaa08
    8a58:	e3401003 	movt	r1, #3
    8a5c:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    8a60:	e3400003 	movt	r0, #3
    8a64:	e3002697 	movw	r2, #1687	; 0x697
    8a68:	eb008f94 	bl	2c8c0 <assertion_failed>
    8a6c:	e3a00064 	mov	r0, #100	; 0x64
    8a70:	e3a04001 	mov	r4, #1
    8a74:	eb00b406 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    8a78:	eaffffe8 	b	8a20 <CDWHCIDevice::Reset()+0x7c>

00008a7c <CDWHCIDevice::InitCore()>:
    8a7c:	e92d4030 	push	{r4, r5, lr}
    8a80:	e3a0100c 	mov	r1, #12
    8a84:	e3431f98 	movt	r1, #16280	; 0x3f98
    8a88:	e24dd034 	sub	sp, sp, #52	; 0x34
    8a8c:	e1a04000 	mov	r4, r0
    8a90:	e1a0000d 	mov	r0, sp
    8a94:	eb0046d9 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8a98:	e1a0000d 	mov	r0, sp
    8a9c:	eb0046e1 	bl	1a628 <CDWHCIRegister::Read()>
    8aa0:	eb0097f3 	bl	2ea74 <CKernelOptions::Get()>
    8aa4:	eb0097c6 	bl	2e9c4 <CKernelOptions::GetUSBFullSpeed() const>
    8aa8:	e3500000 	cmp	r0, #0
    8aac:	1a00007b 	bne	8ca0 <CDWHCIDevice::InitCore()+0x224>
    8ab0:	e1a0000d 	mov	r0, sp
    8ab4:	e3e01601 	mvn	r1, #1048576	; 0x100000
    8ab8:	eb00470e 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8abc:	e3e01501 	mvn	r1, #4194304	; 0x400000
    8ac0:	e1a0000d 	mov	r0, sp
    8ac4:	eb00470b 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8ac8:	e1a0000d 	mov	r0, sp
    8acc:	eb0046dc 	bl	1a644 <CDWHCIRegister::Write()>
    8ad0:	e1a00004 	mov	r0, r4
    8ad4:	ebffffb2 	bl	89a4 <CDWHCIDevice::Reset()>
    8ad8:	e2505000 	subs	r5, r0, #0
    8adc:	0a000068 	beq	8c84 <CDWHCIDevice::InitCore()+0x208>
    8ae0:	e1a0000d 	mov	r0, sp
    8ae4:	eb0046cf 	bl	1a628 <CDWHCIRegister::Read()>
    8ae8:	e1a0000d 	mov	r0, sp
    8aec:	e3e01010 	mvn	r1, #16
    8af0:	eb004700 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8af4:	e3e01008 	mvn	r1, #8
    8af8:	e1a0000d 	mov	r0, sp
    8afc:	eb0046fd 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8b00:	e1a0000d 	mov	r0, sp
    8b04:	eb0046ce 	bl	1a644 <CDWHCIRegister::Write()>
    8b08:	e3a01048 	mov	r1, #72	; 0x48
    8b0c:	e3431f98 	movt	r1, #16280	; 0x3f98
    8b10:	e28d000c 	add	r0, sp, #12
    8b14:	eb0046b9 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8b18:	e28d000c 	add	r0, sp, #12
    8b1c:	eb0046c1 	bl	1a628 <CDWHCIRegister::Read()>
    8b20:	e28d000c 	add	r0, sp, #12
    8b24:	eb0046d4 	bl	1a67c <CDWHCIRegister::Get() const>
    8b28:	e7e101d0 	ubfx	r0, r0, #3, #2
    8b2c:	e3500002 	cmp	r0, #2
    8b30:	1a000064 	bne	8cc8 <CDWHCIDevice::InitCore()+0x24c>
    8b34:	e1a0000d 	mov	r0, sp
    8b38:	eb0046ba 	bl	1a628 <CDWHCIRegister::Read()>
    8b3c:	e28d000c 	add	r0, sp, #12
    8b40:	eb0046cd 	bl	1a67c <CDWHCIRegister::Get() const>
    8b44:	e7e10350 	ubfx	r0, r0, #6, #2
    8b48:	e3500002 	cmp	r0, #2
    8b4c:	0a000040 	beq	8c54 <CDWHCIDevice::InitCore()+0x1d8>
    8b50:	e1a0000d 	mov	r0, sp
    8b54:	e3e01802 	mvn	r1, #131072	; 0x20000
    8b58:	eb0046e6 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8b5c:	e1a0000d 	mov	r0, sp
    8b60:	e3e01702 	mvn	r1, #524288	; 0x80000
    8b64:	eb0046e3 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8b68:	e1a0000d 	mov	r0, sp
    8b6c:	eb0046b4 	bl	1a644 <CDWHCIRegister::Write()>
    8b70:	e5943018 	ldr	r3, [r4, #24]
    8b74:	e3530000 	cmp	r3, #0
    8b78:	1a000058 	bne	8ce0 <CDWHCIDevice::InitCore()+0x264>
    8b7c:	e28d000c 	add	r0, sp, #12
    8b80:	eb0046bd 	bl	1a67c <CDWHCIRegister::Get() const>
    8b84:	e7e30750 	ubfx	r0, r0, #14, #4
    8b88:	e2403003 	sub	r3, r0, #3
    8b8c:	e2800001 	add	r0, r0, #1
    8b90:	e353000c 	cmp	r3, #12
    8b94:	e5840018 	str	r0, [r4, #24]
    8b98:	8a000044 	bhi	8cb0 <CDWHCIDevice::InitCore()+0x234>
    8b9c:	e3a01008 	mov	r1, #8
    8ba0:	e3431f98 	movt	r1, #16280	; 0x3f98
    8ba4:	e28d0018 	add	r0, sp, #24
    8ba8:	eb004694 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8bac:	e28d0018 	add	r0, sp, #24
    8bb0:	eb00469c 	bl	1a628 <CDWHCIRegister::Read()>
    8bb4:	e3a01020 	mov	r1, #32
    8bb8:	e28d0018 	add	r0, sp, #24
    8bbc:	eb0046db 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8bc0:	e3a01010 	mov	r1, #16
    8bc4:	e28d0018 	add	r0, sp, #24
    8bc8:	eb0046d8 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8bcc:	e3e01006 	mvn	r1, #6
    8bd0:	e28d0018 	add	r0, sp, #24
    8bd4:	eb0046c7 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8bd8:	e28d0018 	add	r0, sp, #24
    8bdc:	eb004698 	bl	1a644 <CDWHCIRegister::Write()>
    8be0:	e1a0000d 	mov	r0, sp
    8be4:	eb00468f 	bl	1a628 <CDWHCIRegister::Read()>
    8be8:	e1a0000d 	mov	r0, sp
    8bec:	e3e01c02 	mvn	r1, #512	; 0x200
    8bf0:	eb0046c0 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8bf4:	e3e01c01 	mvn	r1, #256	; 0x100
    8bf8:	e1a0000d 	mov	r0, sp
    8bfc:	eb0046bd 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8c00:	e1a0000d 	mov	r0, sp
    8c04:	eb00468e 	bl	1a644 <CDWHCIRegister::Write()>
    8c08:	e3a01014 	mov	r1, #20
    8c0c:	e3431f98 	movt	r1, #16280	; 0x3f98
    8c10:	e28d0024 	add	r0, sp, #36	; 0x24
    8c14:	eb004679 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8c18:	e28d0024 	add	r0, sp, #36	; 0x24
    8c1c:	eb004704 	bl	1a834 <CDWHCIRegister::SetAll()>
    8c20:	e28d0024 	add	r0, sp, #36	; 0x24
    8c24:	eb004686 	bl	1a644 <CDWHCIRegister::Write()>
    8c28:	e28d0024 	add	r0, sp, #36	; 0x24
    8c2c:	eb00467c 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8c30:	e28d0018 	add	r0, sp, #24
    8c34:	eb00467a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8c38:	e28d000c 	add	r0, sp, #12
    8c3c:	eb004678 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8c40:	e1a0000d 	mov	r0, sp
    8c44:	eb004676 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8c48:	e1a00005 	mov	r0, r5
    8c4c:	e28dd034 	add	sp, sp, #52	; 0x34
    8c50:	e8bd8030 	pop	{r4, r5, pc}
    8c54:	e28d000c 	add	r0, sp, #12
    8c58:	eb004687 	bl	1a67c <CDWHCIRegister::Get() const>
    8c5c:	e7e10450 	ubfx	r0, r0, #8, #2
    8c60:	e3500001 	cmp	r0, #1
    8c64:	1affffb9 	bne	8b50 <CDWHCIDevice::InitCore()+0xd4>
    8c68:	e1a0000d 	mov	r0, sp
    8c6c:	e3a01802 	mov	r1, #131072	; 0x20000
    8c70:	eb0046ae 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8c74:	e3a01702 	mov	r1, #524288	; 0x80000
    8c78:	e1a0000d 	mov	r0, sp
    8c7c:	eb0046ab 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8c80:	eaffffb8 	b	8b68 <CDWHCIDevice::InitCore()+0xec>
    8c84:	eb00998a 	bl	2f2b4 <CLogger::Get()>
    8c88:	e59f1068 	ldr	r1, [pc, #104]	; 8cf8 <CDWHCIDevice::InitCore()+0x27c>
    8c8c:	e3a02001 	mov	r2, #1
    8c90:	e30a3a6c 	movw	r3, #43628	; 0xaa6c
    8c94:	e3403003 	movt	r3, #3
    8c98:	eb009b53 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c9c:	eaffffe7 	b	8c40 <CDWHCIDevice::InitCore()+0x1c4>
    8ca0:	e3a01040 	mov	r1, #64	; 0x40
    8ca4:	e1a0000d 	mov	r0, sp
    8ca8:	eb0046a0 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8cac:	eaffff7f 	b	8ab0 <CDWHCIDevice::InitCore()+0x34>
    8cb0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    8cb4:	e3401003 	movt	r1, #3
    8cb8:	e30a0ac8 	movw	r0, #43720	; 0xaac8
    8cbc:	e3400003 	movt	r0, #3
    8cc0:	e30021bb 	movw	r2, #443	; 0x1bb
    8cc4:	eb008efd 	bl	2c8c0 <assertion_failed>
    8cc8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    8ccc:	e3401003 	movt	r1, #3
    8cd0:	e30a0a7c 	movw	r0, #43644	; 0xaa7c
    8cd4:	e3400003 	movt	r0, #3
    8cd8:	e30021a9 	movw	r2, #425	; 0x1a9
    8cdc:	eb008ef7 	bl	2c8c0 <assertion_failed>
    8ce0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    8ce4:	e3401003 	movt	r1, #3
    8ce8:	e30a0ab4 	movw	r0, #43700	; 0xaab4
    8cec:	e3400003 	movt	r0, #3
    8cf0:	e30021b9 	movw	r2, #441	; 0x1b9
    8cf4:	eb008ef1 	bl	2c8c0 <assertion_failed>
    8cf8:	0003afd4 	.word	0x0003afd4

00008cfc <CDWHCIDevice::EnableGlobalInterrupts()>:
    8cfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8d00:	e3a01008 	mov	r1, #8
    8d04:	e3431f98 	movt	r1, #16280	; 0x3f98
    8d08:	e24dd014 	sub	sp, sp, #20
    8d0c:	e28d0004 	add	r0, sp, #4
    8d10:	eb00463a 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8d14:	e28d0004 	add	r0, sp, #4
    8d18:	eb004642 	bl	1a628 <CDWHCIRegister::Read()>
    8d1c:	e3a01001 	mov	r1, #1
    8d20:	e28d0004 	add	r0, sp, #4
    8d24:	eb004681 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8d28:	e28d0004 	add	r0, sp, #4
    8d2c:	eb004644 	bl	1a644 <CDWHCIRegister::Write()>
    8d30:	e28d0004 	add	r0, sp, #4
    8d34:	eb00463a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8d38:	e28dd014 	add	sp, sp, #20
    8d3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008d40 <CDWHCIDevice::EnableCommonInterrupts()>:
    8d40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8d44:	e3a01014 	mov	r1, #20
    8d48:	e3431f98 	movt	r1, #16280	; 0x3f98
    8d4c:	e24dd014 	sub	sp, sp, #20
    8d50:	e28d0004 	add	r0, sp, #4
    8d54:	eb004629 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8d58:	e28d0004 	add	r0, sp, #4
    8d5c:	eb0046b4 	bl	1a834 <CDWHCIRegister::SetAll()>
    8d60:	e28d0004 	add	r0, sp, #4
    8d64:	eb004636 	bl	1a644 <CDWHCIRegister::Write()>
    8d68:	e28d0004 	add	r0, sp, #4
    8d6c:	eb00462c 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8d70:	e28dd014 	add	sp, sp, #20
    8d74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008d78 <CDWHCIDevice::EnableHostInterrupts()>:
    8d78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8d7c:	e3a02000 	mov	r2, #0
    8d80:	e3a01018 	mov	r1, #24
    8d84:	e3431f98 	movt	r1, #16280	; 0x3f98
    8d88:	e24dd01c 	sub	sp, sp, #28
    8d8c:	e1a0000d 	mov	r0, sp
    8d90:	eb00461e 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8d94:	e1a0000d 	mov	r0, sp
    8d98:	eb004629 	bl	1a644 <CDWHCIRegister::Write()>
    8d9c:	e3a01014 	mov	r1, #20
    8da0:	e3431f98 	movt	r1, #16280	; 0x3f98
    8da4:	e28d000c 	add	r0, sp, #12
    8da8:	eb004614 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8dac:	e28d000c 	add	r0, sp, #12
    8db0:	eb00469f 	bl	1a834 <CDWHCIRegister::SetAll()>
    8db4:	e28d000c 	add	r0, sp, #12
    8db8:	eb004621 	bl	1a644 <CDWHCIRegister::Write()>
    8dbc:	e28d000c 	add	r0, sp, #12
    8dc0:	eb004617 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8dc4:	e1a0000d 	mov	r0, sp
    8dc8:	eb004616 	bl	1a628 <CDWHCIRegister::Read()>
    8dcc:	e1a0000d 	mov	r0, sp
    8dd0:	e3a01008 	mov	r1, #8
    8dd4:	e3401200 	movt	r1, #512	; 0x200
    8dd8:	eb004654 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8ddc:	eb002b91 	bl	13c28 <CUSBHostController::IsPlugAndPlay()>
    8de0:	e3500000 	cmp	r0, #0
    8de4:	1a000005 	bne	8e00 <CDWHCIDevice::EnableHostInterrupts()+0x88>
    8de8:	e1a0000d 	mov	r0, sp
    8dec:	eb004614 	bl	1a644 <CDWHCIRegister::Write()>
    8df0:	e1a0000d 	mov	r0, sp
    8df4:	eb00460a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8df8:	e28dd01c 	add	sp, sp, #28
    8dfc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8e00:	e3a01421 	mov	r1, #553648128	; 0x21000000
    8e04:	e1a0000d 	mov	r0, sp
    8e08:	eb004648 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8e0c:	eafffff5 	b	8de8 <CDWHCIDevice::EnableHostInterrupts()+0x70>

00008e10 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    8e10:	e92d4030 	push	{r4, r5, lr}
    8e14:	e1a04000 	mov	r4, r0
    8e18:	e1a05001 	mov	r5, r1
    8e1c:	e24dd014 	sub	sp, sp, #20
    8e20:	e3001418 	movw	r1, #1048	; 0x418
    8e24:	e3431f98 	movt	r1, #16280	; 0x3f98
    8e28:	e28d0004 	add	r0, sp, #4
    8e2c:	eb0045f3 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8e30:	e594006c 	ldr	r0, [r4, #108]	; 0x6c
    8e34:	e3500000 	cmp	r0, #0
    8e38:	1a00000e 	bne	8e78 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    8e3c:	e28d0004 	add	r0, sp, #4
    8e40:	eb0045f8 	bl	1a628 <CDWHCIRegister::Read()>
    8e44:	e3a01001 	mov	r1, #1
    8e48:	e28d0004 	add	r0, sp, #4
    8e4c:	e1a01511 	lsl	r1, r1, r5
    8e50:	eb004636 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8e54:	e28d0004 	add	r0, sp, #4
    8e58:	eb0045f9 	bl	1a644 <CDWHCIRegister::Write()>
    8e5c:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    8e60:	e3530000 	cmp	r3, #0
    8e64:	1a000005 	bne	8e80 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    8e68:	e28d0004 	add	r0, sp, #4
    8e6c:	eb0045ec 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8e70:	e28dd014 	add	sp, sp, #20
    8e74:	e8bd8030 	pop	{r4, r5, pc}
    8e78:	eb00bd9f 	bl	384fc <EnterCritical>
    8e7c:	eaffffee 	b	8e3c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x2c>
    8e80:	eb00bdc8 	bl	385a8 <LeaveCritical>
    8e84:	e28d0004 	add	r0, sp, #4
    8e88:	eb0045e5 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8e8c:	e28dd014 	add	sp, sp, #20
    8e90:	e8bd8030 	pop	{r4, r5, pc}

00008e94 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    8e94:	e92d4030 	push	{r4, r5, lr}
    8e98:	e1a04000 	mov	r4, r0
    8e9c:	e1a05001 	mov	r5, r1
    8ea0:	e24dd014 	sub	sp, sp, #20
    8ea4:	e3001418 	movw	r1, #1048	; 0x418
    8ea8:	e3431f98 	movt	r1, #16280	; 0x3f98
    8eac:	e28d0004 	add	r0, sp, #4
    8eb0:	eb0045d2 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8eb4:	e594006c 	ldr	r0, [r4, #108]	; 0x6c
    8eb8:	e3500000 	cmp	r0, #0
    8ebc:	1a00000e 	bne	8efc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    8ec0:	e28d0004 	add	r0, sp, #4
    8ec4:	eb0045d7 	bl	1a628 <CDWHCIRegister::Read()>
    8ec8:	e3a01001 	mov	r1, #1
    8ecc:	e28d0004 	add	r0, sp, #4
    8ed0:	e1e01511 	mvn	r1, r1, lsl r5
    8ed4:	eb004607 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8ed8:	e28d0004 	add	r0, sp, #4
    8edc:	eb0045d8 	bl	1a644 <CDWHCIRegister::Write()>
    8ee0:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    8ee4:	e3530000 	cmp	r3, #0
    8ee8:	1a000005 	bne	8f04 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    8eec:	e28d0004 	add	r0, sp, #4
    8ef0:	eb0045cb 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8ef4:	e28dd014 	add	sp, sp, #20
    8ef8:	e8bd8030 	pop	{r4, r5, pc}
    8efc:	eb00bd7e 	bl	384fc <EnterCritical>
    8f00:	eaffffee 	b	8ec0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x2c>
    8f04:	eb00bda7 	bl	385a8 <LeaveCritical>
    8f08:	e28d0004 	add	r0, sp, #4
    8f0c:	eb0045c4 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8f10:	e28dd014 	add	sp, sp, #20
    8f14:	e8bd8030 	pop	{r4, r5, pc}

00008f18 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    8f18:	e92d4030 	push	{r4, r5, lr}
    8f1c:	e3a02000 	mov	r2, #0
    8f20:	e1a04001 	mov	r4, r1
    8f24:	e24dd014 	sub	sp, sp, #20
    8f28:	e3a01010 	mov	r1, #16
    8f2c:	e3431f98 	movt	r1, #16280	; 0x3f98
    8f30:	e1a05000 	mov	r5, r0
    8f34:	e28d0004 	add	r0, sp, #4
    8f38:	eb0045b4 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8f3c:	e3a01020 	mov	r1, #32
    8f40:	e28d0004 	add	r0, sp, #4
    8f44:	eb0045f9 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8f48:	e28d0004 	add	r0, sp, #4
    8f4c:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    8f50:	eb0045e8 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    8f54:	e1a01304 	lsl	r1, r4, #6
    8f58:	e28d0004 	add	r0, sp, #4
    8f5c:	e3a0400a 	mov	r4, #10
    8f60:	eb0045f2 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    8f64:	e28d0004 	add	r0, sp, #4
    8f68:	eb0045b5 	bl	1a644 <CDWHCIRegister::Write()>
    8f6c:	e28d0004 	add	r0, sp, #4
    8f70:	eb0045ac 	bl	1a628 <CDWHCIRegister::Read()>
    8f74:	e3100020 	tst	r0, #32
    8f78:	1a000005 	bne	8f94 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x7c>
    8f7c:	e3a00001 	mov	r0, #1
    8f80:	eb00b2d2 	bl	35ad0 <CTimer::SimpleusDelay(unsigned int)>
    8f84:	e28d0004 	add	r0, sp, #4
    8f88:	eb0045a5 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8f8c:	e28dd014 	add	sp, sp, #20
    8f90:	e8bd8030 	pop	{r4, r5, pc}
    8f94:	e5953014 	ldr	r3, [r5, #20]
    8f98:	e3530000 	cmp	r3, #0
    8f9c:	0a000007 	beq	8fc0 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0xa8>
    8fa0:	e3a00001 	mov	r0, #1
    8fa4:	eb00b2ba 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    8fa8:	e2544001 	subs	r4, r4, #1
    8fac:	1affffee 	bne	8f6c <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x54>
    8fb0:	e28d0004 	add	r0, sp, #4
    8fb4:	eb00459a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    8fb8:	e28dd014 	add	sp, sp, #20
    8fbc:	e8bd8030 	pop	{r4, r5, pc}
    8fc0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    8fc4:	e3401003 	movt	r1, #3
    8fc8:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    8fcc:	e3400003 	movt	r0, #3
    8fd0:	e3002697 	movw	r2, #1687	; 0x697
    8fd4:	eb008e39 	bl	2c8c0 <assertion_failed>

00008fd8 <CDWHCIDevice::FlushRxFIFO()>:
    8fd8:	e92d4030 	push	{r4, r5, lr}
    8fdc:	e3a02000 	mov	r2, #0
    8fe0:	e1a05000 	mov	r5, r0
    8fe4:	e24dd014 	sub	sp, sp, #20
    8fe8:	e3a01010 	mov	r1, #16
    8fec:	e3431f98 	movt	r1, #16280	; 0x3f98
    8ff0:	e28d0004 	add	r0, sp, #4
    8ff4:	eb004585 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8ff8:	e28d0004 	add	r0, sp, #4
    8ffc:	e3a01010 	mov	r1, #16
    9000:	e3a0400a 	mov	r4, #10
    9004:	eb0045c9 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9008:	e28d0004 	add	r0, sp, #4
    900c:	eb00458c 	bl	1a644 <CDWHCIRegister::Write()>
    9010:	e28d0004 	add	r0, sp, #4
    9014:	eb004583 	bl	1a628 <CDWHCIRegister::Read()>
    9018:	e3100010 	tst	r0, #16
    901c:	1a000005 	bne	9038 <CDWHCIDevice::FlushRxFIFO()+0x60>
    9020:	e3a00001 	mov	r0, #1
    9024:	eb00b2a9 	bl	35ad0 <CTimer::SimpleusDelay(unsigned int)>
    9028:	e28d0004 	add	r0, sp, #4
    902c:	eb00457c 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9030:	e28dd014 	add	sp, sp, #20
    9034:	e8bd8030 	pop	{r4, r5, pc}
    9038:	e5953014 	ldr	r3, [r5, #20]
    903c:	e3530000 	cmp	r3, #0
    9040:	0a000007 	beq	9064 <CDWHCIDevice::FlushRxFIFO()+0x8c>
    9044:	e3a00001 	mov	r0, #1
    9048:	eb00b291 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    904c:	e2544001 	subs	r4, r4, #1
    9050:	1affffee 	bne	9010 <CDWHCIDevice::FlushRxFIFO()+0x38>
    9054:	e28d0004 	add	r0, sp, #4
    9058:	eb004571 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    905c:	e28dd014 	add	sp, sp, #20
    9060:	e8bd8030 	pop	{r4, r5, pc}
    9064:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9068:	e3401003 	movt	r1, #3
    906c:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    9070:	e3400003 	movt	r0, #3
    9074:	e3002697 	movw	r2, #1687	; 0x697
    9078:	eb008e10 	bl	2c8c0 <assertion_failed>

0000907c <CDWHCIDevice::InitHost()>:
    907c:	e92d4030 	push	{r4, r5, lr}
    9080:	e3a02000 	mov	r2, #0
    9084:	e1a04000 	mov	r4, r0
    9088:	e24dd064 	sub	sp, sp, #100	; 0x64
    908c:	e3a01c0e 	mov	r1, #3584	; 0xe00
    9090:	e3431f98 	movt	r1, #16280	; 0x3f98
    9094:	e1a0000d 	mov	r0, sp
    9098:	eb00455c 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    909c:	e1a0000d 	mov	r0, sp
    90a0:	eb004567 	bl	1a644 <CDWHCIRegister::Write()>
    90a4:	e3a01b01 	mov	r1, #1024	; 0x400
    90a8:	e3431f98 	movt	r1, #16280	; 0x3f98
    90ac:	e28d000c 	add	r0, sp, #12
    90b0:	eb004552 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    90b4:	e28d000c 	add	r0, sp, #12
    90b8:	eb00455a 	bl	1a628 <CDWHCIRegister::Read()>
    90bc:	e28d000c 	add	r0, sp, #12
    90c0:	e3e01003 	mvn	r1, #3
    90c4:	eb00458b 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    90c8:	e3a01048 	mov	r1, #72	; 0x48
    90cc:	e3431f98 	movt	r1, #16280	; 0x3f98
    90d0:	e28d0018 	add	r0, sp, #24
    90d4:	eb004549 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    90d8:	e3a0100c 	mov	r1, #12
    90dc:	e3431f98 	movt	r1, #16280	; 0x3f98
    90e0:	e28d0024 	add	r0, sp, #36	; 0x24
    90e4:	eb004545 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    90e8:	e28d0018 	add	r0, sp, #24
    90ec:	eb00454d 	bl	1a628 <CDWHCIRegister::Read()>
    90f0:	e7e10350 	ubfx	r0, r0, #6, #2
    90f4:	e3500002 	cmp	r0, #2
    90f8:	0a00004c 	beq	9230 <CDWHCIDevice::InitHost()+0x1b4>
    90fc:	e3a01000 	mov	r1, #0
    9100:	e28d000c 	add	r0, sp, #12
    9104:	eb004589 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9108:	e28d000c 	add	r0, sp, #12
    910c:	eb00454c 	bl	1a644 <CDWHCIRegister::Write()>
    9110:	e3a02b01 	mov	r2, #1024	; 0x400
    9114:	e3a01024 	mov	r1, #36	; 0x24
    9118:	e3431f98 	movt	r1, #16280	; 0x3f98
    911c:	e28d0030 	add	r0, sp, #48	; 0x30
    9120:	eb00453a 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9124:	e28d0030 	add	r0, sp, #48	; 0x30
    9128:	eb004545 	bl	1a644 <CDWHCIRegister::Write()>
    912c:	e3a02000 	mov	r2, #0
    9130:	e3a01028 	mov	r1, #40	; 0x28
    9134:	e3431f98 	movt	r1, #16280	; 0x3f98
    9138:	e28d003c 	add	r0, sp, #60	; 0x3c
    913c:	eb004533 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9140:	e3a01b01 	mov	r1, #1024	; 0x400
    9144:	e28d003c 	add	r0, sp, #60	; 0x3c
    9148:	eb004578 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    914c:	e3a01301 	mov	r1, #67108864	; 0x4000000
    9150:	e28d003c 	add	r0, sp, #60	; 0x3c
    9154:	eb004575 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9158:	e28d003c 	add	r0, sp, #60	; 0x3c
    915c:	eb004538 	bl	1a644 <CDWHCIRegister::Write()>
    9160:	e3a02000 	mov	r2, #0
    9164:	e3a01c01 	mov	r1, #256	; 0x100
    9168:	e3431f98 	movt	r1, #16280	; 0x3f98
    916c:	e28d0048 	add	r0, sp, #72	; 0x48
    9170:	eb004526 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9174:	e3a01b02 	mov	r1, #2048	; 0x800
    9178:	e28d0048 	add	r0, sp, #72	; 0x48
    917c:	eb00456b 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9180:	e3a01301 	mov	r1, #67108864	; 0x4000000
    9184:	e28d0048 	add	r0, sp, #72	; 0x48
    9188:	eb004568 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    918c:	e28d0048 	add	r0, sp, #72	; 0x48
    9190:	eb00452b 	bl	1a644 <CDWHCIRegister::Write()>
    9194:	e3a01010 	mov	r1, #16
    9198:	e1a00004 	mov	r0, r4
    919c:	ebffff5d 	bl	8f18 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    91a0:	e1a00004 	mov	r0, r4
    91a4:	ebffff8b 	bl	8fd8 <CDWHCIDevice::FlushRxFIFO()>
    91a8:	e3a01d11 	mov	r1, #1088	; 0x440
    91ac:	e3431f98 	movt	r1, #16280	; 0x3f98
    91b0:	e28d0054 	add	r0, sp, #84	; 0x54
    91b4:	eb004511 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    91b8:	e28d0054 	add	r0, sp, #84	; 0x54
    91bc:	eb004519 	bl	1a628 <CDWHCIRegister::Read()>
    91c0:	e28d0054 	add	r0, sp, #84	; 0x54
    91c4:	e3e0102e 	mvn	r1, #46	; 0x2e
    91c8:	eb00454a 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    91cc:	e28d0054 	add	r0, sp, #84	; 0x54
    91d0:	eb004529 	bl	1a67c <CDWHCIRegister::Get() const>
    91d4:	e3100a01 	tst	r0, #4096	; 0x1000
    91d8:	0a000021 	beq	9264 <CDWHCIDevice::InitHost()+0x1e8>
    91dc:	e1a00004 	mov	r0, r4
    91e0:	ebfffee4 	bl	8d78 <CDWHCIDevice::EnableHostInterrupts()>
    91e4:	e28d0054 	add	r0, sp, #84	; 0x54
    91e8:	eb00450d 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    91ec:	e28d0048 	add	r0, sp, #72	; 0x48
    91f0:	eb00450b 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    91f4:	e28d003c 	add	r0, sp, #60	; 0x3c
    91f8:	eb004509 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    91fc:	e28d0030 	add	r0, sp, #48	; 0x30
    9200:	eb004507 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9204:	e28d0024 	add	r0, sp, #36	; 0x24
    9208:	eb004505 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    920c:	e28d0018 	add	r0, sp, #24
    9210:	eb004503 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9214:	e28d000c 	add	r0, sp, #12
    9218:	eb004501 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    921c:	e1a0000d 	mov	r0, sp
    9220:	eb0044ff 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9224:	e3a00001 	mov	r0, #1
    9228:	e28dd064 	add	sp, sp, #100	; 0x64
    922c:	e8bd8030 	pop	{r4, r5, pc}
    9230:	e28d0018 	add	r0, sp, #24
    9234:	eb004510 	bl	1a67c <CDWHCIRegister::Get() const>
    9238:	e7e15450 	ubfx	r5, r0, #8, #2
    923c:	e3550001 	cmp	r5, #1
    9240:	1affffad 	bne	90fc <CDWHCIDevice::InitHost()+0x80>
    9244:	e28d0024 	add	r0, sp, #36	; 0x24
    9248:	eb0044f6 	bl	1a628 <CDWHCIRegister::Read()>
    924c:	e3100802 	tst	r0, #131072	; 0x20000
    9250:	0affffa9 	beq	90fc <CDWHCIDevice::InitHost()+0x80>
    9254:	e1a01005 	mov	r1, r5
    9258:	e28d000c 	add	r0, sp, #12
    925c:	eb004533 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9260:	eaffffa8 	b	9108 <CDWHCIDevice::InitHost()+0x8c>
    9264:	e28d0054 	add	r0, sp, #84	; 0x54
    9268:	e3a01a01 	mov	r1, #4096	; 0x1000
    926c:	eb00452f 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9270:	e28d0054 	add	r0, sp, #84	; 0x54
    9274:	eb0044f2 	bl	1a644 <CDWHCIRegister::Write()>
    9278:	eaffffd7 	b	91dc <CDWHCIDevice::InitHost()+0x160>

0000927c <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>:
    927c:	e92d4030 	push	{r4, r5, lr}
    9280:	e2515000 	subs	r5, r1, #0
    9284:	e24dd01c 	sub	sp, sp, #28
    9288:	0a00001a 	beq	92f8 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x7c>
    928c:	e1a04000 	mov	r4, r0
    9290:	e1a00005 	mov	r0, r5
    9294:	eb00120a 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    9298:	e2503000 	subs	r3, r0, #0
    929c:	0a000008 	beq	92c4 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x48>
    92a0:	e5933000 	ldr	r3, [r3]
    92a4:	e5933014 	ldr	r3, [r3, #20]
    92a8:	e12fff33 	blx	r3
    92ac:	e1a02000 	mov	r2, r0
    92b0:	e1a01005 	mov	r1, r5
    92b4:	e2840024 	add	r0, r4, #36	; 0x24
    92b8:	e28dd01c 	add	sp, sp, #28
    92bc:	e8bd4030 	pop	{r4, r5, lr}
    92c0:	ea000e26 	b	cb60 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
    92c4:	e28d000c 	add	r0, sp, #12
    92c8:	e3001408 	movw	r1, #1032	; 0x408
    92cc:	e3431f98 	movt	r1, #16280	; 0x3f98
    92d0:	eb0044ca 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    92d4:	e28d000c 	add	r0, sp, #12
    92d8:	eb0044d2 	bl	1a628 <CDWHCIRegister::Read()>
    92dc:	e2802001 	add	r2, r0, #1
    92e0:	e28d000c 	add	r0, sp, #12
    92e4:	e7ed2052 	ubfx	r2, r2, #0, #14
    92e8:	e58d2004 	str	r2, [sp, #4]
    92ec:	eb0044cc 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    92f0:	e59d2004 	ldr	r2, [sp, #4]
    92f4:	eaffffed 	b	92b0 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x34>
    92f8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    92fc:	e3401003 	movt	r1, #3
    9300:	e30b03ac 	movw	r0, #45996	; 0xb3ac
    9304:	e3400003 	movt	r0, #3
    9308:	e3a02fca 	mov	r2, #808	; 0x328
    930c:	eb008d6b 	bl	2c8c0 <assertion_failed>

00009310 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    9310:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9314:	e2515000 	subs	r5, r1, #0
    9318:	e24dd008 	sub	sp, sp, #8
    931c:	0a000024 	beq	93b4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xa4>
    9320:	e1a06000 	mov	r6, r0
    9324:	e3a00c01 	mov	r0, #256	; 0x100
    9328:	e1a07002 	mov	r7, r2
    932c:	e1a08003 	mov	r8, r3
    9330:	eb0011e5 	bl	dacc <CDWHCITransferStageData::operator new(unsigned int)>
    9334:	e59d1020 	ldr	r1, [sp, #32]
    9338:	e1a04000 	mov	r4, r0
    933c:	e1a03007 	mov	r3, r7
    9340:	e1a02005 	mov	r2, r5
    9344:	e58d1004 	str	r1, [sp, #4]
    9348:	e58d8000 	str	r8, [sp]
    934c:	e3a01010 	mov	r1, #16
    9350:	eb000ebc 	bl	ce48 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    9354:	e1a00004 	mov	r0, r4
    9358:	eb001116 	bl	d7b8 <CDWHCITransferStageData::IsSplit() const>
    935c:	e2501000 	subs	r1, r0, #0
    9360:	0a000010 	beq	93a8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x98>
    9364:	e3a01001 	mov	r1, #1
    9368:	e1a00004 	mov	r0, r4
    936c:	eb00108a 	bl	d59c <CDWHCITransferStageData::SetState(unsigned int)>
    9370:	e3a01000 	mov	r1, #0
    9374:	e1a00004 	mov	r0, r4
    9378:	eb00107b 	bl	d56c <CDWHCITransferStageData::SetSplitComplete(bool)>
    937c:	e1a00004 	mov	r0, r4
    9380:	eb0011cf 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    9384:	e5903000 	ldr	r3, [r0]
    9388:	e5933008 	ldr	r3, [r3, #8]
    938c:	e12fff33 	blx	r3
    9390:	e1a00006 	mov	r0, r6
    9394:	e1a01004 	mov	r1, r4
    9398:	ebffffb7 	bl	927c <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    939c:	e3a00001 	mov	r0, #1
    93a0:	e28dd008 	add	sp, sp, #8
    93a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    93a8:	e1a00004 	mov	r0, r4
    93ac:	eb00107a 	bl	d59c <CDWHCITransferStageData::SetState(unsigned int)>
    93b0:	eafffff6 	b	9390 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x80>
    93b4:	e30a1a08 	movw	r1, #43528	; 0xaa08
    93b8:	e3401003 	movt	r1, #3
    93bc:	e30a0b00 	movw	r0, #43776	; 0xab00
    93c0:	e3400003 	movt	r0, #3
    93c4:	e30022f7 	movw	r2, #759	; 0x2f7
    93c8:	eb008d3c 	bl	2c8c0 <assertion_failed>

000093cc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    93cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    93d0:	e5d03095 	ldrb	r3, [r0, #149]	; 0x95
    93d4:	e24dd00c 	sub	sp, sp, #12
    93d8:	e21350ff 	ands	r5, r3, #255	; 0xff
    93dc:	1a00001b 	bne	9450 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x84>
    93e0:	e1a04001 	mov	r4, r1
    93e4:	e3510000 	cmp	r1, #0
    93e8:	0a000021 	beq	9474 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa8>
    93ec:	e1a07000 	mov	r7, r0
    93f0:	e1a00001 	mov	r0, r1
    93f4:	e1a06002 	mov	r6, r2
    93f8:	eb00341f 	bl	1647c <CUSBRequest::GetEndpoint() const>
    93fc:	eb001b0c 	bl	10034 <CUSBEndpoint::GetType() const>
    9400:	e3500000 	cmp	r0, #0
    9404:	0a000020 	beq	948c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xc0>
    9408:	e1a00004 	mov	r0, r4
    940c:	eb003467 	bl	165b0 <CUSBRequest::GetBufLen() const>
    9410:	e3500000 	cmp	r0, #0
    9414:	0a000010 	beq	945c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    9418:	e1a01005 	mov	r1, r5
    941c:	e1a00004 	mov	r0, r4
    9420:	eb00341f 	bl	164a4 <CUSBRequest::SetStatus(int)>
    9424:	e1a00004 	mov	r0, r4
    9428:	eb003413 	bl	1647c <CUSBRequest::GetEndpoint() const>
    942c:	eb001b02 	bl	1003c <CUSBEndpoint::IsDirectionIn() const>
    9430:	e1a03005 	mov	r3, r5
    9434:	e1a02000 	mov	r2, r0
    9438:	e1a01004 	mov	r1, r4
    943c:	e1a00007 	mov	r0, r7
    9440:	e58d6000 	str	r6, [sp]
    9444:	ebffffb1 	bl	9310 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    9448:	e28dd00c 	add	sp, sp, #12
    944c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9450:	e3a00000 	mov	r0, #0
    9454:	e28dd00c 	add	sp, sp, #12
    9458:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    945c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9460:	e3401003 	movt	r1, #3
    9464:	e30a0b44 	movw	r0, #43844	; 0xab44
    9468:	e3400003 	movt	r0, #3
    946c:	e3002139 	movw	r2, #313	; 0x139
    9470:	eb008d12 	bl	2c8c0 <assertion_failed>
    9474:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9478:	e3401003 	movt	r1, #3
    947c:	e30a0b00 	movw	r0, #43776	; 0xab00
    9480:	e3400003 	movt	r0, #3
    9484:	e3002137 	movw	r2, #311	; 0x137
    9488:	eb008d0c 	bl	2c8c0 <assertion_failed>
    948c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9490:	e3401003 	movt	r1, #3
    9494:	e30a0b0c 	movw	r0, #43788	; 0xab0c
    9498:	e3400003 	movt	r0, #3
    949c:	e3a02f4e 	mov	r2, #312	; 0x138
    94a0:	eb008d06 	bl	2c8c0 <assertion_failed>

000094a4 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>:
    94a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    94a8:	e2515000 	subs	r5, r1, #0
    94ac:	e24dd01c 	sub	sp, sp, #28
    94b0:	0a000044 	beq	95c8 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x124>
    94b4:	e1a06000 	mov	r6, r0
    94b8:	e1a00005 	mov	r0, r5
    94bc:	eb00116c 	bl	da74 <CDWHCITransferStageData::GetURB() const>
    94c0:	e3500000 	cmp	r0, #0
    94c4:	0a000045 	beq	95e0 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x13c>
    94c8:	eb0033eb 	bl	1647c <CUSBRequest::GetEndpoint() const>
    94cc:	eb001ae2 	bl	1005c <CUSBEndpoint::GetInterval() const>
    94d0:	e3a01d11 	mov	r1, #1088	; 0x440
    94d4:	e3431f98 	movt	r1, #16280	; 0x3f98
    94d8:	e6ff4070 	uxth	r4, r0
    94dc:	e1a0000d 	mov	r0, sp
    94e0:	eb004446 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    94e4:	e1a0000d 	mov	r0, sp
    94e8:	eb00444e 	bl	1a628 <CDWHCIRegister::Read()>
    94ec:	e3100806 	tst	r0, #393216	; 0x60000
    94f0:	01a04184 	lsleq	r4, r4, #3
    94f4:	e3013ffe 	movw	r3, #8190	; 0x1ffe
    94f8:	06ff4074 	uxtheq	r4, r4
    94fc:	e1540003 	cmp	r4, r3
    9500:	8a00003c 	bhi	95f8 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x154>
    9504:	e1a00005 	mov	r0, r5
    9508:	eb0010aa 	bl	d7b8 <CDWHCITransferStageData::IsSplit() const>
    950c:	e2507000 	subs	r7, r0, #0
    9510:	0a000017 	beq	9574 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0xd0>
    9514:	e1a00005 	mov	r0, r5
    9518:	eb001169 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    951c:	e2507000 	subs	r7, r0, #0
    9520:	0a00003a 	beq	9610 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x16c>
    9524:	e5973000 	ldr	r3, [r7]
    9528:	e1a01004 	mov	r1, r4
    952c:	e5933018 	ldr	r3, [r3, #24]
    9530:	e12fff33 	blx	r3
    9534:	e5973000 	ldr	r3, [r7]
    9538:	e1a00007 	mov	r0, r7
    953c:	e5933014 	ldr	r3, [r3, #20]
    9540:	e12fff33 	blx	r3
    9544:	e3a01001 	mov	r1, #1
    9548:	e1a04000 	mov	r4, r0
    954c:	e1a00005 	mov	r0, r5
    9550:	eb001011 	bl	d59c <CDWHCITransferStageData::SetState(unsigned int)>
    9554:	e1a00005 	mov	r0, r5
    9558:	e3a01000 	mov	r1, #0
    955c:	eb001002 	bl	d56c <CDWHCITransferStageData::SetSplitComplete(bool)>
    9560:	e5973000 	ldr	r3, [r7]
    9564:	e1a00007 	mov	r0, r7
    9568:	e5933008 	ldr	r3, [r3, #8]
    956c:	e12fff33 	blx	r3
    9570:	ea00000c 	b	95a8 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x104>
    9574:	e28d000c 	add	r0, sp, #12
    9578:	e3001408 	movw	r1, #1032	; 0x408
    957c:	e3431f98 	movt	r1, #16280	; 0x3f98
    9580:	eb00441e 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9584:	e28d000c 	add	r0, sp, #12
    9588:	eb004426 	bl	1a628 <CDWHCIRegister::Read()>
    958c:	e1a01007 	mov	r1, r7
    9590:	e0844000 	add	r4, r4, r0
    9594:	e1a00005 	mov	r0, r5
    9598:	eb000fff 	bl	d59c <CDWHCITransferStageData::SetState(unsigned int)>
    959c:	e28d000c 	add	r0, sp, #12
    95a0:	e7ed4054 	ubfx	r4, r4, #0, #14
    95a4:	eb00441e 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    95a8:	e1a02004 	mov	r2, r4
    95ac:	e1a01005 	mov	r1, r5
    95b0:	e2860024 	add	r0, r6, #36	; 0x24
    95b4:	eb000d69 	bl	cb60 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
    95b8:	e1a0000d 	mov	r0, sp
    95bc:	eb004418 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    95c0:	e28dd01c 	add	sp, sp, #28
    95c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    95c8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    95cc:	e3401003 	movt	r1, #3
    95d0:	e30b03ac 	movw	r0, #45996	; 0xb3ac
    95d4:	e3400003 	movt	r0, #3
    95d8:	e300233b 	movw	r2, #827	; 0x33b
    95dc:	eb008cb7 	bl	2c8c0 <assertion_failed>
    95e0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    95e4:	e3401003 	movt	r1, #3
    95e8:	e30a0b00 	movw	r0, #43776	; 0xab00
    95ec:	e3400003 	movt	r0, #3
    95f0:	e300233d 	movw	r2, #829	; 0x33d
    95f4:	eb008cb1 	bl	2c8c0 <assertion_failed>
    95f8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    95fc:	e3401003 	movt	r1, #3
    9600:	e30a0b5c 	movw	r0, #43868	; 0xab5c
    9604:	e3400003 	movt	r0, #3
    9608:	e3002345 	movw	r2, #837	; 0x345
    960c:	eb008cab 	bl	2c8c0 <assertion_failed>
    9610:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9614:	e3401003 	movt	r1, #3
    9618:	e30a0b88 	movw	r0, #43912	; 0xab88
    961c:	e3400003 	movt	r0, #3
    9620:	e3a02fd3 	mov	r2, #844	; 0x34c
    9624:	eb008ca5 	bl	2c8c0 <assertion_failed>

00009628 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    9628:	e92d4070 	push	{r4, r5, r6, lr}
    962c:	e2514000 	subs	r4, r1, #0
    9630:	e24dd048 	sub	sp, sp, #72	; 0x48
    9634:	0a0000ef 	beq	99f8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    9638:	e1a06000 	mov	r6, r0
    963c:	e1a00004 	mov	r0, r4
    9640:	eb000fdd 	bl	d5bc <CDWHCITransferStageData::GetChannelNumber() const>
    9644:	e1a05000 	mov	r5, r0
    9648:	e5963018 	ldr	r3, [r6, #24]
    964c:	e1530000 	cmp	r3, r0
    9650:	9a0000ee 	bls	9a10 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    9654:	e3a01001 	mov	r1, #1
    9658:	e1a00004 	mov	r0, r4
    965c:	eb000fd2 	bl	d5ac <CDWHCITransferStageData::SetSubState(unsigned int)>
    9660:	e1a05285 	lsl	r5, r5, #5
    9664:	e3001508 	movw	r1, #1288	; 0x508
    9668:	e3431f98 	movt	r1, #16280	; 0x3f98
    966c:	e0851001 	add	r1, r5, r1
    9670:	e1a0000d 	mov	r0, sp
    9674:	eb0043e1 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9678:	e1a0000d 	mov	r0, sp
    967c:	eb00446c 	bl	1a834 <CDWHCIRegister::SetAll()>
    9680:	e1a0000d 	mov	r0, sp
    9684:	eb0043ee 	bl	1a644 <CDWHCIRegister::Write()>
    9688:	e3a01e51 	mov	r1, #1296	; 0x510
    968c:	e3431f98 	movt	r1, #16280	; 0x3f98
    9690:	e3a02000 	mov	r2, #0
    9694:	e0851001 	add	r1, r5, r1
    9698:	e28d000c 	add	r0, sp, #12
    969c:	eb0043db 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    96a0:	e1a00004 	mov	r0, r4
    96a4:	eb00103f 	bl	d7a8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    96a8:	e7f21050 	ubfx	r1, r0, #0, #19
    96ac:	e28d000c 	add	r0, sp, #12
    96b0:	eb00441e 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    96b4:	e1a00004 	mov	r0, r4
    96b8:	eb00103c 	bl	d7b0 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    96bc:	e3a01000 	mov	r1, #0
    96c0:	e3411ff8 	movt	r1, #8184	; 0x1ff8
    96c4:	e0011980 	and	r1, r1, r0, lsl #19
    96c8:	e28d000c 	add	r0, sp, #12
    96cc:	eb004417 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    96d0:	e1a00004 	mov	r0, r4
    96d4:	eb00100b 	bl	d708 <CDWHCITransferStageData::GetPID() const>
    96d8:	e1a01e80 	lsl	r1, r0, #29
    96dc:	e28d000c 	add	r0, sp, #12
    96e0:	eb004412 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    96e4:	e28d000c 	add	r0, sp, #12
    96e8:	eb0043d5 	bl	1a644 <CDWHCIRegister::Write()>
    96ec:	e1a00004 	mov	r0, r4
    96f0:	eb001022 	bl	d780 <CDWHCITransferStageData::GetDMAAddress() const>
    96f4:	e3001514 	movw	r1, #1300	; 0x514
    96f8:	e3431f98 	movt	r1, #16280	; 0x3f98
    96fc:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
    9700:	e0851001 	add	r1, r5, r1
    9704:	e28d0018 	add	r0, sp, #24
    9708:	eb0043c0 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    970c:	e28d0018 	add	r0, sp, #24
    9710:	eb0043cb 	bl	1a644 <CDWHCIRegister::Write()>
    9714:	e1a00004 	mov	r0, r4
    9718:	eb001018 	bl	d780 <CDWHCITransferStageData::GetDMAAddress() const>
    971c:	e1a06000 	mov	r6, r0
    9720:	e1a00004 	mov	r0, r4
    9724:	eb00101f 	bl	d7a8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9728:	e1a01000 	mov	r1, r0
    972c:	e1a00006 	mov	r0, r6
    9730:	eb00b926 	bl	37bd0 <CleanAndInvalidateDataCacheRange>
    9734:	e3001504 	movw	r1, #1284	; 0x504
    9738:	e3431f98 	movt	r1, #16280	; 0x3f98
    973c:	e3a02000 	mov	r2, #0
    9740:	e0851001 	add	r1, r5, r1
    9744:	e28d0024 	add	r0, sp, #36	; 0x24
    9748:	eb0043b0 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    974c:	e1a00004 	mov	r0, r4
    9750:	eb001018 	bl	d7b8 <CDWHCITransferStageData::IsSplit() const>
    9754:	e3500000 	cmp	r0, #0
    9758:	1a00007c 	bne	9950 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x328>
    975c:	e28d0024 	add	r0, sp, #36	; 0x24
    9760:	eb0043b7 	bl	1a644 <CDWHCIRegister::Write()>
    9764:	e3a01c05 	mov	r1, #1280	; 0x500
    9768:	e3431f98 	movt	r1, #16280	; 0x3f98
    976c:	e28d0030 	add	r0, sp, #48	; 0x30
    9770:	e0851001 	add	r1, r5, r1
    9774:	eb0043a1 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9778:	e28d0030 	add	r0, sp, #48	; 0x30
    977c:	eb0043a9 	bl	1a628 <CDWHCIRegister::Read()>
    9780:	e28d0030 	add	r0, sp, #48	; 0x30
    9784:	e3a01b3e 	mov	r1, #63488	; 0xf800
    9788:	e34f1fff 	movt	r1, #65535	; 0xffff
    978c:	eb0043d9 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    9790:	e1a00004 	mov	r0, r4
    9794:	eb000fd7 	bl	d6f8 <CDWHCITransferStageData::GetMaxPacketSize() const>
    9798:	e7ea1050 	ubfx	r1, r0, #0, #11
    979c:	e28d0030 	add	r0, sp, #48	; 0x30
    97a0:	eb0043e2 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    97a4:	e28d0030 	add	r0, sp, #48	; 0x30
    97a8:	e3e01603 	mvn	r1, #3145728	; 0x300000
    97ac:	eb0043d1 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    97b0:	e3a01601 	mov	r1, #1048576	; 0x100000
    97b4:	e28d0030 	add	r0, sp, #48	; 0x30
    97b8:	eb0043dc 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    97bc:	e1a00004 	mov	r0, r4
    97c0:	eb000fea 	bl	d770 <CDWHCITransferStageData::IsDirectionIn() const>
    97c4:	e3500000 	cmp	r0, #0
    97c8:	1a000050 	bne	9910 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e8>
    97cc:	e28d0030 	add	r0, sp, #48	; 0x30
    97d0:	e3e01902 	mvn	r1, #32768	; 0x8000
    97d4:	eb0043c7 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    97d8:	e1a00004 	mov	r0, r4
    97dc:	eb000fc7 	bl	d700 <CDWHCITransferStageData::GetSpeed() const>
    97e0:	e3500000 	cmp	r0, #0
    97e4:	1a000050 	bne	992c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x304>
    97e8:	e3a01802 	mov	r1, #131072	; 0x20000
    97ec:	e28d0030 	add	r0, sp, #48	; 0x30
    97f0:	eb0043ce 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    97f4:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    97f8:	e28d0030 	add	r0, sp, #48	; 0x30
    97fc:	eb0043bd 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    9800:	e1a00004 	mov	r0, r4
    9804:	eb000f8e 	bl	d644 <CDWHCITransferStageData::GetDeviceAddress() const>
    9808:	e1a01b00 	lsl	r1, r0, #22
    980c:	e28d0030 	add	r0, sp, #48	; 0x30
    9810:	eb0043c6 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9814:	e3e01703 	mvn	r1, #786432	; 0xc0000
    9818:	e28d0030 	add	r0, sp, #48	; 0x30
    981c:	eb0043b5 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    9820:	e1a00004 	mov	r0, r4
    9824:	eb000f91 	bl	d670 <CDWHCITransferStageData::GetEndpointType() const>
    9828:	e1a01900 	lsl	r1, r0, #18
    982c:	e28d0030 	add	r0, sp, #48	; 0x30
    9830:	eb0043be 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9834:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    9838:	e28d0030 	add	r0, sp, #48	; 0x30
    983c:	eb0043ad 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    9840:	e1a00004 	mov	r0, r4
    9844:	eb000fa0 	bl	d6cc <CDWHCITransferStageData::GetEndpointNumber() const>
    9848:	e1a01580 	lsl	r1, r0, #11
    984c:	e28d0030 	add	r0, sp, #48	; 0x30
    9850:	eb0043b6 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9854:	e1a00004 	mov	r0, r4
    9858:	eb001099 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    985c:	e2503000 	subs	r3, r0, #0
    9860:	0a000055 	beq	99bc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x394>
    9864:	e5933000 	ldr	r3, [r3]
    9868:	e593301c 	ldr	r3, [r3, #28]
    986c:	e12fff33 	blx	r3
    9870:	e3500000 	cmp	r0, #0
    9874:	0a000030 	beq	993c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x314>
    9878:	e28d603c 	add	r6, sp, #60	; 0x3c
    987c:	e3a01202 	mov	r1, #536870912	; 0x20000000
    9880:	e28d0030 	add	r0, sp, #48	; 0x30
    9884:	eb0043a9 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9888:	e300150c 	movw	r1, #1292	; 0x50c
    988c:	e3431f98 	movt	r1, #16280	; 0x3f98
    9890:	e0851001 	add	r1, r5, r1
    9894:	e1a00006 	mov	r0, r6
    9898:	eb004358 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    989c:	e1a00004 	mov	r0, r4
    98a0:	eb00101e 	bl	d920 <CDWHCITransferStageData::GetStatusMask() const>
    98a4:	e1a01000 	mov	r1, r0
    98a8:	e1a00006 	mov	r0, r6
    98ac:	eb00437e 	bl	1a6ac <CDWHCIRegister::Set(unsigned int)>
    98b0:	e1a00006 	mov	r0, r6
    98b4:	eb004362 	bl	1a644 <CDWHCIRegister::Write()>
    98b8:	e28d0030 	add	r0, sp, #48	; 0x30
    98bc:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    98c0:	eb00439a 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    98c4:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    98c8:	e28d0030 	add	r0, sp, #48	; 0x30
    98cc:	eb004389 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    98d0:	e28d0030 	add	r0, sp, #48	; 0x30
    98d4:	eb00435a 	bl	1a644 <CDWHCIRegister::Write()>
    98d8:	e1a00006 	mov	r0, r6
    98dc:	eb004350 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    98e0:	e28d0030 	add	r0, sp, #48	; 0x30
    98e4:	eb00434e 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    98e8:	e28d0024 	add	r0, sp, #36	; 0x24
    98ec:	eb00434c 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    98f0:	e28d0018 	add	r0, sp, #24
    98f4:	eb00434a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    98f8:	e28d000c 	add	r0, sp, #12
    98fc:	eb004348 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9900:	e1a0000d 	mov	r0, sp
    9904:	eb004346 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9908:	e28dd048 	add	sp, sp, #72	; 0x48
    990c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9910:	e3a01902 	mov	r1, #32768	; 0x8000
    9914:	e28d0030 	add	r0, sp, #48	; 0x30
    9918:	eb004384 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    991c:	e1a00004 	mov	r0, r4
    9920:	eb000f76 	bl	d700 <CDWHCITransferStageData::GetSpeed() const>
    9924:	e3500000 	cmp	r0, #0
    9928:	0affffae 	beq	97e8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1c0>
    992c:	e28d0030 	add	r0, sp, #48	; 0x30
    9930:	e3e01802 	mvn	r1, #131072	; 0x20000
    9934:	eb00436f 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    9938:	eaffffad 	b	97f4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1cc>
    993c:	e28d0030 	add	r0, sp, #48	; 0x30
    9940:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    9944:	e28d603c 	add	r6, sp, #60	; 0x3c
    9948:	eb00436a 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    994c:	eaffffcd 	b	9888 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x260>
    9950:	e1a00004 	mov	r0, r4
    9954:	eb000fba 	bl	d844 <CDWHCITransferStageData::GetHubPortAddress() const>
    9958:	e1a01000 	mov	r1, r0
    995c:	e28d0024 	add	r0, sp, #36	; 0x24
    9960:	eb004372 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9964:	e1a00004 	mov	r0, r4
    9968:	eb000fa0 	bl	d7f0 <CDWHCITransferStageData::GetHubAddress() const>
    996c:	e1a01380 	lsl	r1, r0, #7
    9970:	e28d0024 	add	r0, sp, #36	; 0x24
    9974:	eb00436d 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9978:	e1a00004 	mov	r0, r4
    997c:	eb000fc5 	bl	d898 <CDWHCITransferStageData::GetSplitPosition() const>
    9980:	e1a01700 	lsl	r1, r0, #14
    9984:	e28d0024 	add	r0, sp, #36	; 0x24
    9988:	eb004368 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    998c:	e1a00004 	mov	r0, r4
    9990:	eb000f8a 	bl	d7c0 <CDWHCITransferStageData::IsSplitComplete() const>
    9994:	e3500000 	cmp	r0, #0
    9998:	1a000003 	bne	99ac <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x384>
    999c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    99a0:	e28d0024 	add	r0, sp, #36	; 0x24
    99a4:	eb004361 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    99a8:	eaffff6b 	b	975c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x134>
    99ac:	e3a01801 	mov	r1, #65536	; 0x10000
    99b0:	e28d0024 	add	r0, sp, #36	; 0x24
    99b4:	eb00435d 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    99b8:	eafffff7 	b	999c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x374>
    99bc:	e28d603c 	add	r6, sp, #60	; 0x3c
    99c0:	e3001408 	movw	r1, #1032	; 0x408
    99c4:	e3431f98 	movt	r1, #16280	; 0x3f98
    99c8:	e1a00006 	mov	r0, r6
    99cc:	eb00430b 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    99d0:	e1a00006 	mov	r0, r6
    99d4:	eb004313 	bl	1a628 <CDWHCIRegister::Read()>
    99d8:	e3100001 	tst	r0, #1
    99dc:	0a000011 	beq	9a28 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x400>
    99e0:	e3a01202 	mov	r1, #536870912	; 0x20000000
    99e4:	e28d0030 	add	r0, sp, #48	; 0x30
    99e8:	eb004350 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    99ec:	e1a00006 	mov	r0, r6
    99f0:	eb00430b 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    99f4:	eaffffa3 	b	9888 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x260>
    99f8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    99fc:	e3401003 	movt	r1, #3
    9a00:	e30b03ac 	movw	r0, #45996	; 0xb3ac
    9a04:	e3400003 	movt	r0, #3
    9a08:	e300237f 	movw	r2, #895	; 0x37f
    9a0c:	eb008bab 	bl	2c8c0 <assertion_failed>
    9a10:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9a14:	e3401003 	movt	r1, #3
    9a18:	e30a0ba0 	movw	r0, #43936	; 0xaba0
    9a1c:	e3400003 	movt	r0, #3
    9a20:	e3002381 	movw	r2, #897	; 0x381
    9a24:	eb008ba5 	bl	2c8c0 <assertion_failed>
    9a28:	e28d0030 	add	r0, sp, #48	; 0x30
    9a2c:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    9a30:	eb004330 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    9a34:	eaffffec 	b	99ec <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>

00009a38 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    9a38:	e92d4070 	push	{r4, r5, r6, lr}
    9a3c:	e2515000 	subs	r5, r1, #0
    9a40:	e24dd018 	sub	sp, sp, #24
    9a44:	0a000033 	beq	9b18 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe0>
    9a48:	e1a06000 	mov	r6, r0
    9a4c:	e1a00005 	mov	r0, r5
    9a50:	eb000ed9 	bl	d5bc <CDWHCITransferStageData::GetChannelNumber() const>
    9a54:	e5963018 	ldr	r3, [r6, #24]
    9a58:	e1530000 	cmp	r3, r0
    9a5c:	9a000033 	bls	9b30 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xf8>
    9a60:	e30c3028 	movw	r3, #49192	; 0xc028
    9a64:	e34031fc 	movt	r3, #508	; 0x1fc
    9a68:	e0803003 	add	r3, r0, r3
    9a6c:	e1a0000d 	mov	r0, sp
    9a70:	e1a04283 	lsl	r4, r3, #5
    9a74:	e1a01004 	mov	r1, r4
    9a78:	eb0042e0 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9a7c:	e1a0000d 	mov	r0, sp
    9a80:	eb0042e8 	bl	1a628 <CDWHCIRegister::Read()>
    9a84:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    9a88:	e1a0000d 	mov	r0, sp
    9a8c:	eb00430a 	bl	1a6bc <CDWHCIRegister::IsSet(unsigned int) const>
    9a90:	e3500000 	cmp	r0, #0
    9a94:	1a000006 	bne	9ab4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x7c>
    9a98:	e1a01005 	mov	r1, r5
    9a9c:	e1a00006 	mov	r0, r6
    9aa0:	ebfffee0 	bl	9628 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9aa4:	e1a0000d 	mov	r0, sp
    9aa8:	eb0042dd 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9aac:	e28dd018 	add	sp, sp, #24
    9ab0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ab4:	e1a00005 	mov	r0, r5
    9ab8:	e3a01000 	mov	r1, #0
    9abc:	eb000eba 	bl	d5ac <CDWHCITransferStageData::SetSubState(unsigned int)>
    9ac0:	e1a0000d 	mov	r0, sp
    9ac4:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    9ac8:	eb00430a 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    9acc:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    9ad0:	e1a0000d 	mov	r0, sp
    9ad4:	eb004315 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    9ad8:	e1a0000d 	mov	r0, sp
    9adc:	eb0042d8 	bl	1a644 <CDWHCIRegister::Write()>
    9ae0:	e284100c 	add	r1, r4, #12
    9ae4:	e28d000c 	add	r0, sp, #12
    9ae8:	eb0042c4 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9aec:	e3a01002 	mov	r1, #2
    9af0:	e28d000c 	add	r0, sp, #12
    9af4:	eb0042ec 	bl	1a6ac <CDWHCIRegister::Set(unsigned int)>
    9af8:	e28d000c 	add	r0, sp, #12
    9afc:	eb0042d0 	bl	1a644 <CDWHCIRegister::Write()>
    9b00:	e28d000c 	add	r0, sp, #12
    9b04:	eb0042c6 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9b08:	e1a0000d 	mov	r0, sp
    9b0c:	eb0042c4 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9b10:	e28dd018 	add	sp, sp, #24
    9b14:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b18:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9b1c:	e3401003 	movt	r1, #3
    9b20:	e30b03ac 	movw	r0, #45996	; 0xb3ac
    9b24:	e3400003 	movt	r0, #3
    9b28:	e3a02fd9 	mov	r2, #868	; 0x364
    9b2c:	eb008b63 	bl	2c8c0 <assertion_failed>
    9b30:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9b34:	e3401003 	movt	r1, #3
    9b38:	e30a0ba0 	movw	r0, #43936	; 0xaba0
    9b3c:	e3400003 	movt	r0, #3
    9b40:	e3002366 	movw	r2, #870	; 0x366
    9b44:	eb008b5d 	bl	2c8c0 <assertion_failed>

00009b48 <CDWHCIDevice::AllocateChannel()>:
    9b48:	e92d4070 	push	{r4, r5, r6, lr}
    9b4c:	e1a05000 	mov	r5, r0
    9b50:	e5900020 	ldr	r0, [r0, #32]
    9b54:	e3500000 	cmp	r0, #0
    9b58:	1a000015 	bne	9bb4 <CDWHCIDevice::AllocateChannel()+0x6c>
    9b5c:	e5951018 	ldr	r1, [r5, #24]
    9b60:	e3510000 	cmp	r1, #0
    9b64:	0a00000f 	beq	9ba8 <CDWHCIDevice::AllocateChannel()+0x60>
    9b68:	e595401c 	ldr	r4, [r5, #28]
    9b6c:	e2144001 	ands	r4, r4, #1
    9b70:	0a000021 	beq	9bfc <CDWHCIDevice::AllocateChannel()+0xb4>
    9b74:	e3a04000 	mov	r4, #0
    9b78:	e3a03001 	mov	r3, #1
    9b7c:	ea000002 	b	9b8c <CDWHCIDevice::AllocateChannel()+0x44>
    9b80:	e595201c 	ldr	r2, [r5, #28]
    9b84:	e1120003 	tst	r2, r3
    9b88:	0a000013 	beq	9bdc <CDWHCIDevice::AllocateChannel()+0x94>
    9b8c:	e2844001 	add	r4, r4, #1
    9b90:	e1a03083 	lsl	r3, r3, #1
    9b94:	e1540001 	cmp	r4, r1
    9b98:	3afffff8 	bcc	9b80 <CDWHCIDevice::AllocateChannel()+0x38>
    9b9c:	e3500000 	cmp	r0, #0
    9ba0:	0a000000 	beq	9ba8 <CDWHCIDevice::AllocateChannel()+0x60>
    9ba4:	eb00ba7f 	bl	385a8 <LeaveCritical>
    9ba8:	e3a04010 	mov	r4, #16
    9bac:	e1a00004 	mov	r0, r4
    9bb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9bb4:	eb00ba50 	bl	384fc <EnterCritical>
    9bb8:	e5951018 	ldr	r1, [r5, #24]
    9bbc:	e3510000 	cmp	r1, #0
    9bc0:	05950020 	ldreq	r0, [r5, #32]
    9bc4:	0afffff4 	beq	9b9c <CDWHCIDevice::AllocateChannel()+0x54>
    9bc8:	e595401c 	ldr	r4, [r5, #28]
    9bcc:	e5950020 	ldr	r0, [r5, #32]
    9bd0:	e2144001 	ands	r4, r4, #1
    9bd4:	1affffe6 	bne	9b74 <CDWHCIDevice::AllocateChannel()+0x2c>
    9bd8:	e3a03001 	mov	r3, #1
    9bdc:	e595201c 	ldr	r2, [r5, #28]
    9be0:	e3500000 	cmp	r0, #0
    9be4:	e1822003 	orr	r2, r2, r3
    9be8:	e585201c 	str	r2, [r5, #28]
    9bec:	0affffee 	beq	9bac <CDWHCIDevice::AllocateChannel()+0x64>
    9bf0:	eb00ba6c 	bl	385a8 <LeaveCritical>
    9bf4:	e1a00004 	mov	r0, r4
    9bf8:	e8bd8070 	pop	{r4, r5, r6, pc}
    9bfc:	e595301c 	ldr	r3, [r5, #28]
    9c00:	e3833001 	orr	r3, r3, #1
    9c04:	e585301c 	str	r3, [r5, #28]
    9c08:	eaffffe7 	b	9bac <CDWHCIDevice::AllocateChannel()+0x64>

00009c0c <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>:
    9c0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c10:	e3001408 	movw	r1, #1032	; 0x408
    9c14:	e3431f98 	movt	r1, #16280	; 0x3f98
    9c18:	e24dd010 	sub	sp, sp, #16
    9c1c:	e1a06000 	mov	r6, r0
    9c20:	e28d0004 	add	r0, sp, #4
    9c24:	e2868024 	add	r8, r6, #36	; 0x24
    9c28:	eb004274 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9c2c:	e28d0004 	add	r0, sp, #4
    9c30:	eb00427c 	bl	1a628 <CDWHCIRegister::Read()>
    9c34:	e6ff7070 	uxth	r7, r0
    9c38:	e1a01007 	mov	r1, r7
    9c3c:	e1a00008 	mov	r0, r8
    9c40:	eb000c2e 	bl	cd00 <CDWHCITransactionQueue::Dequeue(unsigned short)>
    9c44:	e2504000 	subs	r4, r0, #0
    9c48:	0a000020 	beq	9cd0 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xc4>
    9c4c:	e1a00006 	mov	r0, r6
    9c50:	ebffffbc 	bl	9b48 <CDWHCIDevice::AllocateChannel()>
    9c54:	e5963018 	ldr	r3, [r6, #24]
    9c58:	e1a05000 	mov	r5, r0
    9c5c:	e1500003 	cmp	r0, r3
    9c60:	2a00000e 	bcs	9ca0 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x94>
    9c64:	e1a01000 	mov	r1, r0
    9c68:	e1a00004 	mov	r0, r4
    9c6c:	eb000d9d 	bl	d2e8 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>
    9c70:	e0863105 	add	r3, r6, r5, lsl #2
    9c74:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
    9c78:	e3520000 	cmp	r2, #0
    9c7c:	1a00000d 	bne	9cb8 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xac>
    9c80:	e1a01005 	mov	r1, r5
    9c84:	e1a00006 	mov	r0, r6
    9c88:	e583402c 	str	r4, [r3, #44]	; 0x2c
    9c8c:	ebfffc5f 	bl	8e10 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    9c90:	e1a01004 	mov	r1, r4
    9c94:	e1a00006 	mov	r0, r6
    9c98:	ebffff66 	bl	9a38 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9c9c:	eaffffe5 	b	9c38 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x2c>
    9ca0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9ca4:	e3401003 	movt	r1, #3
    9ca8:	e30a0ba0 	movw	r0, #43936	; 0xaba0
    9cac:	e3400003 	movt	r0, #3
    9cb0:	e3002574 	movw	r2, #1396	; 0x574
    9cb4:	eb008b01 	bl	2c8c0 <assertion_failed>
    9cb8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9cbc:	e3401003 	movt	r1, #3
    9cc0:	e30a0bb8 	movw	r0, #43960	; 0xabb8
    9cc4:	e3400003 	movt	r0, #3
    9cc8:	e3002578 	movw	r2, #1400	; 0x578
    9ccc:	eb008afb 	bl	2c8c0 <assertion_failed>
    9cd0:	e28d0004 	add	r0, sp, #4
    9cd4:	eb004252 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9cd8:	e28dd010 	add	sp, sp, #16
    9cdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009ce0 <CDWHCIDevice::SOFInterruptHandler()>:
    9ce0:	e5d03095 	ldrb	r3, [r0, #149]	; 0x95
    9ce4:	e3530000 	cmp	r3, #0
    9ce8:	112fff1e 	bxne	lr
    9cec:	eaffffc6 	b	9c0c <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>

00009cf0 <CDWHCIDevice::FreeChannel(unsigned int)>:
    9cf0:	e5903018 	ldr	r3, [r0, #24]
    9cf4:	e92d4070 	push	{r4, r5, r6, lr}
    9cf8:	e1530001 	cmp	r3, r1
    9cfc:	9a000012 	bls	9d4c <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    9d00:	e1a04000 	mov	r4, r0
    9d04:	e3a05001 	mov	r5, #1
    9d08:	e5900020 	ldr	r0, [r0, #32]
    9d0c:	e1a05115 	lsl	r5, r5, r1
    9d10:	e3500000 	cmp	r0, #0
    9d14:	1a00000a 	bne	9d44 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    9d18:	e594301c 	ldr	r3, [r4, #28]
    9d1c:	e1130005 	tst	r3, r5
    9d20:	0a00000f 	beq	9d64 <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    9d24:	e5942020 	ldr	r2, [r4, #32]
    9d28:	e594301c 	ldr	r3, [r4, #28]
    9d2c:	e3520000 	cmp	r2, #0
    9d30:	e1c33005 	bic	r3, r3, r5
    9d34:	e584301c 	str	r3, [r4, #28]
    9d38:	08bd8070 	popeq	{r4, r5, r6, pc}
    9d3c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9d40:	ea00ba18 	b	385a8 <LeaveCritical>
    9d44:	eb00b9ec 	bl	384fc <EnterCritical>
    9d48:	eafffff2 	b	9d18 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    9d4c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9d50:	e3401003 	movt	r1, #3
    9d54:	e30a0ba0 	movw	r0, #43936	; 0xaba0
    9d58:	e3400003 	movt	r0, #3
    9d5c:	e300265c 	movw	r2, #1628	; 0x65c
    9d60:	eb008ad6 	bl	2c8c0 <assertion_failed>
    9d64:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9d68:	e3401003 	movt	r1, #3
    9d6c:	e30a0bd4 	movw	r0, #43988	; 0xabd4
    9d70:	e3400003 	movt	r0, #3
    9d74:	e3002661 	movw	r2, #1633	; 0x661
    9d78:	eb008ad0 	bl	2c8c0 <assertion_failed>

00009d7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>:
    9d7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d80:	e0809101 	add	r9, r0, r1, lsl #2
    9d84:	e24dd024 	sub	sp, sp, #36	; 0x24
    9d88:	e599402c 	ldr	r4, [r9, #44]	; 0x2c
    9d8c:	e3540000 	cmp	r4, #0
    9d90:	0a0000f5 	beq	a16c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3f0>
    9d94:	e1a05000 	mov	r5, r0
    9d98:	e1a00004 	mov	r0, r4
    9d9c:	e1a06001 	mov	r6, r1
    9da0:	eb000f33 	bl	da74 <CDWHCITransferStageData::GetURB() const>
    9da4:	e2508000 	subs	r8, r0, #0
    9da8:	0a0000f5 	beq	a184 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x408>
    9dac:	e5d51094 	ldrb	r1, [r5, #148]	; 0x94
    9db0:	e21170ff 	ands	r7, r1, #255	; 0xff
    9db4:	0a000047 	beq	9ed8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x15c>
    9db8:	e1a00004 	mov	r0, r4
    9dbc:	eb000dfc 	bl	d5b4 <CDWHCITransferStageData::GetSubState() const>
    9dc0:	e3500000 	cmp	r0, #0
    9dc4:	0a00003e 	beq	9ec4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x148>
    9dc8:	e3500001 	cmp	r0, #1
    9dcc:	1a000170 	bne	a394 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x618>
    9dd0:	e1a00004 	mov	r0, r4
    9dd4:	eb000e69 	bl	d780 <CDWHCITransferStageData::GetDMAAddress() const>
    9dd8:	e1a07000 	mov	r7, r0
    9ddc:	e1a00004 	mov	r0, r4
    9de0:	eb000e70 	bl	d7a8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9de4:	e1a01000 	mov	r1, r0
    9de8:	e1a00007 	mov	r0, r7
    9dec:	e1a07286 	lsl	r7, r6, #5
    9df0:	eb00b776 	bl	37bd0 <CleanAndInvalidateDataCacheRange>
    9df4:	e3a01e51 	mov	r1, #1296	; 0x510
    9df8:	e3431f98 	movt	r1, #16280	; 0x3f98
    9dfc:	e28d0008 	add	r0, sp, #8
    9e00:	e0871001 	add	r1, r7, r1
    9e04:	eb0041fd 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e08:	e28d0008 	add	r0, sp, #8
    9e0c:	eb004205 	bl	1a628 <CDWHCIRegister::Read()>
    9e10:	e3001508 	movw	r1, #1288	; 0x508
    9e14:	e3431f98 	movt	r1, #16280	; 0x3f98
    9e18:	e28d0014 	add	r0, sp, #20
    9e1c:	e0871001 	add	r1, r7, r1
    9e20:	eb0041f6 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e24:	e28d0014 	add	r0, sp, #20
    9e28:	eb0041fe 	bl	1a628 <CDWHCIRegister::Read()>
    9e2c:	e3500002 	cmp	r0, #2
    9e30:	0a0000bf 	beq	a134 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3b8>
    9e34:	e1a00004 	mov	r0, r4
    9e38:	eb000de1 	bl	d5c4 <CDWHCITransferStageData::IsPeriodic() const>
    9e3c:	e3500000 	cmp	r0, #0
    9e40:	1a000101 	bne	a24c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4d0>
    9e44:	e28d0014 	add	r0, sp, #20
    9e48:	eb0041f6 	bl	1a628 <CDWHCIRegister::Read()>
    9e4c:	e1a07000 	mov	r7, r0
    9e50:	e28d0008 	add	r0, sp, #8
    9e54:	eb004208 	bl	1a67c <CDWHCIRegister::Get() const>
    9e58:	e1a0a000 	mov	sl, r0
    9e5c:	e28d0008 	add	r0, sp, #8
    9e60:	eb004205 	bl	1a67c <CDWHCIRegister::Get() const>
    9e64:	e1a01007 	mov	r1, r7
    9e68:	e7f23050 	ubfx	r3, r0, #0, #19
    9e6c:	e7e929da 	ubfx	r2, sl, #19, #10
    9e70:	e1a00004 	mov	r0, r4
    9e74:	eb000d1d 	bl	d2f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    9e78:	e28d0014 	add	r0, sp, #20
    9e7c:	eb0041e8 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9e80:	e28d0008 	add	r0, sp, #8
    9e84:	eb0041e6 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    9e88:	e1a00004 	mov	r0, r4
    9e8c:	eb000dc4 	bl	d5a4 <CDWHCITransferStageData::GetState() const>
    9e90:	e1a07000 	mov	r7, r0
    9e94:	e3500001 	cmp	r0, #1
    9e98:	0a00007a 	beq	a088 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x30c>
    9e9c:	e3500002 	cmp	r0, #2
    9ea0:	0a00003c 	beq	9f98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x21c>
    9ea4:	e3500000 	cmp	r0, #0
    9ea8:	0a000020 	beq	9f30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1b4>
    9eac:	e30a1a08 	movw	r1, #43528	; 0xaa08
    9eb0:	e3401003 	movt	r1, #3
    9eb4:	e30b0708 	movw	r0, #46856	; 0xb708
    9eb8:	e3400003 	movt	r0, #3
    9ebc:	e300254c 	movw	r2, #1356	; 0x54c
    9ec0:	eb008a7e 	bl	2c8c0 <assertion_failed>
    9ec4:	e1a01004 	mov	r1, r4
    9ec8:	e1a00005 	mov	r0, r5
    9ecc:	e28dd024 	add	sp, sp, #36	; 0x24
    9ed0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ed4:	eafffdd3 	b	9628 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9ed8:	e1a01006 	mov	r1, r6
    9edc:	e1a00005 	mov	r0, r5
    9ee0:	ebfffbeb 	bl	8e94 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9ee4:	e1a01007 	mov	r1, r7
    9ee8:	e1a00008 	mov	r0, r8
    9eec:	eb00316c 	bl	164a4 <CUSBRequest::SetStatus(int)>
    9ef0:	e3a01008 	mov	r1, #8
    9ef4:	e1a00008 	mov	r0, r8
    9ef8:	eb00316d 	bl	164b4 <CUSBRequest::SetUSBError(TUSBError)>
    9efc:	e1a00004 	mov	r0, r4
    9f00:	eb000cee 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9f04:	e1a00004 	mov	r0, r4
    9f08:	e3a01c01 	mov	r1, #256	; 0x100
    9f0c:	eb000f04 	bl	db24 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9f10:	e1a01006 	mov	r1, r6
    9f14:	e1a00005 	mov	r0, r5
    9f18:	e589702c 	str	r7, [r9, #44]	; 0x2c
    9f1c:	ebffff73 	bl	9cf0 <CDWHCIDevice::FreeChannel(unsigned int)>
    9f20:	e1a00008 	mov	r0, r8
    9f24:	e28dd024 	add	sp, sp, #36	; 0x24
    9f28:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f2c:	ea0031e3 	b	166c0 <CUSBRequest::CallCompletionRoutine()>
    9f30:	e1a00004 	mov	r0, r4
    9f34:	eb000e8f 	bl	d978 <CDWHCITransferStageData::GetTransactionStatus() const>
    9f38:	e1a0a000 	mov	sl, r0
    9f3c:	e3100080 	tst	r0, #128	; 0x80
    9f40:	1a0000b5 	bne	a21c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4a0>
    9f44:	e300378c 	movw	r3, #1932	; 0x78c
    9f48:	e11a0003 	tst	sl, r3
    9f4c:	1a0000ac 	bne	a204 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x488>
    9f50:	e1a00004 	mov	r0, r4
    9f54:	eb000dab 	bl	d608 <CDWHCITransferStageData::IsIsochronous() const>
    9f58:	e3500000 	cmp	r0, #0
    9f5c:	1a0000dc 	bne	a2d4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x558>
    9f60:	e31a0050 	tst	sl, #80	; 0x50
    9f64:	0a000003 	beq	9f78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1fc>
    9f68:	e1a00004 	mov	r0, r4
    9f6c:	eb000d94 	bl	d5c4 <CDWHCITransferStageData::IsPeriodic() const>
    9f70:	e3500000 	cmp	r0, #0
    9f74:	1a0000fb 	bne	a368 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5ec>
    9f78:	e1a00004 	mov	r0, r4
    9f7c:	eb000dfd 	bl	d778 <CDWHCITransferStageData::IsStatusStage() const>
    9f80:	e3500000 	cmp	r0, #0
    9f84:	0a0000e2 	beq	a314 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x598>
    9f88:	e3a01001 	mov	r1, #1
    9f8c:	e1a00008 	mov	r0, r8
    9f90:	eb003143 	bl	164a4 <CUSBRequest::SetStatus(int)>
    9f94:	ea00008b 	b	a1c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x44c>
    9f98:	e1a00004 	mov	r0, r4
    9f9c:	eb000e75 	bl	d978 <CDWHCITransferStageData::GetTransactionStatus() const>
    9fa0:	e300378c 	movw	r3, #1932	; 0x78c
    9fa4:	e1a0a000 	mov	sl, r0
    9fa8:	e010b003 	ands	fp, r0, r3
    9fac:	1a00007a 	bne	a19c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x420>
    9fb0:	e1a00004 	mov	r0, r4
    9fb4:	eb000ec2 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    9fb8:	e5903000 	ldr	r3, [r0]
    9fbc:	e1a0100a 	mov	r1, sl
    9fc0:	e5933010 	ldr	r3, [r3, #16]
    9fc4:	e12fff33 	blx	r3
    9fc8:	e1a00004 	mov	r0, r4
    9fcc:	eb000ebc 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    9fd0:	e5903000 	ldr	r3, [r0]
    9fd4:	e593300c 	ldr	r3, [r3, #12]
    9fd8:	e12fff33 	blx	r3
    9fdc:	e3500000 	cmp	r0, #0
    9fe0:	11a01006 	movne	r1, r6
    9fe4:	1589b02c 	strne	fp, [r9, #44]	; 0x2c
    9fe8:	1a00004a 	bne	a118 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x39c>
    9fec:	e1a00004 	mov	r0, r4
    9ff0:	eb000e83 	bl	da04 <CDWHCITransferStageData::IsStageComplete() const>
    9ff4:	e3500000 	cmp	r0, #0
    9ff8:	1a00009e 	bne	a278 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4fc>
    9ffc:	e1a00004 	mov	r0, r4
    a000:	eb000d6f 	bl	d5c4 <CDWHCITransferStageData::IsPeriodic() const>
    a004:	e3500000 	cmp	r0, #0
    a008:	0a0000a5 	beq	a2a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x528>
    a00c:	e1a00004 	mov	r0, r4
    a010:	eb000d7c 	bl	d608 <CDWHCITransferStageData::IsIsochronous() const>
    a014:	e3500000 	cmp	r0, #0
    a018:	0a000003 	beq	a02c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2b0>
    a01c:	e1a00004 	mov	r0, r4
    a020:	eb000dd2 	bl	d770 <CDWHCITransferStageData::IsDirectionIn() const>
    a024:	e3500000 	cmp	r0, #0
    a028:	0a00009d 	beq	a2a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x528>
    a02c:	e1a00004 	mov	r0, r4
    a030:	eb000e7c 	bl	da28 <CDWHCITransferStageData::IsTimeout() const>
    a034:	e1a01006 	mov	r1, r6
    a038:	e3500000 	cmp	r0, #0
    a03c:	0a0000c1 	beq	a348 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5cc>
    a040:	e1a00005 	mov	r0, r5
    a044:	ebfffb92 	bl	8e94 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a048:	e3a01000 	mov	r1, #0
    a04c:	e1a00008 	mov	r0, r8
    a050:	eb003113 	bl	164a4 <CUSBRequest::SetStatus(int)>
    a054:	e3a01007 	mov	r1, #7
    a058:	e1a00008 	mov	r0, r8
    a05c:	eb003114 	bl	164b4 <CUSBRequest::SetUSBError(TUSBError)>
    a060:	e1a00004 	mov	r0, r4
    a064:	eb000c95 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a068:	e1a00004 	mov	r0, r4
    a06c:	e3a01c01 	mov	r1, #256	; 0x100
    a070:	eb000eab 	bl	db24 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a074:	e3a03000 	mov	r3, #0
    a078:	e1a01006 	mov	r1, r6
    a07c:	e1a00005 	mov	r0, r5
    a080:	e589302c 	str	r3, [r9, #44]	; 0x2c
    a084:	eaffffa4 	b	9f1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1a0>
    a088:	e1a00004 	mov	r0, r4
    a08c:	eb000e39 	bl	d978 <CDWHCITransferStageData::GetTransactionStatus() const>
    a090:	e30037dc 	movw	r3, #2012	; 0x7dc
    a094:	e1a07000 	mov	r7, r0
    a098:	e1100003 	tst	r0, r3
    a09c:	1a00004d 	bne	a1d8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x45c>
    a0a0:	e1a00004 	mov	r0, r4
    a0a4:	eb000e86 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    a0a8:	e5903000 	ldr	r3, [r0]
    a0ac:	e1a01007 	mov	r1, r7
    a0b0:	e5933010 	ldr	r3, [r3, #16]
    a0b4:	e12fff33 	blx	r3
    a0b8:	e1a00004 	mov	r0, r4
    a0bc:	eb000d51 	bl	d608 <CDWHCITransferStageData::IsIsochronous() const>
    a0c0:	e3500000 	cmp	r0, #0
    a0c4:	0a000003 	beq	a0d8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x35c>
    a0c8:	e1a00004 	mov	r0, r4
    a0cc:	eb000da7 	bl	d770 <CDWHCITransferStageData::IsDirectionIn() const>
    a0d0:	e3500000 	cmp	r0, #0
    a0d4:	0affffc4 	beq	9fec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x270>
    a0d8:	e3a01002 	mov	r1, #2
    a0dc:	e1a00004 	mov	r0, r4
    a0e0:	eb000d2d 	bl	d59c <CDWHCITransferStageData::SetState(unsigned int)>
    a0e4:	e3a01001 	mov	r1, #1
    a0e8:	e1a00004 	mov	r0, r4
    a0ec:	eb000d1e 	bl	d56c <CDWHCITransferStageData::SetSplitComplete(bool)>
    a0f0:	e1a00004 	mov	r0, r4
    a0f4:	eb000e72 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    a0f8:	e5903000 	ldr	r3, [r0]
    a0fc:	e593300c 	ldr	r3, [r3, #12]
    a100:	e12fff33 	blx	r3
    a104:	e3500000 	cmp	r0, #0
    a108:	0affffb7 	beq	9fec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x270>
    a10c:	e1a01006 	mov	r1, r6
    a110:	e3a03000 	mov	r3, #0
    a114:	e589302c 	str	r3, [r9, #44]	; 0x2c
    a118:	e1a00005 	mov	r0, r5
    a11c:	ebfffef3 	bl	9cf0 <CDWHCIDevice::FreeChannel(unsigned int)>
    a120:	e1a01004 	mov	r1, r4
    a124:	e1a00005 	mov	r0, r5
    a128:	e28dd024 	add	sp, sp, #36	; 0x24
    a12c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a130:	eafffc51 	b	927c <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    a134:	e3a03000 	mov	r3, #0
    a138:	e1a01006 	mov	r1, r6
    a13c:	e589302c 	str	r3, [r9, #44]	; 0x2c
    a140:	e1a00005 	mov	r0, r5
    a144:	ebfffee9 	bl	9cf0 <CDWHCIDevice::FreeChannel(unsigned int)>
    a148:	e1a01004 	mov	r1, r4
    a14c:	e1a00005 	mov	r0, r5
    a150:	ebfffc49 	bl	927c <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    a154:	e28d0014 	add	r0, sp, #20
    a158:	eb004131 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    a15c:	e28d0008 	add	r0, sp, #8
    a160:	eb00412f 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    a164:	e28dd024 	add	sp, sp, #36	; 0x24
    a168:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a16c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a170:	e3401003 	movt	r1, #3
    a174:	e30b03ac 	movw	r0, #45996	; 0xb3ac
    a178:	e3400003 	movt	r0, #3
    a17c:	e30023ff 	movw	r2, #1023	; 0x3ff
    a180:	eb0089ce 	bl	2c8c0 <assertion_failed>
    a184:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a188:	e3401003 	movt	r1, #3
    a18c:	e30a0b00 	movw	r0, #43776	; 0xab00
    a190:	e3400003 	movt	r0, #3
    a194:	e3002401 	movw	r2, #1025	; 0x401
    a198:	eb0089c8 	bl	2c8c0 <assertion_failed>
    a19c:	eb00b8d1 	bl	384e8 <CurrentExecutionLevel>
    a1a0:	e3500001 	cmp	r0, #1
    a1a4:	9a000052 	bls	a2f4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x578>
    a1a8:	e3a01000 	mov	r1, #0
    a1ac:	e1a00008 	mov	r0, r8
    a1b0:	eb0030bb 	bl	164a4 <CUSBRequest::SetStatus(int)>
    a1b4:	e1a00004 	mov	r0, r4
    a1b8:	eb000df8 	bl	d9a0 <CDWHCITransferStageData::GetUSBError() const>
    a1bc:	e1a01000 	mov	r1, r0
    a1c0:	e1a00008 	mov	r0, r8
    a1c4:	eb0030ba 	bl	164b4 <CUSBRequest::SetUSBError(TUSBError)>
    a1c8:	e1a01006 	mov	r1, r6
    a1cc:	e1a00005 	mov	r0, r5
    a1d0:	ebfffb2f 	bl	8e94 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a1d4:	eaffffa1 	b	a060 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2e4>
    a1d8:	eb00b8c2 	bl	384e8 <CurrentExecutionLevel>
    a1dc:	e3500001 	cmp	r0, #1
    a1e0:	8afffff0 	bhi	a1a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x42c>
    a1e4:	eb009432 	bl	2f2b4 <CLogger::Get()>
    a1e8:	e58d7000 	str	r7, [sp]
    a1ec:	e59f11b8 	ldr	r1, [pc, #440]	; a3ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x630>
    a1f0:	e3a02002 	mov	r2, #2
    a1f4:	e30a3c70 	movw	r3, #44144	; 0xac70
    a1f8:	e3403003 	movt	r3, #3
    a1fc:	eb0095fa 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a200:	eaffffe8 	b	a1a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x42c>
    a204:	eb00b8b7 	bl	384e8 <CurrentExecutionLevel>
    a208:	e3500001 	cmp	r0, #1
    a20c:	8affffe5 	bhi	a1a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x42c>
    a210:	eb009427 	bl	2f2b4 <CLogger::Get()>
    a214:	e58da000 	str	sl, [sp]
    a218:	eafffff3 	b	a1ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x470>
    a21c:	e1a00008 	mov	r0, r8
    a220:	eb003095 	bl	1647c <CUSBRequest::GetEndpoint() const>
    a224:	eb001782 	bl	10034 <CUSBEndpoint::GetType() const>
    a228:	e3500001 	cmp	r0, #1
    a22c:	1affff44 	bne	9f44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1c8>
    a230:	e1a00004 	mov	r0, r4
    a234:	eb000e09 	bl	da60 <CDWHCITransferStageData::IsRetryOK() const>
    a238:	e3500000 	cmp	r0, #0
    a23c:	0affff40 	beq	9f44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1c8>
    a240:	e1a01006 	mov	r1, r6
    a244:	e589702c 	str	r7, [r9, #44]	; 0x2c
    a248:	eaffffb2 	b	a118 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x39c>
    a24c:	e28d0008 	add	r0, sp, #8
    a250:	eb004109 	bl	1a67c <CDWHCIRegister::Get() const>
    a254:	e7e10ed0 	ubfx	r0, r0, #29, #2
    a258:	e3500003 	cmp	r0, #3
    a25c:	1afffef8 	bne	9e44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0xc8>
    a260:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a264:	e3401003 	movt	r1, #3
    a268:	e30a0bf8 	movw	r0, #44024	; 0xabf8
    a26c:	e3400003 	movt	r0, #3
    a270:	e3002434 	movw	r2, #1076	; 0x434
    a274:	eb008991 	bl	2c8c0 <assertion_failed>
    a278:	e1a01006 	mov	r1, r6
    a27c:	e1a00005 	mov	r0, r5
    a280:	ebfffb03 	bl	8e94 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a284:	e1a00004 	mov	r0, r4
    a288:	eb000d3a 	bl	d778 <CDWHCITransferStageData::IsStatusStage() const>
    a28c:	e3500000 	cmp	r0, #0
    a290:	0a000025 	beq	a32c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5b0>
    a294:	e3a01001 	mov	r1, #1
    a298:	e1a00008 	mov	r0, r8
    a29c:	eb003080 	bl	164a4 <CUSBRequest::SetStatus(int)>
    a2a0:	eaffff6e 	b	a060 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2e4>
    a2a4:	e1a00004 	mov	r0, r4
    a2a8:	e3a01001 	mov	r1, #1
    a2ac:	eb000cba 	bl	d59c <CDWHCITransferStageData::SetState(unsigned int)>
    a2b0:	e3a01000 	mov	r1, #0
    a2b4:	e1a00004 	mov	r0, r4
    a2b8:	eb000cab 	bl	d56c <CDWHCITransferStageData::SetSplitComplete(bool)>
    a2bc:	e1a00004 	mov	r0, r4
    a2c0:	eb000dff 	bl	dac4 <CDWHCITransferStageData::GetFrameScheduler() const>
    a2c4:	e5903000 	ldr	r3, [r0]
    a2c8:	e5933008 	ldr	r3, [r3, #8]
    a2cc:	e12fff33 	blx	r3
    a2d0:	eaffff8d 	b	a10c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x390>
    a2d4:	e1a00004 	mov	r0, r4
    a2d8:	eb000dc9 	bl	da04 <CDWHCITransferStageData::IsStageComplete() const>
    a2dc:	e2507000 	subs	r7, r0, #0
    a2e0:	1affff1e 	bne	9f60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1e4>
    a2e4:	e1a01006 	mov	r1, r6
    a2e8:	e1a00005 	mov	r0, r5
    a2ec:	ebfffae8 	bl	8e94 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a2f0:	eaffffd2 	b	a240 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4c4>
    a2f4:	eb0093ee 	bl	2f2b4 <CLogger::Get()>
    a2f8:	e59f10ac 	ldr	r1, [pc, #172]	; a3ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x630>
    a2fc:	e1a02007 	mov	r2, r7
    a300:	e58da000 	str	sl, [sp]
    a304:	e30a3c70 	movw	r3, #44144	; 0xac70
    a308:	e3403003 	movt	r3, #3
    a30c:	eb0095b6 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a310:	eaffffa4 	b	a1a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x42c>
    a314:	e1a00004 	mov	r0, r4
    a318:	eb000dbd 	bl	da14 <CDWHCITransferStageData::GetResultLen() const>
    a31c:	e1a01000 	mov	r1, r0
    a320:	e1a00008 	mov	r0, r8
    a324:	eb003060 	bl	164ac <CUSBRequest::SetResultLen(unsigned int)>
    a328:	eaffff16 	b	9f88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x20c>
    a32c:	e1a00004 	mov	r0, r4
    a330:	eb000db7 	bl	da14 <CDWHCITransferStageData::GetResultLen() const>
    a334:	e1a01000 	mov	r1, r0
    a338:	e1a00008 	mov	r0, r8
    a33c:	eb00305a 	bl	164ac <CUSBRequest::SetResultLen(unsigned int)>
    a340:	eaffffd3 	b	a294 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x518>
    a344:	e1a01006 	mov	r1, r6
    a348:	e589002c 	str	r0, [r9, #44]	; 0x2c
    a34c:	e1a00005 	mov	r0, r5
    a350:	ebfffe66 	bl	9cf0 <CDWHCIDevice::FreeChannel(unsigned int)>
    a354:	e1a01004 	mov	r1, r4
    a358:	e1a00005 	mov	r0, r5
    a35c:	e28dd024 	add	sp, sp, #36	; 0x24
    a360:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a364:	eafffc4e 	b	94a4 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>
    a368:	e1a00004 	mov	r0, r4
    a36c:	eb000dad 	bl	da28 <CDWHCITransferStageData::IsTimeout() const>
    a370:	e3500000 	cmp	r0, #0
    a374:	0afffff2 	beq	a344 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5c8>
    a378:	e1a00008 	mov	r0, r8
    a37c:	e3a01000 	mov	r1, #0
    a380:	eb003047 	bl	164a4 <CUSBRequest::SetStatus(int)>
    a384:	e3a01007 	mov	r1, #7
    a388:	e1a00008 	mov	r0, r8
    a38c:	eb003048 	bl	164b4 <CUSBRequest::SetUSBError(TUSBError)>
    a390:	eaffff8c 	b	a1c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x44c>
    a394:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a398:	e3401003 	movt	r1, #3
    a39c:	e30b0708 	movw	r0, #46856	; 0xb708
    a3a0:	e3400003 	movt	r0, #3
    a3a4:	e300243e 	movw	r2, #1086	; 0x43e
    a3a8:	eb008944 	bl	2c8c0 <assertion_failed>
    a3ac:	0003afd4 	.word	0x0003afd4

0000a3b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    a3b0:	e5d03095 	ldrb	r3, [r0, #149]	; 0x95
    a3b4:	e3530000 	cmp	r3, #0
    a3b8:	112fff1e 	bxne	lr
    a3bc:	eafffe6e 	b	9d7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>

0000a3c0 <CDWHCIDevice::InterruptHandler()>:
    a3c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a3c4:	e3a01014 	mov	r1, #20
    a3c8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a3cc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a3d0:	e1a05000 	mov	r5, r0
    a3d4:	e28d0004 	add	r0, sp, #4
    a3d8:	eb004088 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a3dc:	e28d0004 	add	r0, sp, #4
    a3e0:	eb004090 	bl	1a628 <CDWHCIRegister::Read()>
    a3e4:	e28d0004 	add	r0, sp, #4
    a3e8:	eb0040a3 	bl	1a67c <CDWHCIRegister::Get() const>
    a3ec:	e3100008 	tst	r0, #8
    a3f0:	0a000002 	beq	a400 <CDWHCIDevice::InterruptHandler()+0x40>
    a3f4:	e5d53095 	ldrb	r3, [r5, #149]	; 0x95
    a3f8:	e3530000 	cmp	r3, #0
    a3fc:	0a00000c 	beq	a434 <CDWHCIDevice::InterruptHandler()+0x74>
    a400:	e28d0004 	add	r0, sp, #4
    a404:	eb00409c 	bl	1a67c <CDWHCIRegister::Get() const>
    a408:	e3100402 	tst	r0, #33554432	; 0x2000000
    a40c:	1a00000e 	bne	a44c <CDWHCIDevice::InterruptHandler()+0x8c>
    a410:	eb002604 	bl	13c28 <CUSBHostController::IsPlugAndPlay()>
    a414:	e3500000 	cmp	r0, #0
    a418:	1a000034 	bne	a4f0 <CDWHCIDevice::InterruptHandler()+0x130>
    a41c:	e28d0004 	add	r0, sp, #4
    a420:	eb004087 	bl	1a644 <CDWHCIRegister::Write()>
    a424:	e28d0004 	add	r0, sp, #4
    a428:	eb00407d 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    a42c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a430:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a434:	e1a00005 	mov	r0, r5
    a438:	ebfffdf3 	bl	9c0c <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>
    a43c:	e28d0004 	add	r0, sp, #4
    a440:	eb00408d 	bl	1a67c <CDWHCIRegister::Get() const>
    a444:	e3100402 	tst	r0, #33554432	; 0x2000000
    a448:	0afffff0 	beq	a410 <CDWHCIDevice::InterruptHandler()+0x50>
    a44c:	e28d0010 	add	r0, sp, #16
    a450:	e3001414 	movw	r1, #1044	; 0x414
    a454:	e3431f98 	movt	r1, #16280	; 0x3f98
    a458:	eb004068 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a45c:	e28d0010 	add	r0, sp, #16
    a460:	eb004070 	bl	1a628 <CDWHCIRegister::Read()>
    a464:	e28d0010 	add	r0, sp, #16
    a468:	eb004075 	bl	1a644 <CDWHCIRegister::Write()>
    a46c:	e5953018 	ldr	r3, [r5, #24]
    a470:	e3530000 	cmp	r3, #0
    a474:	0a000029 	beq	a520 <CDWHCIDevice::InterruptHandler()+0x160>
    a478:	e300750c 	movw	r7, #1292	; 0x50c
    a47c:	e3437f98 	movt	r7, #16280	; 0x3f98
    a480:	e3a04000 	mov	r4, #0
    a484:	e3a06001 	mov	r6, #1
    a488:	ea000005 	b	a4a4 <CDWHCIDevice::InterruptHandler()+0xe4>
    a48c:	e5953018 	ldr	r3, [r5, #24]
    a490:	e2844001 	add	r4, r4, #1
    a494:	e1a06086 	lsl	r6, r6, #1
    a498:	e2877020 	add	r7, r7, #32
    a49c:	e1530004 	cmp	r3, r4
    a4a0:	9a00001e 	bls	a520 <CDWHCIDevice::InterruptHandler()+0x160>
    a4a4:	e28d0010 	add	r0, sp, #16
    a4a8:	eb004073 	bl	1a67c <CDWHCIRegister::Get() const>
    a4ac:	e1100006 	tst	r0, r6
    a4b0:	0afffff5 	beq	a48c <CDWHCIDevice::InterruptHandler()+0xcc>
    a4b4:	e3a02000 	mov	r2, #0
    a4b8:	e1a01007 	mov	r1, r7
    a4bc:	e28d001c 	add	r0, sp, #28
    a4c0:	eb004052 	bl	1a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a4c4:	e28d001c 	add	r0, sp, #28
    a4c8:	eb00405d 	bl	1a644 <CDWHCIRegister::Write()>
    a4cc:	e5d53095 	ldrb	r3, [r5, #149]	; 0x95
    a4d0:	e3530000 	cmp	r3, #0
    a4d4:	1a000002 	bne	a4e4 <CDWHCIDevice::InterruptHandler()+0x124>
    a4d8:	e1a01004 	mov	r1, r4
    a4dc:	e1a00005 	mov	r0, r5
    a4e0:	ebfffe25 	bl	9d7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
    a4e4:	e28d001c 	add	r0, sp, #28
    a4e8:	eb00404d 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    a4ec:	eaffffe6 	b	a48c <CDWHCIDevice::InterruptHandler()+0xcc>
    a4f0:	e28d0004 	add	r0, sp, #4
    a4f4:	eb004060 	bl	1a67c <CDWHCIRegister::Get() const>
    a4f8:	e3100401 	tst	r0, #16777216	; 0x1000000
    a4fc:	1a00000a 	bne	a52c <CDWHCIDevice::InterruptHandler()+0x16c>
    a500:	e28d0004 	add	r0, sp, #4
    a504:	eb00405c 	bl	1a67c <CDWHCIRegister::Get() const>
    a508:	e3100202 	tst	r0, #536870912	; 0x20000000
    a50c:	0affffc2 	beq	a41c <CDWHCIDevice::InterruptHandler()+0x5c>
    a510:	e2851088 	add	r1, r5, #136	; 0x88
    a514:	e1a00005 	mov	r0, r5
    a518:	eb0025c6 	bl	13c38 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
    a51c:	eaffffbe 	b	a41c <CDWHCIDevice::InterruptHandler()+0x5c>
    a520:	e28d0010 	add	r0, sp, #16
    a524:	eb00403e 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    a528:	eaffffb8 	b	a410 <CDWHCIDevice::InterruptHandler()+0x50>
    a52c:	e3a01d11 	mov	r1, #1088	; 0x440
    a530:	e3431f98 	movt	r1, #16280	; 0x3f98
    a534:	e28d001c 	add	r0, sp, #28
    a538:	eb004030 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a53c:	e28d001c 	add	r0, sp, #28
    a540:	eb004038 	bl	1a628 <CDWHCIRegister::Read()>
    a544:	e28d001c 	add	r0, sp, #28
    a548:	eb00404b 	bl	1a67c <CDWHCIRegister::Get() const>
    a54c:	e3100002 	tst	r0, #2
    a550:	1a00000a 	bne	a580 <CDWHCIDevice::InterruptHandler()+0x1c0>
    a554:	e28d001c 	add	r0, sp, #28
    a558:	e3e01004 	mvn	r1, #4
    a55c:	eb004065 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    a560:	e3a0102a 	mov	r1, #42	; 0x2a
    a564:	e28d001c 	add	r0, sp, #28
    a568:	eb004070 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    a56c:	e28d001c 	add	r0, sp, #28
    a570:	eb004033 	bl	1a644 <CDWHCIRegister::Write()>
    a574:	e28d001c 	add	r0, sp, #28
    a578:	eb004029 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    a57c:	eaffffdf 	b	a500 <CDWHCIDevice::InterruptHandler()+0x140>
    a580:	e2851088 	add	r1, r5, #136	; 0x88
    a584:	e1a00005 	mov	r0, r5
    a588:	eb0025aa 	bl	13c38 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
    a58c:	eafffff0 	b	a554 <CDWHCIDevice::InterruptHandler()+0x194>

0000a590 <CDWHCIDevice::InterruptStub(void*)>:
    a590:	e3500000 	cmp	r0, #0
    a594:	0a000000 	beq	a59c <CDWHCIDevice::InterruptStub(void*)+0xc>
    a598:	eaffff88 	b	a3c0 <CDWHCIDevice::InterruptHandler()>
    a59c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a5a0:	e3401003 	movt	r1, #3
    a5a4:	e30a0a18 	movw	r0, #43544	; 0xaa18
    a5a8:	e3400003 	movt	r0, #3
    a5ac:	e92d4010 	push	{r4, lr}
    a5b0:	e30025df 	movw	r2, #1503	; 0x5df
    a5b4:	eb0088c1 	bl	2c8c0 <assertion_failed>

0000a5b8 <CDWHCIDevice::AllocateWaitBlock()>:
    a5b8:	e92d4070 	push	{r4, r5, r6, lr}
    a5bc:	e1a05000 	mov	r5, r0
    a5c0:	e5900084 	ldr	r0, [r0, #132]	; 0x84
    a5c4:	e3500000 	cmp	r0, #0
    a5c8:	1a000010 	bne	a610 <CDWHCIDevice::AllocateWaitBlock()+0x58>
    a5cc:	e5954080 	ldr	r4, [r5, #128]	; 0x80
    a5d0:	e2144001 	ands	r4, r4, #1
    a5d4:	0a00001b 	beq	a648 <CDWHCIDevice::AllocateWaitBlock()+0x90>
    a5d8:	e3a04000 	mov	r4, #0
    a5dc:	e3a03001 	mov	r3, #1
    a5e0:	ea000002 	b	a5f0 <CDWHCIDevice::AllocateWaitBlock()+0x38>
    a5e4:	e5952080 	ldr	r2, [r5, #128]	; 0x80
    a5e8:	e1120003 	tst	r2, r3
    a5ec:	0a00000d 	beq	a628 <CDWHCIDevice::AllocateWaitBlock()+0x70>
    a5f0:	e2844001 	add	r4, r4, #1
    a5f4:	e1a03083 	lsl	r3, r3, #1
    a5f8:	e3540010 	cmp	r4, #16
    a5fc:	1afffff8 	bne	a5e4 <CDWHCIDevice::AllocateWaitBlock()+0x2c>
    a600:	e3500000 	cmp	r0, #0
    a604:	1a00000c 	bne	a63c <CDWHCIDevice::AllocateWaitBlock()+0x84>
    a608:	e1a00004 	mov	r0, r4
    a60c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a610:	eb00b7b9 	bl	384fc <EnterCritical>
    a614:	e5954080 	ldr	r4, [r5, #128]	; 0x80
    a618:	e5950084 	ldr	r0, [r5, #132]	; 0x84
    a61c:	e2144001 	ands	r4, r4, #1
    a620:	1affffec 	bne	a5d8 <CDWHCIDevice::AllocateWaitBlock()+0x20>
    a624:	e3a03001 	mov	r3, #1
    a628:	e5952080 	ldr	r2, [r5, #128]	; 0x80
    a62c:	e3500000 	cmp	r0, #0
    a630:	e1822003 	orr	r2, r2, r3
    a634:	e5852080 	str	r2, [r5, #128]	; 0x80
    a638:	0afffff2 	beq	a608 <CDWHCIDevice::AllocateWaitBlock()+0x50>
    a63c:	eb00b7d9 	bl	385a8 <LeaveCritical>
    a640:	e1a00004 	mov	r0, r4
    a644:	e8bd8070 	pop	{r4, r5, r6, pc}
    a648:	e5953080 	ldr	r3, [r5, #128]	; 0x80
    a64c:	e3833001 	orr	r3, r3, #1
    a650:	e5853080 	str	r3, [r5, #128]	; 0x80
    a654:	eaffffeb 	b	a608 <CDWHCIDevice::AllocateWaitBlock()+0x50>

0000a658 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    a658:	e351000f 	cmp	r1, #15
    a65c:	e92d4070 	push	{r4, r5, r6, lr}
    a660:	8a000012 	bhi	a6b0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    a664:	e1a04000 	mov	r4, r0
    a668:	e3a05001 	mov	r5, #1
    a66c:	e5900084 	ldr	r0, [r0, #132]	; 0x84
    a670:	e1a05115 	lsl	r5, r5, r1
    a674:	e3500000 	cmp	r0, #0
    a678:	1a00000a 	bne	a6a8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    a67c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    a680:	e1130005 	tst	r3, r5
    a684:	0a00000f 	beq	a6c8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    a688:	e5942084 	ldr	r2, [r4, #132]	; 0x84
    a68c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    a690:	e3520000 	cmp	r2, #0
    a694:	e1c33005 	bic	r3, r3, r5
    a698:	e5843080 	str	r3, [r4, #128]	; 0x80
    a69c:	08bd8070 	popeq	{r4, r5, r6, pc}
    a6a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a6a4:	ea00b7bf 	b	385a8 <LeaveCritical>
    a6a8:	eb00b793 	bl	384fc <EnterCritical>
    a6ac:	eafffff2 	b	a67c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    a6b0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a6b4:	e3401003 	movt	r1, #3
    a6b8:	e30a0a24 	movw	r0, #43556	; 0xaa24
    a6bc:	e3400003 	movt	r0, #3
    a6c0:	e3002681 	movw	r2, #1665	; 0x681
    a6c4:	eb00887d 	bl	2c8c0 <assertion_failed>
    a6c8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a6cc:	e3401003 	movt	r1, #3
    a6d0:	e30a0c94 	movw	r0, #44180	; 0xac94
    a6d4:	e3400003 	movt	r0, #3
    a6d8:	e3002686 	movw	r2, #1670	; 0x686
    a6dc:	eb008877 	bl	2c8c0 <assertion_failed>

0000a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    a6e0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a6e4:	e1a05000 	mov	r5, r0
    a6e8:	e1a06001 	mov	r6, r1
    a6ec:	e24dd00c 	sub	sp, sp, #12
    a6f0:	e1a09002 	mov	r9, r2
    a6f4:	e1a07003 	mov	r7, r3
    a6f8:	ebffffae 	bl	a5b8 <CDWHCIDevice::AllocateWaitBlock()>
    a6fc:	e350000f 	cmp	r0, #15
    a700:	8a000027 	bhi	a7a4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    a704:	e3560000 	cmp	r6, #0
    a708:	0a000028 	beq	a7b0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xd0>
    a70c:	e0858000 	add	r8, r5, r0
    a710:	e1a03005 	mov	r3, r5
    a714:	e1a02000 	mov	r2, r0
    a718:	e1a04000 	mov	r4, r0
    a71c:	e30816b8 	movw	r1, #34488	; 0x86b8
    a720:	e3401000 	movt	r1, #0
    a724:	e1a00006 	mov	r0, r6
    a728:	eb002fd9 	bl	16694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    a72c:	e5d83070 	ldrb	r3, [r8, #112]	; 0x70
    a730:	e3530000 	cmp	r3, #0
    a734:	1a000023 	bne	a7c8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe8>
    a738:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
    a73c:	e1a03007 	mov	r3, r7
    a740:	e58d1000 	str	r1, [sp]
    a744:	e1a02009 	mov	r2, r9
    a748:	e3a01001 	mov	r1, #1
    a74c:	e1a00005 	mov	r0, r5
    a750:	e5c81070 	strb	r1, [r8, #112]	; 0x70
    a754:	e1a01006 	mov	r1, r6
    a758:	ebfffaec 	bl	9310 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a75c:	e2503000 	subs	r3, r0, #0
    a760:	0a00000b 	beq	a794 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    a764:	e5d8c070 	ldrb	ip, [r8, #112]	; 0x70
    a768:	e35c0000 	cmp	ip, #0
    a76c:	1afffffc 	bne	a764 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x84>
    a770:	e1a01004 	mov	r1, r4
    a774:	e1a00005 	mov	r0, r5
    a778:	ebffffb6 	bl	a658 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a77c:	e1a00006 	mov	r0, r6
    a780:	eb002f4d 	bl	164bc <CUSBRequest::GetStatus() const>
    a784:	e2500000 	subs	r0, r0, #0
    a788:	13a00001 	movne	r0, #1
    a78c:	e28dd00c 	add	sp, sp, #12
    a790:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a794:	e1a01004 	mov	r1, r4
    a798:	e1a00005 	mov	r0, r5
    a79c:	e5c83070 	strb	r3, [r8, #112]	; 0x70
    a7a0:	ebffffac 	bl	a658 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a7a4:	e3a00000 	mov	r0, #0
    a7a8:	e28dd00c 	add	sp, sp, #12
    a7ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a7b0:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a7b4:	e3401003 	movt	r1, #3
    a7b8:	e30a0b00 	movw	r0, #43776	; 0xab00
    a7bc:	e3400003 	movt	r0, #3
    a7c0:	e30022cf 	movw	r2, #719	; 0x2cf
    a7c4:	eb00883d 	bl	2c8c0 <assertion_failed>
    a7c8:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a7cc:	e3401003 	movt	r1, #3
    a7d0:	e30a0cbc 	movw	r0, #44220	; 0xacbc
    a7d4:	e3400003 	movt	r0, #3
    a7d8:	e30022d2 	movw	r2, #722	; 0x2d2
    a7dc:	eb008837 	bl	2c8c0 <assertion_failed>

0000a7e0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    a7e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a7e4:	e1a04001 	mov	r4, r1
    a7e8:	e5d01095 	ldrb	r1, [r0, #149]	; 0x95
    a7ec:	e24dd00c 	sub	sp, sp, #12
    a7f0:	e21110ff 	ands	r1, r1, #255	; 0xff
    a7f4:	1a00001f 	bne	a878 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a7f8:	e3540000 	cmp	r4, #0
    a7fc:	0a000065 	beq	a998 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1b8>
    a800:	e1a06000 	mov	r6, r0
    a804:	e1a00004 	mov	r0, r4
    a808:	e1a05002 	mov	r5, r2
    a80c:	eb002f24 	bl	164a4 <CUSBRequest::SetStatus(int)>
    a810:	e1a00004 	mov	r0, r4
    a814:	eb002f18 	bl	1647c <CUSBRequest::GetEndpoint() const>
    a818:	eb001605 	bl	10034 <CUSBEndpoint::GetType() const>
    a81c:	e3500000 	cmp	r0, #0
    a820:	1a000017 	bne	a884 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    a824:	e3550000 	cmp	r5, #0
    a828:	1a000067 	bne	a9cc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1ec>
    a82c:	e1a00004 	mov	r0, r4
    a830:	eb002f3b 	bl	16524 <CUSBRequest::GetSetupData()>
    a834:	e3500000 	cmp	r0, #0
    a838:	0a000069 	beq	a9e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x204>
    a83c:	e1d030d0 	ldrsb	r3, [r0]
    a840:	e1a00004 	mov	r0, r4
    a844:	e3530000 	cmp	r3, #0
    a848:	ba000021 	blt	a8d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xf4>
    a84c:	eb002f57 	bl	165b0 <CUSBRequest::GetBufLen() const>
    a850:	e2507000 	subs	r7, r0, #0
    a854:	1a000038 	bne	a93c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x15c>
    a858:	e1a03007 	mov	r3, r7
    a85c:	e1a02007 	mov	r2, r7
    a860:	e1a01004 	mov	r1, r4
    a864:	e1a00006 	mov	r0, r6
    a868:	e58d7000 	str	r7, [sp]
    a86c:	ebffff9b 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a870:	e3500000 	cmp	r0, #0
    a874:	1a00004d 	bne	a9b0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1d0>
    a878:	e3a00000 	mov	r0, #0
    a87c:	e28dd00c 	add	sp, sp, #12
    a880:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a884:	e1a00004 	mov	r0, r4
    a888:	eb002efb 	bl	1647c <CUSBRequest::GetEndpoint() const>
    a88c:	eb0015e8 	bl	10034 <CUSBEndpoint::GetType() const>
    a890:	e3500001 	cmp	r0, #1
    a894:	1a000058 	bne	a9fc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x21c>
    a898:	e1a00004 	mov	r0, r4
    a89c:	eb002f43 	bl	165b0 <CUSBRequest::GetBufLen() const>
    a8a0:	e3500000 	cmp	r0, #0
    a8a4:	0a00005f 	beq	aa28 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x248>
    a8a8:	e1a00004 	mov	r0, r4
    a8ac:	eb002ef2 	bl	1647c <CUSBRequest::GetEndpoint() const>
    a8b0:	eb0015e1 	bl	1003c <CUSBEndpoint::IsDirectionIn() const>
    a8b4:	e3a03000 	mov	r3, #0
    a8b8:	e1a02000 	mov	r2, r0
    a8bc:	e1a01004 	mov	r1, r4
    a8c0:	e1a00006 	mov	r0, r6
    a8c4:	e58d5000 	str	r5, [sp]
    a8c8:	ebffff84 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a8cc:	e28dd00c 	add	sp, sp, #12
    a8d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a8d4:	eb002f35 	bl	165b0 <CUSBRequest::GetBufLen() const>
    a8d8:	e3500000 	cmp	r0, #0
    a8dc:	0a000057 	beq	aa40 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    a8e0:	e1a03005 	mov	r3, r5
    a8e4:	e1a02005 	mov	r2, r5
    a8e8:	e1a01004 	mov	r1, r4
    a8ec:	e1a00006 	mov	r0, r6
    a8f0:	e58d5000 	str	r5, [sp]
    a8f4:	ebffff79 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a8f8:	e3500000 	cmp	r0, #0
    a8fc:	0affffdd 	beq	a878 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a900:	e1a03005 	mov	r3, r5
    a904:	e3a02001 	mov	r2, #1
    a908:	e1a01004 	mov	r1, r4
    a90c:	e1a00006 	mov	r0, r6
    a910:	e58d5000 	str	r5, [sp]
    a914:	ebffff71 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a918:	e3500000 	cmp	r0, #0
    a91c:	0affffd5 	beq	a878 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a920:	e3a03001 	mov	r3, #1
    a924:	e1a02005 	mov	r2, r5
    a928:	e1a01004 	mov	r1, r4
    a92c:	e1a00006 	mov	r0, r6
    a930:	e58d5000 	str	r5, [sp]
    a934:	ebffff69 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a938:	eaffffcf 	b	a87c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a93c:	e1a03005 	mov	r3, r5
    a940:	e1a02005 	mov	r2, r5
    a944:	e1a01004 	mov	r1, r4
    a948:	e1a00006 	mov	r0, r6
    a94c:	e58d5000 	str	r5, [sp]
    a950:	ebffff62 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a954:	e3500000 	cmp	r0, #0
    a958:	0affffc6 	beq	a878 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a95c:	e1a03005 	mov	r3, r5
    a960:	e1a02005 	mov	r2, r5
    a964:	e1a01004 	mov	r1, r4
    a968:	e1a00006 	mov	r0, r6
    a96c:	e58d5000 	str	r5, [sp]
    a970:	ebffff5a 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a974:	e3500000 	cmp	r0, #0
    a978:	0affffbe 	beq	a878 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a97c:	e3a03001 	mov	r3, #1
    a980:	e1a01004 	mov	r1, r4
    a984:	e1a02003 	mov	r2, r3
    a988:	e1a00006 	mov	r0, r6
    a98c:	e58d5000 	str	r5, [sp]
    a990:	ebffff52 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a994:	eaffffb8 	b	a87c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a998:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a99c:	e3401003 	movt	r1, #3
    a9a0:	e30a0b00 	movw	r0, #43776	; 0xab00
    a9a4:	e3400003 	movt	r0, #3
    a9a8:	e3a020f2 	mov	r2, #242	; 0xf2
    a9ac:	eb0087c3 	bl	2c8c0 <assertion_failed>
    a9b0:	e3a03001 	mov	r3, #1
    a9b4:	e1a01004 	mov	r1, r4
    a9b8:	e1a02003 	mov	r2, r3
    a9bc:	e1a00006 	mov	r0, r6
    a9c0:	e58d7000 	str	r7, [sp]
    a9c4:	ebffff45 	bl	a6e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a9c8:	eaffffab 	b	a87c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a9cc:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a9d0:	e3401003 	movt	r1, #3
    a9d4:	e30a0cd4 	movw	r0, #44244	; 0xacd4
    a9d8:	e3400003 	movt	r0, #3
    a9dc:	e3a020f8 	mov	r2, #248	; 0xf8
    a9e0:	eb0087b6 	bl	2c8c0 <assertion_failed>
    a9e4:	e30a1a08 	movw	r1, #43528	; 0xaa08
    a9e8:	e3401003 	movt	r1, #3
    a9ec:	e30a0cf4 	movw	r0, #44276	; 0xacf4
    a9f0:	e3400003 	movt	r0, #3
    a9f4:	e3a020fb 	mov	r2, #251	; 0xfb
    a9f8:	eb0087b0 	bl	2c8c0 <assertion_failed>
    a9fc:	e1a00004 	mov	r0, r4
    aa00:	eb002e9d 	bl	1647c <CUSBRequest::GetEndpoint() const>
    aa04:	eb00158a 	bl	10034 <CUSBEndpoint::GetType() const>
    aa08:	e3500002 	cmp	r0, #2
    aa0c:	0affffa1 	beq	a898 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb8>
    aa10:	e30a1a08 	movw	r1, #43528	; 0xaa08
    aa14:	e3401003 	movt	r1, #3
    aa18:	e30a0d00 	movw	r0, #44288	; 0xad00
    aa1c:	e3400003 	movt	r0, #3
    aa20:	e300211f 	movw	r2, #287	; 0x11f
    aa24:	eb0087a5 	bl	2c8c0 <assertion_failed>
    aa28:	e30a1a08 	movw	r1, #43528	; 0xaa08
    aa2c:	e3401003 	movt	r1, #3
    aa30:	e30a0b44 	movw	r0, #43844	; 0xab44
    aa34:	e3400003 	movt	r0, #3
    aa38:	e3002121 	movw	r2, #289	; 0x121
    aa3c:	eb00879f 	bl	2c8c0 <assertion_failed>
    aa40:	e30a1a08 	movw	r1, #43528	; 0xaa08
    aa44:	e3401003 	movt	r1, #3
    aa48:	e30a0b44 	movw	r0, #43844	; 0xab44
    aa4c:	e3400003 	movt	r0, #3
    aa50:	e3a020ff 	mov	r2, #255	; 0xff
    aa54:	eb008799 	bl	2c8c0 <assertion_failed>

0000aa58 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    aa58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    aa5c:	e2515000 	subs	r5, r1, #0
    aa60:	e59d4020 	ldr	r4, [sp, #32]
    aa64:	0a000020 	beq	aaec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x94>
    aa68:	e1a06002 	mov	r6, r2
    aa6c:	e3520000 	cmp	r2, #0
    aa70:	0a000023 	beq	ab04 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xac>
    aa74:	e3540000 	cmp	r4, #0
    aa78:	0a000027 	beq	ab1c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    aa7c:	e1a07000 	mov	r7, r0
    aa80:	e1a08003 	mov	r8, r3
    aa84:	e2239001 	eor	r9, r3, #1
    aa88:	ea000003 	b	aa9c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x44>
    aa8c:	e3a00001 	mov	r0, #1
    aa90:	eb00abff 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    aa94:	e2544001 	subs	r4, r4, #1
    aa98:	0a000011 	beq	aae4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x8c>
    aa9c:	e1a00005 	mov	r0, r5
    aaa0:	eb003ee0 	bl	1a628 <CDWHCIRegister::Read()>
    aaa4:	e1100006 	tst	r0, r6
    aaa8:	11a0c009 	movne	ip, r9
    aaac:	01a0c008 	moveq	ip, r8
    aab0:	e35c0000 	cmp	ip, #0
    aab4:	0a000008 	beq	aadc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x84>
    aab8:	e5973014 	ldr	r3, [r7, #20]
    aabc:	e3530000 	cmp	r3, #0
    aac0:	1afffff1 	bne	aa8c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x34>
    aac4:	e30a1a08 	movw	r1, #43528	; 0xaa08
    aac8:	e3401003 	movt	r1, #3
    aacc:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    aad0:	e3400003 	movt	r0, #3
    aad4:	e3002697 	movw	r2, #1687	; 0x697
    aad8:	eb008778 	bl	2c8c0 <assertion_failed>
    aadc:	e3a00001 	mov	r0, #1
    aae0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aae4:	e1a00004 	mov	r0, r4
    aae8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aaec:	e30a1a08 	movw	r1, #43528	; 0xaa08
    aaf0:	e3401003 	movt	r1, #3
    aaf4:	e30a0d74 	movw	r0, #44404	; 0xad74
    aaf8:	e3400003 	movt	r0, #3
    aafc:	e3002691 	movw	r2, #1681	; 0x691
    ab00:	eb00876e 	bl	2c8c0 <assertion_failed>
    ab04:	e30a1a08 	movw	r1, #43528	; 0xaa08
    ab08:	e3401003 	movt	r1, #3
    ab0c:	e30a0d84 	movw	r0, #44420	; 0xad84
    ab10:	e3400003 	movt	r0, #3
    ab14:	e3002692 	movw	r2, #1682	; 0x692
    ab18:	eb008768 	bl	2c8c0 <assertion_failed>
    ab1c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    ab20:	e3401003 	movt	r1, #3
    ab24:	e30a0d90 	movw	r0, #44432	; 0xad90
    ab28:	e3400003 	movt	r0, #3
    ab2c:	e3002693 	movw	r2, #1683	; 0x693
    ab30:	eb008762 	bl	2c8c0 <assertion_failed>

0000ab34 <CDWHCIDevice::EnableRootPort()>:
    ab34:	e92d4030 	push	{r4, r5, lr}
    ab38:	e1a04000 	mov	r4, r0
    ab3c:	e24dd024 	sub	sp, sp, #36	; 0x24
    ab40:	eb008fcb 	bl	2ea74 <CKernelOptions::Get()>
    ab44:	e3500000 	cmp	r0, #0
    ab48:	0a000013 	beq	ab9c <CDWHCIDevice::EnableRootPort()+0x68>
    ab4c:	eb008f9a 	bl	2e9bc <CKernelOptions::GetUSBPowerDelay() const>
    ab50:	e2505000 	subs	r5, r0, #0
    ab54:	0a000010 	beq	ab9c <CDWHCIDevice::EnableRootPort()+0x68>
    ab58:	e3a01d11 	mov	r1, #1088	; 0x440
    ab5c:	e3431f98 	movt	r1, #16280	; 0x3f98
    ab60:	e28d0008 	add	r0, sp, #8
    ab64:	eb003ea5 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab68:	e3a03001 	mov	r3, #1
    ab6c:	e1a00004 	mov	r0, r4
    ab70:	e1a02003 	mov	r2, r3
    ab74:	e28d1008 	add	r1, sp, #8
    ab78:	e58d5000 	str	r5, [sp]
    ab7c:	ebffffb5 	bl	aa58 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ab80:	e2504000 	subs	r4, r0, #0
    ab84:	1a000006 	bne	aba4 <CDWHCIDevice::EnableRootPort()+0x70>
    ab88:	e28d0008 	add	r0, sp, #8
    ab8c:	eb003ea4 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    ab90:	e1a00004 	mov	r0, r4
    ab94:	e28dd024 	add	sp, sp, #36	; 0x24
    ab98:	e8bd8030 	pop	{r4, r5, pc}
    ab9c:	e30051fe 	movw	r5, #510	; 0x1fe
    aba0:	eaffffec 	b	ab58 <CDWHCIDevice::EnableRootPort()+0x24>
    aba4:	e3a00064 	mov	r0, #100	; 0x64
    aba8:	eb00abb9 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    abac:	e28d0008 	add	r0, sp, #8
    abb0:	eb003e9c 	bl	1a628 <CDWHCIRegister::Read()>
    abb4:	e28d0008 	add	r0, sp, #8
    abb8:	e3e0102e 	mvn	r1, #46	; 0x2e
    abbc:	eb003ecd 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    abc0:	e3a01c01 	mov	r1, #256	; 0x100
    abc4:	e28d0008 	add	r0, sp, #8
    abc8:	eb003ed8 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    abcc:	e28d0008 	add	r0, sp, #8
    abd0:	eb003e9b 	bl	1a644 <CDWHCIRegister::Write()>
    abd4:	e3a00032 	mov	r0, #50	; 0x32
    abd8:	eb00abad 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    abdc:	e28d0008 	add	r0, sp, #8
    abe0:	eb003e90 	bl	1a628 <CDWHCIRegister::Read()>
    abe4:	e28d0008 	add	r0, sp, #8
    abe8:	e3e0102e 	mvn	r1, #46	; 0x2e
    abec:	eb003ec1 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    abf0:	e3e01c01 	mvn	r1, #256	; 0x100
    abf4:	e28d0008 	add	r0, sp, #8
    abf8:	eb003ebe 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    abfc:	e28d0008 	add	r0, sp, #8
    ac00:	eb003e8f 	bl	1a644 <CDWHCIRegister::Write()>
    ac04:	e3a00014 	mov	r0, #20
    ac08:	eb00aba1 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    ac0c:	eb008f98 	bl	2ea74 <CKernelOptions::Get()>
    ac10:	eb008f6b 	bl	2e9c4 <CKernelOptions::GetUSBFullSpeed() const>
    ac14:	e3500000 	cmp	r0, #0
    ac18:	0affffda 	beq	ab88 <CDWHCIDevice::EnableRootPort()+0x54>
    ac1c:	e28d0014 	add	r0, sp, #20
    ac20:	e3001404 	movw	r1, #1028	; 0x404
    ac24:	e3431f98 	movt	r1, #16280	; 0x3f98
    ac28:	eb003e74 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ac2c:	e28d0014 	add	r0, sp, #20
    ac30:	e30b1b80 	movw	r1, #48000	; 0xbb80
    ac34:	eb003e9c 	bl	1a6ac <CDWHCIRegister::Set(unsigned int)>
    ac38:	e28d0014 	add	r0, sp, #20
    ac3c:	eb003e80 	bl	1a644 <CDWHCIRegister::Write()>
    ac40:	e28d0014 	add	r0, sp, #20
    ac44:	eb003e76 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    ac48:	eaffffce 	b	ab88 <CDWHCIDevice::EnableRootPort()+0x54>

0000ac4c <CDWHCIDevice::LogTransactionFailed(unsigned int)>:
    ac4c:	e92d4010 	push	{r4, lr}
    ac50:	e1a04001 	mov	r4, r1
    ac54:	e24dd008 	sub	sp, sp, #8
    ac58:	eb00b622 	bl	384e8 <CurrentExecutionLevel>
    ac5c:	e3500001 	cmp	r0, #1
    ac60:	9a000001 	bls	ac6c <CDWHCIDevice::LogTransactionFailed(unsigned int)+0x20>
    ac64:	e28dd008 	add	sp, sp, #8
    ac68:	e8bd8010 	pop	{r4, pc}
    ac6c:	eb009190 	bl	2f2b4 <CLogger::Get()>
    ac70:	e59f1018 	ldr	r1, [pc, #24]	; ac90 <CDWHCIDevice::LogTransactionFailed(unsigned int)+0x44>
    ac74:	e3a02002 	mov	r2, #2
    ac78:	e58d4000 	str	r4, [sp]
    ac7c:	e30a3c70 	movw	r3, #44144	; 0xac70
    ac80:	e3403003 	movt	r3, #3
    ac84:	eb009358 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac88:	e28dd008 	add	sp, sp, #8
    ac8c:	e8bd8010 	pop	{r4, pc}
    ac90:	0003afd4 	.word	0x0003afd4

0000ac94 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    ac94:	e92d4030 	push	{r4, r5, lr}
    ac98:	e1a04001 	mov	r4, r1
    ac9c:	e1a01002 	mov	r1, r2
    aca0:	e24dd01c 	sub	sp, sp, #28
    aca4:	e28d000c 	add	r0, sp, #12
    aca8:	eb003e54 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    acac:	f57ff05f 	dmb	sy
    acb0:	eb00917f 	bl	2f2b4 <CLogger::Get()>
    acb4:	e1a05000 	mov	r5, r0
    acb8:	e28d000c 	add	r0, sp, #12
    acbc:	eb003e59 	bl	1a628 <CDWHCIRegister::Read()>
    acc0:	e59f1028 	ldr	r1, [pc, #40]	; acf0 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    acc4:	e1a03000 	mov	r3, r0
    acc8:	e3a02004 	mov	r2, #4
    accc:	e1a00005 	mov	r0, r5
    acd0:	e88d0018 	stm	sp, {r3, r4}
    acd4:	e30a3da0 	movw	r3, #44448	; 0xada0
    acd8:	e3403003 	movt	r3, #3
    acdc:	eb009342 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ace0:	e28d000c 	add	r0, sp, #12
    ace4:	eb003e4e 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    ace8:	e28dd01c 	add	sp, sp, #28
    acec:	e8bd8030 	pop	{r4, r5, pc}
    acf0:	0003afd4 	.word	0x0003afd4

0000acf4 <CDWHCIDevice::DumpStatus(unsigned int)>:
    acf4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    acf8:	e1a07001 	mov	r7, r1
    acfc:	e3a01000 	mov	r1, #0
    ad00:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad04:	e24dd01c 	sub	sp, sp, #28
    ad08:	e28d000c 	add	r0, sp, #12
    ad0c:	eb003e3b 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ad10:	f57ff05f 	dmb	sy
    ad14:	eb009166 	bl	2f2b4 <CLogger::Get()>
    ad18:	e1a05000 	mov	r5, r0
    ad1c:	e28d000c 	add	r0, sp, #12
    ad20:	e30a4da0 	movw	r4, #44448	; 0xada0
    ad24:	e3404003 	movt	r4, #3
    ad28:	eb003e3e 	bl	1a628 <CDWHCIRegister::Read()>
    ad2c:	e58d0000 	str	r0, [sp]
    ad30:	e1a00005 	mov	r0, r5
    ad34:	e59f5660 	ldr	r5, [pc, #1632]	; b39c <CDWHCIDevice::DumpStatus(unsigned int)+0x6a8>
    ad38:	e1a03004 	mov	r3, r4
    ad3c:	e3a02004 	mov	r2, #4
    ad40:	e30a1dac 	movw	r1, #44460	; 0xadac
    ad44:	e3401003 	movt	r1, #3
    ad48:	e58d1004 	str	r1, [sp, #4]
    ad4c:	e1a01005 	mov	r1, r5
    ad50:	eb009325 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ad54:	e28d000c 	add	r0, sp, #12
    ad58:	eb003e31 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    ad5c:	e28d000c 	add	r0, sp, #12
    ad60:	e3a01008 	mov	r1, #8
    ad64:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad68:	eb003e24 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ad6c:	f57ff05f 	dmb	sy
    ad70:	eb00914f 	bl	2f2b4 <CLogger::Get()>
    ad74:	e1a06000 	mov	r6, r0
    ad78:	e28d000c 	add	r0, sp, #12
    ad7c:	eb003e29 	bl	1a628 <CDWHCIRegister::Read()>
    ad80:	e1a03004 	mov	r3, r4
    ad84:	e3a02004 	mov	r2, #4
    ad88:	e1a01005 	mov	r1, r5
    ad8c:	e58d0000 	str	r0, [sp]
    ad90:	e30acdb8 	movw	ip, #44472	; 0xadb8
    ad94:	e340c003 	movt	ip, #3
    ad98:	e1a00006 	mov	r0, r6
    ad9c:	e58dc004 	str	ip, [sp, #4]
    ada0:	eb009311 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ada4:	e28d000c 	add	r0, sp, #12
    ada8:	eb003e1d 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    adac:	e28d000c 	add	r0, sp, #12
    adb0:	e3a0100c 	mov	r1, #12
    adb4:	e3431f98 	movt	r1, #16280	; 0x3f98
    adb8:	eb003e10 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    adbc:	f57ff05f 	dmb	sy
    adc0:	eb00913b 	bl	2f2b4 <CLogger::Get()>
    adc4:	e1a06000 	mov	r6, r0
    adc8:	e28d000c 	add	r0, sp, #12
    adcc:	eb003e15 	bl	1a628 <CDWHCIRegister::Read()>
    add0:	e1a03004 	mov	r3, r4
    add4:	e3a02004 	mov	r2, #4
    add8:	e1a01005 	mov	r1, r5
    addc:	e58d0000 	str	r0, [sp]
    ade0:	e30acdc0 	movw	ip, #44480	; 0xadc0
    ade4:	e340c003 	movt	ip, #3
    ade8:	e1a00006 	mov	r0, r6
    adec:	e58dc004 	str	ip, [sp, #4]
    adf0:	eb0092fd 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    adf4:	e28d000c 	add	r0, sp, #12
    adf8:	eb003e09 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    adfc:	e28d000c 	add	r0, sp, #12
    ae00:	e3a01010 	mov	r1, #16
    ae04:	e3431f98 	movt	r1, #16280	; 0x3f98
    ae08:	eb003dfc 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ae0c:	f57ff05f 	dmb	sy
    ae10:	eb009127 	bl	2f2b4 <CLogger::Get()>
    ae14:	e1a06000 	mov	r6, r0
    ae18:	e28d000c 	add	r0, sp, #12
    ae1c:	eb003e01 	bl	1a628 <CDWHCIRegister::Read()>
    ae20:	e1a03004 	mov	r3, r4
    ae24:	e3a02004 	mov	r2, #4
    ae28:	e1a01005 	mov	r1, r5
    ae2c:	e58d0000 	str	r0, [sp]
    ae30:	e30acdc8 	movw	ip, #44488	; 0xadc8
    ae34:	e340c003 	movt	ip, #3
    ae38:	e1a00006 	mov	r0, r6
    ae3c:	e58dc004 	str	ip, [sp, #4]
    ae40:	eb0092e9 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae44:	e28d000c 	add	r0, sp, #12
    ae48:	eb003df5 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    ae4c:	e28d000c 	add	r0, sp, #12
    ae50:	e3a01014 	mov	r1, #20
    ae54:	e3431f98 	movt	r1, #16280	; 0x3f98
    ae58:	eb003de8 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ae5c:	f57ff05f 	dmb	sy
    ae60:	eb009113 	bl	2f2b4 <CLogger::Get()>
    ae64:	e1a06000 	mov	r6, r0
    ae68:	e28d000c 	add	r0, sp, #12
    ae6c:	eb003ded 	bl	1a628 <CDWHCIRegister::Read()>
    ae70:	e1a03004 	mov	r3, r4
    ae74:	e3a02004 	mov	r2, #4
    ae78:	e1a01005 	mov	r1, r5
    ae7c:	e58d0000 	str	r0, [sp]
    ae80:	e30acdd0 	movw	ip, #44496	; 0xadd0
    ae84:	e340c003 	movt	ip, #3
    ae88:	e1a00006 	mov	r0, r6
    ae8c:	e58dc004 	str	ip, [sp, #4]
    ae90:	eb0092d5 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae94:	e28d000c 	add	r0, sp, #12
    ae98:	eb003de1 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    ae9c:	e28d000c 	add	r0, sp, #12
    aea0:	e3a01018 	mov	r1, #24
    aea4:	e3431f98 	movt	r1, #16280	; 0x3f98
    aea8:	eb003dd4 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aeac:	f57ff05f 	dmb	sy
    aeb0:	eb0090ff 	bl	2f2b4 <CLogger::Get()>
    aeb4:	e1a06000 	mov	r6, r0
    aeb8:	e28d000c 	add	r0, sp, #12
    aebc:	eb003dd9 	bl	1a628 <CDWHCIRegister::Read()>
    aec0:	e1a03004 	mov	r3, r4
    aec4:	e3a02004 	mov	r2, #4
    aec8:	e1a01005 	mov	r1, r5
    aecc:	e58d0000 	str	r0, [sp]
    aed0:	e30acddc 	movw	ip, #44508	; 0xaddc
    aed4:	e340c003 	movt	ip, #3
    aed8:	e1a00006 	mov	r0, r6
    aedc:	e58dc004 	str	ip, [sp, #4]
    aee0:	eb0092c1 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aee4:	e28d000c 	add	r0, sp, #12
    aee8:	eb003dcd 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    aeec:	e28d000c 	add	r0, sp, #12
    aef0:	e3a01024 	mov	r1, #36	; 0x24
    aef4:	e3431f98 	movt	r1, #16280	; 0x3f98
    aef8:	eb003dc0 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aefc:	f57ff05f 	dmb	sy
    af00:	eb0090eb 	bl	2f2b4 <CLogger::Get()>
    af04:	e1a06000 	mov	r6, r0
    af08:	e28d000c 	add	r0, sp, #12
    af0c:	eb003dc5 	bl	1a628 <CDWHCIRegister::Read()>
    af10:	e1a03004 	mov	r3, r4
    af14:	e3a02004 	mov	r2, #4
    af18:	e1a01005 	mov	r1, r5
    af1c:	e58d0000 	str	r0, [sp]
    af20:	e30acde8 	movw	ip, #44520	; 0xade8
    af24:	e340c003 	movt	ip, #3
    af28:	e1a00006 	mov	r0, r6
    af2c:	e58dc004 	str	ip, [sp, #4]
    af30:	eb0092ad 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    af34:	e28d000c 	add	r0, sp, #12
    af38:	eb003db9 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    af3c:	e28d000c 	add	r0, sp, #12
    af40:	e3a01028 	mov	r1, #40	; 0x28
    af44:	e3431f98 	movt	r1, #16280	; 0x3f98
    af48:	eb003dac 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    af4c:	f57ff05f 	dmb	sy
    af50:	eb0090d7 	bl	2f2b4 <CLogger::Get()>
    af54:	e1a06000 	mov	r6, r0
    af58:	e28d000c 	add	r0, sp, #12
    af5c:	eb003db1 	bl	1a628 <CDWHCIRegister::Read()>
    af60:	e1a03004 	mov	r3, r4
    af64:	e3a02004 	mov	r2, #4
    af68:	e1a01005 	mov	r1, r5
    af6c:	e58d0000 	str	r0, [sp]
    af70:	e30acdf4 	movw	ip, #44532	; 0xadf4
    af74:	e340c003 	movt	ip, #3
    af78:	e1a00006 	mov	r0, r6
    af7c:	e58dc004 	str	ip, [sp, #4]
    af80:	eb009299 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    af84:	e28d000c 	add	r0, sp, #12
    af88:	eb003da5 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    af8c:	e28d000c 	add	r0, sp, #12
    af90:	e3a0102c 	mov	r1, #44	; 0x2c
    af94:	e3431f98 	movt	r1, #16280	; 0x3f98
    af98:	eb003d98 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    af9c:	f57ff05f 	dmb	sy
    afa0:	eb0090c3 	bl	2f2b4 <CLogger::Get()>
    afa4:	e1a06000 	mov	r6, r0
    afa8:	e28d000c 	add	r0, sp, #12
    afac:	eb003d9d 	bl	1a628 <CDWHCIRegister::Read()>
    afb0:	e1a03004 	mov	r3, r4
    afb4:	e3a02004 	mov	r2, #4
    afb8:	e1a01005 	mov	r1, r5
    afbc:	e58d0000 	str	r0, [sp]
    afc0:	e30ace08 	movw	ip, #44552	; 0xae08
    afc4:	e340c003 	movt	ip, #3
    afc8:	e1a00006 	mov	r0, r6
    afcc:	e58dc004 	str	ip, [sp, #4]
    afd0:	eb009285 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    afd4:	e28d000c 	add	r0, sp, #12
    afd8:	eb003d91 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    afdc:	e28d000c 	add	r0, sp, #12
    afe0:	e3a01c01 	mov	r1, #256	; 0x100
    afe4:	e3431f98 	movt	r1, #16280	; 0x3f98
    afe8:	eb003d84 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    afec:	f57ff05f 	dmb	sy
    aff0:	eb0090af 	bl	2f2b4 <CLogger::Get()>
    aff4:	e1a06000 	mov	r6, r0
    aff8:	e28d000c 	add	r0, sp, #12
    affc:	eb003d89 	bl	1a628 <CDWHCIRegister::Read()>
    b000:	e1a03004 	mov	r3, r4
    b004:	e3a02004 	mov	r2, #4
    b008:	e1a01005 	mov	r1, r5
    b00c:	e58d0000 	str	r0, [sp]
    b010:	e30ace18 	movw	ip, #44568	; 0xae18
    b014:	e340c003 	movt	ip, #3
    b018:	e1a00006 	mov	r0, r6
    b01c:	e58dc004 	str	ip, [sp, #4]
    b020:	eb009271 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b024:	e28d000c 	add	r0, sp, #12
    b028:	eb003d7d 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b02c:	e28d000c 	add	r0, sp, #12
    b030:	e3a01b01 	mov	r1, #1024	; 0x400
    b034:	e3431f98 	movt	r1, #16280	; 0x3f98
    b038:	eb003d70 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b03c:	f57ff05f 	dmb	sy
    b040:	eb00909b 	bl	2f2b4 <CLogger::Get()>
    b044:	e1a06000 	mov	r6, r0
    b048:	e28d000c 	add	r0, sp, #12
    b04c:	eb003d75 	bl	1a628 <CDWHCIRegister::Read()>
    b050:	e1a03004 	mov	r3, r4
    b054:	e3a02004 	mov	r2, #4
    b058:	e1a01005 	mov	r1, r5
    b05c:	e58d0000 	str	r0, [sp]
    b060:	e30ace30 	movw	ip, #44592	; 0xae30
    b064:	e340c003 	movt	ip, #3
    b068:	e1a00006 	mov	r0, r6
    b06c:	e58dc004 	str	ip, [sp, #4]
    b070:	eb00925d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b074:	e28d000c 	add	r0, sp, #12
    b078:	eb003d69 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b07c:	e28d000c 	add	r0, sp, #12
    b080:	e3a01e41 	mov	r1, #1040	; 0x410
    b084:	e3431f98 	movt	r1, #16280	; 0x3f98
    b088:	eb003d5c 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b08c:	f57ff05f 	dmb	sy
    b090:	eb009087 	bl	2f2b4 <CLogger::Get()>
    b094:	e1a06000 	mov	r6, r0
    b098:	e28d000c 	add	r0, sp, #12
    b09c:	eb003d61 	bl	1a628 <CDWHCIRegister::Read()>
    b0a0:	e1a03004 	mov	r3, r4
    b0a4:	e3a02004 	mov	r2, #4
    b0a8:	e1a01005 	mov	r1, r5
    b0ac:	e58d0000 	str	r0, [sp]
    b0b0:	e30ace3c 	movw	ip, #44604	; 0xae3c
    b0b4:	e340c003 	movt	ip, #3
    b0b8:	e1a00006 	mov	r0, r6
    b0bc:	e58dc004 	str	ip, [sp, #4]
    b0c0:	eb009249 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b0c4:	e28d000c 	add	r0, sp, #12
    b0c8:	eb003d55 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b0cc:	e28d000c 	add	r0, sp, #12
    b0d0:	e3001414 	movw	r1, #1044	; 0x414
    b0d4:	e3431f98 	movt	r1, #16280	; 0x3f98
    b0d8:	eb003d48 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b0dc:	f57ff05f 	dmb	sy
    b0e0:	eb009073 	bl	2f2b4 <CLogger::Get()>
    b0e4:	e1a06000 	mov	r6, r0
    b0e8:	e28d000c 	add	r0, sp, #12
    b0ec:	eb003d4d 	bl	1a628 <CDWHCIRegister::Read()>
    b0f0:	e1a03004 	mov	r3, r4
    b0f4:	e3a02004 	mov	r2, #4
    b0f8:	e1a01005 	mov	r1, r5
    b0fc:	e58d0000 	str	r0, [sp]
    b100:	e30ace54 	movw	ip, #44628	; 0xae54
    b104:	e340c003 	movt	ip, #3
    b108:	e1a00006 	mov	r0, r6
    b10c:	e58dc004 	str	ip, [sp, #4]
    b110:	eb009235 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b114:	e28d000c 	add	r0, sp, #12
    b118:	eb003d41 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b11c:	e28d000c 	add	r0, sp, #12
    b120:	e3001418 	movw	r1, #1048	; 0x418
    b124:	e3431f98 	movt	r1, #16280	; 0x3f98
    b128:	eb003d34 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b12c:	f57ff05f 	dmb	sy
    b130:	eb00905f 	bl	2f2b4 <CLogger::Get()>
    b134:	e1a06000 	mov	r6, r0
    b138:	e28d000c 	add	r0, sp, #12
    b13c:	eb003d39 	bl	1a628 <CDWHCIRegister::Read()>
    b140:	e1a03004 	mov	r3, r4
    b144:	e3a02004 	mov	r2, #4
    b148:	e1a01005 	mov	r1, r5
    b14c:	e58d0000 	str	r0, [sp]
    b150:	e30ace68 	movw	ip, #44648	; 0xae68
    b154:	e340c003 	movt	ip, #3
    b158:	e1a00006 	mov	r0, r6
    b15c:	e58dc004 	str	ip, [sp, #4]
    b160:	eb009221 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b164:	e28d000c 	add	r0, sp, #12
    b168:	eb003d2d 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b16c:	e28d000c 	add	r0, sp, #12
    b170:	e3a01d11 	mov	r1, #1088	; 0x440
    b174:	e3431f98 	movt	r1, #16280	; 0x3f98
    b178:	eb003d20 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b17c:	f57ff05f 	dmb	sy
    b180:	eb00904b 	bl	2f2b4 <CLogger::Get()>
    b184:	e1a06000 	mov	r6, r0
    b188:	e28d000c 	add	r0, sp, #12
    b18c:	eb003d25 	bl	1a628 <CDWHCIRegister::Read()>
    b190:	e58d0000 	str	r0, [sp]
    b194:	e1a00006 	mov	r0, r6
    b198:	e30c6028 	movw	r6, #49192	; 0xc028
    b19c:	e34061fc 	movt	r6, #508	; 0x1fc
    b1a0:	e1a03004 	mov	r3, r4
    b1a4:	e0876006 	add	r6, r7, r6
    b1a8:	e3a02004 	mov	r2, #4
    b1ac:	e1a01005 	mov	r1, r5
    b1b0:	e30ace80 	movw	ip, #44672	; 0xae80
    b1b4:	e340c003 	movt	ip, #3
    b1b8:	e58dc004 	str	ip, [sp, #4]
    b1bc:	eb00920a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b1c0:	e1a06286 	lsl	r6, r6, #5
    b1c4:	e28d000c 	add	r0, sp, #12
    b1c8:	eb003d15 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b1cc:	e1a01006 	mov	r1, r6
    b1d0:	e28d000c 	add	r0, sp, #12
    b1d4:	eb003d09 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b1d8:	f57ff05f 	dmb	sy
    b1dc:	eb009034 	bl	2f2b4 <CLogger::Get()>
    b1e0:	e1a07000 	mov	r7, r0
    b1e4:	e28d000c 	add	r0, sp, #12
    b1e8:	eb003d0e 	bl	1a628 <CDWHCIRegister::Read()>
    b1ec:	e1a03004 	mov	r3, r4
    b1f0:	e3a02004 	mov	r2, #4
    b1f4:	e1a01005 	mov	r1, r5
    b1f8:	e58d0000 	str	r0, [sp]
    b1fc:	e30ace8c 	movw	ip, #44684	; 0xae8c
    b200:	e340c003 	movt	ip, #3
    b204:	e1a00007 	mov	r0, r7
    b208:	e58dc004 	str	ip, [sp, #4]
    b20c:	eb0091f6 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b210:	e28d000c 	add	r0, sp, #12
    b214:	eb003d02 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b218:	e2861004 	add	r1, r6, #4
    b21c:	e28d000c 	add	r0, sp, #12
    b220:	eb003cf6 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b224:	f57ff05f 	dmb	sy
    b228:	eb009021 	bl	2f2b4 <CLogger::Get()>
    b22c:	e1a07000 	mov	r7, r0
    b230:	e28d000c 	add	r0, sp, #12
    b234:	eb003cfb 	bl	1a628 <CDWHCIRegister::Read()>
    b238:	e1a03004 	mov	r3, r4
    b23c:	e3a02004 	mov	r2, #4
    b240:	e1a01005 	mov	r1, r5
    b244:	e58d0000 	str	r0, [sp]
    b248:	e30acea4 	movw	ip, #44708	; 0xaea4
    b24c:	e340c003 	movt	ip, #3
    b250:	e1a00007 	mov	r0, r7
    b254:	e58dc004 	str	ip, [sp, #4]
    b258:	eb0091e3 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b25c:	e28d000c 	add	r0, sp, #12
    b260:	eb003cef 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b264:	e2861008 	add	r1, r6, #8
    b268:	e28d000c 	add	r0, sp, #12
    b26c:	eb003ce3 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b270:	f57ff05f 	dmb	sy
    b274:	eb00900e 	bl	2f2b4 <CLogger::Get()>
    b278:	e1a07000 	mov	r7, r0
    b27c:	e28d000c 	add	r0, sp, #12
    b280:	eb003ce8 	bl	1a628 <CDWHCIRegister::Read()>
    b284:	e1a03004 	mov	r3, r4
    b288:	e3a02004 	mov	r2, #4
    b28c:	e1a01005 	mov	r1, r5
    b290:	e58d0000 	str	r0, [sp]
    b294:	e30acebc 	movw	ip, #44732	; 0xaebc
    b298:	e340c003 	movt	ip, #3
    b29c:	e1a00007 	mov	r0, r7
    b2a0:	e58dc004 	str	ip, [sp, #4]
    b2a4:	eb0091d0 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b2a8:	e28d000c 	add	r0, sp, #12
    b2ac:	eb003cdc 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b2b0:	e286100c 	add	r1, r6, #12
    b2b4:	e28d000c 	add	r0, sp, #12
    b2b8:	eb003cd0 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b2bc:	f57ff05f 	dmb	sy
    b2c0:	eb008ffb 	bl	2f2b4 <CLogger::Get()>
    b2c4:	e1a07000 	mov	r7, r0
    b2c8:	e28d000c 	add	r0, sp, #12
    b2cc:	eb003cd5 	bl	1a628 <CDWHCIRegister::Read()>
    b2d0:	e1a03004 	mov	r3, r4
    b2d4:	e3a02004 	mov	r2, #4
    b2d8:	e1a01005 	mov	r1, r5
    b2dc:	e58d0000 	str	r0, [sp]
    b2e0:	e30aced0 	movw	ip, #44752	; 0xaed0
    b2e4:	e340c003 	movt	ip, #3
    b2e8:	e1a00007 	mov	r0, r7
    b2ec:	e58dc004 	str	ip, [sp, #4]
    b2f0:	eb0091bd 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b2f4:	e28d000c 	add	r0, sp, #12
    b2f8:	eb003cc9 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b2fc:	e2861010 	add	r1, r6, #16
    b300:	e28d000c 	add	r0, sp, #12
    b304:	eb003cbd 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b308:	f57ff05f 	dmb	sy
    b30c:	eb008fe8 	bl	2f2b4 <CLogger::Get()>
    b310:	e1a07000 	mov	r7, r0
    b314:	e28d000c 	add	r0, sp, #12
    b318:	eb003cc2 	bl	1a628 <CDWHCIRegister::Read()>
    b31c:	e1a03004 	mov	r3, r4
    b320:	e3a02004 	mov	r2, #4
    b324:	e1a01005 	mov	r1, r5
    b328:	e58d0000 	str	r0, [sp]
    b32c:	e30acee8 	movw	ip, #44776	; 0xaee8
    b330:	e340c003 	movt	ip, #3
    b334:	e1a00007 	mov	r0, r7
    b338:	e58dc004 	str	ip, [sp, #4]
    b33c:	eb0091aa 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b340:	e28d000c 	add	r0, sp, #12
    b344:	eb003cb6 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b348:	e2861014 	add	r1, r6, #20
    b34c:	e28d000c 	add	r0, sp, #12
    b350:	eb003caa 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b354:	f57ff05f 	dmb	sy
    b358:	eb008fd5 	bl	2f2b4 <CLogger::Get()>
    b35c:	e1a06000 	mov	r6, r0
    b360:	e28d000c 	add	r0, sp, #12
    b364:	eb003caf 	bl	1a628 <CDWHCIRegister::Read()>
    b368:	e1a03004 	mov	r3, r4
    b36c:	e3a02004 	mov	r2, #4
    b370:	e1a01005 	mov	r1, r5
    b374:	e58d0000 	str	r0, [sp]
    b378:	e30acf00 	movw	ip, #44800	; 0xaf00
    b37c:	e340c003 	movt	ip, #3
    b380:	e1a00006 	mov	r0, r6
    b384:	e58dc004 	str	ip, [sp, #4]
    b388:	eb009197 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b38c:	e28d000c 	add	r0, sp, #12
    b390:	eb003ca3 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b394:	e28dd01c 	add	sp, sp, #28
    b398:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b39c:	0003afd4 	.word	0x0003afd4

0000b3a0 <CDWHCIDevice::~CDWHCIDevice()>:
    b3a0:	e92d4010 	push	{r4, lr}
    b3a4:	e3a02001 	mov	r2, #1
    b3a8:	e5903014 	ldr	r3, [r0, #20]
    b3ac:	e59f10e4 	ldr	r1, [pc, #228]	; b498 <CDWHCIDevice::~CDWHCIDevice()+0xf8>
    b3b0:	e24dd028 	sub	sp, sp, #40	; 0x28
    b3b4:	e3530000 	cmp	r3, #0
    b3b8:	e5801000 	str	r1, [r0]
    b3bc:	e5c02095 	strb	r2, [r0, #149]	; 0x95
    b3c0:	0a000025 	beq	b45c <CDWHCIDevice::~CDWHCIDevice()+0xbc>
    b3c4:	e1a04000 	mov	r4, r0
    b3c8:	e3a000c8 	mov	r0, #200	; 0xc8
    b3cc:	eb00a9b0 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
    b3d0:	e5940010 	ldr	r0, [r4, #16]
    b3d4:	e3500000 	cmp	r0, #0
    b3d8:	0a000025 	beq	b474 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    b3dc:	e3a01009 	mov	r1, #9
    b3e0:	eb00b502 	bl	387f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b3e4:	e1a00004 	mov	r0, r4
    b3e8:	ebfff56d 	bl	89a4 <CDWHCIDevice::Reset()>
    b3ec:	e3a01000 	mov	r1, #0
    b3f0:	e28d0008 	add	r0, sp, #8
    b3f4:	eb008552 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    b3f8:	eddf0b24 	vldr	d16, [pc, #144]	; b490 <CDWHCIDevice::~CDWHCIDevice()+0xf0>
    b3fc:	e3a01000 	mov	r1, #0
    b400:	e58d1000 	str	r1, [sp]
    b404:	e28d101c 	add	r1, sp, #28
    b408:	e28d2010 	add	r2, sp, #16
    b40c:	e3a03014 	mov	r3, #20
    b410:	e28d0008 	add	r0, sp, #8
    b414:	f441078f 	vst1.32	{d16}, [r1]
    b418:	e3081001 	movw	r1, #32769	; 0x8001
    b41c:	e3401002 	movt	r1, #2
    b420:	eb008599 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b424:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    b428:	e2843010 	add	r3, r4, #16
    b42c:	e28d0008 	add	r0, sp, #8
    b430:	f443078f 	vst1.32	{d16}, [r3]
    b434:	eb008549 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
    b438:	e2840088 	add	r0, r4, #136	; 0x88
    b43c:	eb0003cb 	bl	c370 <CDWHCIRootPort::~CDWHCIRootPort()>
    b440:	e2840024 	add	r0, r4, #36	; 0x24
    b444:	eb000552 	bl	c994 <CDWHCITransactionQueue::~CDWHCITransactionQueue()>
    b448:	e1a00004 	mov	r0, r4
    b44c:	eb00215a 	bl	139bc <CUSBHostController::~CUSBHostController()>
    b450:	e1a00004 	mov	r0, r4
    b454:	e28dd028 	add	sp, sp, #40	; 0x28
    b458:	e8bd8010 	pop	{r4, pc}
    b45c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    b460:	e3401003 	movt	r1, #3
    b464:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    b468:	e3400003 	movt	r0, #3
    b46c:	e3a0206c 	mov	r2, #108	; 0x6c
    b470:	eb008512 	bl	2c8c0 <assertion_failed>
    b474:	e30a1a08 	movw	r1, #43528	; 0xaa08
    b478:	e3401003 	movt	r1, #3
    b47c:	e30a0a44 	movw	r0, #43588	; 0xaa44
    b480:	e3400003 	movt	r0, #3
    b484:	e3a0206f 	mov	r2, #111	; 0x6f
    b488:	eb00850c 	bl	2c8c0 <assertion_failed>
    b48c:	e320f000 	nop	{0}
    b490:	00000003 	.word	0x00000003
    b494:	00000002 	.word	0x00000002
    b498:	0003afb8 	.word	0x0003afb8

0000b49c <CDWHCIDevice::~CDWHCIDevice()>:
    b49c:	e92d4010 	push	{r4, lr}
    b4a0:	e1a04000 	mov	r4, r0
    b4a4:	ebffffbd 	bl	b3a0 <CDWHCIDevice::~CDWHCIDevice()>
    b4a8:	e1a00004 	mov	r0, r4
    b4ac:	e3a01098 	mov	r1, #152	; 0x98
    b4b0:	eb00ae11 	bl	36cfc <operator delete(void*, unsigned int)>
    b4b4:	e1a00004 	mov	r0, r4
    b4b8:	e8bd8010 	pop	{r4, pc}

0000b4bc <CDWHCIDevice::ReScanDevices()>:
    b4bc:	e5d03094 	ldrb	r3, [r0, #148]	; 0x94
    b4c0:	e92d4070 	push	{r4, r5, r6, lr}
    b4c4:	e1a04000 	mov	r4, r0
    b4c8:	e3530000 	cmp	r3, #0
    b4cc:	1a00000f 	bne	b510 <CDWHCIDevice::ReScanDevices()+0x54>
    b4d0:	ebfffd97 	bl	ab34 <CDWHCIDevice::EnableRootPort()>
    b4d4:	e3500000 	cmp	r0, #0
    b4d8:	0a00000f 	beq	b51c <CDWHCIDevice::ReScanDevices()+0x60>
    b4dc:	e3a05001 	mov	r5, #1
    b4e0:	e2840088 	add	r0, r4, #136	; 0x88
    b4e4:	e5c45094 	strb	r5, [r4, #148]	; 0x94
    b4e8:	eb00040d 	bl	c524 <CDWHCIRootPort::Initialize()>
    b4ec:	e3500000 	cmp	r0, #0
    b4f0:	18bd8070 	popne	{r4, r5, r6, pc}
    b4f4:	eb008f6e 	bl	2f2b4 <CLogger::Get()>
    b4f8:	e1a02005 	mov	r2, r5
    b4fc:	e30a3f18 	movw	r3, #44824	; 0xaf18
    b500:	e3403003 	movt	r3, #3
    b504:	e8bd4070 	pop	{r4, r5, r6, lr}
    b508:	e59f1028 	ldr	r1, [pc, #40]	; b538 <CDWHCIDevice::ReScanDevices()+0x7c>
    b50c:	ea009136 	b	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b510:	e8bd4070 	pop	{r4, r5, r6, lr}
    b514:	e2800088 	add	r0, r0, #136	; 0x88
    b518:	ea0003b8 	b	c400 <CDWHCIRootPort::ReScanDevices()>
    b51c:	eb008f64 	bl	2f2b4 <CLogger::Get()>
    b520:	e30a3f34 	movw	r3, #44852	; 0xaf34
    b524:	e3403003 	movt	r3, #3
    b528:	e59f1008 	ldr	r1, [pc, #8]	; b538 <CDWHCIDevice::ReScanDevices()+0x7c>
    b52c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b530:	e3a02002 	mov	r2, #2
    b534:	ea00912c 	b	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b538:	0003afd4 	.word	0x0003afd4

0000b53c <CDWHCIDevice::Initialize(bool)>:
    b53c:	e92d4070 	push	{r4, r5, r6, lr}
    b540:	e1a04000 	mov	r4, r0
    b544:	e1a05001 	mov	r5, r1
    b548:	e24dd030 	sub	sp, sp, #48	; 0x30
    b54c:	e3a00020 	mov	r0, #32
    b550:	e3a01001 	mov	r1, #1
    b554:	eb002cb2 	bl	16824 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    b558:	e3a01001 	mov	r1, #1
    b55c:	e3a00010 	mov	r0, #16
    b560:	eb00099e 	bl	dbe0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    b564:	e3a01001 	mov	r1, #1
    b568:	e3a00010 	mov	r0, #16
    b56c:	eb000180 	bl	bb74 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    b570:	e3a01001 	mov	r1, #1
    b574:	e3a00010 	mov	r0, #16
    b578:	eb000361 	bl	c304 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    b57c:	e3a01001 	mov	r1, #1
    b580:	e3a00010 	mov	r0, #16
    b584:	eb00022e 	bl	be44 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    b588:	e3a01001 	mov	r1, #1
    b58c:	e3a00010 	mov	r0, #16
    b590:	eb000aef 	bl	e154 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)>
    b594:	e5943010 	ldr	r3, [r4, #16]
    b598:	e3530000 	cmp	r3, #0
    b59c:	0a000064 	beq	b734 <CDWHCIDevice::Initialize(bool)+0x1f8>
    b5a0:	e5943014 	ldr	r3, [r4, #20]
    b5a4:	e3530000 	cmp	r3, #0
    b5a8:	0a000067 	beq	b74c <CDWHCIDevice::Initialize(bool)+0x210>
    b5ac:	e3a01040 	mov	r1, #64	; 0x40
    b5b0:	e3431f98 	movt	r1, #16280	; 0x3f98
    b5b4:	e28d000c 	add	r0, sp, #12
    b5b8:	eb003c10 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b5bc:	e28d000c 	add	r0, sp, #12
    b5c0:	eb003c18 	bl	1a628 <CDWHCIRegister::Read()>
    b5c4:	e302380a 	movw	r3, #10250	; 0x280a
    b5c8:	e3443f54 	movt	r3, #20308	; 0x4f54
    b5cc:	e1500003 	cmp	r0, r3
    b5d0:	1a00003a 	bne	b6c0 <CDWHCIDevice::Initialize(bool)+0x184>
    b5d4:	e1a00004 	mov	r0, r4
    b5d8:	ebfff4d6 	bl	8938 <CDWHCIDevice::PowerOn()>
    b5dc:	e3500000 	cmp	r0, #0
    b5e0:	0a00004c 	beq	b718 <CDWHCIDevice::Initialize(bool)+0x1dc>
    b5e4:	e3a01008 	mov	r1, #8
    b5e8:	e3431f98 	movt	r1, #16280	; 0x3f98
    b5ec:	e28d0018 	add	r0, sp, #24
    b5f0:	eb003c02 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b5f4:	e28d0018 	add	r0, sp, #24
    b5f8:	eb003c0a 	bl	1a628 <CDWHCIRegister::Read()>
    b5fc:	e28d0018 	add	r0, sp, #24
    b600:	e3e01001 	mvn	r1, #1
    b604:	eb003c3b 	bl	1a6f8 <CDWHCIRegister::And(unsigned int)>
    b608:	e28d0018 	add	r0, sp, #24
    b60c:	eb003c0c 	bl	1a644 <CDWHCIRegister::Write()>
    b610:	e5940010 	ldr	r0, [r4, #16]
    b614:	e3500000 	cmp	r0, #0
    b618:	0a000058 	beq	b780 <CDWHCIDevice::Initialize(bool)+0x244>
    b61c:	e1a03004 	mov	r3, r4
    b620:	e3a01009 	mov	r1, #9
    b624:	e30a2590 	movw	r2, #42384	; 0xa590
    b628:	e3402000 	movt	r2, #0
    b62c:	eb00b43c 	bl	38724 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b630:	e1a00004 	mov	r0, r4
    b634:	ebfff510 	bl	8a7c <CDWHCIDevice::InitCore()>
    b638:	e3500000 	cmp	r0, #0
    b63c:	0a00002d 	beq	b6f8 <CDWHCIDevice::Initialize(bool)+0x1bc>
    b640:	e3a01008 	mov	r1, #8
    b644:	e3431f98 	movt	r1, #16280	; 0x3f98
    b648:	e28d0024 	add	r0, sp, #36	; 0x24
    b64c:	eb003beb 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b650:	e28d0024 	add	r0, sp, #36	; 0x24
    b654:	eb003bf3 	bl	1a628 <CDWHCIRegister::Read()>
    b658:	e3a01001 	mov	r1, #1
    b65c:	e28d0024 	add	r0, sp, #36	; 0x24
    b660:	eb003c32 	bl	1a730 <CDWHCIRegister::Or(unsigned int)>
    b664:	e28d0024 	add	r0, sp, #36	; 0x24
    b668:	eb003bf5 	bl	1a644 <CDWHCIRegister::Write()>
    b66c:	e28d0024 	add	r0, sp, #36	; 0x24
    b670:	eb003beb 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b674:	e1a00004 	mov	r0, r4
    b678:	ebfff67f 	bl	907c <CDWHCIDevice::InitHost()>
    b67c:	e2506000 	subs	r6, r0, #0
    b680:	0a000037 	beq	b764 <CDWHCIDevice::Initialize(bool)+0x228>
    b684:	eb002167 	bl	13c28 <CUSBHostController::IsPlugAndPlay()>
    b688:	e2200001 	eor	r0, r0, #1
    b68c:	e1853000 	orr	r3, r5, r0
    b690:	e6ef3073 	uxtb	r3, r3
    b694:	e3530000 	cmp	r3, #0
    b698:	0a000001 	beq	b6a4 <CDWHCIDevice::Initialize(bool)+0x168>
    b69c:	e1a00004 	mov	r0, r4
    b6a0:	ebffff85 	bl	b4bc <CDWHCIDevice::ReScanDevices()>
    b6a4:	e28d0018 	add	r0, sp, #24
    b6a8:	eb003bdd 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b6ac:	e28d000c 	add	r0, sp, #12
    b6b0:	eb003bdb 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b6b4:	e1a00006 	mov	r0, r6
    b6b8:	e28dd030 	add	sp, sp, #48	; 0x30
    b6bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b6c0:	eb008efb 	bl	2f2b4 <CLogger::Get()>
    b6c4:	e1a04000 	mov	r4, r0
    b6c8:	e28d000c 	add	r0, sp, #12
    b6cc:	eb003bea 	bl	1a67c <CDWHCIRegister::Get() const>
    b6d0:	e59f10c0 	ldr	r1, [pc, #192]	; b798 <CDWHCIDevice::Initialize(bool)+0x25c>
    b6d4:	e1a03000 	mov	r3, r0
    b6d8:	e3a02001 	mov	r2, #1
    b6dc:	e58d3000 	str	r3, [sp]
    b6e0:	e1a00004 	mov	r0, r4
    b6e4:	e30a3f58 	movw	r3, #44888	; 0xaf58
    b6e8:	e3403003 	movt	r3, #3
    b6ec:	eb0090be 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b6f0:	e3a06000 	mov	r6, #0
    b6f4:	eaffffec 	b	b6ac <CDWHCIDevice::Initialize(bool)+0x170>
    b6f8:	eb008eed 	bl	2f2b4 <CLogger::Get()>
    b6fc:	e30a3f80 	movw	r3, #44928	; 0xaf80
    b700:	e3403003 	movt	r3, #3
    b704:	e59f108c 	ldr	r1, [pc, #140]	; b798 <CDWHCIDevice::Initialize(bool)+0x25c>
    b708:	e3a02001 	mov	r2, #1
    b70c:	eb0090b6 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b710:	e3a06000 	mov	r6, #0
    b714:	eaffffe2 	b	b6a4 <CDWHCIDevice::Initialize(bool)+0x168>
    b718:	eb008ee5 	bl	2f2b4 <CLogger::Get()>
    b71c:	e59f1074 	ldr	r1, [pc, #116]	; b798 <CDWHCIDevice::Initialize(bool)+0x25c>
    b720:	e3a02001 	mov	r2, #1
    b724:	e30a3f70 	movw	r3, #44912	; 0xaf70
    b728:	e3403003 	movt	r3, #3
    b72c:	eb0090ae 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b730:	eaffffee 	b	b6f0 <CDWHCIDevice::Initialize(bool)+0x1b4>
    b734:	e30a1a08 	movw	r1, #43528	; 0xaa08
    b738:	e3401003 	movt	r1, #3
    b73c:	e30a0a44 	movw	r0, #43588	; 0xaa44
    b740:	e3400003 	movt	r0, #3
    b744:	e3a02096 	mov	r2, #150	; 0x96
    b748:	eb00845c 	bl	2c8c0 <assertion_failed>
    b74c:	e30a1a08 	movw	r1, #43528	; 0xaa08
    b750:	e3401003 	movt	r1, #3
    b754:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    b758:	e3400003 	movt	r0, #3
    b75c:	e3a02097 	mov	r2, #151	; 0x97
    b760:	eb008456 	bl	2c8c0 <assertion_failed>
    b764:	eb008ed2 	bl	2f2b4 <CLogger::Get()>
    b768:	e59f1028 	ldr	r1, [pc, #40]	; b798 <CDWHCIDevice::Initialize(bool)+0x25c>
    b76c:	e3a02001 	mov	r2, #1
    b770:	e30a3f98 	movw	r3, #44952	; 0xaf98
    b774:	e3403003 	movt	r3, #3
    b778:	eb00909b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b77c:	eaffffe3 	b	b710 <CDWHCIDevice::Initialize(bool)+0x1d4>
    b780:	e30a1a08 	movw	r1, #43528	; 0xaa08
    b784:	e3401003 	movt	r1, #3
    b788:	e30a0a44 	movw	r0, #43588	; 0xaa44
    b78c:	e3400003 	movt	r0, #3
    b790:	e3a020ac 	mov	r2, #172	; 0xac
    b794:	eb008449 	bl	2c8c0 <assertion_failed>
    b798:	0003afd4 	.word	0x0003afd4
    b79c:	00000000 	.word	0x00000000

0000b7a0 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b7a0:	e12fff1e 	bx	lr

0000b7a4 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    b7a4:	e5903008 	ldr	r3, [r0, #8]
    b7a8:	e3530005 	cmp	r3, #5
    b7ac:	13a03001 	movne	r3, #1
    b7b0:	11c031b0 	strhne	r3, [r0, #16]
    b7b4:	e3a03000 	mov	r3, #0
    b7b8:	e5803008 	str	r3, [r0, #8]
    b7bc:	e12fff1e 	bx	lr

0000b7c0 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    b7c0:	e3a00000 	mov	r0, #0
    b7c4:	e12fff1e 	bx	lr

0000b7c8 <CDWHCIFrameSchedulerNonPeriodic::PeriodicDelay(unsigned short)>:
    b7c8:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    b7cc:	e3401003 	movt	r1, #3
    b7d0:	e30b0708 	movw	r0, #46856	; 0xb708
    b7d4:	e3400003 	movt	r0, #3
    b7d8:	e3a020b2 	mov	r2, #178	; 0xb2
    b7dc:	e92d4010 	push	{r4, lr}
    b7e0:	eb008436 	bl	2c8c0 <assertion_failed>

0000b7e4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    b7e4:	e5903008 	ldr	r3, [r0, #8]
    b7e8:	e3a02002 	mov	r2, #2
    b7ec:	e1c021b0 	strh	r2, [r0, #16]
    b7f0:	e3530003 	cmp	r3, #3
    b7f4:	8a000007 	bhi	b818 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x34>
    b7f8:	e3530001 	cmp	r3, #1
    b7fc:	8a00000a 	bhi	b82c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x48>
    b800:	1a00000d 	bne	b83c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>
    b804:	eddf0b13 	vldr	d16, [pc, #76]	; b858 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    b808:	e2800008 	add	r0, r0, #8
    b80c:	f440078f 	vst1.32	{d16}, [r0]
    b810:	e3a00001 	mov	r0, #1
    b814:	e12fff1e 	bx	lr
    b818:	e2433004 	sub	r3, r3, #4
    b81c:	e3530001 	cmp	r3, #1
    b820:	8a000005 	bhi	b83c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>
    b824:	e3a00000 	mov	r0, #0
    b828:	e12fff1e 	bx	lr
    b82c:	e3a03001 	mov	r3, #1
    b830:	e1c031b0 	strh	r3, [r0, #16]
    b834:	e3a00001 	mov	r0, #1
    b838:	e12fff1e 	bx	lr
    b83c:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    b840:	e3401003 	movt	r1, #3
    b844:	e30b0708 	movw	r0, #46856	; 0xb708
    b848:	e3400003 	movt	r0, #3
    b84c:	e3a02060 	mov	r2, #96	; 0x60
    b850:	e92d4010 	push	{r4, lr}
    b854:	eb008419 	bl	2c8c0 <assertion_failed>
    b858:	00000002 	.word	0x00000002
    b85c:	00000003 	.word	0x00000003

0000b860 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    b860:	e5903008 	ldr	r3, [r0, #8]
    b864:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b868:	e3530000 	cmp	r3, #0
    b86c:	e24dd014 	sub	sp, sp, #20
    b870:	0a000012 	beq	b8c0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    b874:	e2433002 	sub	r3, r3, #2
    b878:	e3530001 	cmp	r3, #1
    b87c:	8a00001e 	bhi	b8fc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x9c>
    b880:	e3110001 	tst	r1, #1
    b884:	0a000003 	beq	b898 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x38>
    b888:	e3a03004 	mov	r3, #4
    b88c:	e5803008 	str	r3, [r0, #8]
    b890:	e28dd014 	add	sp, sp, #20
    b894:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b898:	e3110060 	tst	r1, #96	; 0x60
    b89c:	0a000010 	beq	b8e4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x84>
    b8a0:	e590300c 	ldr	r3, [r0, #12]
    b8a4:	e3530000 	cmp	r3, #0
    b8a8:	e2432001 	sub	r2, r3, #1
    b8ac:	13a03003 	movne	r3, #3
    b8b0:	e580200c 	str	r2, [r0, #12]
    b8b4:	1afffff4 	bne	b88c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x2c>
    b8b8:	e3a02001 	mov	r2, #1
    b8bc:	ea00000b 	b	b8f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x90>
    b8c0:	e3110020 	tst	r1, #32
    b8c4:	13a03001 	movne	r3, #1
    b8c8:	1affffef 	bne	b88c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x2c>
    b8cc:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    b8d0:	e3401003 	movt	r1, #3
    b8d4:	e30a0ff4 	movw	r0, #45044	; 0xaff4
    b8d8:	e3400003 	movt	r0, #3
    b8dc:	e3a0206c 	mov	r2, #108	; 0x6c
    b8e0:	eb0083f6 	bl	2c8c0 <assertion_failed>
    b8e4:	e3110010 	tst	r1, #16
    b8e8:	13a02005 	movne	r2, #5
    b8ec:	0a000008 	beq	b914 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb4>
    b8f0:	e3a03005 	mov	r3, #5
    b8f4:	e1c021b0 	strh	r2, [r0, #16]
    b8f8:	eaffffe3 	b	b88c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x2c>
    b8fc:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    b900:	e3401003 	movt	r1, #3
    b904:	e30b0708 	movw	r0, #46856	; 0xb708
    b908:	e3400003 	movt	r0, #3
    b90c:	e3a02095 	mov	r2, #149	; 0x95
    b910:	eb0083ea 	bl	2c8c0 <assertion_failed>
    b914:	e58d100c 	str	r1, [sp, #12]
    b918:	eb008e65 	bl	2f2b4 <CLogger::Get()>
    b91c:	e59d100c 	ldr	r1, [sp, #12]
    b920:	e3a02001 	mov	r2, #1
    b924:	e58d1000 	str	r1, [sp]
    b928:	e30b3018 	movw	r3, #45080	; 0xb018
    b92c:	e3403003 	movt	r3, #3
    b930:	e30b102c 	movw	r1, #45100	; 0xb02c
    b934:	e3401003 	movt	r1, #3
    b938:	eb00902b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b93c:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    b940:	e3401003 	movt	r1, #3
    b944:	e30b0708 	movw	r0, #46856	; 0xb708
    b948:	e3400003 	movt	r0, #3
    b94c:	e3a02090 	mov	r2, #144	; 0x90
    b950:	eb0083da 	bl	2c8c0 <assertion_failed>

0000b954 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()>:
    b954:	e92d4030 	push	{r4, r5, lr}
    b958:	e3001408 	movw	r1, #1032	; 0x408
    b95c:	e3431f98 	movt	r1, #16280	; 0x3f98
    b960:	e24dd014 	sub	sp, sp, #20
    b964:	e1a05000 	mov	r5, r0
    b968:	e28d0004 	add	r0, sp, #4
    b96c:	eb003b23 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b970:	e28d0004 	add	r0, sp, #4
    b974:	eb003b2b 	bl	1a628 <CDWHCIRegister::Read()>
    b978:	e6ff4070 	uxth	r4, r0
    b97c:	eb008c3c 	bl	2ea74 <CKernelOptions::Get()>
    b980:	eb008c11 	bl	2e9cc <CKernelOptions::GetUSBBoost() const>
    b984:	e3500000 	cmp	r0, #0
    b988:	1a000004 	bne	b9a0 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x4c>
    b98c:	e1d531b0 	ldrh	r3, [r5, #16]
    b990:	e3530007 	cmp	r3, #7
    b994:	90834004 	addls	r4, r3, r4
    b998:	97ed4054 	ubfxls	r4, r4, #0, #14
    b99c:	8a000004 	bhi	b9b4 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x60>
    b9a0:	e28d0004 	add	r0, sp, #4
    b9a4:	eb003b1e 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    b9a8:	e1a00004 	mov	r0, r4
    b9ac:	e28dd014 	add	sp, sp, #20
    b9b0:	e8bd8030 	pop	{r4, r5, pc}
    b9b4:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    b9b8:	e3401003 	movt	r1, #3
    b9bc:	e30b0034 	movw	r0, #45108	; 0xb034
    b9c0:	e3400003 	movt	r0, #3
    b9c4:	e3a020ac 	mov	r2, #172	; 0xac
    b9c8:	eb0083bc 	bl	2c8c0 <assertion_failed>

0000b9cc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b9cc:	e3043e54 	movw	r3, #20052	; 0x4e54
    b9d0:	e3403004 	movt	r3, #4
    b9d4:	e92d4010 	push	{r4, lr}
    b9d8:	e1a04000 	mov	r4, r0
    b9dc:	e5930000 	ldr	r0, [r3]
    b9e0:	e3500000 	cmp	r0, #0
    b9e4:	0a000003 	beq	b9f8 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    b9e8:	e1a01004 	mov	r1, r4
    b9ec:	eb008537 	bl	2ced0 <CClassAllocator::Free(void*)>
    b9f0:	e1a00004 	mov	r0, r4
    b9f4:	e8bd8010 	pop	{r4, pc}
    b9f8:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    b9fc:	e3401003 	movt	r1, #3
    ba00:	e30b0048 	movw	r0, #45128	; 0xb048
    ba04:	e3400003 	movt	r0, #3
    ba08:	e3a020bc 	mov	r2, #188	; 0xbc
    ba0c:	eb0083ab 	bl	2c8c0 <assertion_failed>

0000ba10 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    ba10:	e92d4010 	push	{r4, lr}
    ba14:	e1a04000 	mov	r4, r0
    ba18:	e59f303c 	ldr	r3, [pc, #60]	; ba5c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x4c>
    ba1c:	e5803000 	str	r3, [r0]
    ba20:	eb00a85c 	bl	35b98 <CTimer::Get()>
    ba24:	e3a02006 	mov	r2, #6
    ba28:	e3a03008 	mov	r3, #8
    ba2c:	e3500000 	cmp	r0, #0
    ba30:	e9840005 	stmib	r4, {r0, r2}
    ba34:	e1c431b0 	strh	r3, [r4, #16]
    ba38:	0a000001 	beq	ba44 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x34>
    ba3c:	e1a00004 	mov	r0, r4
    ba40:	e8bd8010 	pop	{r4, pc}
    ba44:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    ba48:	e3401003 	movt	r1, #3
    ba4c:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    ba50:	e3400003 	movt	r0, #3
    ba54:	e3a0202f 	mov	r2, #47	; 0x2f
    ba58:	eb008398 	bl	2c8c0 <assertion_failed>
    ba5c:	0003b0cc 	.word	0x0003b0cc

0000ba60 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    ba60:	e3500014 	cmp	r0, #20
    ba64:	e92d4010 	push	{r4, lr}
    ba68:	1a000006 	bne	ba88 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x28>
    ba6c:	e3043e54 	movw	r3, #20052	; 0x4e54
    ba70:	e3403004 	movt	r3, #4
    ba74:	e5930000 	ldr	r0, [r3]
    ba78:	e3500000 	cmp	r0, #0
    ba7c:	0a000007 	beq	baa0 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x40>
    ba80:	e8bd4010 	pop	{r4, lr}
    ba84:	ea0084d6 	b	2cde4 <CClassAllocator::Allocate()>
    ba88:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    ba8c:	e3401003 	movt	r1, #3
    ba90:	e30b005c 	movw	r0, #45148	; 0xb05c
    ba94:	e3400003 	movt	r0, #3
    ba98:	e3a020bc 	mov	r2, #188	; 0xbc
    ba9c:	eb008387 	bl	2c8c0 <assertion_failed>
    baa0:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    baa4:	e3401003 	movt	r1, #3
    baa8:	e30b0048 	movw	r0, #45128	; 0xb048
    baac:	e3400003 	movt	r0, #3
    bab0:	e3a020bc 	mov	r2, #188	; 0xbc
    bab4:	eb008381 	bl	2c8c0 <assertion_failed>

0000bab8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    bab8:	e3510014 	cmp	r1, #20
    babc:	e92d4010 	push	{r4, lr}
    bac0:	1a000008 	bne	bae8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x30>
    bac4:	e3042e54 	movw	r2, #20052	; 0x4e54
    bac8:	e3402004 	movt	r2, #4
    bacc:	e1a03000 	mov	r3, r0
    bad0:	e5920000 	ldr	r0, [r2]
    bad4:	e3500000 	cmp	r0, #0
    bad8:	0a000008 	beq	bb00 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    badc:	e8bd4010 	pop	{r4, lr}
    bae0:	e1a01003 	mov	r1, r3
    bae4:	ea0084f9 	b	2ced0 <CClassAllocator::Free(void*)>
    bae8:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    baec:	e3401003 	movt	r1, #3
    baf0:	e30b005c 	movw	r0, #45148	; 0xb05c
    baf4:	e3400003 	movt	r0, #3
    baf8:	e3a020bc 	mov	r2, #188	; 0xbc
    bafc:	eb00836f 	bl	2c8c0 <assertion_failed>
    bb00:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    bb04:	e3401003 	movt	r1, #3
    bb08:	e30b0048 	movw	r0, #45128	; 0xb048
    bb0c:	e3400003 	movt	r0, #3
    bb10:	e3a020bc 	mov	r2, #188	; 0xbc
    bb14:	eb008369 	bl	2c8c0 <assertion_failed>

0000bb18 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    bb18:	e92d4070 	push	{r4, r5, r6, lr}
    bb1c:	e3044e54 	movw	r4, #20052	; 0x4e54
    bb20:	e3404004 	movt	r4, #4
    bb24:	e5943000 	ldr	r3, [r4]
    bb28:	e3530000 	cmp	r3, #0
    bb2c:	1a00000a 	bne	bb5c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x44>
    bb30:	e1a05000 	mov	r5, r0
    bb34:	e3a00020 	mov	r0, #32
    bb38:	eb00ac57 	bl	36c9c <operator new(unsigned int)>
    bb3c:	e1a02005 	mov	r2, r5
    bb40:	e3a01014 	mov	r1, #20
    bb44:	e30b30a4 	movw	r3, #45220	; 0xb0a4
    bb48:	e3403003 	movt	r3, #3
    bb4c:	e1a05000 	mov	r5, r0
    bb50:	eb008445 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    bb54:	e5845000 	str	r5, [r4]
    bb58:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb5c:	e30a1fdc 	movw	r1, #45020	; 0xafdc
    bb60:	e3401003 	movt	r1, #3
    bb64:	e30b0090 	movw	r0, #45200	; 0xb090
    bb68:	e3400003 	movt	r0, #3
    bb6c:	e3a020bc 	mov	r2, #188	; 0xbc
    bb70:	eb008352 	bl	2c8c0 <assertion_failed>

0000bb74 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    bb74:	e92d4070 	push	{r4, r5, r6, lr}
    bb78:	e3044e54 	movw	r4, #20052	; 0x4e54
    bb7c:	e3404004 	movt	r4, #4
    bb80:	e1a05000 	mov	r5, r0
    bb84:	e24dd008 	sub	sp, sp, #8
    bb88:	e1a06001 	mov	r6, r1
    bb8c:	e5940000 	ldr	r0, [r4]
    bb90:	e3500000 	cmp	r0, #0
    bb94:	0a000004 	beq	bbac <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    bb98:	e1a02001 	mov	r2, r1
    bb9c:	e1a01005 	mov	r1, r5
    bba0:	e28dd008 	add	sp, sp, #8
    bba4:	e8bd4070 	pop	{r4, r5, r6, lr}
    bba8:	ea008449 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
    bbac:	e3a00020 	mov	r0, #32
    bbb0:	eb00ac39 	bl	36c9c <operator new(unsigned int)>
    bbb4:	e1a02005 	mov	r2, r5
    bbb8:	e1a03006 	mov	r3, r6
    bbbc:	e3a01014 	mov	r1, #20
    bbc0:	e30bc0a4 	movw	ip, #45220	; 0xb0a4
    bbc4:	e340c003 	movt	ip, #3
    bbc8:	e58dc000 	str	ip, [sp]
    bbcc:	e1a05000 	mov	r5, r0
    bbd0:	eb008431 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    bbd4:	e5845000 	str	r5, [r4]
    bbd8:	e28dd008 	add	sp, sp, #8
    bbdc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bbe0 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    bbe0:	e12fff1e 	bx	lr

0000bbe4 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    bbe4:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bbe8:	e3401003 	movt	r1, #3
    bbec:	e30b0708 	movw	r0, #46856	; 0xb708
    bbf0:	e3400003 	movt	r0, #3
    bbf4:	e3a02026 	mov	r2, #38	; 0x26
    bbf8:	e92d4010 	push	{r4, lr}
    bbfc:	eb00832f 	bl	2c8c0 <assertion_failed>

0000bc00 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    bc00:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bc04:	e3401003 	movt	r1, #3
    bc08:	e30b0708 	movw	r0, #46856	; 0xb708
    bc0c:	e3400003 	movt	r0, #3
    bc10:	e3a0202b 	mov	r2, #43	; 0x2b
    bc14:	e92d4010 	push	{r4, lr}
    bc18:	eb008328 	bl	2c8c0 <assertion_failed>

0000bc1c <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    bc1c:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bc20:	e3401003 	movt	r1, #3
    bc24:	e30b0708 	movw	r0, #46856	; 0xb708
    bc28:	e3400003 	movt	r0, #3
    bc2c:	e3a02031 	mov	r2, #49	; 0x31
    bc30:	e92d4010 	push	{r4, lr}
    bc34:	eb008321 	bl	2c8c0 <assertion_failed>

0000bc38 <CDWHCIFrameSchedulerNoSplit::PeriodicDelay(unsigned short)>:
    bc38:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bc3c:	e3401003 	movt	r1, #3
    bc40:	e30b0708 	movw	r0, #46856	; 0xb708
    bc44:	e3400003 	movt	r0, #3
    bc48:	e3a02050 	mov	r2, #80	; 0x50
    bc4c:	e92d4010 	push	{r4, lr}
    bc50:	eb00831a 	bl	2c8c0 <assertion_failed>

0000bc54 <CDWHCIFrameSchedulerNoSplit::GetFrameNumber()>:
    bc54:	e92d4030 	push	{r4, r5, lr}
    bc58:	e3001408 	movw	r1, #1032	; 0x408
    bc5c:	e3431f98 	movt	r1, #16280	; 0x3f98
    bc60:	e24dd014 	sub	sp, sp, #20
    bc64:	e1a05000 	mov	r5, r0
    bc68:	e28d0004 	add	r0, sp, #4
    bc6c:	eb003a63 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc70:	e28d0004 	add	r0, sp, #4
    bc74:	eb003a6b 	bl	1a628 <CDWHCIRegister::Read()>
    bc78:	e2804001 	add	r4, r0, #1
    bc7c:	e28d0004 	add	r0, sp, #4
    bc80:	e7ed4054 	ubfx	r4, r4, #0, #14
    bc84:	e1c540b6 	strh	r4, [r5, #6]
    bc88:	eb003a65 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    bc8c:	e1a00004 	mov	r0, r4
    bc90:	e28dd014 	add	sp, sp, #20
    bc94:	e8bd8030 	pop	{r4, r5, pc}

0000bc98 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    bc98:	e92d4010 	push	{r4, lr}
    bc9c:	e3001408 	movw	r1, #1032	; 0x408
    bca0:	e3431f98 	movt	r1, #16280	; 0x3f98
    bca4:	e24dd010 	sub	sp, sp, #16
    bca8:	e28d0004 	add	r0, sp, #4
    bcac:	eb003a53 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bcb0:	e28d0004 	add	r0, sp, #4
    bcb4:	eb003a5b 	bl	1a628 <CDWHCIRegister::Read()>
    bcb8:	e1a04000 	mov	r4, r0
    bcbc:	e28d0004 	add	r0, sp, #4
    bcc0:	eb003a57 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    bcc4:	e2040001 	and	r0, r4, #1
    bcc8:	e28dd010 	add	sp, sp, #16
    bccc:	e8bd8010 	pop	{r4, pc}

0000bcd0 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    bcd0:	e3043e58 	movw	r3, #20056	; 0x4e58
    bcd4:	e3403004 	movt	r3, #4
    bcd8:	e92d4010 	push	{r4, lr}
    bcdc:	e1a04000 	mov	r4, r0
    bce0:	e5930000 	ldr	r0, [r3]
    bce4:	e3500000 	cmp	r0, #0
    bce8:	0a000003 	beq	bcfc <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()+0x2c>
    bcec:	e1a01004 	mov	r1, r4
    bcf0:	eb008476 	bl	2ced0 <CClassAllocator::Free(void*)>
    bcf4:	e1a00004 	mov	r0, r4
    bcf8:	e8bd8010 	pop	{r4, pc}
    bcfc:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bd00:	e3401003 	movt	r1, #3
    bd04:	e30b0048 	movw	r0, #45128	; 0xb048
    bd08:	e3400003 	movt	r0, #3
    bd0c:	e3a0205d 	mov	r2, #93	; 0x5d
    bd10:	eb0082ea 	bl	2c8c0 <assertion_failed>

0000bd14 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    bd14:	e59fc010 	ldr	ip, [pc, #16]	; bd2c <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    bd18:	e3a02901 	mov	r2, #16384	; 0x4000
    bd1c:	e580c000 	str	ip, [r0]
    bd20:	e5c01004 	strb	r1, [r0, #4]
    bd24:	e1c020b6 	strh	r2, [r0, #6]
    bd28:	e12fff1e 	bx	lr
    bd2c:	0003b15c 	.word	0x0003b15c

0000bd30 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    bd30:	e3500008 	cmp	r0, #8
    bd34:	e92d4010 	push	{r4, lr}
    bd38:	1a000006 	bne	bd58 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x28>
    bd3c:	e3043e58 	movw	r3, #20056	; 0x4e58
    bd40:	e3403004 	movt	r3, #4
    bd44:	e5930000 	ldr	r0, [r3]
    bd48:	e3500000 	cmp	r0, #0
    bd4c:	0a000007 	beq	bd70 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x40>
    bd50:	e8bd4010 	pop	{r4, lr}
    bd54:	ea008422 	b	2cde4 <CClassAllocator::Allocate()>
    bd58:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bd5c:	e3401003 	movt	r1, #3
    bd60:	e30b0108 	movw	r0, #45320	; 0xb108
    bd64:	e3400003 	movt	r0, #3
    bd68:	e3a0205d 	mov	r2, #93	; 0x5d
    bd6c:	eb0082d3 	bl	2c8c0 <assertion_failed>
    bd70:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bd74:	e3401003 	movt	r1, #3
    bd78:	e30b0048 	movw	r0, #45128	; 0xb048
    bd7c:	e3400003 	movt	r0, #3
    bd80:	e3a0205d 	mov	r2, #93	; 0x5d
    bd84:	eb0082cd 	bl	2c8c0 <assertion_failed>

0000bd88 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    bd88:	e3510008 	cmp	r1, #8
    bd8c:	e92d4010 	push	{r4, lr}
    bd90:	1a000008 	bne	bdb8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x30>
    bd94:	e3042e58 	movw	r2, #20056	; 0x4e58
    bd98:	e3402004 	movt	r2, #4
    bd9c:	e1a03000 	mov	r3, r0
    bda0:	e5920000 	ldr	r0, [r2]
    bda4:	e3500000 	cmp	r0, #0
    bda8:	0a000008 	beq	bdd0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
    bdac:	e8bd4010 	pop	{r4, lr}
    bdb0:	e1a01003 	mov	r1, r3
    bdb4:	ea008445 	b	2ced0 <CClassAllocator::Free(void*)>
    bdb8:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bdbc:	e3401003 	movt	r1, #3
    bdc0:	e30b0108 	movw	r0, #45320	; 0xb108
    bdc4:	e3400003 	movt	r0, #3
    bdc8:	e3a0205d 	mov	r2, #93	; 0x5d
    bdcc:	eb0082bb 	bl	2c8c0 <assertion_failed>
    bdd0:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    bdd4:	e3401003 	movt	r1, #3
    bdd8:	e30b0048 	movw	r0, #45128	; 0xb048
    bddc:	e3400003 	movt	r0, #3
    bde0:	e3a0205d 	mov	r2, #93	; 0x5d
    bde4:	eb0082b5 	bl	2c8c0 <assertion_failed>

0000bde8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    bde8:	e92d4070 	push	{r4, r5, r6, lr}
    bdec:	e3044e58 	movw	r4, #20056	; 0x4e58
    bdf0:	e3404004 	movt	r4, #4
    bdf4:	e5943000 	ldr	r3, [r4]
    bdf8:	e3530000 	cmp	r3, #0
    bdfc:	1a00000a 	bne	be2c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x44>
    be00:	e1a05000 	mov	r5, r0
    be04:	e3a00020 	mov	r0, #32
    be08:	eb00aba3 	bl	36c9c <operator new(unsigned int)>
    be0c:	e1a02005 	mov	r2, r5
    be10:	e3a01008 	mov	r1, #8
    be14:	e30b3138 	movw	r3, #45368	; 0xb138
    be18:	e3403003 	movt	r3, #3
    be1c:	e1a05000 	mov	r5, r0
    be20:	eb008391 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    be24:	e5845000 	str	r5, [r4]
    be28:	e8bd8070 	pop	{r4, r5, r6, pc}
    be2c:	e30b10ec 	movw	r1, #45292	; 0xb0ec
    be30:	e3401003 	movt	r1, #3
    be34:	e30b0090 	movw	r0, #45200	; 0xb090
    be38:	e3400003 	movt	r0, #3
    be3c:	e3a0205d 	mov	r2, #93	; 0x5d
    be40:	eb00829e 	bl	2c8c0 <assertion_failed>

0000be44 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    be44:	e92d4070 	push	{r4, r5, r6, lr}
    be48:	e3044e58 	movw	r4, #20056	; 0x4e58
    be4c:	e3404004 	movt	r4, #4
    be50:	e1a05000 	mov	r5, r0
    be54:	e24dd008 	sub	sp, sp, #8
    be58:	e1a06001 	mov	r6, r1
    be5c:	e5940000 	ldr	r0, [r4]
    be60:	e3500000 	cmp	r0, #0
    be64:	0a000004 	beq	be7c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    be68:	e1a02001 	mov	r2, r1
    be6c:	e1a01005 	mov	r1, r5
    be70:	e28dd008 	add	sp, sp, #8
    be74:	e8bd4070 	pop	{r4, r5, r6, lr}
    be78:	ea008395 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
    be7c:	e3a00020 	mov	r0, #32
    be80:	eb00ab85 	bl	36c9c <operator new(unsigned int)>
    be84:	e1a02005 	mov	r2, r5
    be88:	e1a03006 	mov	r3, r6
    be8c:	e3a01008 	mov	r1, #8
    be90:	e30bc138 	movw	ip, #45368	; 0xb138
    be94:	e340c003 	movt	ip, #3
    be98:	e58dc000 	str	ip, [sp]
    be9c:	e1a05000 	mov	r5, r0
    bea0:	eb00837d 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    bea4:	e5845000 	str	r5, [r4]
    bea8:	e28dd008 	add	sp, sp, #8
    beac:	e8bd8070 	pop	{r4, r5, r6, pc}

0000beb0 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    beb0:	e12fff1e 	bx	lr

0000beb4 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    beb4:	e5903008 	ldr	r3, [r0, #8]
    beb8:	e2433005 	sub	r3, r3, #5
    bebc:	e3530001 	cmp	r3, #1
    bec0:	83a03001 	movhi	r3, #1
    bec4:	81c031b0 	strhhi	r3, [r0, #16]
    bec8:	e3a03000 	mov	r3, #0
    becc:	e5803008 	str	r3, [r0, #8]
    bed0:	e12fff1e 	bx	lr

0000bed4 <CDWHCIFrameSchedulerPeriodic::PeriodicDelay(unsigned short)>:
    bed4:	e3a02006 	mov	r2, #6
    bed8:	e3a03901 	mov	r3, #16384	; 0x4000
    bedc:	e5802008 	str	r2, [r0, #8]
    bee0:	e1c011b0 	strh	r1, [r0, #16]
    bee4:	e1c031b2 	strh	r3, [r0, #18]
    bee8:	e12fff1e 	bx	lr

0000beec <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    beec:	e5903008 	ldr	r3, [r0, #8]
    bef0:	e1a02000 	mov	r2, r0
    bef4:	e3530003 	cmp	r3, #3
    bef8:	0a000014 	beq	bf50 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x64>
    befc:	e92d4010 	push	{r4, lr}
    bf00:	8a00000d 	bhi	bf3c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x50>
    bf04:	e3530001 	cmp	r3, #1
    bf08:	1a00001a 	bne	bf78 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x8c>
    bf0c:	e1d001b2 	ldrh	r0, [r0, #18]
    bf10:	e3a01002 	mov	r1, #2
    bf14:	e5821008 	str	r1, [r2, #8]
    bf18:	e3500901 	cmp	r0, #16384	; 0x4000
    bf1c:	0a00000f 	beq	bf60 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x74>
    bf20:	e2000007 	and	r0, r0, #7
    bf24:	e1c211b0 	strh	r1, [r2, #16]
    bf28:	e3500005 	cmp	r0, #5
    bf2c:	e3a00001 	mov	r0, #1
    bf30:	13a03002 	movne	r3, #2
    bf34:	e582300c 	str	r3, [r2, #12]
    bf38:	e8bd8010 	pop	{r4, pc}
    bf3c:	e2433004 	sub	r3, r3, #4
    bf40:	e3530001 	cmp	r3, #1
    bf44:	8a00000b 	bhi	bf78 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x8c>
    bf48:	e3a00000 	mov	r0, #0
    bf4c:	e8bd8010 	pop	{r4, pc}
    bf50:	e3a01001 	mov	r1, #1
    bf54:	e3a00001 	mov	r0, #1
    bf58:	e1c211b0 	strh	r1, [r2, #16]
    bf5c:	e12fff1e 	bx	lr
    bf60:	e30b117c 	movw	r1, #45436	; 0xb17c
    bf64:	e3401003 	movt	r1, #3
    bf68:	e30b0194 	movw	r0, #45460	; 0xb194
    bf6c:	e3400003 	movt	r0, #3
    bf70:	e3a02054 	mov	r2, #84	; 0x54
    bf74:	eb008251 	bl	2c8c0 <assertion_failed>
    bf78:	e30b117c 	movw	r1, #45436	; 0xb17c
    bf7c:	e3401003 	movt	r1, #3
    bf80:	e30b0708 	movw	r0, #46856	; 0xb708
    bf84:	e3400003 	movt	r0, #3
    bf88:	e3a02072 	mov	r2, #114	; 0x72
    bf8c:	eb00824b 	bl	2c8c0 <assertion_failed>

0000bf90 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()>:
    bf90:	e92d4030 	push	{r4, r5, lr}
    bf94:	e1a04000 	mov	r4, r0
    bf98:	e3001408 	movw	r1, #1032	; 0x408
    bf9c:	e3431f98 	movt	r1, #16280	; 0x3f98
    bfa0:	e24dd014 	sub	sp, sp, #20
    bfa4:	e28d0004 	add	r0, sp, #4
    bfa8:	eb003994 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bfac:	e28d0004 	add	r0, sp, #4
    bfb0:	eb00399c 	bl	1a628 <CDWHCIRegister::Read()>
    bfb4:	e1d431b0 	ldrh	r3, [r4, #16]
    bfb8:	e3530901 	cmp	r3, #16384	; 0x4000
    bfbc:	0a000010 	beq	c004 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x74>
    bfc0:	e6ff0070 	uxth	r0, r0
    bfc4:	e5942008 	ldr	r2, [r4, #8]
    bfc8:	e0833000 	add	r3, r3, r0
    bfcc:	e3520000 	cmp	r2, #0
    bfd0:	e7ed5053 	ubfx	r5, r3, #0, #14
    bfd4:	e6ff3073 	uxth	r3, r3
    bfd8:	e1c451b2 	strh	r5, [r4, #18]
    bfdc:	1a000003 	bne	bff0 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x60>
    bfe0:	e2033007 	and	r3, r3, #7
    bfe4:	e3530006 	cmp	r3, #6
    bfe8:	02855001 	addeq	r5, r5, #1
    bfec:	01c451b2 	strheq	r5, [r4, #18]
    bff0:	e28d0004 	add	r0, sp, #4
    bff4:	eb00398a 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    bff8:	e1a00005 	mov	r0, r5
    bffc:	e28dd014 	add	sp, sp, #20
    c000:	e8bd8030 	pop	{r4, r5, pc}
    c004:	e30b117c 	movw	r1, #45436	; 0xb17c
    c008:	e3401003 	movt	r1, #3
    c00c:	e30b01b4 	movw	r0, #45492	; 0xb1b4
    c010:	e3400003 	movt	r0, #3
    c014:	e3a020cb 	mov	r2, #203	; 0xcb
    c018:	eb008228 	bl	2c8c0 <assertion_failed>

0000c01c <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    c01c:	e92d4010 	push	{r4, lr}
    c020:	e3001408 	movw	r1, #1032	; 0x408
    c024:	e3431f98 	movt	r1, #16280	; 0x3f98
    c028:	e24dd010 	sub	sp, sp, #16
    c02c:	e28d0004 	add	r0, sp, #4
    c030:	eb003972 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c034:	e28d0004 	add	r0, sp, #4
    c038:	eb00397a 	bl	1a628 <CDWHCIRegister::Read()>
    c03c:	e1a04000 	mov	r4, r0
    c040:	e28d0004 	add	r0, sp, #4
    c044:	eb003976 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    c048:	e2040001 	and	r0, r4, #1
    c04c:	e28dd010 	add	sp, sp, #16
    c050:	e8bd8010 	pop	{r4, pc}

0000c054 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    c054:	e5903008 	ldr	r3, [r0, #8]
    c058:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c05c:	e3530000 	cmp	r3, #0
    c060:	e24dd014 	sub	sp, sp, #20
    c064:	0a00000f 	beq	c0a8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c068:	e2433002 	sub	r3, r3, #2
    c06c:	e3530001 	cmp	r3, #1
    c070:	8a000022 	bhi	c100 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xac>
    c074:	e3110001 	tst	r1, #1
    c078:	13a03004 	movne	r3, #4
    c07c:	15803008 	strne	r3, [r0, #8]
    c080:	1a000006 	bne	c0a0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x4c>
    c084:	e3110060 	tst	r1, #96	; 0x60
    c088:	1a000010 	bne	c0d0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x7c>
    c08c:	e3110010 	tst	r1, #16
    c090:	0a000020 	beq	c118 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc4>
    c094:	e3a03005 	mov	r3, #5
    c098:	e1c031b0 	strh	r3, [r0, #16]
    c09c:	e5803008 	str	r3, [r0, #8]
    c0a0:	e28dd014 	add	sp, sp, #20
    c0a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c0a8:	e3110020 	tst	r1, #32
    c0ac:	13a03001 	movne	r3, #1
    c0b0:	15803008 	strne	r3, [r0, #8]
    c0b4:	1afffff9 	bne	c0a0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x4c>
    c0b8:	e30b117c 	movw	r1, #45436	; 0xb17c
    c0bc:	e3401003 	movt	r1, #3
    c0c0:	e30a0ff4 	movw	r0, #45044	; 0xaff4
    c0c4:	e3400003 	movt	r0, #3
    c0c8:	e3a0207e 	mov	r2, #126	; 0x7e
    c0cc:	eb0081fb 	bl	2c8c0 <assertion_failed>
    c0d0:	e590300c 	ldr	r3, [r0, #12]
    c0d4:	e3530000 	cmp	r3, #0
    c0d8:	e2432001 	sub	r2, r3, #1
    c0dc:	03a03003 	moveq	r3, #3
    c0e0:	13a03003 	movne	r3, #3
    c0e4:	e580200c 	str	r2, [r0, #12]
    c0e8:	03a02005 	moveq	r2, #5
    c0ec:	01c031b0 	strheq	r3, [r0, #16]
    c0f0:	05802008 	streq	r2, [r0, #8]
    c0f4:	15803008 	strne	r3, [r0, #8]
    c0f8:	e28dd014 	add	sp, sp, #20
    c0fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c100:	e30b117c 	movw	r1, #45436	; 0xb17c
    c104:	e3401003 	movt	r1, #3
    c108:	e30b0708 	movw	r0, #46856	; 0xb708
    c10c:	e3400003 	movt	r0, #3
    c110:	e3a020aa 	mov	r2, #170	; 0xaa
    c114:	eb0081e9 	bl	2c8c0 <assertion_failed>
    c118:	e58d100c 	str	r1, [sp, #12]
    c11c:	eb008c64 	bl	2f2b4 <CLogger::Get()>
    c120:	e59d100c 	ldr	r1, [sp, #12]
    c124:	e3a02001 	mov	r2, #1
    c128:	e58d1000 	str	r1, [sp]
    c12c:	e30b3018 	movw	r3, #45080	; 0xb018
    c130:	e3403003 	movt	r3, #3
    c134:	e30b102c 	movw	r1, #45100	; 0xb02c
    c138:	e3401003 	movt	r1, #3
    c13c:	eb008e2a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c140:	e30b117c 	movw	r1, #45436	; 0xb17c
    c144:	e3401003 	movt	r1, #3
    c148:	e30b0708 	movw	r0, #46856	; 0xb708
    c14c:	e3400003 	movt	r0, #3
    c150:	e3a020a5 	mov	r2, #165	; 0xa5
    c154:	eb0081d9 	bl	2c8c0 <assertion_failed>

0000c158 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    c158:	e3043e5c 	movw	r3, #20060	; 0x4e5c
    c15c:	e3403004 	movt	r3, #4
    c160:	e92d4010 	push	{r4, lr}
    c164:	e1a04000 	mov	r4, r0
    c168:	e5930000 	ldr	r0, [r3]
    c16c:	e3500000 	cmp	r0, #0
    c170:	0a000003 	beq	c184 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()+0x2c>
    c174:	e1a01004 	mov	r1, r4
    c178:	eb008354 	bl	2ced0 <CClassAllocator::Free(void*)>
    c17c:	e1a00004 	mov	r0, r4
    c180:	e8bd8010 	pop	{r4, pc}
    c184:	e30b117c 	movw	r1, #45436	; 0xb17c
    c188:	e3401003 	movt	r1, #3
    c18c:	e30b0048 	movw	r0, #45128	; 0xb048
    c190:	e3400003 	movt	r0, #3
    c194:	e3a020e7 	mov	r2, #231	; 0xe7
    c198:	eb0081c8 	bl	2c8c0 <assertion_failed>

0000c19c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    c19c:	e92d4010 	push	{r4, lr}
    c1a0:	e1a04000 	mov	r4, r0
    c1a4:	e59f3040 	ldr	r3, [pc, #64]	; c1ec <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x50>
    c1a8:	e5803000 	str	r3, [r0]
    c1ac:	eb00a679 	bl	35b98 <CTimer::Get()>
    c1b0:	e3a02007 	mov	r2, #7
    c1b4:	e3a03901 	mov	r3, #16384	; 0x4000
    c1b8:	e3443000 	movt	r3, #16384	; 0x4000
    c1bc:	e3500000 	cmp	r0, #0
    c1c0:	e9840005 	stmib	r4, {r0, r2}
    c1c4:	e5843010 	str	r3, [r4, #16]
    c1c8:	0a000001 	beq	c1d4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x38>
    c1cc:	e1a00004 	mov	r0, r4
    c1d0:	e8bd8010 	pop	{r4, pc}
    c1d4:	e30b117c 	movw	r1, #45436	; 0xb17c
    c1d8:	e3401003 	movt	r1, #3
    c1dc:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
    c1e0:	e3400003 	movt	r0, #3
    c1e4:	e3a02034 	mov	r2, #52	; 0x34
    c1e8:	eb0081b4 	bl	2c8c0 <assertion_failed>
    c1ec:	0003b22c 	.word	0x0003b22c

0000c1f0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    c1f0:	e3500014 	cmp	r0, #20
    c1f4:	e92d4010 	push	{r4, lr}
    c1f8:	1a000006 	bne	c218 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x28>
    c1fc:	e3043e5c 	movw	r3, #20060	; 0x4e5c
    c200:	e3403004 	movt	r3, #4
    c204:	e5930000 	ldr	r0, [r3]
    c208:	e3500000 	cmp	r0, #0
    c20c:	0a000007 	beq	c230 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x40>
    c210:	e8bd4010 	pop	{r4, lr}
    c214:	ea0082f2 	b	2cde4 <CClassAllocator::Allocate()>
    c218:	e30b117c 	movw	r1, #45436	; 0xb17c
    c21c:	e3401003 	movt	r1, #3
    c220:	e30b01d4 	movw	r0, #45524	; 0xb1d4
    c224:	e3400003 	movt	r0, #3
    c228:	e3a020e7 	mov	r2, #231	; 0xe7
    c22c:	eb0081a3 	bl	2c8c0 <assertion_failed>
    c230:	e30b117c 	movw	r1, #45436	; 0xb17c
    c234:	e3401003 	movt	r1, #3
    c238:	e30b0048 	movw	r0, #45128	; 0xb048
    c23c:	e3400003 	movt	r0, #3
    c240:	e3a020e7 	mov	r2, #231	; 0xe7
    c244:	eb00819d 	bl	2c8c0 <assertion_failed>

0000c248 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    c248:	e3510014 	cmp	r1, #20
    c24c:	e92d4010 	push	{r4, lr}
    c250:	1a000008 	bne	c278 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x30>
    c254:	e3042e5c 	movw	r2, #20060	; 0x4e5c
    c258:	e3402004 	movt	r2, #4
    c25c:	e1a03000 	mov	r3, r0
    c260:	e5920000 	ldr	r0, [r2]
    c264:	e3500000 	cmp	r0, #0
    c268:	0a000008 	beq	c290 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    c26c:	e8bd4010 	pop	{r4, lr}
    c270:	e1a01003 	mov	r1, r3
    c274:	ea008315 	b	2ced0 <CClassAllocator::Free(void*)>
    c278:	e30b117c 	movw	r1, #45436	; 0xb17c
    c27c:	e3401003 	movt	r1, #3
    c280:	e30b01d4 	movw	r0, #45524	; 0xb1d4
    c284:	e3400003 	movt	r0, #3
    c288:	e3a020e7 	mov	r2, #231	; 0xe7
    c28c:	eb00818b 	bl	2c8c0 <assertion_failed>
    c290:	e30b117c 	movw	r1, #45436	; 0xb17c
    c294:	e3401003 	movt	r1, #3
    c298:	e30b0048 	movw	r0, #45128	; 0xb048
    c29c:	e3400003 	movt	r0, #3
    c2a0:	e3a020e7 	mov	r2, #231	; 0xe7
    c2a4:	eb008185 	bl	2c8c0 <assertion_failed>

0000c2a8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    c2a8:	e92d4070 	push	{r4, r5, r6, lr}
    c2ac:	e3044e5c 	movw	r4, #20060	; 0x4e5c
    c2b0:	e3404004 	movt	r4, #4
    c2b4:	e5943000 	ldr	r3, [r4]
    c2b8:	e3530000 	cmp	r3, #0
    c2bc:	1a00000a 	bne	c2ec <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x44>
    c2c0:	e1a05000 	mov	r5, r0
    c2c4:	e3a00020 	mov	r0, #32
    c2c8:	eb00aa73 	bl	36c9c <operator new(unsigned int)>
    c2cc:	e1a02005 	mov	r2, r5
    c2d0:	e3a01014 	mov	r1, #20
    c2d4:	e30b3204 	movw	r3, #45572	; 0xb204
    c2d8:	e3403003 	movt	r3, #3
    c2dc:	e1a05000 	mov	r5, r0
    c2e0:	eb008261 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c2e4:	e5845000 	str	r5, [r4]
    c2e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2ec:	e30b117c 	movw	r1, #45436	; 0xb17c
    c2f0:	e3401003 	movt	r1, #3
    c2f4:	e30b0090 	movw	r0, #45200	; 0xb090
    c2f8:	e3400003 	movt	r0, #3
    c2fc:	e3a020e7 	mov	r2, #231	; 0xe7
    c300:	eb00816e 	bl	2c8c0 <assertion_failed>

0000c304 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c304:	e92d4070 	push	{r4, r5, r6, lr}
    c308:	e3044e5c 	movw	r4, #20060	; 0x4e5c
    c30c:	e3404004 	movt	r4, #4
    c310:	e1a05000 	mov	r5, r0
    c314:	e24dd008 	sub	sp, sp, #8
    c318:	e1a06001 	mov	r6, r1
    c31c:	e5940000 	ldr	r0, [r4]
    c320:	e3500000 	cmp	r0, #0
    c324:	0a000004 	beq	c33c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    c328:	e1a02001 	mov	r2, r1
    c32c:	e1a01005 	mov	r1, r5
    c330:	e28dd008 	add	sp, sp, #8
    c334:	e8bd4070 	pop	{r4, r5, r6, lr}
    c338:	ea008265 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
    c33c:	e3a00020 	mov	r0, #32
    c340:	eb00aa55 	bl	36c9c <operator new(unsigned int)>
    c344:	e1a02005 	mov	r2, r5
    c348:	e1a03006 	mov	r3, r6
    c34c:	e3a01014 	mov	r1, #20
    c350:	e30bc204 	movw	ip, #45572	; 0xb204
    c354:	e340c003 	movt	ip, #3
    c358:	e58dc000 	str	ip, [sp]
    c35c:	e1a05000 	mov	r5, r0
    c360:	eb00824d 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c364:	e5845000 	str	r5, [r4]
    c368:	e28dd008 	add	sp, sp, #8
    c36c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c370 <CDWHCIRootPort::~CDWHCIRootPort()>:
    c370:	e92d4010 	push	{r4, lr}
    c374:	e1a04000 	mov	r4, r0
    c378:	e5900008 	ldr	r0, [r0, #8]
    c37c:	e59f301c 	ldr	r3, [pc, #28]	; c3a0 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    c380:	e3500000 	cmp	r0, #0
    c384:	e5843000 	str	r3, [r4]
    c388:	0a000002 	beq	c398 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    c38c:	e5903000 	ldr	r3, [r0]
    c390:	e5933004 	ldr	r3, [r3, #4]
    c394:	e12fff33 	blx	r3
    c398:	e1a00004 	mov	r0, r4
    c39c:	e8bd8010 	pop	{r4, pc}
    c3a0:	0003b318 	.word	0x0003b318

0000c3a4 <CDWHCIRootPort::RemoveDevice()>:
    c3a4:	e92d4010 	push	{r4, lr}
    c3a8:	e1a04000 	mov	r4, r0
    c3ac:	e5900004 	ldr	r0, [r0, #4]
    c3b0:	e3500000 	cmp	r0, #0
    c3b4:	0a00000b 	beq	c3e8 <CDWHCIRootPort::RemoveDevice()+0x44>
    c3b8:	e3a01000 	mov	r1, #0
    c3bc:	ebfff140 	bl	88c4 <CDWHCIDevice::DisableRootPort(bool)>
    c3c0:	e5940008 	ldr	r0, [r4, #8]
    c3c4:	e3500000 	cmp	r0, #0
    c3c8:	0a000002 	beq	c3d8 <CDWHCIRootPort::RemoveDevice()+0x34>
    c3cc:	e5903000 	ldr	r3, [r0]
    c3d0:	e5933004 	ldr	r3, [r3, #4]
    c3d4:	e12fff33 	blx	r3
    c3d8:	e3a03000 	mov	r3, #0
    c3dc:	e3a00001 	mov	r0, #1
    c3e0:	e5843008 	str	r3, [r4, #8]
    c3e4:	e8bd8010 	pop	{r4, pc}
    c3e8:	e30b124c 	movw	r1, #45644	; 0xb24c
    c3ec:	e3401003 	movt	r1, #3
    c3f0:	e30b0260 	movw	r0, #45664	; 0xb260
    c3f4:	e3400003 	movt	r0, #3
    c3f8:	e3a0206d 	mov	r2, #109	; 0x6d
    c3fc:	eb00812f 	bl	2c8c0 <assertion_failed>

0000c400 <CDWHCIRootPort::ReScanDevices()>:
    c400:	e92d4010 	push	{r4, lr}
    c404:	e5904008 	ldr	r4, [r0, #8]
    c408:	e3540000 	cmp	r4, #0
    c40c:	0a000002 	beq	c41c <CDWHCIRootPort::ReScanDevices()+0x1c>
    c410:	e1a00004 	mov	r0, r4
    c414:	e8bd4010 	pop	{r4, lr}
    c418:	ea00081d 	b	e494 <CUSBDevice::ReScanDevices()>
    c41c:	eb008ba4 	bl	2f2b4 <CLogger::Get()>
    c420:	e59f1014 	ldr	r1, [pc, #20]	; c43c <CDWHCIRootPort::ReScanDevices()+0x3c>
    c424:	e3a02002 	mov	r2, #2
    c428:	e30b3270 	movw	r3, #45680	; 0xb270
    c42c:	e3403003 	movt	r3, #3
    c430:	eb008d6d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c434:	e1a00004 	mov	r0, r4
    c438:	e8bd8010 	pop	{r4, pc}
    c43c:	0003b32c 	.word	0x0003b32c

0000c440 <CDWHCIRootPort::HandlePortStatusChange()>:
    c440:	e92d4010 	push	{r4, lr}
    c444:	e1a04000 	mov	r4, r0
    c448:	e5900004 	ldr	r0, [r0, #4]
    c44c:	e3500000 	cmp	r0, #0
    c450:	0a00000f 	beq	c494 <CDWHCIRootPort::HandlePortStatusChange()+0x54>
    c454:	ebfff0ec 	bl	880c <CDWHCIDevice::DeviceConnected()>
    c458:	e5943008 	ldr	r3, [r4, #8]
    c45c:	e3500000 	cmp	r0, #0
    c460:	1a000006 	bne	c480 <CDWHCIRootPort::HandlePortStatusChange()+0x40>
    c464:	e3530000 	cmp	r3, #0
    c468:	08bd8010 	popeq	{r4, pc}
    c46c:	e5943000 	ldr	r3, [r4]
    c470:	e1a00004 	mov	r0, r4
    c474:	e8bd4010 	pop	{r4, lr}
    c478:	e593300c 	ldr	r3, [r3, #12]
    c47c:	e12fff13 	bx	r3
    c480:	e3530000 	cmp	r3, #0
    c484:	18bd8010 	popne	{r4, pc}
    c488:	e5940004 	ldr	r0, [r4, #4]
    c48c:	e8bd4010 	pop	{r4, lr}
    c490:	eafffc09 	b	b4bc <CDWHCIDevice::ReScanDevices()>
    c494:	e30b124c 	movw	r1, #45644	; 0xb24c
    c498:	e3401003 	movt	r1, #3
    c49c:	e30b0260 	movw	r0, #45664	; 0xb260
    c4a0:	e3400003 	movt	r0, #3
    c4a4:	e3a02078 	mov	r2, #120	; 0x78
    c4a8:	eb008104 	bl	2c8c0 <assertion_failed>

0000c4ac <CDWHCIRootPort::~CDWHCIRootPort()>:
    c4ac:	e92d4010 	push	{r4, lr}
    c4b0:	e1a04000 	mov	r4, r0
    c4b4:	e5900008 	ldr	r0, [r0, #8]
    c4b8:	e59f3028 	ldr	r3, [pc, #40]	; c4e8 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    c4bc:	e3500000 	cmp	r0, #0
    c4c0:	e5843000 	str	r3, [r4]
    c4c4:	0a000002 	beq	c4d4 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    c4c8:	e5903000 	ldr	r3, [r0]
    c4cc:	e5933004 	ldr	r3, [r3, #4]
    c4d0:	e12fff33 	blx	r3
    c4d4:	e1a00004 	mov	r0, r4
    c4d8:	e3a0100c 	mov	r1, #12
    c4dc:	eb00aa06 	bl	36cfc <operator delete(void*, unsigned int)>
    c4e0:	e1a00004 	mov	r0, r4
    c4e4:	e8bd8010 	pop	{r4, pc}
    c4e8:	0003b318 	.word	0x0003b318

0000c4ec <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    c4ec:	e3a02000 	mov	r2, #0
    c4f0:	e59fc028 	ldr	ip, [pc, #40]	; c520 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    c4f4:	e1510002 	cmp	r1, r2
    c4f8:	e580c000 	str	ip, [r0]
    c4fc:	e9800006 	stmib	r0, {r1, r2}
    c500:	112fff1e 	bxne	lr
    c504:	e30b124c 	movw	r1, #45644	; 0xb24c
    c508:	e3401003 	movt	r1, #3
    c50c:	e30b0260 	movw	r0, #45664	; 0xb260
    c510:	e3400003 	movt	r0, #3
    c514:	e3a0201f 	mov	r2, #31
    c518:	e92d4010 	push	{r4, lr}
    c51c:	eb0080e7 	bl	2c8c0 <assertion_failed>
    c520:	0003b318 	.word	0x0003b318

0000c524 <CDWHCIRootPort::Initialize()>:
    c524:	e92d4070 	push	{r4, r5, r6, lr}
    c528:	e1a04000 	mov	r4, r0
    c52c:	e5900004 	ldr	r0, [r0, #4]
    c530:	e3500000 	cmp	r0, #0
    c534:	0a00003f 	beq	c638 <CDWHCIRootPort::Initialize()+0x114>
    c538:	ebfff0c1 	bl	8844 <CDWHCIDevice::GetPortSpeed()>
    c53c:	e1a05000 	mov	r5, r0
    c540:	e3500004 	cmp	r0, #4
    c544:	0a000034 	beq	c61c <CDWHCIRootPort::Initialize()+0xf8>
    c548:	e5943008 	ldr	r3, [r4, #8]
    c54c:	e3530000 	cmp	r3, #0
    c550:	1a00003e 	bne	c650 <CDWHCIRootPort::Initialize()+0x12c>
    c554:	e3a00058 	mov	r0, #88	; 0x58
    c558:	eb00a9cf 	bl	36c9c <operator new(unsigned int)>
    c55c:	e5941004 	ldr	r1, [r4, #4]
    c560:	e1a06000 	mov	r6, r0
    c564:	e1a03004 	mov	r3, r4
    c568:	e1a02005 	mov	r2, r5
    c56c:	eb000741 	bl	e278 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    c570:	e1a00006 	mov	r0, r6
    c574:	e5846008 	str	r6, [r4, #8]
    c578:	eb000972 	bl	eb48 <CUSBDevice::Initialize()>
    c57c:	e3500000 	cmp	r0, #0
    c580:	e5940008 	ldr	r0, [r4, #8]
    c584:	0a000010 	beq	c5cc <CDWHCIRootPort::Initialize()+0xa8>
    c588:	e5903000 	ldr	r3, [r0]
    c58c:	e593300c 	ldr	r3, [r3, #12]
    c590:	e12fff33 	blx	r3
    c594:	e2505000 	subs	r5, r0, #0
    c598:	0a000015 	beq	c5f4 <CDWHCIRootPort::Initialize()+0xd0>
    c59c:	eb008b44 	bl	2f2b4 <CLogger::Get()>
    c5a0:	e59f10f4 	ldr	r1, [pc, #244]	; c69c <CDWHCIRootPort::Initialize()+0x178>
    c5a4:	e3a02004 	mov	r2, #4
    c5a8:	e30b32e4 	movw	r3, #45796	; 0xb2e4
    c5ac:	e3403003 	movt	r3, #3
    c5b0:	eb008d0d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c5b4:	e5940004 	ldr	r0, [r4, #4]
    c5b8:	ebfff0b3 	bl	888c <CDWHCIDevice::OvercurrentDetected()>
    c5bc:	e3500000 	cmp	r0, #0
    c5c0:	1a000028 	bne	c668 <CDWHCIRootPort::Initialize()+0x144>
    c5c4:	e1a00005 	mov	r0, r5
    c5c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c5cc:	e3500000 	cmp	r0, #0
    c5d0:	0a000002 	beq	c5e0 <CDWHCIRootPort::Initialize()+0xbc>
    c5d4:	e5903000 	ldr	r3, [r0]
    c5d8:	e5933004 	ldr	r3, [r3, #4]
    c5dc:	e12fff33 	blx	r3
    c5e0:	e3a03000 	mov	r3, #0
    c5e4:	e5843008 	str	r3, [r4, #8]
    c5e8:	e3a05000 	mov	r5, #0
    c5ec:	e1a00005 	mov	r0, r5
    c5f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c5f4:	eb008b2e 	bl	2f2b4 <CLogger::Get()>
    c5f8:	e59f109c 	ldr	r1, [pc, #156]	; c69c <CDWHCIRootPort::Initialize()+0x178>
    c5fc:	e3a02002 	mov	r2, #2
    c600:	e30b32cc 	movw	r3, #45772	; 0xb2cc
    c604:	e3403003 	movt	r3, #3
    c608:	eb008cf7 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c60c:	e5940008 	ldr	r0, [r4, #8]
    c610:	e3500000 	cmp	r0, #0
    c614:	1affffee 	bne	c5d4 <CDWHCIRootPort::Initialize()+0xb0>
    c618:	eafffff0 	b	c5e0 <CDWHCIRootPort::Initialize()+0xbc>
    c61c:	eb008b24 	bl	2f2b4 <CLogger::Get()>
    c620:	e59f1074 	ldr	r1, [pc, #116]	; c69c <CDWHCIRootPort::Initialize()+0x178>
    c624:	e3a02001 	mov	r2, #1
    c628:	e30b32a0 	movw	r3, #45728	; 0xb2a0
    c62c:	e3403003 	movt	r3, #3
    c630:	eb008ced 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c634:	eaffffeb 	b	c5e8 <CDWHCIRootPort::Initialize()+0xc4>
    c638:	e30b124c 	movw	r1, #45644	; 0xb24c
    c63c:	e3401003 	movt	r1, #3
    c640:	e30b0260 	movw	r0, #45664	; 0xb260
    c644:	e3400003 	movt	r0, #3
    c648:	e3a0202c 	mov	r2, #44	; 0x2c
    c64c:	eb00809b 	bl	2c8c0 <assertion_failed>
    c650:	e30b124c 	movw	r1, #45644	; 0xb24c
    c654:	e3401003 	movt	r1, #3
    c658:	e30b02bc 	movw	r0, #45756	; 0xb2bc
    c65c:	e3400003 	movt	r0, #3
    c660:	e3a02036 	mov	r2, #54	; 0x36
    c664:	eb008095 	bl	2c8c0 <assertion_failed>
    c668:	eb008b11 	bl	2f2b4 <CLogger::Get()>
    c66c:	e59f1028 	ldr	r1, [pc, #40]	; c69c <CDWHCIRootPort::Initialize()+0x178>
    c670:	e3a02001 	mov	r2, #1
    c674:	e30b32f8 	movw	r3, #45816	; 0xb2f8
    c678:	e3403003 	movt	r3, #3
    c67c:	eb008cda 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c680:	e5940004 	ldr	r0, [r4, #4]
    c684:	e3a01001 	mov	r1, #1
    c688:	ebfff08d 	bl	88c4 <CDWHCIDevice::DisableRootPort(bool)>
    c68c:	e5940008 	ldr	r0, [r4, #8]
    c690:	e3500000 	cmp	r0, #0
    c694:	1affffce 	bne	c5d4 <CDWHCIRootPort::Initialize()+0xb0>
    c698:	eaffffd0 	b	c5e0 <CDWHCIRootPort::Initialize()+0xbc>
    c69c:	0003b32c 	.word	0x0003b32c

0000c6a0 <TQueueEntry::operator new(unsigned int)>:
    c6a0:	e350000c 	cmp	r0, #12
    c6a4:	e92d4010 	push	{r4, lr}
    c6a8:	1a000006 	bne	c6c8 <TQueueEntry::operator new(unsigned int)+0x28>
    c6ac:	e3043e60 	movw	r3, #20064	; 0x4e60
    c6b0:	e3403004 	movt	r3, #4
    c6b4:	e5930000 	ldr	r0, [r3]
    c6b8:	e3500000 	cmp	r0, #0
    c6bc:	0a000007 	beq	c6e0 <TQueueEntry::operator new(unsigned int)+0x40>
    c6c0:	e8bd4010 	pop	{r4, lr}
    c6c4:	ea0081c6 	b	2cde4 <CClassAllocator::Allocate()>
    c6c8:	e30b1334 	movw	r1, #45876	; 0xb334
    c6cc:	e3401003 	movt	r1, #3
    c6d0:	e30b0348 	movw	r0, #45896	; 0xb348
    c6d4:	e3400003 	movt	r0, #3
    c6d8:	e3a02028 	mov	r2, #40	; 0x28
    c6dc:	eb008077 	bl	2c8c0 <assertion_failed>
    c6e0:	e30b1334 	movw	r1, #45876	; 0xb334
    c6e4:	e3401003 	movt	r1, #3
    c6e8:	e30b0048 	movw	r0, #45128	; 0xb048
    c6ec:	e3400003 	movt	r0, #3
    c6f0:	e3a02028 	mov	r2, #40	; 0x28
    c6f4:	eb008071 	bl	2c8c0 <assertion_failed>

0000c6f8 <TQueueEntry::operator delete(void*, unsigned int)>:
    c6f8:	e351000c 	cmp	r1, #12
    c6fc:	e92d4010 	push	{r4, lr}
    c700:	1a000008 	bne	c728 <TQueueEntry::operator delete(void*, unsigned int)+0x30>
    c704:	e3042e60 	movw	r2, #20064	; 0x4e60
    c708:	e3402004 	movt	r2, #4
    c70c:	e1a03000 	mov	r3, r0
    c710:	e5920000 	ldr	r0, [r2]
    c714:	e3500000 	cmp	r0, #0
    c718:	0a000008 	beq	c740 <TQueueEntry::operator delete(void*, unsigned int)+0x48>
    c71c:	e8bd4010 	pop	{r4, lr}
    c720:	e1a01003 	mov	r1, r3
    c724:	ea0081e9 	b	2ced0 <CClassAllocator::Free(void*)>
    c728:	e30b1334 	movw	r1, #45876	; 0xb334
    c72c:	e3401003 	movt	r1, #3
    c730:	e30b0348 	movw	r0, #45896	; 0xb348
    c734:	e3400003 	movt	r0, #3
    c738:	e3a02028 	mov	r2, #40	; 0x28
    c73c:	eb00805f 	bl	2c8c0 <assertion_failed>
    c740:	e30b1334 	movw	r1, #45876	; 0xb334
    c744:	e3401003 	movt	r1, #3
    c748:	e30b0048 	movw	r0, #45128	; 0xb048
    c74c:	e3400003 	movt	r0, #3
    c750:	e3a02028 	mov	r2, #40	; 0x28
    c754:	eb008059 	bl	2c8c0 <assertion_failed>

0000c758 <TQueueEntry::InitAllocator(unsigned int)>:
    c758:	e92d4070 	push	{r4, r5, r6, lr}
    c75c:	e3044e60 	movw	r4, #20064	; 0x4e60
    c760:	e3404004 	movt	r4, #4
    c764:	e5943000 	ldr	r3, [r4]
    c768:	e3530000 	cmp	r3, #0
    c76c:	1a00000a 	bne	c79c <TQueueEntry::InitAllocator(unsigned int)+0x44>
    c770:	e1a05000 	mov	r5, r0
    c774:	e3a00020 	mov	r0, #32
    c778:	eb00a947 	bl	36c9c <operator new(unsigned int)>
    c77c:	e1a02005 	mov	r2, r5
    c780:	e3a0100c 	mov	r1, #12
    c784:	e30b3368 	movw	r3, #45928	; 0xb368
    c788:	e3403003 	movt	r3, #3
    c78c:	e1a05000 	mov	r5, r0
    c790:	eb008135 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c794:	e5845000 	str	r5, [r4]
    c798:	e8bd8070 	pop	{r4, r5, r6, pc}
    c79c:	e30b1334 	movw	r1, #45876	; 0xb334
    c7a0:	e3401003 	movt	r1, #3
    c7a4:	e30b0090 	movw	r0, #45200	; 0xb090
    c7a8:	e3400003 	movt	r0, #3
    c7ac:	e3a02028 	mov	r2, #40	; 0x28
    c7b0:	eb008042 	bl	2c8c0 <assertion_failed>

0000c7b4 <TQueueEntry::InitProtectedAllocator(unsigned int, unsigned int)>:
    c7b4:	e92d4070 	push	{r4, r5, r6, lr}
    c7b8:	e3044e60 	movw	r4, #20064	; 0x4e60
    c7bc:	e3404004 	movt	r4, #4
    c7c0:	e1a05000 	mov	r5, r0
    c7c4:	e24dd008 	sub	sp, sp, #8
    c7c8:	e1a06001 	mov	r6, r1
    c7cc:	e5940000 	ldr	r0, [r4]
    c7d0:	e3500000 	cmp	r0, #0
    c7d4:	0a000004 	beq	c7ec <TQueueEntry::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    c7d8:	e1a02001 	mov	r2, r1
    c7dc:	e1a01005 	mov	r1, r5
    c7e0:	e28dd008 	add	sp, sp, #8
    c7e4:	e8bd4070 	pop	{r4, r5, r6, lr}
    c7e8:	ea008139 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
    c7ec:	e3a00020 	mov	r0, #32
    c7f0:	eb00a929 	bl	36c9c <operator new(unsigned int)>
    c7f4:	e1a02005 	mov	r2, r5
    c7f8:	e1a03006 	mov	r3, r6
    c7fc:	e3a0100c 	mov	r1, #12
    c800:	e30bc368 	movw	ip, #45928	; 0xb368
    c804:	e340c003 	movt	ip, #3
    c808:	e58dc000 	str	ip, [sp]
    c80c:	e1a05000 	mov	r5, r0
    c810:	eb008121 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c814:	e5845000 	str	r5, [r4]
    c818:	e28dd008 	add	sp, sp, #8
    c81c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c820 <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)>:
    c820:	e92d4070 	push	{r4, r5, r6, lr}
    c824:	e1a04000 	mov	r4, r0
    c828:	e1a05002 	mov	r5, r2
    c82c:	e1a06001 	mov	r6, r1
    c830:	eb00ab1c 	bl	374a8 <CPtrListFIQ::CPtrListFIQ(unsigned int)>
    c834:	e1a00006 	mov	r0, r6
    c838:	e1a01005 	mov	r1, r5
    c83c:	e5845004 	str	r5, [r4, #4]
    c840:	ebffffdb 	bl	c7b4 <TQueueEntry::InitProtectedAllocator(unsigned int, unsigned int)>
    c844:	e1a00004 	mov	r0, r4
    c848:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c84c <CDWHCITransactionQueue::Flush()>:
    c84c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c850:	e1a06000 	mov	r6, r0
    c854:	e5900004 	ldr	r0, [r0, #4]
    c858:	e3500000 	cmp	r0, #0
    c85c:	1a000032 	bne	c92c <CDWHCITransactionQueue::Flush()+0xe0>
    c860:	e1a00006 	mov	r0, r6
    c864:	eb00ab37 	bl	37548 <CPtrListFIQ::GetFirst()>
    c868:	e2505000 	subs	r5, r0, #0
    c86c:	0a000029 	beq	c918 <CDWHCITransactionQueue::Flush()+0xcc>
    c870:	e3058055 	movw	r8, #20565	; 0x5055
    c874:	e3458841 	movt	r8, #22593	; 0x5841
    c878:	e3047e60 	movw	r7, #20064	; 0x4e60
    c87c:	e3407004 	movt	r7, #4
    c880:	e1a01005 	mov	r1, r5
    c884:	e1a00006 	mov	r0, r6
    c888:	eb00ab46 	bl	375a8 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    c88c:	e2504000 	subs	r4, r0, #0
    c890:	0a000027 	beq	c934 <CDWHCITransactionQueue::Flush()+0xe8>
    c894:	e5943000 	ldr	r3, [r4]
    c898:	e1530008 	cmp	r3, r8
    c89c:	1a00002a 	bne	c94c <CDWHCITransactionQueue::Flush()+0x100>
    c8a0:	e1a00006 	mov	r0, r6
    c8a4:	e1a01005 	mov	r1, r5
    c8a8:	eb00abf0 	bl	37870 <CPtrListFIQ::Remove(TPtrListElement*)>
    c8ac:	e5940004 	ldr	r0, [r4, #4]
    c8b0:	e3500000 	cmp	r0, #0
    c8b4:	0a00002a 	beq	c964 <CDWHCITransactionQueue::Flush()+0x118>
    c8b8:	eb00046d 	bl	da74 <CDWHCITransferStageData::GetURB() const>
    c8bc:	e2505000 	subs	r5, r0, #0
    c8c0:	0a000003 	beq	c8d4 <CDWHCITransactionQueue::Flush()+0x88>
    c8c4:	eb0026eb 	bl	16478 <CUSBRequest::~CUSBRequest()>
    c8c8:	e1a00005 	mov	r0, r5
    c8cc:	e3a01070 	mov	r1, #112	; 0x70
    c8d0:	eb0027a4 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
    c8d4:	e5945004 	ldr	r5, [r4, #4]
    c8d8:	e3550000 	cmp	r5, #0
    c8dc:	0a000004 	beq	c8f4 <CDWHCITransactionQueue::Flush()+0xa8>
    c8e0:	e1a00005 	mov	r0, r5
    c8e4:	eb000275 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    c8e8:	e1a00005 	mov	r0, r5
    c8ec:	e3a01c01 	mov	r1, #256	; 0x100
    c8f0:	eb00048b 	bl	db24 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    c8f4:	e5970000 	ldr	r0, [r7]
    c8f8:	e3500000 	cmp	r0, #0
    c8fc:	0a00001e 	beq	c97c <CDWHCITransactionQueue::Flush()+0x130>
    c900:	e1a01004 	mov	r1, r4
    c904:	eb008171 	bl	2ced0 <CClassAllocator::Free(void*)>
    c908:	e1a00006 	mov	r0, r6
    c90c:	eb00ab0d 	bl	37548 <CPtrListFIQ::GetFirst()>
    c910:	e2505000 	subs	r5, r0, #0
    c914:	1affffd9 	bne	c880 <CDWHCITransactionQueue::Flush()+0x34>
    c918:	e5963004 	ldr	r3, [r6, #4]
    c91c:	e3530000 	cmp	r3, #0
    c920:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c924:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c928:	ea00af1e 	b	385a8 <LeaveCritical>
    c92c:	eb00aef2 	bl	384fc <EnterCritical>
    c930:	eaffffca 	b	c860 <CDWHCITransactionQueue::Flush()+0x14>
    c934:	e30b1334 	movw	r1, #45876	; 0xb334
    c938:	e3401003 	movt	r1, #3
    c93c:	e30b0374 	movw	r0, #45940	; 0xb374
    c940:	e3400003 	movt	r0, #3
    c944:	e3a0204f 	mov	r2, #79	; 0x4f
    c948:	eb007fdc 	bl	2c8c0 <assertion_failed>
    c94c:	e30b1334 	movw	r1, #45876	; 0xb334
    c950:	e3401003 	movt	r1, #3
    c954:	e30b0380 	movw	r0, #45952	; 0xb380
    c958:	e3400003 	movt	r0, #3
    c95c:	e3a02050 	mov	r2, #80	; 0x50
    c960:	eb007fd6 	bl	2c8c0 <assertion_failed>
    c964:	e30b1334 	movw	r1, #45876	; 0xb334
    c968:	e3401003 	movt	r1, #3
    c96c:	e30b03a4 	movw	r0, #45988	; 0xb3a4
    c970:	e3400003 	movt	r0, #3
    c974:	e3a02054 	mov	r2, #84	; 0x54
    c978:	eb007fd0 	bl	2c8c0 <assertion_failed>
    c97c:	e30b1334 	movw	r1, #45876	; 0xb334
    c980:	e3401003 	movt	r1, #3
    c984:	e30b0048 	movw	r0, #45128	; 0xb048
    c988:	e3400003 	movt	r0, #3
    c98c:	e3a02028 	mov	r2, #40	; 0x28
    c990:	eb007fca 	bl	2c8c0 <assertion_failed>

0000c994 <CDWHCITransactionQueue::~CDWHCITransactionQueue()>:
    c994:	e92d4010 	push	{r4, lr}
    c998:	e1a04000 	mov	r4, r0
    c99c:	ebffffaa 	bl	c84c <CDWHCITransactionQueue::Flush()>
    c9a0:	e1a00004 	mov	r0, r4
    c9a4:	eb00aadd 	bl	37520 <CPtrListFIQ::~CPtrListFIQ()>
    c9a8:	e1a00004 	mov	r0, r4
    c9ac:	e8bd8010 	pop	{r4, pc}

0000c9b0 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>:
    c9b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9b4:	e2518000 	subs	r8, r1, #0
    c9b8:	0a000051 	beq	cb04 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x154>
    c9bc:	e1a07000 	mov	r7, r0
    c9c0:	e5900004 	ldr	r0, [r0, #4]
    c9c4:	e3500000 	cmp	r0, #0
    c9c8:	1a000039 	bne	cab4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x104>
    c9cc:	e1a00007 	mov	r0, r7
    c9d0:	eb00aadc 	bl	37548 <CPtrListFIQ::GetFirst()>
    c9d4:	e2506000 	subs	r6, r0, #0
    c9d8:	0a00004f 	beq	cb1c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x16c>
    c9dc:	e3059055 	movw	r9, #20565	; 0x5055
    c9e0:	e3459841 	movt	r9, #22593	; 0x5841
    c9e4:	e1a01006 	mov	r1, r6
    c9e8:	e1a00007 	mov	r0, r7
    c9ec:	eb00aaed 	bl	375a8 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    c9f0:	e2504000 	subs	r4, r0, #0
    c9f4:	0a000030 	beq	cabc <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x10c>
    c9f8:	e5943000 	ldr	r3, [r4]
    c9fc:	e1530009 	cmp	r3, r9
    ca00:	1a000033 	bne	cad4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x124>
    ca04:	e1a01006 	mov	r1, r6
    ca08:	e1a00007 	mov	r0, r7
    ca0c:	eb00aacf 	bl	37550 <CPtrListFIQ::GetNext(TPtrListElement*)>
    ca10:	e5943004 	ldr	r3, [r4, #4]
    ca14:	e1a05000 	mov	r5, r0
    ca18:	e3530000 	cmp	r3, #0
    ca1c:	0a000032 	beq	caec <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x13c>
    ca20:	e1a00003 	mov	r0, r3
    ca24:	eb00041c 	bl	da9c <CDWHCITransferStageData::GetDevice() const>
    ca28:	e1580000 	cmp	r8, r0
    ca2c:	0a000003 	beq	ca40 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x90>
    ca30:	e3550000 	cmp	r5, #0
    ca34:	0a000038 	beq	cb1c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x16c>
    ca38:	e1a06005 	mov	r6, r5
    ca3c:	eaffffe8 	b	c9e4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x34>
    ca40:	e1a00007 	mov	r0, r7
    ca44:	e1a01006 	mov	r1, r6
    ca48:	eb00ab88 	bl	37870 <CPtrListFIQ::Remove(TPtrListElement*)>
    ca4c:	e5940004 	ldr	r0, [r4, #4]
    ca50:	e3500000 	cmp	r0, #0
    ca54:	0a000035 	beq	cb30 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x180>
    ca58:	eb000405 	bl	da74 <CDWHCITransferStageData::GetURB() const>
    ca5c:	e2506000 	subs	r6, r0, #0
    ca60:	0a000003 	beq	ca74 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xc4>
    ca64:	eb002683 	bl	16478 <CUSBRequest::~CUSBRequest()>
    ca68:	e1a00006 	mov	r0, r6
    ca6c:	e3a01070 	mov	r1, #112	; 0x70
    ca70:	eb00273c 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
    ca74:	e5946004 	ldr	r6, [r4, #4]
    ca78:	e3560000 	cmp	r6, #0
    ca7c:	0a000004 	beq	ca94 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xe4>
    ca80:	e1a00006 	mov	r0, r6
    ca84:	eb00020d 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ca88:	e1a00006 	mov	r0, r6
    ca8c:	e3a01c01 	mov	r1, #256	; 0x100
    ca90:	eb000423 	bl	db24 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ca94:	e3043e60 	movw	r3, #20064	; 0x4e60
    ca98:	e3403004 	movt	r3, #4
    ca9c:	e5930000 	ldr	r0, [r3]
    caa0:	e3500000 	cmp	r0, #0
    caa4:	0a000027 	beq	cb48 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x198>
    caa8:	e1a01004 	mov	r1, r4
    caac:	eb008107 	bl	2ced0 <CClassAllocator::Free(void*)>
    cab0:	eaffffde 	b	ca30 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x80>
    cab4:	eb00ae90 	bl	384fc <EnterCritical>
    cab8:	eaffffc3 	b	c9cc <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x1c>
    cabc:	e30b1334 	movw	r1, #45876	; 0xb334
    cac0:	e3401003 	movt	r1, #3
    cac4:	e30b0374 	movw	r0, #45940	; 0xb374
    cac8:	e3400003 	movt	r0, #3
    cacc:	e3a0206f 	mov	r2, #111	; 0x6f
    cad0:	eb007f7a 	bl	2c8c0 <assertion_failed>
    cad4:	e30b1334 	movw	r1, #45876	; 0xb334
    cad8:	e3401003 	movt	r1, #3
    cadc:	e30b0380 	movw	r0, #45952	; 0xb380
    cae0:	e3400003 	movt	r0, #3
    cae4:	e3a02070 	mov	r2, #112	; 0x70
    cae8:	eb007f74 	bl	2c8c0 <assertion_failed>
    caec:	e30b1334 	movw	r1, #45876	; 0xb334
    caf0:	e3401003 	movt	r1, #3
    caf4:	e30b03a4 	movw	r0, #45988	; 0xb3a4
    caf8:	e3400003 	movt	r0, #3
    cafc:	e3a02074 	mov	r2, #116	; 0x74
    cb00:	eb007f6e 	bl	2c8c0 <assertion_failed>
    cb04:	e30b1334 	movw	r1, #45876	; 0xb334
    cb08:	e3401003 	movt	r1, #3
    cb0c:	e30b03bc 	movw	r0, #46012	; 0xb3bc
    cb10:	e3400003 	movt	r0, #3
    cb14:	e3a02067 	mov	r2, #103	; 0x67
    cb18:	eb007f68 	bl	2c8c0 <assertion_failed>
    cb1c:	e5973004 	ldr	r3, [r7, #4]
    cb20:	e3530000 	cmp	r3, #0
    cb24:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    cb28:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    cb2c:	ea00ae9d 	b	385a8 <LeaveCritical>
    cb30:	e30b1334 	movw	r1, #45876	; 0xb334
    cb34:	e3401003 	movt	r1, #3
    cb38:	e30b03a4 	movw	r0, #45988	; 0xb3a4
    cb3c:	e3400003 	movt	r0, #3
    cb40:	e3a02079 	mov	r2, #121	; 0x79
    cb44:	eb007f5d 	bl	2c8c0 <assertion_failed>
    cb48:	e30b1334 	movw	r1, #45876	; 0xb334
    cb4c:	e3401003 	movt	r1, #3
    cb50:	e30b0048 	movw	r0, #45128	; 0xb048
    cb54:	e3400003 	movt	r0, #3
    cb58:	e3a02028 	mov	r2, #40	; 0x28
    cb5c:	eb007f57 	bl	2c8c0 <assertion_failed>

0000cb60 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>:
    cb60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cb64:	e2517000 	subs	r7, r1, #0
    cb68:	0a000040 	beq	cc70 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x110>
    cb6c:	e1a05002 	mov	r5, r2
    cb70:	e3520901 	cmp	r2, #16384	; 0x4000
    cb74:	2a000049 	bcs	cca0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x140>
    cb78:	e3043e60 	movw	r3, #20064	; 0x4e60
    cb7c:	e3403004 	movt	r3, #4
    cb80:	e1a04000 	mov	r4, r0
    cb84:	e5930000 	ldr	r0, [r3]
    cb88:	e3500000 	cmp	r0, #0
    cb8c:	0a00004f 	beq	ccd0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x170>
    cb90:	eb008093 	bl	2cde4 <CClassAllocator::Allocate()>
    cb94:	e2506000 	subs	r6, r0, #0
    cb98:	0a000052 	beq	cce8 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x188>
    cb9c:	e5940004 	ldr	r0, [r4, #4]
    cba0:	e3053055 	movw	r3, #20565	; 0x5055
    cba4:	e3453841 	movt	r3, #22593	; 0x5841
    cba8:	e5867004 	str	r7, [r6, #4]
    cbac:	e3500000 	cmp	r0, #0
    cbb0:	e5863000 	str	r3, [r6]
    cbb4:	e1c650b8 	strh	r5, [r6, #8]
    cbb8:	1a000025 	bne	cc54 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xf4>
    cbbc:	e1a00004 	mov	r0, r4
    cbc0:	eb00aa60 	bl	37548 <CPtrListFIQ::GetFirst()>
    cbc4:	e2507000 	subs	r7, r0, #0
    cbc8:	0a000023 	beq	cc5c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xfc>
    cbcc:	e3059055 	movw	r9, #20565	; 0x5055
    cbd0:	e3459841 	movt	r9, #22593	; 0x5841
    cbd4:	e3018ffe 	movw	r8, #8190	; 0x1ffe
    cbd8:	e1a01007 	mov	r1, r7
    cbdc:	e1a00004 	mov	r0, r4
    cbe0:	eb00aa70 	bl	375a8 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    cbe4:	e3500000 	cmp	r0, #0
    cbe8:	0a000026 	beq	cc88 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x128>
    cbec:	e5903000 	ldr	r3, [r0]
    cbf0:	e1530009 	cmp	r3, r9
    cbf4:	1a00002f 	bne	ccb8 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x158>
    cbf8:	e1d030b8 	ldrh	r3, [r0, #8]
    cbfc:	e1530005 	cmp	r3, r5
    cc00:	0a00000c 	beq	cc38 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xd8>
    cc04:	e0433005 	sub	r3, r3, r5
    cc08:	e7ed3053 	ubfx	r3, r3, #0, #14
    cc0c:	e1530008 	cmp	r3, r8
    cc10:	8a000008 	bhi	cc38 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xd8>
    cc14:	e1a02006 	mov	r2, r6
    cc18:	e1a01007 	mov	r1, r7
    cc1c:	e1a00004 	mov	r0, r4
    cc20:	eb00aa76 	bl	37600 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)>
    cc24:	e5943004 	ldr	r3, [r4, #4]
    cc28:	e3530000 	cmp	r3, #0
    cc2c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    cc30:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    cc34:	ea00ae5b 	b	385a8 <LeaveCritical>
    cc38:	e1a01007 	mov	r1, r7
    cc3c:	e1a00004 	mov	r0, r4
    cc40:	eb00aa42 	bl	37550 <CPtrListFIQ::GetNext(TPtrListElement*)>
    cc44:	e3500000 	cmp	r0, #0
    cc48:	0a000003 	beq	cc5c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xfc>
    cc4c:	e1a07000 	mov	r7, r0
    cc50:	eaffffe0 	b	cbd8 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x78>
    cc54:	eb00ae28 	bl	384fc <EnterCritical>
    cc58:	eaffffd7 	b	cbbc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x5c>
    cc5c:	e1a02006 	mov	r2, r6
    cc60:	e1a01007 	mov	r1, r7
    cc64:	e1a00004 	mov	r0, r4
    cc68:	eb00aab2 	bl	37738 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)>
    cc6c:	eaffffec 	b	cc24 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xc4>
    cc70:	e30b1334 	movw	r1, #45876	; 0xb334
    cc74:	e3401003 	movt	r1, #3
    cc78:	e30b03ac 	movw	r0, #45996	; 0xb3ac
    cc7c:	e3400003 	movt	r0, #3
    cc80:	e3a0208d 	mov	r2, #141	; 0x8d
    cc84:	eb007f0d 	bl	2c8c0 <assertion_failed>
    cc88:	e30b1334 	movw	r1, #45876	; 0xb334
    cc8c:	e3401003 	movt	r1, #3
    cc90:	e30b03f4 	movw	r0, #46068	; 0xb3f4
    cc94:	e3400003 	movt	r0, #3
    cc98:	e3a0209f 	mov	r2, #159	; 0x9f
    cc9c:	eb007f07 	bl	2c8c0 <assertion_failed>
    cca0:	e30b1334 	movw	r1, #45876	; 0xb334
    cca4:	e3401003 	movt	r1, #3
    cca8:	e30b03cc 	movw	r0, #46028	; 0xb3cc
    ccac:	e3400003 	movt	r0, #3
    ccb0:	e3a0208e 	mov	r2, #142	; 0x8e
    ccb4:	eb007f01 	bl	2c8c0 <assertion_failed>
    ccb8:	e30b1334 	movw	r1, #45876	; 0xb334
    ccbc:	e3401003 	movt	r1, #3
    ccc0:	e30b0404 	movw	r0, #46084	; 0xb404
    ccc4:	e3400003 	movt	r0, #3
    ccc8:	e3a020a0 	mov	r2, #160	; 0xa0
    cccc:	eb007efb 	bl	2c8c0 <assertion_failed>
    ccd0:	e30b1334 	movw	r1, #45876	; 0xb334
    ccd4:	e3401003 	movt	r1, #3
    ccd8:	e30b0048 	movw	r0, #45128	; 0xb048
    ccdc:	e3400003 	movt	r0, #3
    cce0:	e3a02028 	mov	r2, #40	; 0x28
    cce4:	eb007ef5 	bl	2c8c0 <assertion_failed>
    cce8:	e30b1334 	movw	r1, #45876	; 0xb334
    ccec:	e3401003 	movt	r1, #3
    ccf0:	e30b0374 	movw	r0, #45940	; 0xb374
    ccf4:	e3400003 	movt	r0, #3
    ccf8:	e3a02091 	mov	r2, #145	; 0x91
    ccfc:	eb007eef 	bl	2c8c0 <assertion_failed>

0000cd00 <CDWHCITransactionQueue::Dequeue(unsigned short)>:
    cd00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd04:	e1a04000 	mov	r4, r0
    cd08:	e5900004 	ldr	r0, [r0, #4]
    cd0c:	e1a07001 	mov	r7, r1
    cd10:	e3500000 	cmp	r0, #0
    cd14:	1a00002d 	bne	cdd0 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xd0>
    cd18:	e1a00004 	mov	r0, r4
    cd1c:	eb00aa09 	bl	37548 <CPtrListFIQ::GetFirst()>
    cd20:	e2506000 	subs	r6, r0, #0
    cd24:	0a000011 	beq	cd70 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x70>
    cd28:	e1a01006 	mov	r1, r6
    cd2c:	e1a00004 	mov	r0, r4
    cd30:	eb00aa1c 	bl	375a8 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    cd34:	e2505000 	subs	r5, r0, #0
    cd38:	0a00002a 	beq	cde8 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xe8>
    cd3c:	e5952000 	ldr	r2, [r5]
    cd40:	e3053055 	movw	r3, #20565	; 0x5055
    cd44:	e3453841 	movt	r3, #22593	; 0x5841
    cd48:	e1520003 	cmp	r2, r3
    cd4c:	1a00002b 	bne	ce00 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x100>
    cd50:	e1d530b8 	ldrh	r3, [r5, #8]
    cd54:	e1530007 	cmp	r3, r7
    cd58:	0a00000a 	beq	cd88 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x88>
    cd5c:	e0433007 	sub	r3, r3, r7
    cd60:	e3012ffe 	movw	r2, #8190	; 0x1ffe
    cd64:	e7ed3053 	ubfx	r3, r3, #0, #14
    cd68:	e1530002 	cmp	r3, r2
    cd6c:	8a000005 	bhi	cd88 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x88>
    cd70:	e5943004 	ldr	r3, [r4, #4]
    cd74:	e3530000 	cmp	r3, #0
    cd78:	1a000016 	bne	cdd8 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xd8>
    cd7c:	e3a04000 	mov	r4, #0
    cd80:	e1a00004 	mov	r0, r4
    cd84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cd88:	e1a01006 	mov	r1, r6
    cd8c:	e1a00004 	mov	r0, r4
    cd90:	eb00aab6 	bl	37870 <CPtrListFIQ::Remove(TPtrListElement*)>
    cd94:	e5943004 	ldr	r3, [r4, #4]
    cd98:	e3530000 	cmp	r3, #0
    cd9c:	1a00000f 	bne	cde0 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xe0>
    cda0:	e5954004 	ldr	r4, [r5, #4]
    cda4:	e3540000 	cmp	r4, #0
    cda8:	0a00001a 	beq	ce18 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x118>
    cdac:	e3043e60 	movw	r3, #20064	; 0x4e60
    cdb0:	e3403004 	movt	r3, #4
    cdb4:	e5930000 	ldr	r0, [r3]
    cdb8:	e3500000 	cmp	r0, #0
    cdbc:	0a00001b 	beq	ce30 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x130>
    cdc0:	e1a01005 	mov	r1, r5
    cdc4:	eb008041 	bl	2ced0 <CClassAllocator::Free(void*)>
    cdc8:	e1a00004 	mov	r0, r4
    cdcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cdd0:	eb00adc9 	bl	384fc <EnterCritical>
    cdd4:	eaffffcf 	b	cd18 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x18>
    cdd8:	eb00adf2 	bl	385a8 <LeaveCritical>
    cddc:	eaffffe6 	b	cd7c <CDWHCITransactionQueue::Dequeue(unsigned short)+0x7c>
    cde0:	eb00adf0 	bl	385a8 <LeaveCritical>
    cde4:	eaffffed 	b	cda0 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xa0>
    cde8:	e30b1334 	movw	r1, #45876	; 0xb334
    cdec:	e3401003 	movt	r1, #3
    cdf0:	e30b0374 	movw	r0, #45940	; 0xb374
    cdf4:	e3400003 	movt	r0, #3
    cdf8:	e3a020c4 	mov	r2, #196	; 0xc4
    cdfc:	eb007eaf 	bl	2c8c0 <assertion_failed>
    ce00:	e30b1334 	movw	r1, #45876	; 0xb334
    ce04:	e3401003 	movt	r1, #3
    ce08:	e30b0380 	movw	r0, #45952	; 0xb380
    ce0c:	e3400003 	movt	r0, #3
    ce10:	e3a020c5 	mov	r2, #197	; 0xc5
    ce14:	eb007ea9 	bl	2c8c0 <assertion_failed>
    ce18:	e30b1334 	movw	r1, #45876	; 0xb334
    ce1c:	e3401003 	movt	r1, #3
    ce20:	e30b03ac 	movw	r0, #45996	; 0xb3ac
    ce24:	e3400003 	movt	r0, #3
    ce28:	e3a020d3 	mov	r2, #211	; 0xd3
    ce2c:	eb007ea3 	bl	2c8c0 <assertion_failed>
    ce30:	e30b1334 	movw	r1, #45876	; 0xb334
    ce34:	e3401003 	movt	r1, #3
    ce38:	e30b0048 	movw	r0, #45128	; 0xb048
    ce3c:	e3400003 	movt	r0, #3
    ce40:	e3a02028 	mov	r2, #40	; 0x28
    ce44:	eb007e9d 	bl	2c8c0 <assertion_failed>

0000ce48 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    ce48:	e92d4070 	push	{r4, r5, r6, lr}
    ce4c:	e1a04000 	mov	r4, r0
    ce50:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    ce54:	f2c02050 	vmov.i32	q9, #0	; 0x00000000
    ce58:	e2800034 	add	r0, r0, #52	; 0x34
    ce5c:	e5c43008 	strb	r3, [r4, #8]
    ce60:	e3a03000 	mov	r3, #0
    ce64:	e5842004 	str	r2, [r4, #4]
    ce68:	e1a05002 	mov	r5, r2
    ce6c:	e1520003 	cmp	r2, r3
    ce70:	e2842044 	add	r2, r4, #68	; 0x44
    ce74:	e5dd6010 	ldrb	r6, [sp, #16]
    ce78:	e5c46009 	strb	r6, [r4, #9]
    ce7c:	e5841000 	str	r1, [r4]
    ce80:	e584300c 	str	r3, [r4, #12]
    ce84:	e5c43011 	strb	r3, [r4, #17]
    ce88:	f4402a8f 	vst1.32	{d18-d19}, [r0]
    ce8c:	f442078f 	vst1.32	{d16}, [r2]
    ce90:	e58430c4 	str	r3, [r4, #196]	; 0xc4
    ce94:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    ce98:	0a0000a1 	beq	d124 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2dc>
    ce9c:	e1a00005 	mov	r0, r5
    cea0:	eb002575 	bl	1647c <CUSBRequest::GetEndpoint() const>
    cea4:	e3500000 	cmp	r0, #0
    cea8:	e5840018 	str	r0, [r4, #24]
    ceac:	0a0000a2 	beq	d13c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
    ceb0:	eb000c53 	bl	10004 <CUSBEndpoint::GetDevice() const>
    ceb4:	e3500000 	cmp	r0, #0
    ceb8:	e5840014 	str	r0, [r4, #20]
    cebc:	0a0000a4 	beq	d154 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    cec0:	eb000620 	bl	e748 <CUSBDevice::GetSpeed() const>
    cec4:	e1a03000 	mov	r3, r0
    cec8:	e5940018 	ldr	r0, [r4, #24]
    cecc:	e5c4301c 	strb	r3, [r4, #28]
    ced0:	eb000c5f 	bl	10054 <CUSBEndpoint::GetMaxPacketSize() const>
    ced4:	e5840020 	str	r0, [r4, #32]
    ced8:	e5940014 	ldr	r0, [r4, #20]
    cedc:	eb00061b 	bl	e750 <CUSBDevice::IsSplit() const>
    cee0:	e3560000 	cmp	r6, #0
    cee4:	e5c40010 	strb	r0, [r4, #16]
    cee8:	0a000022 	beq	cf78 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x130>
    ceec:	eddf0bef 	vldr	d16, [pc, #956]	; d2b0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x468>
    cef0:	eddf1bf0 	vldr	d17, [pc, #960]	; d2b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x470>
    cef4:	e2842024 	add	r2, r4, #36	; 0x24
    cef8:	e2843080 	add	r3, r4, #128	; 0x80
    cefc:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    cf00:	f4420a8f 	vst1.32	{d16-d17}, [r2]
    cf04:	e3130003 	tst	r3, #3
    cf08:	1a000097 	bne	d16c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x324>
    cf0c:	e5d43010 	ldrb	r3, [r4, #16]
    cf10:	e3530000 	cmp	r3, #0
    cf14:	0a000042 	beq	d024 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    cf18:	e5940018 	ldr	r0, [r4, #24]
    cf1c:	e3500000 	cmp	r0, #0
    cf20:	0a00009c 	beq	d198 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x350>
    cf24:	eb000c42 	bl	10034 <CUSBEndpoint::GetType() const>
    cf28:	e3500003 	cmp	r0, #3
    cf2c:	0a000053 	beq	d080 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x238>
    cf30:	e5940018 	ldr	r0, [r4, #24]
    cf34:	e3500000 	cmp	r0, #0
    cf38:	0a0000be 	beq	d238 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3f0>
    cf3c:	eb000c3c 	bl	10034 <CUSBEndpoint::GetType() const>
    cf40:	e2400002 	sub	r0, r0, #2
    cf44:	e6ef0070 	uxtb	r0, r0
    cf48:	e3500001 	cmp	r0, #1
    cf4c:	e3a00014 	mov	r0, #20
    cf50:	8a00008b 	bhi	d184 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x33c>
    cf54:	ebfffca5 	bl	c1f0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    cf58:	e1a05000 	mov	r5, r0
    cf5c:	ebfffc8e 	bl	c19c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    cf60:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    cf64:	e59d3014 	ldr	r3, [sp, #20]
    cf68:	e3530000 	cmp	r3, #0
    cf6c:	1a00004c 	bne	d0a4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x25c>
    cf70:	e1a00004 	mov	r0, r4
    cf74:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf78:	e5940018 	ldr	r0, [r4, #24]
    cf7c:	e1a01006 	mov	r1, r6
    cf80:	eb000c42 	bl	10090 <CUSBEndpoint::GetNextPID(bool)>
    cf84:	e3500000 	cmp	r0, #0
    cf88:	e1a00005 	mov	r0, r5
    cf8c:	0a000057 	beq	d0f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    cf90:	eb002578 	bl	16578 <CUSBRequest::GetBuffer()>
    cf94:	e1a03000 	mov	r3, r0
    cf98:	e1a00005 	mov	r0, r5
    cf9c:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    cfa0:	eb002582 	bl	165b0 <CUSBRequest::GetBufLen() const>
    cfa4:	e1a02000 	mov	r2, r0
    cfa8:	e5940020 	ldr	r0, [r4, #32]
    cfac:	e5d45010 	ldrb	r5, [r4, #16]
    cfb0:	e2403001 	sub	r3, r0, #1
    cfb4:	e5842024 	str	r2, [r4, #36]	; 0x24
    cfb8:	e0833002 	add	r3, r3, r2
    cfbc:	e3550000 	cmp	r5, #0
    cfc0:	e733f013 	udiv	r3, r3, r0
    cfc4:	e5940018 	ldr	r0, [r4, #24]
    cfc8:	e5843028 	str	r3, [r4, #40]	; 0x28
    cfcc:	0a00004b 	beq	d100 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    cfd0:	e3500000 	cmp	r0, #0
    cfd4:	0a00006f 	beq	d198 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x350>
    cfd8:	eb000c15 	bl	10034 <CUSBEndpoint::GetType() const>
    cfdc:	e3500003 	cmp	r0, #3
    cfe0:	0a000072 	beq	d1b0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x368>
    cfe4:	e5943020 	ldr	r3, [r4, #32]
    cfe8:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    cfec:	e1530002 	cmp	r3, r2
    cff0:	21a03002 	movcs	r3, r2
    cff4:	e584302c 	str	r3, [r4, #44]	; 0x2c
    cff8:	e3a02001 	mov	r2, #1
    cffc:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    d000:	e5842030 	str	r2, [r4, #48]	; 0x30
    d004:	e3530000 	cmp	r3, #0
    d008:	1affffbd 	bne	cf04 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xbc>
    d00c:	e30b1428 	movw	r1, #46120	; 0xb428
    d010:	e3401003 	movt	r1, #3
    d014:	e30b04b8 	movw	r0, #46264	; 0xb4b8
    d018:	e3400003 	movt	r0, #3
    d01c:	e3a02088 	mov	r2, #136	; 0x88
    d020:	eb007e26 	bl	2c8c0 <assertion_failed>
    d024:	e5940014 	ldr	r0, [r4, #20]
    d028:	eb0005ca 	bl	e758 <CUSBDevice::GetHubAddress() const>
    d02c:	e3500000 	cmp	r0, #0
    d030:	1affffcb 	bne	cf64 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d034:	e5d4301c 	ldrb	r3, [r4, #28]
    d038:	e3530002 	cmp	r3, #2
    d03c:	0affffc8 	beq	cf64 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d040:	e3a00008 	mov	r0, #8
    d044:	ebfffb39 	bl	bd30 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    d048:	e1a05000 	mov	r5, r0
    d04c:	e5940018 	ldr	r0, [r4, #24]
    d050:	e3500000 	cmp	r0, #0
    d054:	0a000077 	beq	d238 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3f0>
    d058:	eb000bf5 	bl	10034 <CUSBEndpoint::GetType() const>
    d05c:	e2401002 	sub	r1, r0, #2
    d060:	e1a00005 	mov	r0, r5
    d064:	e6ef1071 	uxtb	r1, r1
    d068:	e3510001 	cmp	r1, #1
    d06c:	83a01000 	movhi	r1, #0
    d070:	93a01001 	movls	r1, #1
    d074:	ebfffb26 	bl	bd14 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    d078:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    d07c:	eaffffb8 	b	cf64 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d080:	e3a00018 	mov	r0, #24
    d084:	eb0003ed 	bl	e040 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)>
    d088:	e5d41008 	ldrb	r1, [r4, #8]
    d08c:	e1a05000 	mov	r5, r0
    d090:	eb0003df 	bl	e014 <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)>
    d094:	e59d3014 	ldr	r3, [sp, #20]
    d098:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    d09c:	e3530000 	cmp	r3, #0
    d0a0:	0affffb2 	beq	cf70 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    d0a4:	e5940018 	ldr	r0, [r4, #24]
    d0a8:	eb000be1 	bl	10034 <CUSBEndpoint::GetType() const>
    d0ac:	e3500002 	cmp	r0, #2
    d0b0:	1a000066 	bne	d250 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x408>
    d0b4:	e59d1014 	ldr	r1, [sp, #20]
    d0b8:	e3a03064 	mov	r3, #100	; 0x64
    d0bc:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    d0c0:	e3412062 	movt	r2, #4194	; 0x1062
    d0c4:	e0030193 	mul	r3, r3, r1
    d0c8:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    d0cc:	e0832392 	umull	r2, r3, r2, r3
    d0d0:	e1a03323 	lsr	r3, r3, #6
    d0d4:	e584300c 	str	r3, [r4, #12]
    d0d8:	3a000062 	bcc	d268 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x420>
    d0dc:	eb00a2ad 	bl	35b98 <CTimer::Get()>
    d0e0:	eb009fda 	bl	35050 <CTimer::GetTicks() const>
    d0e4:	e58400c4 	str	r0, [r4, #196]	; 0xc4
    d0e8:	e1a00004 	mov	r0, r4
    d0ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0f0:	eb00250b 	bl	16524 <CUSBRequest::GetSetupData()>
    d0f4:	e3a02008 	mov	r2, #8
    d0f8:	e58400c0 	str	r0, [r4, #192]	; 0xc0
    d0fc:	eaffffa9 	b	cfa8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x160>
    d100:	e3500000 	cmp	r0, #0
    d104:	0a000023 	beq	d198 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x350>
    d108:	eb000bc9 	bl	10034 <CUSBEndpoint::GetType() const>
    d10c:	e3500003 	cmp	r0, #3
    d110:	0a00003e 	beq	d210 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3c8>
    d114:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d118:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    d11c:	e584002c 	str	r0, [r4, #44]	; 0x2c
    d120:	eaffffb5 	b	cffc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b4>
    d124:	e30b1428 	movw	r1, #46120	; 0xb428
    d128:	e3401003 	movt	r1, #3
    d12c:	e30b0440 	movw	r0, #46144	; 0xb440
    d130:	e3400003 	movt	r0, #3
    d134:	e3a02037 	mov	r2, #55	; 0x37
    d138:	eb007de0 	bl	2c8c0 <assertion_failed>
    d13c:	e30b1428 	movw	r1, #46120	; 0xb428
    d140:	e3401003 	movt	r1, #3
    d144:	e30b044c 	movw	r0, #46156	; 0xb44c
    d148:	e3400003 	movt	r0, #3
    d14c:	e3a0203a 	mov	r2, #58	; 0x3a
    d150:	eb007dda 	bl	2c8c0 <assertion_failed>
    d154:	e30b1428 	movw	r1, #46120	; 0xb428
    d158:	e3401003 	movt	r1, #3
    d15c:	e30b0460 	movw	r0, #46176	; 0xb460
    d160:	e3400003 	movt	r0, #3
    d164:	e3a0203c 	mov	r2, #60	; 0x3c
    d168:	eb007dd4 	bl	2c8c0 <assertion_failed>
    d16c:	e30b1428 	movw	r1, #46120	; 0xb428
    d170:	e3401003 	movt	r1, #3
    d174:	e30b04d0 	movw	r0, #46288	; 0xb4d0
    d178:	e3400003 	movt	r0, #3
    d17c:	e3a02089 	mov	r2, #137	; 0x89
    d180:	eb007dce 	bl	2c8c0 <assertion_failed>
    d184:	ebfffa35 	bl	ba60 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    d188:	e1a05000 	mov	r5, r0
    d18c:	ebfffa1f 	bl	ba10 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    d190:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    d194:	eaffff72 	b	cf64 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d198:	e30b1428 	movw	r1, #46120	; 0xb428
    d19c:	e3401003 	movt	r1, #3
    d1a0:	e30b044c 	movw	r0, #46156	; 0xb44c
    d1a4:	e3400003 	movt	r0, #3
    d1a8:	e3002155 	movw	r2, #341	; 0x155
    d1ac:	eb007dc3 	bl	2c8c0 <assertion_failed>
    d1b0:	e5940004 	ldr	r0, [r4, #4]
    d1b4:	eb00251f 	bl	16638 <CUSBRequest::GetNumIsoPackets() const>
    d1b8:	e3500001 	cmp	r0, #1
    d1bc:	1a00002f 	bne	d280 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x438>
    d1c0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    d1c4:	e5943020 	ldr	r3, [r4, #32]
    d1c8:	e1520003 	cmp	r2, r3
    d1cc:	8a000031 	bhi	d298 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x450>
    d1d0:	e5d43008 	ldrb	r3, [r4, #8]
    d1d4:	e2233001 	eor	r3, r3, #1
    d1d8:	e35200bc 	cmp	r2, #188	; 0xbc
    d1dc:	93a03000 	movls	r3, #0
    d1e0:	82033001 	andhi	r3, r3, #1
    d1e4:	e3530000 	cmp	r3, #0
    d1e8:	0584202c 	streq	r2, [r4, #44]	; 0x2c
    d1ec:	128230bb 	addne	r3, r2, #187	; 0xbb
    d1f0:	13a010bc 	movne	r1, #188	; 0xbc
    d1f4:	1304215d 	movwne	r2, #16733	; 0x415d
    d1f8:	134a2e4c 	movtne	r2, #44620	; 0xae4c
    d1fc:	1584102c 	strne	r1, [r4, #44]	; 0x2c
    d200:	10832392 	umullne	r2, r3, r2, r3
    d204:	11a033a3 	lsrne	r3, r3, #7
    d208:	15843028 	strne	r3, [r4, #40]	; 0x28
    d20c:	eaffff79 	b	cff8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b0>
    d210:	e5940004 	ldr	r0, [r4, #4]
    d214:	e1a01005 	mov	r1, r5
    d218:	eb002510 	bl	16660 <CUSBRequest::GetIsoPacketSize(unsigned int) const>
    d21c:	e5943020 	ldr	r3, [r4, #32]
    d220:	e5840024 	str	r0, [r4, #36]	; 0x24
    d224:	e2432001 	sub	r2, r3, #1
    d228:	e0822000 	add	r2, r2, r0
    d22c:	e732f312 	udiv	r2, r2, r3
    d230:	e5842028 	str	r2, [r4, #40]	; 0x28
    d234:	eaffffb8 	b	d11c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d4>
    d238:	e30b1428 	movw	r1, #46120	; 0xb428
    d23c:	e3401003 	movt	r1, #3
    d240:	e30b044c 	movw	r0, #46156	; 0xb44c
    d244:	e3400003 	movt	r0, #3
    d248:	e3a02f53 	mov	r2, #332	; 0x14c
    d24c:	eb007d9b 	bl	2c8c0 <assertion_failed>
    d250:	e30b1428 	movw	r1, #46120	; 0xb428
    d254:	e3401003 	movt	r1, #3
    d258:	e30b04f8 	movw	r0, #46328	; 0xb4f8
    d25c:	e3400003 	movt	r0, #3
    d260:	e3a020a8 	mov	r2, #168	; 0xa8
    d264:	eb007d95 	bl	2c8c0 <assertion_failed>
    d268:	e30b1428 	movw	r1, #46120	; 0xb428
    d26c:	e3401003 	movt	r1, #3
    d270:	e30b052c 	movw	r0, #46380	; 0xb52c
    d274:	e3400003 	movt	r0, #3
    d278:	e3a020ab 	mov	r2, #171	; 0xab
    d27c:	eb007d8f 	bl	2c8c0 <assertion_failed>
    d280:	e30b1428 	movw	r1, #46120	; 0xb428
    d284:	e3401003 	movt	r1, #3
    d288:	e30b0470 	movw	r0, #46192	; 0xb470
    d28c:	e3400003 	movt	r0, #3
    d290:	e3a02056 	mov	r2, #86	; 0x56
    d294:	eb007d89 	bl	2c8c0 <assertion_failed>
    d298:	e30b1428 	movw	r1, #46120	; 0xb428
    d29c:	e3401003 	movt	r1, #3
    d2a0:	e30b0494 	movw	r0, #46228	; 0xb494
    d2a4:	e3400003 	movt	r0, #3
    d2a8:	e3a02057 	mov	r2, #87	; 0x57
    d2ac:	eb007d83 	bl	2c8c0 <assertion_failed>
    d2b0:	00000000 	.word	0x00000000
    d2b4:	00000001 	.word	0x00000001
    d2b8:	00000000 	.word	0x00000000
    d2bc:	00000001 	.word	0x00000001

0000d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    d2c0:	e92d4010 	push	{r4, lr}
    d2c4:	e1a04000 	mov	r4, r0
    d2c8:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
    d2cc:	e3500000 	cmp	r0, #0
    d2d0:	0a000002 	beq	d2e0 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    d2d4:	e5903000 	ldr	r3, [r0]
    d2d8:	e5933004 	ldr	r3, [r3, #4]
    d2dc:	e12fff33 	blx	r3
    d2e0:	e1a00004 	mov	r0, r4
    d2e4:	e8bd8010 	pop	{r4, pc}

0000d2e8 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    d2e8:	e5801000 	str	r1, [r0]
    d2ec:	e12fff1e 	bx	lr

0000d2f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    d2f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2f4:	e1a05001 	mov	r5, r1
    d2f8:	e1a04000 	mov	r4, r0
    d2fc:	e30017dc 	movw	r1, #2012	; 0x7dc
    d300:	e24dd010 	sub	sp, sp, #16
    d304:	e1a07002 	mov	r7, r2
    d308:	e1a06003 	mov	r6, r3
    d30c:	e1150001 	tst	r5, r1
    d310:	e5805044 	str	r5, [r0, #68]	; 0x44
    d314:	0a00000e 	beq	d354 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x64>
    d318:	e3150010 	tst	r5, #16
    d31c:	1a000055 	bne	d478 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d320:	e3150080 	tst	r5, #128	; 0x80
    d324:	0a000003 	beq	d338 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d328:	e5940018 	ldr	r0, [r4, #24]
    d32c:	eb000b40 	bl	10034 <CUSBEndpoint::GetType() const>
    d330:	e3500001 	cmp	r0, #1
    d334:	0a000001 	beq	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x50>
    d338:	e28dd010 	add	sp, sp, #16
    d33c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d340:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d344:	e2833001 	add	r3, r3, #1
    d348:	e5843048 	str	r3, [r4, #72]	; 0x48
    d34c:	e3530008 	cmp	r3, #8
    d350:	8afffff8 	bhi	d338 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d354:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    d358:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    d35c:	e0458007 	sub	r8, r5, r7
    d360:	e0536006 	subs	r6, r3, r6
    d364:	0a000023 	beq	d3f8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x108>
    d368:	e5d43010 	ldrb	r3, [r4, #16]
    d36c:	e3530000 	cmp	r3, #0
    d370:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    d374:	e0833006 	add	r3, r3, r6
    d378:	e5843034 	str	r3, [r4, #52]	; 0x34
    d37c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    d380:	e0836006 	add	r6, r3, r6
    d384:	e58460c0 	str	r6, [r4, #192]	; 0xc0
    d388:	0a00002a 	beq	d438 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x148>
    d38c:	e5d43011 	ldrb	r3, [r4, #17]
    d390:	e3530000 	cmp	r3, #0
    d394:	1a000027 	bne	d438 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x148>
    d398:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d39c:	e1530008 	cmp	r3, r8
    d3a0:	3a00002b 	bcc	d454 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x164>
    d3a4:	e5d42010 	ldrb	r2, [r4, #16]
    d3a8:	e0833007 	add	r3, r3, r7
    d3ac:	e0433005 	sub	r3, r3, r5
    d3b0:	e5843028 	str	r3, [r4, #40]	; 0x28
    d3b4:	e3520000 	cmp	r2, #0
    d3b8:	0a00003d 	beq	d4b4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1c4>
    d3bc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    d3c0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    d3c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d3c8:	e0421003 	sub	r1, r2, r3
    d3cc:	e1510000 	cmp	r1, r0
    d3d0:	2affffd8 	bcs	d338 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d3d4:	e1520003 	cmp	r2, r3
    d3d8:	2584102c 	strcs	r1, [r4, #44]	; 0x2c
    d3dc:	2affffd5 	bcs	d338 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d3e0:	e30b1428 	movw	r1, #46120	; 0xb428
    d3e4:	e3401003 	movt	r1, #3
    d3e8:	e30b0548 	movw	r0, #46408	; 0xb548
    d3ec:	e3400003 	movt	r0, #3
    d3f0:	e3002125 	movw	r2, #293	; 0x125
    d3f4:	eb007d31 	bl	2c8c0 <assertion_failed>
    d3f8:	e3530000 	cmp	r3, #0
    d3fc:	e5d43010 	ldrb	r3, [r4, #16]
    d400:	0affffd9 	beq	d36c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x7c>
    d404:	e3530000 	cmp	r3, #0
    d408:	0a000002 	beq	d418 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x128>
    d40c:	e5d43011 	ldrb	r3, [r4, #17]
    d410:	e3530000 	cmp	r3, #0
    d414:	1a00002f 	bne	d4d8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1e8>
    d418:	e5940018 	ldr	r0, [r4, #24]
    d41c:	e3500000 	cmp	r0, #0
    d420:	0a00004b 	beq	d554 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x264>
    d424:	eb000b02 	bl	10034 <CUSBEndpoint::GetType() const>
    d428:	e3500003 	cmp	r0, #3
    d42c:	0594602c 	ldreq	r6, [r4, #44]	; 0x2c
    d430:	00060896 	muleq	r6, r6, r8
    d434:	eaffffcb 	b	d368 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x78>
    d438:	e5d42009 	ldrb	r2, [r4, #9]
    d43c:	e1a01008 	mov	r1, r8
    d440:	e5940018 	ldr	r0, [r4, #24]
    d444:	eb000b21 	bl	100d0 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    d448:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d44c:	e1530008 	cmp	r3, r8
    d450:	2affffd3 	bcs	d3a4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
    d454:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    d458:	e3a01009 	mov	r1, #9
    d45c:	e3a02000 	mov	r2, #0
    d460:	e5841048 	str	r1, [r4, #72]	; 0x48
    d464:	e3833c02 	orr	r3, r3, #512	; 0x200
    d468:	e5842028 	str	r2, [r4, #40]	; 0x28
    d46c:	e5843044 	str	r3, [r4, #68]	; 0x44
    d470:	e28dd010 	add	sp, sp, #16
    d474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d478:	e5900004 	ldr	r0, [r0, #4]
    d47c:	eb0024a1 	bl	16708 <CUSBRequest::IsCompleteOnNAK() const>
    d480:	e3500000 	cmp	r0, #0
    d484:	0affffa5 	beq	d320 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x30>
    d488:	e5d43008 	ldrb	r3, [r4, #8]
    d48c:	e3530000 	cmp	r3, #0
    d490:	13a03000 	movne	r3, #0
    d494:	15843028 	strne	r3, [r4, #40]	; 0x28
    d498:	1affffa6 	bne	d338 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d49c:	e30b1428 	movw	r1, #46120	; 0xb428
    d4a0:	e3401003 	movt	r1, #3
    d4a4:	e30b0540 	movw	r0, #46400	; 0xb540
    d4a8:	e3400003 	movt	r0, #3
    d4ac:	e3a020d6 	mov	r2, #214	; 0xd6
    d4b0:	eb007d02 	bl	2c8c0 <assertion_failed>
    d4b4:	e5940018 	ldr	r0, [r4, #24]
    d4b8:	e3500000 	cmp	r0, #0
    d4bc:	0a000024 	beq	d554 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x264>
    d4c0:	eb000adb 	bl	10034 <CUSBEndpoint::GetType() const>
    d4c4:	e3500003 	cmp	r0, #3
    d4c8:	0a00000b 	beq	d4fc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x20c>
    d4cc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d4d0:	e5843030 	str	r3, [r4, #48]	; 0x30
    d4d4:	eaffffb8 	b	d3bc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xcc>
    d4d8:	e5942020 	ldr	r2, [r4, #32]
    d4dc:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d4e0:	e0020892 	mul	r2, r2, r8
    d4e4:	e0811002 	add	r1, r1, r2
    d4e8:	e5841034 	str	r1, [r4, #52]	; 0x34
    d4ec:	e59410c0 	ldr	r1, [r4, #192]	; 0xc0
    d4f0:	e0812002 	add	r2, r1, r2
    d4f4:	e58420c0 	str	r2, [r4, #192]	; 0xc0
    d4f8:	eaffffa4 	b	d390 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xa0>
    d4fc:	e5945038 	ldr	r5, [r4, #56]	; 0x38
    d500:	e5940004 	ldr	r0, [r4, #4]
    d504:	e2855001 	add	r5, r5, #1
    d508:	e5845038 	str	r5, [r4, #56]	; 0x38
    d50c:	eb002449 	bl	16638 <CUSBRequest::GetNumIsoPackets() const>
    d510:	e1550000 	cmp	r5, r0
    d514:	2affff87 	bcs	d338 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d518:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    d51c:	e2844024 	add	r4, r4, #36	; 0x24
    d520:	e5140020 	ldr	r0, [r4, #-32]	; 0xffffffe0
    d524:	eb00244d 	bl	16660 <CUSBRequest::GetIsoPacketSize(unsigned int) const>
    d528:	e5142004 	ldr	r2, [r4, #-4]
    d52c:	e58d0000 	str	r0, [sp]
    d530:	e2423001 	sub	r3, r2, #1
    d534:	e58d0008 	str	r0, [sp, #8]
    d538:	e0833000 	add	r3, r3, r0
    d53c:	e733f213 	udiv	r3, r3, r2
    d540:	e58d3004 	str	r3, [sp, #4]
    d544:	e58d300c 	str	r3, [sp, #12]
    d548:	f46d0adf 	vld1.64	{d16-d17}, [sp :64]
    d54c:	f4440a8f 	vst1.32	{d16-d17}, [r4]
    d550:	eaffff78 	b	d338 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d554:	e30b1428 	movw	r1, #46120	; 0xb428
    d558:	e3401003 	movt	r1, #3
    d55c:	e30b044c 	movw	r0, #46156	; 0xb44c
    d560:	e3400003 	movt	r0, #3
    d564:	e3002155 	movw	r2, #341	; 0x155
    d568:	eb007cd4 	bl	2c8c0 <assertion_failed>

0000d56c <CDWHCITransferStageData::SetSplitComplete(bool)>:
    d56c:	e5d03010 	ldrb	r3, [r0, #16]
    d570:	e3530000 	cmp	r3, #0
    d574:	0a000001 	beq	d580 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    d578:	e5c01011 	strb	r1, [r0, #17]
    d57c:	e12fff1e 	bx	lr
    d580:	e30b1428 	movw	r1, #46120	; 0xb428
    d584:	e3401003 	movt	r1, #3
    d588:	e30b0574 	movw	r0, #46452	; 0xb574
    d58c:	e3400003 	movt	r0, #3
    d590:	e3a02f4b 	mov	r2, #300	; 0x12c
    d594:	e92d4010 	push	{r4, lr}
    d598:	eb007cc8 	bl	2c8c0 <assertion_failed>

0000d59c <CDWHCITransferStageData::SetState(unsigned int)>:
    d59c:	e580103c 	str	r1, [r0, #60]	; 0x3c
    d5a0:	e12fff1e 	bx	lr

0000d5a4 <CDWHCITransferStageData::GetState() const>:
    d5a4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    d5a8:	e12fff1e 	bx	lr

0000d5ac <CDWHCITransferStageData::SetSubState(unsigned int)>:
    d5ac:	e5801040 	str	r1, [r0, #64]	; 0x40
    d5b0:	e12fff1e 	bx	lr

0000d5b4 <CDWHCITransferStageData::GetSubState() const>:
    d5b4:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    d5b8:	e12fff1e 	bx	lr

0000d5bc <CDWHCITransferStageData::GetChannelNumber() const>:
    d5bc:	e5900000 	ldr	r0, [r0]
    d5c0:	e12fff1e 	bx	lr

0000d5c4 <CDWHCITransferStageData::IsPeriodic() const>:
    d5c4:	e5900018 	ldr	r0, [r0, #24]
    d5c8:	e92d4010 	push	{r4, lr}
    d5cc:	e3500000 	cmp	r0, #0
    d5d0:	0a000006 	beq	d5f0 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    d5d4:	eb000a96 	bl	10034 <CUSBEndpoint::GetType() const>
    d5d8:	e2400002 	sub	r0, r0, #2
    d5dc:	e6ef0070 	uxtb	r0, r0
    d5e0:	e3500001 	cmp	r0, #1
    d5e4:	83a00000 	movhi	r0, #0
    d5e8:	93a00001 	movls	r0, #1
    d5ec:	e8bd8010 	pop	{r4, pc}
    d5f0:	e30b1428 	movw	r1, #46120	; 0xb428
    d5f4:	e3401003 	movt	r1, #3
    d5f8:	e30b044c 	movw	r0, #46156	; 0xb44c
    d5fc:	e3400003 	movt	r0, #3
    d600:	e3a02f53 	mov	r2, #332	; 0x14c
    d604:	eb007cad 	bl	2c8c0 <assertion_failed>

0000d608 <CDWHCITransferStageData::IsIsochronous() const>:
    d608:	e5900018 	ldr	r0, [r0, #24]
    d60c:	e92d4010 	push	{r4, lr}
    d610:	e3500000 	cmp	r0, #0
    d614:	0a000004 	beq	d62c <CDWHCITransferStageData::IsIsochronous() const+0x24>
    d618:	eb000a85 	bl	10034 <CUSBEndpoint::GetType() const>
    d61c:	e2400003 	sub	r0, r0, #3
    d620:	e16f0f10 	clz	r0, r0
    d624:	e1a002a0 	lsr	r0, r0, #5
    d628:	e8bd8010 	pop	{r4, pc}
    d62c:	e30b1428 	movw	r1, #46120	; 0xb428
    d630:	e3401003 	movt	r1, #3
    d634:	e30b044c 	movw	r0, #46156	; 0xb44c
    d638:	e3400003 	movt	r0, #3
    d63c:	e3002155 	movw	r2, #341	; 0x155
    d640:	eb007c9e 	bl	2c8c0 <assertion_failed>

0000d644 <CDWHCITransferStageData::GetDeviceAddress() const>:
    d644:	e5900014 	ldr	r0, [r0, #20]
    d648:	e3500000 	cmp	r0, #0
    d64c:	0a000000 	beq	d654 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    d650:	ea00043a 	b	e740 <CUSBDevice::GetAddress() const>
    d654:	e30b1428 	movw	r1, #46120	; 0xb428
    d658:	e3401003 	movt	r1, #3
    d65c:	e30b0460 	movw	r0, #46176	; 0xb460
    d660:	e3400003 	movt	r0, #3
    d664:	e92d4010 	push	{r4, lr}
    d668:	e300215d 	movw	r2, #349	; 0x15d
    d66c:	eb007c93 	bl	2c8c0 <assertion_failed>

0000d670 <CDWHCITransferStageData::GetEndpointType() const>:
    d670:	e5900018 	ldr	r0, [r0, #24]
    d674:	e92d4010 	push	{r4, lr}
    d678:	e3500000 	cmp	r0, #0
    d67c:	0a000006 	beq	d69c <CDWHCITransferStageData::GetEndpointType() const+0x2c>
    d680:	eb000a6b 	bl	10034 <CUSBEndpoint::GetType() const>
    d684:	e3500003 	cmp	r0, #3
    d688:	8a000009 	bhi	d6b4 <CDWHCITransferStageData::GetEndpointType() const+0x44>
    d68c:	e30b35e8 	movw	r3, #46568	; 0xb5e8
    d690:	e3403003 	movt	r3, #3
    d694:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
    d698:	e8bd8010 	pop	{r4, pc}
    d69c:	e30b1428 	movw	r1, #46120	; 0xb428
    d6a0:	e3401003 	movt	r1, #3
    d6a4:	e30b044c 	movw	r0, #46156	; 0xb44c
    d6a8:	e3400003 	movt	r0, #3
    d6ac:	e3002163 	movw	r2, #355	; 0x163
    d6b0:	eb007c82 	bl	2c8c0 <assertion_failed>
    d6b4:	e30b1428 	movw	r1, #46120	; 0xb428
    d6b8:	e3401003 	movt	r1, #3
    d6bc:	e30b0708 	movw	r0, #46856	; 0xb708
    d6c0:	e3400003 	movt	r0, #3
    d6c4:	e300217a 	movw	r2, #378	; 0x17a
    d6c8:	eb007c7c 	bl	2c8c0 <assertion_failed>

0000d6cc <CDWHCITransferStageData::GetEndpointNumber() const>:
    d6cc:	e5900018 	ldr	r0, [r0, #24]
    d6d0:	e3500000 	cmp	r0, #0
    d6d4:	0a000000 	beq	d6dc <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    d6d8:	ea000a53 	b	1002c <CUSBEndpoint::GetNumber() const>
    d6dc:	e30b1428 	movw	r1, #46120	; 0xb428
    d6e0:	e3401003 	movt	r1, #3
    d6e4:	e30b044c 	movw	r0, #46156	; 0xb44c
    d6e8:	e3400003 	movt	r0, #3
    d6ec:	e92d4010 	push	{r4, lr}
    d6f0:	e3002183 	movw	r2, #387	; 0x183
    d6f4:	eb007c71 	bl	2c8c0 <assertion_failed>

0000d6f8 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d6f8:	e5900020 	ldr	r0, [r0, #32]
    d6fc:	e12fff1e 	bx	lr

0000d700 <CDWHCITransferStageData::GetSpeed() const>:
    d700:	e5d0001c 	ldrb	r0, [r0, #28]
    d704:	e12fff1e 	bx	lr

0000d708 <CDWHCITransferStageData::GetPID() const>:
    d708:	e1a03000 	mov	r3, r0
    d70c:	e5900018 	ldr	r0, [r0, #24]
    d710:	e92d4010 	push	{r4, lr}
    d714:	e3500000 	cmp	r0, #0
    d718:	0a000008 	beq	d740 <CDWHCITransferStageData::GetPID() const+0x38>
    d71c:	e5d31009 	ldrb	r1, [r3, #9]
    d720:	eb000a5a 	bl	10090 <CUSBEndpoint::GetNextPID(bool)>
    d724:	e3500002 	cmp	r0, #2
    d728:	8a00000a 	bhi	d758 <CDWHCITransferStageData::GetPID() const+0x50>
    d72c:	e30b35e8 	movw	r3, #46568	; 0xb5e8
    d730:	e3403003 	movt	r3, #3
    d734:	e0833000 	add	r3, r3, r0
    d738:	e5d30010 	ldrb	r0, [r3, #16]
    d73c:	e8bd8010 	pop	{r4, pc}
    d740:	e30b1428 	movw	r1, #46120	; 0xb428
    d744:	e3401003 	movt	r1, #3
    d748:	e30b044c 	movw	r0, #46156	; 0xb44c
    d74c:	e3400003 	movt	r0, #3
    d750:	e3002193 	movw	r2, #403	; 0x193
    d754:	eb007c59 	bl	2c8c0 <assertion_failed>
    d758:	e30b1428 	movw	r1, #46120	; 0xb428
    d75c:	e3401003 	movt	r1, #3
    d760:	e30b0708 	movw	r0, #46856	; 0xb708
    d764:	e3400003 	movt	r0, #3
    d768:	e30021a6 	movw	r2, #422	; 0x1a6
    d76c:	eb007c53 	bl	2c8c0 <assertion_failed>

0000d770 <CDWHCITransferStageData::IsDirectionIn() const>:
    d770:	e5d00008 	ldrb	r0, [r0, #8]
    d774:	e12fff1e 	bx	lr

0000d778 <CDWHCITransferStageData::IsStatusStage() const>:
    d778:	e5d00009 	ldrb	r0, [r0, #9]
    d77c:	e12fff1e 	bx	lr

0000d780 <CDWHCITransferStageData::GetDMAAddress() const>:
    d780:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    d784:	e3500000 	cmp	r0, #0
    d788:	112fff1e 	bxne	lr
    d78c:	e30b1428 	movw	r1, #46120	; 0xb428
    d790:	e3401003 	movt	r1, #3
    d794:	e30b04b8 	movw	r0, #46264	; 0xb4b8
    d798:	e3400003 	movt	r0, #3
    d79c:	e92d4010 	push	{r4, lr}
    d7a0:	e30021b9 	movw	r2, #441	; 0x1b9
    d7a4:	eb007c45 	bl	2c8c0 <assertion_failed>

0000d7a8 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d7a8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d7ac:	e12fff1e 	bx	lr

0000d7b0 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d7b0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    d7b4:	e12fff1e 	bx	lr

0000d7b8 <CDWHCITransferStageData::IsSplit() const>:
    d7b8:	e5d00010 	ldrb	r0, [r0, #16]
    d7bc:	e12fff1e 	bx	lr

0000d7c0 <CDWHCITransferStageData::IsSplitComplete() const>:
    d7c0:	e5d03010 	ldrb	r3, [r0, #16]
    d7c4:	e3530000 	cmp	r3, #0
    d7c8:	0a000001 	beq	d7d4 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    d7cc:	e5d00011 	ldrb	r0, [r0, #17]
    d7d0:	e12fff1e 	bx	lr
    d7d4:	e30b1428 	movw	r1, #46120	; 0xb428
    d7d8:	e3401003 	movt	r1, #3
    d7dc:	e30b0574 	movw	r0, #46452	; 0xb574
    d7e0:	e3400003 	movt	r0, #3
    d7e4:	e92d4010 	push	{r4, lr}
    d7e8:	e30021cf 	movw	r2, #463	; 0x1cf
    d7ec:	eb007c33 	bl	2c8c0 <assertion_failed>

0000d7f0 <CDWHCITransferStageData::GetHubAddress() const>:
    d7f0:	e5d03010 	ldrb	r3, [r0, #16]
    d7f4:	e92d4010 	push	{r4, lr}
    d7f8:	e3530000 	cmp	r3, #0
    d7fc:	0a000004 	beq	d814 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    d800:	e5900014 	ldr	r0, [r0, #20]
    d804:	e3500000 	cmp	r0, #0
    d808:	0a000007 	beq	d82c <CDWHCITransferStageData::GetHubAddress() const+0x3c>
    d80c:	e8bd4010 	pop	{r4, lr}
    d810:	ea0003d0 	b	e758 <CUSBDevice::GetHubAddress() const>
    d814:	e30b1428 	movw	r1, #46120	; 0xb428
    d818:	e3401003 	movt	r1, #3
    d81c:	e30b0574 	movw	r0, #46452	; 0xb574
    d820:	e3400003 	movt	r0, #3
    d824:	e30021d6 	movw	r2, #470	; 0x1d6
    d828:	eb007c24 	bl	2c8c0 <assertion_failed>
    d82c:	e30b1428 	movw	r1, #46120	; 0xb428
    d830:	e3401003 	movt	r1, #3
    d834:	e30b0460 	movw	r0, #46176	; 0xb460
    d838:	e3400003 	movt	r0, #3
    d83c:	e3a02f76 	mov	r2, #472	; 0x1d8
    d840:	eb007c1e 	bl	2c8c0 <assertion_failed>

0000d844 <CDWHCITransferStageData::GetHubPortAddress() const>:
    d844:	e5d03010 	ldrb	r3, [r0, #16]
    d848:	e92d4010 	push	{r4, lr}
    d84c:	e3530000 	cmp	r3, #0
    d850:	0a000004 	beq	d868 <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    d854:	e5900014 	ldr	r0, [r0, #20]
    d858:	e3500000 	cmp	r0, #0
    d85c:	0a000007 	beq	d880 <CDWHCITransferStageData::GetHubPortAddress() const+0x3c>
    d860:	e8bd4010 	pop	{r4, lr}
    d864:	ea0003bd 	b	e760 <CUSBDevice::GetHubPortNumber() const>
    d868:	e30b1428 	movw	r1, #46120	; 0xb428
    d86c:	e3401003 	movt	r1, #3
    d870:	e30b0574 	movw	r0, #46452	; 0xb574
    d874:	e3400003 	movt	r0, #3
    d878:	e30021de 	movw	r2, #478	; 0x1de
    d87c:	eb007c0f 	bl	2c8c0 <assertion_failed>
    d880:	e30b1428 	movw	r1, #46120	; 0xb428
    d884:	e3401003 	movt	r1, #3
    d888:	e30b0460 	movw	r0, #46176	; 0xb460
    d88c:	e3400003 	movt	r0, #3
    d890:	e3a02e1e 	mov	r2, #480	; 0x1e0
    d894:	eb007c09 	bl	2c8c0 <assertion_failed>

0000d898 <CDWHCITransferStageData::GetSplitPosition() const>:
    d898:	e5d03010 	ldrb	r3, [r0, #16]
    d89c:	e3530000 	cmp	r3, #0
    d8a0:	1a000001 	bne	d8ac <CDWHCITransferStageData::GetSplitPosition() const+0x14>
    d8a4:	e3a00003 	mov	r0, #3
    d8a8:	e12fff1e 	bx	lr
    d8ac:	e92d4010 	push	{r4, lr}
    d8b0:	e1a04000 	mov	r4, r0
    d8b4:	e5900018 	ldr	r0, [r0, #24]
    d8b8:	e3500000 	cmp	r0, #0
    d8bc:	0a00000f 	beq	d900 <CDWHCITransferStageData::GetSplitPosition() const+0x68>
    d8c0:	eb0009db 	bl	10034 <CUSBEndpoint::GetType() const>
    d8c4:	e3500003 	cmp	r0, #3
    d8c8:	1a00000a 	bne	d8f8 <CDWHCITransferStageData::GetSplitPosition() const+0x60>
    d8cc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d8d0:	e35300bc 	cmp	r3, #188	; 0xbc
    d8d4:	9a000007 	bls	d8f8 <CDWHCITransferStageData::GetSplitPosition() const+0x60>
    d8d8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    d8dc:	e3530000 	cmp	r3, #0
    d8e0:	0a00000c 	beq	d918 <CDWHCITransferStageData::GetSplitPosition() const+0x80>
    d8e4:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    d8e8:	e3500001 	cmp	r0, #1
    d8ec:	83a00000 	movhi	r0, #0
    d8f0:	93a00001 	movls	r0, #1
    d8f4:	e8bd8010 	pop	{r4, pc}
    d8f8:	e3a00003 	mov	r0, #3
    d8fc:	e8bd8010 	pop	{r4, pc}
    d900:	e30b1428 	movw	r1, #46120	; 0xb428
    d904:	e3401003 	movt	r1, #3
    d908:	e30b044c 	movw	r0, #46156	; 0xb44c
    d90c:	e3400003 	movt	r0, #3
    d910:	e3002155 	movw	r2, #341	; 0x155
    d914:	eb007be9 	bl	2c8c0 <assertion_failed>
    d918:	e3a00002 	mov	r0, #2
    d91c:	e8bd8010 	pop	{r4, pc}

0000d920 <CDWHCITransferStageData::GetStatusMask() const>:
    d920:	e5d03010 	ldrb	r3, [r0, #16]
    d924:	e3530000 	cmp	r3, #0
    d928:	0a000001 	beq	d934 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    d92c:	e30007ff 	movw	r0, #2047	; 0x7ff
    d930:	e12fff1e 	bx	lr
    d934:	e5900018 	ldr	r0, [r0, #24]
    d938:	e92d4010 	push	{r4, lr}
    d93c:	e3500000 	cmp	r0, #0
    d940:	0a000006 	beq	d960 <CDWHCITransferStageData::GetStatusMask() const+0x40>
    d944:	eb0009ba 	bl	10034 <CUSBEndpoint::GetType() const>
    d948:	e2400002 	sub	r0, r0, #2
    d94c:	e6ef0070 	uxtb	r0, r0
    d950:	e3500001 	cmp	r0, #1
    d954:	930007ff 	movwls	r0, #2047	; 0x7ff
    d958:	8300078f 	movwhi	r0, #1935	; 0x78f
    d95c:	e8bd8010 	pop	{r4, pc}
    d960:	e30b1428 	movw	r1, #46120	; 0xb428
    d964:	e3401003 	movt	r1, #3
    d968:	e30b044c 	movw	r0, #46156	; 0xb44c
    d96c:	e3400003 	movt	r0, #3
    d970:	e3a02f53 	mov	r2, #332	; 0x14c
    d974:	eb007bd1 	bl	2c8c0 <assertion_failed>

0000d978 <CDWHCITransferStageData::GetTransactionStatus() const>:
    d978:	e5900044 	ldr	r0, [r0, #68]	; 0x44
    d97c:	e3500000 	cmp	r0, #0
    d980:	112fff1e 	bxne	lr
    d984:	e30b1428 	movw	r1, #46120	; 0xb428
    d988:	e3401003 	movt	r1, #3
    d98c:	e30b0588 	movw	r0, #46472	; 0xb588
    d990:	e3400003 	movt	r0, #3
    d994:	e92d4010 	push	{r4, lr}
    d998:	e300220f 	movw	r2, #527	; 0x20f
    d99c:	eb007bc7 	bl	2c8c0 <assertion_failed>

0000d9a0 <CDWHCITransferStageData::GetUSBError() const>:
    d9a0:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    d9a4:	e3130008 	tst	r3, #8
    d9a8:	1a00000d 	bne	d9e4 <CDWHCITransferStageData::GetUSBError() const+0x44>
    d9ac:	e3130080 	tst	r3, #128	; 0x80
    d9b0:	1a000009 	bne	d9dc <CDWHCITransferStageData::GetUSBError() const+0x3c>
    d9b4:	e3130c01 	tst	r3, #256	; 0x100
    d9b8:	1a00000b 	bne	d9ec <CDWHCITransferStageData::GetUSBError() const+0x4c>
    d9bc:	e3130c02 	tst	r3, #512	; 0x200
    d9c0:	1a00000b 	bne	d9f4 <CDWHCITransferStageData::GetUSBError() const+0x54>
    d9c4:	e3130b01 	tst	r3, #1024	; 0x400
    d9c8:	1a00000b 	bne	d9fc <CDWHCITransferStageData::GetUSBError() const+0x5c>
    d9cc:	e3130004 	tst	r3, #4
    d9d0:	13a00005 	movne	r0, #5
    d9d4:	03a00009 	moveq	r0, #9
    d9d8:	e12fff1e 	bx	lr
    d9dc:	e3a00001 	mov	r0, #1
    d9e0:	e12fff1e 	bx	lr
    d9e4:	e3a00000 	mov	r0, #0
    d9e8:	e12fff1e 	bx	lr
    d9ec:	e3a00002 	mov	r0, #2
    d9f0:	e12fff1e 	bx	lr
    d9f4:	e3a00003 	mov	r0, #3
    d9f8:	e12fff1e 	bx	lr
    d9fc:	e3a00004 	mov	r0, #4
    da00:	e12fff1e 	bx	lr

0000da04 <CDWHCITransferStageData::IsStageComplete() const>:
    da04:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    da08:	e16f0f10 	clz	r0, r0
    da0c:	e1a002a0 	lsr	r0, r0, #5
    da10:	e12fff1e 	bx	lr

0000da14 <CDWHCITransferStageData::GetResultLen() const>:
    da14:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    da18:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    da1c:	e1520000 	cmp	r2, r0
    da20:	31a00002 	movcc	r0, r2
    da24:	e12fff1e 	bx	lr

0000da28 <CDWHCITransferStageData::IsTimeout() const>:
    da28:	e92d4010 	push	{r4, lr}
    da2c:	e1a04000 	mov	r4, r0
    da30:	e590000c 	ldr	r0, [r0, #12]
    da34:	e3500000 	cmp	r0, #0
    da38:	08bd8010 	popeq	{r4, pc}
    da3c:	eb00a055 	bl	35b98 <CTimer::Get()>
    da40:	eb009d82 	bl	35050 <CTimer::GetTicks() const>
    da44:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
    da48:	e594300c 	ldr	r3, [r4, #12]
    da4c:	e0400002 	sub	r0, r0, r2
    da50:	e1500003 	cmp	r0, r3
    da54:	33a00000 	movcc	r0, #0
    da58:	23a00001 	movcs	r0, #1
    da5c:	e8bd8010 	pop	{r4, pc}

0000da60 <CDWHCITransferStageData::IsRetryOK() const>:
    da60:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    da64:	e3500008 	cmp	r0, #8
    da68:	83a00000 	movhi	r0, #0
    da6c:	93a00001 	movls	r0, #1
    da70:	e12fff1e 	bx	lr

0000da74 <CDWHCITransferStageData::GetURB() const>:
    da74:	e5900004 	ldr	r0, [r0, #4]
    da78:	e3500000 	cmp	r0, #0
    da7c:	112fff1e 	bxne	lr
    da80:	e30b1428 	movw	r1, #46120	; 0xb428
    da84:	e3401003 	movt	r1, #3
    da88:	e30b0440 	movw	r0, #46144	; 0xb440
    da8c:	e3400003 	movt	r0, #3
    da90:	e92d4010 	push	{r4, lr}
    da94:	e3002256 	movw	r2, #598	; 0x256
    da98:	eb007b88 	bl	2c8c0 <assertion_failed>

0000da9c <CDWHCITransferStageData::GetDevice() const>:
    da9c:	e5900014 	ldr	r0, [r0, #20]
    daa0:	e3500000 	cmp	r0, #0
    daa4:	112fff1e 	bxne	lr
    daa8:	e30b1428 	movw	r1, #46120	; 0xb428
    daac:	e3401003 	movt	r1, #3
    dab0:	e30b0460 	movw	r0, #46176	; 0xb460
    dab4:	e3400003 	movt	r0, #3
    dab8:	e3a02f97 	mov	r2, #604	; 0x25c
    dabc:	e92d4010 	push	{r4, lr}
    dac0:	eb007b7e 	bl	2c8c0 <assertion_failed>

0000dac4 <CDWHCITransferStageData::GetFrameScheduler() const>:
    dac4:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
    dac8:	e12fff1e 	bx	lr

0000dacc <CDWHCITransferStageData::operator new(unsigned int)>:
    dacc:	e3500c01 	cmp	r0, #256	; 0x100
    dad0:	e92d4010 	push	{r4, lr}
    dad4:	1a000006 	bne	daf4 <CDWHCITransferStageData::operator new(unsigned int)+0x28>
    dad8:	e3043e64 	movw	r3, #20068	; 0x4e64
    dadc:	e3403004 	movt	r3, #4
    dae0:	e5930000 	ldr	r0, [r3]
    dae4:	e3500000 	cmp	r0, #0
    dae8:	0a000007 	beq	db0c <CDWHCITransferStageData::operator new(unsigned int)+0x40>
    daec:	e8bd4010 	pop	{r4, lr}
    daf0:	ea007cbb 	b	2cde4 <CClassAllocator::Allocate()>
    daf4:	e30b1428 	movw	r1, #46120	; 0xb428
    daf8:	e3401003 	movt	r1, #3
    dafc:	e30b05a4 	movw	r0, #46500	; 0xb5a4
    db00:	e3400003 	movt	r0, #3
    db04:	e3002265 	movw	r2, #613	; 0x265
    db08:	eb007b6c 	bl	2c8c0 <assertion_failed>
    db0c:	e30b1428 	movw	r1, #46120	; 0xb428
    db10:	e3401003 	movt	r1, #3
    db14:	e30b0048 	movw	r0, #45128	; 0xb048
    db18:	e3400003 	movt	r0, #3
    db1c:	e3002265 	movw	r2, #613	; 0x265
    db20:	eb007b66 	bl	2c8c0 <assertion_failed>

0000db24 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    db24:	e3510c01 	cmp	r1, #256	; 0x100
    db28:	e92d4010 	push	{r4, lr}
    db2c:	1a000008 	bne	db54 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x30>
    db30:	e3042e64 	movw	r2, #20068	; 0x4e64
    db34:	e3402004 	movt	r2, #4
    db38:	e1a03000 	mov	r3, r0
    db3c:	e5920000 	ldr	r0, [r2]
    db40:	e3500000 	cmp	r0, #0
    db44:	0a000008 	beq	db6c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
    db48:	e8bd4010 	pop	{r4, lr}
    db4c:	e1a01003 	mov	r1, r3
    db50:	ea007cde 	b	2ced0 <CClassAllocator::Free(void*)>
    db54:	e30b1428 	movw	r1, #46120	; 0xb428
    db58:	e3401003 	movt	r1, #3
    db5c:	e30b05a4 	movw	r0, #46500	; 0xb5a4
    db60:	e3400003 	movt	r0, #3
    db64:	e3002265 	movw	r2, #613	; 0x265
    db68:	eb007b54 	bl	2c8c0 <assertion_failed>
    db6c:	e30b1428 	movw	r1, #46120	; 0xb428
    db70:	e3401003 	movt	r1, #3
    db74:	e30b0048 	movw	r0, #45128	; 0xb048
    db78:	e3400003 	movt	r0, #3
    db7c:	e3002265 	movw	r2, #613	; 0x265
    db80:	eb007b4e 	bl	2c8c0 <assertion_failed>

0000db84 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    db84:	e92d4070 	push	{r4, r5, r6, lr}
    db88:	e3044e64 	movw	r4, #20068	; 0x4e64
    db8c:	e3404004 	movt	r4, #4
    db90:	e5943000 	ldr	r3, [r4]
    db94:	e3530000 	cmp	r3, #0
    db98:	1a00000a 	bne	dbc8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x44>
    db9c:	e1a05000 	mov	r5, r0
    dba0:	e3a00020 	mov	r0, #32
    dba4:	eb00a43c 	bl	36c9c <operator new(unsigned int)>
    dba8:	e1a02005 	mov	r2, r5
    dbac:	e3a01c01 	mov	r1, #256	; 0x100
    dbb0:	e30b35d0 	movw	r3, #46544	; 0xb5d0
    dbb4:	e3403003 	movt	r3, #3
    dbb8:	e1a05000 	mov	r5, r0
    dbbc:	eb007c2a 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    dbc0:	e5845000 	str	r5, [r4]
    dbc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dbc8:	e30b1428 	movw	r1, #46120	; 0xb428
    dbcc:	e3401003 	movt	r1, #3
    dbd0:	e30b0090 	movw	r0, #45200	; 0xb090
    dbd4:	e3400003 	movt	r0, #3
    dbd8:	e3002265 	movw	r2, #613	; 0x265
    dbdc:	eb007b37 	bl	2c8c0 <assertion_failed>

0000dbe0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    dbe0:	e92d4070 	push	{r4, r5, r6, lr}
    dbe4:	e3044e64 	movw	r4, #20068	; 0x4e64
    dbe8:	e3404004 	movt	r4, #4
    dbec:	e1a05000 	mov	r5, r0
    dbf0:	e24dd008 	sub	sp, sp, #8
    dbf4:	e1a06001 	mov	r6, r1
    dbf8:	e5940000 	ldr	r0, [r4]
    dbfc:	e3500000 	cmp	r0, #0
    dc00:	0a000004 	beq	dc18 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    dc04:	e1a02001 	mov	r2, r1
    dc08:	e1a01005 	mov	r1, r5
    dc0c:	e28dd008 	add	sp, sp, #8
    dc10:	e8bd4070 	pop	{r4, r5, r6, lr}
    dc14:	ea007c2e 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
    dc18:	e3a00020 	mov	r0, #32
    dc1c:	eb00a41e 	bl	36c9c <operator new(unsigned int)>
    dc20:	e1a02005 	mov	r2, r5
    dc24:	e1a03006 	mov	r3, r6
    dc28:	e3a01c01 	mov	r1, #256	; 0x100
    dc2c:	e30bc5d0 	movw	ip, #46544	; 0xb5d0
    dc30:	e340c003 	movt	ip, #3
    dc34:	e58dc000 	str	ip, [sp]
    dc38:	e1a05000 	mov	r5, r0
    dc3c:	eb007c16 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    dc40:	e5845000 	str	r5, [r4]
    dc44:	e28dd008 	add	sp, sp, #8
    dc48:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dc4c <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()>:
    dc4c:	e12fff1e 	bx	lr

0000dc50 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()>:
    dc50:	e5903008 	ldr	r3, [r0, #8]
    dc54:	e92d4010 	push	{r4, lr}
    dc58:	e3530005 	cmp	r3, #5
    dc5c:	0a000013 	beq	dcb0 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x60>
    dc60:	8a00000d 	bhi	dc9c <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x4c>
    dc64:	e3530002 	cmp	r3, #2
    dc68:	1a000025 	bne	dd04 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0xb4>
    dc6c:	e1d011b0 	ldrh	r1, [r0, #16]
    dc70:	e3a0c004 	mov	ip, #4
    dc74:	e3a02000 	mov	r2, #0
    dc78:	e1c030bc 	strh	r3, [r0, #12]
    dc7c:	e3510901 	cmp	r1, #16384	; 0x4000
    dc80:	e580c008 	str	ip, [r0, #8]
    dc84:	13a03001 	movne	r3, #1
    dc88:	e5c0200e 	strb	r2, [r0, #14]
    dc8c:	15803014 	strne	r3, [r0, #20]
    dc90:	0a000015 	beq	dcec <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x9c>
    dc94:	e3a00001 	mov	r0, #1
    dc98:	e8bd8010 	pop	{r4, pc}
    dc9c:	e2433006 	sub	r3, r3, #6
    dca0:	e3530001 	cmp	r3, #1
    dca4:	8a000016 	bhi	dd04 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0xb4>
    dca8:	e3a00000 	mov	r0, #0
    dcac:	e8bd8010 	pop	{r4, pc}
    dcb0:	e1d0c1b0 	ldrh	ip, [r0, #16]
    dcb4:	e3a01004 	mov	r1, #4
    dcb8:	e3a02002 	mov	r2, #2
    dcbc:	e3a03000 	mov	r3, #0
    dcc0:	e35c0901 	cmp	ip, #16384	; 0x4000
    dcc4:	e5801008 	str	r1, [r0, #8]
    dcc8:	e1c020bc 	strh	r2, [r0, #12]
    dccc:	e5c0300e 	strb	r3, [r0, #14]
    dcd0:	1affffef 	bne	dc94 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x44>
    dcd4:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    dcd8:	e3401003 	movt	r1, #3
    dcdc:	e30b0194 	movw	r0, #45460	; 0xb194
    dce0:	e3400003 	movt	r0, #3
    dce4:	e3a0206e 	mov	r2, #110	; 0x6e
    dce8:	eb007af4 	bl	2c8c0 <assertion_failed>
    dcec:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    dcf0:	e3401003 	movt	r1, #3
    dcf4:	e30b0194 	movw	r0, #45460	; 0xb194
    dcf8:	e3400003 	movt	r0, #3
    dcfc:	e3a02061 	mov	r2, #97	; 0x61
    dd00:	eb007aee 	bl	2c8c0 <assertion_failed>
    dd04:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    dd08:	e3401003 	movt	r1, #3
    dd0c:	e30b0708 	movw	r0, #46856	; 0xb708
    dd10:	e3400003 	movt	r0, #3
    dd14:	e3a02073 	mov	r2, #115	; 0x73
    dd18:	eb007ae8 	bl	2c8c0 <assertion_failed>

0000dd1c <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)>:
    dd1c:	e5903008 	ldr	r3, [r0, #8]
    dd20:	e92d4010 	push	{r4, lr}
    dd24:	e3530004 	cmp	r3, #4
    dd28:	0a000008 	beq	dd50 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x34>
    dd2c:	8a000001 	bhi	dd38 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x1c>
    dd30:	e3d33002 	bics	r3, r3, #2
    dd34:	1a000013 	bne	dd88 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x6c>
    dd38:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    dd3c:	e3401003 	movt	r1, #3
    dd40:	e30b0708 	movw	r0, #46856	; 0xb708
    dd44:	e3400003 	movt	r0, #3
    dd48:	e3a0209c 	mov	r2, #156	; 0x9c
    dd4c:	eb007adb 	bl	2c8c0 <assertion_failed>
    dd50:	e3110010 	tst	r1, #16
    dd54:	1a000017 	bne	ddb8 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x9c>
    dd58:	e3110001 	tst	r1, #1
    dd5c:	1a000012 	bne	ddac <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x90>
    dd60:	e3110040 	tst	r1, #64	; 0x40
    dd64:	0a000019 	beq	ddd0 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0xb4>
    dd68:	e5903014 	ldr	r3, [r0, #20]
    dd6c:	e2433001 	sub	r3, r3, #1
    dd70:	e5803014 	str	r3, [r0, #20]
    dd74:	e3530000 	cmp	r3, #0
    dd78:	13a03005 	movne	r3, #5
    dd7c:	03a03007 	moveq	r3, #7
    dd80:	e5803008 	str	r3, [r0, #8]
    dd84:	e8bd8010 	pop	{r4, pc}
    dd88:	e3110020 	tst	r1, #32
    dd8c:	13a03002 	movne	r3, #2
    dd90:	1afffffa 	bne	dd80 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x64>
    dd94:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    dd98:	e3401003 	movt	r1, #3
    dd9c:	e30a0ff4 	movw	r0, #45044	; 0xaff4
    dda0:	e3400003 	movt	r0, #3
    dda4:	e3a02080 	mov	r2, #128	; 0x80
    dda8:	eb007ac4 	bl	2c8c0 <assertion_failed>
    ddac:	e3a03006 	mov	r3, #6
    ddb0:	e5803008 	str	r3, [r0, #8]
    ddb4:	e8bd8010 	pop	{r4, pc}
    ddb8:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    ddbc:	e3401003 	movt	r1, #3
    ddc0:	e30b0614 	movw	r0, #46612	; 0xb614
    ddc4:	e3400003 	movt	r0, #3
    ddc8:	e3a02085 	mov	r2, #133	; 0x85
    ddcc:	eb007abb 	bl	2c8c0 <assertion_failed>
    ddd0:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    ddd4:	e3401003 	movt	r1, #3
    ddd8:	e30b0708 	movw	r0, #46856	; 0xb708
    dddc:	e3400003 	movt	r0, #3
    dde0:	e3a02097 	mov	r2, #151	; 0x97
    dde4:	eb007ab5 	bl	2c8c0 <assertion_failed>

0000dde8 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()>:
    dde8:	e92d4030 	push	{r4, r5, lr}
    ddec:	e1a04000 	mov	r4, r0
    ddf0:	e3001408 	movw	r1, #1032	; 0x408
    ddf4:	e3431f98 	movt	r1, #16280	; 0x3f98
    ddf8:	e24dd014 	sub	sp, sp, #20
    ddfc:	e28d0004 	add	r0, sp, #4
    de00:	eb0031fe 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    de04:	e28d0004 	add	r0, sp, #4
    de08:	eb003206 	bl	1a628 <CDWHCIRegister::Read()>
    de0c:	e1d430bc 	ldrh	r3, [r4, #12]
    de10:	e3530901 	cmp	r3, #16384	; 0x4000
    de14:	0a000013 	beq	de68 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()+0x80>
    de18:	e6ff0070 	uxth	r0, r0
    de1c:	e5d4200e 	ldrb	r2, [r4, #14]
    de20:	e0833000 	add	r3, r3, r0
    de24:	e3520000 	cmp	r2, #0
    de28:	e7ed5053 	ubfx	r5, r3, #0, #14
    de2c:	e6ff3073 	uxth	r3, r3
    de30:	e1c451b0 	strh	r5, [r4, #16]
    de34:	0a000006 	beq	de54 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()+0x6c>
    de38:	e5d42004 	ldrb	r2, [r4, #4]
    de3c:	e3035ff8 	movw	r5, #16376	; 0x3ff8
    de40:	e0055003 	and	r5, r5, r3
    de44:	e1c451b0 	strh	r5, [r4, #16]
    de48:	e3520000 	cmp	r2, #0
    de4c:	12855004 	addne	r5, r5, #4
    de50:	11c451b0 	strhne	r5, [r4, #16]
    de54:	e28d0004 	add	r0, sp, #4
    de58:	eb0031f1 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    de5c:	e1a00005 	mov	r0, r5
    de60:	e28dd014 	add	sp, sp, #20
    de64:	e8bd8030 	pop	{r4, r5, pc}
    de68:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    de6c:	e3401003 	movt	r1, #3
    de70:	e30b01b4 	movw	r0, #45492	; 0xb1b4
    de74:	e3400003 	movt	r0, #3
    de78:	e3a020af 	mov	r2, #175	; 0xaf
    de7c:	eb007a8f 	bl	2c8c0 <assertion_failed>

0000de80 <CDWHCIFrameSchedulerIsochronous::IsOddFrame() const>:
    de80:	e92d4010 	push	{r4, lr}
    de84:	e3001408 	movw	r1, #1032	; 0x408
    de88:	e3431f98 	movt	r1, #16280	; 0x3f98
    de8c:	e24dd010 	sub	sp, sp, #16
    de90:	e28d0004 	add	r0, sp, #4
    de94:	eb0031d9 	bl	1a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    de98:	e28d0004 	add	r0, sp, #4
    de9c:	eb0031e1 	bl	1a628 <CDWHCIRegister::Read()>
    dea0:	e1a04000 	mov	r4, r0
    dea4:	e28d0004 	add	r0, sp, #4
    dea8:	eb0031dd 	bl	1a624 <CDWHCIRegister::~CDWHCIRegister()>
    deac:	e2040001 	and	r0, r4, #1
    deb0:	e28dd010 	add	sp, sp, #16
    deb4:	e8bd8010 	pop	{r4, pc}

0000deb8 <CDWHCIFrameSchedulerIsochronous::StartSplit()>:
    deb8:	e5903008 	ldr	r3, [r0, #8]
    debc:	e3530002 	cmp	r3, #2
    dec0:	0a00001d 	beq	df3c <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x84>
    dec4:	e3530007 	cmp	r3, #7
    dec8:	0a000009 	beq	def4 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x3c>
    decc:	e3530000 	cmp	r3, #0
    ded0:	112fff1e 	bxne	lr
    ded4:	e3a03001 	mov	r3, #1
    ded8:	e3a01008 	mov	r1, #8
    dedc:	e3a02901 	mov	r2, #16384	; 0x4000
    dee0:	e5803008 	str	r3, [r0, #8]
    dee4:	e1c010bc 	strh	r1, [r0, #12]
    dee8:	e5c0300e 	strb	r3, [r0, #14]
    deec:	e1c021b0 	strh	r2, [r0, #16]
    def0:	e12fff1e 	bx	lr
    def4:	e1d030bc 	ldrh	r3, [r0, #12]
    def8:	e3a02001 	mov	r2, #1
    defc:	e92d4010 	push	{r4, lr}
    df00:	e3530901 	cmp	r3, #16384	; 0x4000
    df04:	e5802008 	str	r2, [r0, #8]
    df08:	0a000014 	beq	df60 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0xa8>
    df0c:	e5d0300e 	ldrb	r3, [r0, #14]
    df10:	e3530000 	cmp	r3, #0
    df14:	0a000017 	beq	df78 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0xc0>
    df18:	e1d031b0 	ldrh	r3, [r0, #16]
    df1c:	e3530901 	cmp	r3, #16384	; 0x4000
    df20:	18bd8010 	popne	{r4, pc}
    df24:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    df28:	e3401003 	movt	r1, #3
    df2c:	e30b0194 	movw	r0, #45460	; 0xb194
    df30:	e3400003 	movt	r0, #3
    df34:	e3a0204f 	mov	r2, #79	; 0x4f
    df38:	eb007a60 	bl	2c8c0 <assertion_failed>
    df3c:	e3a0c003 	mov	ip, #3
    df40:	e3a01001 	mov	r1, #1
    df44:	e3a02000 	mov	r2, #0
    df48:	e3a03901 	mov	r3, #16384	; 0x4000
    df4c:	e580c008 	str	ip, [r0, #8]
    df50:	e1c010bc 	strh	r1, [r0, #12]
    df54:	e5c0200e 	strb	r2, [r0, #14]
    df58:	e1c031b0 	strh	r3, [r0, #16]
    df5c:	e12fff1e 	bx	lr
    df60:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    df64:	e3401003 	movt	r1, #3
    df68:	e30b01b4 	movw	r0, #45492	; 0xb1b4
    df6c:	e3400003 	movt	r0, #3
    df70:	e3a0204d 	mov	r2, #77	; 0x4d
    df74:	eb007a51 	bl	2c8c0 <assertion_failed>
    df78:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    df7c:	e3401003 	movt	r1, #3
    df80:	e30b063c 	movw	r0, #46652	; 0xb63c
    df84:	e3400003 	movt	r0, #3
    df88:	e3a0204e 	mov	r2, #78	; 0x4e
    df8c:	eb007a4b 	bl	2c8c0 <assertion_failed>

0000df90 <CDWHCIFrameSchedulerIsochronous::PeriodicDelay(unsigned short)>:
    df90:	e5903008 	ldr	r3, [r0, #8]
    df94:	e3530007 	cmp	r3, #7
    df98:	1a000005 	bne	dfb4 <CDWHCIFrameSchedulerIsochronous::PeriodicDelay(unsigned short)+0x24>
    df9c:	e3a02001 	mov	r2, #1
    dfa0:	e3a03901 	mov	r3, #16384	; 0x4000
    dfa4:	e1c010bc 	strh	r1, [r0, #12]
    dfa8:	e5c0200e 	strb	r2, [r0, #14]
    dfac:	e1c031b0 	strh	r3, [r0, #16]
    dfb0:	e12fff1e 	bx	lr
    dfb4:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    dfb8:	e3401003 	movt	r1, #3
    dfbc:	e30b064c 	movw	r0, #46668	; 0xb64c
    dfc0:	e3400003 	movt	r0, #3
    dfc4:	e3a020c1 	mov	r2, #193	; 0xc1
    dfc8:	e92d4010 	push	{r4, lr}
    dfcc:	eb007a3b 	bl	2c8c0 <assertion_failed>

0000dfd0 <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()>:
    dfd0:	e3043e68 	movw	r3, #20072	; 0x4e68
    dfd4:	e3403004 	movt	r3, #4
    dfd8:	e92d4010 	push	{r4, lr}
    dfdc:	e1a04000 	mov	r4, r0
    dfe0:	e5930000 	ldr	r0, [r3]
    dfe4:	e3500000 	cmp	r0, #0
    dfe8:	0a000003 	beq	dffc <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()+0x2c>
    dfec:	e1a01004 	mov	r1, r4
    dff0:	eb007bb6 	bl	2ced0 <CClassAllocator::Free(void*)>
    dff4:	e1a00004 	mov	r0, r4
    dff8:	e8bd8010 	pop	{r4, pc}
    dffc:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    e000:	e3401003 	movt	r1, #3
    e004:	e30b0048 	movw	r0, #45128	; 0xb048
    e008:	e3400003 	movt	r0, #3
    e00c:	e3a020d0 	mov	r2, #208	; 0xd0
    e010:	eb007a2a 	bl	2c8c0 <assertion_failed>

0000e014 <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)>:
    e014:	e59f2020 	ldr	r2, [pc, #32]	; e03c <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)+0x28>
    e018:	e3a0c000 	mov	ip, #0
    e01c:	e5802000 	str	r2, [r0]
    e020:	e3a02901 	mov	r2, #16384	; 0x4000
    e024:	e5c01004 	strb	r1, [r0, #4]
    e028:	e580c008 	str	ip, [r0, #8]
    e02c:	e1c020bc 	strh	r2, [r0, #12]
    e030:	e5c0c00e 	strb	ip, [r0, #14]
    e034:	e1c021b0 	strh	r2, [r0, #16]
    e038:	e12fff1e 	bx	lr
    e03c:	0003b6c8 	.word	0x0003b6c8

0000e040 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)>:
    e040:	e3500018 	cmp	r0, #24
    e044:	e92d4010 	push	{r4, lr}
    e048:	1a000006 	bne	e068 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)+0x28>
    e04c:	e3043e68 	movw	r3, #20072	; 0x4e68
    e050:	e3403004 	movt	r3, #4
    e054:	e5930000 	ldr	r0, [r3]
    e058:	e3500000 	cmp	r0, #0
    e05c:	0a000007 	beq	e080 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)+0x40>
    e060:	e8bd4010 	pop	{r4, lr}
    e064:	ea007b5e 	b	2cde4 <CClassAllocator::Allocate()>
    e068:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    e06c:	e3401003 	movt	r1, #3
    e070:	e30b066c 	movw	r0, #46700	; 0xb66c
    e074:	e3400003 	movt	r0, #3
    e078:	e3a020d0 	mov	r2, #208	; 0xd0
    e07c:	eb007a0f 	bl	2c8c0 <assertion_failed>
    e080:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    e084:	e3401003 	movt	r1, #3
    e088:	e30b0048 	movw	r0, #45128	; 0xb048
    e08c:	e3400003 	movt	r0, #3
    e090:	e3a020d0 	mov	r2, #208	; 0xd0
    e094:	eb007a09 	bl	2c8c0 <assertion_failed>

0000e098 <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned int)>:
    e098:	e3510018 	cmp	r1, #24
    e09c:	e92d4010 	push	{r4, lr}
    e0a0:	1a000008 	bne	e0c8 <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned int)+0x30>
    e0a4:	e3042e68 	movw	r2, #20072	; 0x4e68
    e0a8:	e3402004 	movt	r2, #4
    e0ac:	e1a03000 	mov	r3, r0
    e0b0:	e5920000 	ldr	r0, [r2]
    e0b4:	e3500000 	cmp	r0, #0
    e0b8:	0a000008 	beq	e0e0 <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned int)+0x48>
    e0bc:	e8bd4010 	pop	{r4, lr}
    e0c0:	e1a01003 	mov	r1, r3
    e0c4:	ea007b81 	b	2ced0 <CClassAllocator::Free(void*)>
    e0c8:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    e0cc:	e3401003 	movt	r1, #3
    e0d0:	e30b066c 	movw	r0, #46700	; 0xb66c
    e0d4:	e3400003 	movt	r0, #3
    e0d8:	e3a020d0 	mov	r2, #208	; 0xd0
    e0dc:	eb0079f7 	bl	2c8c0 <assertion_failed>
    e0e0:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    e0e4:	e3401003 	movt	r1, #3
    e0e8:	e30b0048 	movw	r0, #45128	; 0xb048
    e0ec:	e3400003 	movt	r0, #3
    e0f0:	e3a020d0 	mov	r2, #208	; 0xd0
    e0f4:	eb0079f1 	bl	2c8c0 <assertion_failed>

0000e0f8 <CDWHCIFrameSchedulerIsochronous::InitAllocator(unsigned int)>:
    e0f8:	e92d4070 	push	{r4, r5, r6, lr}
    e0fc:	e3044e68 	movw	r4, #20072	; 0x4e68
    e100:	e3404004 	movt	r4, #4
    e104:	e5943000 	ldr	r3, [r4]
    e108:	e3530000 	cmp	r3, #0
    e10c:	1a00000a 	bne	e13c <CDWHCIFrameSchedulerIsochronous::InitAllocator(unsigned int)+0x44>
    e110:	e1a05000 	mov	r5, r0
    e114:	e3a00020 	mov	r0, #32
    e118:	eb00a2df 	bl	36c9c <operator new(unsigned int)>
    e11c:	e1a02005 	mov	r2, r5
    e120:	e3a01018 	mov	r1, #24
    e124:	e30b36a0 	movw	r3, #46752	; 0xb6a0
    e128:	e3403003 	movt	r3, #3
    e12c:	e1a05000 	mov	r5, r0
    e130:	eb007acd 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    e134:	e5845000 	str	r5, [r4]
    e138:	e8bd8070 	pop	{r4, r5, r6, pc}
    e13c:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    e140:	e3401003 	movt	r1, #3
    e144:	e30b0090 	movw	r0, #45200	; 0xb090
    e148:	e3400003 	movt	r0, #3
    e14c:	e3a020d0 	mov	r2, #208	; 0xd0
    e150:	eb0079da 	bl	2c8c0 <assertion_failed>

0000e154 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)>:
    e154:	e92d4070 	push	{r4, r5, r6, lr}
    e158:	e3044e68 	movw	r4, #20072	; 0x4e68
    e15c:	e3404004 	movt	r4, #4
    e160:	e1a05000 	mov	r5, r0
    e164:	e24dd008 	sub	sp, sp, #8
    e168:	e1a06001 	mov	r6, r1
    e16c:	e5940000 	ldr	r0, [r4]
    e170:	e3500000 	cmp	r0, #0
    e174:	0a000004 	beq	e18c <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    e178:	e1a02001 	mov	r2, r1
    e17c:	e1a01005 	mov	r1, r5
    e180:	e28dd008 	add	sp, sp, #8
    e184:	e8bd4070 	pop	{r4, r5, r6, lr}
    e188:	ea007ad1 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
    e18c:	e3a00020 	mov	r0, #32
    e190:	eb00a2c1 	bl	36c9c <operator new(unsigned int)>
    e194:	e1a02005 	mov	r2, r5
    e198:	e1a03006 	mov	r3, r6
    e19c:	e3a01018 	mov	r1, #24
    e1a0:	e30bc6a0 	movw	ip, #46752	; 0xb6a0
    e1a4:	e340c003 	movt	ip, #3
    e1a8:	e58dc000 	str	ip, [sp]
    e1ac:	e1a05000 	mov	r5, r0
    e1b0:	eb007ab9 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    e1b4:	e5845000 	str	r5, [r4]
    e1b8:	e28dd008 	add	sp, sp, #8
    e1bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e1c0 <CUSBDevice::Configure()>:
    e1c0:	e5903004 	ldr	r3, [r0, #4]
    e1c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e1c8:	e3530000 	cmp	r3, #0
    e1cc:	0a00001d 	beq	e248 <CUSBDevice::Configure()+0x88>
    e1d0:	e5903018 	ldr	r3, [r0, #24]
    e1d4:	e3530000 	cmp	r3, #0
    e1d8:	0a000020 	beq	e260 <CUSBDevice::Configure()+0xa0>
    e1dc:	e5906028 	ldr	r6, [r0, #40]	; 0x28
    e1e0:	e3560000 	cmp	r6, #0
    e1e4:	0a000015 	beq	e240 <CUSBDevice::Configure()+0x80>
    e1e8:	e3a06000 	mov	r6, #0
    e1ec:	e280402c 	add	r4, r0, #44	; 0x2c
    e1f0:	e2805054 	add	r5, r0, #84	; 0x54
    e1f4:	e1a07006 	mov	r7, r6
    e1f8:	e5b40004 	ldr	r0, [r4, #4]!
    e1fc:	e3500000 	cmp	r0, #0
    e200:	0a00000c 	beq	e238 <CUSBDevice::Configure()+0x78>
    e204:	e5903000 	ldr	r3, [r0]
    e208:	e5933024 	ldr	r3, [r3, #36]	; 0x24
    e20c:	e12fff33 	blx	r3
    e210:	e3500000 	cmp	r0, #0
    e214:	11a06000 	movne	r6, r0
    e218:	1a000006 	bne	e238 <CUSBDevice::Configure()+0x78>
    e21c:	e5940000 	ldr	r0, [r4]
    e220:	e3500000 	cmp	r0, #0
    e224:	0a000002 	beq	e234 <CUSBDevice::Configure()+0x74>
    e228:	e5903000 	ldr	r3, [r0]
    e22c:	e5933004 	ldr	r3, [r3, #4]
    e230:	e12fff33 	blx	r3
    e234:	e5847000 	str	r7, [r4]
    e238:	e1540005 	cmp	r4, r5
    e23c:	1affffed 	bne	e1f8 <CUSBDevice::Configure()+0x38>
    e240:	e1a00006 	mov	r0, r6
    e244:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e248:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e24c:	e3401003 	movt	r1, #3
    e250:	e30b0260 	movw	r0, #45664	; 0xb260
    e254:	e3400003 	movt	r0, #3
    e258:	e30021dd 	movw	r2, #477	; 0x1dd
    e25c:	eb007997 	bl	2c8c0 <assertion_failed>
    e260:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e264:	e3401003 	movt	r1, #3
    e268:	e30b06f8 	movw	r0, #46840	; 0xb6f8
    e26c:	e3400003 	movt	r0, #3
    e270:	e30021de 	movw	r2, #478	; 0x1de
    e274:	eb007991 	bl	2c8c0 <assertion_failed>

0000e278 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    e278:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
    e27c:	e92d4070 	push	{r4, r5, r6, lr}
    e280:	e1a04000 	mov	r4, r0
    e284:	e2800020 	add	r0, r0, #32
    e288:	e59fc09c 	ldr	ip, [pc, #156]	; e32c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    e28c:	e3a05000 	mov	r5, #0
    e290:	e3510000 	cmp	r1, #0
    e294:	e5c42015 	strb	r2, [r4, #21]
    e298:	e3a02c01 	mov	r2, #256	; 0x100
    e29c:	e584c000 	str	ip, [r4]
    e2a0:	e984000a 	stmib	r4, {r1, r3}
    e2a4:	e1c421bd 	strh	r2, [r4, #29]
    e2a8:	e584500c 	str	r5, [r4, #12]
    e2ac:	e5c45014 	strb	r5, [r4, #20]
    e2b0:	e5845018 	str	r5, [r4, #24]
    e2b4:	e5c4501c 	strb	r5, [r4, #28]
    e2b8:	f4400a8f 	vst1.32	{d16-d17}, [r0]
    e2bc:	0a00000e 	beq	e2fc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x84>
    e2c0:	e3530000 	cmp	r3, #0
    e2c4:	0a000012 	beq	e314 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x9c>
    e2c8:	e3a00014 	mov	r0, #20
    e2cc:	eb00a272 	bl	36c9c <operator new(unsigned int)>
    e2d0:	e1a01004 	mov	r1, r4
    e2d4:	e1a06000 	mov	r6, r0
    e2d8:	eb0006ba 	bl	fdc8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    e2dc:	e284302c 	add	r3, r4, #44	; 0x2c
    e2e0:	e2842054 	add	r2, r4, #84	; 0x54
    e2e4:	e5846018 	str	r6, [r4, #24]
    e2e8:	e5a35004 	str	r5, [r3, #4]!
    e2ec:	e1530002 	cmp	r3, r2
    e2f0:	1afffffc 	bne	e2e8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x70>
    e2f4:	e1a00004 	mov	r0, r4
    e2f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e2fc:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e300:	e3401003 	movt	r1, #3
    e304:	e30b0260 	movw	r0, #45664	; 0xb260
    e308:	e3400003 	movt	r0, #3
    e30c:	e3a02038 	mov	r2, #56	; 0x38
    e310:	eb00796a 	bl	2c8c0 <assertion_failed>
    e314:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e318:	e3401003 	movt	r1, #3
    e31c:	e30b070c 	movw	r0, #46860	; 0xb70c
    e320:	e3400003 	movt	r0, #3
    e324:	e3a02039 	mov	r2, #57	; 0x39
    e328:	eb007964 	bl	2c8c0 <assertion_failed>
    e32c:	0003bb00 	.word	0x0003bb00

0000e330 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    e330:	e92d4070 	push	{r4, r5, r6, lr}
    e334:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    e338:	e1a04000 	mov	r4, r0
    e33c:	e280c024 	add	ip, r0, #36	; 0x24
    e340:	e59d0010 	ldr	r0, [sp, #16]
    e344:	e3510000 	cmp	r1, #0
    e348:	e5c42015 	strb	r2, [r4, #21]
    e34c:	e59f213c 	ldr	r2, [pc, #316]	; e490 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x160>
    e350:	e5840010 	str	r0, [r4, #16]
    e354:	e1a00003 	mov	r0, r3
    e358:	e584300c 	str	r3, [r4, #12]
    e35c:	e3a03000 	mov	r3, #0
    e360:	e5841004 	str	r1, [r4, #4]
    e364:	e5842000 	str	r2, [r4]
    e368:	e5843008 	str	r3, [r4, #8]
    e36c:	e5c43014 	strb	r3, [r4, #20]
    e370:	e5843018 	str	r3, [r4, #24]
    e374:	f44c078f 	vst1.32	{d16}, [ip]
    e378:	e584302c 	str	r3, [r4, #44]	; 0x2c
    e37c:	0a00002b 	beq	e430 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x100>
    e380:	e3500000 	cmp	r0, #0
    e384:	0a00002f 	beq	e448 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    e388:	eb000893 	bl	105dc <CUSBFunction::GetDevice() const>
    e38c:	e3500000 	cmp	r0, #0
    e390:	0a000032 	beq	e460 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x130>
    e394:	e5d0301c 	ldrb	r3, [r0, #28]
    e398:	e5c4301c 	strb	r3, [r4, #28]
    e39c:	e3530000 	cmp	r3, #0
    e3a0:	e1d031bd 	ldrh	r3, [r0, #29]
    e3a4:	e1c431bd 	strh	r3, [r4, #29]
    e3a8:	e5903020 	ldr	r3, [r0, #32]
    e3ac:	e5843020 	str	r3, [r4, #32]
    e3b0:	0a00000f 	beq	e3f4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xc4>
    e3b4:	e5945018 	ldr	r5, [r4, #24]
    e3b8:	e3550000 	cmp	r5, #0
    e3bc:	1a00002d 	bne	e478 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    e3c0:	e3a00014 	mov	r0, #20
    e3c4:	eb00a234 	bl	36c9c <operator new(unsigned int)>
    e3c8:	e1a01004 	mov	r1, r4
    e3cc:	e1a06000 	mov	r6, r0
    e3d0:	eb00067c 	bl	fdc8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    e3d4:	e284302c 	add	r3, r4, #44	; 0x2c
    e3d8:	e2842054 	add	r2, r4, #84	; 0x54
    e3dc:	e5846018 	str	r6, [r4, #24]
    e3e0:	e5a35004 	str	r5, [r3, #4]!
    e3e4:	e1530002 	cmp	r3, r2
    e3e8:	1afffffc 	bne	e3e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb0>
    e3ec:	e1a00004 	mov	r0, r4
    e3f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3f4:	e5d03015 	ldrb	r3, [r0, #21]
    e3f8:	e3530002 	cmp	r3, #2
    e3fc:	1affffec 	bne	e3b4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x84>
    e400:	e5d43015 	ldrb	r3, [r4, #21]
    e404:	e3530001 	cmp	r3, #1
    e408:	8affffe9 	bhi	e3b4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x84>
    e40c:	e3a03001 	mov	r3, #1
    e410:	e5c4301c 	strb	r3, [r4, #28]
    e414:	e5943010 	ldr	r3, [r4, #16]
    e418:	e5d02014 	ldrb	r2, [r0, #20]
    e41c:	e2833001 	add	r3, r3, #1
    e420:	e5840020 	str	r0, [r4, #32]
    e424:	e5c4201d 	strb	r2, [r4, #29]
    e428:	e5c4301e 	strb	r3, [r4, #30]
    e42c:	eaffffe0 	b	e3b4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x84>
    e430:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e434:	e3401003 	movt	r1, #3
    e438:	e30b0260 	movw	r0, #45664	; 0xb260
    e43c:	e3400003 	movt	r0, #3
    e440:	e3a02057 	mov	r2, #87	; 0x57
    e444:	eb00791d 	bl	2c8c0 <assertion_failed>
    e448:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e44c:	e3401003 	movt	r1, #3
    e450:	e30b0720 	movw	r0, #46880	; 0xb720
    e454:	e3400003 	movt	r0, #3
    e458:	e3a02058 	mov	r2, #88	; 0x58
    e45c:	eb007917 	bl	2c8c0 <assertion_failed>
    e460:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e464:	e3401003 	movt	r1, #3
    e468:	e30b072c 	movw	r0, #46892	; 0xb72c
    e46c:	e3400003 	movt	r0, #3
    e470:	e3a0205b 	mov	r2, #91	; 0x5b
    e474:	eb007911 	bl	2c8c0 <assertion_failed>
    e478:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e47c:	e3401003 	movt	r1, #3
    e480:	e30b073c 	movw	r0, #46908	; 0xb73c
    e484:	e3400003 	movt	r0, #3
    e488:	e3a02073 	mov	r2, #115	; 0x73
    e48c:	eb00790b 	bl	2c8c0 <assertion_failed>
    e490:	0003bb00 	.word	0x0003bb00

0000e494 <CUSBDevice::ReScanDevices()>:
    e494:	e92d4070 	push	{r4, r5, r6, lr}
    e498:	e3a05000 	mov	r5, #0
    e49c:	e280402c 	add	r4, r0, #44	; 0x2c
    e4a0:	e2806054 	add	r6, r0, #84	; 0x54
    e4a4:	e5b43004 	ldr	r3, [r4, #4]!
    e4a8:	e2530000 	subs	r0, r3, #0
    e4ac:	0a000004 	beq	e4c4 <CUSBDevice::ReScanDevices()+0x30>
    e4b0:	e5933000 	ldr	r3, [r3]
    e4b4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    e4b8:	e12fff33 	blx	r3
    e4bc:	e3500000 	cmp	r0, #0
    e4c0:	11a05000 	movne	r5, r0
    e4c4:	e1540006 	cmp	r4, r6
    e4c8:	1afffff5 	bne	e4a4 <CUSBDevice::ReScanDevices()+0x10>
    e4cc:	e1a00005 	mov	r0, r5
    e4d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e4d4 <CUSBDevice::RemoveDevice()>:
    e4d4:	e1a03000 	mov	r3, r0
    e4d8:	e5900008 	ldr	r0, [r0, #8]
    e4dc:	e3500000 	cmp	r0, #0
    e4e0:	0a000002 	beq	e4f0 <CUSBDevice::RemoveDevice()+0x1c>
    e4e4:	e5903000 	ldr	r3, [r0]
    e4e8:	e593300c 	ldr	r3, [r3, #12]
    e4ec:	e12fff13 	bx	r3
    e4f0:	e593000c 	ldr	r0, [r3, #12]
    e4f4:	e3500000 	cmp	r0, #0
    e4f8:	0a000001 	beq	e504 <CUSBDevice::RemoveDevice()+0x30>
    e4fc:	e5931010 	ldr	r1, [r3, #16]
    e500:	ea002184 	b	16b18 <CUSBStandardHub::RemoveDeviceAt(unsigned int)>
    e504:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e508:	e3401003 	movt	r1, #3
    e50c:	e30b0720 	movw	r0, #46880	; 0xb720
    e510:	e3400003 	movt	r0, #3
    e514:	e92d4010 	push	{r4, lr}
    e518:	e3002215 	movw	r2, #533	; 0x215
    e51c:	eb0078e7 	bl	2c8c0 <assertion_failed>

0000e520 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    e520:	e92d4070 	push	{r4, r5, r6, lr}
    e524:	e1a06000 	mov	r6, r0
    e528:	e3a00010 	mov	r0, #16
    e52c:	e24dd008 	sub	sp, sp, #8
    e530:	e1a04001 	mov	r4, r1
    e534:	eb00a1d8 	bl	36c9c <operator new(unsigned int)>
    e538:	e1a05000 	mov	r5, r0
    e53c:	eb009406 	bl	3355c <CString::CString()>
    e540:	e3540000 	cmp	r4, #0
    e544:	0a000013 	beq	e598 <CUSBDevice::GetName(TDeviceNameSelector) const+0x78>
    e548:	e3540001 	cmp	r4, #1
    e54c:	1a000030 	bne	e614 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf4>
    e550:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e554:	e3510000 	cmp	r1, #0
    e558:	0a000021 	beq	e5e4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc4>
    e55c:	e5d12004 	ldrb	r2, [r1, #4]
    e560:	e2423001 	sub	r3, r2, #1
    e564:	e6ef3073 	uxtb	r3, r3
    e568:	e35300fd 	cmp	r3, #253	; 0xfd
    e56c:	8a000015 	bhi	e5c8 <CUSBDevice::GetName(TDeviceNameSelector) const+0xa8>
    e570:	e5d13005 	ldrb	r3, [r1, #5]
    e574:	e1a00005 	mov	r0, r5
    e578:	e5d11006 	ldrb	r1, [r1, #6]
    e57c:	e58d1000 	str	r1, [sp]
    e580:	e30b1778 	movw	r1, #46968	; 0xb778
    e584:	e3401003 	movt	r1, #3
    e588:	eb0099be 	bl	34c88 <CString::Format(char const*, ...)>
    e58c:	e1a00005 	mov	r0, r5
    e590:	e28dd008 	add	sp, sp, #8
    e594:	e8bd8070 	pop	{r4, r5, r6, pc}
    e598:	e5962024 	ldr	r2, [r6, #36]	; 0x24
    e59c:	e3520000 	cmp	r2, #0
    e5a0:	0a000015 	beq	e5fc <CUSBDevice::GetName(TDeviceNameSelector) const+0xdc>
    e5a4:	e1d230ba 	ldrh	r3, [r2, #10]
    e5a8:	e1a00005 	mov	r0, r5
    e5ac:	e1d220b8 	ldrh	r2, [r2, #8]
    e5b0:	e30b1764 	movw	r1, #46948	; 0xb764
    e5b4:	e3401003 	movt	r1, #3
    e5b8:	eb0099b2 	bl	34c88 <CString::Format(char const*, ...)>
    e5bc:	e1a00005 	mov	r0, r5
    e5c0:	e28dd008 	add	sp, sp, #8
    e5c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5c8:	e1a00005 	mov	r0, r5
    e5cc:	e30b1770 	movw	r1, #46960	; 0xb770
    e5d0:	e3401003 	movt	r1, #3
    e5d4:	eb00941e 	bl	33654 <CString::operator=(char const*)>
    e5d8:	e1a00005 	mov	r0, r5
    e5dc:	e28dd008 	add	sp, sp, #8
    e5e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5e4:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e5e8:	e3401003 	movt	r1, #3
    e5ec:	e30b0750 	movw	r0, #46928	; 0xb750
    e5f0:	e3400003 	movt	r0, #3
    e5f4:	e3a02f8a 	mov	r2, #552	; 0x228
    e5f8:	eb0078b0 	bl	2c8c0 <assertion_failed>
    e5fc:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e600:	e3401003 	movt	r1, #3
    e604:	e30b0750 	movw	r0, #46928	; 0xb750
    e608:	e3400003 	movt	r0, #3
    e60c:	e3002221 	movw	r2, #545	; 0x221
    e610:	eb0078aa 	bl	2c8c0 <assertion_failed>
    e614:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e618:	e3401003 	movt	r1, #3
    e61c:	e30b0708 	movw	r0, #46856	; 0xb708
    e620:	e3400003 	movt	r0, #3
    e624:	e3002235 	movw	r2, #565	; 0x235
    e628:	eb0078a4 	bl	2c8c0 <assertion_failed>

0000e62c <CUSBDevice::GetNames() const>:
    e62c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e630:	e1a07000 	mov	r7, r0
    e634:	e3a00010 	mov	r0, #16
    e638:	eb00a197 	bl	36c9c <operator new(unsigned int)>
    e63c:	e30b8770 	movw	r8, #46960	; 0xb770
    e640:	e3408003 	movt	r8, #3
    e644:	e1a05000 	mov	r5, r0
    e648:	e3a06000 	mov	r6, #0
    e64c:	eb0093c2 	bl	3355c <CString::CString()>
    e650:	e1a01006 	mov	r1, r6
    e654:	e1a00007 	mov	r0, r7
    e658:	ebffffb0 	bl	e520 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e65c:	e2504000 	subs	r4, r0, #0
    e660:	0a000020 	beq	e6e8 <CUSBDevice::GetNames() const+0xbc>
    e664:	e1a01008 	mov	r1, r8
    e668:	eb009456 	bl	337c8 <CString::Compare(char const*) const>
    e66c:	e3500000 	cmp	r0, #0
    e670:	1a00000c 	bne	e6a8 <CUSBDevice::GetNames() const+0x7c>
    e674:	e5943000 	ldr	r3, [r4]
    e678:	e1a00004 	mov	r0, r4
    e67c:	e5933004 	ldr	r3, [r3, #4]
    e680:	e12fff33 	blx	r3
    e684:	e3560000 	cmp	r6, #0
    e688:	03a06001 	moveq	r6, #1
    e68c:	0affffef 	beq	e650 <CUSBDevice::GetNames() const+0x24>
    e690:	e1a00005 	mov	r0, r5
    e694:	eb009426 	bl	33734 <CString::GetLength() const>
    e698:	e3500000 	cmp	r0, #0
    e69c:	0a00000b 	beq	e6d0 <CUSBDevice::GetNames() const+0xa4>
    e6a0:	e1a00005 	mov	r0, r5
    e6a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e6a8:	e1a00005 	mov	r0, r5
    e6ac:	eb009420 	bl	33734 <CString::GetLength() const>
    e6b0:	e3500000 	cmp	r0, #0
    e6b4:	1a000011 	bne	e700 <CUSBDevice::GetNames() const+0xd4>
    e6b8:	e1a00004 	mov	r0, r4
    e6bc:	eb0093de 	bl	3363c <CString::operator char const*() const>
    e6c0:	e1a01000 	mov	r1, r0
    e6c4:	e1a00005 	mov	r0, r5
    e6c8:	eb00941d 	bl	33744 <CString::Append(char const*)>
    e6cc:	eaffffe8 	b	e674 <CUSBDevice::GetNames() const+0x48>
    e6d0:	e1a00005 	mov	r0, r5
    e6d4:	e30b1770 	movw	r1, #46960	; 0xb770
    e6d8:	e3401003 	movt	r1, #3
    e6dc:	eb0093dc 	bl	33654 <CString::operator=(char const*)>
    e6e0:	e1a00005 	mov	r0, r5
    e6e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e6e8:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e6ec:	e3401003 	movt	r1, #3
    e6f0:	e30b0784 	movw	r0, #46980	; 0xb784
    e6f4:	e3400003 	movt	r0, #3
    e6f8:	e3002246 	movw	r2, #582	; 0x246
    e6fc:	eb00786f 	bl	2c8c0 <assertion_failed>
    e700:	e1a00005 	mov	r0, r5
    e704:	e30b1790 	movw	r1, #46992	; 0xb790
    e708:	e3401003 	movt	r1, #3
    e70c:	eb00940c 	bl	33744 <CString::Append(char const*)>
    e710:	eaffffe8 	b	e6b8 <CUSBDevice::GetNames() const+0x8c>

0000e714 <CUSBDevice::SetAddress(unsigned char)>:
    e714:	e351003f 	cmp	r1, #63	; 0x3f
    e718:	8a000001 	bhi	e724 <CUSBDevice::SetAddress(unsigned char)+0x10>
    e71c:	e5c01014 	strb	r1, [r0, #20]
    e720:	e12fff1e 	bx	lr
    e724:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e728:	e3401003 	movt	r1, #3
    e72c:	e30b0794 	movw	r0, #46996	; 0xb794
    e730:	e3400003 	movt	r0, #3
    e734:	e3a02e26 	mov	r2, #608	; 0x260
    e738:	e92d4010 	push	{r4, lr}
    e73c:	eb00785f 	bl	2c8c0 <assertion_failed>

0000e740 <CUSBDevice::GetAddress() const>:
    e740:	e5d00014 	ldrb	r0, [r0, #20]
    e744:	e12fff1e 	bx	lr

0000e748 <CUSBDevice::GetSpeed() const>:
    e748:	e5d00015 	ldrb	r0, [r0, #21]
    e74c:	e12fff1e 	bx	lr

0000e750 <CUSBDevice::IsSplit() const>:
    e750:	e5d0001c 	ldrb	r0, [r0, #28]
    e754:	e12fff1e 	bx	lr

0000e758 <CUSBDevice::GetHubAddress() const>:
    e758:	e5d0001d 	ldrb	r0, [r0, #29]
    e75c:	e12fff1e 	bx	lr

0000e760 <CUSBDevice::GetHubPortNumber() const>:
    e760:	e5d0001e 	ldrb	r0, [r0, #30]
    e764:	e12fff1e 	bx	lr

0000e768 <CUSBDevice::GetTTHubDevice() const>:
    e768:	e5900020 	ldr	r0, [r0, #32]
    e76c:	e12fff1e 	bx	lr

0000e770 <CUSBDevice::GetEndpoint0() const>:
    e770:	e5900018 	ldr	r0, [r0, #24]
    e774:	e3500000 	cmp	r0, #0
    e778:	112fff1e 	bxne	lr
    e77c:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e780:	e3401003 	movt	r1, #3
    e784:	e30b06f8 	movw	r0, #46840	; 0xb6f8
    e788:	e3400003 	movt	r0, #3
    e78c:	e92d4010 	push	{r4, lr}
    e790:	e3002289 	movw	r2, #649	; 0x289
    e794:	eb007849 	bl	2c8c0 <assertion_failed>

0000e798 <CUSBDevice::GetHost() const>:
    e798:	e5900004 	ldr	r0, [r0, #4]
    e79c:	e3500000 	cmp	r0, #0
    e7a0:	112fff1e 	bxne	lr
    e7a4:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e7a8:	e3401003 	movt	r1, #3
    e7ac:	e30b0260 	movw	r0, #45664	; 0xb260
    e7b0:	e3400003 	movt	r0, #3
    e7b4:	e92d4010 	push	{r4, lr}
    e7b8:	e300228f 	movw	r2, #655	; 0x28f
    e7bc:	eb00783f 	bl	2c8c0 <assertion_failed>

0000e7c0 <CUSBDevice::GetDeviceDescriptor() const>:
    e7c0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e7c4:	e3500000 	cmp	r0, #0
    e7c8:	112fff1e 	bxne	lr
    e7cc:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e7d0:	e3401003 	movt	r1, #3
    e7d4:	e30b0750 	movw	r0, #46928	; 0xb750
    e7d8:	e3400003 	movt	r0, #3
    e7dc:	e92d4010 	push	{r4, lr}
    e7e0:	e3002295 	movw	r2, #661	; 0x295
    e7e4:	eb007835 	bl	2c8c0 <assertion_failed>

0000e7e8 <CUSBDevice::GetConfigurationDescriptor() const>:
    e7e8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    e7ec:	e3500000 	cmp	r0, #0
    e7f0:	112fff1e 	bxne	lr
    e7f4:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e7f8:	e3401003 	movt	r1, #3
    e7fc:	e30b07b4 	movw	r0, #47028	; 0xb7b4
    e800:	e3400003 	movt	r0, #3
    e804:	e92d4010 	push	{r4, lr}
    e808:	e300229b 	movw	r2, #667	; 0x29b
    e80c:	eb00782b 	bl	2c8c0 <assertion_failed>

0000e810 <CUSBDevice::GetDescriptor(unsigned char)>:
    e810:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e814:	e3500000 	cmp	r0, #0
    e818:	0a000000 	beq	e820 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    e81c:	ea003ba4 	b	1d6b4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e820:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e824:	e3401003 	movt	r1, #3
    e828:	e30b07c8 	movw	r0, #47048	; 0xb7c8
    e82c:	e3400003 	movt	r0, #3
    e830:	e92d4010 	push	{r4, lr}
    e834:	e30022a1 	movw	r2, #673	; 0x2a1
    e838:	eb007820 	bl	2c8c0 <assertion_failed>

0000e83c <CUSBDevice::ConfigurationError(char const*) const>:
    e83c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e840:	e3500000 	cmp	r0, #0
    e844:	0a000000 	beq	e84c <CUSBDevice::ConfigurationError(char const*) const+0x10>
    e848:	ea003bd7 	b	1d7ac <CUSBConfigurationParser::Error(char const*) const>
    e84c:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e850:	e3401003 	movt	r1, #3
    e854:	e30b07c8 	movw	r0, #47048	; 0xb7c8
    e858:	e3400003 	movt	r0, #3
    e85c:	e92d4010 	push	{r4, lr}
    e860:	e30022a7 	movw	r2, #679	; 0x2a7
    e864:	eb007815 	bl	2c8c0 <assertion_failed>

0000e868 <CUSBDevice::GetFunction(unsigned int)>:
    e868:	e3510009 	cmp	r1, #9
    e86c:	9281100c 	addls	r1, r1, #12
    e870:	97900101 	ldrls	r0, [r0, r1, lsl #2]
    e874:	83a00000 	movhi	r0, #0
    e878:	e12fff1e 	bx	lr

0000e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    e87c:	e92d000c 	push	{r2, r3}
    e880:	e92d4070 	push	{r4, r5, r6, lr}
    e884:	e24dd020 	sub	sp, sp, #32
    e888:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    e88c:	e3560000 	cmp	r6, #0
    e890:	0a00001e 	beq	e910 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x94>
    e894:	e1a04000 	mov	r4, r0
    e898:	e28d0010 	add	r0, sp, #16
    e89c:	e1a05001 	mov	r5, r1
    e8a0:	eb00932d 	bl	3355c <CString::CString()>
    e8a4:	e28d0010 	add	r0, sp, #16
    e8a8:	e30b17f0 	movw	r1, #47088	; 0xb7f0
    e8ac:	e3401003 	movt	r1, #3
    e8b0:	e5d4201e 	ldrb	r2, [r4, #30]
    e8b4:	e5d4301d 	ldrb	r3, [r4, #29]
    e8b8:	e58d2000 	str	r2, [sp]
    e8bc:	e59f2064 	ldr	r2, [pc, #100]	; e928 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    e8c0:	eb0098f0 	bl	34c88 <CString::Format(char const*, ...)>
    e8c4:	e28d3034 	add	r3, sp, #52	; 0x34
    e8c8:	e58d300c 	str	r3, [sp, #12]
    e8cc:	eb008278 	bl	2f2b4 <CLogger::Get()>
    e8d0:	e1a04000 	mov	r4, r0
    e8d4:	e28d0010 	add	r0, sp, #16
    e8d8:	eb009357 	bl	3363c <CString::operator char const*() const>
    e8dc:	e59dc00c 	ldr	ip, [sp, #12]
    e8e0:	e1a01000 	mov	r1, r0
    e8e4:	e1a03006 	mov	r3, r6
    e8e8:	e1a02005 	mov	r2, r5
    e8ec:	e1a00004 	mov	r0, r4
    e8f0:	e58dc000 	str	ip, [sp]
    e8f4:	eb0083d8 	bl	2f85c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e8f8:	e28d0010 	add	r0, sp, #16
    e8fc:	eb0092e3 	bl	33490 <CString::~CString()>
    e900:	e28dd020 	add	sp, sp, #32
    e904:	e8bd4070 	pop	{r4, r5, r6, lr}
    e908:	e28dd008 	add	sp, sp, #8
    e90c:	e12fff1e 	bx	lr
    e910:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    e914:	e3401003 	movt	r1, #3
    e918:	e30b07e0 	movw	r0, #47072	; 0xb7e0
    e91c:	e3400003 	movt	r0, #3
    e920:	e30022b7 	movw	r2, #695	; 0x2b7
    e924:	eb0077e5 	bl	2c8c0 <assertion_failed>
    e928:	0003bb10 	.word	0x0003bb10

0000e92c <CUSBDevice::~CUSBDevice() [clone .part.0]>:
    e92c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e930:	e3a07000 	mov	r7, #0
    e934:	e1a05000 	mov	r5, r0
    e938:	e280402c 	add	r4, r0, #44	; 0x2c
    e93c:	e2806054 	add	r6, r0, #84	; 0x54
    e940:	e5b40004 	ldr	r0, [r4, #4]!
    e944:	e3500000 	cmp	r0, #0
    e948:	0a000002 	beq	e958 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x2c>
    e94c:	e5903000 	ldr	r3, [r0]
    e950:	e5933004 	ldr	r3, [r3, #4]
    e954:	e12fff33 	blx	r3
    e958:	e1540006 	cmp	r4, r6
    e95c:	e5847000 	str	r7, [r4]
    e960:	1afffff6 	bne	e940 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x14>
    e964:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    e968:	e3530000 	cmp	r3, #0
    e96c:	0a00000e 	beq	e9ac <CUSBDevice::~CUSBDevice() [clone .part.0]+0x80>
    e970:	e1a00005 	mov	r0, r5
    e974:	ebffff2c 	bl	e62c <CUSBDevice::GetNames() const>
    e978:	e2504000 	subs	r4, r0, #0
    e97c:	0a000032 	beq	ea4c <CUSBDevice::~CUSBDevice() [clone .part.0]+0x120>
    e980:	eb00932d 	bl	3363c <CString::operator char const*() const>
    e984:	e3a01003 	mov	r1, #3
    e988:	e1a03000 	mov	r3, r0
    e98c:	e30b2804 	movw	r2, #47108	; 0xb804
    e990:	e3402003 	movt	r2, #3
    e994:	e1a00005 	mov	r0, r5
    e998:	ebffffb7 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e99c:	e5943000 	ldr	r3, [r4]
    e9a0:	e1a00004 	mov	r0, r4
    e9a4:	e5933004 	ldr	r3, [r3, #4]
    e9a8:	e12fff33 	blx	r3
    e9ac:	e5d51014 	ldrb	r1, [r5, #20]
    e9b0:	e3510000 	cmp	r1, #0
    e9b4:	1a000020 	bne	ea3c <CUSBDevice::~CUSBDevice() [clone .part.0]+0x110>
    e9b8:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    e9bc:	e3540000 	cmp	r4, #0
    e9c0:	0a000004 	beq	e9d8 <CUSBDevice::~CUSBDevice() [clone .part.0]+0xac>
    e9c4:	e1a00004 	mov	r0, r4
    e9c8:	eb003b36 	bl	1d6a8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    e9cc:	e3a0101c 	mov	r1, #28
    e9d0:	e1a00004 	mov	r0, r4
    e9d4:	eb00a0c8 	bl	36cfc <operator delete(void*, unsigned int)>
    e9d8:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    e9dc:	e3a03000 	mov	r3, #0
    e9e0:	e585302c 	str	r3, [r5, #44]	; 0x2c
    e9e4:	e1500003 	cmp	r0, r3
    e9e8:	0a000001 	beq	e9f4 <CUSBDevice::~CUSBDevice() [clone .part.0]+0xc8>
    e9ec:	e3a01009 	mov	r1, #9
    e9f0:	eb00a0c1 	bl	36cfc <operator delete(void*, unsigned int)>
    e9f4:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    e9f8:	e3a03000 	mov	r3, #0
    e9fc:	e5853028 	str	r3, [r5, #40]	; 0x28
    ea00:	e1500003 	cmp	r0, r3
    ea04:	0a000001 	beq	ea10 <CUSBDevice::~CUSBDevice() [clone .part.0]+0xe4>
    ea08:	e3a01012 	mov	r1, #18
    ea0c:	eb00a0ba 	bl	36cfc <operator delete(void*, unsigned int)>
    ea10:	e5954018 	ldr	r4, [r5, #24]
    ea14:	e3a03000 	mov	r3, #0
    ea18:	e5853024 	str	r3, [r5, #36]	; 0x24
    ea1c:	e1540003 	cmp	r4, r3
    ea20:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ea24:	e1a00004 	mov	r0, r4
    ea28:	eb000574 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
    ea2c:	e1a00004 	mov	r0, r4
    ea30:	e3a01014 	mov	r1, #20
    ea34:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ea38:	ea00a0af 	b	36cfc <operator delete(void*, unsigned int)>
    ea3c:	e3040e70 	movw	r0, #20080	; 0x4e70
    ea40:	e3400004 	movt	r0, #4
    ea44:	eb00a216 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
    ea48:	eaffffda 	b	e9b8 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x8c>
    ea4c:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    ea50:	e3401003 	movt	r1, #3
    ea54:	e30b07f8 	movw	r0, #47096	; 0xb7f8
    ea58:	e3400003 	movt	r0, #3
    ea5c:	e3a0208b 	mov	r2, #139	; 0x8b
    ea60:	eb007796 	bl	2c8c0 <assertion_failed>

0000ea64 <CUSBDevice::~CUSBDevice()>:
    ea64:	e92d4010 	push	{r4, lr}
    ea68:	e1a04000 	mov	r4, r0
    ea6c:	e5900004 	ldr	r0, [r0, #4]
    ea70:	e59f3054 	ldr	r3, [pc, #84]	; eacc <CUSBDevice::~CUSBDevice()+0x68>
    ea74:	e3500000 	cmp	r0, #0
    ea78:	e5843000 	str	r3, [r4]
    ea7c:	0a00000c 	beq	eab4 <CUSBDevice::~CUSBDevice()+0x50>
    ea80:	e5902000 	ldr	r2, [r0]
    ea84:	e30f3468 	movw	r3, #62568	; 0xf468
    ea88:	e3403000 	movt	r3, #0
    ea8c:	e5922018 	ldr	r2, [r2, #24]
    ea90:	e1520003 	cmp	r2, r3
    ea94:	1a000003 	bne	eaa8 <CUSBDevice::~CUSBDevice()+0x44>
    ea98:	e1a00004 	mov	r0, r4
    ea9c:	ebffffa2 	bl	e92c <CUSBDevice::~CUSBDevice() [clone .part.0]>
    eaa0:	e1a00004 	mov	r0, r4
    eaa4:	e8bd8010 	pop	{r4, pc}
    eaa8:	e1a01004 	mov	r1, r4
    eaac:	e12fff32 	blx	r2
    eab0:	eafffff8 	b	ea98 <CUSBDevice::~CUSBDevice()+0x34>
    eab4:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    eab8:	e3401003 	movt	r1, #3
    eabc:	e30b0260 	movw	r0, #45664	; 0xb260
    eac0:	e3400003 	movt	r0, #3
    eac4:	e3a0207f 	mov	r2, #127	; 0x7f
    eac8:	eb00777c 	bl	2c8c0 <assertion_failed>
    eacc:	0003bb00 	.word	0x0003bb00

0000ead0 <CUSBDevice::~CUSBDevice()>:
    ead0:	e92d4010 	push	{r4, lr}
    ead4:	e1a04000 	mov	r4, r0
    ead8:	e5900004 	ldr	r0, [r0, #4]
    eadc:	e59f3060 	ldr	r3, [pc, #96]	; eb44 <CUSBDevice::~CUSBDevice()+0x74>
    eae0:	e3500000 	cmp	r0, #0
    eae4:	e5843000 	str	r3, [r4]
    eae8:	0a00000f 	beq	eb2c <CUSBDevice::~CUSBDevice()+0x5c>
    eaec:	e5902000 	ldr	r2, [r0]
    eaf0:	e30f3468 	movw	r3, #62568	; 0xf468
    eaf4:	e3403000 	movt	r3, #0
    eaf8:	e5922018 	ldr	r2, [r2, #24]
    eafc:	e1520003 	cmp	r2, r3
    eb00:	1a000006 	bne	eb20 <CUSBDevice::~CUSBDevice()+0x50>
    eb04:	e1a00004 	mov	r0, r4
    eb08:	ebffff87 	bl	e92c <CUSBDevice::~CUSBDevice() [clone .part.0]>
    eb0c:	e1a00004 	mov	r0, r4
    eb10:	e3a01058 	mov	r1, #88	; 0x58
    eb14:	eb00a078 	bl	36cfc <operator delete(void*, unsigned int)>
    eb18:	e1a00004 	mov	r0, r4
    eb1c:	e8bd8010 	pop	{r4, pc}
    eb20:	e1a01004 	mov	r1, r4
    eb24:	e12fff32 	blx	r2
    eb28:	eafffff5 	b	eb04 <CUSBDevice::~CUSBDevice()+0x34>
    eb2c:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    eb30:	e3401003 	movt	r1, #3
    eb34:	e30b0260 	movw	r0, #45664	; 0xb260
    eb38:	e3400003 	movt	r0, #3
    eb3c:	e3a0207f 	mov	r2, #127	; 0x7f
    eb40:	eb00775e 	bl	2c8c0 <assertion_failed>
    eb44:	0003bb00 	.word	0x0003bb00

0000eb48 <CUSBDevice::Initialize()>:
    eb48:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb4c:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    eb50:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    eb54:	e3550000 	cmp	r5, #0
    eb58:	1a00010a 	bne	ef88 <CUSBDevice::Initialize()+0x440>
    eb5c:	e1a04000 	mov	r4, r0
    eb60:	e3a00012 	mov	r0, #18
    eb64:	eb00a04c 	bl	36c9c <operator new(unsigned int)>
    eb68:	e1a02000 	mov	r2, r0
    eb6c:	e5940004 	ldr	r0, [r4, #4]
    eb70:	e5842024 	str	r2, [r4, #36]	; 0x24
    eb74:	e3500000 	cmp	r0, #0
    eb78:	0a000108 	beq	efa0 <CUSBDevice::Initialize()+0x458>
    eb7c:	e5941018 	ldr	r1, [r4, #24]
    eb80:	e3510000 	cmp	r1, #0
    eb84:	0a00010b 	beq	efb8 <CUSBDevice::Initialize()+0x470>
    eb88:	e58d2000 	str	r2, [sp]
    eb8c:	e1a03005 	mov	r3, r5
    eb90:	e3a02008 	mov	r2, #8
    eb94:	e3a06080 	mov	r6, #128	; 0x80
    eb98:	e58d2004 	str	r2, [sp, #4]
    eb9c:	e3a02001 	mov	r2, #1
    eba0:	e58d500c 	str	r5, [sp, #12]
    eba4:	e58d6008 	str	r6, [sp, #8]
    eba8:	eb0013d4 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ebac:	e3500008 	cmp	r0, #8
    ebb0:	1a000016 	bne	ec10 <CUSBDevice::Initialize()+0xc8>
    ebb4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ebb8:	e5d37000 	ldrb	r7, [r3]
    ebbc:	e3570012 	cmp	r7, #18
    ebc0:	1a000002 	bne	ebd0 <CUSBDevice::Initialize()+0x88>
    ebc4:	e5d38001 	ldrb	r8, [r3, #1]
    ebc8:	e3580001 	cmp	r8, #1
    ebcc:	0a000018 	beq	ec34 <CUSBDevice::Initialize()+0xec>
    ebd0:	e1a00004 	mov	r0, r4
    ebd4:	e3a01001 	mov	r1, #1
    ebd8:	e30b2854 	movw	r2, #47188	; 0xb854
    ebdc:	e3402003 	movt	r2, #3
    ebe0:	ebffff25 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ebe4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    ebe8:	e3500000 	cmp	r0, #0
    ebec:	0a000001 	beq	ebf8 <CUSBDevice::Initialize()+0xb0>
    ebf0:	e3a01012 	mov	r1, #18
    ebf4:	eb00a040 	bl	36cfc <operator delete(void*, unsigned int)>
    ebf8:	e3a03000 	mov	r3, #0
    ebfc:	e5843024 	str	r3, [r4, #36]	; 0x24
    ec00:	e3a05000 	mov	r5, #0
    ec04:	e1a00005 	mov	r0, r5
    ec08:	e28dd03c 	add	sp, sp, #60	; 0x3c
    ec0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec10:	e1a00004 	mov	r0, r4
    ec14:	e3a01001 	mov	r1, #1
    ec18:	e30b282c 	movw	r2, #47148	; 0xb82c
    ec1c:	e3402003 	movt	r2, #3
    ec20:	ebffff15 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ec24:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    ec28:	e3500000 	cmp	r0, #0
    ec2c:	1affffef 	bne	ebf0 <CUSBDevice::Initialize()+0xa8>
    ec30:	eafffff0 	b	ebf8 <CUSBDevice::Initialize()+0xb0>
    ec34:	e5d31007 	ldrb	r1, [r3, #7]
    ec38:	e5940018 	ldr	r0, [r4, #24]
    ec3c:	eb000500 	bl	10044 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    ec40:	e3500000 	cmp	r0, #0
    ec44:	0a0000ea 	beq	eff4 <CUSBDevice::Initialize()+0x4ac>
    ec48:	e58d500c 	str	r5, [sp, #12]
    ec4c:	e1a02008 	mov	r2, r8
    ec50:	e58d6008 	str	r6, [sp, #8]
    ec54:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ec58:	e88d0088 	stm	sp, {r3, r7}
    ec5c:	e1a03005 	mov	r3, r5
    ec60:	e5941018 	ldr	r1, [r4, #24]
    ec64:	e5940004 	ldr	r0, [r4, #4]
    ec68:	eb0013a4 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ec6c:	e3500012 	cmp	r0, #18
    ec70:	1a0000d6 	bne	efd0 <CUSBDevice::Initialize()+0x488>
    ec74:	e1a01005 	mov	r1, r5
    ec78:	e30b28b8 	movw	r2, #47288	; 0xb8b8
    ec7c:	e3402003 	movt	r2, #3
    ec80:	e3040e70 	movw	r0, #20080	; 0x4e70
    ec84:	e3400004 	movt	r0, #4
    ec88:	eb00a153 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
    ec8c:	e1a05000 	mov	r5, r0
    ec90:	e3500040 	cmp	r0, #64	; 0x40
    ec94:	0a0000ec 	beq	f04c <CUSBDevice::Initialize()+0x504>
    ec98:	e6ef6070 	uxtb	r6, r0
    ec9c:	e5941018 	ldr	r1, [r4, #24]
    eca0:	e5940004 	ldr	r0, [r4, #4]
    eca4:	e1a02006 	mov	r2, r6
    eca8:	eb0013a1 	bl	13b34 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    ecac:	e3500000 	cmp	r0, #0
    ecb0:	0a0000f6 	beq	f090 <CUSBDevice::Initialize()+0x548>
    ecb4:	e356003f 	cmp	r6, #63	; 0x3f
    ecb8:	8a0000ff 	bhi	f0bc <CUSBDevice::Initialize()+0x574>
    ecbc:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    ecc0:	e5c46014 	strb	r6, [r4, #20]
    ecc4:	e3550000 	cmp	r5, #0
    ecc8:	1a000101 	bne	f0d4 <CUSBDevice::Initialize()+0x58c>
    eccc:	e3a00009 	mov	r0, #9
    ecd0:	e3a06009 	mov	r6, #9
    ecd4:	eb009ff0 	bl	36c9c <operator new(unsigned int)>
    ecd8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ecdc:	e5840028 	str	r0, [r4, #40]	; 0x28
    ece0:	e3002525 	movw	r2, #1317	; 0x525
    ece4:	e3a08000 	mov	r8, #0
    ece8:	e3a07080 	mov	r7, #128	; 0x80
    ecec:	e1d310b8 	ldrh	r1, [r3, #8]
    ecf0:	e1510002 	cmp	r1, r2
    ecf4:	e3a02002 	mov	r2, #2
    ecf8:	01d350ba 	ldrheq	r5, [r3, #10]
    ecfc:	030a34a2 	movweq	r3, #42146	; 0xa4a2
    ed00:	e58d0000 	str	r0, [sp]
    ed04:	00455003 	subeq	r5, r5, r3
    ed08:	016f5f15 	clzeq	r5, r5
    ed0c:	e5941018 	ldr	r1, [r4, #24]
    ed10:	e5940004 	ldr	r0, [r4, #4]
    ed14:	01a052a5 	lsreq	r5, r5, #5
    ed18:	e58d800c 	str	r8, [sp, #12]
    ed1c:	e1a03005 	mov	r3, r5
    ed20:	e1cd60f4 	strd	r6, [sp, #4]
    ed24:	eb001375 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ed28:	e1500006 	cmp	r0, r6
    ed2c:	1a0000cc 	bne	f064 <CUSBDevice::Initialize()+0x51c>
    ed30:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    ed34:	e5d06000 	ldrb	r6, [r0]
    ed38:	e3560009 	cmp	r6, #9
    ed3c:	1a0000b5 	bne	f018 <CUSBDevice::Initialize()+0x4d0>
    ed40:	e5d09001 	ldrb	r9, [r0, #1]
    ed44:	e3590002 	cmp	r9, #2
    ed48:	1a0000b2 	bne	f018 <CUSBDevice::Initialize()+0x4d0>
    ed4c:	e1d0a0b2 	ldrh	sl, [r0, #2]
    ed50:	e35a0b01 	cmp	sl, #1024	; 0x400
    ed54:	8a0000af 	bhi	f018 <CUSBDevice::Initialize()+0x4d0>
    ed58:	e1a01006 	mov	r1, r6
    ed5c:	eb009fe6 	bl	36cfc <operator delete(void*, unsigned int)>
    ed60:	e1a0000a 	mov	r0, sl
    ed64:	eb009fd2 	bl	36cb4 <operator new[](unsigned int)>
    ed68:	e58d800c 	str	r8, [sp, #12]
    ed6c:	e58d7008 	str	r7, [sp, #8]
    ed70:	e1a03005 	mov	r3, r5
    ed74:	e5840028 	str	r0, [r4, #40]	; 0x28
    ed78:	e1a02009 	mov	r2, r9
    ed7c:	e88d0401 	stm	sp, {r0, sl}
    ed80:	e5941018 	ldr	r1, [r4, #24]
    ed84:	e5940004 	ldr	r0, [r4, #4]
    ed88:	eb00135c 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ed8c:	e1a05000 	mov	r5, r0
    ed90:	e150000a 	cmp	r0, sl
    ed94:	1a0000ff 	bne	f198 <CUSBDevice::Initialize()+0x650>
    ed98:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    ed9c:	e3530000 	cmp	r3, #0
    eda0:	1a000192 	bne	f3f0 <CUSBDevice::Initialize()+0x8a8>
    eda4:	e3a0001c 	mov	r0, #28
    eda8:	eb009fbb 	bl	36c9c <operator new(unsigned int)>
    edac:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    edb0:	e1a06000 	mov	r6, r0
    edb4:	e1a02005 	mov	r2, r5
    edb8:	eb0039cd 	bl	1d4f4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    edbc:	e1a00006 	mov	r0, r6
    edc0:	e584602c 	str	r6, [r4, #44]	; 0x2c
    edc4:	eb003a38 	bl	1d6ac <CUSBConfigurationParser::IsValid() const>
    edc8:	e3500000 	cmp	r0, #0
    edcc:	0a000164 	beq	f364 <CUSBDevice::Initialize()+0x81c>
    edd0:	e5d43015 	ldrb	r3, [r4, #21]
    edd4:	e3530003 	cmp	r3, #3
    edd8:	8a000178 	bhi	f3c0 <CUSBDevice::Initialize()+0x878>
    eddc:	e1a00004 	mov	r0, r4
    ede0:	ebfffe11 	bl	e62c <CUSBDevice::GetNames() const>
    ede4:	e2505000 	subs	r5, r0, #0
    ede8:	0a00017a 	beq	f3d8 <CUSBDevice::Initialize()+0x890>
    edec:	eb009212 	bl	3363c <CString::operator char const*() const>
    edf0:	e5d41015 	ldrb	r1, [r4, #21]
    edf4:	e30b2af8 	movw	r2, #47864	; 0xbaf8
    edf8:	e3402003 	movt	r2, #3
    edfc:	e1a03000 	mov	r3, r0
    ee00:	e0820101 	add	r0, r2, r1, lsl #2
    ee04:	e3a01003 	mov	r1, #3
    ee08:	e30b29b8 	movw	r2, #47544	; 0xb9b8
    ee0c:	e3402003 	movt	r2, #3
    ee10:	e5900020 	ldr	r0, [r0, #32]
    ee14:	e58d0000 	str	r0, [sp]
    ee18:	e1a00004 	mov	r0, r4
    ee1c:	ebfffe96 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ee20:	e5953000 	ldr	r3, [r5]
    ee24:	e1a00005 	mov	r0, r5
    ee28:	e5933004 	ldr	r3, [r3, #4]
    ee2c:	e12fff33 	blx	r3
    ee30:	e28d0028 	add	r0, sp, #40	; 0x28
    ee34:	eb0091c8 	bl	3355c <CString::CString()>
    ee38:	e1a01004 	mov	r1, r4
    ee3c:	e28d001c 	add	r0, sp, #28
    ee40:	eb0022ef 	bl	17a04 <CUSBString::CUSBString(CUSBDevice*)>
    ee44:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ee48:	e5d3500e 	ldrb	r5, [r3, #14]
    ee4c:	e2452001 	sub	r2, r5, #1
    ee50:	e6ef2072 	uxtb	r2, r2
    ee54:	e35200fd 	cmp	r2, #253	; 0xfd
    ee58:	9a00011e 	bls	f2d8 <CUSBDevice::Initialize()+0x790>
    ee5c:	e5d3500f 	ldrb	r5, [r3, #15]
    ee60:	e2453001 	sub	r3, r5, #1
    ee64:	e6ef3073 	uxtb	r3, r3
    ee68:	e35300fd 	cmp	r3, #253	; 0xfd
    ee6c:	9a000107 	bls	f290 <CUSBDevice::Initialize()+0x748>
    ee70:	e28d0028 	add	r0, sp, #40	; 0x28
    ee74:	eb00922e 	bl	33734 <CString::GetLength() const>
    ee78:	e3500000 	cmp	r0, #0
    ee7c:	1a0000fa 	bne	f26c <CUSBDevice::Initialize()+0x724>
    ee80:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ee84:	e5941018 	ldr	r1, [r4, #24]
    ee88:	e5940004 	ldr	r0, [r4, #4]
    ee8c:	e5d32005 	ldrb	r2, [r3, #5]
    ee90:	eb001339 	bl	13b7c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    ee94:	e2505000 	subs	r5, r0, #0
    ee98:	0a000124 	beq	f330 <CUSBDevice::Initialize()+0x7e8>
    ee9c:	e3a06000 	mov	r6, #0
    eea0:	e30bb770 	movw	fp, #46960	; 0xb770
    eea4:	e340b003 	movt	fp, #3
    eea8:	e30ba9fc 	movw	sl, #47612	; 0xb9fc
    eeac:	e340a003 	movt	sl, #3
    eeb0:	e1a07006 	mov	r7, r6
    eeb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    eeb8:	e3a01004 	mov	r1, #4
    eebc:	eb0039fc 	bl	1d6b4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    eec0:	e3500000 	cmp	r0, #0
    eec4:	0a00012a 	beq	f374 <CUSBDevice::Initialize()+0x82c>
    eec8:	e5d03002 	ldrb	r3, [r0, #2]
    eecc:	e1530006 	cmp	r3, r6
    eed0:	21a09003 	movcs	r9, r3
    eed4:	31a09006 	movcc	r9, r6
    eed8:	3a000083 	bcc	f0ec <CUSBDevice::Initialize()+0x5a4>
    eedc:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    eee0:	e3530000 	cmp	r3, #0
    eee4:	0a000105 	beq	f300 <CUSBDevice::Initialize()+0x7b8>
    eee8:	e0846107 	add	r6, r4, r7, lsl #2
    eeec:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    eef0:	e3530000 	cmp	r3, #0
    eef4:	1a000107 	bne	f318 <CUSBDevice::Initialize()+0x7d0>
    eef8:	e3a00014 	mov	r0, #20
    eefc:	eb009f66 	bl	36c9c <operator new(unsigned int)>
    ef00:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    ef04:	e1a01004 	mov	r1, r4
    ef08:	e1a08000 	mov	r8, r0
    ef0c:	eb00051f 	bl	10390 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    ef10:	e3570000 	cmp	r7, #0
    ef14:	e5868030 	str	r8, [r6, #48]	; 0x30
    ef18:	1a000083 	bne	f12c <CUSBDevice::Initialize()+0x5e4>
    ef1c:	e1a01007 	mov	r1, r7
    ef20:	e1a00004 	mov	r0, r4
    ef24:	ebfffd7d 	bl	e520 <CUSBDevice::GetName(TDeviceNameSelector) const>
    ef28:	e1a01000 	mov	r1, r0
    ef2c:	e1a00008 	mov	r0, r8
    ef30:	eb0001f7 	bl	f714 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    ef34:	e2508000 	subs	r8, r0, #0
    ef38:	0a000072 	beq	f108 <CUSBDevice::Initialize()+0x5c0>
    ef3c:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    ef40:	e3500000 	cmp	r0, #0
    ef44:	0a0000b2 	beq	f214 <CUSBDevice::Initialize()+0x6cc>
    ef48:	e5903000 	ldr	r3, [r0]
    ef4c:	e5933004 	ldr	r3, [r3, #4]
    ef50:	e12fff33 	blx	r3
    ef54:	e5983000 	ldr	r3, [r8]
    ef58:	e1a00008 	mov	r0, r8
    ef5c:	e5868030 	str	r8, [r6, #48]	; 0x30
    ef60:	e5933020 	ldr	r3, [r3, #32]
    ef64:	e12fff33 	blx	r3
    ef68:	e3500000 	cmp	r0, #0
    ef6c:	0a0000b0 	beq	f234 <CUSBDevice::Initialize()+0x6ec>
    ef70:	e2877001 	add	r7, r7, #1
    ef74:	e357000a 	cmp	r7, #10
    ef78:	0a000133 	beq	f44c <CUSBDevice::Initialize()+0x904>
    ef7c:	e2896001 	add	r6, r9, #1
    ef80:	e6ef6076 	uxtb	r6, r6
    ef84:	eaffffca 	b	eeb4 <CUSBDevice::Initialize()+0x36c>
    ef88:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    ef8c:	e3401003 	movt	r1, #3
    ef90:	e30b0818 	movw	r0, #47128	; 0xb818
    ef94:	e3400003 	movt	r0, #3
    ef98:	e3a020b4 	mov	r2, #180	; 0xb4
    ef9c:	eb007647 	bl	2c8c0 <assertion_failed>
    efa0:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    efa4:	e3401003 	movt	r1, #3
    efa8:	e30b0260 	movw	r0, #45664	; 0xb260
    efac:	e3400003 	movt	r0, #3
    efb0:	e3a020b8 	mov	r2, #184	; 0xb8
    efb4:	eb007641 	bl	2c8c0 <assertion_failed>
    efb8:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    efbc:	e3401003 	movt	r1, #3
    efc0:	e30b06f8 	movw	r0, #46840	; 0xb6f8
    efc4:	e3400003 	movt	r0, #3
    efc8:	e3a020b9 	mov	r2, #185	; 0xb9
    efcc:	eb00763b 	bl	2c8c0 <assertion_failed>
    efd0:	e1a00004 	mov	r0, r4
    efd4:	e1a01008 	mov	r1, r8
    efd8:	e30b2898 	movw	r2, #47256	; 0xb898
    efdc:	e3402003 	movt	r2, #3
    efe0:	ebfffe25 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    efe4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    efe8:	e3500000 	cmp	r0, #0
    efec:	1afffeff 	bne	ebf0 <CUSBDevice::Initialize()+0xa8>
    eff0:	eaffff00 	b	ebf8 <CUSBDevice::Initialize()+0xb0>
    eff4:	e1a00004 	mov	r0, r4
    eff8:	e1a01008 	mov	r1, r8
    effc:	e30b2870 	movw	r2, #47216	; 0xb870
    f000:	e3402003 	movt	r2, #3
    f004:	ebfffe1c 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f008:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    f00c:	e3500000 	cmp	r0, #0
    f010:	1afffef6 	bne	ebf0 <CUSBDevice::Initialize()+0xa8>
    f014:	eafffef7 	b	ebf8 <CUSBDevice::Initialize()+0xb0>
    f018:	e1a00004 	mov	r0, r4
    f01c:	e3a01001 	mov	r1, #1
    f020:	e30b292c 	movw	r2, #47404	; 0xb92c
    f024:	e3402003 	movt	r2, #3
    f028:	ebfffe13 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f02c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    f030:	e3500000 	cmp	r0, #0
    f034:	0a000001 	beq	f040 <CUSBDevice::Initialize()+0x4f8>
    f038:	e3a01009 	mov	r1, #9
    f03c:	eb009f2e 	bl	36cfc <operator delete(void*, unsigned int)>
    f040:	e3a03000 	mov	r3, #0
    f044:	e5843028 	str	r3, [r4, #40]	; 0x28
    f048:	eafffeec 	b	ec00 <CUSBDevice::Initialize()+0xb8>
    f04c:	e1a01008 	mov	r1, r8
    f050:	e1a00004 	mov	r0, r4
    f054:	e30b28c0 	movw	r2, #47296	; 0xb8c0
    f058:	e3402003 	movt	r2, #3
    f05c:	ebfffe06 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f060:	eafffee6 	b	ec00 <CUSBDevice::Initialize()+0xb8>
    f064:	e1a00004 	mov	r0, r4
    f068:	e3a01001 	mov	r1, #1
    f06c:	e30b2900 	movw	r2, #47360	; 0xb900
    f070:	e3402003 	movt	r2, #3
    f074:	ebfffe00 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f078:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    f07c:	e1500008 	cmp	r0, r8
    f080:	0affffee 	beq	f040 <CUSBDevice::Initialize()+0x4f8>
    f084:	e1a01006 	mov	r1, r6
    f088:	eb009f1b 	bl	36cfc <operator delete(void*, unsigned int)>
    f08c:	eaffffeb 	b	f040 <CUSBDevice::Initialize()+0x4f8>
    f090:	e1a00004 	mov	r0, r4
    f094:	e1a03005 	mov	r3, r5
    f098:	e3a01001 	mov	r1, #1
    f09c:	e30b28d4 	movw	r2, #47316	; 0xb8d4
    f0a0:	e3402003 	movt	r2, #3
    f0a4:	ebfffdf4 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f0a8:	e1a01005 	mov	r1, r5
    f0ac:	e3040e70 	movw	r0, #20080	; 0x4e70
    f0b0:	e3400004 	movt	r0, #4
    f0b4:	eb00a07a 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
    f0b8:	eafffed0 	b	ec00 <CUSBDevice::Initialize()+0xb8>
    f0bc:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f0c0:	e3401003 	movt	r1, #3
    f0c4:	e30b0794 	movw	r0, #46996	; 0xb794
    f0c8:	e3400003 	movt	r0, #3
    f0cc:	e3a02e26 	mov	r2, #608	; 0x260
    f0d0:	eb0075fa 	bl	2c8c0 <assertion_failed>
    f0d4:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f0d8:	e3401003 	movt	r1, #3
    f0dc:	e30b08ec 	movw	r0, #47340	; 0xb8ec
    f0e0:	e3400003 	movt	r0, #3
    f0e4:	e3a02f41 	mov	r2, #260	; 0x104
    f0e8:	eb0075f4 	bl	2c8c0 <assertion_failed>
    f0ec:	e5d03003 	ldrb	r3, [r0, #3]
    f0f0:	e1a0200a 	mov	r2, sl
    f0f4:	e3a01004 	mov	r1, #4
    f0f8:	e1a00004 	mov	r0, r4
    f0fc:	ebfffdde 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f100:	e1a06009 	mov	r6, r9
    f104:	eaffff6a 	b	eeb4 <CUSBDevice::Initialize()+0x36c>
    f108:	e5948030 	ldr	r8, [r4, #48]	; 0x30
    f10c:	e3a01001 	mov	r1, #1
    f110:	e1a00004 	mov	r0, r4
    f114:	ebfffd01 	bl	e520 <CUSBDevice::GetName(TDeviceNameSelector) const>
    f118:	e1a01000 	mov	r1, r0
    f11c:	e1a00008 	mov	r0, r8
    f120:	eb00017b 	bl	f714 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    f124:	e2508000 	subs	r8, r0, #0
    f128:	1affff83 	bne	ef3c <CUSBDevice::Initialize()+0x3f4>
    f12c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    f130:	eb0004ff 	bl	10534 <CUSBFunction::GetInterfaceName() const>
    f134:	e2508000 	subs	r8, r0, #0
    f138:	0a0000b2 	beq	f408 <CUSBDevice::Initialize()+0x8c0>
    f13c:	e1a0100b 	mov	r1, fp
    f140:	eb0091a0 	bl	337c8 <CString::Compare(char const*) const>
    f144:	e2503000 	subs	r3, r0, #0
    f148:	e58d3014 	str	r3, [sp, #20]
    f14c:	1a00001a 	bne	f1bc <CUSBDevice::Initialize()+0x674>
    f150:	e5983000 	ldr	r3, [r8]
    f154:	e1a00008 	mov	r0, r8
    f158:	e5933004 	ldr	r3, [r3, #4]
    f15c:	e12fff33 	blx	r3
    f160:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    f164:	e3500000 	cmp	r0, #0
    f168:	0a000004 	beq	f180 <CUSBDevice::Initialize()+0x638>
    f16c:	e5903000 	ldr	r3, [r0]
    f170:	e5933004 	ldr	r3, [r3, #4]
    f174:	e12fff33 	blx	r3
    f178:	e59d3014 	ldr	r3, [sp, #20]
    f17c:	e5863030 	str	r3, [r6, #48]	; 0x30
    f180:	e3a01002 	mov	r1, #2
    f184:	e1a00004 	mov	r0, r4
    f188:	e30b2a4c 	movw	r2, #47692	; 0xba4c
    f18c:	e3402003 	movt	r2, #3
    f190:	ebfffdb9 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f194:	eaffffd9 	b	f100 <CUSBDevice::Initialize()+0x5b8>
    f198:	e1a00004 	mov	r0, r4
    f19c:	e3a01001 	mov	r1, #1
    f1a0:	e30b2950 	movw	r2, #47440	; 0xb950
    f1a4:	e3402003 	movt	r2, #3
    f1a8:	ebfffdb3 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f1ac:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    f1b0:	e3500000 	cmp	r0, #0
    f1b4:	1affff9f 	bne	f038 <CUSBDevice::Initialize()+0x4f0>
    f1b8:	eaffffa0 	b	f040 <CUSBDevice::Initialize()+0x4f8>
    f1bc:	e1a00008 	mov	r0, r8
    f1c0:	eb00911d 	bl	3363c <CString::operator char const*() const>
    f1c4:	e3a01003 	mov	r1, #3
    f1c8:	e1a03000 	mov	r3, r0
    f1cc:	e30b2a38 	movw	r2, #47672	; 0xba38
    f1d0:	e3402003 	movt	r2, #3
    f1d4:	e1a00004 	mov	r0, r4
    f1d8:	ebfffda7 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f1dc:	e1a01008 	mov	r1, r8
    f1e0:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    f1e4:	eb00014a 	bl	f714 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    f1e8:	e1a08000 	mov	r8, r0
    f1ec:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    f1f0:	e3500000 	cmp	r0, #0
    f1f4:	0a000002 	beq	f204 <CUSBDevice::Initialize()+0x6bc>
    f1f8:	e5903000 	ldr	r3, [r0]
    f1fc:	e5933004 	ldr	r3, [r3, #4]
    f200:	e12fff33 	blx	r3
    f204:	e3580000 	cmp	r8, #0
    f208:	1affff51 	bne	ef54 <CUSBDevice::Initialize()+0x40c>
    f20c:	e5868030 	str	r8, [r6, #48]	; 0x30
    f210:	eaffffda 	b	f180 <CUSBDevice::Initialize()+0x638>
    f214:	e5983000 	ldr	r3, [r8]
    f218:	e1a00008 	mov	r0, r8
    f21c:	e5868030 	str	r8, [r6, #48]	; 0x30
    f220:	e5933020 	ldr	r3, [r3, #32]
    f224:	e12fff33 	blx	r3
    f228:	e3500000 	cmp	r0, #0
    f22c:	13a07001 	movne	r7, #1
    f230:	1affff51 	bne	ef7c <CUSBDevice::Initialize()+0x434>
    f234:	e1a00004 	mov	r0, r4
    f238:	e3a01004 	mov	r1, #4
    f23c:	e30b2a68 	movw	r2, #47720	; 0xba68
    f240:	e3402003 	movt	r2, #3
    f244:	ebfffd8c 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f248:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    f24c:	e3500000 	cmp	r0, #0
    f250:	0a000002 	beq	f260 <CUSBDevice::Initialize()+0x718>
    f254:	e5903000 	ldr	r3, [r0]
    f258:	e5933004 	ldr	r3, [r3, #4]
    f25c:	e12fff33 	blx	r3
    f260:	e3a03000 	mov	r3, #0
    f264:	e5863030 	str	r3, [r6, #48]	; 0x30
    f268:	eaffffa4 	b	f100 <CUSBDevice::Initialize()+0x5b8>
    f26c:	e28d0028 	add	r0, sp, #40	; 0x28
    f270:	eb0090f1 	bl	3363c <CString::operator char const*() const>
    f274:	e3a01003 	mov	r1, #3
    f278:	e1a03000 	mov	r3, r0
    f27c:	e30b29d0 	movw	r2, #47568	; 0xb9d0
    f280:	e3402003 	movt	r2, #3
    f284:	e1a00004 	mov	r0, r4
    f288:	ebfffd7b 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f28c:	eafffefb 	b	ee80 <CUSBDevice::Initialize()+0x338>
    f290:	e28d001c 	add	r0, sp, #28
    f294:	eb0022c6 	bl	17db4 <CUSBString::GetLanguageID()>
    f298:	e1a01005 	mov	r1, r5
    f29c:	e1a02000 	mov	r2, r0
    f2a0:	e28d001c 	add	r0, sp, #28
    f2a4:	eb00222b 	bl	17b58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
    f2a8:	e3500000 	cmp	r0, #0
    f2ac:	0afffeef 	beq	ee70 <CUSBDevice::Initialize()+0x328>
    f2b0:	e28d0028 	add	r0, sp, #40	; 0x28
    f2b4:	eb00911e 	bl	33734 <CString::GetLength() const>
    f2b8:	e3500000 	cmp	r0, #0
    f2bc:	1a00005d 	bne	f438 <CUSBDevice::Initialize()+0x8f0>
    f2c0:	e28d001c 	add	r0, sp, #28
    f2c4:	eb0022b8 	bl	17dac <CUSBString::Get() const>
    f2c8:	e1a01000 	mov	r1, r0
    f2cc:	e28d0028 	add	r0, sp, #40	; 0x28
    f2d0:	eb00911b 	bl	33744 <CString::Append(char const*)>
    f2d4:	eafffee5 	b	ee70 <CUSBDevice::Initialize()+0x328>
    f2d8:	e28d001c 	add	r0, sp, #28
    f2dc:	eb0022b4 	bl	17db4 <CUSBString::GetLanguageID()>
    f2e0:	e1a01005 	mov	r1, r5
    f2e4:	e1a02000 	mov	r2, r0
    f2e8:	e28d001c 	add	r0, sp, #28
    f2ec:	eb002219 	bl	17b58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
    f2f0:	e3500000 	cmp	r0, #0
    f2f4:	1a000049 	bne	f420 <CUSBDevice::Initialize()+0x8d8>
    f2f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f2fc:	eafffed6 	b	ee5c <CUSBDevice::Initialize()+0x314>
    f300:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f304:	e3401003 	movt	r1, #3
    f308:	e30b07c8 	movw	r0, #47048	; 0xb7c8
    f30c:	e3400003 	movt	r0, #3
    f310:	e3a02f63 	mov	r2, #396	; 0x18c
    f314:	eb007569 	bl	2c8c0 <assertion_failed>
    f318:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f31c:	e3401003 	movt	r1, #3
    f320:	e30b0a1c 	movw	r0, #47644	; 0xba1c
    f324:	e3400003 	movt	r0, #3
    f328:	e300218d 	movw	r2, #397	; 0x18d
    f32c:	eb007563 	bl	2c8c0 <assertion_failed>
    f330:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f334:	e30b29dc 	movw	r2, #47580	; 0xb9dc
    f338:	e3402003 	movt	r2, #3
    f33c:	e1a00004 	mov	r0, r4
    f340:	e3a01001 	mov	r1, #1
    f344:	e5d33005 	ldrb	r3, [r3, #5]
    f348:	ebfffd4b 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f34c:	e3a05000 	mov	r5, #0
    f350:	e28d001c 	add	r0, sp, #28
    f354:	eb0021ef 	bl	17b18 <CUSBString::~CUSBString()>
    f358:	e28d0028 	add	r0, sp, #40	; 0x28
    f35c:	eb00904b 	bl	33490 <CString::~CString()>
    f360:	eafffe27 	b	ec04 <CUSBDevice::Initialize()+0xbc>
    f364:	e59f10f8 	ldr	r1, [pc, #248]	; f464 <CUSBDevice::Initialize()+0x91c>
    f368:	e1a00004 	mov	r0, r4
    f36c:	ebfffd32 	bl	e83c <CUSBDevice::ConfigurationError(char const*) const>
    f370:	eafffe22 	b	ec00 <CUSBDevice::Initialize()+0xb8>
    f374:	e3570000 	cmp	r7, #0
    f378:	1afffff4 	bne	f350 <CUSBDevice::Initialize()+0x808>
    f37c:	e3a01002 	mov	r1, #2
    f380:	e1a00004 	mov	r0, r4
    f384:	e30b2aa4 	movw	r2, #47780	; 0xbaa4
    f388:	e3402003 	movt	r2, #3
    f38c:	ebfffd3a 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f390:	e5941018 	ldr	r1, [r4, #24]
    f394:	e5940004 	ldr	r0, [r4, #4]
    f398:	e1a02007 	mov	r2, r7
    f39c:	eb0011f6 	bl	13b7c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    f3a0:	e3500000 	cmp	r0, #0
    f3a4:	1affffe8 	bne	f34c <CUSBDevice::Initialize()+0x804>
    f3a8:	e3a01002 	mov	r1, #2
    f3ac:	e1a00004 	mov	r0, r4
    f3b0:	e30b2ac8 	movw	r2, #47816	; 0xbac8
    f3b4:	e3402003 	movt	r2, #3
    f3b8:	ebfffd2f 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f3bc:	eaffffe2 	b	f34c <CUSBDevice::Initialize()+0x804>
    f3c0:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f3c4:	e3401003 	movt	r1, #3
    f3c8:	e30b098c 	movw	r0, #47500	; 0xb98c
    f3cc:	e3400003 	movt	r0, #3
    f3d0:	e300214f 	movw	r2, #335	; 0x14f
    f3d4:	eb007539 	bl	2c8c0 <assertion_failed>
    f3d8:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f3dc:	e3401003 	movt	r1, #3
    f3e0:	e30b07f8 	movw	r0, #47096	; 0xb7f8
    f3e4:	e3400003 	movt	r0, #3
    f3e8:	e3002152 	movw	r2, #338	; 0x152
    f3ec:	eb007533 	bl	2c8c0 <assertion_failed>
    f3f0:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f3f4:	e3401003 	movt	r1, #3
    f3f8:	e30b0974 	movw	r0, #47476	; 0xb974
    f3fc:	e3400003 	movt	r0, #3
    f400:	e3002142 	movw	r2, #322	; 0x142
    f404:	eb00752d 	bl	2c8c0 <assertion_failed>
    f408:	e30b16e8 	movw	r1, #46824	; 0xb6e8
    f40c:	e3401003 	movt	r1, #3
    f410:	e30b0784 	movw	r0, #46980	; 0xb784
    f414:	e3400003 	movt	r0, #3
    f418:	e300219f 	movw	r2, #415	; 0x19f
    f41c:	eb007527 	bl	2c8c0 <assertion_failed>
    f420:	e28d001c 	add	r0, sp, #28
    f424:	eb002260 	bl	17dac <CUSBString::Get() const>
    f428:	e1a01000 	mov	r1, r0
    f42c:	e28d0028 	add	r0, sp, #40	; 0x28
    f430:	eb009087 	bl	33654 <CString::operator=(char const*)>
    f434:	eaffffaf 	b	f2f8 <CUSBDevice::Initialize()+0x7b0>
    f438:	e28d0028 	add	r0, sp, #40	; 0x28
    f43c:	e3011084 	movw	r1, #4228	; 0x1084
    f440:	e3401004 	movt	r1, #4
    f444:	eb0090be 	bl	33744 <CString::Append(char const*)>
    f448:	eaffff9c 	b	f2c0 <CUSBDevice::Initialize()+0x778>
    f44c:	e1a00004 	mov	r0, r4
    f450:	e3a01002 	mov	r1, #2
    f454:	e30b2a84 	movw	r2, #47748	; 0xba84
    f458:	e3402003 	movt	r2, #3
    f45c:	ebfffd06 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f460:	eaffffba 	b	f350 <CUSBDevice::Initialize()+0x808>
    f464:	0003bb10 	.word	0x0003bb10

0000f468 <CUSBHostController::CancelDeviceTransactions(CUSBDevice*)>:
    f468:	e12fff1e 	bx	lr

0000f46c <_GLOBAL__sub_I__ZN10CUSBDevice19s_DeviceAddressPoolE>:
    f46c:	e92d4010 	push	{r4, lr}
    f470:	e3044e70 	movw	r4, #20080	; 0x4e70
    f474:	e3404004 	movt	r4, #4
    f478:	e3a0203f 	mov	r2, #63	; 0x3f
    f47c:	e3a01001 	mov	r1, #1
    f480:	e1a00004 	mov	r0, r4
    f484:	eb009f3f 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
    f488:	e1a00004 	mov	r0, r4
    f48c:	e3042f78 	movw	r2, #20344	; 0x4f78
    f490:	e3402004 	movt	r2, #4
    f494:	e30711d8 	movw	r1, #29144	; 0x71d8
    f498:	e3401003 	movt	r1, #3
    f49c:	e8bd4010 	pop	{r4, lr}
    f4a0:	ea009603 	b	34cb4 <__aeabi_atexit>

0000f4a4 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>:
    f4a4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f4a8:	e1a06000 	mov	r6, r0
    f4ac:	e1a01006 	mov	r1, r6
    f4b0:	e28db01c 	add	fp, sp, #28
    f4b4:	e24dd028 	sub	sp, sp, #40	; 0x28
    f4b8:	e24b0030 	sub	r0, fp, #48	; 0x30
    f4bc:	eb0003e2 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
    f4c0:	e3a01021 	mov	r1, #33	; 0x21
    f4c4:	e24b0030 	sub	r0, fp, #48	; 0x30
    f4c8:	eb000463 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
    f4cc:	e2507000 	subs	r7, r0, #0
    f4d0:	0a000055 	beq	f62c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x188>
    f4d4:	e1d740b7 	ldrh	r4, [r7, #7]
    f4d8:	e3540000 	cmp	r4, #0
    f4dc:	0a000052 	beq	f62c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x188>
    f4e0:	e2443001 	sub	r3, r4, #1
    f4e4:	e24b0030 	sub	r0, fp, #48	; 0x30
    f4e8:	e383303f 	orr	r3, r3, #63	; 0x3f
    f4ec:	e2833040 	add	r3, r3, #64	; 0x40
    f4f0:	e3c33007 	bic	r3, r3, #7
    f4f4:	e04dd003 	sub	sp, sp, r3
    f4f8:	eb00044c 	bl	10630 <CUSBFunction::GetHost() const>
    f4fc:	e1a08000 	mov	r8, r0
    f500:	e24b0030 	sub	r0, fp, #48	; 0x30
    f504:	e28d504f 	add	r5, sp, #79	; 0x4f
    f508:	eb00043d 	bl	10604 <CUSBFunction::GetEndpoint0() const>
    f50c:	e5d79006 	ldrb	r9, [r7, #6]
    f510:	e1a07000 	mov	r7, r0
    f514:	e24b0030 	sub	r0, fp, #48	; 0x30
    f518:	eb0004a3 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
    f51c:	e3c5503f 	bic	r5, r5, #63	; 0x3f
    f520:	e3a03081 	mov	r3, #129	; 0x81
    f524:	e58d000c 	str	r0, [sp, #12]
    f528:	e58d3008 	str	r3, [sp, #8]
    f52c:	e1a02009 	mov	r2, r9
    f530:	e1a01007 	mov	r1, r7
    f534:	e1a00008 	mov	r0, r8
    f538:	e3a03000 	mov	r3, #0
    f53c:	e58d4004 	str	r4, [sp, #4]
    f540:	e58d5000 	str	r5, [sp]
    f544:	eb00116d 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    f548:	e1500004 	cmp	r0, r4
    f54c:	0a000006 	beq	f56c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xc8>
    f550:	ea000042 	b	f660 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1bc>
    f554:	e3520001 	cmp	r2, #1
    f558:	0a000029 	beq	f604 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x160>
    f55c:	e2855001 	add	r5, r5, #1
    f560:	e6ff4071 	uxth	r4, r1
    f564:	e3540000 	cmp	r4, #0
    f568:	0a000035 	beq	f644 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1a0>
    f56c:	e5d53000 	ldrb	r3, [r5]
    f570:	e2032003 	and	r2, r3, #3
    f574:	e3520002 	cmp	r2, #2
    f578:	0a000017 	beq	f5dc <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x138>
    f57c:	e2441001 	sub	r1, r4, #1
    f580:	e3520003 	cmp	r2, #3
    f584:	1afffff2 	bne	f554 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xb0>
    f588:	e5952001 	ldr	r2, [r5, #1]
    f58c:	e20330fc 	and	r3, r3, #252	; 0xfc
    f590:	e2444005 	sub	r4, r4, #5
    f594:	e2855005 	add	r5, r5, #5
    f598:	e352000d 	cmp	r2, #13
    f59c:	03530004 	cmpeq	r3, #4
    f5a0:	e6ff4074 	uxth	r4, r4
    f5a4:	03a03001 	moveq	r3, #1
    f5a8:	13a03000 	movne	r3, #0
    f5ac:	e3530000 	cmp	r3, #0
    f5b0:	0affffeb 	beq	f564 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xc0>
    f5b4:	e3a00f82 	mov	r0, #520	; 0x208
    f5b8:	eb009db7 	bl	36c9c <operator new(unsigned int)>
    f5bc:	e1a01006 	mov	r1, r6
    f5c0:	e1a04000 	mov	r4, r0
    f5c4:	eb0029c2 	bl	19cd4 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>
    f5c8:	e24b0030 	sub	r0, fp, #48	; 0x30
    f5cc:	eb0002f5 	bl	101a8 <CUSBFunction::~CUSBFunction()>
    f5d0:	e1a00004 	mov	r0, r4
    f5d4:	e24bd01c 	sub	sp, fp, #28
    f5d8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    f5dc:	e1d520b1 	ldrh	r2, [r5, #1]
    f5e0:	e20330fc 	and	r3, r3, #252	; 0xfc
    f5e4:	e2444003 	sub	r4, r4, #3
    f5e8:	e2855003 	add	r5, r5, #3
    f5ec:	e352000d 	cmp	r2, #13
    f5f0:	03530004 	cmpeq	r3, #4
    f5f4:	e6ff4074 	uxth	r4, r4
    f5f8:	03a03001 	moveq	r3, #1
    f5fc:	13a03000 	movne	r3, #0
    f600:	eaffffe9 	b	f5ac <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x108>
    f604:	e5d52001 	ldrb	r2, [r5, #1]
    f608:	e20330fc 	and	r3, r3, #252	; 0xfc
    f60c:	e2444002 	sub	r4, r4, #2
    f610:	e2855002 	add	r5, r5, #2
    f614:	e352000d 	cmp	r2, #13
    f618:	03530004 	cmpeq	r3, #4
    f61c:	e6ff4074 	uxth	r4, r4
    f620:	03a03001 	moveq	r3, #1
    f624:	13a03000 	movne	r3, #0
    f628:	eaffffdf 	b	f5ac <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x108>
    f62c:	e30b1b28 	movw	r1, #47912	; 0xbb28
    f630:	e3401003 	movt	r1, #3
    f634:	e24b0030 	sub	r0, fp, #48	; 0x30
    f638:	eb000412 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
    f63c:	e3a04000 	mov	r4, #0
    f640:	eaffffe0 	b	f5c8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x124>
    f644:	e3a00f4f 	mov	r0, #316	; 0x13c
    f648:	eb009d93 	bl	36c9c <operator new(unsigned int)>
    f64c:	e3a02001 	mov	r2, #1
    f650:	e1a01006 	mov	r1, r6
    f654:	e1a04000 	mov	r4, r0
    f658:	eb000888 	bl	11880 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    f65c:	eaffffd9 	b	f5c8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x124>
    f660:	e24b0030 	sub	r0, fp, #48	; 0x30
    f664:	eb0003dc 	bl	105dc <CUSBFunction::GetDevice() const>
    f668:	e3a01001 	mov	r1, #1
    f66c:	e30b2b30 	movw	r2, #47920	; 0xbb30
    f670:	e3402003 	movt	r2, #3
    f674:	ebfffc80 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f678:	eaffffef 	b	f63c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x198>

0000f67c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>:
    f67c:	e92d4070 	push	{r4, r5, r6, lr}
    f680:	e30b6764 	movw	r6, #46948	; 0xb764
    f684:	e3406003 	movt	r6, #3
    f688:	e24dd010 	sub	sp, sp, #16
    f68c:	e1a05000 	mov	r5, r0
    f690:	e2814004 	add	r4, r1, #4
    f694:	ea000000 	b	f69c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x20>
    f698:	eb008f7c 	bl	33490 <CString::~CString()>
    f69c:	e15430b4 	ldrh	r3, [r4, #-4]
    f6a0:	e1a0000d 	mov	r0, sp
    f6a4:	e3530000 	cmp	r3, #0
    f6a8:	1a000002 	bne	f6b8 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x3c>
    f6ac:	e15430b2 	ldrh	r3, [r4, #-2]
    f6b0:	e3530000 	cmp	r3, #0
    f6b4:	0a000013 	beq	f708 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x8c>
    f6b8:	eb008fa7 	bl	3355c <CString::CString()>
    f6bc:	e15430b2 	ldrh	r3, [r4, #-2]
    f6c0:	e15420b4 	ldrh	r2, [r4, #-4]
    f6c4:	e1a01006 	mov	r1, r6
    f6c8:	e1a0000d 	mov	r0, sp
    f6cc:	e2844004 	add	r4, r4, #4
    f6d0:	eb00956c 	bl	34c88 <CString::Format(char const*, ...)>
    f6d4:	e1a0000d 	mov	r0, sp
    f6d8:	eb008fd7 	bl	3363c <CString::operator char const*() const>
    f6dc:	e1a01000 	mov	r1, r0
    f6e0:	e1a00005 	mov	r0, r5
    f6e4:	eb009037 	bl	337c8 <CString::Compare(char const*) const>
    f6e8:	e1a03000 	mov	r3, r0
    f6ec:	e3530000 	cmp	r3, #0
    f6f0:	e1a0000d 	mov	r0, sp
    f6f4:	1affffe7 	bne	f698 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x1c>
    f6f8:	eb008f64 	bl	33490 <CString::~CString()>
    f6fc:	e3a00001 	mov	r0, #1
    f700:	e28dd010 	add	sp, sp, #16
    f704:	e8bd8070 	pop	{r4, r5, r6, pc}
    f708:	e1a00003 	mov	r0, r3
    f70c:	e28dd010 	add	sp, sp, #16
    f710:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f714 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    f714:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f718:	e2507000 	subs	r7, r0, #0
    f71c:	e24dd00c 	sub	sp, sp, #12
    f720:	0a000057 	beq	f884 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x170>
    f724:	e1a04001 	mov	r4, r1
    f728:	e3510000 	cmp	r1, #0
    f72c:	0a00005a 	beq	f89c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x188>
    f730:	eb007ccf 	bl	2ea74 <CKernelOptions::Get()>
    f734:	eb007ca6 	bl	2e9d4 <CKernelOptions::GetUSBIgnore() const>
    f738:	e2505000 	subs	r5, r0, #0
    f73c:	0a00005c 	beq	f8b4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a0>
    f740:	e1a01005 	mov	r1, r5
    f744:	e1a00004 	mov	r0, r4
    f748:	eb00901e 	bl	337c8 <CString::Compare(char const*) const>
    f74c:	e2506000 	subs	r6, r0, #0
    f750:	0a00003f 	beq	f854 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x140>
    f754:	e1a00004 	mov	r0, r4
    f758:	e30b1bb8 	movw	r1, #48056	; 0xbbb8
    f75c:	e3401003 	movt	r1, #3
    f760:	eb009018 	bl	337c8 <CString::Compare(char const*) const>
    f764:	e3500000 	cmp	r0, #0
    f768:	1a000016 	bne	f7c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xb4>
    f76c:	e3a00074 	mov	r0, #116	; 0x74
    f770:	eb009d49 	bl	36c9c <operator new(unsigned int)>
    f774:	e1a01007 	mov	r1, r7
    f778:	e1a05000 	mov	r5, r0
    f77c:	eb001c92 	bl	169cc <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    f780:	e1a00005 	mov	r0, r5
    f784:	eb000394 	bl	105dc <CUSBFunction::GetDevice() const>
    f788:	e1a06000 	mov	r6, r0
    f78c:	e1a00004 	mov	r0, r4
    f790:	eb008fa9 	bl	3363c <CString::operator char const*() const>
    f794:	e30b2d30 	movw	r2, #48432	; 0xbd30
    f798:	e3402003 	movt	r2, #3
    f79c:	e1a03000 	mov	r3, r0
    f7a0:	e3a01003 	mov	r1, #3
    f7a4:	e1a00006 	mov	r0, r6
    f7a8:	ebfffc33 	bl	e87c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f7ac:	e5943000 	ldr	r3, [r4]
    f7b0:	e1a00004 	mov	r0, r4
    f7b4:	e5933004 	ldr	r3, [r3, #4]
    f7b8:	e12fff33 	blx	r3
    f7bc:	e1a00005 	mov	r0, r5
    f7c0:	e28dd00c 	add	sp, sp, #12
    f7c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f7c8:	e1a00004 	mov	r0, r4
    f7cc:	e30b1bc4 	movw	r1, #48068	; 0xbbc4
    f7d0:	e3401003 	movt	r1, #3
    f7d4:	eb008ffb 	bl	337c8 <CString::Compare(char const*) const>
    f7d8:	e3500000 	cmp	r0, #0
    f7dc:	0affffe2 	beq	f76c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x58>
    f7e0:	e1a00004 	mov	r0, r4
    f7e4:	e30b1bd0 	movw	r1, #48080	; 0xbbd0
    f7e8:	e3401003 	movt	r1, #3
    f7ec:	eb008ff5 	bl	337c8 <CString::Compare(char const*) const>
    f7f0:	e3500000 	cmp	r0, #0
    f7f4:	0a000034 	beq	f8cc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b8>
    f7f8:	e1a00004 	mov	r0, r4
    f7fc:	e30b1bdc 	movw	r1, #48092	; 0xbbdc
    f800:	e3401003 	movt	r1, #3
    f804:	eb008fef 	bl	337c8 <CString::Compare(char const*) const>
    f808:	e2505000 	subs	r5, r0, #0
    f80c:	1a000034 	bne	f8e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d0>
    f810:	e1a00007 	mov	r0, r7
    f814:	eb000370 	bl	105dc <CUSBFunction::GetDevice() const>
    f818:	e1a01005 	mov	r1, r5
    f81c:	ebfffb3f 	bl	e520 <CUSBDevice::GetName(TDeviceNameSelector) const>
    f820:	e2506000 	subs	r6, r0, #0
    f824:	0a000065 	beq	f9c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2ac>
    f828:	e30b1bf8 	movw	r1, #48120	; 0xbbf8
    f82c:	e3401003 	movt	r1, #3
    f830:	eb008fe4 	bl	337c8 <CString::Compare(char const*) const>
    f834:	e3500000 	cmp	r0, #0
    f838:	1a000056 	bne	f998 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x284>
    f83c:	e5963000 	ldr	r3, [r6]
    f840:	e1a00006 	mov	r0, r6
    f844:	e5933004 	ldr	r3, [r3, #4]
    f848:	e12fff33 	blx	r3
    f84c:	e3a05000 	mov	r5, #0
    f850:	eaffffd5 	b	f7ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x98>
    f854:	eb007e96 	bl	2f2b4 <CLogger::Get()>
    f858:	e58d5000 	str	r5, [sp]
    f85c:	e3a02002 	mov	r2, #2
    f860:	e1a05006 	mov	r5, r6
    f864:	e30b3b8c 	movw	r3, #48012	; 0xbb8c
    f868:	e3403003 	movt	r3, #3
    f86c:	e30b1bac 	movw	r1, #48044	; 0xbbac
    f870:	e3401003 	movt	r1, #3
    f874:	eb00805c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f878:	e1a00005 	mov	r0, r5
    f87c:	e28dd00c 	add	sp, sp, #12
    f880:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f884:	e30b1b54 	movw	r1, #47956	; 0xbb54
    f888:	e3401003 	movt	r1, #3
    f88c:	e30b0b6c 	movw	r0, #47980	; 0xbb6c
    f890:	e3400003 	movt	r0, #3
    f894:	e3a02038 	mov	r2, #56	; 0x38
    f898:	eb007408 	bl	2c8c0 <assertion_failed>
    f89c:	e30b1b54 	movw	r1, #47956	; 0xbb54
    f8a0:	e3401003 	movt	r1, #3
    f8a4:	e30b0784 	movw	r0, #46980	; 0xb784
    f8a8:	e3400003 	movt	r0, #3
    f8ac:	e3a02039 	mov	r2, #57	; 0x39
    f8b0:	eb007402 	bl	2c8c0 <assertion_failed>
    f8b4:	e30b1b54 	movw	r1, #47956	; 0xbb54
    f8b8:	e3401003 	movt	r1, #3
    f8bc:	e30b0b7c 	movw	r0, #47996	; 0xbb7c
    f8c0:	e3400003 	movt	r0, #3
    f8c4:	e3a0203c 	mov	r2, #60	; 0x3c
    f8c8:	eb0073fc 	bl	2c8c0 <assertion_failed>
    f8cc:	e3a00038 	mov	r0, #56	; 0x38
    f8d0:	eb009cf1 	bl	36c9c <operator new(unsigned int)>
    f8d4:	e1a01007 	mov	r1, r7
    f8d8:	e1a05000 	mov	r5, r0
    f8dc:	eb0012e5 	bl	14478 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    f8e0:	eaffffa6 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f8e4:	e1a00004 	mov	r0, r4
    f8e8:	e30b1c04 	movw	r1, #48132	; 0xbc04
    f8ec:	e3401003 	movt	r1, #3
    f8f0:	eb008fb4 	bl	337c8 <CString::Compare(char const*) const>
    f8f4:	e3500000 	cmp	r0, #0
    f8f8:	1a000005 	bne	f914 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x200>
    f8fc:	e3a00058 	mov	r0, #88	; 0x58
    f900:	eb009ce5 	bl	36c9c <operator new(unsigned int)>
    f904:	e1a01007 	mov	r1, r7
    f908:	e1a05000 	mov	r5, r0
    f90c:	eb00180f 	bl	15950 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    f910:	eaffff9a 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f914:	e1a00004 	mov	r0, r4
    f918:	e30b1c10 	movw	r1, #48144	; 0xbc10
    f91c:	e3401003 	movt	r1, #3
    f920:	eb008fa8 	bl	337c8 <CString::Compare(char const*) const>
    f924:	e3500000 	cmp	r0, #0
    f928:	0a000005 	beq	f944 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x230>
    f92c:	e1a00004 	mov	r0, r4
    f930:	e30b1c1c 	movw	r1, #48156	; 0xbc1c
    f934:	e3401003 	movt	r1, #3
    f938:	eb008fa2 	bl	337c8 <CString::Compare(char const*) const>
    f93c:	e3500000 	cmp	r0, #0
    f940:	1a000024 	bne	f9d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c4>
    f944:	e1a00007 	mov	r0, r7
    f948:	eb000323 	bl	105dc <CUSBFunction::GetDevice() const>
    f94c:	e3a01000 	mov	r1, #0
    f950:	ebfffaf2 	bl	e520 <CUSBDevice::GetName(TDeviceNameSelector) const>
    f954:	e2506000 	subs	r6, r0, #0
    f958:	0a00002a 	beq	fa08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2f4>
    f95c:	e30b1c34 	movw	r1, #48180	; 0xbc34
    f960:	e3401003 	movt	r1, #3
    f964:	eb008f97 	bl	337c8 <CString::Compare(char const*) const>
    f968:	e3500000 	cmp	r0, #0
    f96c:	0affffb2 	beq	f83c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x128>
    f970:	e1a00007 	mov	r0, r7
    f974:	ebfffeca 	bl	f4a4 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>
    f978:	e5963000 	ldr	r3, [r6]
    f97c:	e1a05000 	mov	r5, r0
    f980:	e1a00006 	mov	r0, r6
    f984:	e5933004 	ldr	r3, [r3, #4]
    f988:	e12fff33 	blx	r3
    f98c:	e3550000 	cmp	r5, #0
    f990:	1affff7a 	bne	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f994:	eaffffac 	b	f84c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    f998:	e3000554 	movw	r0, #1364	; 0x554
    f99c:	eb009cbe 	bl	36c9c <operator new(unsigned int)>
    f9a0:	e1a01007 	mov	r1, r7
    f9a4:	e1a05000 	mov	r5, r0
    f9a8:	eb00119f 	bl	1402c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    f9ac:	e5963000 	ldr	r3, [r6]
    f9b0:	e1a00006 	mov	r0, r6
    f9b4:	e5933004 	ldr	r3, [r3, #4]
    f9b8:	e12fff33 	blx	r3
    f9bc:	eaffff6f 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f9c0:	e30b1b54 	movw	r1, #47956	; 0xbb54
    f9c4:	e3401003 	movt	r1, #3
    f9c8:	e30b0be8 	movw	r0, #48104	; 0xbbe8
    f9cc:	e3400003 	movt	r0, #3
    f9d0:	e3a02053 	mov	r2, #83	; 0x53
    f9d4:	eb0073b9 	bl	2c8c0 <assertion_failed>
    f9d8:	e1a00004 	mov	r0, r4
    f9dc:	e30b1c28 	movw	r1, #48168	; 0xbc28
    f9e0:	e3401003 	movt	r1, #3
    f9e4:	eb008f77 	bl	337c8 <CString::Compare(char const*) const>
    f9e8:	e3500000 	cmp	r0, #0
    f9ec:	1a00000b 	bne	fa20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x30c>
    f9f0:	e3a00d06 	mov	r0, #384	; 0x180
    f9f4:	eb009ca8 	bl	36c9c <operator new(unsigned int)>
    f9f8:	e1a01007 	mov	r1, r7
    f9fc:	e1a05000 	mov	r5, r0
    fa00:	eb00040e 	bl	10a40 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    fa04:	eaffff5d 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fa08:	e30b1b54 	movw	r1, #47956	; 0xbb54
    fa0c:	e3401003 	movt	r1, #3
    fa10:	e30b0be8 	movw	r0, #48104	; 0xbbe8
    fa14:	e3400003 	movt	r0, #3
    fa18:	e3a02064 	mov	r2, #100	; 0x64
    fa1c:	eb0073a7 	bl	2c8c0 <assertion_failed>
    fa20:	e1a00004 	mov	r0, r4
    fa24:	e30b1c40 	movw	r1, #48192	; 0xbc40
    fa28:	e3401003 	movt	r1, #3
    fa2c:	eb008f65 	bl	337c8 <CString::Compare(char const*) const>
    fa30:	e3500000 	cmp	r0, #0
    fa34:	0a000005 	beq	fa50 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x33c>
    fa38:	e1a00004 	mov	r0, r4
    fa3c:	e30b1c4c 	movw	r1, #48204	; 0xbc4c
    fa40:	e3401003 	movt	r1, #3
    fa44:	eb008f5f 	bl	337c8 <CString::Compare(char const*) const>
    fa48:	e3500000 	cmp	r0, #0
    fa4c:	1a000005 	bne	fa68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x354>
    fa50:	e3a00f53 	mov	r0, #332	; 0x14c
    fa54:	eb009c90 	bl	36c9c <operator new(unsigned int)>
    fa58:	e1a01007 	mov	r1, r7
    fa5c:	e1a05000 	mov	r5, r0
    fa60:	eb00063a 	bl	11350 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    fa64:	eaffff45 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fa68:	e1a00004 	mov	r0, r4
    fa6c:	e30b1c58 	movw	r1, #48216	; 0xbc58
    fa70:	e3401003 	movt	r1, #3
    fa74:	eb008f53 	bl	337c8 <CString::Compare(char const*) const>
    fa78:	e3500000 	cmp	r0, #0
    fa7c:	0a000005 	beq	fa98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x384>
    fa80:	e1a00004 	mov	r0, r4
    fa84:	e30b1c64 	movw	r1, #48228	; 0xbc64
    fa88:	e3401003 	movt	r1, #3
    fa8c:	eb008f4d 	bl	337c8 <CString::Compare(char const*) const>
    fa90:	e3500000 	cmp	r0, #0
    fa94:	1a000005 	bne	fab0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x39c>
    fa98:	e3a00e13 	mov	r0, #304	; 0x130
    fa9c:	eb009c7e 	bl	36c9c <operator new(unsigned int)>
    faa0:	e1a01007 	mov	r1, r7
    faa4:	e1a05000 	mov	r5, r0
    faa8:	eb000bcd 	bl	129e4 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    faac:	eaffff33 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fab0:	e1a00004 	mov	r0, r4
    fab4:	e30b1c70 	movw	r1, #48240	; 0xbc70
    fab8:	e3401003 	movt	r1, #3
    fabc:	eb008f41 	bl	337c8 <CString::Compare(char const*) const>
    fac0:	e3500000 	cmp	r0, #0
    fac4:	0a000005 	beq	fae0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3cc>
    fac8:	e1a00004 	mov	r0, r4
    facc:	e30b1c7c 	movw	r1, #48252	; 0xbc7c
    fad0:	e3401003 	movt	r1, #3
    fad4:	eb008f3b 	bl	337c8 <CString::Compare(char const*) const>
    fad8:	e3500000 	cmp	r0, #0
    fadc:	1a000005 	bne	faf8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3e4>
    fae0:	e3a00f4d 	mov	r0, #308	; 0x134
    fae4:	eb009c6c 	bl	36c9c <operator new(unsigned int)>
    fae8:	e1a01007 	mov	r1, r7
    faec:	e1a05000 	mov	r5, r0
    faf0:	eb000cf6 	bl	12ed0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    faf4:	eaffff21 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    faf8:	e1a00004 	mov	r0, r4
    fafc:	e30b1c88 	movw	r1, #48264	; 0xbc88
    fb00:	e3401003 	movt	r1, #3
    fb04:	eb008f2f 	bl	337c8 <CString::Compare(char const*) const>
    fb08:	e3500000 	cmp	r0, #0
    fb0c:	0afffff3 	beq	fae0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3cc>
    fb10:	e1a00004 	mov	r0, r4
    fb14:	e30b1c94 	movw	r1, #48276	; 0xbc94
    fb18:	e3401003 	movt	r1, #3
    fb1c:	eb008f29 	bl	337c8 <CString::Compare(char const*) const>
    fb20:	e3500000 	cmp	r0, #0
    fb24:	0affffed 	beq	fae0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3cc>
    fb28:	e1a00004 	mov	r0, r4
    fb2c:	e30b1ca0 	movw	r1, #48288	; 0xbca0
    fb30:	e3401003 	movt	r1, #3
    fb34:	eb008f23 	bl	337c8 <CString::Compare(char const*) const>
    fb38:	e3500000 	cmp	r0, #0
    fb3c:	1a000005 	bne	fb58 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    fb40:	e3a00f4d 	mov	r0, #308	; 0x134
    fb44:	eb009c54 	bl	36c9c <operator new(unsigned int)>
    fb48:	e1a01007 	mov	r1, r7
    fb4c:	e1a05000 	mov	r5, r0
    fb50:	eb000a27 	bl	123f4 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    fb54:	eaffff09 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fb58:	e1a00004 	mov	r0, r4
    fb5c:	e30b1cac 	movw	r1, #48300	; 0xbcac
    fb60:	e3401003 	movt	r1, #3
    fb64:	eb008f17 	bl	337c8 <CString::Compare(char const*) const>
    fb68:	e3500000 	cmp	r0, #0
    fb6c:	0a000005 	beq	fb88 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x474>
    fb70:	e1a00004 	mov	r0, r4
    fb74:	e30b1cb8 	movw	r1, #48312	; 0xbcb8
    fb78:	e3401003 	movt	r1, #3
    fb7c:	eb008f11 	bl	337c8 <CString::Compare(char const*) const>
    fb80:	e3500000 	cmp	r0, #0
    fb84:	1a000005 	bne	fba0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48c>
    fb88:	e3a00024 	mov	r0, #36	; 0x24
    fb8c:	eb009c42 	bl	36c9c <operator new(unsigned int)>
    fb90:	e1a01007 	mov	r1, r7
    fb94:	e1a05000 	mov	r5, r0
    fb98:	eb001980 	bl	161a0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    fb9c:	eafffef7 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fba0:	e1a00004 	mov	r0, r4
    fba4:	e30b1cc4 	movw	r1, #48324	; 0xbcc4
    fba8:	e3401003 	movt	r1, #3
    fbac:	eb008f05 	bl	337c8 <CString::Compare(char const*) const>
    fbb0:	e3500000 	cmp	r0, #0
    fbb4:	1a000005 	bne	fbd0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4bc>
    fbb8:	e3a00028 	mov	r0, #40	; 0x28
    fbbc:	eb009c36 	bl	36c9c <operator new(unsigned int)>
    fbc0:	e1a01007 	mov	r1, r7
    fbc4:	e1a05000 	mov	r5, r0
    fbc8:	eb002fbe 	bl	1bac8 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    fbcc:	eafffeeb 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fbd0:	e1a00004 	mov	r0, r4
    fbd4:	e30b1cd0 	movw	r1, #48336	; 0xbcd0
    fbd8:	e3401003 	movt	r1, #3
    fbdc:	eb008ef9 	bl	337c8 <CString::Compare(char const*) const>
    fbe0:	e3500000 	cmp	r0, #0
    fbe4:	1a000005 	bne	fc00 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4ec>
    fbe8:	e3a00028 	mov	r0, #40	; 0x28
    fbec:	eb009c2a 	bl	36c9c <operator new(unsigned int)>
    fbf0:	e1a01007 	mov	r1, r7
    fbf4:	e1a05000 	mov	r5, r0
    fbf8:	eb002c06 	bl	1ac18 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    fbfc:	eafffedf 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fc00:	e1a00004 	mov	r0, r4
    fc04:	e30b1cdc 	movw	r1, #48348	; 0xbcdc
    fc08:	e3401003 	movt	r1, #3
    fc0c:	eb008eed 	bl	337c8 <CString::Compare(char const*) const>
    fc10:	e3500000 	cmp	r0, #0
    fc14:	0a000005 	beq	fc30 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x51c>
    fc18:	e1a00004 	mov	r0, r4
    fc1c:	e30b1ce8 	movw	r1, #48360	; 0xbce8
    fc20:	e3401003 	movt	r1, #3
    fc24:	eb008ee7 	bl	337c8 <CString::Compare(char const*) const>
    fc28:	e3500000 	cmp	r0, #0
    fc2c:	1a000005 	bne	fc48 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x534>
    fc30:	e3a0002c 	mov	r0, #44	; 0x2c
    fc34:	eb009c18 	bl	36c9c <operator new(unsigned int)>
    fc38:	e1a01007 	mov	r1, r7
    fc3c:	e1a05000 	mov	r5, r0
    fc40:	eb003374 	bl	1ca18 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    fc44:	eafffecd 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fc48:	e1a00004 	mov	r0, r4
    fc4c:	e30b1cf4 	movw	r1, #48372	; 0xbcf4
    fc50:	e3401003 	movt	r1, #3
    fc54:	eb008edb 	bl	337c8 <CString::Compare(char const*) const>
    fc58:	e3500000 	cmp	r0, #0
    fc5c:	0a000005 	beq	fc78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x564>
    fc60:	e1a00004 	mov	r0, r4
    fc64:	e30b1d00 	movw	r1, #48384	; 0xbd00
    fc68:	e3401003 	movt	r1, #3
    fc6c:	eb008ed5 	bl	337c8 <CString::Compare(char const*) const>
    fc70:	e3500000 	cmp	r0, #0
    fc74:	1a000005 	bne	fc90 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x57c>
    fc78:	e3a0002c 	mov	r0, #44	; 0x2c
    fc7c:	eb009c06 	bl	36c9c <operator new(unsigned int)>
    fc80:	e1a01007 	mov	r1, r7
    fc84:	e1a05000 	mov	r5, r0
    fc88:	eb00159e 	bl	15308 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>
    fc8c:	eafffebb 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fc90:	e1a00004 	mov	r0, r4
    fc94:	e30b1d0c 	movw	r1, #48396	; 0xbd0c
    fc98:	e3401003 	movt	r1, #3
    fc9c:	eb008ec9 	bl	337c8 <CString::Compare(char const*) const>
    fca0:	e3500000 	cmp	r0, #0
    fca4:	1a000005 	bne	fcc0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5ac>
    fca8:	e3a00028 	mov	r0, #40	; 0x28
    fcac:	eb009bfa 	bl	36c9c <operator new(unsigned int)>
    fcb0:	e1a01007 	mov	r1, r7
    fcb4:	e1a05000 	mov	r5, r0
    fcb8:	eb003532 	bl	1d188 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    fcbc:	eafffeaf 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fcc0:	e1a00004 	mov	r0, r4
    fcc4:	e30b1d18 	movw	r1, #48408	; 0xbd18
    fcc8:	e3401003 	movt	r1, #3
    fccc:	eb008ebd 	bl	337c8 <CString::Compare(char const*) const>
    fcd0:	e3500000 	cmp	r0, #0
    fcd4:	0a000005 	beq	fcf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5dc>
    fcd8:	e1a00004 	mov	r0, r4
    fcdc:	e30b1d24 	movw	r1, #48420	; 0xbd24
    fce0:	e3401003 	movt	r1, #3
    fce4:	eb008eb7 	bl	337c8 <CString::Compare(char const*) const>
    fce8:	e3500000 	cmp	r0, #0
    fcec:	1a000005 	bne	fd08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5f4>
    fcf0:	e3a00044 	mov	r0, #68	; 0x44
    fcf4:	eb009be8 	bl	36c9c <operator new(unsigned int)>
    fcf8:	e1a01007 	mov	r1, r7
    fcfc:	e1a05000 	mov	r5, r0
    fd00:	eb002762 	bl	19a90 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>
    fd04:	eafffe9d 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fd08:	eb0020ef 	bl	180cc <CUSBSerialCH341Device::GetDeviceIDTable()>
    fd0c:	e1a01000 	mov	r1, r0
    fd10:	e1a00004 	mov	r0, r4
    fd14:	ebfffe58 	bl	f67c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fd18:	e3500000 	cmp	r0, #0
    fd1c:	0a000005 	beq	fd38 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x624>
    fd20:	e3a00040 	mov	r0, #64	; 0x40
    fd24:	eb009bdc 	bl	36c9c <operator new(unsigned int)>
    fd28:	e1a01007 	mov	r1, r7
    fd2c:	e1a05000 	mov	r5, r0
    fd30:	eb0020dc 	bl	180a8 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>
    fd34:	eafffe91 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fd38:	eb002244 	bl	18650 <CUSBSerialCP210xDevice::GetDeviceIDTable()>
    fd3c:	e1a01000 	mov	r1, r0
    fd40:	e1a00004 	mov	r0, r4
    fd44:	ebfffe4c 	bl	f67c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fd48:	e3500000 	cmp	r0, #0
    fd4c:	0a000005 	beq	fd68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x654>
    fd50:	e3a00044 	mov	r0, #68	; 0x44
    fd54:	eb009bd0 	bl	36c9c <operator new(unsigned int)>
    fd58:	e1a01007 	mov	r1, r7
    fd5c:	e1a05000 	mov	r5, r0
    fd60:	eb00222f 	bl	18624 <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>
    fd64:	eafffe85 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fd68:	eb0023c0 	bl	18c70 <CUSBSerialPL2303Device::GetDeviceIDTable()>
    fd6c:	e1a01000 	mov	r1, r0
    fd70:	e1a00004 	mov	r0, r4
    fd74:	ebfffe40 	bl	f67c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fd78:	e3500000 	cmp	r0, #0
    fd7c:	0a000005 	beq	fd98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x684>
    fd80:	e3a00040 	mov	r0, #64	; 0x40
    fd84:	eb009bc4 	bl	36c9c <operator new(unsigned int)>
    fd88:	e1a01007 	mov	r1, r7
    fd8c:	e1a05000 	mov	r5, r0
    fd90:	eb0023ad 	bl	18c4c <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>
    fd94:	eafffe79 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fd98:	eb00261d 	bl	19614 <CUSBSerialFT231XDevice::GetDeviceIDTable()>
    fd9c:	e1a01000 	mov	r1, r0
    fda0:	e1a00004 	mov	r0, r4
    fda4:	ebfffe34 	bl	f67c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fda8:	e3500000 	cmp	r0, #0
    fdac:	0afffea6 	beq	f84c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    fdb0:	e3a00040 	mov	r0, #64	; 0x40
    fdb4:	eb009bb8 	bl	36c9c <operator new(unsigned int)>
    fdb8:	e1a01007 	mov	r1, r7
    fdbc:	e1a05000 	mov	r5, r0
    fdc0:	eb00260a 	bl	195f0 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>
    fdc4:	eafffe6d 	b	f780 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>

0000fdc8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    fdc8:	e3a02000 	mov	r2, #0
    fdcc:	eddf0b0f 	vldr	d16, [pc, #60]	; fe10 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x48>
    fdd0:	e280c008 	add	ip, r0, #8
    fdd4:	e1510002 	cmp	r1, r2
    fdd8:	e5801000 	str	r1, [r0]
    fddc:	e1c020b4 	strh	r2, [r0, #4]
    fde0:	e5c02006 	strb	r2, [r0, #6]
    fde4:	f44c078f 	vst1.32	{d16}, [ip]
    fde8:	e5c02010 	strb	r2, [r0, #16]
    fdec:	112fff1e 	bxne	lr
    fdf0:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
    fdf4:	e3401003 	movt	r1, #3
    fdf8:	e30b0460 	movw	r0, #46176	; 0xb460
    fdfc:	e3400003 	movt	r0, #3
    fe00:	e3a02024 	mov	r2, #36	; 0x24
    fe04:	e92d4010 	push	{r4, lr}
    fe08:	eb0072ac 	bl	2c8c0 <assertion_failed>
    fe0c:	e320f000 	nop	{0}
    fe10:	00000008 	.word	0x00000008
    fe14:	00000001 	.word	0x00000001

0000fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    fe18:	e92d4070 	push	{r4, r5, r6, lr}
    fe1c:	e3a0c001 	mov	ip, #1
    fe20:	e1a04000 	mov	r4, r0
    fe24:	e3510000 	cmp	r1, #0
    fe28:	e5801000 	str	r1, [r0]
    fe2c:	e580c00c 	str	ip, [r0, #12]
    fe30:	e5c0c010 	strb	ip, [r0, #16]
    fe34:	0a000049 	beq	ff60 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x148>
    fe38:	e3520000 	cmp	r2, #0
    fe3c:	0a00004d 	beq	ff78 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
    fe40:	e5d23000 	ldrb	r3, [r2]
    fe44:	e3530006 	cmp	r3, #6
    fe48:	9a000050 	bls	ff90 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    fe4c:	e5d23001 	ldrb	r3, [r2, #1]
    fe50:	e3530005 	cmp	r3, #5
    fe54:	1a000053 	bne	ffa8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    fe58:	e5d23003 	ldrb	r3, [r2, #3]
    fe5c:	e1a00001 	mov	r0, r1
    fe60:	e2033003 	and	r3, r3, #3
    fe64:	e3530002 	cmp	r3, #2
    fe68:	0a000028 	beq	ff10 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xf8>
    fe6c:	e3530003 	cmp	r3, #3
    fe70:	0a000024 	beq	ff08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xf0>
    fe74:	e3530001 	cmp	r3, #1
    fe78:	0a000005 	beq	fe94 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x7c>
    fe7c:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
    fe80:	e3401003 	movt	r1, #3
    fe84:	e30b0708 	movw	r0, #46856	; 0xb708
    fe88:	e3400003 	movt	r0, #3
    fe8c:	e3a02048 	mov	r2, #72	; 0x48
    fe90:	eb00728a 	bl	2c8c0 <assertion_failed>
    fe94:	e3a03003 	mov	r3, #3
    fe98:	e5d21002 	ldrb	r1, [r2, #2]
    fe9c:	e5c43005 	strb	r3, [r4, #5]
    fea0:	e5d23006 	ldrb	r3, [r2, #6]
    fea4:	e3530001 	cmp	r3, #1
    fea8:	21a05003 	movcs	r5, r3
    feac:	e201300f 	and	r3, r1, #15
    feb0:	e1a013a1 	lsr	r1, r1, #7
    feb4:	e5c43004 	strb	r3, [r4, #4]
    feb8:	e5c41006 	strb	r1, [r4, #6]
    febc:	33a05001 	movcc	r5, #1
    fec0:	e1d230b4 	ldrh	r3, [r2, #4]
    fec4:	e7ea3053 	ubfx	r3, r3, #0, #11
    fec8:	e5843008 	str	r3, [r4, #8]
    fecc:	ebfffa1d 	bl	e748 <CUSBDevice::GetSpeed() const>
    fed0:	e3500001 	cmp	r0, #1
    fed4:	9a00001e 	bls	ff54 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x13c>
    fed8:	e3550010 	cmp	r5, #16
    fedc:	e3a02001 	mov	r2, #1
    fee0:	31a03005 	movcc	r3, r5
    fee4:	23a03010 	movcs	r3, #16
    fee8:	e2433001 	sub	r3, r3, #1
    feec:	e5940000 	ldr	r0, [r4]
    fef0:	e1a03312 	lsl	r3, r2, r3
    fef4:	e3530007 	cmp	r3, #7
    fef8:	e1a031a3 	lsr	r3, r3, #3
    fefc:	e584300c 	str	r3, [r4, #12]
    ff00:	d584200c 	strle	r2, [r4, #12]
    ff04:	ea00000a 	b	ff34 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x11c>
    ff08:	e3a03002 	mov	r3, #2
    ff0c:	eaffffe1 	b	fe98 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x80>
    ff10:	e5d23002 	ldrb	r3, [r2, #2]
    ff14:	e5c4c005 	strb	ip, [r4, #5]
    ff18:	e203100f 	and	r1, r3, #15
    ff1c:	e5c41004 	strb	r1, [r4, #4]
    ff20:	e1a033a3 	lsr	r3, r3, #7
    ff24:	e5c43006 	strb	r3, [r4, #6]
    ff28:	e1d230b4 	ldrh	r3, [r2, #4]
    ff2c:	e7ea3053 	ubfx	r3, r3, #0, #11
    ff30:	e5843008 	str	r3, [r4, #8]
    ff34:	ebfffa03 	bl	e748 <CUSBDevice::GetSpeed() const>
    ff38:	e3500000 	cmp	r0, #0
    ff3c:	1a000002 	bne	ff4c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>
    ff40:	e5d43005 	ldrb	r3, [r4, #5]
    ff44:	e3530001 	cmp	r3, #1
    ff48:	0a00001c 	beq	ffc0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a8>
    ff4c:	e1a00004 	mov	r0, r4
    ff50:	e8bd8070 	pop	{r4, r5, r6, pc}
    ff54:	e5940000 	ldr	r0, [r4]
    ff58:	e584500c 	str	r5, [r4, #12]
    ff5c:	eafffff4 	b	ff34 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x11c>
    ff60:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
    ff64:	e3401003 	movt	r1, #3
    ff68:	e30b0460 	movw	r0, #46176	; 0xb460
    ff6c:	e3400003 	movt	r0, #3
    ff70:	e3a02033 	mov	r2, #51	; 0x33
    ff74:	eb007251 	bl	2c8c0 <assertion_failed>
    ff78:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
    ff7c:	e3401003 	movt	r1, #3
    ff80:	e30b0d5c 	movw	r0, #48476	; 0xbd5c
    ff84:	e3400003 	movt	r0, #3
    ff88:	e3a02035 	mov	r2, #53	; 0x35
    ff8c:	eb00724b 	bl	2c8c0 <assertion_failed>
    ff90:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
    ff94:	e3401003 	movt	r1, #3
    ff98:	e30b0d68 	movw	r0, #48488	; 0xbd68
    ff9c:	e3400003 	movt	r0, #3
    ffa0:	e3a02036 	mov	r2, #54	; 0x36
    ffa4:	eb007245 	bl	2c8c0 <assertion_failed>
    ffa8:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
    ffac:	e3401003 	movt	r1, #3
    ffb0:	e30b0d88 	movw	r0, #48520	; 0xbd88
    ffb4:	e3400003 	movt	r0, #3
    ffb8:	e3a02037 	mov	r2, #55	; 0x37
    ffbc:	eb00723f 	bl	2c8c0 <assertion_failed>
    ffc0:	eb007cbb 	bl	2f2b4 <CLogger::Get()>
    ffc4:	e3a02002 	mov	r2, #2
    ffc8:	e30b3db8 	movw	r3, #48568	; 0xbdb8
    ffcc:	e3403003 	movt	r3, #3
    ffd0:	e30b1ddc 	movw	r1, #48604	; 0xbddc
    ffd4:	e3401003 	movt	r1, #3
    ffd8:	eb007e83 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ffdc:	e5943008 	ldr	r3, [r4, #8]
    ffe0:	e3a02002 	mov	r2, #2
    ffe4:	e5c42005 	strb	r2, [r4, #5]
    ffe8:	e3530008 	cmp	r3, #8
    ffec:	83a03008 	movhi	r3, #8
    fff0:	85843008 	strhi	r3, [r4, #8]
    fff4:	e3a03001 	mov	r3, #1
    fff8:	e584300c 	str	r3, [r4, #12]
    fffc:	eaffffd2 	b	ff4c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>

00010000 <CUSBEndpoint::~CUSBEndpoint()>:
   10000:	e12fff1e 	bx	lr

00010004 <CUSBEndpoint::GetDevice() const>:
   10004:	e5900000 	ldr	r0, [r0]
   10008:	e3500000 	cmp	r0, #0
   1000c:	112fff1e 	bxne	lr
   10010:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
   10014:	e3401003 	movt	r1, #3
   10018:	e30b0460 	movw	r0, #46176	; 0xb460
   1001c:	e3400003 	movt	r0, #3
   10020:	e3a020a3 	mov	r2, #163	; 0xa3
   10024:	e92d4010 	push	{r4, lr}
   10028:	eb007224 	bl	2c8c0 <assertion_failed>

0001002c <CUSBEndpoint::GetNumber() const>:
   1002c:	e5d00004 	ldrb	r0, [r0, #4]
   10030:	e12fff1e 	bx	lr

00010034 <CUSBEndpoint::GetType() const>:
   10034:	e5d00005 	ldrb	r0, [r0, #5]
   10038:	e12fff1e 	bx	lr

0001003c <CUSBEndpoint::IsDirectionIn() const>:
   1003c:	e5d00006 	ldrb	r0, [r0, #6]
   10040:	e12fff1e 	bx	lr

00010044 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
   10044:	e1a03000 	mov	r3, r0
   10048:	e3a00001 	mov	r0, #1
   1004c:	e5831008 	str	r1, [r3, #8]
   10050:	e12fff1e 	bx	lr

00010054 <CUSBEndpoint::GetMaxPacketSize() const>:
   10054:	e5900008 	ldr	r0, [r0, #8]
   10058:	e12fff1e 	bx	lr

0001005c <CUSBEndpoint::GetInterval() const>:
   1005c:	e5d03005 	ldrb	r3, [r0, #5]
   10060:	e2433002 	sub	r3, r3, #2
   10064:	e3530001 	cmp	r3, #1
   10068:	8a000001 	bhi	10074 <CUSBEndpoint::GetInterval() const+0x18>
   1006c:	e590000c 	ldr	r0, [r0, #12]
   10070:	e12fff1e 	bx	lr
   10074:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
   10078:	e3401003 	movt	r1, #3
   1007c:	e30b0de0 	movw	r0, #48608	; 0xbde0
   10080:	e3400003 	movt	r0, #3
   10084:	e3a020cb 	mov	r2, #203	; 0xcb
   10088:	e92d4010 	push	{r4, lr}
   1008c:	eb00720b 	bl	2c8c0 <assertion_failed>

00010090 <CUSBEndpoint::GetNextPID(bool)>:
   10090:	e3510000 	cmp	r1, #0
   10094:	0a000004 	beq	100ac <CUSBEndpoint::GetNextPID(bool)+0x1c>
   10098:	e5d03005 	ldrb	r3, [r0, #5]
   1009c:	e3530000 	cmp	r3, #0
   100a0:	1a000003 	bne	100b4 <CUSBEndpoint::GetNextPID(bool)+0x24>
   100a4:	e3a00002 	mov	r0, #2
   100a8:	e12fff1e 	bx	lr
   100ac:	e5d00010 	ldrb	r0, [r0, #16]
   100b0:	e12fff1e 	bx	lr
   100b4:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
   100b8:	e3401003 	movt	r1, #3
   100bc:	e30b0e28 	movw	r0, #48680	; 0xbe28
   100c0:	e3400003 	movt	r0, #3
   100c4:	e3a020d5 	mov	r2, #213	; 0xd5
   100c8:	e92d4010 	push	{r4, lr}
   100cc:	eb0071fb 	bl	2c8c0 <assertion_failed>

000100d0 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
   100d0:	e5d03005 	ldrb	r3, [r0, #5]
   100d4:	e3530003 	cmp	r3, #3
   100d8:	012fff1e 	bxeq	lr
   100dc:	e3520000 	cmp	r2, #0
   100e0:	e92d4010 	push	{r4, lr}
   100e4:	1a00000c 	bne	1011c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
   100e8:	e5d03010 	ldrb	r3, [r0, #16]
   100ec:	e3530001 	cmp	r3, #1
   100f0:	0a00000d 	beq	1012c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x5c>
   100f4:	e3530002 	cmp	r3, #2
   100f8:	0a000010 	beq	10140 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x70>
   100fc:	e3530000 	cmp	r3, #0
   10100:	0a00000b 	beq	10134 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
   10104:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
   10108:	e3401003 	movt	r1, #3
   1010c:	e30b0708 	movw	r0, #46856	; 0xb708
   10110:	e3400003 	movt	r0, #3
   10114:	e3a020fc 	mov	r2, #252	; 0xfc
   10118:	eb0071e8 	bl	2c8c0 <assertion_failed>
   1011c:	e3530000 	cmp	r3, #0
   10120:	1a00000a 	bne	10150 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x80>
   10124:	e5c03010 	strb	r3, [r0, #16]
   10128:	e8bd8010 	pop	{r4, pc}
   1012c:	e3110001 	tst	r1, #1
   10130:	08bd8010 	popeq	{r4, pc}
   10134:	e3a03002 	mov	r3, #2
   10138:	e5c03010 	strb	r3, [r0, #16]
   1013c:	e8bd8010 	pop	{r4, pc}
   10140:	e3110001 	tst	r1, #1
   10144:	13a03001 	movne	r3, #1
   10148:	15c03010 	strbne	r3, [r0, #16]
   1014c:	e8bd8010 	pop	{r4, pc}
   10150:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
   10154:	e3401003 	movt	r1, #3
   10158:	e30b0e28 	movw	r0, #48680	; 0xbe28
   1015c:	e3400003 	movt	r0, #3
   10160:	e3002102 	movw	r2, #258	; 0x102
   10164:	eb0071d5 	bl	2c8c0 <assertion_failed>

00010168 <CUSBEndpoint::ResetPID()>:
   10168:	e5d03005 	ldrb	r3, [r0, #5]
   1016c:	e3530001 	cmp	r3, #1
   10170:	8a000001 	bhi	1017c <CUSBEndpoint::ResetPID()+0x14>
   10174:	e5c03010 	strb	r3, [r0, #16]
   10178:	e12fff1e 	bx	lr
   1017c:	e30b1d4c 	movw	r1, #48460	; 0xbd4c
   10180:	e3401003 	movt	r1, #3
   10184:	e30b0e48 	movw	r0, #48712	; 0xbe48
   10188:	e3400003 	movt	r0, #3
   1018c:	e92d4010 	push	{r4, lr}
   10190:	e300210d 	movw	r2, #269	; 0x10d
   10194:	eb0071c9 	bl	2c8c0 <assertion_failed>

00010198 <CUSBFunction::Initialize()>:
   10198:	e3a00001 	mov	r0, #1
   1019c:	e12fff1e 	bx	lr

000101a0 <CUSBFunction::ReScanDevices()>:
   101a0:	e3a00000 	mov	r0, #0
   101a4:	e12fff1e 	bx	lr

000101a8 <CUSBFunction::~CUSBFunction()>:
   101a8:	e92d4070 	push	{r4, r5, r6, lr}
   101ac:	e3a03000 	mov	r3, #0
   101b0:	e590500c 	ldr	r5, [r0, #12]
   101b4:	e59f2040 	ldr	r2, [pc, #64]	; 101fc <CUSBFunction::~CUSBFunction()+0x54>
   101b8:	e1a04000 	mov	r4, r0
   101bc:	e1550003 	cmp	r5, r3
   101c0:	e5802000 	str	r2, [r0]
   101c4:	e5803010 	str	r3, [r0, #16]
   101c8:	0a000004 	beq	101e0 <CUSBFunction::~CUSBFunction()+0x38>
   101cc:	e1a00005 	mov	r0, r5
   101d0:	eb003534 	bl	1d6a8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   101d4:	e3a0101c 	mov	r1, #28
   101d8:	e1a00005 	mov	r0, r5
   101dc:	eb009ac6 	bl	36cfc <operator delete(void*, unsigned int)>
   101e0:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   101e4:	e2843008 	add	r3, r4, #8
   101e8:	e1a00004 	mov	r0, r4
   101ec:	f443078f 	vst1.32	{d16}, [r3]
   101f0:	eb0073e0 	bl	2d178 <CDevice::~CDevice()>
   101f4:	e1a00004 	mov	r0, r4
   101f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   101fc:	0003bf2c 	.word	0x0003bf2c

00010200 <CUSBFunction::RemoveDevice()>:
   10200:	e5900008 	ldr	r0, [r0, #8]
   10204:	e3500000 	cmp	r0, #0
   10208:	0a000000 	beq	10210 <CUSBFunction::RemoveDevice()+0x10>
   1020c:	eafff8b0 	b	e4d4 <CUSBDevice::RemoveDevice()>
   10210:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10214:	e3401003 	movt	r1, #3
   10218:	e30b0460 	movw	r0, #46176	; 0xb460
   1021c:	e3400003 	movt	r0, #3
   10220:	e3a02066 	mov	r2, #102	; 0x66
   10224:	e92d4010 	push	{r4, lr}
   10228:	eb0071a4 	bl	2c8c0 <assertion_failed>

0001022c <CUSBFunction::~CUSBFunction()>:
   1022c:	e92d4070 	push	{r4, r5, r6, lr}
   10230:	e3a03000 	mov	r3, #0
   10234:	e590500c 	ldr	r5, [r0, #12]
   10238:	e59f204c 	ldr	r2, [pc, #76]	; 1028c <CUSBFunction::~CUSBFunction()+0x60>
   1023c:	e1a04000 	mov	r4, r0
   10240:	e1550003 	cmp	r5, r3
   10244:	e5802000 	str	r2, [r0]
   10248:	e5803010 	str	r3, [r0, #16]
   1024c:	0a000004 	beq	10264 <CUSBFunction::~CUSBFunction()+0x38>
   10250:	e1a00005 	mov	r0, r5
   10254:	eb003513 	bl	1d6a8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   10258:	e3a0101c 	mov	r1, #28
   1025c:	e1a00005 	mov	r0, r5
   10260:	eb009aa5 	bl	36cfc <operator delete(void*, unsigned int)>
   10264:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   10268:	e2843008 	add	r3, r4, #8
   1026c:	e1a00004 	mov	r0, r4
   10270:	f443078f 	vst1.32	{d16}, [r3]
   10274:	eb0073bf 	bl	2d178 <CDevice::~CDevice()>
   10278:	e1a00004 	mov	r0, r4
   1027c:	e3a01014 	mov	r1, #20
   10280:	eb009a9d 	bl	36cfc <operator delete(void*, unsigned int)>
   10284:	e1a00004 	mov	r0, r4
   10288:	e8bd8070 	pop	{r4, r5, r6, pc}
   1028c:	0003bf2c 	.word	0x0003bf2c

00010290 <CUSBFunction::Configure()>:
   10290:	e5903010 	ldr	r3, [r0, #16]
   10294:	e92d4070 	push	{r4, r5, r6, lr}
   10298:	e3530000 	cmp	r3, #0
   1029c:	e24dd010 	sub	sp, sp, #16
   102a0:	0a000027 	beq	10344 <CUSBFunction::Configure()+0xb4>
   102a4:	e5d33003 	ldrb	r3, [r3, #3]
   102a8:	e3530000 	cmp	r3, #0
   102ac:	1a000002 	bne	102bc <CUSBFunction::Configure()+0x2c>
   102b0:	e3a00001 	mov	r0, #1
   102b4:	e28dd010 	add	sp, sp, #16
   102b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   102bc:	e1a04000 	mov	r4, r0
   102c0:	e5900008 	ldr	r0, [r0, #8]
   102c4:	e3500000 	cmp	r0, #0
   102c8:	0a000023 	beq	1035c <CUSBFunction::Configure()+0xcc>
   102cc:	ebfff931 	bl	e798 <CUSBDevice::GetHost() const>
   102d0:	e5943008 	ldr	r3, [r4, #8]
   102d4:	e1a06000 	mov	r6, r0
   102d8:	e3530000 	cmp	r3, #0
   102dc:	0a000024 	beq	10374 <CUSBFunction::Configure()+0xe4>
   102e0:	e1a00003 	mov	r0, r3
   102e4:	e3a05000 	mov	r5, #0
   102e8:	ebfff920 	bl	e770 <CUSBDevice::GetEndpoint0() const>
   102ec:	e5942010 	ldr	r2, [r4, #16]
   102f0:	e58d500c 	str	r5, [sp, #12]
   102f4:	e1a01000 	mov	r1, r0
   102f8:	e58d5008 	str	r5, [sp, #8]
   102fc:	e1a00006 	mov	r0, r6
   10300:	e5d23002 	ldrb	r3, [r2, #2]
   10304:	e58d3004 	str	r3, [sp, #4]
   10308:	e3a0300b 	mov	r3, #11
   1030c:	e5d22003 	ldrb	r2, [r2, #3]
   10310:	e58d2000 	str	r2, [sp]
   10314:	e3a02001 	mov	r2, #1
   10318:	eb000dc2 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1031c:	e1500005 	cmp	r0, r5
   10320:	aaffffe2 	bge	102b0 <CUSBFunction::Configure()+0x20>
   10324:	eb007be2 	bl	2f2b4 <CLogger::Get()>
   10328:	e59f105c 	ldr	r1, [pc, #92]	; 1038c <CUSBFunction::Configure()+0xfc>
   1032c:	e3a02001 	mov	r2, #1
   10330:	e30b3eac 	movw	r3, #48812	; 0xbeac
   10334:	e3403003 	movt	r3, #3
   10338:	eb007dab 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1033c:	e1a00005 	mov	r0, r5
   10340:	eaffffdb 	b	102b4 <CUSBFunction::Configure()+0x24>
   10344:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10348:	e3401003 	movt	r1, #3
   1034c:	e30b0e94 	movw	r0, #48788	; 0xbe94
   10350:	e3400003 	movt	r0, #3
   10354:	e3a0204e 	mov	r2, #78	; 0x4e
   10358:	eb007158 	bl	2c8c0 <assertion_failed>
   1035c:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10360:	e3401003 	movt	r1, #3
   10364:	e30b0460 	movw	r0, #46176	; 0xb460
   10368:	e3400003 	movt	r0, #3
   1036c:	e3a02090 	mov	r2, #144	; 0x90
   10370:	eb007152 	bl	2c8c0 <assertion_failed>
   10374:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10378:	e3401003 	movt	r1, #3
   1037c:	e30b0460 	movw	r0, #46176	; 0xb460
   10380:	e3400003 	movt	r0, #3
   10384:	e3a0208a 	mov	r2, #138	; 0x8a
   10388:	eb00714c 	bl	2c8c0 <assertion_failed>
   1038c:	0003bf58 	.word	0x0003bf58

00010390 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   10390:	e92d4070 	push	{r4, r5, r6, lr}
   10394:	e1a04000 	mov	r4, r0
   10398:	e1a05001 	mov	r5, r1
   1039c:	e1a06002 	mov	r6, r2
   103a0:	eb0073a1 	bl	2d22c <CDevice::CDevice()>
   103a4:	e3a03000 	mov	r3, #0
   103a8:	e59f2098 	ldr	r2, [pc, #152]	; 10448 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb8>
   103ac:	e1550003 	cmp	r5, r3
   103b0:	e5842000 	str	r2, [r4]
   103b4:	e5845008 	str	r5, [r4, #8]
   103b8:	e584300c 	str	r3, [r4, #12]
   103bc:	e5843010 	str	r3, [r4, #16]
   103c0:	0a00000e 	beq	10400 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
   103c4:	e3560000 	cmp	r6, #0
   103c8:	0a000012 	beq	10418 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x88>
   103cc:	e3a0001c 	mov	r0, #28
   103d0:	eb009a31 	bl	36c9c <operator new(unsigned int)>
   103d4:	e1a01006 	mov	r1, r6
   103d8:	e1a05000 	mov	r5, r0
   103dc:	eb00349d 	bl	1d658 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   103e0:	e1a00005 	mov	r0, r5
   103e4:	e584500c 	str	r5, [r4, #12]
   103e8:	eb0034dc 	bl	1d760 <CUSBConfigurationParser::GetCurrentDescriptor()>
   103ec:	e3500000 	cmp	r0, #0
   103f0:	e5840010 	str	r0, [r4, #16]
   103f4:	0a00000d 	beq	10430 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
   103f8:	e1a00004 	mov	r0, r4
   103fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10400:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10404:	e3401003 	movt	r1, #3
   10408:	e30b0460 	movw	r0, #46176	; 0xb460
   1040c:	e3400003 	movt	r0, #3
   10410:	e3a02022 	mov	r2, #34	; 0x22
   10414:	eb007129 	bl	2c8c0 <assertion_failed>
   10418:	e30b1e84 	movw	r1, #48772	; 0xbe84
   1041c:	e3401003 	movt	r1, #3
   10420:	e30b0ec4 	movw	r0, #48836	; 0xbec4
   10424:	e3400003 	movt	r0, #3
   10428:	e3a02024 	mov	r2, #36	; 0x24
   1042c:	eb007123 	bl	2c8c0 <assertion_failed>
   10430:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10434:	e3401003 	movt	r1, #3
   10438:	e30b0e94 	movw	r0, #48788	; 0xbe94
   1043c:	e3400003 	movt	r0, #3
   10440:	e3a02029 	mov	r2, #41	; 0x29
   10444:	eb00711d 	bl	2c8c0 <assertion_failed>
   10448:	0003bf2c 	.word	0x0003bf2c

0001044c <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   1044c:	e92d4070 	push	{r4, r5, r6, lr}
   10450:	e1a04000 	mov	r4, r0
   10454:	e1a05001 	mov	r5, r1
   10458:	eb007373 	bl	2d22c <CDevice::CDevice()>
   1045c:	e1a03004 	mov	r3, r4
   10460:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   10464:	e59f10c4 	ldr	r1, [pc, #196]	; 10530 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xe4>
   10468:	e3a02000 	mov	r2, #0
   1046c:	e4831008 	str	r1, [r3], #8
   10470:	e1550002 	cmp	r5, r2
   10474:	f443078f 	vst1.32	{d16}, [r3]
   10478:	e5842010 	str	r2, [r4, #16]
   1047c:	0a000013 	beq	104d0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x84>
   10480:	e5953008 	ldr	r3, [r5, #8]
   10484:	e5843008 	str	r3, [r4, #8]
   10488:	e3530000 	cmp	r3, #0
   1048c:	0a000015 	beq	104e8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
   10490:	e595300c 	ldr	r3, [r5, #12]
   10494:	e3530000 	cmp	r3, #0
   10498:	0a000018 	beq	10500 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xb4>
   1049c:	e3a0001c 	mov	r0, #28
   104a0:	eb0099fd 	bl	36c9c <operator new(unsigned int)>
   104a4:	e595100c 	ldr	r1, [r5, #12]
   104a8:	e1a06000 	mov	r6, r0
   104ac:	eb003469 	bl	1d658 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   104b0:	e1a00006 	mov	r0, r6
   104b4:	e584600c 	str	r6, [r4, #12]
   104b8:	eb0034a8 	bl	1d760 <CUSBConfigurationParser::GetCurrentDescriptor()>
   104bc:	e3500000 	cmp	r0, #0
   104c0:	e5840010 	str	r0, [r4, #16]
   104c4:	0a000013 	beq	10518 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
   104c8:	e1a00004 	mov	r0, r4
   104cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   104d0:	e30b1e84 	movw	r1, #48772	; 0xbe84
   104d4:	e3401003 	movt	r1, #3
   104d8:	e30b0ed8 	movw	r0, #48856	; 0xbed8
   104dc:	e3400003 	movt	r0, #3
   104e0:	e3a02031 	mov	r2, #49	; 0x31
   104e4:	eb0070f5 	bl	2c8c0 <assertion_failed>
   104e8:	e30b1e84 	movw	r1, #48772	; 0xbe84
   104ec:	e3401003 	movt	r1, #3
   104f0:	e30b0460 	movw	r0, #46176	; 0xb460
   104f4:	e3400003 	movt	r0, #3
   104f8:	e3a02033 	mov	r2, #51	; 0x33
   104fc:	eb0070ef 	bl	2c8c0 <assertion_failed>
   10500:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10504:	e3401003 	movt	r1, #3
   10508:	e30b0ee8 	movw	r0, #48872	; 0xbee8
   1050c:	e3400003 	movt	r0, #3
   10510:	e3a02035 	mov	r2, #53	; 0x35
   10514:	eb0070e9 	bl	2c8c0 <assertion_failed>
   10518:	e30b1e84 	movw	r1, #48772	; 0xbe84
   1051c:	e3401003 	movt	r1, #3
   10520:	e30b0e94 	movw	r0, #48788	; 0xbe94
   10524:	e3400003 	movt	r0, #3
   10528:	e3a0203a 	mov	r2, #58	; 0x3a
   1052c:	eb0070e3 	bl	2c8c0 <assertion_failed>
   10530:	0003bf2c 	.word	0x0003bf2c

00010534 <CUSBFunction::GetInterfaceName() const>:
   10534:	e92d4030 	push	{r4, r5, lr}
   10538:	e1a05000 	mov	r5, r0
   1053c:	e3a00010 	mov	r0, #16
   10540:	e24dd00c 	sub	sp, sp, #12
   10544:	eb0099d4 	bl	36c9c <operator new(unsigned int)>
   10548:	e30b1770 	movw	r1, #46960	; 0xb770
   1054c:	e3401003 	movt	r1, #3
   10550:	e1a04000 	mov	r4, r0
   10554:	eb008c06 	bl	33574 <CString::CString(char const*)>
   10558:	e5951010 	ldr	r1, [r5, #16]
   1055c:	e3510000 	cmp	r1, #0
   10560:	0a000004 	beq	10578 <CUSBFunction::GetInterfaceName() const+0x44>
   10564:	e5d12005 	ldrb	r2, [r1, #5]
   10568:	e2423001 	sub	r3, r2, #1
   1056c:	e6ef3073 	uxtb	r3, r3
   10570:	e35300fd 	cmp	r3, #253	; 0xfd
   10574:	9a000002 	bls	10584 <CUSBFunction::GetInterfaceName() const+0x50>
   10578:	e1a00004 	mov	r0, r4
   1057c:	e28dd00c 	add	sp, sp, #12
   10580:	e8bd8030 	pop	{r4, r5, pc}
   10584:	e5d13006 	ldrb	r3, [r1, #6]
   10588:	e1a00004 	mov	r0, r4
   1058c:	e5d11007 	ldrb	r1, [r1, #7]
   10590:	e58d1000 	str	r1, [sp]
   10594:	e30b1f08 	movw	r1, #48904	; 0xbf08
   10598:	e3401003 	movt	r1, #3
   1059c:	eb0091b9 	bl	34c88 <CString::Format(char const*, ...)>
   105a0:	e1a00004 	mov	r0, r4
   105a4:	e28dd00c 	add	sp, sp, #12
   105a8:	e8bd8030 	pop	{r4, r5, pc}

000105ac <CUSBFunction::GetNumEndpoints() const>:
   105ac:	e5903010 	ldr	r3, [r0, #16]
   105b0:	e3530000 	cmp	r3, #0
   105b4:	0a000001 	beq	105c0 <CUSBFunction::GetNumEndpoints() const+0x14>
   105b8:	e5d30004 	ldrb	r0, [r3, #4]
   105bc:	e12fff1e 	bx	lr
   105c0:	e30b1e84 	movw	r1, #48772	; 0xbe84
   105c4:	e3401003 	movt	r1, #3
   105c8:	e30b0e94 	movw	r0, #48788	; 0xbe94
   105cc:	e3400003 	movt	r0, #3
   105d0:	e3a0207e 	mov	r2, #126	; 0x7e
   105d4:	e92d4010 	push	{r4, lr}
   105d8:	eb0070b8 	bl	2c8c0 <assertion_failed>

000105dc <CUSBFunction::GetDevice() const>:
   105dc:	e5900008 	ldr	r0, [r0, #8]
   105e0:	e3500000 	cmp	r0, #0
   105e4:	112fff1e 	bxne	lr
   105e8:	e30b1e84 	movw	r1, #48772	; 0xbe84
   105ec:	e3401003 	movt	r1, #3
   105f0:	e30b0460 	movw	r0, #46176	; 0xb460
   105f4:	e3400003 	movt	r0, #3
   105f8:	e3a02084 	mov	r2, #132	; 0x84
   105fc:	e92d4010 	push	{r4, lr}
   10600:	eb0070ae 	bl	2c8c0 <assertion_failed>

00010604 <CUSBFunction::GetEndpoint0() const>:
   10604:	e5900008 	ldr	r0, [r0, #8]
   10608:	e3500000 	cmp	r0, #0
   1060c:	0a000000 	beq	10614 <CUSBFunction::GetEndpoint0() const+0x10>
   10610:	eafff856 	b	e770 <CUSBDevice::GetEndpoint0() const>
   10614:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10618:	e3401003 	movt	r1, #3
   1061c:	e30b0460 	movw	r0, #46176	; 0xb460
   10620:	e3400003 	movt	r0, #3
   10624:	e3a0208a 	mov	r2, #138	; 0x8a
   10628:	e92d4010 	push	{r4, lr}
   1062c:	eb0070a3 	bl	2c8c0 <assertion_failed>

00010630 <CUSBFunction::GetHost() const>:
   10630:	e5900008 	ldr	r0, [r0, #8]
   10634:	e3500000 	cmp	r0, #0
   10638:	0a000000 	beq	10640 <CUSBFunction::GetHost() const+0x10>
   1063c:	eafff855 	b	e798 <CUSBDevice::GetHost() const>
   10640:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10644:	e3401003 	movt	r1, #3
   10648:	e30b0460 	movw	r0, #46176	; 0xb460
   1064c:	e3400003 	movt	r0, #3
   10650:	e3a02090 	mov	r2, #144	; 0x90
   10654:	e92d4010 	push	{r4, lr}
   10658:	eb007098 	bl	2c8c0 <assertion_failed>

0001065c <CUSBFunction::GetDescriptor(unsigned char)>:
   1065c:	e590000c 	ldr	r0, [r0, #12]
   10660:	e3500000 	cmp	r0, #0
   10664:	0a000000 	beq	1066c <CUSBFunction::GetDescriptor(unsigned char)+0x10>
   10668:	ea003411 	b	1d6b4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   1066c:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10670:	e3401003 	movt	r1, #3
   10674:	e30b07c8 	movw	r0, #47048	; 0xb7c8
   10678:	e3400003 	movt	r0, #3
   1067c:	e3a02096 	mov	r2, #150	; 0x96
   10680:	e92d4010 	push	{r4, lr}
   10684:	eb00708d 	bl	2c8c0 <assertion_failed>

00010688 <CUSBFunction::ConfigurationError(char const*) const>:
   10688:	e590000c 	ldr	r0, [r0, #12]
   1068c:	e92d4010 	push	{r4, lr}
   10690:	e3500000 	cmp	r0, #0
   10694:	0a000003 	beq	106a8 <CUSBFunction::ConfigurationError(char const*) const+0x20>
   10698:	e3510000 	cmp	r1, #0
   1069c:	0a000007 	beq	106c0 <CUSBFunction::ConfigurationError(char const*) const+0x38>
   106a0:	e8bd4010 	pop	{r4, lr}
   106a4:	ea003440 	b	1d7ac <CUSBConfigurationParser::Error(char const*) const>
   106a8:	e30b1e84 	movw	r1, #48772	; 0xbe84
   106ac:	e3401003 	movt	r1, #3
   106b0:	e30b07c8 	movw	r0, #47048	; 0xb7c8
   106b4:	e3400003 	movt	r0, #3
   106b8:	e3a0209c 	mov	r2, #156	; 0x9c
   106bc:	eb00707f 	bl	2c8c0 <assertion_failed>
   106c0:	e30b1e84 	movw	r1, #48772	; 0xbe84
   106c4:	e3401003 	movt	r1, #3
   106c8:	e30b0f14 	movw	r0, #48916	; 0xbf14
   106cc:	e3400003 	movt	r0, #3
   106d0:	e3a0209d 	mov	r2, #157	; 0x9d
   106d4:	eb007079 	bl	2c8c0 <assertion_failed>

000106d8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   106d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   106dc:	e1a04000 	mov	r4, r0
   106e0:	e5900010 	ldr	r0, [r0, #16]
   106e4:	e3500000 	cmp	r0, #0
   106e8:	0a00001d 	beq	10764 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x8c>
   106ec:	e1a07003 	mov	r7, r3
   106f0:	e594300c 	ldr	r3, [r4, #12]
   106f4:	e3530000 	cmp	r3, #0
   106f8:	0a00001f 	beq	1077c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xa4>
   106fc:	e5943008 	ldr	r3, [r4, #8]
   10700:	e1a05001 	mov	r5, r1
   10704:	e1a06002 	mov	r6, r2
   10708:	e3530000 	cmp	r3, #0
   1070c:	1a000009 	bne	10738 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
   10710:	ea00001f 	b	10794 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
   10714:	e3a01004 	mov	r1, #4
   10718:	e5940008 	ldr	r0, [r4, #8]
   1071c:	ebfff83b 	bl	e810 <CUSBDevice::GetDescriptor(unsigned char)>
   10720:	e594000c 	ldr	r0, [r4, #12]
   10724:	e3a01004 	mov	r1, #4
   10728:	eb0033e1 	bl	1d6b4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   1072c:	e3500000 	cmp	r0, #0
   10730:	e5840010 	str	r0, [r4, #16]
   10734:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10738:	e5d0c005 	ldrb	ip, [r0, #5]
   1073c:	e15c0005 	cmp	ip, r5
   10740:	1afffff3 	bne	10714 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   10744:	e5d01006 	ldrb	r1, [r0, #6]
   10748:	e1510006 	cmp	r1, r6
   1074c:	1afffff0 	bne	10714 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   10750:	e5d03007 	ldrb	r3, [r0, #7]
   10754:	e1530007 	cmp	r3, r7
   10758:	1affffed 	bne	10714 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   1075c:	e3a00001 	mov	r0, #1
   10760:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10764:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10768:	e3401003 	movt	r1, #3
   1076c:	e30b0e94 	movw	r0, #48788	; 0xbe94
   10770:	e3400003 	movt	r0, #3
   10774:	e3a020a3 	mov	r2, #163	; 0xa3
   10778:	eb007050 	bl	2c8c0 <assertion_failed>
   1077c:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10780:	e3401003 	movt	r1, #3
   10784:	e30b07c8 	movw	r0, #47048	; 0xb7c8
   10788:	e3400003 	movt	r0, #3
   1078c:	e3a020a4 	mov	r2, #164	; 0xa4
   10790:	eb00704a 	bl	2c8c0 <assertion_failed>
   10794:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10798:	e3401003 	movt	r1, #3
   1079c:	e30b0460 	movw	r0, #46176	; 0xb460
   107a0:	e3400003 	movt	r0, #3
   107a4:	e3a020a5 	mov	r2, #165	; 0xa5
   107a8:	eb007044 	bl	2c8c0 <assertion_failed>

000107ac <CUSBFunction::GetInterfaceNumber() const>:
   107ac:	e5903010 	ldr	r3, [r0, #16]
   107b0:	e3530000 	cmp	r3, #0
   107b4:	0a000001 	beq	107c0 <CUSBFunction::GetInterfaceNumber() const+0x14>
   107b8:	e5d30002 	ldrb	r0, [r3, #2]
   107bc:	e12fff1e 	bx	lr
   107c0:	e30b1e84 	movw	r1, #48772	; 0xbe84
   107c4:	e3401003 	movt	r1, #3
   107c8:	e30b0e94 	movw	r0, #48788	; 0xbe94
   107cc:	e3400003 	movt	r0, #3
   107d0:	e3a020bb 	mov	r2, #187	; 0xbb
   107d4:	e92d4010 	push	{r4, lr}
   107d8:	eb007038 	bl	2c8c0 <assertion_failed>

000107dc <CUSBFunction::GetInterfaceClass() const>:
   107dc:	e5903010 	ldr	r3, [r0, #16]
   107e0:	e3530000 	cmp	r3, #0
   107e4:	0a000001 	beq	107f0 <CUSBFunction::GetInterfaceClass() const+0x14>
   107e8:	e5d30005 	ldrb	r0, [r3, #5]
   107ec:	e12fff1e 	bx	lr
   107f0:	e30b1e84 	movw	r1, #48772	; 0xbe84
   107f4:	e3401003 	movt	r1, #3
   107f8:	e30b0e94 	movw	r0, #48788	; 0xbe94
   107fc:	e3400003 	movt	r0, #3
   10800:	e3a020c1 	mov	r2, #193	; 0xc1
   10804:	e92d4010 	push	{r4, lr}
   10808:	eb00702c 	bl	2c8c0 <assertion_failed>

0001080c <CUSBFunction::GetInterfaceSubClass() const>:
   1080c:	e5903010 	ldr	r3, [r0, #16]
   10810:	e3530000 	cmp	r3, #0
   10814:	0a000001 	beq	10820 <CUSBFunction::GetInterfaceSubClass() const+0x14>
   10818:	e5d30006 	ldrb	r0, [r3, #6]
   1081c:	e12fff1e 	bx	lr
   10820:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10824:	e3401003 	movt	r1, #3
   10828:	e30b0e94 	movw	r0, #48788	; 0xbe94
   1082c:	e3400003 	movt	r0, #3
   10830:	e3a020c7 	mov	r2, #199	; 0xc7
   10834:	e92d4010 	push	{r4, lr}
   10838:	eb007020 	bl	2c8c0 <assertion_failed>

0001083c <CUSBFunction::GetInterfaceProtocol() const>:
   1083c:	e5903010 	ldr	r3, [r0, #16]
   10840:	e3530000 	cmp	r3, #0
   10844:	0a000001 	beq	10850 <CUSBFunction::GetInterfaceProtocol() const+0x14>
   10848:	e5d30007 	ldrb	r0, [r3, #7]
   1084c:	e12fff1e 	bx	lr
   10850:	e30b1e84 	movw	r1, #48772	; 0xbe84
   10854:	e3401003 	movt	r1, #3
   10858:	e30b0e94 	movw	r0, #48788	; 0xbe94
   1085c:	e3400003 	movt	r0, #3
   10860:	e3a020cd 	mov	r2, #205	; 0xcd
   10864:	e92d4010 	push	{r4, lr}
   10868:	eb007014 	bl	2c8c0 <assertion_failed>

0001086c <CUSBFunction::GetInterfaceDescriptor() const>:
   1086c:	e5900010 	ldr	r0, [r0, #16]
   10870:	e3500000 	cmp	r0, #0
   10874:	112fff1e 	bxne	lr
   10878:	e30b1e84 	movw	r1, #48772	; 0xbe84
   1087c:	e3401003 	movt	r1, #3
   10880:	e30b0e94 	movw	r0, #48788	; 0xbe94
   10884:	e3400003 	movt	r0, #3
   10888:	e3a020d3 	mov	r2, #211	; 0xd3
   1088c:	e92d4010 	push	{r4, lr}
   10890:	eb00700a 	bl	2c8c0 <assertion_failed>

00010894 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   10894:	e59f3014 	ldr	r3, [pc, #20]	; 108b0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
   10898:	e92d4010 	push	{r4, lr}
   1089c:	e1a04000 	mov	r4, r0
   108a0:	e5803000 	str	r3, [r0]
   108a4:	eb0003d4 	bl	117fc <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   108a8:	e1a00004 	mov	r0, r4
   108ac:	e8bd8010 	pop	{r4, pc}
   108b0:	0003bfe8 	.word	0x0003bfe8

000108b4 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   108b4:	e59f3020 	ldr	r3, [pc, #32]	; 108dc <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
   108b8:	e92d4010 	push	{r4, lr}
   108bc:	e1a04000 	mov	r4, r0
   108c0:	e5803000 	str	r3, [r0]
   108c4:	eb0003cc 	bl	117fc <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   108c8:	e1a00004 	mov	r0, r4
   108cc:	e3a01d06 	mov	r1, #384	; 0x180
   108d0:	eb009909 	bl	36cfc <operator delete(void*, unsigned int)>
   108d4:	e1a00004 	mov	r0, r4
   108d8:	e8bd8010 	pop	{r4, pc}
   108dc:	0003bfe8 	.word	0x0003bfe8

000108e0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   108e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   108e4:	e3a02030 	mov	r2, #48	; 0x30
   108e8:	e1a04001 	mov	r4, r1
   108ec:	e24dd08c 	sub	sp, sp, #140	; 0x8c
   108f0:	e2801d05 	add	r1, r0, #320	; 0x140
   108f4:	e28d604f 	add	r6, sp, #79	; 0x4f
   108f8:	e1a05000 	mov	r5, r0
   108fc:	e3c6603f 	bic	r6, r6, #63	; 0x3f
   10900:	e1a00006 	mov	r0, r6
   10904:	eb0096db 	bl	36478 <memcpy>
   10908:	e3540001 	cmp	r4, #1
   1090c:	0a000024 	beq	109a4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc4>
   10910:	e3540002 	cmp	r4, #2
   10914:	0a000007 	beq	10938 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   10918:	e3540000 	cmp	r4, #0
   1091c:	0a000007 	beq	10940 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   10920:	e30b1f60 	movw	r1, #48992	; 0xbf60
   10924:	e3401003 	movt	r1, #3
   10928:	e30b0708 	movw	r0, #46856	; 0xb708
   1092c:	e3400003 	movt	r0, #3
   10930:	e300210e 	movw	r2, #270	; 0x10e
   10934:	eb006fe1 	bl	2c8c0 <assertion_failed>
   10938:	e3a040fe 	mov	r4, #254	; 0xfe
   1093c:	e34f4ffe 	movt	r4, #65534	; 0xfffe
   10940:	e1a00005 	mov	r0, r5
   10944:	e5864001 	str	r4, [r6, #1]
   10948:	ebffff38 	bl	10630 <CUSBFunction::GetHost() const>
   1094c:	e1a04000 	mov	r4, r0
   10950:	e1a00005 	mov	r0, r5
   10954:	ebffff2a 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   10958:	e1a07000 	mov	r7, r0
   1095c:	e1a00005 	mov	r0, r5
   10960:	ebffff91 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   10964:	e3a03009 	mov	r3, #9
   10968:	e1a0c000 	mov	ip, r0
   1096c:	e3a02021 	mov	r2, #33	; 0x21
   10970:	e58dc004 	str	ip, [sp, #4]
   10974:	e1a01007 	mov	r1, r7
   10978:	e1a00004 	mov	r0, r4
   1097c:	e58d6008 	str	r6, [sp, #8]
   10980:	e300c201 	movw	ip, #513	; 0x201
   10984:	e58dc000 	str	ip, [sp]
   10988:	e3a0c030 	mov	ip, #48	; 0x30
   1098c:	e58dc00c 	str	ip, [sp, #12]
   10990:	eb000c24 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10994:	e1e00000 	mvn	r0, r0
   10998:	e1a00fa0 	lsr	r0, r0, #31
   1099c:	e28dd08c 	add	sp, sp, #140	; 0x8c
   109a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   109a4:	e30f4ffe 	movw	r4, #65534	; 0xfffe
   109a8:	e34040fe 	movt	r4, #254	; 0xfe
   109ac:	eaffffe3 	b	10940 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>

000109b0 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   109b0:	e351000a 	cmp	r1, #10
   109b4:	9a000001 	bls	109c0 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
   109b8:	e3a00000 	mov	r0, #0
   109bc:	e12fff1e 	bx	lr
   109c0:	e30b3fe0 	movw	r3, #49120	; 0xbfe0
   109c4:	e3403003 	movt	r3, #3
   109c8:	e0833001 	add	r3, r3, r1
   109cc:	e92d4070 	push	{r4, r5, r6, lr}
   109d0:	e1a04000 	mov	r4, r0
   109d4:	e24dd010 	sub	sp, sp, #16
   109d8:	e5d33054 	ldrb	r3, [r3, #84]	; 0x54
   109dc:	e1a03083 	lsl	r3, r3, #1
   109e0:	e5c03149 	strb	r3, [r0, #329]	; 0x149
   109e4:	ebffff11 	bl	10630 <CUSBFunction::GetHost() const>
   109e8:	e1a05000 	mov	r5, r0
   109ec:	e1a00004 	mov	r0, r4
   109f0:	ebffff03 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   109f4:	e1a06000 	mov	r6, r0
   109f8:	e1a00004 	mov	r0, r4
   109fc:	e2844d05 	add	r4, r4, #320	; 0x140
   10a00:	ebffff69 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   10a04:	e3a03030 	mov	r3, #48	; 0x30
   10a08:	e1a02000 	mov	r2, r0
   10a0c:	e58d300c 	str	r3, [sp, #12]
   10a10:	e98d0014 	stmib	sp, {r2, r4}
   10a14:	e1a01006 	mov	r1, r6
   10a18:	e1a00005 	mov	r0, r5
   10a1c:	e3a03009 	mov	r3, #9
   10a20:	e3002201 	movw	r2, #513	; 0x201
   10a24:	e58d2000 	str	r2, [sp]
   10a28:	e3a02021 	mov	r2, #33	; 0x21
   10a2c:	eb000bfd 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10a30:	e1e00000 	mvn	r0, r0
   10a34:	e1a00fa0 	lsr	r0, r0, #31
   10a38:	e28dd010 	add	sp, sp, #16
   10a3c:	e8bd8070 	pop	{r4, r5, r6, pc}

00010a40 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   10a40:	e92d4070 	push	{r4, r5, r6, lr}
   10a44:	e1a04000 	mov	r4, r0
   10a48:	e3a02000 	mov	r2, #0
   10a4c:	eb00038b 	bl	11880 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   10a50:	e30b5fe0 	movw	r5, #49120	; 0xbfe0
   10a54:	e3405003 	movt	r5, #3
   10a58:	e3a03000 	mov	r3, #0
   10a5c:	e1a02003 	mov	r2, r3
   10a60:	e2850008 	add	r0, r5, #8
   10a64:	e3a01003 	mov	r1, #3
   10a68:	e5840000 	str	r0, [r4]
   10a6c:	e1a00004 	mov	r0, r4
   10a70:	ebffff18 	bl	106d8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   10a74:	e3a02030 	mov	r2, #48	; 0x30
   10a78:	e1a03000 	mov	r3, r0
   10a7c:	e2851060 	add	r1, r5, #96	; 0x60
   10a80:	e2840d05 	add	r0, r4, #320	; 0x140
   10a84:	e5c4313a 	strb	r3, [r4, #314]	; 0x13a
   10a88:	eb00967a 	bl	36478 <memcpy>
   10a8c:	e1a00004 	mov	r0, r4
   10a90:	e8bd8070 	pop	{r4, r5, r6, pc}

00010a94 <CUSBGamePadPS3Device::PS3Enable()>:
   10a94:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10a98:	e30b2fe0 	movw	r2, #49120	; 0xbfe0
   10a9c:	e3402003 	movt	r2, #3
   10aa0:	e24dd08c 	sub	sp, sp, #140	; 0x8c
   10aa4:	e1a05000 	mov	r5, r0
   10aa8:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   10aac:	e28d404f 	add	r4, sp, #79	; 0x4f
   10ab0:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   10ab4:	e5920090 	ldr	r0, [r2, #144]	; 0x90
   10ab8:	e2843005 	add	r3, r4, #5
   10abc:	e5d22094 	ldrb	r2, [r2, #148]	; 0x94
   10ac0:	e5840000 	str	r0, [r4]
   10ac4:	e1a00005 	mov	r0, r5
   10ac8:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   10acc:	e2843015 	add	r3, r4, #21
   10ad0:	e5c42004 	strb	r2, [r4, #4]
   10ad4:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   10ad8:	e2843025 	add	r3, r4, #37	; 0x25
   10adc:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   10ae0:	e2843030 	add	r3, r4, #48	; 0x30
   10ae4:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   10ae8:	ebfffed0 	bl	10630 <CUSBFunction::GetHost() const>
   10aec:	e1a06000 	mov	r6, r0
   10af0:	e1a00005 	mov	r0, r5
   10af4:	ebfffec2 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   10af8:	e1a07000 	mov	r7, r0
   10afc:	e1a00005 	mov	r0, r5
   10b00:	ebffff29 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   10b04:	e3a03ffd 	mov	r3, #1012	; 0x3f4
   10b08:	e1a02000 	mov	r2, r0
   10b0c:	e3a0c004 	mov	ip, #4
   10b10:	e58d2004 	str	r2, [sp, #4]
   10b14:	e1a01007 	mov	r1, r7
   10b18:	e58d3000 	str	r3, [sp]
   10b1c:	e1a00006 	mov	r0, r6
   10b20:	e3a03009 	mov	r3, #9
   10b24:	e3a02021 	mov	r2, #33	; 0x21
   10b28:	e58d4008 	str	r4, [sp, #8]
   10b2c:	e58dc00c 	str	ip, [sp, #12]
   10b30:	eb000bbc 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10b34:	e3500000 	cmp	r0, #0
   10b38:	b3a00000 	movlt	r0, #0
   10b3c:	ba000004 	blt	10b54 <CUSBGamePadPS3Device::PS3Enable()+0xc0>
   10b40:	e5953000 	ldr	r3, [r5]
   10b44:	e1a00005 	mov	r0, r5
   10b48:	e5d5112c 	ldrb	r1, [r5, #300]	; 0x12c
   10b4c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   10b50:	e12fff33 	blx	r3
   10b54:	e28dd08c 	add	sp, sp, #140	; 0x8c
   10b58:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00010b5c <CUSBGamePadPS3Device::Configure()>:
   10b5c:	e5d0313a 	ldrb	r3, [r0, #314]	; 0x13a
   10b60:	e92d4030 	push	{r4, r5, lr}
   10b64:	e3530000 	cmp	r3, #0
   10b68:	e24dd00c 	sub	sp, sp, #12
   10b6c:	0a00001d 	beq	10be8 <CUSBGamePadPS3Device::Configure()+0x8c>
   10b70:	e1a04000 	mov	r4, r0
   10b74:	eb0004b6 	bl	11e54 <CUSBGamePadStandardDevice::Configure()>
   10b78:	e3500000 	cmp	r0, #0
   10b7c:	0a000029 	beq	10c28 <CUSBGamePadPS3Device::Configure()+0xcc>
   10b80:	e2845f4a 	add	r5, r4, #296	; 0x128
   10b84:	e1d530b0 	ldrh	r3, [r5]
   10b88:	e2433031 	sub	r3, r3, #49	; 0x31
   10b8c:	e3530001 	cmp	r3, #1
   10b90:	8a000019 	bhi	10bfc <CUSBGamePadPS3Device::Configure()+0xa0>
   10b94:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   10b98:	e284302c 	add	r3, r4, #44	; 0x2c
   10b9c:	e28420ec 	add	r2, r4, #236	; 0xec
   10ba0:	e3a00013 	mov	r0, #19
   10ba4:	e3a01010 	mov	r1, #16
   10ba8:	e5840104 	str	r0, [r4, #260]	; 0x104
   10bac:	e5841024 	str	r1, [r4, #36]	; 0x24
   10bb0:	f443078f 	vst1.32	{d16}, [r3]
   10bb4:	e283300c 	add	r3, r3, #12
   10bb8:	e1530002 	cmp	r3, r2
   10bbc:	1afffffb 	bne	10bb0 <CUSBGamePadPS3Device::Configure()+0x54>
   10bc0:	e3a03000 	mov	r3, #0
   10bc4:	e1a00004 	mov	r0, r4
   10bc8:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   10bcc:	ebffffb0 	bl	10a94 <CUSBGamePadPS3Device::PS3Enable()>
   10bd0:	e3500000 	cmp	r0, #0
   10bd4:	0a00001c 	beq	10c4c <CUSBGamePadPS3Device::Configure()+0xf0>
   10bd8:	e1a00004 	mov	r0, r4
   10bdc:	e28dd00c 	add	sp, sp, #12
   10be0:	e8bd4030 	pop	{r4, r5, lr}
   10be4:	ea000a8f 	b	13628 <CUSBHIDDevice::StartRequest()>
   10be8:	e59f1080 	ldr	r1, [pc, #128]	; 10c70 <CUSBGamePadPS3Device::Configure()+0x114>
   10bec:	ebfffea5 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   10bf0:	e3a00000 	mov	r0, #0
   10bf4:	e28dd00c 	add	sp, sp, #12
   10bf8:	e8bd8030 	pop	{r4, r5, pc}
   10bfc:	eb0079ac 	bl	2f2b4 <CLogger::Get()>
   10c00:	e1d530b0 	ldrh	r3, [r5]
   10c04:	e58d3000 	str	r3, [sp]
   10c08:	e3a02001 	mov	r2, #1
   10c0c:	e59f105c 	ldr	r1, [pc, #92]	; 10c70 <CUSBGamePadPS3Device::Configure()+0x114>
   10c10:	e30b3f94 	movw	r3, #49044	; 0xbf94
   10c14:	e3403003 	movt	r3, #3
   10c18:	eb007b73 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c1c:	e3a00000 	mov	r0, #0
   10c20:	e28dd00c 	add	sp, sp, #12
   10c24:	e8bd8030 	pop	{r4, r5, pc}
   10c28:	eb0079a1 	bl	2f2b4 <CLogger::Get()>
   10c2c:	e59f103c 	ldr	r1, [pc, #60]	; 10c70 <CUSBGamePadPS3Device::Configure()+0x114>
   10c30:	e3a02001 	mov	r2, #1
   10c34:	e30b3f74 	movw	r3, #49012	; 0xbf74
   10c38:	e3403003 	movt	r3, #3
   10c3c:	eb007b6a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c40:	e3a00000 	mov	r0, #0
   10c44:	e28dd00c 	add	sp, sp, #12
   10c48:	e8bd8030 	pop	{r4, r5, pc}
   10c4c:	eb007998 	bl	2f2b4 <CLogger::Get()>
   10c50:	e59f1018 	ldr	r1, [pc, #24]	; 10c70 <CUSBGamePadPS3Device::Configure()+0x114>
   10c54:	e3a02001 	mov	r2, #1
   10c58:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
   10c5c:	e3403003 	movt	r3, #3
   10c60:	eb007b61 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c64:	e3a00000 	mov	r0, #0
   10c68:	e28dd00c 	add	sp, sp, #12
   10c6c:	e8bd8030 	pop	{r4, r5, pc}
   10c70:	0003c078 	.word	0x0003c078

00010c74 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   10c74:	e2803f4a 	add	r3, r0, #296	; 0x128
   10c78:	e92d4070 	push	{r4, r5, r6, lr}
   10c7c:	e1a0c000 	mov	ip, r0
   10c80:	e1a04001 	mov	r4, r1
   10c84:	e1d330b0 	ldrh	r3, [r3]
   10c88:	e3530031 	cmp	r3, #49	; 0x31
   10c8c:	0a000009 	beq	10cb8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   10c90:	e3530032 	cmp	r3, #50	; 0x32
   10c94:	0a00003d 	beq	10d90 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x11c>
   10c98:	e3530000 	cmp	r3, #0
   10c9c:	0a000039 	beq	10d88 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x114>
   10ca0:	e30b1f60 	movw	r1, #48992	; 0xbf60
   10ca4:	e3401003 	movt	r1, #3
   10ca8:	e30b0708 	movw	r0, #46856	; 0xb708
   10cac:	e3400003 	movt	r0, #3
   10cb0:	e3a02092 	mov	r2, #146	; 0x92
   10cb4:	eb006f01 	bl	2c8c0 <assertion_failed>
   10cb8:	e3510000 	cmp	r1, #0
   10cbc:	0a000035 	beq	10d98 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x124>
   10cc0:	e5941002 	ldr	r1, [r4, #2]
   10cc4:	e30007f8 	movw	r0, #2040	; 0x7f8
   10cc8:	e3a02b3e 	mov	r2, #63488	; 0xf800
   10ccc:	e3402007 	movt	r2, #7
   10cd0:	e2845019 	add	r5, r4, #25
   10cd4:	e00002a1 	and	r0, r0, r1, lsr #5
   10cd8:	e7e23851 	ubfx	r3, r1, #16, #3
   10cdc:	e0022581 	and	r2, r2, r1, lsl #11
   10ce0:	e1833000 	orr	r3, r3, r0
   10ce4:	e1833002 	orr	r3, r3, r2
   10ce8:	e58c3108 	str	r3, [ip, #264]	; 0x108
   10cec:	e59f00bc 	ldr	r0, [pc, #188]	; 10db0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x13c>
   10cf0:	e284200d 	add	r2, r4, #13
   10cf4:	e5d43006 	ldrb	r3, [r4, #6]
   10cf8:	e3a0100c 	mov	r1, #12
   10cfc:	e58c3028 	str	r3, [ip, #40]	; 0x28
   10d00:	e5d43007 	ldrb	r3, [r4, #7]
   10d04:	e58c3034 	str	r3, [ip, #52]	; 0x34
   10d08:	e5d43008 	ldrb	r3, [r4, #8]
   10d0c:	e58c3040 	str	r3, [ip, #64]	; 0x40
   10d10:	e5d43009 	ldrb	r3, [r4, #9]
   10d14:	e58c304c 	str	r3, [ip, #76]	; 0x4c
   10d18:	e4903004 	ldr	r3, [r0], #4
   10d1c:	e5f2e001 	ldrb	lr, [r2, #1]!
   10d20:	e1550002 	cmp	r5, r2
   10d24:	e023c391 	mla	r3, r1, r3, ip
   10d28:	e583e028 	str	lr, [r3, #40]	; 0x28
   10d2c:	1afffff9 	bne	10d18 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xa4>
   10d30:	e1d432b9 	ldrh	r3, [r4, #41]	; 0x29
   10d34:	e30021ff 	movw	r2, #511	; 0x1ff
   10d38:	e6bf3fb3 	rev16	r3, r3
   10d3c:	e6ff3073 	uxth	r3, r3
   10d40:	e0423003 	sub	r3, r2, r3
   10d44:	e58c310c 	str	r3, [ip, #268]	; 0x10c
   10d48:	e1d432bb 	ldrh	r3, [r4, #43]	; 0x2b
   10d4c:	e6bf3fb3 	rev16	r3, r3
   10d50:	e6ff3073 	uxth	r3, r3
   10d54:	e0423003 	sub	r3, r2, r3
   10d58:	e58c3110 	str	r3, [ip, #272]	; 0x110
   10d5c:	e1d432bd 	ldrh	r3, [r4, #45]	; 0x2d
   10d60:	e6bf3fb3 	rev16	r3, r3
   10d64:	e6ff3073 	uxth	r3, r3
   10d68:	e0422003 	sub	r2, r2, r3
   10d6c:	e58c2114 	str	r2, [ip, #276]	; 0x114
   10d70:	e1d432bf 	ldrh	r3, [r4, #47]	; 0x2f
   10d74:	e6bf3fb3 	rev16	r3, r3
   10d78:	e6ff3073 	uxth	r3, r3
   10d7c:	e2433006 	sub	r3, r3, #6
   10d80:	e58c3120 	str	r3, [ip, #288]	; 0x120
   10d84:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d88:	e8bd4070 	pop	{r4, r5, r6, lr}
   10d8c:	ea00031f 	b	11a10 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   10d90:	e2814001 	add	r4, r1, #1
   10d94:	eaffffc9 	b	10cc0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x4c>
   10d98:	e30b1f60 	movw	r1, #48992	; 0xbf60
   10d9c:	e3401003 	movt	r1, #3
   10da0:	e30b0fd0 	movw	r0, #49104	; 0xbfd0
   10da4:	e3400003 	movt	r0, #3
   10da8:	e3a02097 	mov	r2, #151	; 0x97
   10dac:	eb006ec3 	bl	2c8c0 <assertion_failed>
   10db0:	0003c088 	.word	0x0003c088

00010db4 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10db4:	e3a00000 	mov	r0, #0
   10db8:	e12fff1e 	bx	lr

00010dbc <CUSBGamePadPS3Device::GetProperties()>:
   10dbc:	e3a0001b 	mov	r0, #27
   10dc0:	e12fff1e 	bx	lr
   10dc4:	00000000 	andeq	r0, r0, r0

00010dc8 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   10dc8:	e5d13001 	ldrb	r3, [r1, #1]
   10dcc:	e30c2100 	movw	r2, #49408	; 0xc100
   10dd0:	e3402003 	movt	r2, #3
   10dd4:	e5803028 	str	r3, [r0, #40]	; 0x28
   10dd8:	e24dd010 	sub	sp, sp, #16
   10ddc:	e5d13002 	ldrb	r3, [r1, #2]
   10de0:	e5803034 	str	r3, [r0, #52]	; 0x34
   10de4:	e5d13003 	ldrb	r3, [r1, #3]
   10de8:	e5803040 	str	r3, [r0, #64]	; 0x40
   10dec:	e5d13004 	ldrb	r3, [r1, #4]
   10df0:	e580304c 	str	r3, [r0, #76]	; 0x4c
   10df4:	e5d13008 	ldrb	r3, [r1, #8]
   10df8:	e5803058 	str	r3, [r0, #88]	; 0x58
   10dfc:	e5d13009 	ldrb	r3, [r1, #9]
   10e00:	e5803064 	str	r3, [r0, #100]	; 0x64
   10e04:	e5d13005 	ldrb	r3, [r1, #5]
   10e08:	e203300f 	and	r3, r3, #15
   10e0c:	e58030ec 	str	r3, [r0, #236]	; 0xec
   10e10:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   10e14:	e5802108 	str	r2, [r0, #264]	; 0x108
   10e18:	e1d1c0d5 	ldrsb	ip, [r1, #5]
   10e1c:	e5d13005 	ldrb	r3, [r1, #5]
   10e20:	e35c0000 	cmp	ip, #0
   10e24:	b3822080 	orrlt	r2, r2, #128	; 0x80
   10e28:	b5802108 	strlt	r2, [r0, #264]	; 0x108
   10e2c:	e3130040 	tst	r3, #64	; 0x40
   10e30:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10e34:	13822c01 	orrne	r2, r2, #256	; 0x100
   10e38:	15802108 	strne	r2, [r0, #264]	; 0x108
   10e3c:	e3130020 	tst	r3, #32
   10e40:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10e44:	13822c02 	orrne	r2, r2, #512	; 0x200
   10e48:	15802108 	strne	r2, [r0, #264]	; 0x108
   10e4c:	e3130010 	tst	r3, #16
   10e50:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10e54:	13833b01 	orrne	r3, r3, #1024	; 0x400
   10e58:	15803108 	strne	r3, [r0, #264]	; 0x108
   10e5c:	e1d120d6 	ldrsb	r2, [r1, #6]
   10e60:	e5d13006 	ldrb	r3, [r1, #6]
   10e64:	e3520000 	cmp	r2, #0
   10e68:	b5902108 	ldrlt	r2, [r0, #264]	; 0x108
   10e6c:	b3822a02 	orrlt	r2, r2, #8192	; 0x2000
   10e70:	b5802108 	strlt	r2, [r0, #264]	; 0x108
   10e74:	e3130040 	tst	r3, #64	; 0x40
   10e78:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10e7c:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   10e80:	15802108 	strne	r2, [r0, #264]	; 0x108
   10e84:	e3130020 	tst	r3, #32
   10e88:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10e8c:	13822901 	orrne	r2, r2, #16384	; 0x4000
   10e90:	15802108 	strne	r2, [r0, #264]	; 0x108
   10e94:	e3130010 	tst	r3, #16
   10e98:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10e9c:	13822b02 	orrne	r2, r2, #2048	; 0x800
   10ea0:	15802108 	strne	r2, [r0, #264]	; 0x108
   10ea4:	e3130008 	tst	r3, #8
   10ea8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10eac:	13822010 	orrne	r2, r2, #16
   10eb0:	15802108 	strne	r2, [r0, #264]	; 0x108
   10eb4:	e3130004 	tst	r3, #4
   10eb8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10ebc:	13822008 	orrne	r2, r2, #8
   10ec0:	15802108 	strne	r2, [r0, #264]	; 0x108
   10ec4:	e3130002 	tst	r3, #2
   10ec8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10ecc:	13822040 	orrne	r2, r2, #64	; 0x40
   10ed0:	15802108 	strne	r2, [r0, #264]	; 0x108
   10ed4:	e3130001 	tst	r3, #1
   10ed8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10edc:	13833020 	orrne	r3, r3, #32
   10ee0:	15803108 	strne	r3, [r0, #264]	; 0x108
   10ee4:	e5d13007 	ldrb	r3, [r1, #7]
   10ee8:	e3130002 	tst	r3, #2
   10eec:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10ef0:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   10ef4:	15802108 	strne	r2, [r0, #264]	; 0x108
   10ef8:	e3130001 	tst	r3, #1
   10efc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10f00:	13833001 	orrne	r3, r3, #1
   10f04:	15803108 	strne	r3, [r0, #264]	; 0x108
   10f08:	e1d131f3 	ldrsh	r3, [r1, #19]
   10f0c:	e1d121f5 	ldrsh	r2, [r1, #21]
   10f10:	e58d3000 	str	r3, [sp]
   10f14:	e1d131f1 	ldrsh	r3, [r1, #17]
   10f18:	e1d1c1f7 	ldrsh	ip, [r1, #23]
   10f1c:	e1cd20f8 	strd	r2, [sp, #8]
   10f20:	e2803f43 	add	r3, r0, #268	; 0x10c
   10f24:	e58dc004 	str	ip, [sp, #4]
   10f28:	f46d0adf 	vld1.64	{d16-d17}, [sp :64]
   10f2c:	f4430a8f 	vst1.32	{d16-d17}, [r3]
   10f30:	e1d130fd 	ldrsh	r3, [r1, #13]
   10f34:	e580311c 	str	r3, [r0, #284]	; 0x11c
   10f38:	e1d130ff 	ldrsh	r3, [r1, #15]
   10f3c:	e5803120 	str	r3, [r0, #288]	; 0x120
   10f40:	e28dd010 	add	sp, sp, #16
   10f44:	e12fff1e 	bx	lr

00010f48 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10f48:	e92d4010 	push	{r4, lr}
   10f4c:	e1a04000 	mov	r4, r0
   10f50:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   10f54:	e59f3034 	ldr	r3, [pc, #52]	; 10f90 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   10f58:	e3500000 	cmp	r0, #0
   10f5c:	e5843000 	str	r3, [r4]
   10f60:	0a000002 	beq	10f70 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   10f64:	e5903000 	ldr	r3, [r0]
   10f68:	e5933004 	ldr	r3, [r3, #4]
   10f6c:	e12fff33 	blx	r3
   10f70:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10f74:	e3500000 	cmp	r0, #0
   10f78:	0a000000 	beq	10f80 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   10f7c:	eb009758 	bl	36ce4 <operator delete[](void*)>
   10f80:	e1a00004 	mov	r0, r4
   10f84:	eb003291 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10f88:	e1a00004 	mov	r0, r4
   10f8c:	e8bd8010 	pop	{r4, pc}
   10f90:	0003c12c 	.word	0x0003c12c

00010f94 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10f94:	e92d4010 	push	{r4, lr}
   10f98:	e1a04000 	mov	r4, r0
   10f9c:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   10fa0:	e59f3040 	ldr	r3, [pc, #64]	; 10fe8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x54>
   10fa4:	e3500000 	cmp	r0, #0
   10fa8:	e5843000 	str	r3, [r4]
   10fac:	0a000002 	beq	10fbc <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   10fb0:	e5903000 	ldr	r3, [r0]
   10fb4:	e5933004 	ldr	r3, [r3, #4]
   10fb8:	e12fff33 	blx	r3
   10fbc:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10fc0:	e3500000 	cmp	r0, #0
   10fc4:	0a000000 	beq	10fcc <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   10fc8:	eb009745 	bl	36ce4 <operator delete[](void*)>
   10fcc:	e1a00004 	mov	r0, r4
   10fd0:	eb00327e 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10fd4:	e1a00004 	mov	r0, r4
   10fd8:	e3a01f53 	mov	r1, #332	; 0x14c
   10fdc:	eb009746 	bl	36cfc <operator delete(void*, unsigned int)>
   10fe0:	e1a00004 	mov	r0, r4
   10fe4:	e8bd8010 	pop	{r4, pc}
   10fe8:	0003c12c 	.word	0x0003c12c

00010fec <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10fec:	e92d4010 	push	{r4, lr}
   10ff0:	e1a04821 	lsr	r4, r1, #16
   10ff4:	e590e13c 	ldr	lr, [r0, #316]	; 0x13c
   10ff8:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10ffc:	e3a03000 	mov	r3, #0
   11000:	e7c73014 	bfi	r3, r4, #0, #8
   11004:	e1a04421 	lsr	r4, r1, #8
   11008:	e7cf3414 	bfi	r3, r4, #8, #8
   1100c:	e7d73811 	bfi	r3, r1, #16, #8
   11010:	e7df3c12 	bfi	r3, r2, #24, #8
   11014:	e5d02131 	ldrb	r2, [r0, #305]	; 0x131
   11018:	e5803134 	str	r3, [r0, #308]	; 0x134
   1101c:	e3a03000 	mov	r3, #0
   11020:	e5ce2003 	strb	r2, [lr, #3]
   11024:	e3a02020 	mov	r2, #32
   11028:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1102c:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   11030:	e5c1e004 	strb	lr, [r1, #4]
   11034:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11038:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   1103c:	e5c1e005 	strb	lr, [r1, #5]
   11040:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11044:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   11048:	e5c1e006 	strb	lr, [r1, #6]
   1104c:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11050:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   11054:	e5c1e007 	strb	lr, [r1, #7]
   11058:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1105c:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   11060:	e5c1e008 	strb	lr, [r1, #8]
   11064:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11068:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   1106c:	e5c1e009 	strb	lr, [r1, #9]
   11070:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11074:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   11078:	e5c1e00a 	strb	lr, [r1, #10]
   1107c:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11080:	eb0008e3 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11084:	e2504000 	subs	r4, r0, #0
   11088:	0a000001 	beq	11094 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)+0xa8>
   1108c:	e1a00004 	mov	r0, r4
   11090:	e8bd8010 	pop	{r4, pc}
   11094:	eb007886 	bl	2f2b4 <CLogger::Get()>
   11098:	e59f1014 	ldr	r1, [pc, #20]	; 110b4 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)+0xc8>
   1109c:	e3a02001 	mov	r2, #1
   110a0:	e30c30b8 	movw	r3, #49336	; 0xc0b8
   110a4:	e3403003 	movt	r3, #3
   110a8:	eb007a4f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   110ac:	e1a00004 	mov	r0, r4
   110b0:	e8bd8010 	pop	{r4, pc}
   110b4:	0003c178 	.word	0x0003c178

000110b8 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   110b8:	e3510001 	cmp	r1, #1
   110bc:	e92d4010 	push	{r4, lr}
   110c0:	0a000034 	beq	11198 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   110c4:	e3510002 	cmp	r1, #2
   110c8:	0a000004 	beq	110e0 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x28>
   110cc:	e3510000 	cmp	r1, #0
   110d0:	0a00002d 	beq	1118c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xd4>
   110d4:	e3a04001 	mov	r4, #1
   110d8:	e1a00004 	mov	r0, r4
   110dc:	e8bd8010 	pop	{r4, pc}
   110e0:	e3a03000 	mov	r3, #0
   110e4:	e3a010ff 	mov	r1, #255	; 0xff
   110e8:	e3a0c0f3 	mov	ip, #243	; 0xf3
   110ec:	e590e13c 	ldr	lr, [r0, #316]	; 0x13c
   110f0:	e3a02020 	mov	r2, #32
   110f4:	e5c03133 	strb	r3, [r0, #307]	; 0x133
   110f8:	e3a03000 	mov	r3, #0
   110fc:	e5c01132 	strb	r1, [r0, #306]	; 0x132
   11100:	e5c0c131 	strb	ip, [r0, #305]	; 0x131
   11104:	e5cec003 	strb	ip, [lr, #3]
   11108:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1110c:	e5d0c133 	ldrb	ip, [r0, #307]	; 0x133
   11110:	e5c1c004 	strb	ip, [r1, #4]
   11114:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11118:	e5d0c132 	ldrb	ip, [r0, #306]	; 0x132
   1111c:	e5c1c005 	strb	ip, [r1, #5]
   11120:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11124:	e5d0c134 	ldrb	ip, [r0, #308]	; 0x134
   11128:	e5c1c006 	strb	ip, [r1, #6]
   1112c:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11130:	e5d0c135 	ldrb	ip, [r0, #309]	; 0x135
   11134:	e5c1c007 	strb	ip, [r1, #7]
   11138:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1113c:	e5d0c136 	ldrb	ip, [r0, #310]	; 0x136
   11140:	e5c1c008 	strb	ip, [r1, #8]
   11144:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11148:	e5d0c137 	ldrb	ip, [r0, #311]	; 0x137
   1114c:	e5c1c009 	strb	ip, [r1, #9]
   11150:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11154:	e5d0c138 	ldrb	ip, [r0, #312]	; 0x138
   11158:	e5c1c00a 	strb	ip, [r1, #10]
   1115c:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11160:	eb0008ab 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11164:	e2504000 	subs	r4, r0, #0
   11168:	1affffd9 	bne	110d4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x1c>
   1116c:	eb007850 	bl	2f2b4 <CLogger::Get()>
   11170:	e59f1030 	ldr	r1, [pc, #48]	; 111a8 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xf0>
   11174:	e3a02001 	mov	r2, #1
   11178:	e30c30b8 	movw	r3, #49336	; 0xc0b8
   1117c:	e3403003 	movt	r3, #3
   11180:	eb007a19 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11184:	e1a00004 	mov	r0, r4
   11188:	e8bd8010 	pop	{r4, pc}
   1118c:	e1a03001 	mov	r3, r1
   11190:	e3a0c0f0 	mov	ip, #240	; 0xf0
   11194:	eaffffd4 	b	110ec <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x34>
   11198:	e3a030ff 	mov	r3, #255	; 0xff
   1119c:	e3a01000 	mov	r1, #0
   111a0:	e3a0c0f3 	mov	ip, #243	; 0xf3
   111a4:	eaffffd0 	b	110ec <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x34>
   111a8:	0003c178 	.word	0x0003c178

000111ac <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   111ac:	e2411001 	sub	r1, r1, #1
   111b0:	e92d4010 	push	{r4, lr}
   111b4:	e3510006 	cmp	r1, #6
   111b8:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   111bc:	ea00005c 	b	11334 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x188>
   111c0:	00011284 	.word	0x00011284
   111c4:	000111dc 	.word	0x000111dc
   111c8:	0001129c 	.word	0x0001129c
   111cc:	000112b4 	.word	0x000112b4
   111d0:	000112cc 	.word	0x000112cc
   111d4:	000112e4 	.word	0x000112e4
   111d8:	000112fc 	.word	0x000112fc
   111dc:	e3a030ff 	mov	r3, #255	; 0xff
   111e0:	e3a02000 	mov	r2, #0
   111e4:	e1a01002 	mov	r1, r2
   111e8:	e3a0e07f 	mov	lr, #127	; 0x7f
   111ec:	e1a0c003 	mov	ip, r3
   111f0:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   111f4:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   111f8:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   111fc:	e5d01131 	ldrb	r1, [r0, #305]	; 0x131
   11200:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   11204:	e3a03000 	mov	r3, #0
   11208:	e5c0c138 	strb	ip, [r0, #312]	; 0x138
   1120c:	e5c0e137 	strb	lr, [r0, #311]	; 0x137
   11210:	e5c21003 	strb	r1, [r2, #3]
   11214:	e3a02020 	mov	r2, #32
   11218:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1121c:	e5d0c133 	ldrb	ip, [r0, #307]	; 0x133
   11220:	e5c1c004 	strb	ip, [r1, #4]
   11224:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11228:	e5d0c132 	ldrb	ip, [r0, #306]	; 0x132
   1122c:	e5c1c005 	strb	ip, [r1, #5]
   11230:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11234:	e5d0c134 	ldrb	ip, [r0, #308]	; 0x134
   11238:	e5c1c006 	strb	ip, [r1, #6]
   1123c:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11240:	e5d0c135 	ldrb	ip, [r0, #309]	; 0x135
   11244:	e5c1c007 	strb	ip, [r1, #7]
   11248:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1124c:	e5d0c136 	ldrb	ip, [r0, #310]	; 0x136
   11250:	e5c1c008 	strb	ip, [r1, #8]
   11254:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11258:	e5d0c137 	ldrb	ip, [r0, #311]	; 0x137
   1125c:	e5c1c009 	strb	ip, [r1, #9]
   11260:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11264:	e5d0c138 	ldrb	ip, [r0, #312]	; 0x138
   11268:	e5c1c00a 	strb	ip, [r1, #10]
   1126c:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11270:	eb000867 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11274:	e2504000 	subs	r4, r0, #0
   11278:	0a000025 	beq	11314 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x168>
   1127c:	e1a00004 	mov	r0, r4
   11280:	e8bd8010 	pop	{r4, pc}
   11284:	e3a03000 	mov	r3, #0
   11288:	e3a010ff 	mov	r1, #255	; 0xff
   1128c:	e1a02003 	mov	r2, r3
   11290:	e3a0e07f 	mov	lr, #127	; 0x7f
   11294:	e1a0c001 	mov	ip, r1
   11298:	eaffffd4 	b	111f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   1129c:	e3a030ff 	mov	r3, #255	; 0xff
   112a0:	e3a02000 	mov	r2, #0
   112a4:	e1a01003 	mov	r1, r3
   112a8:	e3a0e07f 	mov	lr, #127	; 0x7f
   112ac:	e1a0c003 	mov	ip, r3
   112b0:	eaffffce 	b	111f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112b4:	e3a03000 	mov	r3, #0
   112b8:	e3a020ff 	mov	r2, #255	; 0xff
   112bc:	e1a01003 	mov	r1, r3
   112c0:	e3a0e07f 	mov	lr, #127	; 0x7f
   112c4:	e1a0c002 	mov	ip, r2
   112c8:	eaffffc8 	b	111f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112cc:	e3a020ff 	mov	r2, #255	; 0xff
   112d0:	e3a03000 	mov	r3, #0
   112d4:	e1a01002 	mov	r1, r2
   112d8:	e3a0e07f 	mov	lr, #127	; 0x7f
   112dc:	e1a0c002 	mov	ip, r2
   112e0:	eaffffc2 	b	111f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112e4:	e3a030ff 	mov	r3, #255	; 0xff
   112e8:	e3a01000 	mov	r1, #0
   112ec:	e1a02003 	mov	r2, r3
   112f0:	e3a0e07f 	mov	lr, #127	; 0x7f
   112f4:	e1a0c003 	mov	ip, r3
   112f8:	eaffffbc 	b	111f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112fc:	e3a030ff 	mov	r3, #255	; 0xff
   11300:	e3a0e07f 	mov	lr, #127	; 0x7f
   11304:	e1a02003 	mov	r2, r3
   11308:	e1a01003 	mov	r1, r3
   1130c:	e1a0c003 	mov	ip, r3
   11310:	eaffffb6 	b	111f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   11314:	eb0077e6 	bl	2f2b4 <CLogger::Get()>
   11318:	e59f102c 	ldr	r1, [pc, #44]	; 1134c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x1a0>
   1131c:	e3a02001 	mov	r2, #1
   11320:	e30c30b8 	movw	r3, #49336	; 0xc0b8
   11324:	e3403003 	movt	r3, #3
   11328:	eb0079af 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1132c:	e1a00004 	mov	r0, r4
   11330:	e8bd8010 	pop	{r4, pc}
   11334:	e3a03000 	mov	r3, #0
   11338:	e1a02003 	mov	r2, r3
   1133c:	e1a01003 	mov	r1, r3
   11340:	e1a0e003 	mov	lr, r3
   11344:	e1a0c003 	mov	ip, r3
   11348:	eaffffa8 	b	111f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   1134c:	0003c178 	.word	0x0003c178

00011350 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   11350:	e92d4010 	push	{r4, lr}
   11354:	e1a04000 	mov	r4, r0
   11358:	eb00318b 	bl	1d98c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1135c:	e3a03000 	mov	r3, #0
   11360:	e59f0034 	ldr	r0, [pc, #52]	; 1139c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x4c>
   11364:	e1a02003 	mov	r2, r3
   11368:	e5840000 	str	r0, [r4]
   1136c:	e3a01003 	mov	r1, #3
   11370:	e1a00004 	mov	r0, r4
   11374:	ebfffcd7 	bl	106d8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   11378:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1137c:	e2841f4f 	add	r1, r4, #316	; 0x13c
   11380:	e2843f51 	add	r3, r4, #324	; 0x144
   11384:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   11388:	e3a02000 	mov	r2, #0
   1138c:	e1a00004 	mov	r0, r4
   11390:	f441078f 	vst1.32	{d16}, [r1]
   11394:	e1c320b0 	strh	r2, [r3]
   11398:	e8bd8010 	pop	{r4, pc}
   1139c:	0003c12c 	.word	0x0003c12c

000113a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   113a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   113a4:	e1a06001 	mov	r6, r1
   113a8:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   113ac:	e5d13007 	ldrb	r3, [r1, #7]
   113b0:	e24dd008 	sub	sp, sp, #8
   113b4:	e1a05000 	mov	r5, r0
   113b8:	e3130002 	tst	r3, #2
   113bc:	1a00005c 	bne	11534 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x194>
   113c0:	e3520000 	cmp	r2, #0
   113c4:	1a00005d 	bne	11540 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a0>
   113c8:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   113cc:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
   113d0:	e2473001 	sub	r3, r7, #1
   113d4:	e3530003 	cmp	r3, #3
   113d8:	23a07001 	movcs	r7, #1
   113dc:	e1b043a4 	lsrs	r4, r4, #7
   113e0:	1a00005a 	bne	11550 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1b0>
   113e4:	e1a03004 	mov	r3, r4
   113e8:	e5d51145 	ldrb	r1, [r5, #325]	; 0x145
   113ec:	e0833004 	add	r3, r3, r4
   113f0:	e3510000 	cmp	r1, #0
   113f4:	0a000032 	beq	114c4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x124>
   113f8:	e0863003 	add	r3, r6, r3
   113fc:	e5d3c025 	ldrb	ip, [r3, #37]	; 0x25
   11400:	e5d30024 	ldrb	r0, [r3, #36]	; 0x24
   11404:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   11408:	e2853f52 	add	r3, r5, #328	; 0x148
   1140c:	e20ce00f 	and	lr, ip, #15
   11410:	e180040e 	orr	r0, r0, lr, lsl #8
   11414:	e1d3e0b0 	ldrh	lr, [r3]
   11418:	e3a03000 	mov	r3, #0
   1141c:	e1a01201 	lsl	r1, r1, #4
   11420:	e181122c 	orr	r1, r1, ip, lsr #4
   11424:	e300c146 	movw	ip, #326	; 0x146
   11428:	e7cf3010 	bfi	r3, r0, #0, #16
   1142c:	e19580bc 	ldrh	r8, [r5, ip]
   11430:	e3e0c07e 	mvn	ip, #126	; 0x7e
   11434:	e7df3811 	bfi	r3, r1, #16, #16
   11438:	e5853146 	str	r3, [r5, #326]	; 0x146
   1143c:	e041300e 	sub	r3, r1, lr
   11440:	e353007f 	cmp	r3, #127	; 0x7f
   11444:	a3a0307f 	movge	r3, #127	; 0x7f
   11448:	e153000c 	cmp	r3, ip
   1144c:	b1a0300c 	movlt	r3, ip
   11450:	e1500008 	cmp	r0, r8
   11454:	13822001 	orrne	r2, r2, #1
   11458:	e3520000 	cmp	r2, #0
   1145c:	1a000041 	bne	11568 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1c8>
   11460:	e151000e 	cmp	r1, lr
   11464:	0a000006 	beq	11484 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   11468:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   1146c:	e3500000 	cmp	r0, #0
   11470:	0a000029 	beq	1151c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
   11474:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   11478:	e3a0c000 	mov	ip, #0
   1147c:	e58dc000 	str	ip, [sp]
   11480:	eb003782 	bl	1f290 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   11484:	e2844001 	add	r4, r4, #1
   11488:	e1570004 	cmp	r7, r4
   1148c:	0a00000a 	beq	114bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x11c>
   11490:	e1a03184 	lsl	r3, r4, #3
   11494:	e0832004 	add	r2, r3, r4
   11498:	e0862002 	add	r2, r6, r2
   1149c:	e5d22023 	ldrb	r2, [r2, #35]	; 0x23
   114a0:	e1b023a2 	lsrs	r2, r2, #7
   114a4:	0affffcf 	beq	113e8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
   114a8:	e2844001 	add	r4, r4, #1
   114ac:	e3a03000 	mov	r3, #0
   114b0:	e1570004 	cmp	r7, r4
   114b4:	e5c53145 	strb	r3, [r5, #325]	; 0x145
   114b8:	1afffff4 	bne	11490 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf0>
   114bc:	e28dd008 	add	sp, sp, #8
   114c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   114c4:	e0863003 	add	r3, r6, r3
   114c8:	e3a01001 	mov	r1, #1
   114cc:	e5c51145 	strb	r1, [r5, #325]	; 0x145
   114d0:	e3520000 	cmp	r2, #0
   114d4:	e300c146 	movw	ip, #326	; 0x146
   114d8:	e2851f52 	add	r1, r5, #328	; 0x148
   114dc:	e5d30025 	ldrb	r0, [r3, #37]	; 0x25
   114e0:	e5d32024 	ldrb	r2, [r3, #36]	; 0x24
   114e4:	e200000f 	and	r0, r0, #15
   114e8:	e1822400 	orr	r2, r2, r0, lsl #8
   114ec:	e18520bc 	strh	r2, [r5, ip]
   114f0:	e5d32026 	ldrb	r2, [r3, #38]	; 0x26
   114f4:	e5d30025 	ldrb	r0, [r3, #37]	; 0x25
   114f8:	e1a03202 	lsl	r3, r2, #4
   114fc:	e1833220 	orr	r3, r3, r0, lsr #4
   11500:	e1c130b0 	strh	r3, [r1]
   11504:	0affffde 	beq	11484 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   11508:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   1150c:	e3a03000 	mov	r3, #0
   11510:	e1a02003 	mov	r2, r3
   11514:	e3500000 	cmp	r0, #0
   11518:	1affffd5 	bne	11474 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd4>
   1151c:	e30c10d8 	movw	r1, #49368	; 0xc0d8
   11520:	e3401003 	movt	r1, #3
   11524:	e30c00ec 	movw	r0, #49388	; 0xc0ec
   11528:	e3400003 	movt	r0, #3
   1152c:	e300215a 	movw	r2, #346	; 0x15a
   11530:	eb006ce2 	bl	2c8c0 <assertion_failed>
   11534:	e3520000 	cmp	r2, #0
   11538:	13a02000 	movne	r2, #0
   1153c:	1affffa1 	bne	113c8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   11540:	e7e030d3 	ubfx	r3, r3, #1, #1
   11544:	e3a02001 	mov	r2, #1
   11548:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   1154c:	eaffff9d 	b	113c8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   11550:	e3a04000 	mov	r4, #0
   11554:	e5c54145 	strb	r4, [r5, #325]	; 0x145
   11558:	e1520004 	cmp	r2, r4
   1155c:	01a04002 	moveq	r4, r2
   11560:	1affffe8 	bne	11508 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x168>
   11564:	eaffffc6 	b	11484 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   11568:	e0402008 	sub	r2, r0, r8
   1156c:	e352007f 	cmp	r2, #127	; 0x7f
   11570:	a3a0207f 	movge	r2, #127	; 0x7f
   11574:	e152000c 	cmp	r2, ip
   11578:	b1a0200c 	movlt	r2, ip
   1157c:	eaffffb9 	b	11468 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xc8>

00011580 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   11580:	e251c000 	subs	ip, r1, #0
   11584:	13a0c001 	movne	ip, #1
   11588:	e3520040 	cmp	r2, #64	; 0x40
   1158c:	13a0c000 	movne	ip, #0
   11590:	e35c0000 	cmp	ip, #0
   11594:	012fff1e 	bxeq	lr
   11598:	e5903000 	ldr	r3, [r0]
   1159c:	e92d4070 	push	{r4, r5, r6, lr}
   115a0:	e1a04000 	mov	r4, r0
   115a4:	e1a05001 	mov	r5, r1
   115a8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   115ac:	e12fff33 	blx	r3
   115b0:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   115b4:	e3530000 	cmp	r3, #0
   115b8:	0a000003 	beq	115cc <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
   115bc:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   115c0:	e2841024 	add	r1, r4, #36	; 0x24
   115c4:	e2400001 	sub	r0, r0, #1
   115c8:	e12fff33 	blx	r3
   115cc:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   115d0:	e3530000 	cmp	r3, #0
   115d4:	08bd8070 	popeq	{r4, r5, r6, pc}
   115d8:	e1a01005 	mov	r1, r5
   115dc:	e1a00004 	mov	r0, r4
   115e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   115e4:	eaffff6d 	b	113a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

000115e8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   115e8:	e92d4010 	push	{r4, lr}
   115ec:	e3a03000 	mov	r3, #0
   115f0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   115f4:	e5d0e131 	ldrb	lr, [r0, #305]	; 0x131
   115f8:	e3a02020 	mov	r2, #32
   115fc:	e5cce003 	strb	lr, [ip, #3]
   11600:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11604:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   11608:	e5cce004 	strb	lr, [ip, #4]
   1160c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11610:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   11614:	e5cce005 	strb	lr, [ip, #5]
   11618:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   1161c:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   11620:	e5cce006 	strb	lr, [ip, #6]
   11624:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11628:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   1162c:	e5cce007 	strb	lr, [ip, #7]
   11630:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11634:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   11638:	e5cce008 	strb	lr, [ip, #8]
   1163c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11640:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   11644:	e5cce009 	strb	lr, [ip, #9]
   11648:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   1164c:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   11650:	e5cce00a 	strb	lr, [ip, #10]
   11654:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11658:	eb00076d 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1165c:	e2504000 	subs	r4, r0, #0
   11660:	0a000001 	beq	1166c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x84>
   11664:	e1a00004 	mov	r0, r4
   11668:	e8bd8010 	pop	{r4, pc}
   1166c:	eb007710 	bl	2f2b4 <CLogger::Get()>
   11670:	e59f1014 	ldr	r1, [pc, #20]	; 1168c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa4>
   11674:	e3a02001 	mov	r2, #1
   11678:	e30c30b8 	movw	r3, #49336	; 0xc0b8
   1167c:	e3403003 	movt	r3, #3
   11680:	eb0078d9 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11684:	e1a00004 	mov	r0, r4
   11688:	e8bd8010 	pop	{r4, pc}
   1168c:	0003c178 	.word	0x0003c178

00011690 <CUSBGamePadPS4Device::DisableTouchpad()>:
   11690:	e3043c80 	movw	r3, #19584	; 0x4c80
   11694:	e3403004 	movt	r3, #4
   11698:	e3a02000 	mov	r2, #0
   1169c:	e5c32000 	strb	r2, [r3]
   116a0:	e12fff1e 	bx	lr

000116a4 <CUSBGamePadPS4Device::Configure()>:
   116a4:	e5d03130 	ldrb	r3, [r0, #304]	; 0x130
   116a8:	e92d4070 	push	{r4, r5, r6, lr}
   116ac:	e3530000 	cmp	r3, #0
   116b0:	0a000038 	beq	11798 <CUSBGamePadPS4Device::Configure()+0xf4>
   116b4:	e2803f4a 	add	r3, r0, #296	; 0x128
   116b8:	e3a02040 	mov	r2, #64	; 0x40
   116bc:	e1a04000 	mov	r4, r0
   116c0:	e1c320b0 	strh	r2, [r3]
   116c4:	eb003054 	bl	1d81c <CUSBGamePadDevice::Configure()>
   116c8:	e3500000 	cmp	r0, #0
   116cc:	0a00003d 	beq	117c8 <CUSBGamePadPS4Device::Configure()+0x124>
   116d0:	e3043c80 	movw	r3, #19584	; 0x4c80
   116d4:	e3403004 	movt	r3, #4
   116d8:	e5d33000 	ldrb	r3, [r3]
   116dc:	e3530000 	cmp	r3, #0
   116e0:	1a000030 	bne	117a8 <CUSBGamePadPS4Device::Configure()+0x104>
   116e4:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   116e8:	e284302c 	add	r3, r4, #44	; 0x2c
   116ec:	e2842074 	add	r2, r4, #116	; 0x74
   116f0:	e3a01001 	mov	r1, #1
   116f4:	e3a00016 	mov	r0, #22
   116f8:	e58410e8 	str	r1, [r4, #232]	; 0xe8
   116fc:	e5840104 	str	r0, [r4, #260]	; 0x104
   11700:	e3a01006 	mov	r1, #6
   11704:	e5841024 	str	r1, [r4, #36]	; 0x24
   11708:	f443078f 	vst1.32	{d16}, [r3]
   1170c:	e283300c 	add	r3, r3, #12
   11710:	e1520003 	cmp	r2, r3
   11714:	1afffffb 	bne	11708 <CUSBGamePadPS4Device::Configure()+0x64>
   11718:	e3a00020 	mov	r0, #32
   1171c:	eb009564 	bl	36cb4 <operator new[](unsigned int)>
   11720:	e3a02020 	mov	r2, #32
   11724:	e3a01000 	mov	r1, #0
   11728:	e584013c 	str	r0, [r4, #316]	; 0x13c
   1172c:	eb00933a 	bl	3641c <memset>
   11730:	e594313c 	ldr	r3, [r4, #316]	; 0x13c
   11734:	e3a02005 	mov	r2, #5
   11738:	e3a0c007 	mov	ip, #7
   1173c:	eddf0b29 	vldr	d16, [pc, #164]	; 117e8 <CUSBGamePadPS4Device::Configure()+0x144>
   11740:	e3a01004 	mov	r1, #4
   11744:	e5c32000 	strb	r2, [r3]
   11748:	e2843e13 	add	r3, r4, #304	; 0x130
   1174c:	e2833001 	add	r3, r3, #1
   11750:	e1a00004 	mov	r0, r4
   11754:	e594213c 	ldr	r2, [r4, #316]	; 0x13c
   11758:	e5c2c001 	strb	ip, [r2, #1]
   1175c:	e594213c 	ldr	r2, [r4, #316]	; 0x13c
   11760:	e5c21002 	strb	r1, [r2, #2]
   11764:	f443070f 	vst1.8	{d16}, [r3]
   11768:	ebffff9e 	bl	115e8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1176c:	e2842f4d 	add	r2, r4, #308	; 0x134
   11770:	e3a03000 	mov	r3, #0
   11774:	e3a000fa 	mov	r0, #250	; 0xfa
   11778:	e1c230b0 	strh	r3, [r2]
   1177c:	e5c43136 	strb	r3, [r4, #310]	; 0x136
   11780:	eb0090c3 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   11784:	e1a00004 	mov	r0, r4
   11788:	ebffff96 	bl	115e8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1178c:	e1a00004 	mov	r0, r4
   11790:	e8bd4070 	pop	{r4, r5, r6, lr}
   11794:	ea0007a3 	b	13628 <CUSBHIDDevice::StartRequest()>
   11798:	e59f1050 	ldr	r1, [pc, #80]	; 117f0 <CUSBGamePadPS4Device::Configure()+0x14c>
   1179c:	ebfffbb9 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   117a0:	e3a00000 	mov	r0, #0
   117a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   117a8:	e3a00038 	mov	r0, #56	; 0x38
   117ac:	eb00953a 	bl	36c9c <operator new(unsigned int)>
   117b0:	e3a02000 	mov	r2, #0
   117b4:	e3a01001 	mov	r1, #1
   117b8:	e1a05000 	mov	r5, r0
   117bc:	eb003661 	bl	1f148 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   117c0:	e5845140 	str	r5, [r4, #320]	; 0x140
   117c4:	eaffffc6 	b	116e4 <CUSBGamePadPS4Device::Configure()+0x40>
   117c8:	eb0076b9 	bl	2f2b4 <CLogger::Get()>
   117cc:	e59f101c 	ldr	r1, [pc, #28]	; 117f0 <CUSBGamePadPS4Device::Configure()+0x14c>
   117d0:	e3a02001 	mov	r2, #1
   117d4:	e30b3f74 	movw	r3, #49012	; 0xbf74
   117d8:	e3403003 	movt	r3, #3
   117dc:	eb007882 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   117e0:	e3a00000 	mov	r0, #0
   117e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   117e8:	ff0000f0 	.word	0xff0000f0
   117ec:	ff7fffff 	.word	0xff7fffff
   117f0:	0003c178 	.word	0x0003c178

000117f4 <CUSBGamePadPS4Device::GetProperties()>:
   117f4:	e3a0003f 	mov	r0, #63	; 0x3f
   117f8:	e12fff1e 	bx	lr

000117fc <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   117fc:	e92d4010 	push	{r4, lr}
   11800:	e1a04000 	mov	r4, r0
   11804:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   11808:	e59f3024 	ldr	r3, [pc, #36]	; 11834 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   1180c:	e3500000 	cmp	r0, #0
   11810:	e5843000 	str	r3, [r4]
   11814:	0a000000 	beq	1181c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   11818:	eb009531 	bl	36ce4 <operator delete[](void*)>
   1181c:	e3a03000 	mov	r3, #0
   11820:	e1a00004 	mov	r0, r4
   11824:	e5843134 	str	r3, [r4, #308]	; 0x134
   11828:	eb003068 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1182c:	e1a00004 	mov	r0, r4
   11830:	e8bd8010 	pop	{r4, pc}
   11834:	0003c1f0 	.word	0x0003c1f0

00011838 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   11838:	e92d4010 	push	{r4, lr}
   1183c:	e1a04000 	mov	r4, r0
   11840:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   11844:	e59f3030 	ldr	r3, [pc, #48]	; 1187c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x44>
   11848:	e3500000 	cmp	r0, #0
   1184c:	e5843000 	str	r3, [r4]
   11850:	0a000000 	beq	11858 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   11854:	eb009522 	bl	36ce4 <operator delete[](void*)>
   11858:	e3a03000 	mov	r3, #0
   1185c:	e1a00004 	mov	r0, r4
   11860:	e5843134 	str	r3, [r4, #308]	; 0x134
   11864:	eb003059 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11868:	e1a00004 	mov	r0, r4
   1186c:	e3a01f4f 	mov	r1, #316	; 0x13c
   11870:	eb009521 	bl	36cfc <operator delete(void*, unsigned int)>
   11874:	e1a00004 	mov	r0, r4
   11878:	e8bd8010 	pop	{r4, pc}
   1187c:	0003c1f0 	.word	0x0003c1f0

00011880 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   11880:	e92d4070 	push	{r4, r5, r6, lr}
   11884:	e1a04000 	mov	r4, r0
   11888:	e1a05002 	mov	r5, r2
   1188c:	eb00303e 	bl	1d98c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11890:	e2842f4e 	add	r2, r4, #312	; 0x138
   11894:	e59f1018 	ldr	r1, [pc, #24]	; 118b4 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   11898:	e3a03000 	mov	r3, #0
   1189c:	e5841000 	str	r1, [r4]
   118a0:	e1a00004 	mov	r0, r4
   118a4:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   118a8:	e5843134 	str	r3, [r4, #308]	; 0x134
   118ac:	e1c230b0 	strh	r3, [r2]
   118b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   118b4:	0003c1f0 	.word	0x0003c1f0

000118b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   118b8:	e3500000 	cmp	r0, #0
   118bc:	e92d4010 	push	{r4, lr}
   118c0:	0a000017 	beq	11924 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x6c>
   118c4:	e3520020 	cmp	r2, #32
   118c8:	8a00001b 	bhi	1193c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x84>
   118cc:	e3520000 	cmp	r2, #0
   118d0:	0a000011 	beq	1191c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x64>
   118d4:	e79031a1 	ldr	r3, [r0, r1, lsr #3]
   118d8:	e201c007 	and	ip, r1, #7
   118dc:	e080e1a1 	add	lr, r0, r1, lsr #3
   118e0:	e3520018 	cmp	r2, #24
   118e4:	9a000008 	bls	1190c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x54>
   118e8:	e59e1003 	ldr	r1, [lr, #3]
   118ec:	e2422018 	sub	r2, r2, #24
   118f0:	e3e00000 	mvn	r0, #0
   118f4:	e1a03c33 	lsr	r3, r3, ip
   118f8:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   118fc:	e1a01c31 	lsr	r1, r1, ip
   11900:	e1c12210 	bic	r2, r1, r0, lsl r2
   11904:	e1830c02 	orr	r0, r3, r2, lsl #24
   11908:	e8bd8010 	pop	{r4, pc}
   1190c:	e1a03c33 	lsr	r3, r3, ip
   11910:	e3e01000 	mvn	r1, #0
   11914:	e1c30211 	bic	r0, r3, r1, lsl r2
   11918:	e8bd8010 	pop	{r4, pc}
   1191c:	e1a00002 	mov	r0, r2
   11920:	e8bd8010 	pop	{r4, pc}
   11924:	e30c1184 	movw	r1, #49540	; 0xc184
   11928:	e3401003 	movt	r1, #3
   1192c:	e30c019c 	movw	r0, #49564	; 0xc19c
   11930:	e3400003 	movt	r0, #3
   11934:	e3002132 	movw	r2, #306	; 0x132
   11938:	eb006be0 	bl	2c8c0 <assertion_failed>
   1193c:	e30c1184 	movw	r1, #49540	; 0xc184
   11940:	e3401003 	movt	r1, #3
   11944:	e30c01a8 	movw	r0, #49576	; 0xc1a8
   11948:	e3400003 	movt	r0, #3
   1194c:	e3002133 	movw	r2, #307	; 0x133
   11950:	eb006bda 	bl	2c8c0 <assertion_failed>

00011954 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   11954:	e3500000 	cmp	r0, #0
   11958:	e92d4010 	push	{r4, lr}
   1195c:	0a00001f 	beq	119e0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x8c>
   11960:	e3520020 	cmp	r2, #32
   11964:	8a000023 	bhi	119f8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0xa4>
   11968:	e3520000 	cmp	r2, #0
   1196c:	0a000015 	beq	119c8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x74>
   11970:	e08031a1 	add	r3, r0, r1, lsr #3
   11974:	e201c007 	and	ip, r1, #7
   11978:	e79001a1 	ldr	r0, [r0, r1, lsr #3]
   1197c:	e3520018 	cmp	r2, #24
   11980:	9a000012 	bls	119d0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x7c>
   11984:	e5933003 	ldr	r3, [r3, #3]
   11988:	e2421018 	sub	r1, r2, #24
   1198c:	e1a00c30 	lsr	r0, r0, ip
   11990:	e3520020 	cmp	r2, #32
   11994:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   11998:	e1a03c33 	lsr	r3, r3, ip
   1199c:	e3e0c000 	mvn	ip, #0
   119a0:	e1c3311c 	bic	r3, r3, ip, lsl r1
   119a4:	e1800c03 	orr	r0, r0, r3, lsl #24
   119a8:	08bd8010 	popeq	{r4, pc}
   119ac:	e3a01001 	mov	r1, #1
   119b0:	e2423001 	sub	r3, r2, #1
   119b4:	e0103311 	ands	r3, r0, r1, lsl r3
   119b8:	11a01211 	lslne	r1, r1, r2
   119bc:	12611000 	rsbne	r1, r1, #0
   119c0:	11800001 	orrne	r0, r0, r1
   119c4:	e8bd8010 	pop	{r4, pc}
   119c8:	e1a00002 	mov	r0, r2
   119cc:	e8bd8010 	pop	{r4, pc}
   119d0:	e1a00c30 	lsr	r0, r0, ip
   119d4:	e3e03000 	mvn	r3, #0
   119d8:	e1c00213 	bic	r0, r0, r3, lsl r2
   119dc:	eafffff2 	b	119ac <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x58>
   119e0:	e30c1184 	movw	r1, #49540	; 0xc184
   119e4:	e3401003 	movt	r1, #3
   119e8:	e30c019c 	movw	r0, #49564	; 0xc19c
   119ec:	e3400003 	movt	r0, #3
   119f0:	e3002155 	movw	r2, #341	; 0x155
   119f4:	eb006bb1 	bl	2c8c0 <assertion_failed>
   119f8:	e30c1184 	movw	r1, #49540	; 0xc184
   119fc:	e3401003 	movt	r1, #3
   11a00:	e30c01a8 	movw	r0, #49576	; 0xc1a8
   11a04:	e3400003 	movt	r0, #3
   11a08:	e3002156 	movw	r2, #342	; 0x156
   11a0c:	eb006bab 	bl	2c8c0 <assertion_failed>

00011a10 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   11a10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a14:	e590b134 	ldr	fp, [r0, #308]	; 0x134
   11a18:	e24dd034 	sub	sp, sp, #52	; 0x34
   11a1c:	e35b0000 	cmp	fp, #0
   11a20:	0a0000a2 	beq	11cb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a0>
   11a24:	e2803f4e 	add	r3, r0, #312	; 0x138
   11a28:	e1a0c000 	mov	ip, r0
   11a2c:	e1d340b0 	ldrh	r4, [r3]
   11a30:	e3540000 	cmp	r4, #0
   11a34:	0a0000e1 	beq	11dc0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3b0>
   11a38:	e3a00000 	mov	r0, #0
   11a3c:	e30322eb 	movw	r2, #13035	; 0x32eb
   11a40:	e34f28a4 	movt	r2, #63652	; 0xf8a4
   11a44:	e1a0a001 	mov	sl, r1
   11a48:	e1a08000 	mov	r8, r0
   11a4c:	e1a07002 	mov	r7, r2
   11a50:	e1a06000 	mov	r6, r0
   11a54:	e1a05000 	mov	r5, r0
   11a58:	e58d001c 	str	r0, [sp, #28]
   11a5c:	e58d0018 	str	r0, [sp, #24]
   11a60:	e58d2010 	str	r2, [sp, #16]
   11a64:	e58d200c 	str	r2, [sp, #12]
   11a68:	e98d0005 	stmib	sp, {r0, r2}
   11a6c:	e58dc014 	str	ip, [sp, #20]
   11a70:	ea00000a 	b	11aa0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   11a74:	e3520034 	cmp	r2, #52	; 0x34
   11a78:	0a000070 	beq	11c40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x230>
   11a7c:	ca000036 	bgt	11b5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x14c>
   11a80:	e3520014 	cmp	r2, #20
   11a84:	058d300c 	streq	r3, [sp, #12]
   11a88:	0a000002 	beq	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11a8c:	da000038 	ble	11b74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x164>
   11a90:	e3520024 	cmp	r2, #36	; 0x24
   11a94:	01a07003 	moveq	r7, r3
   11a98:	e3540000 	cmp	r4, #0
   11a9c:	0a000022 	beq	11b2c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x11c>
   11aa0:	e1db20d0 	ldrsb	r2, [fp]
   11aa4:	e2023003 	and	r3, r2, #3
   11aa8:	e3530001 	cmp	r3, #1
   11aac:	0a00004b 	beq	11be0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
   11ab0:	e3530002 	cmp	r3, #2
   11ab4:	0a000052 	beq	11c04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f4>
   11ab8:	e3530000 	cmp	r3, #0
   11abc:	0a00004c 	beq	11bf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e4>
   11ac0:	e1db30d3 	ldrsb	r3, [fp, #3]
   11ac4:	e2444005 	sub	r4, r4, #5
   11ac8:	e1db10d2 	ldrsb	r1, [fp, #2]
   11acc:	e28bb005 	add	fp, fp, #5
   11ad0:	e6ff4074 	uxth	r4, r4
   11ad4:	e1a03803 	lsl	r3, r3, #16
   11ad8:	e1833401 	orr	r3, r3, r1, lsl #8
   11adc:	e15b10d4 	ldrsb	r1, [fp, #-4]
   11ae0:	e1833001 	orr	r3, r3, r1
   11ae4:	e15b10d1 	ldrsb	r1, [fp, #-1]
   11ae8:	e1833c01 	orr	r3, r3, r1, lsl #24
   11aec:	e20220fc 	and	r2, r2, #252	; 0xfc
   11af0:	e3520084 	cmp	r2, #132	; 0x84
   11af4:	1affffde 	bne	11a74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11af8:	e3580000 	cmp	r8, #0
   11afc:	1a000071 	bne	11cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2b8>
   11b00:	e35a0000 	cmp	sl, #0
   11b04:	0a000060 	beq	11c8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x27c>
   11b08:	e5da2000 	ldrb	r2, [sl]
   11b0c:	e3520000 	cmp	r2, #0
   11b10:	11520003 	cmpne	r2, r3
   11b14:	1a00000e 	bne	11b54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x144>
   11b18:	e1a08003 	mov	r8, r3
   11b1c:	e3540000 	cmp	r4, #0
   11b20:	e3a03008 	mov	r3, #8
   11b24:	e58d3004 	str	r3, [sp, #4]
   11b28:	1affffdc 	bne	11aa0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   11b2c:	e59d3004 	ldr	r3, [sp, #4]
   11b30:	e59dc014 	ldr	ip, [sp, #20]
   11b34:	e2833007 	add	r3, r3, #7
   11b38:	e7ef41d3 	ubfx	r4, r3, #3, #16
   11b3c:	e28c3f4a 	add	r3, ip, #296	; 0x128
   11b40:	e59d2018 	ldr	r2, [sp, #24]
   11b44:	e58c2024 	str	r2, [ip, #36]	; 0x24
   11b48:	e59d201c 	ldr	r2, [sp, #28]
   11b4c:	e58c20e8 	str	r2, [ip, #232]	; 0xe8
   11b50:	e1c340b0 	strh	r4, [r3]
   11b54:	e28dd034 	add	sp, sp, #52	; 0x34
   11b58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b5c:	e3520080 	cmp	r2, #128	; 0x80
   11b60:	0a00002e 	beq	11c20 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x210>
   11b64:	da000008 	ble	11b8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x17c>
   11b68:	e3520094 	cmp	r2, #148	; 0x94
   11b6c:	01a06003 	moveq	r6, r3
   11b70:	eaffffc8 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11b74:	e3520004 	cmp	r2, #4
   11b78:	1a000009 	bne	11ba4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x194>
   11b7c:	e3500001 	cmp	r0, #1
   11b80:	03530009 	cmpeq	r3, #9
   11b84:	03a00002 	moveq	r0, #2
   11b88:	eaffffc2 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11b8c:	e3520044 	cmp	r2, #68	; 0x44
   11b90:	058d3008 	streq	r3, [sp, #8]
   11b94:	0affffbf 	beq	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11b98:	e3520074 	cmp	r2, #116	; 0x74
   11b9c:	01a05003 	moveq	r5, r3
   11ba0:	eaffffbc 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11ba4:	e3520008 	cmp	r2, #8
   11ba8:	1affffba 	bne	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11bac:	e3530036 	cmp	r3, #54	; 0x36
   11bb0:	ca000005 	bgt	11bcc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1bc>
   11bb4:	e353002f 	cmp	r3, #47	; 0x2f
   11bb8:	ca000039 	bgt	11ca4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x294>
   11bbc:	e2433004 	sub	r3, r3, #4
   11bc0:	e3530001 	cmp	r3, #1
   11bc4:	93a00001 	movls	r0, #1
   11bc8:	eaffffb2 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11bcc:	e3530039 	cmp	r3, #57	; 0x39
   11bd0:	1affffb0 	bne	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11bd4:	e3500001 	cmp	r0, #1
   11bd8:	03a00004 	moveq	r0, #4
   11bdc:	eaffffad 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11be0:	e2444002 	sub	r4, r4, #2
   11be4:	e1db30d1 	ldrsb	r3, [fp, #1]
   11be8:	e28bb002 	add	fp, fp, #2
   11bec:	e6ff4074 	uxth	r4, r4
   11bf0:	eaffffbd 	b	11aec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xdc>
   11bf4:	e2444001 	sub	r4, r4, #1
   11bf8:	e28bb001 	add	fp, fp, #1
   11bfc:	e6ff4074 	uxth	r4, r4
   11c00:	eaffffb9 	b	11aec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xdc>
   11c04:	e5db3001 	ldrb	r3, [fp, #1]
   11c08:	e2444003 	sub	r4, r4, #3
   11c0c:	e1db10d2 	ldrsb	r1, [fp, #2]
   11c10:	e28bb003 	add	fp, fp, #3
   11c14:	e6ff4074 	uxth	r4, r4
   11c18:	e1833401 	orr	r3, r3, r1, lsl #8
   11c1c:	eaffffb2 	b	11aec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xdc>
   11c20:	e2033003 	and	r3, r3, #3
   11c24:	e3530002 	cmp	r3, #2
   11c28:	0a000006 	beq	11c48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x238>
   11c2c:	e0090596 	mul	r9, r6, r5
   11c30:	e59d3004 	ldr	r3, [sp, #4]
   11c34:	e0833009 	add	r3, r3, r9
   11c38:	e58d3004 	str	r3, [sp, #4]
   11c3c:	eaffff95 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11c40:	e58d3010 	str	r3, [sp, #16]
   11c44:	eaffff93 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11c48:	e3500003 	cmp	r0, #3
   11c4c:	0a000022 	beq	11cdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2cc>
   11c50:	e3500004 	cmp	r0, #4
   11c54:	0a00005c 	beq	11dcc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3bc>
   11c58:	e3500002 	cmp	r0, #2
   11c5c:	1afffff2 	bne	11c2c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x21c>
   11c60:	e59d3014 	ldr	r3, [sp, #20]
   11c64:	e0090596 	mul	r9, r6, r5
   11c68:	e59d1004 	ldr	r1, [sp, #4]
   11c6c:	e1a0000a 	mov	r0, sl
   11c70:	e1a02009 	mov	r2, r9
   11c74:	e5836104 	str	r6, [r3, #260]	; 0x104
   11c78:	ebffff0e 	bl	118b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11c7c:	e59d3014 	ldr	r3, [sp, #20]
   11c80:	e5830108 	str	r0, [r3, #264]	; 0x108
   11c84:	e3a00001 	mov	r0, #1
   11c88:	eaffffe8 	b	11c30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x220>
   11c8c:	e30c1184 	movw	r1, #49540	; 0xc184
   11c90:	e3401003 	movt	r1, #3
   11c94:	e30c019c 	movw	r0, #49564	; 0xc19c
   11c98:	e3400003 	movt	r0, #3
   11c9c:	e3002132 	movw	r2, #306	; 0x132
   11ca0:	eb006b06 	bl	2c8c0 <assertion_failed>
   11ca4:	e3500001 	cmp	r0, #1
   11ca8:	03a00003 	moveq	r0, #3
   11cac:	eaffff79 	b	11a98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x88>
   11cb0:	e30c1184 	movw	r1, #49540	; 0xc184
   11cb4:	e3401003 	movt	r1, #3
   11cb8:	e30c01b8 	movw	r0, #49592	; 0xc1b8
   11cbc:	e3400003 	movt	r0, #3
   11cc0:	e3a020a2 	mov	r2, #162	; 0xa2
   11cc4:	eb006afd 	bl	2c8c0 <assertion_failed>
   11cc8:	e59d3004 	ldr	r3, [sp, #4]
   11ccc:	e59dc014 	ldr	ip, [sp, #20]
   11cd0:	e2834007 	add	r4, r3, #7
   11cd4:	e7ef41d4 	ubfx	r4, r4, #3, #16
   11cd8:	eaffff97 	b	11b3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x12c>
   11cdc:	e3560000 	cmp	r6, #0
   11ce0:	0a000058 	beq	11e48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x438>
   11ce4:	e59d3014 	ldr	r3, [sp, #20]
   11ce8:	e3a0900c 	mov	r9, #12
   11cec:	e59d2018 	ldr	r2, [sp, #24]
   11cf0:	e59d000c 	ldr	r0, [sp, #12]
   11cf4:	e59dc010 	ldr	ip, [sp, #16]
   11cf8:	e59d1004 	ldr	r1, [sp, #4]
   11cfc:	e0293299 	mla	r9, r9, r2, r3
   11d00:	e30332eb 	movw	r3, #13035	; 0x32eb
   11d04:	e34f38a4 	movt	r3, #63652	; 0xf8a4
   11d08:	e1a02000 	mov	r2, r0
   11d0c:	e1500003 	cmp	r0, r3
   11d10:	e59d0008 	ldr	r0, [sp, #8]
   11d14:	01a0200c 	moveq	r2, ip
   11d18:	e1570003 	cmp	r7, r3
   11d1c:	11a00007 	movne	r0, r7
   11d20:	e3a03000 	mov	r3, #0
   11d24:	e58d8020 	str	r8, [sp, #32]
   11d28:	e1a08002 	mov	r8, r2
   11d2c:	e58db024 	str	fp, [sp, #36]	; 0x24
   11d30:	e1a0b001 	mov	fp, r1
   11d34:	e58d4028 	str	r4, [sp, #40]	; 0x28
   11d38:	e1a04000 	mov	r4, r0
   11d3c:	e58d702c 	str	r7, [sp, #44]	; 0x2c
   11d40:	e1a07003 	mov	r7, r3
   11d44:	ea000008 	b	11d6c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x35c>
   11d48:	ebfffeda 	bl	118b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11d4c:	e5890028 	str	r0, [r9, #40]	; 0x28
   11d50:	e2870001 	add	r0, r7, #1
   11d54:	e08bb005 	add	fp, fp, r5
   11d58:	e289900c 	add	r9, r9, #12
   11d5c:	e350000f 	cmp	r0, #15
   11d60:	91500006 	cmpls	r0, r6
   11d64:	2a000009 	bcs	11d90 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x380>
   11d68:	e1a07000 	mov	r7, r0
   11d6c:	e1a02005 	mov	r2, r5
   11d70:	e1a0100b 	mov	r1, fp
   11d74:	e1a0000a 	mov	r0, sl
   11d78:	e3580000 	cmp	r8, #0
   11d7c:	e589802c 	str	r8, [r9, #44]	; 0x2c
   11d80:	e5894030 	str	r4, [r9, #48]	; 0x30
   11d84:	aaffffef 	bge	11d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x338>
   11d88:	ebfffef1 	bl	11954 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   11d8c:	eaffffee 	b	11d4c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x33c>
   11d90:	e59d2018 	ldr	r2, [sp, #24]
   11d94:	e1a03007 	mov	r3, r7
   11d98:	e59d8020 	ldr	r8, [sp, #32]
   11d9c:	e0090596 	mul	r9, r6, r5
   11da0:	e2822001 	add	r2, r2, #1
   11da4:	e59db024 	ldr	fp, [sp, #36]	; 0x24
   11da8:	e0823003 	add	r3, r2, r3
   11dac:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   11db0:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
   11db4:	e3a00001 	mov	r0, #1
   11db8:	e58d3018 	str	r3, [sp, #24]
   11dbc:	eaffff9b 	b	11c30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x220>
   11dc0:	e58d401c 	str	r4, [sp, #28]
   11dc4:	e58d4018 	str	r4, [sp, #24]
   11dc8:	eaffff5b 	b	11b3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x12c>
   11dcc:	e3560000 	cmp	r6, #0
   11dd0:	0a00001c 	beq	11e48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x438>
   11dd4:	e59d301c 	ldr	r3, [sp, #28]
   11dd8:	e3a09000 	mov	r9, #0
   11ddc:	e59d2014 	ldr	r2, [sp, #20]
   11de0:	e28331e9 	add	r3, r3, #1073741882	; 0x4000003a
   11de4:	e58d4020 	str	r4, [sp, #32]
   11de8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   11dec:	e0822103 	add	r2, r2, r3, lsl #2
   11df0:	e59d3004 	ldr	r3, [sp, #4]
   11df4:	e1a04002 	mov	r4, r2
   11df8:	e1a07003 	mov	r7, r3
   11dfc:	e1a01007 	mov	r1, r7
   11e00:	e1a02005 	mov	r2, r5
   11e04:	e1a0000a 	mov	r0, sl
   11e08:	e0877005 	add	r7, r7, r5
   11e0c:	ebfffea9 	bl	118b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11e10:	e1a01009 	mov	r1, r9
   11e14:	e2899001 	add	r9, r9, #1
   11e18:	e5a40004 	str	r0, [r4, #4]!
   11e1c:	e3590005 	cmp	r9, #5
   11e20:	91590006 	cmpls	r9, r6
   11e24:	3afffff4 	bcc	11dfc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3ec>
   11e28:	e28d301c 	add	r3, sp, #28
   11e2c:	e0090596 	mul	r9, r6, r5
   11e30:	e3a00001 	mov	r0, #1
   11e34:	e8930098 	ldm	r3, {r3, r4, r7}
   11e38:	e2833001 	add	r3, r3, #1
   11e3c:	e0833001 	add	r3, r3, r1
   11e40:	e58d301c 	str	r3, [sp, #28]
   11e44:	eaffff79 	b	11c30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x220>
   11e48:	e1a09006 	mov	r9, r6
   11e4c:	e3a00001 	mov	r0, #1
   11e50:	eaffff76 	b	11c30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x220>

00011e54 <CUSBGamePadStandardDevice::Configure()>:
   11e54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e58:	e3a01021 	mov	r1, #33	; 0x21
   11e5c:	e1a04000 	mov	r4, r0
   11e60:	e24dd078 	sub	sp, sp, #120	; 0x78
   11e64:	ebfff9fc 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   11e68:	e2505000 	subs	r5, r0, #0
   11e6c:	0a000003 	beq	11e80 <CUSBGamePadStandardDevice::Configure()+0x2c>
   11e70:	e1d530b7 	ldrh	r3, [r5, #7]
   11e74:	e6ff0073 	uxth	r0, r3
   11e78:	e3500000 	cmp	r0, #0
   11e7c:	1a000005 	bne	11e98 <CUSBGamePadStandardDevice::Configure()+0x44>
   11e80:	e59f1158 	ldr	r1, [pc, #344]	; 11fe0 <CUSBGamePadStandardDevice::Configure()+0x18c>
   11e84:	e1a00004 	mov	r0, r4
   11e88:	ebfff9fe 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   11e8c:	e3a00000 	mov	r0, #0
   11e90:	e28dd078 	add	sp, sp, #120	; 0x78
   11e94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e98:	e2846f4e 	add	r6, r4, #312	; 0x138
   11e9c:	e1c630b0 	strh	r3, [r6]
   11ea0:	eb009383 	bl	36cb4 <operator new[](unsigned int)>
   11ea4:	e1a03000 	mov	r3, r0
   11ea8:	e1a00004 	mov	r0, r4
   11eac:	e5843134 	str	r3, [r4, #308]	; 0x134
   11eb0:	ebfff9de 	bl	10630 <CUSBFunction::GetHost() const>
   11eb4:	e1a07000 	mov	r7, r0
   11eb8:	e1a00004 	mov	r0, r4
   11ebc:	ebfff9d0 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   11ec0:	e5d58006 	ldrb	r8, [r5, #6]
   11ec4:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   11ec8:	e1a05000 	mov	r5, r0
   11ecc:	e1d6a0b0 	ldrh	sl, [r6]
   11ed0:	e1a00004 	mov	r0, r4
   11ed4:	ebfffa34 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   11ed8:	e3a03081 	mov	r3, #129	; 0x81
   11edc:	e58d000c 	str	r0, [sp, #12]
   11ee0:	e1a02008 	mov	r2, r8
   11ee4:	e58d3008 	str	r3, [sp, #8]
   11ee8:	e1a01005 	mov	r1, r5
   11eec:	e3a03000 	mov	r3, #0
   11ef0:	e1a00007 	mov	r0, r7
   11ef4:	e58da004 	str	sl, [sp, #4]
   11ef8:	e58d9000 	str	r9, [sp]
   11efc:	eb0006ff 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11f00:	e1d630b0 	ldrh	r3, [r6]
   11f04:	e1500003 	cmp	r0, r3
   11f08:	1a000020 	bne	11f90 <CUSBGamePadStandardDevice::Configure()+0x13c>
   11f0c:	e3a01000 	mov	r1, #0
   11f10:	e3a02060 	mov	r2, #96	; 0x60
   11f14:	e28d0018 	add	r0, sp, #24
   11f18:	e58d1014 	str	r1, [sp, #20]
   11f1c:	eb00913e 	bl	3641c <memset>
   11f20:	e5943000 	ldr	r3, [r4]
   11f24:	e28d1014 	add	r1, sp, #20
   11f28:	e1a00004 	mov	r0, r4
   11f2c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11f30:	e12fff33 	blx	r3
   11f34:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11f38:	e3530000 	cmp	r3, #0
   11f3c:	1a000005 	bne	11f58 <CUSBGamePadStandardDevice::Configure()+0x104>
   11f40:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   11f44:	e3530000 	cmp	r3, #0
   11f48:	1a000002 	bne	11f58 <CUSBGamePadStandardDevice::Configure()+0x104>
   11f4c:	e5943104 	ldr	r3, [r4, #260]	; 0x104
   11f50:	e3530000 	cmp	r3, #0
   11f54:	0affffcc 	beq	11e8c <CUSBGamePadStandardDevice::Configure()+0x38>
   11f58:	e2843f4a 	add	r3, r4, #296	; 0x128
   11f5c:	e1d330b0 	ldrh	r3, [r3]
   11f60:	e3530000 	cmp	r3, #0
   11f64:	0a000017 	beq	11fc8 <CUSBGamePadStandardDevice::Configure()+0x174>
   11f68:	e1a00004 	mov	r0, r4
   11f6c:	eb002e2a 	bl	1d81c <CUSBGamePadDevice::Configure()>
   11f70:	e3500000 	cmp	r0, #0
   11f74:	0a00000c 	beq	11fac <CUSBGamePadStandardDevice::Configure()+0x158>
   11f78:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   11f7c:	e3530000 	cmp	r3, #0
   11f80:	0affffc2 	beq	11e90 <CUSBGamePadStandardDevice::Configure()+0x3c>
   11f84:	e1a00004 	mov	r0, r4
   11f88:	eb0005a6 	bl	13628 <CUSBHIDDevice::StartRequest()>
   11f8c:	eaffffbf 	b	11e90 <CUSBGamePadStandardDevice::Configure()+0x3c>
   11f90:	eb0074c7 	bl	2f2b4 <CLogger::Get()>
   11f94:	e59f1044 	ldr	r1, [pc, #68]	; 11fe0 <CUSBGamePadStandardDevice::Configure()+0x18c>
   11f98:	e3a02001 	mov	r2, #1
   11f9c:	e30b3b30 	movw	r3, #47920	; 0xbb30
   11fa0:	e3403003 	movt	r3, #3
   11fa4:	eb007690 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fa8:	eaffffb7 	b	11e8c <CUSBGamePadStandardDevice::Configure()+0x38>
   11fac:	eb0074c0 	bl	2f2b4 <CLogger::Get()>
   11fb0:	e59f1028 	ldr	r1, [pc, #40]	; 11fe0 <CUSBGamePadStandardDevice::Configure()+0x18c>
   11fb4:	e3a02001 	mov	r2, #1
   11fb8:	e30b3f74 	movw	r3, #49012	; 0xbf74
   11fbc:	e3403003 	movt	r3, #3
   11fc0:	eb007689 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fc4:	eaffffb0 	b	11e8c <CUSBGamePadStandardDevice::Configure()+0x38>
   11fc8:	e30c1184 	movw	r1, #49540	; 0xc184
   11fcc:	e3401003 	movt	r1, #3
   11fd0:	e30c01d4 	movw	r0, #49620	; 0xc1d4
   11fd4:	e3400003 	movt	r0, #3
   11fd8:	e3a02085 	mov	r2, #133	; 0x85
   11fdc:	eb006a37 	bl	2c8c0 <assertion_failed>
   11fe0:	0003c23c 	.word	0x0003c23c

00011fe4 <CUSBGamePadDevice::GetProperties()>:
   11fe4:	e3a00000 	mov	r0, #0
   11fe8:	e12fff1e 	bx	lr

00011fec <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   11fec:	e3a00000 	mov	r0, #0
   11ff0:	e12fff1e 	bx	lr

00011ff4 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11ff4:	e3a00000 	mov	r0, #0
   11ff8:	e12fff1e 	bx	lr

00011ffc <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   11ffc:	e59f3014 	ldr	r3, [pc, #20]	; 12018 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   12000:	e92d4010 	push	{r4, lr}
   12004:	e1a04000 	mov	r4, r0
   12008:	e5803000 	str	r3, [r0]
   1200c:	eb002e6f 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12010:	e1a00004 	mov	r0, r4
   12014:	e8bd8010 	pop	{r4, pc}
   12018:	0003c350 	.word	0x0003c350

0001201c <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   1201c:	e59f3020 	ldr	r3, [pc, #32]	; 12044 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   12020:	e92d4010 	push	{r4, lr}
   12024:	e1a04000 	mov	r4, r0
   12028:	e5803000 	str	r3, [r0]
   1202c:	eb002e67 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12030:	e1a00004 	mov	r0, r4
   12034:	e3a01f4d 	mov	r1, #308	; 0x134
   12038:	eb00932f 	bl	36cfc <operator delete(void*, unsigned int)>
   1203c:	e1a00004 	mov	r0, r4
   12040:	e8bd8010 	pop	{r4, pc}
   12044:	0003c350 	.word	0x0003c350

00012048 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12048:	e92d4030 	push	{r4, r5, lr}
   1204c:	e30ce348 	movw	lr, #49992	; 0xc348
   12050:	e340e003 	movt	lr, #3
   12054:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   12058:	e1a04001 	mov	r4, r1
   1205c:	e28dc03f 	add	ip, sp, #63	; 0x3f
   12060:	e1a05000 	mov	r5, r0
   12064:	e3ccc03f 	bic	ip, ip, #63	; 0x3f
   12068:	e59e0054 	ldr	r0, [lr, #84]	; 0x54
   1206c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   12070:	e28c300b 	add	r3, ip, #11
   12074:	e1a0200c 	mov	r2, ip
   12078:	e3510001 	cmp	r1, #1
   1207c:	e59e1058 	ldr	r1, [lr, #88]	; 0x58
   12080:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12084:	e28c301b 	add	r3, ip, #27
   12088:	e8a20003 	stmia	r2!, {r0, r1}
   1208c:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12090:	e28c302b 	add	r3, ip, #43	; 0x2b
   12094:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12098:	e28c3038 	add	r3, ip, #56	; 0x38
   1209c:	f443070f 	vst1.8	{d16}, [r3]
   120a0:	e1de35bc 	ldrh	r3, [lr, #92]	; 0x5c
   120a4:	e1c230b0 	strh	r3, [r2]
   120a8:	e5de305e 	ldrb	r3, [lr, #94]	; 0x5e
   120ac:	e5c23002 	strb	r3, [r2, #2]
   120b0:	0a000020 	beq	12138 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xf0>
   120b4:	e3540002 	cmp	r4, #2
   120b8:	0a000005 	beq	120d4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   120bc:	e3540000 	cmp	r4, #0
   120c0:	0a000007 	beq	120e4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   120c4:	e3a04001 	mov	r4, #1
   120c8:	e1a00004 	mov	r0, r4
   120cc:	e28dd07c 	add	sp, sp, #124	; 0x7c
   120d0:	e8bd8030 	pop	{r4, r5, pc}
   120d4:	e3062220 	movw	r2, #25120	; 0x6220
   120d8:	e3e03000 	mvn	r3, #0
   120dc:	e1cc20b3 	strh	r2, [ip, #3]
   120e0:	e5cc3005 	strb	r3, [ip, #5]
   120e4:	e5d51131 	ldrb	r1, [r5, #305]	; 0x131
   120e8:	e3a03000 	mov	r3, #0
   120ec:	e3a0200a 	mov	r2, #10
   120f0:	e2810001 	add	r0, r1, #1
   120f4:	e201100f 	and	r1, r1, #15
   120f8:	e5c50131 	strb	r0, [r5, #305]	; 0x131
   120fc:	e1a00005 	mov	r0, r5
   12100:	e5cc1001 	strb	r1, [ip, #1]
   12104:	e1a0100c 	mov	r1, ip
   12108:	eb0004c1 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1210c:	e2504000 	subs	r4, r0, #0
   12110:	1affffeb 	bne	120c4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   12114:	eb007466 	bl	2f2b4 <CLogger::Get()>
   12118:	e59f1028 	ldr	r1, [pc, #40]	; 12148 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x100>
   1211c:	e3a02001 	mov	r2, #1
   12120:	e30c3248 	movw	r3, #49736	; 0xc248
   12124:	e3403003 	movt	r3, #3
   12128:	eb00762f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1212c:	e1a00004 	mov	r0, r4
   12130:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12134:	e8bd8030 	pop	{r4, r5, pc}
   12138:	e3023098 	movw	r3, #8344	; 0x2098
   1213c:	e34f3f62 	movt	r3, #65378	; 0xff62
   12140:	e58c3006 	str	r3, [ip, #6]
   12144:	eaffffe6 	b	120e4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   12148:	0003c3a8 	.word	0x0003c3a8

0001214c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   1214c:	e92d4010 	push	{r4, lr}
   12150:	e1a04001 	mov	r4, r1
   12154:	e5d13000 	ldrb	r3, [r1]
   12158:	e24dd008 	sub	sp, sp, #8
   1215c:	e3530030 	cmp	r3, #48	; 0x30
   12160:	1a000067 	bne	12304 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   12164:	e3a03000 	mov	r3, #0
   12168:	e5803108 	str	r3, [r0, #264]	; 0x108
   1216c:	e5d12003 	ldrb	r2, [r1, #3]
   12170:	e2022001 	and	r2, r2, #1
   12174:	e1a02382 	lsl	r2, r2, #7
   12178:	e5802108 	str	r2, [r0, #264]	; 0x108
   1217c:	e5d13003 	ldrb	r3, [r1, #3]
   12180:	e3130002 	tst	r3, #2
   12184:	13822b01 	orrne	r2, r2, #1024	; 0x400
   12188:	15802108 	strne	r2, [r0, #264]	; 0x108
   1218c:	15d13003 	ldrbne	r3, [r1, #3]
   12190:	e3130004 	tst	r3, #4
   12194:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12198:	13833c01 	orrne	r3, r3, #256	; 0x100
   1219c:	15803108 	strne	r3, [r0, #264]	; 0x108
   121a0:	15d13003 	ldrbne	r3, [r1, #3]
   121a4:	e3130008 	tst	r3, #8
   121a8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   121ac:	13833c02 	orrne	r3, r3, #512	; 0x200
   121b0:	15803108 	strne	r3, [r0, #264]	; 0x108
   121b4:	15d13003 	ldrbne	r3, [r1, #3]
   121b8:	e3130040 	tst	r3, #64	; 0x40
   121bc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   121c0:	13833040 	orrne	r3, r3, #64	; 0x40
   121c4:	15803108 	strne	r3, [r0, #264]	; 0x108
   121c8:	15d13003 	ldrbne	r3, [r1, #3]
   121cc:	e3130080 	tst	r3, #128	; 0x80
   121d0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   121d4:	13833010 	orrne	r3, r3, #16
   121d8:	15803108 	strne	r3, [r0, #264]	; 0x108
   121dc:	e5d13004 	ldrb	r3, [r1, #4]
   121e0:	e3130001 	tst	r3, #1
   121e4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   121e8:	13833702 	orrne	r3, r3, #524288	; 0x80000
   121ec:	15803108 	strne	r3, [r0, #264]	; 0x108
   121f0:	15d13004 	ldrbne	r3, [r1, #4]
   121f4:	e3130002 	tst	r3, #2
   121f8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   121fc:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   12200:	15803108 	strne	r3, [r0, #264]	; 0x108
   12204:	15d13004 	ldrbne	r3, [r1, #4]
   12208:	e3130004 	tst	r3, #4
   1220c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12210:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   12214:	15803108 	strne	r3, [r0, #264]	; 0x108
   12218:	15d13004 	ldrbne	r3, [r1, #4]
   1221c:	e3130008 	tst	r3, #8
   12220:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12224:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   12228:	15803108 	strne	r3, [r0, #264]	; 0x108
   1222c:	15d13004 	ldrbne	r3, [r1, #4]
   12230:	e3130010 	tst	r3, #16
   12234:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12238:	13833001 	orrne	r3, r3, #1
   1223c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12240:	15d13004 	ldrbne	r3, [r1, #4]
   12244:	e3130020 	tst	r3, #32
   12248:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1224c:	13833b02 	orrne	r3, r3, #2048	; 0x800
   12250:	15803108 	strne	r3, [r0, #264]	; 0x108
   12254:	e5d13005 	ldrb	r3, [r1, #5]
   12258:	e3130001 	tst	r3, #1
   1225c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12260:	13833802 	orrne	r3, r3, #131072	; 0x20000
   12264:	15803108 	strne	r3, [r0, #264]	; 0x108
   12268:	15d13005 	ldrbne	r3, [r1, #5]
   1226c:	e3130002 	tst	r3, #2
   12270:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12274:	13833902 	orrne	r3, r3, #32768	; 0x8000
   12278:	15803108 	strne	r3, [r0, #264]	; 0x108
   1227c:	15d13005 	ldrbne	r3, [r1, #5]
   12280:	e3130004 	tst	r3, #4
   12284:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12288:	13833801 	orrne	r3, r3, #65536	; 0x10000
   1228c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12290:	15d13005 	ldrbne	r3, [r1, #5]
   12294:	e3130008 	tst	r3, #8
   12298:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1229c:	13833701 	orrne	r3, r3, #262144	; 0x40000
   122a0:	15803108 	strne	r3, [r0, #264]	; 0x108
   122a4:	15d13005 	ldrbne	r3, [r1, #5]
   122a8:	e3130040 	tst	r3, #64	; 0x40
   122ac:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   122b0:	13833020 	orrne	r3, r3, #32
   122b4:	15803108 	strne	r3, [r0, #264]	; 0x108
   122b8:	15d13005 	ldrbne	r3, [r1, #5]
   122bc:	e3130080 	tst	r3, #128	; 0x80
   122c0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   122c4:	13833008 	orrne	r3, r3, #8
   122c8:	15803108 	strne	r3, [r0, #264]	; 0x108
   122cc:	e1d130b6 	ldrh	r3, [r1, #6]
   122d0:	e7e73253 	ubfx	r3, r3, #4, #8
   122d4:	e5803028 	str	r3, [r0, #40]	; 0x28
   122d8:	e5d13008 	ldrb	r3, [r1, #8]
   122dc:	e26330ff 	rsb	r3, r3, #255	; 0xff
   122e0:	e5803034 	str	r3, [r0, #52]	; 0x34
   122e4:	e1d130b9 	ldrh	r3, [r1, #9]
   122e8:	e7e73253 	ubfx	r3, r3, #4, #8
   122ec:	e5803040 	str	r3, [r0, #64]	; 0x40
   122f0:	e5d1300b 	ldrb	r3, [r1, #11]
   122f4:	e26330ff 	rsb	r3, r3, #255	; 0xff
   122f8:	e580304c 	str	r3, [r0, #76]	; 0x4c
   122fc:	e28dd008 	add	sp, sp, #8
   12300:	e8bd8010 	pop	{r4, pc}
   12304:	eb0073ea 	bl	2f2b4 <CLogger::Get()>
   12308:	e5d43000 	ldrb	r3, [r4]
   1230c:	e58d3000 	str	r3, [sp]
   12310:	e3a02003 	mov	r2, #3
   12314:	e59f1010 	ldr	r1, [pc, #16]	; 1232c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1e0>
   12318:	e30c3260 	movw	r3, #49760	; 0xc260
   1231c:	e3403003 	movt	r3, #3
   12320:	eb0075b1 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12324:	e28dd008 	add	sp, sp, #8
   12328:	e8bd8010 	pop	{r4, pc}
   1232c:	0003c3a8 	.word	0x0003c3a8

00012330 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   12330:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   12334:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12338:	e30c4348 	movw	r4, #49992	; 0xc348
   1233c:	e3404003 	movt	r4, #3
   12340:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   12344:	e28dc03f 	add	ip, sp, #63	; 0x3f
   12348:	e5d06131 	ldrb	r6, [r0, #305]	; 0x131
   1234c:	e3ccc03f 	bic	ip, ip, #63	; 0x3f
   12350:	e1a05000 	mov	r5, r0
   12354:	e28c300d 	add	r3, ip, #13
   12358:	e1a0e00c 	mov	lr, ip
   1235c:	e5940070 	ldr	r0, [r4, #112]	; 0x70
   12360:	e1a07001 	mov	r7, r1
   12364:	e5942078 	ldr	r2, [r4, #120]	; 0x78
   12368:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   1236c:	e28c301d 	add	r3, ip, #29
   12370:	e5941074 	ldr	r1, [r4, #116]	; 0x74
   12374:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   12378:	e1a00005 	mov	r0, r5
   1237c:	e1a0100c 	mov	r1, ip
   12380:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12384:	e28c302d 	add	r3, ip, #45	; 0x2d
   12388:	e3a0200c 	mov	r2, #12
   1238c:	e5cc700b 	strb	r7, [ip, #11]
   12390:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12394:	e28c3038 	add	r3, ip, #56	; 0x38
   12398:	f443070f 	vst1.8	{d16}, [r3]
   1239c:	e5d4307c 	ldrb	r3, [r4, #124]	; 0x7c
   123a0:	e5ce3000 	strb	r3, [lr]
   123a4:	e2863001 	add	r3, r6, #1
   123a8:	e5c53131 	strb	r3, [r5, #305]	; 0x131
   123ac:	e3a03000 	mov	r3, #0
   123b0:	e206600f 	and	r6, r6, #15
   123b4:	e5cc6001 	strb	r6, [ip, #1]
   123b8:	eb000415 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   123bc:	e2505000 	subs	r5, r0, #0
   123c0:	0a000002 	beq	123d0 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0xa0>
   123c4:	e1a00005 	mov	r0, r5
   123c8:	e28dd07c 	add	sp, sp, #124	; 0x7c
   123cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   123d0:	eb0073b7 	bl	2f2b4 <CLogger::Get()>
   123d4:	e3a02001 	mov	r2, #1
   123d8:	e2841060 	add	r1, r4, #96	; 0x60
   123dc:	e30c327c 	movw	r3, #49788	; 0xc27c
   123e0:	e3403003 	movt	r3, #3
   123e4:	eb007580 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   123e8:	e1a00005 	mov	r0, r5
   123ec:	e28dd07c 	add	sp, sp, #124	; 0x7c
   123f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000123f4 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   123f4:	e92d4010 	push	{r4, lr}
   123f8:	e1a04000 	mov	r4, r0
   123fc:	eb002d62 	bl	1d98c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12400:	e3a03000 	mov	r3, #0
   12404:	e59f0024 	ldr	r0, [pc, #36]	; 12430 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   12408:	e1a02003 	mov	r2, r3
   1240c:	e5840000 	str	r0, [r4]
   12410:	e3a01003 	mov	r1, #3
   12414:	e1a00004 	mov	r0, r4
   12418:	ebfff8ae 	bl	106d8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   1241c:	e3a03000 	mov	r3, #0
   12420:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   12424:	e1a00004 	mov	r0, r4
   12428:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   1242c:	e8bd8010 	pop	{r4, pc}
   12430:	0003c350 	.word	0x0003c350

00012434 <CUSBGamePadSwitchProDevice::Configure()>:
   12434:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12438:	ed2d8b04 	vpush	{d8-d9}
   1243c:	e28db030 	add	fp, sp, #48	; 0x30
   12440:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   12444:	e5d03130 	ldrb	r3, [r0, #304]	; 0x130
   12448:	e3530000 	cmp	r3, #0
   1244c:	0a00008c 	beq	12684 <CUSBGamePadSwitchProDevice::Configure()+0x250>
   12450:	e2807f4a 	add	r7, r0, #296	; 0x128
   12454:	e3a03040 	mov	r3, #64	; 0x40
   12458:	e1a04000 	mov	r4, r0
   1245c:	e1c730b0 	strh	r3, [r7]
   12460:	eb002ced 	bl	1d81c <CUSBGamePadDevice::Configure()>
   12464:	e3500000 	cmp	r0, #0
   12468:	0a00008f 	beq	126ac <CUSBGamePadSwitchProDevice::Configure()+0x278>
   1246c:	e1d720b0 	ldrh	r2, [r7]
   12470:	e3a03015 	mov	r3, #21
   12474:	e5843104 	str	r3, [r4, #260]	; 0x104
   12478:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   1247c:	e2423001 	sub	r3, r2, #1
   12480:	e284c02c 	add	ip, r4, #44	; 0x2c
   12484:	e383303f 	orr	r3, r3, #63	; 0x3f
   12488:	e284e050 	add	lr, r4, #80	; 0x50
   1248c:	e2833040 	add	r3, r3, #64	; 0x40
   12490:	e2840038 	add	r0, r4, #56	; 0x38
   12494:	e3c33007 	bic	r3, r3, #7
   12498:	e24b50ed 	sub	r5, fp, #237	; 0xed
   1249c:	e04dd003 	sub	sp, sp, r3
   124a0:	e2849044 	add	r9, r4, #68	; 0x44
   124a4:	e3c5503f 	bic	r5, r5, #63	; 0x3f
   124a8:	e28d803f 	add	r8, sp, #63	; 0x3f
   124ac:	e3a06000 	mov	r6, #0
   124b0:	e3c8803f 	bic	r8, r8, #63	; 0x3f
   124b4:	f2808050 	vmov.i32	q4, #0	; 0x00000000
   124b8:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   124bc:	e1a03006 	mov	r3, r6
   124c0:	e1a01008 	mov	r1, r8
   124c4:	e3a0a004 	mov	sl, #4
   124c8:	e584a024 	str	sl, [r4, #36]	; 0x24
   124cc:	f44c078f 	vst1.32	{d16}, [ip]
   124d0:	f440078f 	vst1.32	{d16}, [r0]
   124d4:	e1a00004 	mov	r0, r4
   124d8:	f449078f 	vst1.32	{d16}, [r9]
   124dc:	f44e078f 	vst1.32	{d16}, [lr]
   124e0:	eb000429 	bl	1358c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   124e4:	e3a03d0e 	mov	r3, #896	; 0x380
   124e8:	e5853080 	str	r3, [r5, #128]	; 0x80
   124ec:	e2853084 	add	r3, r5, #132	; 0x84
   124f0:	e3a02002 	mov	r2, #2
   124f4:	e2851080 	add	r1, r5, #128	; 0x80
   124f8:	e1a00004 	mov	r0, r4
   124fc:	ed858b2d 	vstr	d8, [r5, #180]	; 0xb4
   12500:	f4038a0f 	vst1.8	{d8-d9}, [r3]
   12504:	e1a03006 	mov	r3, r6
   12508:	ed858b25 	vstr	d8, [r5, #148]	; 0x94
   1250c:	ed858b27 	vstr	d8, [r5, #156]	; 0x9c
   12510:	ed858b29 	vstr	d8, [r5, #164]	; 0xa4
   12514:	ed858b2b 	vstr	d8, [r5, #172]	; 0xac
   12518:	ed858b2e 	vstr	d8, [r5, #184]	; 0xb8
   1251c:	eb0003bc 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12520:	e1500006 	cmp	r0, r6
   12524:	0a00004c 	beq	1265c <CUSBGamePadSwitchProDevice::Configure()+0x228>
   12528:	e1d720b0 	ldrh	r2, [r7]
   1252c:	e1a03006 	mov	r3, r6
   12530:	e1a01008 	mov	r1, r8
   12534:	e1a00004 	mov	r0, r4
   12538:	eb000413 	bl	1358c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   1253c:	e3500000 	cmp	r0, #0
   12540:	da000060 	ble	126c8 <CUSBGamePadSwitchProDevice::Configure()+0x294>
   12544:	e5d83000 	ldrb	r3, [r8]
   12548:	e3530081 	cmp	r3, #129	; 0x81
   1254c:	1a000042 	bne	1265c <CUSBGamePadSwitchProDevice::Configure()+0x228>
   12550:	e5d83001 	ldrb	r3, [r8, #1]
   12554:	e3530003 	cmp	r3, #3
   12558:	1a00003f 	bne	1265c <CUSBGamePadSwitchProDevice::Configure()+0x228>
   1255c:	e3a03d0a 	mov	r3, #640	; 0x280
   12560:	e5853040 	str	r3, [r5, #64]	; 0x40
   12564:	e2853044 	add	r3, r5, #68	; 0x44
   12568:	e3a02002 	mov	r2, #2
   1256c:	e2851040 	add	r1, r5, #64	; 0x40
   12570:	e1a00004 	mov	r0, r4
   12574:	ed858b1d 	vstr	d8, [r5, #116]	; 0x74
   12578:	f4038a0f 	vst1.8	{d8-d9}, [r3]
   1257c:	e1a03006 	mov	r3, r6
   12580:	ed858b15 	vstr	d8, [r5, #84]	; 0x54
   12584:	ed858b17 	vstr	d8, [r5, #92]	; 0x5c
   12588:	ed858b19 	vstr	d8, [r5, #100]	; 0x64
   1258c:	ed858b1b 	vstr	d8, [r5, #108]	; 0x6c
   12590:	ed858b1e 	vstr	d8, [r5, #120]	; 0x78
   12594:	eb00039e 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12598:	e3500000 	cmp	r0, #0
   1259c:	0a00003b 	beq	12690 <CUSBGamePadSwitchProDevice::Configure()+0x25c>
   125a0:	e1d720b0 	ldrh	r2, [r7]
   125a4:	e1a03006 	mov	r3, r6
   125a8:	e1a01008 	mov	r1, r8
   125ac:	e1a00004 	mov	r0, r4
   125b0:	eb0003f5 	bl	1358c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   125b4:	e3500000 	cmp	r0, #0
   125b8:	da000049 	ble	126e4 <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   125bc:	e5d83000 	ldrb	r3, [r8]
   125c0:	e3530081 	cmp	r3, #129	; 0x81
   125c4:	1a000031 	bne	12690 <CUSBGamePadSwitchProDevice::Configure()+0x25c>
   125c8:	e5d83001 	ldrb	r3, [r8, #1]
   125cc:	e3530002 	cmp	r3, #2
   125d0:	1a00002e 	bne	12690 <CUSBGamePadSwitchProDevice::Configure()+0x25c>
   125d4:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   125d8:	e3a03d12 	mov	r3, #1152	; 0x480
   125dc:	e1a01005 	mov	r1, r5
   125e0:	e4853004 	str	r3, [r5], #4
   125e4:	e3a02002 	mov	r2, #2
   125e8:	e3a03000 	mov	r3, #0
   125ec:	e1a00004 	mov	r0, r4
   125f0:	edc50b0c 	vstr	d16, [r5, #48]	; 0x30
   125f4:	f4450a0f 	vst1.8	{d16-d17}, [r5]
   125f8:	edc50b04 	vstr	d16, [r5, #16]
   125fc:	edc50b06 	vstr	d16, [r5, #24]
   12600:	edc50b08 	vstr	d16, [r5, #32]
   12604:	edc50b0a 	vstr	d16, [r5, #40]	; 0x28
   12608:	edc50b0d 	vstr	d16, [r5, #52]	; 0x34
   1260c:	eb000380 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12610:	e3500000 	cmp	r0, #0
   12614:	0a000040 	beq	1271c <CUSBGamePadSwitchProDevice::Configure()+0x2e8>
   12618:	e5943000 	ldr	r3, [r4]
   1261c:	e1a00004 	mov	r0, r4
   12620:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   12624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   12628:	e12fff33 	blx	r3
   1262c:	e1d720b0 	ldrh	r2, [r7]
   12630:	e3a03000 	mov	r3, #0
   12634:	e1a01008 	mov	r1, r8
   12638:	e1a00004 	mov	r0, r4
   1263c:	eb0003d2 	bl	1358c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   12640:	e3500000 	cmp	r0, #0
   12644:	da00002d 	ble	12700 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12648:	e1a00004 	mov	r0, r4
   1264c:	eb0003f5 	bl	13628 <CUSBHIDDevice::StartRequest()>
   12650:	e24bd030 	sub	sp, fp, #48	; 0x30
   12654:	ecbd8b04 	vpop	{d8-d9}
   12658:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1265c:	eb007314 	bl	2f2b4 <CLogger::Get()>
   12660:	e30c3290 	movw	r3, #49808	; 0xc290
   12664:	e3403003 	movt	r3, #3
   12668:	e59f10c8 	ldr	r1, [pc, #200]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   1266c:	e3a02001 	mov	r2, #1
   12670:	eb0074dd 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12674:	e3a00000 	mov	r0, #0
   12678:	e24bd030 	sub	sp, fp, #48	; 0x30
   1267c:	ecbd8b04 	vpop	{d8-d9}
   12680:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12684:	e59f10ac 	ldr	r1, [pc, #172]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   12688:	ebfff7fe 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1268c:	eafffff8 	b	12674 <CUSBGamePadSwitchProDevice::Configure()+0x240>
   12690:	eb007307 	bl	2f2b4 <CLogger::Get()>
   12694:	e59f109c 	ldr	r1, [pc, #156]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   12698:	e3a02001 	mov	r2, #1
   1269c:	e30c32d0 	movw	r3, #49872	; 0xc2d0
   126a0:	e3403003 	movt	r3, #3
   126a4:	eb0074d0 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126a8:	eafffff1 	b	12674 <CUSBGamePadSwitchProDevice::Configure()+0x240>
   126ac:	eb007300 	bl	2f2b4 <CLogger::Get()>
   126b0:	e59f1080 	ldr	r1, [pc, #128]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   126b4:	e3a02001 	mov	r2, #1
   126b8:	e30b3f74 	movw	r3, #49012	; 0xbf74
   126bc:	e3403003 	movt	r3, #3
   126c0:	eb0074c9 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126c4:	eaffffea 	b	12674 <CUSBGamePadSwitchProDevice::Configure()+0x240>
   126c8:	eb0072f9 	bl	2f2b4 <CLogger::Get()>
   126cc:	e59f1064 	ldr	r1, [pc, #100]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   126d0:	e3a02001 	mov	r2, #1
   126d4:	e30c32b0 	movw	r3, #49840	; 0xc2b0
   126d8:	e3403003 	movt	r3, #3
   126dc:	eb0074c2 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126e0:	eaffffe3 	b	12674 <CUSBGamePadSwitchProDevice::Configure()+0x240>
   126e4:	eb0072f2 	bl	2f2b4 <CLogger::Get()>
   126e8:	e59f1048 	ldr	r1, [pc, #72]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   126ec:	e3a02001 	mov	r2, #1
   126f0:	e30c32ec 	movw	r3, #49900	; 0xc2ec
   126f4:	e3403003 	movt	r3, #3
   126f8:	eb0074bb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126fc:	eaffffdc 	b	12674 <CUSBGamePadSwitchProDevice::Configure()+0x240>
   12700:	eb0072eb 	bl	2f2b4 <CLogger::Get()>
   12704:	e59f102c 	ldr	r1, [pc, #44]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   12708:	e3a02001 	mov	r2, #1
   1270c:	e30c3328 	movw	r3, #49960	; 0xc328
   12710:	e3403003 	movt	r3, #3
   12714:	eb0074b4 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12718:	eaffffca 	b	12648 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   1271c:	eb0072e4 	bl	2f2b4 <CLogger::Get()>
   12720:	e59f1010 	ldr	r1, [pc, #16]	; 12738 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   12724:	e3a02001 	mov	r2, #1
   12728:	e30c3308 	movw	r3, #49928	; 0xc308
   1272c:	e3403003 	movt	r3, #3
   12730:	eb0074ad 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12734:	eaffffce 	b	12674 <CUSBGamePadSwitchProDevice::Configure()+0x240>
   12738:	0003c3a8 	.word	0x0003c3a8

0001273c <CUSBGamePadSwitchProDevice::GetProperties()>:
   1273c:	e3a0004b 	mov	r0, #75	; 0x4b
   12740:	e12fff1e 	bx	lr

00012744 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   12744:	e59f3014 	ldr	r3, [pc, #20]	; 12760 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   12748:	e92d4010 	push	{r4, lr}
   1274c:	e1a04000 	mov	r4, r0
   12750:	e5803000 	str	r3, [r0]
   12754:	eb002c9d 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12758:	e1a00004 	mov	r0, r4
   1275c:	e8bd8010 	pop	{r4, pc}
   12760:	0003c410 	.word	0x0003c410

00012764 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   12764:	e59f3020 	ldr	r3, [pc, #32]	; 1278c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   12768:	e92d4010 	push	{r4, lr}
   1276c:	e1a04000 	mov	r4, r0
   12770:	e5803000 	str	r3, [r0]
   12774:	eb002c95 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12778:	e1a00004 	mov	r0, r4
   1277c:	e3a01e13 	mov	r1, #304	; 0x130
   12780:	eb00915d 	bl	36cfc <operator delete(void*, unsigned int)>
   12784:	e1a00004 	mov	r0, r4
   12788:	e8bd8010 	pop	{r4, pc}
   1278c:	0003c410 	.word	0x0003c410

00012790 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   12790:	e3510000 	cmp	r1, #0
   12794:	e92d4070 	push	{r4, r5, r6, lr}
   12798:	0a00002f 	beq	1285c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xcc>
   1279c:	e1d130b0 	ldrh	r3, [r1]
   127a0:	e3530b05 	cmp	r3, #5120	; 0x1400
   127a4:	1a000032 	bne	12874 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xe4>
   127a8:	e59f30dc 	ldr	r3, [pc, #220]	; 1288c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xfc>
   127ac:	e3a0c000 	mov	ip, #0
   127b0:	e1d120b2 	ldrh	r2, [r1, #2]
   127b4:	e283e040 	add	lr, r3, #64	; 0x40
   127b8:	e580c108 	str	ip, [r0, #264]	; 0x108
   127bc:	e3120001 	tst	r2, #1
   127c0:	e2833004 	add	r3, r3, #4
   127c4:	e1a020a2 	lsr	r2, r2, #1
   127c8:	15134004 	ldrne	r4, [r3, #-4]
   127cc:	1590c108 	ldrne	ip, [r0, #264]	; 0x108
   127d0:	118cc004 	orrne	ip, ip, r4
   127d4:	1580c108 	strne	ip, [r0, #264]	; 0x108
   127d8:	e15e0003 	cmp	lr, r3
   127dc:	1afffff6 	bne	127bc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x2c>
   127e0:	e59fe0a8 	ldr	lr, [pc, #168]	; 12890 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x100>
   127e4:	e3a0c000 	mov	ip, #0
   127e8:	e3a0500c 	mov	r5, #12
   127ec:	e49e2004 	ldr	r2, [lr], #4
   127f0:	e081308c 	add	r3, r1, ip, lsl #1
   127f4:	e28cc001 	add	ip, ip, #1
   127f8:	e3c24002 	bic	r4, r2, #2
   127fc:	e1d330f6 	ldrsh	r3, [r3, #6]
   12800:	e3540001 	cmp	r4, #1
   12804:	e0220295 	mla	r2, r5, r2, r0
   12808:	e2833902 	add	r3, r3, #32768	; 0x8000
   1280c:	e1a03423 	lsr	r3, r3, #8
   12810:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   12814:	e35c0004 	cmp	ip, #4
   12818:	e5823028 	str	r3, [r2, #40]	; 0x28
   1281c:	1afffff2 	bne	127ec <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x5c>
   12820:	e5d13004 	ldrb	r3, [r1, #4]
   12824:	e5803058 	str	r3, [r0, #88]	; 0x58
   12828:	e1d130d4 	ldrsb	r3, [r1, #4]
   1282c:	e3530000 	cmp	r3, #0
   12830:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   12834:	b3833008 	orrlt	r3, r3, #8
   12838:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   1283c:	e5d13005 	ldrb	r3, [r1, #5]
   12840:	e5803064 	str	r3, [r0, #100]	; 0x64
   12844:	e1d130d5 	ldrsb	r3, [r1, #5]
   12848:	e3530000 	cmp	r3, #0
   1284c:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   12850:	b3833010 	orrlt	r3, r3, #16
   12854:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   12858:	e8bd8070 	pop	{r4, r5, r6, pc}
   1285c:	e30c13c8 	movw	r1, #50120	; 0xc3c8
   12860:	e3401003 	movt	r1, #3
   12864:	e30b0fd0 	movw	r0, #49104	; 0xbfd0
   12868:	e3400003 	movt	r0, #3
   1286c:	e3a02078 	mov	r2, #120	; 0x78
   12870:	eb006812 	bl	2c8c0 <assertion_failed>
   12874:	e30c13c8 	movw	r1, #50120	; 0xc3c8
   12878:	e3401003 	movt	r1, #3
   1287c:	e30c03e0 	movw	r0, #50144	; 0xc3e0
   12880:	e3400003 	movt	r0, #3
   12884:	e3a02079 	mov	r2, #121	; 0x79
   12888:	eb00680c 	bl	2c8c0 <assertion_failed>
   1288c:	0003c460 	.word	0x0003c460
   12890:	0003c4a0 	.word	0x0003c4a0

00012894 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   12894:	e251c000 	subs	ip, r1, #0
   12898:	13a0c001 	movne	ip, #1
   1289c:	e352000e 	cmp	r2, #14
   128a0:	13a0c000 	movne	ip, #0
   128a4:	e35c0000 	cmp	ip, #0
   128a8:	012fff1e 	bxeq	lr
   128ac:	e5d12000 	ldrb	r2, [r1]
   128b0:	e3520000 	cmp	r2, #0
   128b4:	112fff1e 	bxne	lr
   128b8:	e5d13001 	ldrb	r3, [r1, #1]
   128bc:	e3530014 	cmp	r3, #20
   128c0:	112fff1e 	bxne	lr
   128c4:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   128c8:	e92d4070 	push	{r4, r5, r6, lr}
   128cc:	e1a04000 	mov	r4, r0
   128d0:	e3530000 	cmp	r3, #0
   128d4:	08bd8070 	popeq	{r4, r5, r6, pc}
   128d8:	e1a05000 	mov	r5, r0
   128dc:	e4953024 	ldr	r3, [r5], #36	; 0x24
   128e0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   128e4:	e12fff33 	blx	r3
   128e8:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   128ec:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   128f0:	e1a01005 	mov	r1, r5
   128f4:	e2400001 	sub	r0, r0, #1
   128f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   128fc:	e12fff13 	bx	r3

00012900 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   12900:	e1a03001 	mov	r3, r1
   12904:	e3510004 	cmp	r1, #4
   12908:	9a000001 	bls	12914 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x14>
   1290c:	e3a00000 	mov	r0, #0
   12910:	e12fff1e 	bx	lr
   12914:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12918:	e300e301 	movw	lr, #769	; 0x301
   1291c:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   12920:	e28d203f 	add	r2, sp, #63	; 0x3f
   12924:	e3c2103f 	bic	r1, r2, #63	; 0x3f
   12928:	e30c2408 	movw	r2, #50184	; 0xc408
   1292c:	e3402003 	movt	r2, #3
   12930:	e082c003 	add	ip, r2, r3
   12934:	e3a03000 	mov	r3, #0
   12938:	e3a02003 	mov	r2, #3
   1293c:	e1c1e0b0 	strh	lr, [r1]
   12940:	e5dcc0b0 	ldrb	ip, [ip, #176]	; 0xb0
   12944:	e5c1c002 	strb	ip, [r1, #2]
   12948:	eb0002b1 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1294c:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12950:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012954 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   12954:	e92d4070 	push	{r4, r5, r6, lr}
   12958:	e3a02008 	mov	r2, #8
   1295c:	e1a05001 	mov	r5, r1
   12960:	e24dd078 	sub	sp, sp, #120	; 0x78
   12964:	e3a01000 	mov	r1, #0
   12968:	e28d403f 	add	r4, sp, #63	; 0x3f
   1296c:	e1a06000 	mov	r6, r0
   12970:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   12974:	e1a00004 	mov	r0, r4
   12978:	eb008ea7 	bl	3641c <memset>
   1297c:	e3a03008 	mov	r3, #8
   12980:	e3550001 	cmp	r5, #1
   12984:	e5c43001 	strb	r3, [r4, #1]
   12988:	0a000009 	beq	129b4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   1298c:	e3550002 	cmp	r5, #2
   12990:	0a000010 	beq	129d8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x84>
   12994:	e3550000 	cmp	r5, #0
   12998:	0a000007 	beq	129bc <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x68>
   1299c:	e30c13c8 	movw	r1, #50120	; 0xc3c8
   129a0:	e3401003 	movt	r1, #3
   129a4:	e30b0708 	movw	r0, #46856	; 0xb708
   129a8:	e3400003 	movt	r0, #3
   129ac:	e3a020e6 	mov	r2, #230	; 0xe6
   129b0:	eb0067c2 	bl	2c8c0 <assertion_failed>
   129b4:	e3e03000 	mvn	r3, #0
   129b8:	e5c43004 	strb	r3, [r4, #4]
   129bc:	e3a03000 	mov	r3, #0
   129c0:	e3a02008 	mov	r2, #8
   129c4:	e1a01004 	mov	r1, r4
   129c8:	e1a00006 	mov	r0, r6
   129cc:	eb000290 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   129d0:	e28dd078 	add	sp, sp, #120	; 0x78
   129d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   129d8:	e3e03000 	mvn	r3, #0
   129dc:	e5c43003 	strb	r3, [r4, #3]
   129e0:	eafffff5 	b	129bc <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x68>

000129e4 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   129e4:	e92d4010 	push	{r4, lr}
   129e8:	e1a04000 	mov	r4, r0
   129ec:	eb002be6 	bl	1d98c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   129f0:	e59f3008 	ldr	r3, [pc, #8]	; 12a00 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   129f4:	e1a00004 	mov	r0, r4
   129f8:	e5843000 	str	r3, [r4]
   129fc:	e8bd8010 	pop	{r4, pc}
   12a00:	0003c410 	.word	0x0003c410

00012a04 <CUSBGamePadXbox360Device::Configure()>:
   12a04:	e2803f4a 	add	r3, r0, #296	; 0x128
   12a08:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12a0c:	e3a0200e 	mov	r2, #14
   12a10:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   12a14:	e1a04000 	mov	r4, r0
   12a18:	e1c320b0 	strh	r2, [r3]
   12a1c:	eb002b7e 	bl	1d81c <CUSBGamePadDevice::Configure()>
   12a20:	e3500000 	cmp	r0, #0
   12a24:	0a000031 	beq	12af0 <CUSBGamePadXbox360Device::Configure()+0xec>
   12a28:	e5943000 	ldr	r3, [r4]
   12a2c:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   12a30:	e3a02013 	mov	r2, #19
   12a34:	e2841050 	add	r1, r4, #80	; 0x50
   12a38:	e5842104 	str	r2, [r4, #260]	; 0x104
   12a3c:	e284e02c 	add	lr, r4, #44	; 0x2c
   12a40:	e593603c 	ldr	r6, [r3, #60]	; 0x3c
   12a44:	e284c038 	add	ip, r4, #56	; 0x38
   12a48:	e284305c 	add	r3, r4, #92	; 0x5c
   12a4c:	e2840044 	add	r0, r4, #68	; 0x44
   12a50:	e2842068 	add	r2, r4, #104	; 0x68
   12a54:	e3027900 	movw	r7, #10496	; 0x2900
   12a58:	e3407001 	movt	r7, #1
   12a5c:	e1560007 	cmp	r6, r7
   12a60:	e3a07006 	mov	r7, #6
   12a64:	e5847024 	str	r7, [r4, #36]	; 0x24
   12a68:	f44e078f 	vst1.32	{d16}, [lr]
   12a6c:	f44c078f 	vst1.32	{d16}, [ip]
   12a70:	f440078f 	vst1.32	{d16}, [r0]
   12a74:	f441078f 	vst1.32	{d16}, [r1]
   12a78:	f443078f 	vst1.32	{d16}, [r3]
   12a7c:	e3a03000 	mov	r3, #0
   12a80:	f442078f 	vst1.32	{d16}, [r2]
   12a84:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   12a88:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   12a8c:	1a000020 	bne	12b14 <CUSBGamePadXbox360Device::Configure()+0x110>
   12a90:	e3510004 	cmp	r1, #4
   12a94:	9a000002 	bls	12aa4 <CUSBGamePadXbox360Device::Configure()+0xa0>
   12a98:	e3a00000 	mov	r0, #0
   12a9c:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12aa0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12aa4:	e28d503f 	add	r5, sp, #63	; 0x3f
   12aa8:	e3002301 	movw	r2, #769	; 0x301
   12aac:	e3c5503f 	bic	r5, r5, #63	; 0x3f
   12ab0:	e1a00004 	mov	r0, r4
   12ab4:	e1c520b0 	strh	r2, [r5]
   12ab8:	e30c2408 	movw	r2, #50184	; 0xc408
   12abc:	e3402003 	movt	r2, #3
   12ac0:	e0821001 	add	r1, r2, r1
   12ac4:	e3a02003 	mov	r2, #3
   12ac8:	e5d110b0 	ldrb	r1, [r1, #176]	; 0xb0
   12acc:	e5c51002 	strb	r1, [r5, #2]
   12ad0:	e1a01005 	mov	r1, r5
   12ad4:	eb00024e 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12ad8:	e3500000 	cmp	r0, #0
   12adc:	0affffed 	beq	12a98 <CUSBGamePadXbox360Device::Configure()+0x94>
   12ae0:	e1a00004 	mov	r0, r4
   12ae4:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12ae8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   12aec:	ea0002cd 	b	13628 <CUSBHIDDevice::StartRequest()>
   12af0:	eb0071ef 	bl	2f2b4 <CLogger::Get()>
   12af4:	e59f1024 	ldr	r1, [pc, #36]	; 12b20 <CUSBGamePadXbox360Device::Configure()+0x11c>
   12af8:	e3a02001 	mov	r2, #1
   12afc:	e30b3f74 	movw	r3, #49012	; 0xbf74
   12b00:	e3403003 	movt	r3, #3
   12b04:	eb0073b8 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b08:	e3a00000 	mov	r0, #0
   12b0c:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12b10:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12b14:	e1a00004 	mov	r0, r4
   12b18:	e12fff36 	blx	r6
   12b1c:	eaffffed 	b	12ad8 <CUSBGamePadXbox360Device::Configure()+0xd4>
   12b20:	0003c4c0 	.word	0x0003c4c0

00012b24 <CUSBGamePadXbox360Device::GetProperties()>:
   12b24:	e3a0000b 	mov	r0, #11
   12b28:	e12fff1e 	bx	lr

00012b2c <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   12b2c:	e5d13004 	ldrb	r3, [r1, #4]
   12b30:	e7e03153 	ubfx	r3, r3, #2, #1
   12b34:	e1a03703 	lsl	r3, r3, #14
   12b38:	e5803108 	str	r3, [r0, #264]	; 0x108
   12b3c:	e5d12004 	ldrb	r2, [r1, #4]
   12b40:	e3120008 	tst	r2, #8
   12b44:	13833b02 	orrne	r3, r3, #2048	; 0x800
   12b48:	15803108 	strne	r3, [r0, #264]	; 0x108
   12b4c:	e3120010 	tst	r2, #16
   12b50:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12b54:	13833c02 	orrne	r3, r3, #512	; 0x200
   12b58:	15803108 	strne	r3, [r0, #264]	; 0x108
   12b5c:	e3120020 	tst	r2, #32
   12b60:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12b64:	13833c01 	orrne	r3, r3, #256	; 0x100
   12b68:	15803108 	strne	r3, [r0, #264]	; 0x108
   12b6c:	e3120040 	tst	r2, #64	; 0x40
   12b70:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12b74:	13833b01 	orrne	r3, r3, #1024	; 0x400
   12b78:	15803108 	strne	r3, [r0, #264]	; 0x108
   12b7c:	e1b023a2 	lsrs	r2, r2, #7
   12b80:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12b84:	13833080 	orrne	r3, r3, #128	; 0x80
   12b88:	15803108 	strne	r3, [r0, #264]	; 0x108
   12b8c:	e5d13005 	ldrb	r3, [r1, #5]
   12b90:	e3130001 	tst	r3, #1
   12b94:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12b98:	13822902 	orrne	r2, r2, #32768	; 0x8000
   12b9c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12ba0:	e3130002 	tst	r3, #2
   12ba4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12ba8:	13822802 	orrne	r2, r2, #131072	; 0x20000
   12bac:	15802108 	strne	r2, [r0, #264]	; 0x108
   12bb0:	e3130004 	tst	r3, #4
   12bb4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12bb8:	13822701 	orrne	r2, r2, #262144	; 0x40000
   12bbc:	15802108 	strne	r2, [r0, #264]	; 0x108
   12bc0:	e3130008 	tst	r3, #8
   12bc4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12bc8:	13822801 	orrne	r2, r2, #65536	; 0x10000
   12bcc:	15802108 	strne	r2, [r0, #264]	; 0x108
   12bd0:	e3130010 	tst	r3, #16
   12bd4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12bd8:	13822020 	orrne	r2, r2, #32
   12bdc:	15802108 	strne	r2, [r0, #264]	; 0x108
   12be0:	e3130020 	tst	r3, #32
   12be4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12be8:	13822040 	orrne	r2, r2, #64	; 0x40
   12bec:	15802108 	strne	r2, [r0, #264]	; 0x108
   12bf0:	e3130040 	tst	r3, #64	; 0x40
   12bf4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12bf8:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   12bfc:	15802108 	strne	r2, [r0, #264]	; 0x108
   12c00:	e1b033a3 	lsrs	r3, r3, #7
   12c04:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12c08:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   12c0c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12c10:	e1d130b6 	ldrh	r3, [r1, #6]
   12c14:	e1a03123 	lsr	r3, r3, #2
   12c18:	e5803058 	str	r3, [r0, #88]	; 0x58
   12c1c:	e353007f 	cmp	r3, #127	; 0x7f
   12c20:	85903108 	ldrhi	r3, [r0, #264]	; 0x108
   12c24:	83833008 	orrhi	r3, r3, #8
   12c28:	85803108 	strhi	r3, [r0, #264]	; 0x108
   12c2c:	e1d130b8 	ldrh	r3, [r1, #8]
   12c30:	e1a03123 	lsr	r3, r3, #2
   12c34:	e5803064 	str	r3, [r0, #100]	; 0x64
   12c38:	e353007f 	cmp	r3, #127	; 0x7f
   12c3c:	85903108 	ldrhi	r3, [r0, #264]	; 0x108
   12c40:	83833010 	orrhi	r3, r3, #16
   12c44:	85803108 	strhi	r3, [r0, #264]	; 0x108
   12c48:	e1d130fa 	ldrsh	r3, [r1, #10]
   12c4c:	e2833902 	add	r3, r3, #32768	; 0x8000
   12c50:	e1a03423 	lsr	r3, r3, #8
   12c54:	e5803028 	str	r3, [r0, #40]	; 0x28
   12c58:	e1d130fc 	ldrsh	r3, [r1, #12]
   12c5c:	e2833902 	add	r3, r3, #32768	; 0x8000
   12c60:	e1a03423 	lsr	r3, r3, #8
   12c64:	e22330ff 	eor	r3, r3, #255	; 0xff
   12c68:	e5803034 	str	r3, [r0, #52]	; 0x34
   12c6c:	e1d130fe 	ldrsh	r3, [r1, #14]
   12c70:	e2833902 	add	r3, r3, #32768	; 0x8000
   12c74:	e1a03423 	lsr	r3, r3, #8
   12c78:	e5803040 	str	r3, [r0, #64]	; 0x40
   12c7c:	e1d131f0 	ldrsh	r3, [r1, #16]
   12c80:	e2833902 	add	r3, r3, #32768	; 0x8000
   12c84:	e1a03423 	lsr	r3, r3, #8
   12c88:	e22330ff 	eor	r3, r3, #255	; 0xff
   12c8c:	e580304c 	str	r3, [r0, #76]	; 0x4c
   12c90:	e12fff1e 	bx	lr

00012c94 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   12c94:	e59f3014 	ldr	r3, [pc, #20]	; 12cb0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   12c98:	e92d4010 	push	{r4, lr}
   12c9c:	e1a04000 	mov	r4, r0
   12ca0:	e5803000 	str	r3, [r0]
   12ca4:	eb002b49 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12ca8:	e1a00004 	mov	r0, r4
   12cac:	e8bd8010 	pop	{r4, pc}
   12cb0:	0003c51c 	.word	0x0003c51c

00012cb4 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   12cb4:	e59f3020 	ldr	r3, [pc, #32]	; 12cdc <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   12cb8:	e92d4010 	push	{r4, lr}
   12cbc:	e1a04000 	mov	r4, r0
   12cc0:	e5803000 	str	r3, [r0]
   12cc4:	eb002b41 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12cc8:	e1a00004 	mov	r0, r4
   12ccc:	e3a01f4d 	mov	r1, #308	; 0x134
   12cd0:	eb009009 	bl	36cfc <operator delete(void*, unsigned int)>
   12cd4:	e1a00004 	mov	r0, r4
   12cd8:	e8bd8010 	pop	{r4, pc}
   12cdc:	0003c51c 	.word	0x0003c51c

00012ce0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   12ce0:	e2513000 	subs	r3, r1, #0
   12ce4:	012fff1e 	bxeq	lr
   12ce8:	e92d4030 	push	{r4, r5, lr}
   12cec:	e3520006 	cmp	r2, #6
   12cf0:	e1a04000 	mov	r4, r0
   12cf4:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   12cf8:	0a000008 	beq	12d20 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x40>
   12cfc:	e590c124 	ldr	ip, [r0, #292]	; 0x124
   12d00:	e25cc000 	subs	ip, ip, #0
   12d04:	13a0c001 	movne	ip, #1
   12d08:	e3520012 	cmp	r2, #18
   12d0c:	13a0c000 	movne	ip, #0
   12d10:	e35c0000 	cmp	ip, #0
   12d14:	1a00002b 	bne	12dc8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe8>
   12d18:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12d1c:	e8bd8030 	pop	{r4, r5, pc}
   12d20:	e5d32000 	ldrb	r2, [r3]
   12d24:	e3520007 	cmp	r2, #7
   12d28:	1afffffa 	bne	12d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12d2c:	e5d32001 	ldrb	r2, [r3, #1]
   12d30:	e3520030 	cmp	r2, #48	; 0x30
   12d34:	1afffff7 	bne	12d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12d38:	e28dc03f 	add	ip, sp, #63	; 0x3f
   12d3c:	e30c5514 	movw	r5, #50452	; 0xc514
   12d40:	e3405003 	movt	r5, #3
   12d44:	e3ccc03f 	bic	ip, ip, #63	; 0x3f
   12d48:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   12d4c:	e28c200e 	add	r2, ip, #14
   12d50:	e1a0e00c 	mov	lr, ip
   12d54:	e5d33002 	ldrb	r3, [r3, #2]
   12d58:	e5950054 	ldr	r0, [r5, #84]	; 0x54
   12d5c:	e5951058 	ldr	r1, [r5, #88]	; 0x58
   12d60:	f4420a0f 	vst1.8	{d16-d17}, [r2]
   12d64:	e28c201e 	add	r2, ip, #30
   12d68:	f4420a0f 	vst1.8	{d16-d17}, [r2]
   12d6c:	e28c202e 	add	r2, ip, #46	; 0x2e
   12d70:	f4420a0f 	vst1.8	{d16-d17}, [r2]
   12d74:	e595205c 	ldr	r2, [r5, #92]	; 0x5c
   12d78:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   12d7c:	e28c2038 	add	r2, ip, #56	; 0x38
   12d80:	e1a00004 	mov	r0, r4
   12d84:	e5cc3002 	strb	r3, [ip, #2]
   12d88:	e1a0100c 	mov	r1, ip
   12d8c:	f442070f 	vst1.8	{d16}, [r2]
   12d90:	e3a03000 	mov	r3, #0
   12d94:	e1d526b0 	ldrh	r2, [r5, #96]	; 0x60
   12d98:	e1ce20b0 	strh	r2, [lr]
   12d9c:	e3a0200d 	mov	r2, #13
   12da0:	eb0001c0 	bl	134a8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   12da4:	e3500000 	cmp	r0, #0
   12da8:	1affffda 	bne	12d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12dac:	eb007140 	bl	2f2b4 <CLogger::Get()>
   12db0:	e3a02001 	mov	r2, #1
   12db4:	e2851064 	add	r1, r5, #100	; 0x64
   12db8:	e30c34d0 	movw	r3, #50384	; 0xc4d0
   12dbc:	e3403003 	movt	r3, #3
   12dc0:	eb007309 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dc4:	eaffffd3 	b	12d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12dc8:	e5d33000 	ldrb	r3, [r3]
   12dcc:	e3530020 	cmp	r3, #32
   12dd0:	1affffd0 	bne	12d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12dd4:	e1a05000 	mov	r5, r0
   12dd8:	e4953024 	ldr	r3, [r5], #36	; 0x24
   12ddc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   12de0:	e12fff33 	blx	r3
   12de4:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   12de8:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   12dec:	e1a01005 	mov	r1, r5
   12df0:	e2400001 	sub	r0, r0, #1
   12df4:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12df8:	e8bd4030 	pop	{r4, r5, lr}
   12dfc:	e12fff13 	bx	r3

00012e00 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12e00:	e92d4070 	push	{r4, r5, r6, lr}
   12e04:	e30c4514 	movw	r4, #50452	; 0xc514
   12e08:	e3404003 	movt	r4, #3
   12e0c:	e24dd078 	sub	sp, sp, #120	; 0x78
   12e10:	e1a05001 	mov	r5, r1
   12e14:	e28dc03f 	add	ip, sp, #63	; 0x3f
   12e18:	e1a06000 	mov	r6, r0
   12e1c:	e3ccc03f 	bic	ip, ip, #63	; 0x3f
   12e20:	e5940074 	ldr	r0, [r4, #116]	; 0x74
   12e24:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   12e28:	e28c300e 	add	r3, ip, #14
   12e2c:	e1a0e00c 	mov	lr, ip
   12e30:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   12e34:	e3510001 	cmp	r1, #1
   12e38:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   12e3c:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12e40:	e28c301e 	add	r3, ip, #30
   12e44:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   12e48:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12e4c:	e28c302e 	add	r3, ip, #46	; 0x2e
   12e50:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12e54:	e1d438b0 	ldrh	r3, [r4, #128]	; 0x80
   12e58:	e1ce30b0 	strh	r3, [lr]
   12e5c:	e28c3038 	add	r3, ip, #56	; 0x38
   12e60:	f443070f 	vst1.8	{d16}, [r3]
   12e64:	0a000009 	beq	12e90 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   12e68:	e3550002 	cmp	r5, #2
   12e6c:	0a000014 	beq	12ec4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xc4>
   12e70:	e3550000 	cmp	r5, #0
   12e74:	0a000007 	beq	12e98 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x98>
   12e78:	e30c14e4 	movw	r1, #50404	; 0xc4e4
   12e7c:	e3401003 	movt	r1, #3
   12e80:	e30b0708 	movw	r0, #46856	; 0xb708
   12e84:	e3400003 	movt	r0, #3
   12e88:	e3a020ef 	mov	r2, #239	; 0xef
   12e8c:	eb00668b 	bl	2c8c0 <assertion_failed>
   12e90:	e3e03000 	mvn	r3, #0
   12e94:	e5cc3009 	strb	r3, [ip, #9]
   12e98:	e5d61130 	ldrb	r1, [r6, #304]	; 0x130
   12e9c:	e3a03000 	mov	r3, #0
   12ea0:	e5cc1002 	strb	r1, [ip, #2]
   12ea4:	e3a0200d 	mov	r2, #13
   12ea8:	e2810001 	add	r0, r1, #1
   12eac:	e1a0100c 	mov	r1, ip
   12eb0:	e5c60130 	strb	r0, [r6, #304]	; 0x130
   12eb4:	e1a00006 	mov	r0, r6
   12eb8:	eb000155 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12ebc:	e28dd078 	add	sp, sp, #120	; 0x78
   12ec0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ec4:	e3e03000 	mvn	r3, #0
   12ec8:	e5cc3008 	strb	r3, [ip, #8]
   12ecc:	eafffff1 	b	12e98 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x98>

00012ed0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   12ed0:	e92d4010 	push	{r4, lr}
   12ed4:	e1a04000 	mov	r4, r0
   12ed8:	eb002aab 	bl	1d98c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12edc:	e59f2010 	ldr	r2, [pc, #16]	; 12ef4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   12ee0:	e3a03000 	mov	r3, #0
   12ee4:	e1a00004 	mov	r0, r4
   12ee8:	e5842000 	str	r2, [r4]
   12eec:	e5c43130 	strb	r3, [r4, #304]	; 0x130
   12ef0:	e8bd8010 	pop	{r4, pc}
   12ef4:	0003c51c 	.word	0x0003c51c

00012ef8 <CUSBGamePadXboxOneDevice::Configure()>:
   12ef8:	e2803f4a 	add	r3, r0, #296	; 0x128
   12efc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12f00:	e3a02040 	mov	r2, #64	; 0x40
   12f04:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   12f08:	e1a04000 	mov	r4, r0
   12f0c:	e1c320b0 	strh	r2, [r3]
   12f10:	eb002a41 	bl	1d81c <CUSBGamePadDevice::Configure()>
   12f14:	e3500000 	cmp	r0, #0
   12f18:	0a000036 	beq	12ff8 <CUSBGamePadXboxOneDevice::Configure()+0x100>
   12f1c:	e28d503f 	add	r5, sp, #63	; 0x3f
   12f20:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   12f24:	e3c5503f 	bic	r5, r5, #63	; 0x3f
   12f28:	e30c6514 	movw	r6, #50452	; 0xc514
   12f2c:	e3406003 	movt	r6, #3
   12f30:	e2853006 	add	r3, r5, #6
   12f34:	f2c02050 	vmov.i32	q9, #0	; 0x00000000
   12f38:	e3a02013 	mov	r2, #19
   12f3c:	e284e050 	add	lr, r4, #80	; 0x50
   12f40:	e5842104 	str	r2, [r4, #260]	; 0x104
   12f44:	e284c05c 	add	ip, r4, #92	; 0x5c
   12f48:	e2842068 	add	r2, r4, #104	; 0x68
   12f4c:	e284902c 	add	r9, r4, #44	; 0x2c
   12f50:	e2848038 	add	r8, r4, #56	; 0x38
   12f54:	f4432a0f 	vst1.8	{d18-d19}, [r3]
   12f58:	e2853016 	add	r3, r5, #22
   12f5c:	e2847044 	add	r7, r4, #68	; 0x44
   12f60:	e5960084 	ldr	r0, [r6, #132]	; 0x84
   12f64:	f4432a0f 	vst1.8	{d18-d19}, [r3]
   12f68:	e2853026 	add	r3, r5, #38	; 0x26
   12f6c:	e1d618b8 	ldrh	r1, [r6, #136]	; 0x88
   12f70:	e5850000 	str	r0, [r5]
   12f74:	e3a00006 	mov	r0, #6
   12f78:	f4432a0f 	vst1.8	{d18-d19}, [r3]
   12f7c:	e2853030 	add	r3, r5, #48	; 0x30
   12f80:	e5840024 	str	r0, [r4, #36]	; 0x24
   12f84:	e1a00004 	mov	r0, r4
   12f88:	f449078f 	vst1.32	{d16}, [r9]
   12f8c:	e1c510b4 	strh	r1, [r5, #4]
   12f90:	e1a01005 	mov	r1, r5
   12f94:	f448078f 	vst1.32	{d16}, [r8]
   12f98:	f4432a0f 	vst1.8	{d18-d19}, [r3]
   12f9c:	e3a03000 	mov	r3, #0
   12fa0:	f447078f 	vst1.32	{d16}, [r7]
   12fa4:	f44e078f 	vst1.32	{d16}, [lr]
   12fa8:	f44c078f 	vst1.32	{d16}, [ip]
   12fac:	f442078f 	vst1.32	{d16}, [r2]
   12fb0:	e3a02005 	mov	r2, #5
   12fb4:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   12fb8:	eb000115 	bl	13414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12fbc:	e3500000 	cmp	r0, #0
   12fc0:	0a000003 	beq	12fd4 <CUSBGamePadXboxOneDevice::Configure()+0xdc>
   12fc4:	e1a00004 	mov	r0, r4
   12fc8:	eb000196 	bl	13628 <CUSBHIDDevice::StartRequest()>
   12fcc:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12fd0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12fd4:	eb0070b6 	bl	2f2b4 <CLogger::Get()>
   12fd8:	e30c34fc 	movw	r3, #50428	; 0xc4fc
   12fdc:	e3403003 	movt	r3, #3
   12fe0:	e3a02001 	mov	r2, #1
   12fe4:	e2861064 	add	r1, r6, #100	; 0x64
   12fe8:	eb00727f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12fec:	e3a00000 	mov	r0, #0
   12ff0:	e28dd07c 	add	sp, sp, #124	; 0x7c
   12ff4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12ff8:	eb0070ad 	bl	2f2b4 <CLogger::Get()>
   12ffc:	e59f1010 	ldr	r1, [pc, #16]	; 13014 <CUSBGamePadXboxOneDevice::Configure()+0x11c>
   13000:	e3a02001 	mov	r2, #1
   13004:	e30b3f74 	movw	r3, #49012	; 0xbf74
   13008:	e3403003 	movt	r3, #3
   1300c:	eb007276 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13010:	eafffff5 	b	12fec <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   13014:	0003c578 	.word	0x0003c578

00013018 <CUSBGamePadXboxOneDevice::GetProperties()>:
   13018:	e3a00009 	mov	r0, #9
   1301c:	e12fff1e 	bx	lr

00013020 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   13020:	e92d4070 	push	{r4, r5, r6, lr}
   13024:	e2504000 	subs	r4, r0, #0
   13028:	0a000015 	beq	13084 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x64>
   1302c:	e1a05001 	mov	r5, r1
   13030:	eb000d21 	bl	164bc <CUSBRequest::GetStatus() const>
   13034:	e3500000 	cmp	r0, #0
   13038:	0a000009 	beq	13064 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   1303c:	e1a00004 	mov	r0, r4
   13040:	eb000d0c 	bl	16478 <CUSBRequest::~CUSBRequest()>
   13044:	e3a01070 	mov	r1, #112	; 0x70
   13048:	e1a00004 	mov	r0, r4
   1304c:	eb000dc5 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   13050:	e3550000 	cmp	r5, #0
   13054:	0a000010 	beq	1309c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   13058:	e1a00005 	mov	r0, r5
   1305c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13060:	ea008f1f 	b	36ce4 <operator delete[](void*)>
   13064:	eb007092 	bl	2f2b4 <CLogger::Get()>
   13068:	e3a02002 	mov	r2, #2
   1306c:	e30c35b4 	movw	r3, #50612	; 0xc5b4
   13070:	e3403003 	movt	r3, #3
   13074:	e30c1680 	movw	r1, #50816	; 0xc680
   13078:	e3401003 	movt	r1, #3
   1307c:	eb00725a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13080:	eaffffed 	b	1303c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   13084:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13088:	e3401003 	movt	r1, #3
   1308c:	e30a0b00 	movw	r0, #43776	; 0xab00
   13090:	e3400003 	movt	r0, #3
   13094:	e3a020af 	mov	r2, #175	; 0xaf
   13098:	eb006608 	bl	2c8c0 <assertion_failed>
   1309c:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   130a0:	e3401003 	movt	r1, #3
   130a4:	e30c05d0 	movw	r0, #50640	; 0xc5d0
   130a8:	e3400003 	movt	r0, #3
   130ac:	e3a020b8 	mov	r2, #184	; 0xb8
   130b0:	eb006602 	bl	2c8c0 <assertion_failed>

000130b4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   130b4:	e92d4070 	push	{r4, r5, r6, lr}
   130b8:	e1a04000 	mov	r4, r0
   130bc:	e1a05002 	mov	r5, r2
   130c0:	ebfff4e1 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   130c4:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   130c8:	e2842018 	add	r2, r4, #24
   130cc:	e3a03000 	mov	r3, #0
   130d0:	e59f1030 	ldr	r1, [pc, #48]	; 13108 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x54>
   130d4:	e1550003 	cmp	r5, r3
   130d8:	e5841000 	str	r1, [r4]
   130dc:	e5845014 	str	r5, [r4, #20]
   130e0:	f442078f 	vst1.32	{d16}, [r2]
   130e4:	e5843020 	str	r3, [r4, #32]
   130e8:	1a000001 	bne	130f4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   130ec:	e1a00004 	mov	r0, r4
   130f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   130f4:	e1a00005 	mov	r0, r5
   130f8:	eb008eed 	bl	36cb4 <operator new[](unsigned int)>
   130fc:	e5840020 	str	r0, [r4, #32]
   13100:	e1a00004 	mov	r0, r4
   13104:	e8bd8070 	pop	{r4, r5, r6, pc}
   13108:	0003c690 	.word	0x0003c690

0001310c <CUSBHIDDevice::~CUSBHIDDevice()>:
   1310c:	e92d4070 	push	{r4, r5, r6, lr}
   13110:	e1a04000 	mov	r4, r0
   13114:	e5900020 	ldr	r0, [r0, #32]
   13118:	e59f3074 	ldr	r3, [pc, #116]	; 13194 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   1311c:	e3500000 	cmp	r0, #0
   13120:	e5843000 	str	r3, [r4]
   13124:	0a000000 	beq	1312c <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   13128:	eb008eed 	bl	36ce4 <operator delete[](void*)>
   1312c:	e594501c 	ldr	r5, [r4, #28]
   13130:	e3a03000 	mov	r3, #0
   13134:	e5843020 	str	r3, [r4, #32]
   13138:	e1550003 	cmp	r5, r3
   1313c:	0a000004 	beq	13154 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   13140:	e1a00005 	mov	r0, r5
   13144:	ebfff3ad 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   13148:	e3a01014 	mov	r1, #20
   1314c:	e1a00005 	mov	r0, r5
   13150:	eb008ee9 	bl	36cfc <operator delete(void*, unsigned int)>
   13154:	e5945018 	ldr	r5, [r4, #24]
   13158:	e3a03000 	mov	r3, #0
   1315c:	e584301c 	str	r3, [r4, #28]
   13160:	e1550003 	cmp	r5, r3
   13164:	0a000004 	beq	1317c <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   13168:	e1a00005 	mov	r0, r5
   1316c:	ebfff3a3 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   13170:	e3a01014 	mov	r1, #20
   13174:	e1a00005 	mov	r0, r5
   13178:	eb008edf 	bl	36cfc <operator delete(void*, unsigned int)>
   1317c:	e3a03000 	mov	r3, #0
   13180:	e1a00004 	mov	r0, r4
   13184:	e5843018 	str	r3, [r4, #24]
   13188:	ebfff406 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   1318c:	e1a00004 	mov	r0, r4
   13190:	e8bd8070 	pop	{r4, r5, r6, pc}
   13194:	0003c690 	.word	0x0003c690

00013198 <CUSBHIDDevice::~CUSBHIDDevice()>:
   13198:	e92d4010 	push	{r4, lr}
   1319c:	e1a04000 	mov	r4, r0
   131a0:	ebffffd9 	bl	1310c <CUSBHIDDevice::~CUSBHIDDevice()>
   131a4:	e1a00004 	mov	r0, r4
   131a8:	e3a01024 	mov	r1, #36	; 0x24
   131ac:	eb008ed2 	bl	36cfc <operator delete(void*, unsigned int)>
   131b0:	e1a00004 	mov	r0, r4
   131b4:	e8bd8010 	pop	{r4, pc}

000131b8 <CUSBHIDDevice::ConfigureHID(unsigned int)>:
   131b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131bc:	e1a05000 	mov	r5, r0
   131c0:	e1a06001 	mov	r6, r1
   131c4:	e24dd014 	sub	sp, sp, #20
   131c8:	ebfff4f7 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   131cc:	e3500000 	cmp	r0, #0
   131d0:	1a000004 	bne	131e8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x30>
   131d4:	ea00004a 	b	13304 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x14c>
   131d8:	e5d43003 	ldrb	r3, [r4, #3]
   131dc:	e203303f 	and	r3, r3, #63	; 0x3f
   131e0:	e3530003 	cmp	r3, #3
   131e4:	0a00001e 	beq	13264 <CUSBHIDDevice::ConfigureHID(unsigned int)+0xac>
   131e8:	e3a01005 	mov	r1, #5
   131ec:	e1a00005 	mov	r0, r5
   131f0:	ebfff519 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   131f4:	e2504000 	subs	r4, r0, #0
   131f8:	1afffff6 	bne	131d8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x20>
   131fc:	e5953018 	ldr	r3, [r5, #24]
   13200:	e1a00005 	mov	r0, r5
   13204:	e3530000 	cmp	r3, #0
   13208:	0a00004b 	beq	1333c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x184>
   1320c:	ebfff41f 	bl	10290 <CUSBFunction::Configure()>
   13210:	e2507000 	subs	r7, r0, #0
   13214:	0a000031 	beq	132e0 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x128>
   13218:	e1a00005 	mov	r0, r5
   1321c:	ebfff56e 	bl	107dc <CUSBFunction::GetInterfaceClass() const>
   13220:	e3500003 	cmp	r0, #3
   13224:	0a000048 	beq	1334c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x194>
   13228:	e5953014 	ldr	r3, [r5, #20]
   1322c:	e3530000 	cmp	r3, #0
   13230:	1a000038 	bne	13318 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x160>
   13234:	e3560000 	cmp	r6, #0
   13238:	e5856014 	str	r6, [r5, #20]
   1323c:	0a000068 	beq	133e4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x22c>
   13240:	e5953020 	ldr	r3, [r5, #32]
   13244:	e3530000 	cmp	r3, #0
   13248:	1a00006b 	bne	133fc <CUSBHIDDevice::ConfigureHID(unsigned int)+0x244>
   1324c:	e1a00006 	mov	r0, r6
   13250:	eb008e97 	bl	36cb4 <operator new[](unsigned int)>
   13254:	e5850020 	str	r0, [r5, #32]
   13258:	e1a00007 	mov	r0, r7
   1325c:	e28dd014 	add	sp, sp, #20
   13260:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13264:	e1d430d2 	ldrsb	r3, [r4, #2]
   13268:	e3530000 	cmp	r3, #0
   1326c:	ba00000d 	blt	132a8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0xf0>
   13270:	e595301c 	ldr	r3, [r5, #28]
   13274:	e3530000 	cmp	r3, #0
   13278:	1a000021 	bne	13304 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x14c>
   1327c:	e3a00014 	mov	r0, #20
   13280:	eb008e85 	bl	36c9c <operator new(unsigned int)>
   13284:	e1a07000 	mov	r7, r0
   13288:	e1a00005 	mov	r0, r5
   1328c:	ebfff4d2 	bl	105dc <CUSBFunction::GetDevice() const>
   13290:	e1a02004 	mov	r2, r4
   13294:	e1a01000 	mov	r1, r0
   13298:	e1a00007 	mov	r0, r7
   1329c:	ebfff2dd 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   132a0:	e585701c 	str	r7, [r5, #28]
   132a4:	eaffffcf 	b	131e8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x30>
   132a8:	e5953018 	ldr	r3, [r5, #24]
   132ac:	e3530000 	cmp	r3, #0
   132b0:	1a000013 	bne	13304 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x14c>
   132b4:	e3a00014 	mov	r0, #20
   132b8:	eb008e77 	bl	36c9c <operator new(unsigned int)>
   132bc:	e1a07000 	mov	r7, r0
   132c0:	e1a00005 	mov	r0, r5
   132c4:	ebfff4c4 	bl	105dc <CUSBFunction::GetDevice() const>
   132c8:	e1a02004 	mov	r2, r4
   132cc:	e1a01000 	mov	r1, r0
   132d0:	e1a00007 	mov	r0, r7
   132d4:	ebfff2cf 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   132d8:	e5857018 	str	r7, [r5, #24]
   132dc:	eaffffc1 	b	131e8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x30>
   132e0:	eb006ff3 	bl	2f2b4 <CLogger::Get()>
   132e4:	e30b3eac 	movw	r3, #48812	; 0xbeac
   132e8:	e3403003 	movt	r3, #3
   132ec:	e30c1680 	movw	r1, #50816	; 0xc680
   132f0:	e3401003 	movt	r1, #3
   132f4:	e3a02001 	mov	r2, #1
   132f8:	eb0071bb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   132fc:	e3a07000 	mov	r7, #0
   13300:	eaffffd4 	b	13258 <CUSBHIDDevice::ConfigureHID(unsigned int)+0xa0>
   13304:	e1a00005 	mov	r0, r5
   13308:	e30c1680 	movw	r1, #50816	; 0xc680
   1330c:	e3401003 	movt	r1, #3
   13310:	ebfff4dc 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   13314:	eafffff8 	b	132fc <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   13318:	e5953020 	ldr	r3, [r5, #32]
   1331c:	e3530000 	cmp	r3, #0
   13320:	1affffcc 	bne	13258 <CUSBHIDDevice::ConfigureHID(unsigned int)+0xa0>
   13324:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13328:	e3401003 	movt	r1, #3
   1332c:	e30c0628 	movw	r0, #50728	; 0xc628
   13330:	e3400003 	movt	r0, #3
   13334:	e3a02082 	mov	r2, #130	; 0x82
   13338:	eb006560 	bl	2c8c0 <assertion_failed>
   1333c:	e30c1680 	movw	r1, #50816	; 0xc680
   13340:	e3401003 	movt	r1, #3
   13344:	ebfff4cf 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   13348:	eaffffeb 	b	132fc <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   1334c:	e1a00005 	mov	r0, r5
   13350:	ebfff52d 	bl	1080c <CUSBFunction::GetInterfaceSubClass() const>
   13354:	e1a08000 	mov	r8, r0
   13358:	e3500001 	cmp	r0, #1
   1335c:	1affffb1 	bne	13228 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x70>
   13360:	e1a00005 	mov	r0, r5
   13364:	ebfff4b1 	bl	10630 <CUSBFunction::GetHost() const>
   13368:	e1a0a000 	mov	sl, r0
   1336c:	e1a00005 	mov	r0, r5
   13370:	ebfff4a3 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   13374:	e1a0b000 	mov	fp, r0
   13378:	e1a00005 	mov	r0, r5
   1337c:	ebfff52e 	bl	1083c <CUSBFunction::GetInterfaceProtocol() const>
   13380:	e1a09000 	mov	r9, r0
   13384:	e2499002 	sub	r9, r9, #2
   13388:	e1a00005 	mov	r0, r5
   1338c:	e16f9f19 	clz	r9, r9
   13390:	ebfff505 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   13394:	e1a0100b 	mov	r1, fp
   13398:	e58d0004 	str	r0, [sp, #4]
   1339c:	e1a092a9 	lsr	r9, r9, #5
   133a0:	e1a0000a 	mov	r0, sl
   133a4:	e3a0300b 	mov	r3, #11
   133a8:	e3a02021 	mov	r2, #33	; 0x21
   133ac:	e58d9000 	str	r9, [sp]
   133b0:	e58d400c 	str	r4, [sp, #12]
   133b4:	e58d4008 	str	r4, [sp, #8]
   133b8:	eb00019a 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   133bc:	e3500000 	cmp	r0, #0
   133c0:	aaffff98 	bge	13228 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x70>
   133c4:	eb006fba 	bl	2f2b4 <CLogger::Get()>
   133c8:	e1a02008 	mov	r2, r8
   133cc:	e30c35e4 	movw	r3, #50660	; 0xc5e4
   133d0:	e3403003 	movt	r3, #3
   133d4:	e30c1680 	movw	r1, #50816	; 0xc680
   133d8:	e3401003 	movt	r1, #3
   133dc:	eb007182 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   133e0:	eaffffc5 	b	132fc <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   133e4:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   133e8:	e3401003 	movt	r1, #3
   133ec:	e30c05f8 	movw	r0, #50680	; 0xc5f8
   133f0:	e3400003 	movt	r0, #3
   133f4:	e3a0207d 	mov	r2, #125	; 0x7d
   133f8:	eb006530 	bl	2c8c0 <assertion_failed>
   133fc:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13400:	e3401003 	movt	r1, #3
   13404:	e30c0610 	movw	r0, #50704	; 0xc610
   13408:	e3400003 	movt	r0, #3
   1340c:	e3a0207f 	mov	r2, #127	; 0x7f
   13410:	eb00652a 	bl	2c8c0 <assertion_failed>

00013414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   13414:	e590c01c 	ldr	ip, [r0, #28]
   13418:	e35c0000 	cmp	ip, #0
   1341c:	0a000013 	beq	13470 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   13420:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13424:	e3510000 	cmp	r1, #0
   13428:	e1a05001 	mov	r5, r1
   1342c:	e24dd00c 	sub	sp, sp, #12
   13430:	0a000010 	beq	13478 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x64>
   13434:	e1a06002 	mov	r6, r2
   13438:	e3520000 	cmp	r2, #0
   1343c:	0a000013 	beq	13490 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x7c>
   13440:	e1a04000 	mov	r4, r0
   13444:	e1a07003 	mov	r7, r3
   13448:	ebfff478 	bl	10630 <CUSBFunction::GetHost() const>
   1344c:	e1a03006 	mov	r3, r6
   13450:	e1a02005 	mov	r2, r5
   13454:	e594101c 	ldr	r1, [r4, #28]
   13458:	e58d7000 	str	r7, [sp]
   1345c:	eb0001d8 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   13460:	e1e00000 	mvn	r0, r0
   13464:	e1a00fa0 	lsr	r0, r0, #31
   13468:	e28dd00c 	add	sp, sp, #12
   1346c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13470:	e1a0000c 	mov	r0, ip
   13474:	e12fff1e 	bx	lr
   13478:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   1347c:	e3401003 	movt	r1, #3
   13480:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   13484:	e3400003 	movt	r0, #3
   13488:	e3a0208e 	mov	r2, #142	; 0x8e
   1348c:	eb00650b 	bl	2c8c0 <assertion_failed>
   13490:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13494:	e3401003 	movt	r1, #3
   13498:	e30c0640 	movw	r0, #50752	; 0xc640
   1349c:	e3400003 	movt	r0, #3
   134a0:	e3a0208f 	mov	r2, #143	; 0x8f
   134a4:	eb006505 	bl	2c8c0 <assertion_failed>

000134a8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   134a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   134ac:	e1a04000 	mov	r4, r0
   134b0:	e590001c 	ldr	r0, [r0, #28]
   134b4:	e24dd008 	sub	sp, sp, #8
   134b8:	e3500000 	cmp	r0, #0
   134bc:	0a000024 	beq	13554 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xac>
   134c0:	e1a06001 	mov	r6, r1
   134c4:	e3510000 	cmp	r1, #0
   134c8:	0a000023 	beq	1355c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb4>
   134cc:	e1a05002 	mov	r5, r2
   134d0:	e3520000 	cmp	r2, #0
   134d4:	0a000026 	beq	13574 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xcc>
   134d8:	e1a00002 	mov	r0, r2
   134dc:	e1a07003 	mov	r7, r3
   134e0:	eb008df3 	bl	36cb4 <operator new[](unsigned int)>
   134e4:	e1a01006 	mov	r1, r6
   134e8:	e1a02005 	mov	r2, r5
   134ec:	e1a08000 	mov	r8, r0
   134f0:	eb008be0 	bl	36478 <memcpy>
   134f4:	e3a00070 	mov	r0, #112	; 0x70
   134f8:	eb000c84 	bl	16710 <CUSBRequest::operator new(unsigned int)>
   134fc:	e594101c 	ldr	r1, [r4, #28]
   13500:	e1a06000 	mov	r6, r0
   13504:	e1a03005 	mov	r3, r5
   13508:	e3a02000 	mov	r2, #0
   1350c:	e58d2000 	str	r2, [sp]
   13510:	e1a02008 	mov	r2, r8
   13514:	eb000bb3 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13518:	e1a03004 	mov	r3, r4
   1351c:	e1a02008 	mov	r2, r8
   13520:	e1a00006 	mov	r0, r6
   13524:	e3031020 	movw	r1, #12320	; 0x3020
   13528:	e3401001 	movt	r1, #1
   1352c:	eb000c58 	bl	16694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13530:	e1a00004 	mov	r0, r4
   13534:	ebfff43d 	bl	10630 <CUSBFunction::GetHost() const>
   13538:	e5903000 	ldr	r3, [r0]
   1353c:	e1a02007 	mov	r2, r7
   13540:	e1a01006 	mov	r1, r6
   13544:	e5933014 	ldr	r3, [r3, #20]
   13548:	e28dd008 	add	sp, sp, #8
   1354c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13550:	e12fff13 	bx	r3
   13554:	e28dd008 	add	sp, sp, #8
   13558:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1355c:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13560:	e3401003 	movt	r1, #3
   13564:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   13568:	e3400003 	movt	r0, #3
   1356c:	e3a020a0 	mov	r2, #160	; 0xa0
   13570:	eb0064d2 	bl	2c8c0 <assertion_failed>
   13574:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13578:	e3401003 	movt	r1, #3
   1357c:	e30c0640 	movw	r0, #50752	; 0xc640
   13580:	e3400003 	movt	r0, #3
   13584:	e3a020a1 	mov	r2, #161	; 0xa1
   13588:	eb0064cc 	bl	2c8c0 <assertion_failed>

0001358c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   1358c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13590:	e1a07003 	mov	r7, r3
   13594:	e5903018 	ldr	r3, [r0, #24]
   13598:	e24dd00c 	sub	sp, sp, #12
   1359c:	e3530000 	cmp	r3, #0
   135a0:	0a00000e 	beq	135e0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x54>
   135a4:	e1a05001 	mov	r5, r1
   135a8:	e3510000 	cmp	r1, #0
   135ac:	0a000011 	beq	135f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x6c>
   135b0:	e1a06002 	mov	r6, r2
   135b4:	e3520000 	cmp	r2, #0
   135b8:	0a000014 	beq	13610 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   135bc:	e1a04000 	mov	r4, r0
   135c0:	ebfff41a 	bl	10630 <CUSBFunction::GetHost() const>
   135c4:	e1a03006 	mov	r3, r6
   135c8:	e1a02005 	mov	r2, r5
   135cc:	e5941018 	ldr	r1, [r4, #24]
   135d0:	e58d7000 	str	r7, [sp]
   135d4:	eb00017a 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   135d8:	e28dd00c 	add	sp, sp, #12
   135dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   135e0:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   135e4:	e3401003 	movt	r1, #3
   135e8:	e30c0650 	movw	r0, #50768	; 0xc650
   135ec:	e3400003 	movt	r0, #3
   135f0:	e3a020be 	mov	r2, #190	; 0xbe
   135f4:	eb0064b1 	bl	2c8c0 <assertion_failed>
   135f8:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   135fc:	e3401003 	movt	r1, #3
   13600:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   13604:	e3400003 	movt	r0, #3
   13608:	e3a020bf 	mov	r2, #191	; 0xbf
   1360c:	eb0064ab 	bl	2c8c0 <assertion_failed>
   13610:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13614:	e3401003 	movt	r1, #3
   13618:	e30c0640 	movw	r0, #50752	; 0xc640
   1361c:	e3400003 	movt	r0, #3
   13620:	e3a020c0 	mov	r2, #192	; 0xc0
   13624:	eb0064a5 	bl	2c8c0 <assertion_failed>

00013628 <CUSBHIDDevice::StartRequest()>:
   13628:	e5903018 	ldr	r3, [r0, #24]
   1362c:	e92d4070 	push	{r4, r5, r6, lr}
   13630:	e3530000 	cmp	r3, #0
   13634:	e24dd008 	sub	sp, sp, #8
   13638:	0a00001e 	beq	136b8 <CUSBHIDDevice::StartRequest()+0x90>
   1363c:	e5903020 	ldr	r3, [r0, #32]
   13640:	e1a04000 	mov	r4, r0
   13644:	e3530000 	cmp	r3, #0
   13648:	0a000020 	beq	136d0 <CUSBHIDDevice::StartRequest()+0xa8>
   1364c:	e5903014 	ldr	r3, [r0, #20]
   13650:	e3530000 	cmp	r3, #0
   13654:	0a000023 	beq	136e8 <CUSBHIDDevice::StartRequest()+0xc0>
   13658:	e3a00070 	mov	r0, #112	; 0x70
   1365c:	e3a06000 	mov	r6, #0
   13660:	eb000c2a 	bl	16710 <CUSBRequest::operator new(unsigned int)>
   13664:	e5943014 	ldr	r3, [r4, #20]
   13668:	e58d6000 	str	r6, [sp]
   1366c:	e1a05000 	mov	r5, r0
   13670:	e5941018 	ldr	r1, [r4, #24]
   13674:	e5942020 	ldr	r2, [r4, #32]
   13678:	eb000b5a 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1367c:	e1a03004 	mov	r3, r4
   13680:	e1a02006 	mov	r2, r6
   13684:	e1a00005 	mov	r0, r5
   13688:	e30317ec 	movw	r1, #14316	; 0x37ec
   1368c:	e3401001 	movt	r1, #1
   13690:	eb000bff 	bl	16694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13694:	e1a00004 	mov	r0, r4
   13698:	ebfff3e4 	bl	10630 <CUSBFunction::GetHost() const>
   1369c:	e5903000 	ldr	r3, [r0]
   136a0:	e1a02006 	mov	r2, r6
   136a4:	e1a01005 	mov	r1, r5
   136a8:	e5933014 	ldr	r3, [r3, #20]
   136ac:	e28dd008 	add	sp, sp, #8
   136b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   136b4:	e12fff13 	bx	r3
   136b8:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   136bc:	e3401003 	movt	r1, #3
   136c0:	e30c0650 	movw	r0, #50768	; 0xc650
   136c4:	e3400003 	movt	r0, #3
   136c8:	e3a020c6 	mov	r2, #198	; 0xc6
   136cc:	eb00647b 	bl	2c8c0 <assertion_failed>
   136d0:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   136d4:	e3401003 	movt	r1, #3
   136d8:	e30c0628 	movw	r0, #50728	; 0xc628
   136dc:	e3400003 	movt	r0, #3
   136e0:	e3a020c7 	mov	r2, #199	; 0xc7
   136e4:	eb006475 	bl	2c8c0 <assertion_failed>
   136e8:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   136ec:	e3401003 	movt	r1, #3
   136f0:	e30c05f8 	movw	r0, #50680	; 0xc5f8
   136f4:	e3400003 	movt	r0, #3
   136f8:	e3a020c9 	mov	r2, #201	; 0xc9
   136fc:	eb00646f 	bl	2c8c0 <assertion_failed>

00013700 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   13700:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13704:	e2514000 	subs	r4, r1, #0
   13708:	0a000031 	beq	137d4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   1370c:	e1a05000 	mov	r5, r0
   13710:	e1a00004 	mov	r0, r4
   13714:	eb000b68 	bl	164bc <CUSBRequest::GetStatus() const>
   13718:	e3500000 	cmp	r0, #0
   1371c:	1a000018 	bne	13784 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x84>
   13720:	eb000140 	bl	13c28 <CUSBHostController::IsPlugAndPlay()>
   13724:	e2502000 	subs	r2, r0, #0
   13728:	1a00001f 	bne	137ac <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xac>
   1372c:	e5953000 	ldr	r3, [r5]
   13730:	e1a01002 	mov	r1, r2
   13734:	e1a00005 	mov	r0, r5
   13738:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1373c:	e12fff33 	blx	r3
   13740:	e1a00004 	mov	r0, r4
   13744:	eb000b4b 	bl	16478 <CUSBRequest::~CUSBRequest()>
   13748:	e3a01070 	mov	r1, #112	; 0x70
   1374c:	e1a00004 	mov	r0, r4
   13750:	eb000c04 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   13754:	e1a00005 	mov	r0, r5
   13758:	ebffffb2 	bl	13628 <CUSBHIDDevice::StartRequest()>
   1375c:	e3500000 	cmp	r0, #0
   13760:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   13764:	eb006ed2 	bl	2f2b4 <CLogger::Get()>
   13768:	e30c3668 	movw	r3, #50792	; 0xc668
   1376c:	e3403003 	movt	r3, #3
   13770:	e30c1680 	movw	r1, #50816	; 0xc680
   13774:	e3401003 	movt	r1, #3
   13778:	e3a02001 	mov	r2, #1
   1377c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13780:	ea007099 	b	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13784:	e5953000 	ldr	r3, [r5]
   13788:	e1a00004 	mov	r0, r4
   1378c:	e5957020 	ldr	r7, [r5, #32]
   13790:	e593602c 	ldr	r6, [r3, #44]	; 0x2c
   13794:	eb000b4a 	bl	164c4 <CUSBRequest::GetResultLength() const>
   13798:	e1a01007 	mov	r1, r7
   1379c:	e1a02000 	mov	r2, r0
   137a0:	e1a00005 	mov	r0, r5
   137a4:	e12fff36 	blx	r6
   137a8:	eaffffe4 	b	13740 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x40>
   137ac:	e1a00004 	mov	r0, r4
   137b0:	eb000b4f 	bl	164f4 <CUSBRequest::GetUSBError() const>
   137b4:	e3500003 	cmp	r0, #3
   137b8:	e1a00004 	mov	r0, r4
   137bc:	0affffe0 	beq	13744 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   137c0:	eb000b2c 	bl	16478 <CUSBRequest::~CUSBRequest()>
   137c4:	e1a00004 	mov	r0, r4
   137c8:	e3a01070 	mov	r1, #112	; 0x70
   137cc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   137d0:	ea000be4 	b	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   137d4:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   137d8:	e3401003 	movt	r1, #3
   137dc:	e30a0b00 	movw	r0, #43776	; 0xab00
   137e0:	e3400003 	movt	r0, #3
   137e4:	e3a020d3 	mov	r2, #211	; 0xd3
   137e8:	eb006434 	bl	2c8c0 <assertion_failed>

000137ec <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   137ec:	e1a01000 	mov	r1, r0
   137f0:	e2520000 	subs	r0, r2, #0
   137f4:	0a000000 	beq	137fc <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   137f8:	eaffffc0 	b	13700 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   137fc:	e30c15a0 	movw	r1, #50592	; 0xc5a0
   13800:	e3401003 	movt	r1, #3
   13804:	e30a0a18 	movw	r0, #43544	; 0xaa18
   13808:	e3400003 	movt	r0, #3
   1380c:	e3a020f6 	mov	r2, #246	; 0xf6
   13810:	e92d4010 	push	{r4, lr}
   13814:	eb006429 	bl	2c8c0 <assertion_failed>

00013818 <CUSBHostController::UpdatePlugAndPlay()>:
   13818:	e3043e80 	movw	r3, #20096	; 0x4e80
   1381c:	e3403004 	movt	r3, #4
   13820:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13824:	e5d38000 	ldrb	r8, [r3]
   13828:	e3580000 	cmp	r8, #0
   1382c:	0a000044 	beq	13944 <CUSBHostController::UpdatePlugAndPlay()+0x12c>
   13830:	e1a06000 	mov	r6, r0
   13834:	e590000c 	ldr	r0, [r0, #12]
   13838:	e3a03000 	mov	r3, #0
   1383c:	e1500003 	cmp	r0, r3
   13840:	e5d64004 	ldrb	r4, [r6, #4]
   13844:	e5c63004 	strb	r3, [r6, #4]
   13848:	1a00002f 	bne	1390c <CUSBHostController::UpdatePlugAndPlay()+0xf4>
   1384c:	e2867008 	add	r7, r6, #8
   13850:	e1a00007 	mov	r0, r7
   13854:	eb007370 	bl	3061c <CPtrList::GetFirst()>
   13858:	e2505000 	subs	r5, r0, #0
   1385c:	0a00003e 	beq	1395c <CUSBHostController::UpdatePlugAndPlay()+0x144>
   13860:	e1a01005 	mov	r1, r5
   13864:	e1a00007 	mov	r0, r7
   13868:	eb007383 	bl	3067c <CPtrList::GetPtr(TPtrListElement*)>
   1386c:	e1a01005 	mov	r1, r5
   13870:	e1a04000 	mov	r4, r0
   13874:	e1a00007 	mov	r0, r7
   13878:	eb00740d 	bl	308b4 <CPtrList::Remove(TPtrListElement*)>
   1387c:	e596300c 	ldr	r3, [r6, #12]
   13880:	e3530000 	cmp	r3, #0
   13884:	1a000017 	bne	138e8 <CUSBHostController::UpdatePlugAndPlay()+0xd0>
   13888:	e3540000 	cmp	r4, #0
   1388c:	0a000018 	beq	138f4 <CUSBHostController::UpdatePlugAndPlay()+0xdc>
   13890:	e5d43000 	ldrb	r3, [r4]
   13894:	e5940004 	ldr	r0, [r4, #4]
   13898:	e3530000 	cmp	r3, #0
   1389c:	0a00000d 	beq	138d8 <CUSBHostController::UpdatePlugAndPlay()+0xc0>
   138a0:	e3500000 	cmp	r0, #0
   138a4:	0a000020 	beq	1392c <CUSBHostController::UpdatePlugAndPlay()+0x114>
   138a8:	e5903000 	ldr	r3, [r0]
   138ac:	e5933010 	ldr	r3, [r3, #16]
   138b0:	e12fff33 	blx	r3
   138b4:	e1a00004 	mov	r0, r4
   138b8:	e3a01008 	mov	r1, #8
   138bc:	eb008d0e 	bl	36cfc <operator delete(void*, unsigned int)>
   138c0:	e596000c 	ldr	r0, [r6, #12]
   138c4:	e1a04008 	mov	r4, r8
   138c8:	e3500000 	cmp	r0, #0
   138cc:	0affffdf 	beq	13850 <CUSBHostController::UpdatePlugAndPlay()+0x38>
   138d0:	eb009309 	bl	384fc <EnterCritical>
   138d4:	eaffffdd 	b	13850 <CUSBHostController::UpdatePlugAndPlay()+0x38>
   138d8:	e3500000 	cmp	r0, #0
   138dc:	0a00000c 	beq	13914 <CUSBHostController::UpdatePlugAndPlay()+0xfc>
   138e0:	eb000f4f 	bl	17624 <CUSBStandardHub::HandlePortStatusChange()>
   138e4:	eafffff2 	b	138b4 <CUSBHostController::UpdatePlugAndPlay()+0x9c>
   138e8:	eb00932e 	bl	385a8 <LeaveCritical>
   138ec:	e3540000 	cmp	r4, #0
   138f0:	1affffe6 	bne	13890 <CUSBHostController::UpdatePlugAndPlay()+0x78>
   138f4:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   138f8:	e3401003 	movt	r1, #3
   138fc:	e30c06e8 	movw	r0, #50920	; 0xc6e8
   13900:	e3400003 	movt	r0, #3
   13904:	e3a020a1 	mov	r2, #161	; 0xa1
   13908:	eb0063ec 	bl	2c8c0 <assertion_failed>
   1390c:	eb0092fa 	bl	384fc <EnterCritical>
   13910:	eaffffcd 	b	1384c <CUSBHostController::UpdatePlugAndPlay()+0x34>
   13914:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13918:	e3401003 	movt	r1, #3
   1391c:	e30c070c 	movw	r0, #50956	; 0xc70c
   13920:	e3400003 	movt	r0, #3
   13924:	e3a020a9 	mov	r2, #169	; 0xa9
   13928:	eb0063e4 	bl	2c8c0 <assertion_failed>
   1392c:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13930:	e3401003 	movt	r1, #3
   13934:	e30c06f4 	movw	r0, #50932	; 0xc6f4
   13938:	e3400003 	movt	r0, #3
   1393c:	e3a020a4 	mov	r2, #164	; 0xa4
   13940:	eb0063de 	bl	2c8c0 <assertion_failed>
   13944:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13948:	e3401003 	movt	r1, #3
   1394c:	e30c06d8 	movw	r0, #50904	; 0xc6d8
   13950:	e3400003 	movt	r0, #3
   13954:	e3a02091 	mov	r2, #145	; 0x91
   13958:	eb0063d8 	bl	2c8c0 <assertion_failed>
   1395c:	e596300c 	ldr	r3, [r6, #12]
   13960:	e3530000 	cmp	r3, #0
   13964:	1a000001 	bne	13970 <CUSBHostController::UpdatePlugAndPlay()+0x158>
   13968:	e1a00004 	mov	r0, r4
   1396c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13970:	eb00930c 	bl	385a8 <LeaveCritical>
   13974:	eafffffb 	b	13968 <CUSBHostController::UpdatePlugAndPlay()+0x150>

00013978 <CUSBHostController::CUSBHostController(bool)>:
   13978:	e92d4070 	push	{r4, r5, r6, lr}
   1397c:	e1a04000 	mov	r4, r0
   13980:	e59f3030 	ldr	r3, [pc, #48]	; 139b8 <CUSBHostController::CUSBHostController(bool)+0x40>
   13984:	e3a06001 	mov	r6, #1
   13988:	e2800008 	add	r0, r0, #8
   1398c:	e5843000 	str	r3, [r4]
   13990:	e1a05001 	mov	r5, r1
   13994:	e5c46004 	strb	r6, [r4, #4]
   13998:	eb007312 	bl	305e8 <CPtrList::CPtrList()>
   1399c:	e3043e80 	movw	r3, #20096	; 0x4e80
   139a0:	e3403004 	movt	r3, #4
   139a4:	e1a00004 	mov	r0, r4
   139a8:	e584600c 	str	r6, [r4, #12]
   139ac:	e5834004 	str	r4, [r3, #4]
   139b0:	e5c35000 	strb	r5, [r3]
   139b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   139b8:	0003c748 	.word	0x0003c748

000139bc <CUSBHostController::~CUSBHostController()>:
   139bc:	e3043e80 	movw	r3, #20096	; 0x4e80
   139c0:	e3403004 	movt	r3, #4
   139c4:	e59f101c 	ldr	r1, [pc, #28]	; 139e8 <CUSBHostController::~CUSBHostController()+0x2c>
   139c8:	e3a02000 	mov	r2, #0
   139cc:	e92d4010 	push	{r4, lr}
   139d0:	e1a04000 	mov	r4, r0
   139d4:	e4801008 	str	r1, [r0], #8
   139d8:	e5832004 	str	r2, [r3, #4]
   139dc:	eb007304 	bl	305f4 <CPtrList::~CPtrList()>
   139e0:	e1a00004 	mov	r0, r4
   139e4:	e8bd8010 	pop	{r4, pc}
   139e8:	0003c748 	.word	0x0003c748

000139ec <CUSBHostController::~CUSBHostController()>:
   139ec:	e3043e80 	movw	r3, #20096	; 0x4e80
   139f0:	e3403004 	movt	r3, #4
   139f4:	e59f1028 	ldr	r1, [pc, #40]	; 13a24 <CUSBHostController::~CUSBHostController()+0x38>
   139f8:	e3a02000 	mov	r2, #0
   139fc:	e92d4010 	push	{r4, lr}
   13a00:	e1a04000 	mov	r4, r0
   13a04:	e4801008 	str	r1, [r0], #8
   13a08:	e5832004 	str	r2, [r3, #4]
   13a0c:	eb0072f8 	bl	305f4 <CPtrList::~CPtrList()>
   13a10:	e1a00004 	mov	r0, r4
   13a14:	e3a01010 	mov	r1, #16
   13a18:	eb008cb7 	bl	36cfc <operator delete(void*, unsigned int)>
   13a1c:	e1a00004 	mov	r0, r4
   13a20:	e8bd8010 	pop	{r4, pc}
   13a24:	0003c748 	.word	0x0003c748

00013a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   13a28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a2c:	e1a06000 	mov	r6, r0
   13a30:	e1a05001 	mov	r5, r1
   13a34:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   13a38:	e3a00008 	mov	r0, #8
   13a3c:	e1a08002 	mov	r8, r2
   13a40:	e1a07003 	mov	r7, r3
   13a44:	e1dd9abc 	ldrh	r9, [sp, #172]	; 0xac
   13a48:	e1ddbab0 	ldrh	fp, [sp, #160]	; 0xa0
   13a4c:	e1ddaab4 	ldrh	sl, [sp, #164]	; 0xa4
   13a50:	eb008c91 	bl	36c9c <operator new(unsigned int)>
   13a54:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   13a58:	e1a03009 	mov	r3, r9
   13a5c:	e5c08000 	strb	r8, [r0]
   13a60:	e1a01005 	mov	r1, r5
   13a64:	e5c07001 	strb	r7, [r0, #1]
   13a68:	e1a04000 	mov	r4, r0
   13a6c:	e1c0b0b2 	strh	fp, [r0, #2]
   13a70:	e58d0000 	str	r0, [sp]
   13a74:	e1c0a0b4 	strh	sl, [r0, #4]
   13a78:	e1c090b6 	strh	r9, [r0, #6]
   13a7c:	e28d0008 	add	r0, sp, #8
   13a80:	eb000a58 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13a84:	e5963000 	ldr	r3, [r6]
   13a88:	e1a00006 	mov	r0, r6
   13a8c:	e3a02000 	mov	r2, #0
   13a90:	e28d1008 	add	r1, sp, #8
   13a94:	e5933010 	ldr	r3, [r3, #16]
   13a98:	e12fff33 	blx	r3
   13a9c:	e3500000 	cmp	r0, #0
   13aa0:	1a00000c 	bne	13ad8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xb0>
   13aa4:	e3550000 	cmp	r5, #0
   13aa8:	0a00000e 	beq	13ae8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   13aac:	e1a00005 	mov	r0, r5
   13ab0:	e3e06000 	mvn	r6, #0
   13ab4:	ebfff1ab 	bl	10168 <CUSBEndpoint::ResetPID()>
   13ab8:	e3a01008 	mov	r1, #8
   13abc:	e1a00004 	mov	r0, r4
   13ac0:	eb008c8d 	bl	36cfc <operator delete(void*, unsigned int)>
   13ac4:	e28d0008 	add	r0, sp, #8
   13ac8:	eb000a6a 	bl	16478 <CUSBRequest::~CUSBRequest()>
   13acc:	e1a00006 	mov	r0, r6
   13ad0:	e28dd07c 	add	sp, sp, #124	; 0x7c
   13ad4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad8:	e28d0008 	add	r0, sp, #8
   13adc:	eb000a78 	bl	164c4 <CUSBRequest::GetResultLength() const>
   13ae0:	e1a06000 	mov	r6, r0
   13ae4:	eafffff3 	b	13ab8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x90>
   13ae8:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13aec:	e3401003 	movt	r1, #3
   13af0:	e30c0720 	movw	r0, #50976	; 0xc720
   13af4:	e3400003 	movt	r0, #3
   13af8:	e3a02074 	mov	r2, #116	; 0x74
   13afc:	eb00636f 	bl	2c8c0 <assertion_failed>

00013b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   13b00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13b04:	e1832402 	orr	r2, r3, r2, lsl #8
   13b08:	e59dc004 	ldr	ip, [sp, #4]
   13b0c:	e1dde1b0 	ldrh	lr, [sp, #16]
   13b10:	e3a03006 	mov	r3, #6
   13b14:	e58d2004 	str	r2, [sp, #4]
   13b18:	e5dd200c 	ldrb	r2, [sp, #12]
   13b1c:	e58dc00c 	str	ip, [sp, #12]
   13b20:	e1ddc0b8 	ldrh	ip, [sp, #8]
   13b24:	e58dc010 	str	ip, [sp, #16]
   13b28:	e58de008 	str	lr, [sp, #8]
   13b2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   13b30:	eaffffbc 	b	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00013b34 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   13b34:	e92d4010 	push	{r4, lr}
   13b38:	e3a04000 	mov	r4, #0
   13b3c:	e3a03005 	mov	r3, #5
   13b40:	e24dd010 	sub	sp, sp, #16
   13b44:	e88d0014 	stm	sp, {r2, r4}
   13b48:	e1a02004 	mov	r2, r4
   13b4c:	e58d400c 	str	r4, [sp, #12]
   13b50:	e58d4008 	str	r4, [sp, #8]
   13b54:	ebffffb3 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13b58:	e1500004 	cmp	r0, r4
   13b5c:	b1a00004 	movlt	r0, r4
   13b60:	ba000003 	blt	13b74 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x40>
   13b64:	eb00880b 	bl	35b98 <CTimer::Get()>
   13b68:	e3a00032 	mov	r0, #50	; 0x32
   13b6c:	eb0087c8 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   13b70:	e3a00001 	mov	r0, #1
   13b74:	e28dd010 	add	sp, sp, #16
   13b78:	e8bd8010 	pop	{r4, pc}

00013b7c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   13b7c:	e92d4010 	push	{r4, lr}
   13b80:	e3a04000 	mov	r4, #0
   13b84:	e3a03009 	mov	r3, #9
   13b88:	e24dd010 	sub	sp, sp, #16
   13b8c:	e88d0014 	stm	sp, {r2, r4}
   13b90:	e1a02004 	mov	r2, r4
   13b94:	e58d400c 	str	r4, [sp, #12]
   13b98:	e58d4008 	str	r4, [sp, #8]
   13b9c:	ebffffa1 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13ba0:	e1500004 	cmp	r0, r4
   13ba4:	b1a00004 	movlt	r0, r4
   13ba8:	ba000003 	blt	13bbc <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x40>
   13bac:	eb0087f9 	bl	35b98 <CTimer::Get()>
   13bb0:	e3a00032 	mov	r0, #50	; 0x32
   13bb4:	eb0087b6 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   13bb8:	e3a00001 	mov	r0, #1
   13bbc:	e28dd010 	add	sp, sp, #16
   13bc0:	e8bd8010 	pop	{r4, pc}

00013bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   13bc4:	e92d4010 	push	{r4, lr}
   13bc8:	e1a04000 	mov	r4, r0
   13bcc:	e3a00000 	mov	r0, #0
   13bd0:	e24dd078 	sub	sp, sp, #120	; 0x78
   13bd4:	e58d0000 	str	r0, [sp]
   13bd8:	e28d0008 	add	r0, sp, #8
   13bdc:	eb000a01 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13be0:	e5943000 	ldr	r3, [r4]
   13be4:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
   13be8:	e28d1008 	add	r1, sp, #8
   13bec:	e1a00004 	mov	r0, r4
   13bf0:	e5933010 	ldr	r3, [r3, #16]
   13bf4:	e12fff33 	blx	r3
   13bf8:	e3500000 	cmp	r0, #0
   13bfc:	0a000007 	beq	13c20 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   13c00:	e28d0008 	add	r0, sp, #8
   13c04:	eb000a2e 	bl	164c4 <CUSBRequest::GetResultLength() const>
   13c08:	e1a04000 	mov	r4, r0
   13c0c:	e28d0008 	add	r0, sp, #8
   13c10:	eb000a18 	bl	16478 <CUSBRequest::~CUSBRequest()>
   13c14:	e1a00004 	mov	r0, r4
   13c18:	e28dd078 	add	sp, sp, #120	; 0x78
   13c1c:	e8bd8010 	pop	{r4, pc}
   13c20:	e3e04000 	mvn	r4, #0
   13c24:	eafffff8 	b	13c0c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

00013c28 <CUSBHostController::IsPlugAndPlay()>:
   13c28:	e3043e80 	movw	r3, #20096	; 0x4e80
   13c2c:	e3403004 	movt	r3, #4
   13c30:	e5d30000 	ldrb	r0, [r3]
   13c34:	e12fff1e 	bx	lr

00013c38 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>:
   13c38:	e3043e80 	movw	r3, #20096	; 0x4e80
   13c3c:	e3403004 	movt	r3, #4
   13c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13c44:	e5d33000 	ldrb	r3, [r3]
   13c48:	e3530000 	cmp	r3, #0
   13c4c:	0a000021 	beq	13cd8 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xa0>
   13c50:	e1a04001 	mov	r4, r1
   13c54:	e3510000 	cmp	r1, #0
   13c58:	0a000024 	beq	13cf0 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xb8>
   13c5c:	e1a06000 	mov	r6, r0
   13c60:	e3a00008 	mov	r0, #8
   13c64:	eb008c0c 	bl	36c9c <operator new(unsigned int)>
   13c68:	e1a07000 	mov	r7, r0
   13c6c:	e3a03001 	mov	r3, #1
   13c70:	e596000c 	ldr	r0, [r6, #12]
   13c74:	e5c73000 	strb	r3, [r7]
   13c78:	e3500000 	cmp	r0, #0
   13c7c:	e5874004 	str	r4, [r7, #4]
   13c80:	1a000012 	bne	13cd0 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x98>
   13c84:	e2864008 	add	r4, r6, #8
   13c88:	e1a00004 	mov	r0, r4
   13c8c:	eb007262 	bl	3061c <CPtrList::GetFirst()>
   13c90:	e2501000 	subs	r1, r0, #0
   13c94:	0a00001b 	beq	13d08 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xd0>
   13c98:	e1a00004 	mov	r0, r4
   13c9c:	e1a05001 	mov	r5, r1
   13ca0:	eb00725f 	bl	30624 <CPtrList::GetNext(TPtrListElement*)>
   13ca4:	e2501000 	subs	r1, r0, #0
   13ca8:	1afffffa 	bne	13c98 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x60>
   13cac:	e1a02007 	mov	r2, r7
   13cb0:	e1a01005 	mov	r1, r5
   13cb4:	e1a00004 	mov	r0, r4
   13cb8:	eb0072c1 	bl	307c4 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   13cbc:	e596300c 	ldr	r3, [r6, #12]
   13cc0:	e3530000 	cmp	r3, #0
   13cc4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   13cc8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13ccc:	ea009235 	b	385a8 <LeaveCritical>
   13cd0:	eb009209 	bl	384fc <EnterCritical>
   13cd4:	eaffffea 	b	13c84 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x4c>
   13cd8:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13cdc:	e3401003 	movt	r1, #3
   13ce0:	e30c06d8 	movw	r0, #50904	; 0xc6d8
   13ce4:	e3400003 	movt	r0, #3
   13ce8:	e3a020bb 	mov	r2, #187	; 0xbb
   13cec:	eb0062f3 	bl	2c8c0 <assertion_failed>
   13cf0:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13cf4:	e3401003 	movt	r1, #3
   13cf8:	e30c06fc 	movw	r0, #50940	; 0xc6fc
   13cfc:	e3400003 	movt	r0, #3
   13d00:	e3a020bc 	mov	r2, #188	; 0xbc
   13d04:	eb0062ed 	bl	2c8c0 <assertion_failed>
   13d08:	e1a05001 	mov	r5, r1
   13d0c:	eaffffe6 	b	13cac <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x74>

00013d10 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>:
   13d10:	e3043e80 	movw	r3, #20096	; 0x4e80
   13d14:	e3403004 	movt	r3, #4
   13d18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13d1c:	e5d33000 	ldrb	r3, [r3]
   13d20:	e3530000 	cmp	r3, #0
   13d24:	0a000021 	beq	13db0 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xa0>
   13d28:	e1a04001 	mov	r4, r1
   13d2c:	e3510000 	cmp	r1, #0
   13d30:	0a000024 	beq	13dc8 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xb8>
   13d34:	e1a06000 	mov	r6, r0
   13d38:	e3a00008 	mov	r0, #8
   13d3c:	eb008bd6 	bl	36c9c <operator new(unsigned int)>
   13d40:	e1a07000 	mov	r7, r0
   13d44:	e3a03000 	mov	r3, #0
   13d48:	e596000c 	ldr	r0, [r6, #12]
   13d4c:	e5c73000 	strb	r3, [r7]
   13d50:	e1500003 	cmp	r0, r3
   13d54:	e5874004 	str	r4, [r7, #4]
   13d58:	1a000012 	bne	13da8 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x98>
   13d5c:	e2864008 	add	r4, r6, #8
   13d60:	e1a00004 	mov	r0, r4
   13d64:	eb00722c 	bl	3061c <CPtrList::GetFirst()>
   13d68:	e2501000 	subs	r1, r0, #0
   13d6c:	0a00001b 	beq	13de0 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xd0>
   13d70:	e1a00004 	mov	r0, r4
   13d74:	e1a05001 	mov	r5, r1
   13d78:	eb007229 	bl	30624 <CPtrList::GetNext(TPtrListElement*)>
   13d7c:	e2501000 	subs	r1, r0, #0
   13d80:	1afffffa 	bne	13d70 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x60>
   13d84:	e1a02007 	mov	r2, r7
   13d88:	e1a01005 	mov	r1, r5
   13d8c:	e1a00004 	mov	r0, r4
   13d90:	eb00728b 	bl	307c4 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   13d94:	e596300c 	ldr	r3, [r6, #12]
   13d98:	e3530000 	cmp	r3, #0
   13d9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   13da0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13da4:	ea0091ff 	b	385a8 <LeaveCritical>
   13da8:	eb0091d3 	bl	384fc <EnterCritical>
   13dac:	eaffffea 	b	13d5c <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x4c>
   13db0:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13db4:	e3401003 	movt	r1, #3
   13db8:	e30c06d8 	movw	r0, #50904	; 0xc6d8
   13dbc:	e3400003 	movt	r0, #3
   13dc0:	e3a020d4 	mov	r2, #212	; 0xd4
   13dc4:	eb0062bd 	bl	2c8c0 <assertion_failed>
   13dc8:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13dcc:	e3401003 	movt	r1, #3
   13dd0:	e30c0714 	movw	r0, #50964	; 0xc714
   13dd4:	e3400003 	movt	r0, #3
   13dd8:	e3a020d5 	mov	r2, #213	; 0xd5
   13ddc:	eb0062b7 	bl	2c8c0 <assertion_failed>
   13de0:	e1a05001 	mov	r5, r1
   13de4:	eaffffe6 	b	13d84 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x74>

00013de8 <CUSBHostController::Get()>:
   13de8:	e3043e80 	movw	r3, #20096	; 0x4e80
   13dec:	e3403004 	movt	r3, #4
   13df0:	e5930004 	ldr	r0, [r3, #4]
   13df4:	e3500000 	cmp	r0, #0
   13df8:	112fff1e 	bxne	lr
   13dfc:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   13e00:	e3401003 	movt	r1, #3
   13e04:	e30c0730 	movw	r0, #50992	; 0xc730
   13e08:	e3400003 	movt	r0, #3
   13e0c:	e3a020ed 	mov	r2, #237	; 0xed
   13e10:	e92d4010 	push	{r4, lr}
   13e14:	eb0062a9 	bl	2c8c0 <assertion_failed>

00013e18 <proxy_handler(unsigned char, unsigned char const*, void*)>:
   13e18:	e12fff12 	bx	r2

00013e1c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   13e1c:	e5903550 	ldr	r3, [r0, #1360]	; 0x550
   13e20:	e92d4070 	push	{r4, r5, r6, lr}
   13e24:	e3a06000 	mov	r6, #0
   13e28:	e59f5050 	ldr	r5, [pc, #80]	; 13e80 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x64>
   13e2c:	e1a04000 	mov	r4, r0
   13e30:	e1530006 	cmp	r3, r6
   13e34:	e5805000 	str	r5, [r0]
   13e38:	e580653c 	str	r6, [r0, #1340]	; 0x53c
   13e3c:	1a000005 	bne	13e58 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x3c>
   13e40:	e2840024 	add	r0, r4, #36	; 0x24
   13e44:	eb002ab5 	bl	1e920 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   13e48:	e1a00004 	mov	r0, r4
   13e4c:	ebfffcae 	bl	1310c <CUSBHIDDevice::~CUSBHIDDevice()>
   13e50:	e1a00004 	mov	r0, r4
   13e54:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e58:	eb00662f 	bl	2d71c <CDeviceNameService::Get()>
   13e5c:	e2851030 	add	r1, r5, #48	; 0x30
   13e60:	e5942550 	ldr	r2, [r4, #1360]	; 0x550
   13e64:	e1a03006 	mov	r3, r6
   13e68:	eb006651 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   13e6c:	e5941550 	ldr	r1, [r4, #1360]	; 0x550
   13e70:	e3040e88 	movw	r0, #20104	; 0x4e88
   13e74:	e3400004 	movt	r0, #4
   13e78:	eb008d09 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   13e7c:	eaffffef 	b	13e40 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x24>
   13e80:	0003c7cc 	.word	0x0003c7cc

00013e84 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   13e84:	e92d4010 	push	{r4, lr}
   13e88:	e1a04000 	mov	r4, r0
   13e8c:	ebffffe2 	bl	13e1c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   13e90:	e1a00004 	mov	r0, r4
   13e94:	e3001554 	movw	r1, #1364	; 0x554
   13e98:	eb008b97 	bl	36cfc <operator delete(void*, unsigned int)>
   13e9c:	e1a00004 	mov	r0, r4
   13ea0:	e8bd8010 	pop	{r4, pc}

00013ea4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   13ea4:	e2522008 	subs	r2, r2, #8
   13ea8:	13a02001 	movne	r2, #1
   13eac:	e3510000 	cmp	r1, #0
   13eb0:	03822001 	orreq	r2, r2, #1
   13eb4:	e3520000 	cmp	r2, #0
   13eb8:	112fff1e 	bxne	lr
   13ebc:	e590353c 	ldr	r3, [r0, #1340]	; 0x53c
   13ec0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ec4:	e1a06000 	mov	r6, r0
   13ec8:	e3530000 	cmp	r3, #0
   13ecc:	e1a07001 	mov	r7, r1
   13ed0:	02818002 	addeq	r8, r1, #2
   13ed4:	0a000007 	beq	13ef8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
   13ed8:	e1a08001 	mov	r8, r1
   13edc:	e5962540 	ldr	r2, [r6, #1344]	; 0x540
   13ee0:	e4d80002 	ldrb	r0, [r8], #2
   13ee4:	e1a01008 	mov	r1, r8
   13ee8:	e12fff33 	blx	r3
   13eec:	e5d63544 	ldrb	r3, [r6, #1348]	; 0x544
   13ef0:	e3530000 	cmp	r3, #0
   13ef4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ef8:	e3a04080 	mov	r4, #128	; 0x80
   13efc:	e3a05000 	mov	r5, #0
   13f00:	e3a0a001 	mov	sl, #1
   13f04:	e2869024 	add	r9, r6, #36	; 0x24
   13f08:	ea000006 	b	13f28 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x84>
   13f0c:	e1120003 	tst	r2, r3
   13f10:	1a00000f 	bne	13f54 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xb0>
   13f14:	e2844001 	add	r4, r4, #1
   13f18:	e2855001 	add	r5, r5, #1
   13f1c:	e3550008 	cmp	r5, #8
   13f20:	e6ef4074 	uxtb	r4, r4
   13f24:	0a00000e 	beq	13f64 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
   13f28:	e5d72000 	ldrb	r2, [r7]
   13f2c:	e1a0351a 	lsl	r3, sl, r5
   13f30:	e1120003 	tst	r2, r3
   13f34:	e5d62545 	ldrb	r2, [r6, #1349]	; 0x545
   13f38:	0afffff3 	beq	13f0c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
   13f3c:	e1120003 	tst	r2, r3
   13f40:	1afffff3 	bne	13f14 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x70>
   13f44:	e1a01004 	mov	r1, r4
   13f48:	e1a00009 	mov	r0, r9
   13f4c:	eb002afd 	bl	1eb48 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   13f50:	eaffffef 	b	13f14 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x70>
   13f54:	e1a01004 	mov	r1, r4
   13f58:	e1a00009 	mov	r0, r9
   13f5c:	eb002b09 	bl	1eb88 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   13f60:	eaffffeb 	b	13f14 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x70>
   13f64:	e2864d15 	add	r4, r6, #1344	; 0x540
   13f68:	e2875008 	add	r5, r7, #8
   13f6c:	e1a09004 	mov	r9, r4
   13f70:	e2844006 	add	r4, r4, #6
   13f74:	e289900c 	add	r9, r9, #12
   13f78:	ea000001 	b	13f84 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   13f7c:	e1590004 	cmp	r9, r4
   13f80:	0a000005 	beq	13f9c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf8>
   13f84:	e5f41001 	ldrb	r1, [r4, #1]!
   13f88:	e3510000 	cmp	r1, #0
   13f8c:	11a03008 	movne	r3, r8
   13f90:	1a000018 	bne	13ff8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x154>
   13f94:	e1590004 	cmp	r9, r4
   13f98:	1afffff9 	bne	13f84 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   13f9c:	e2865d15 	add	r5, r6, #1344	; 0x540
   13fa0:	e2874001 	add	r4, r7, #1
   13fa4:	e2878007 	add	r8, r7, #7
   13fa8:	e285500d 	add	r5, r5, #13
   13fac:	e3009547 	movw	r9, #1351	; 0x547
   13fb0:	ea000001 	b	13fbc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
   13fb4:	e1540008 	cmp	r4, r8
   13fb8:	0a000005 	beq	13fd4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x130>
   13fbc:	e5f41001 	ldrb	r1, [r4, #1]!
   13fc0:	e3510000 	cmp	r1, #0
   13fc4:	10863009 	addne	r3, r6, r9
   13fc8:	1a000012 	bne	14018 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x174>
   13fcc:	e1540008 	cmp	r4, r8
   13fd0:	1afffff9 	bne	13fbc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
   13fd4:	e2860d15 	add	r0, r6, #1344	; 0x540
   13fd8:	e1a01007 	mov	r1, r7
   13fdc:	e3a02008 	mov	r2, #8
   13fe0:	e2800005 	add	r0, r0, #5
   13fe4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fe8:	ea008922 	b	36478 <memcpy>
   13fec:	e4d32001 	ldrb	r2, [r3], #1
   13ff0:	e1520001 	cmp	r2, r1
   13ff4:	0affffe0 	beq	13f7c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>
   13ff8:	e1530005 	cmp	r3, r5
   13ffc:	1afffffa 	bne	13fec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x148>
   14000:	e2860024 	add	r0, r6, #36	; 0x24
   14004:	eb002adf 	bl	1eb88 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   14008:	eaffffdb 	b	13f7c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>
   1400c:	e4d32001 	ldrb	r2, [r3], #1
   14010:	e1520001 	cmp	r2, r1
   14014:	0affffe6 	beq	13fb4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   14018:	e1550003 	cmp	r5, r3
   1401c:	1afffffa 	bne	1400c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x168>
   14020:	e2860024 	add	r0, r6, #36	; 0x24
   14024:	eb002ac7 	bl	1eb48 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   14028:	eaffffe1 	b	13fb4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>

0001402c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   1402c:	e92d4010 	push	{r4, lr}
   14030:	e3a02008 	mov	r2, #8
   14034:	e1a04000 	mov	r4, r0
   14038:	ebfffc1d 	bl	130b4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   1403c:	e1a00004 	mov	r0, r4
   14040:	e59f3034 	ldr	r3, [pc, #52]	; 1407c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x50>
   14044:	e4803024 	str	r3, [r0], #36	; 0x24
   14048:	eb002a28 	bl	1e8f0 <CKeyboardBehaviour::CKeyboardBehaviour()>
   1404c:	e2840d15 	add	r0, r4, #1344	; 0x540
   14050:	e3a01000 	mov	r1, #0
   14054:	e3a02008 	mov	r2, #8
   14058:	e584153c 	str	r1, [r4, #1340]	; 0x53c
   1405c:	e2800005 	add	r0, r0, #5
   14060:	e5841540 	str	r1, [r4, #1344]	; 0x540
   14064:	e5c41544 	strb	r1, [r4, #1348]	; 0x544
   14068:	e5c4154d 	strb	r1, [r4, #1357]	; 0x54d
   1406c:	e5841550 	str	r1, [r4, #1360]	; 0x550
   14070:	eb0088e9 	bl	3641c <memset>
   14074:	e1a00004 	mov	r0, r4
   14078:	e8bd8010 	pop	{r4, pc}
   1407c:	0003c7cc 	.word	0x0003c7cc

00014080 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   14080:	e2800024 	add	r0, r0, #36	; 0x24
   14084:	ea002a2f 	b	1e948 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00014088 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   14088:	e2800024 	add	r0, r0, #36	; 0x24
   1408c:	ea002a38 	b	1e974 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00014090 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   14090:	e2800024 	add	r0, r0, #36	; 0x24
   14094:	ea002a41 	b	1e9a0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00014098 <CUSBKeyboardDevice::GetLEDStatus() const>:
   14098:	e92d4010 	push	{r4, lr}
   1409c:	e2800024 	add	r0, r0, #36	; 0x24
   140a0:	eb002a49 	bl	1e9cc <CKeyboardBehaviour::GetLEDStatus() const>
   140a4:	e1a03000 	mov	r3, r0
   140a8:	e2000001 	and	r0, r0, #1
   140ac:	e3130002 	tst	r3, #2
   140b0:	13800002 	orrne	r0, r0, #2
   140b4:	e3130004 	tst	r3, #4
   140b8:	13800004 	orrne	r0, r0, #4
   140bc:	e8bd8010 	pop	{r4, pc}

000140c0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)>:
   140c0:	e3510000 	cmp	r1, #0
   140c4:	0a000003 	beq	140d8 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)+0x18>
   140c8:	e580153c 	str	r1, [r0, #1340]	; 0x53c
   140cc:	e5803540 	str	r3, [r0, #1344]	; 0x540
   140d0:	e5c02544 	strb	r2, [r0, #1348]	; 0x544
   140d4:	e12fff1e 	bx	lr
   140d8:	e30c1764 	movw	r1, #51044	; 0xc764
   140dc:	e3401003 	movt	r1, #3
   140e0:	e30c0774 	movw	r0, #51060	; 0xc774
   140e4:	e3400003 	movt	r0, #3
   140e8:	e3a02087 	mov	r2, #135	; 0x87
   140ec:	e92d4010 	push	{r4, lr}
   140f0:	eb0061f2 	bl	2c8c0 <assertion_failed>

000140f4 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)>:
   140f4:	e3033e18 	movw	r3, #15896	; 0x3e18
   140f8:	e3403001 	movt	r3, #1
   140fc:	e5801540 	str	r1, [r0, #1344]	; 0x540
   14100:	e580353c 	str	r3, [r0, #1340]	; 0x53c
   14104:	e5c02544 	strb	r2, [r0, #1348]	; 0x544
   14108:	e12fff1e 	bx	lr

0001410c <CUSBKeyboardDevice::UnregisterKeyStatusHandlerRaw()>:
   1410c:	e3a03000 	mov	r3, #0
   14110:	e580353c 	str	r3, [r0, #1340]	; 0x53c
   14114:	e5803540 	str	r3, [r0, #1344]	; 0x540
   14118:	e12fff1e 	bx	lr

0001411c <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   1411c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   14120:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14124:	e1a05000 	mov	r5, r0
   14128:	e24dd08c 	sub	sp, sp, #140	; 0x8c
   1412c:	e28d404f 	add	r4, sp, #79	; 0x4f
   14130:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   14134:	f4440a2f 	vst1.8	{d16-d17}, [r4 :128]
   14138:	edc40b04 	vstr	d16, [r4, #16]
   1413c:	e5c41000 	strb	r1, [r4]
   14140:	edc40b06 	vstr	d16, [r4, #24]
   14144:	edc40b08 	vstr	d16, [r4, #32]
   14148:	edc40b0a 	vstr	d16, [r4, #40]	; 0x28
   1414c:	edc40b0c 	vstr	d16, [r4, #48]	; 0x30
   14150:	edc40b0e 	vstr	d16, [r4, #56]	; 0x38
   14154:	ebfff135 	bl	10630 <CUSBFunction::GetHost() const>
   14158:	e1a06000 	mov	r6, r0
   1415c:	e1a00005 	mov	r0, r5
   14160:	ebfff127 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   14164:	e1a07000 	mov	r7, r0
   14168:	e1a00005 	mov	r0, r5
   1416c:	ebfff18e 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   14170:	e3a02c02 	mov	r2, #512	; 0x200
   14174:	e1a0c000 	mov	ip, r0
   14178:	e3a03009 	mov	r3, #9
   1417c:	e88d1004 	stm	sp, {r2, ip}
   14180:	e1a01007 	mov	r1, r7
   14184:	e3a0c001 	mov	ip, #1
   14188:	e1a00006 	mov	r0, r6
   1418c:	e3a02021 	mov	r2, #33	; 0x21
   14190:	e58d4008 	str	r4, [sp, #8]
   14194:	e58dc00c 	str	ip, [sp, #12]
   14198:	ebfffe22 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1419c:	e1e00000 	mvn	r0, r0
   141a0:	e1a00fa0 	lsr	r0, r0, #31
   141a4:	e28dd08c 	add	sp, sp, #140	; 0x8c
   141a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000141ac <CUSBKeyboardDevice::Configure()>:
   141ac:	e92d4030 	push	{r4, r5, lr}
   141b0:	e3a01000 	mov	r1, #0
   141b4:	e1a04000 	mov	r4, r0
   141b8:	e24dd00c 	sub	sp, sp, #12
   141bc:	ebfffbfd 	bl	131b8 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   141c0:	e2505000 	subs	r5, r0, #0
   141c4:	0a000013 	beq	14218 <CUSBKeyboardDevice::Configure()+0x6c>
   141c8:	e5d4154d 	ldrb	r1, [r4, #1357]	; 0x54d
   141cc:	e1a00004 	mov	r0, r4
   141d0:	ebffffd1 	bl	1411c <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   141d4:	e59f2060 	ldr	r2, [pc, #96]	; 1423c <CUSBKeyboardDevice::Configure()+0x90>
   141d8:	e3a01001 	mov	r1, #1
   141dc:	e3040e88 	movw	r0, #20104	; 0x4e88
   141e0:	e3400004 	movt	r0, #4
   141e4:	eb008bfc 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   141e8:	e5840550 	str	r0, [r4, #1360]	; 0x550
   141ec:	eb00654a 	bl	2d71c <CDeviceNameService::Get()>
   141f0:	e5942550 	ldr	r2, [r4, #1360]	; 0x550
   141f4:	e59f1044 	ldr	r1, [pc, #68]	; 14240 <CUSBKeyboardDevice::Configure()+0x94>
   141f8:	e3a03000 	mov	r3, #0
   141fc:	e58d3000 	str	r3, [sp]
   14200:	e1a03004 	mov	r3, r4
   14204:	eb006550 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   14208:	e1a00004 	mov	r0, r4
   1420c:	e28dd00c 	add	sp, sp, #12
   14210:	e8bd4030 	pop	{r4, r5, lr}
   14214:	eafffd03 	b	13628 <CUSBHIDDevice::StartRequest()>
   14218:	eb006c25 	bl	2f2b4 <CLogger::Get()>
   1421c:	e59f1018 	ldr	r1, [pc, #24]	; 1423c <CUSBKeyboardDevice::Configure()+0x90>
   14220:	e3a02001 	mov	r2, #1
   14224:	e30c3790 	movw	r3, #51088	; 0xc790
   14228:	e3403003 	movt	r3, #3
   1422c:	eb006dee 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14230:	e1a00005 	mov	r0, r5
   14234:	e28dd00c 	add	sp, sp, #12
   14238:	e8bd8030 	pop	{r4, r5, pc}
   1423c:	0003c804 	.word	0x0003c804
   14240:	0003c7fc 	.word	0x0003c7fc

00014244 <CUSBKeyboardDevice::UpdateLEDs()>:
   14244:	e590353c 	ldr	r3, [r0, #1340]	; 0x53c
   14248:	e92d4010 	push	{r4, lr}
   1424c:	e1a04000 	mov	r4, r0
   14250:	e3530000 	cmp	r3, #0
   14254:	0a000002 	beq	14264 <CUSBKeyboardDevice::UpdateLEDs()+0x20>
   14258:	e5d03544 	ldrb	r3, [r0, #1348]	; 0x544
   1425c:	e3530000 	cmp	r3, #0
   14260:	08bd8010 	popeq	{r4, pc}
   14264:	e2840024 	add	r0, r4, #36	; 0x24
   14268:	eb0029d7 	bl	1e9cc <CKeyboardBehaviour::GetLEDStatus() const>
   1426c:	e2001001 	and	r1, r0, #1
   14270:	e3100002 	tst	r0, #2
   14274:	e5d4354d 	ldrb	r3, [r4, #1357]	; 0x54d
   14278:	13811002 	orrne	r1, r1, #2
   1427c:	e3100004 	tst	r0, #4
   14280:	13811004 	orrne	r1, r1, #4
   14284:	e1530001 	cmp	r3, r1
   14288:	08bd8010 	popeq	{r4, pc}
   1428c:	e1a00004 	mov	r0, r4
   14290:	e5c4154d 	strb	r1, [r4, #1357]	; 0x54d
   14294:	ebffffa0 	bl	1411c <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   14298:	e3500000 	cmp	r0, #0
   1429c:	18bd8010 	popne	{r4, pc}
   142a0:	eb006c03 	bl	2f2b4 <CLogger::Get()>
   142a4:	e30c37ac 	movw	r3, #51116	; 0xc7ac
   142a8:	e3403003 	movt	r3, #3
   142ac:	e59f1008 	ldr	r1, [pc, #8]	; 142bc <CUSBKeyboardDevice::UpdateLEDs()+0x78>
   142b0:	e8bd4010 	pop	{r4, lr}
   142b4:	e3a02001 	mov	r2, #1
   142b8:	ea006dcb 	b	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142bc:	0003c804 	.word	0x0003c804

000142c0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   142c0:	e0802002 	add	r2, r0, r2
   142c4:	ea000002 	b	142d4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   142c8:	e4d03001 	ldrb	r3, [r0], #1
   142cc:	e1530001 	cmp	r3, r1
   142d0:	0a000003 	beq	142e4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   142d4:	e1500002 	cmp	r0, r2
   142d8:	1afffffa 	bne	142c8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   142dc:	e3a00000 	mov	r0, #0
   142e0:	e12fff1e 	bx	lr
   142e4:	e3a00001 	mov	r0, #1
   142e8:	e12fff1e 	bx	lr

000142ec <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE>:
   142ec:	e92d4010 	push	{r4, lr}
   142f0:	e3044e88 	movw	r4, #20104	; 0x4e88
   142f4:	e3404004 	movt	r4, #4
   142f8:	e3a0203f 	mov	r2, #63	; 0x3f
   142fc:	e3a01001 	mov	r1, #1
   14300:	e1a00004 	mov	r0, r4
   14304:	eb008b9f 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   14308:	e1a00004 	mov	r0, r4
   1430c:	e3042f78 	movw	r2, #20344	; 0x4f78
   14310:	e3402004 	movt	r2, #4
   14314:	e30711d8 	movw	r1, #29144	; 0x71d8
   14318:	e3401003 	movt	r1, #3
   1431c:	e8bd4010 	pop	{r4, lr}
   14320:	ea008263 	b	34cb4 <__aeabi_atexit>

00014324 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   14324:	e1a0c000 	mov	ip, r0
   14328:	e1a01003 	mov	r1, r3
   1432c:	e1a00002 	mov	r0, r2
   14330:	e1cc22f8 	strd	r2, [ip, #40]	; 0x28
   14334:	e12fff1e 	bx	lr

00014338 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   14338:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1433c:	e92d4070 	push	{r4, r5, r6, lr}
   14340:	e1a04000 	mov	r4, r0
   14344:	e59f50c0 	ldr	r5, [pc, #192]	; 1440c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xd4>
   14348:	e3530000 	cmp	r3, #0
   1434c:	e5805000 	str	r5, [r0]
   14350:	1a000021 	bne	143dc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   14354:	e5945030 	ldr	r5, [r4, #48]	; 0x30
   14358:	e3550000 	cmp	r5, #0
   1435c:	0a000004 	beq	14374 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   14360:	e1a00005 	mov	r0, r5
   14364:	eb002e2f 	bl	1fc28 <CPartitionManager::~CPartitionManager()>
   14368:	e3a01024 	mov	r1, #36	; 0x24
   1436c:	e1a00005 	mov	r0, r5
   14370:	eb008a61 	bl	36cfc <operator delete(void*, unsigned int)>
   14374:	e5945018 	ldr	r5, [r4, #24]
   14378:	e3a03000 	mov	r3, #0
   1437c:	e5843030 	str	r3, [r4, #48]	; 0x30
   14380:	e1550003 	cmp	r5, r3
   14384:	0a000004 	beq	1439c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   14388:	e1a00005 	mov	r0, r5
   1438c:	ebffef1b 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   14390:	e3a01014 	mov	r1, #20
   14394:	e1a00005 	mov	r0, r5
   14398:	eb008a57 	bl	36cfc <operator delete(void*, unsigned int)>
   1439c:	e5945014 	ldr	r5, [r4, #20]
   143a0:	e3a03000 	mov	r3, #0
   143a4:	e5843018 	str	r3, [r4, #24]
   143a8:	e1550003 	cmp	r5, r3
   143ac:	0a000004 	beq	143c4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   143b0:	e1a00005 	mov	r0, r5
   143b4:	ebffef11 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   143b8:	e3a01014 	mov	r1, #20
   143bc:	e1a00005 	mov	r0, r5
   143c0:	eb008a4d 	bl	36cfc <operator delete(void*, unsigned int)>
   143c4:	e3a03000 	mov	r3, #0
   143c8:	e1a00004 	mov	r0, r4
   143cc:	e5843014 	str	r3, [r4, #20]
   143d0:	ebffef74 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   143d4:	e1a00004 	mov	r0, r4
   143d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   143dc:	eb0064ce 	bl	2d71c <CDeviceNameService::Get()>
   143e0:	e3a03001 	mov	r3, #1
   143e4:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   143e8:	e285102c 	add	r1, r5, #44	; 0x2c
   143ec:	eb0064f0 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   143f0:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   143f4:	e3040e98 	movw	r0, #20120	; 0x4e98
   143f8:	e3400004 	movt	r0, #4
   143fc:	eb008ba8 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   14400:	e3a03000 	mov	r3, #0
   14404:	e5843034 	str	r3, [r4, #52]	; 0x34
   14408:	eaffffd1 	b	14354 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   1440c:	0003c814 	.word	0x0003c814

00014410 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   14410:	e92d4010 	push	{r4, lr}
   14414:	e1a04000 	mov	r4, r0
   14418:	ebffffc6 	bl	14338 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   1441c:	e1a00004 	mov	r0, r4
   14420:	e3a01038 	mov	r1, #56	; 0x38
   14424:	eb008a34 	bl	36cfc <operator delete(void*, unsigned int)>
   14428:	e1a00004 	mov	r0, r4
   1442c:	e8bd8010 	pop	{r4, pc}

00014430 <CUSBBulkOnlyMassStorageDevice::GetSize() const>:
   14430:	e5901020 	ldr	r1, [r0, #32]
   14434:	e92d4010 	push	{r4, lr}
   14438:	e3510000 	cmp	r1, #0
   1443c:	0a000004 	beq	14454 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x24>
   14440:	e3710001 	cmn	r1, #1
   14444:	0a000006 	beq	14464 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x34>
   14448:	e1a00481 	lsl	r0, r1, #9
   1444c:	e1a01ba1 	lsr	r1, r1, #23
   14450:	e8bd8010 	pop	{r4, pc}
   14454:	e59f1018 	ldr	r1, [pc, #24]	; 14474 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x44>
   14458:	e3a02f79 	mov	r2, #484	; 0x1e4
   1445c:	e2810014 	add	r0, r1, #20
   14460:	eb006116 	bl	2c8c0 <assertion_failed>
   14464:	e59f1008 	ldr	r1, [pc, #8]	; 14474 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x44>
   14468:	e30021e5 	movw	r2, #485	; 0x1e5
   1446c:	e2810028 	add	r0, r1, #40	; 0x28
   14470:	eb006112 	bl	2c8c0 <assertion_failed>
   14474:	0003c848 	.word	0x0003c848

00014478 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   14478:	e92d4010 	push	{r4, lr}
   1447c:	e1a04000 	mov	r4, r0
   14480:	ebffeff1 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14484:	e1a03004 	mov	r3, r4
   14488:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1448c:	f2c01010 	vmov.i32	d17, #0	; 0x00000000
   14490:	e59f0024 	ldr	r0, [pc, #36]	; 144bc <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   14494:	e284101c 	add	r1, r4, #28
   14498:	e3a02000 	mov	r2, #0
   1449c:	e4830014 	str	r0, [r3], #20
   144a0:	e1a00004 	mov	r0, r4
   144a4:	f443078f 	vst1.32	{d16}, [r3]
   144a8:	f441078f 	vst1.32	{d16}, [r1]
   144ac:	e5842030 	str	r2, [r4, #48]	; 0x30
   144b0:	e5842034 	str	r2, [r4, #52]	; 0x34
   144b4:	edc41b0a 	vstr	d17, [r4, #40]	; 0x28
   144b8:	e8bd8010 	pop	{r4, pc}
   144bc:	0003c814 	.word	0x0003c814

000144c0 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   144c0:	e5900020 	ldr	r0, [r0, #32]
   144c4:	e12fff1e 	bx	lr

000144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   144c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144cc:	e2518000 	subs	r8, r1, #0
   144d0:	e24dd0cc 	sub	sp, sp, #204	; 0xcc
   144d4:	e59d90f0 	ldr	r9, [sp, #240]	; 0xf0
   144d8:	e5dda0f4 	ldrb	sl, [sp, #244]	; 0xf4
   144dc:	0a0000ac 	beq	14794 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2cc>
   144e0:	e1a07003 	mov	r7, r3
   144e4:	e2423006 	sub	r3, r2, #6
   144e8:	e1a06002 	mov	r6, r2
   144ec:	e353000a 	cmp	r3, #10
   144f0:	8a0000b0 	bhi	147b8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2f0>
   144f4:	e2573000 	subs	r3, r7, #0
   144f8:	13a03001 	movne	r3, #1
   144fc:	e3590000 	cmp	r9, #0
   14500:	03833001 	orreq	r3, r3, #1
   14504:	e3530000 	cmp	r3, #0
   14508:	0a0000ae 	beq	147c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x300>
   1450c:	e28d404f 	add	r4, sp, #79	; 0x4f
   14510:	e1a05000 	mov	r5, r0
   14514:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   14518:	e3a0201f 	mov	r2, #31
   1451c:	e284b040 	add	fp, r4, #64	; 0x40
   14520:	e3a01000 	mov	r1, #0
   14524:	e1a0000b 	mov	r0, fp
   14528:	eb0087bb 	bl	3641c <memset>
   1452c:	e595301c 	ldr	r3, [r5, #28]
   14530:	e1a02006 	mov	r2, r6
   14534:	e1a01008 	mov	r1, r8
   14538:	e2833001 	add	r3, r3, #1
   1453c:	e585301c 	str	r3, [r5, #28]
   14540:	e5843044 	str	r3, [r4, #68]	; 0x44
   14544:	e284004f 	add	r0, r4, #79	; 0x4f
   14548:	e5d4304d 	ldrb	r3, [r4, #77]	; 0x4d
   1454c:	e5849048 	str	r9, [r4, #72]	; 0x48
   14550:	e7c3301f 	bfc	r3, #0, #4
   14554:	e5c4304d 	strb	r3, [r4, #77]	; 0x4d
   14558:	e5d4304e 	ldrb	r3, [r4, #78]	; 0x4e
   1455c:	e7c43016 	bfi	r3, r6, #0, #5
   14560:	e5c4304e 	strb	r3, [r4, #78]	; 0x4e
   14564:	e1a0338a 	lsl	r3, sl, #7
   14568:	e5c4304c 	strb	r3, [r4, #76]	; 0x4c
   1456c:	e3053355 	movw	r3, #21333	; 0x5355
   14570:	e3443342 	movt	r3, #17218	; 0x4342
   14574:	e5843040 	str	r3, [r4, #64]	; 0x40
   14578:	eb0087be 	bl	36478 <memcpy>
   1457c:	e1a00005 	mov	r0, r5
   14580:	ebfff02a 	bl	10630 <CUSBFunction::GetHost() const>
   14584:	e2506000 	subs	r6, r0, #0
   14588:	0a000092 	beq	147d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x310>
   1458c:	e5951018 	ldr	r1, [r5, #24]
   14590:	e3a08000 	mov	r8, #0
   14594:	e1a0200b 	mov	r2, fp
   14598:	e3a0301f 	mov	r3, #31
   1459c:	e58d8000 	str	r8, [sp]
   145a0:	ebfffd87 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   145a4:	e1500008 	cmp	r0, r8
   145a8:	ba0000aa 	blt	14858 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x390>
   145ac:	e3590000 	cmp	r9, #0
   145b0:	0a00001b 	beq	14624 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x15c>
   145b4:	e3570000 	cmp	r7, #0
   145b8:	0a00008a 	beq	147e8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x320>
   145bc:	e1873009 	orr	r3, r7, r9
   145c0:	e213303f 	ands	r3, r3, #63	; 0x3f
   145c4:	0a000054 	beq	1471c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
   145c8:	e1a01008 	mov	r1, r8
   145cc:	e1a00009 	mov	r0, r9
   145d0:	eb0089a3 	bl	36c64 <operator new[](unsigned int, int)>
   145d4:	e35a0000 	cmp	sl, #0
   145d8:	e1a0b000 	mov	fp, r0
   145dc:	0a00005e 	beq	1475c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   145e0:	e58d8000 	str	r8, [sp]
   145e4:	e1a02000 	mov	r2, r0
   145e8:	e1a03009 	mov	r3, r9
   145ec:	e1a00006 	mov	r0, r6
   145f0:	e5951014 	ldr	r1, [r5, #20]
   145f4:	ebfffd72 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   145f8:	e2508000 	subs	r8, r0, #0
   145fc:	aa000068 	bge	147a4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2dc>
   14600:	eb006b2b 	bl	2f2b4 <CLogger::Get()>
   14604:	e59f327c 	ldr	r3, [pc, #636]	; 14888 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c0>
   14608:	e3a02001 	mov	r2, #1
   1460c:	e2431018 	sub	r1, r3, #24
   14610:	eb006cf5 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14614:	e1a0000b 	mov	r0, fp
   14618:	eb0089b1 	bl	36ce4 <operator delete[](void*)>
   1461c:	e3e08000 	mvn	r8, #0
   14620:	ea00003a 	b	14710 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x248>
   14624:	e1a08009 	mov	r8, r9
   14628:	e3a07000 	mov	r7, #0
   1462c:	e58d7000 	str	r7, [sp]
   14630:	e3a0300d 	mov	r3, #13
   14634:	e1a02004 	mov	r2, r4
   14638:	e5951014 	ldr	r1, [r5, #20]
   1463c:	e1a00006 	mov	r0, r6
   14640:	ebfffd5f 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14644:	e350000d 	cmp	r0, #13
   14648:	0a000021 	beq	146d4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x20c>
   1464c:	eb006b18 	bl	2f2b4 <CLogger::Get()>
   14650:	e59f3234 	ldr	r3, [pc, #564]	; 1488c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c4>
   14654:	e3a02001 	mov	r2, #1
   14658:	e2431030 	sub	r1, r3, #48	; 0x30
   1465c:	eb006ce2 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14660:	e1a00005 	mov	r0, r5
   14664:	ebffefe6 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   14668:	e1a09000 	mov	r9, r0
   1466c:	e5950014 	ldr	r0, [r5, #20]
   14670:	ebffee6d 	bl	1002c <CUSBEndpoint::GetNumber() const>
   14674:	e1e00c80 	mvn	r0, r0, lsl #25
   14678:	e1a01009 	mov	r1, r9
   1467c:	e3a03001 	mov	r3, #1
   14680:	e1e00ca0 	mvn	r0, r0, lsr #25
   14684:	e3a02002 	mov	r2, #2
   14688:	e58d700c 	str	r7, [sp, #12]
   1468c:	e6ef0070 	uxtb	r0, r0
   14690:	e58d7008 	str	r7, [sp, #8]
   14694:	e58d0004 	str	r0, [sp, #4]
   14698:	e1a00006 	mov	r0, r6
   1469c:	e58d7000 	str	r7, [sp]
   146a0:	ebfffce0 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   146a4:	e1500007 	cmp	r0, r7
   146a8:	ba000070 	blt	14870 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3a8>
   146ac:	e5950014 	ldr	r0, [r5, #20]
   146b0:	ebffeeac 	bl	10168 <CUSBEndpoint::ResetPID()>
   146b4:	e58d7000 	str	r7, [sp]
   146b8:	e1a00006 	mov	r0, r6
   146bc:	e3a0300d 	mov	r3, #13
   146c0:	e5951014 	ldr	r1, [r5, #20]
   146c4:	e1a02004 	mov	r2, r4
   146c8:	ebfffd3d 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   146cc:	e350000d 	cmp	r0, #13
   146d0:	1a000054 	bne	14828 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x360>
   146d4:	e5942000 	ldr	r2, [r4]
   146d8:	e3053355 	movw	r3, #21333	; 0x5355
   146dc:	e3453342 	movt	r3, #21314	; 0x5342
   146e0:	e1520003 	cmp	r2, r3
   146e4:	1a000043 	bne	147f8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x330>
   146e8:	e5942004 	ldr	r2, [r4, #4]
   146ec:	e595301c 	ldr	r3, [r5, #28]
   146f0:	e1520003 	cmp	r2, r3
   146f4:	1a000045 	bne	14810 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x348>
   146f8:	e5d4300c 	ldrb	r3, [r4, #12]
   146fc:	e3530000 	cmp	r3, #0
   14700:	1affffc5 	bne	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14704:	e5943008 	ldr	r3, [r4, #8]
   14708:	e3530000 	cmp	r3, #0
   1470c:	1a00004b 	bne	14840 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x378>
   14710:	e1a00008 	mov	r0, r8
   14714:	e28dd0cc 	add	sp, sp, #204	; 0xcc
   14718:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1471c:	e58d3000 	str	r3, [sp]
   14720:	e35a0000 	cmp	sl, #0
   14724:	e1a03009 	mov	r3, r9
   14728:	e1a02007 	mov	r2, r7
   1472c:	e1c501d4 	ldrd	r0, [r5, #20]
   14730:	11a01000 	movne	r1, r0
   14734:	e1a00006 	mov	r0, r6
   14738:	ebfffd21 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1473c:	e2508000 	subs	r8, r0, #0
   14740:	aaffffb8 	bge	14628 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x160>
   14744:	eb006ada 	bl	2f2b4 <CLogger::Get()>
   14748:	e59f3138 	ldr	r3, [pc, #312]	; 14888 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c0>
   1474c:	e3a02001 	mov	r2, #1
   14750:	e2431018 	sub	r1, r3, #24
   14754:	eb006ca4 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14758:	eaffffaf 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   1475c:	e1a01007 	mov	r1, r7
   14760:	e1a02009 	mov	r2, r9
   14764:	eb008743 	bl	36478 <memcpy>
   14768:	e58da000 	str	sl, [sp]
   1476c:	e1a03009 	mov	r3, r9
   14770:	e1a0200b 	mov	r2, fp
   14774:	e5951018 	ldr	r1, [r5, #24]
   14778:	e1a00006 	mov	r0, r6
   1477c:	ebfffd10 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14780:	e2508000 	subs	r8, r0, #0
   14784:	baffff9d 	blt	14600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x138>
   14788:	e1a0000b 	mov	r0, fp
   1478c:	eb008954 	bl	36ce4 <operator delete[](void*)>
   14790:	eaffffa4 	b	14628 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x160>
   14794:	e59f10f4 	ldr	r1, [pc, #244]	; 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   14798:	e3a02f8f 	mov	r2, #572	; 0x23c
   1479c:	e2810044 	add	r0, r1, #68	; 0x44
   147a0:	eb006046 	bl	2c8c0 <assertion_failed>
   147a4:	e1a02009 	mov	r2, r9
   147a8:	e1a00007 	mov	r0, r7
   147ac:	e1a0100b 	mov	r1, fp
   147b0:	eb008730 	bl	36478 <memcpy>
   147b4:	eafffff3 	b	14788 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c0>
   147b8:	e59f10d0 	ldr	r1, [pc, #208]	; 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147bc:	e300223d 	movw	r2, #573	; 0x23d
   147c0:	e2810054 	add	r0, r1, #84	; 0x54
   147c4:	eb00603d 	bl	2c8c0 <assertion_failed>
   147c8:	e59f10c0 	ldr	r1, [pc, #192]	; 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147cc:	e300223e 	movw	r2, #574	; 0x23e
   147d0:	e2810078 	add	r0, r1, #120	; 0x78
   147d4:	eb006039 	bl	2c8c0 <assertion_failed>
   147d8:	e59f10b0 	ldr	r1, [pc, #176]	; 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147dc:	e300224e 	movw	r2, #590	; 0x24e
   147e0:	e2810098 	add	r0, r1, #152	; 0x98
   147e4:	eb006035 	bl	2c8c0 <assertion_failed>
   147e8:	e59f10a0 	ldr	r1, [pc, #160]	; 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147ec:	e300225b 	movw	r2, #603	; 0x25b
   147f0:	e28100c0 	add	r0, r1, #192	; 0xc0
   147f4:	eb006031 	bl	2c8c0 <assertion_failed>
   147f8:	eb006aad 	bl	2f2b4 <CLogger::Get()>
   147fc:	e59f3090 	ldr	r3, [pc, #144]	; 14894 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3cc>
   14800:	e3a02001 	mov	r2, #1
   14804:	e2431084 	sub	r1, r3, #132	; 0x84
   14808:	eb006c77 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1480c:	eaffff82 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14810:	eb006aa7 	bl	2f2b4 <CLogger::Get()>
   14814:	e59f307c 	ldr	r3, [pc, #124]	; 14898 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3d0>
   14818:	e3a02001 	mov	r2, #1
   1481c:	e243109c 	sub	r1, r3, #156	; 0x9c
   14820:	eb006c71 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14824:	eaffff7c 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14828:	eb006aa1 	bl	2f2b4 <CLogger::Get()>
   1482c:	e59f3068 	ldr	r3, [pc, #104]	; 1489c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3d4>
   14830:	e3a02001 	mov	r2, #1
   14834:	e2431068 	sub	r1, r3, #104	; 0x68
   14838:	eb006c6b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1483c:	eaffff76 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14840:	eb006a9b 	bl	2f2b4 <CLogger::Get()>
   14844:	e59f3054 	ldr	r3, [pc, #84]	; 148a0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3d8>
   14848:	e3a02001 	mov	r2, #1
   1484c:	e24310b0 	sub	r1, r3, #176	; 0xb0
   14850:	eb006c65 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14854:	eaffff70 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14858:	eb006a95 	bl	2f2b4 <CLogger::Get()>
   1485c:	e59f3040 	ldr	r3, [pc, #64]	; 148a4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3dc>
   14860:	e3a02001 	mov	r2, #1
   14864:	e2831014 	add	r1, r3, #20
   14868:	eb006c5f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1486c:	eaffff6a 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14870:	eb006a8f 	bl	2f2b4 <CLogger::Get()>
   14874:	e59f302c 	ldr	r3, [pc, #44]	; 148a8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3e0>
   14878:	e3a02004 	mov	r2, #4
   1487c:	e2431044 	sub	r1, r3, #68	; 0x44
   14880:	eb006c59 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14884:	eaffff64 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14888:	0003c918 	.word	0x0003c918
   1488c:	0003c930 	.word	0x0003c930
   14890:	0003c848 	.word	0x0003c848
   14894:	0003c984 	.word	0x0003c984
   14898:	0003c99c 	.word	0x0003c99c
   1489c:	0003c968 	.word	0x0003c968
   148a0:	0003c9b0 	.word	0x0003c9b0
   148a4:	0003c8ec 	.word	0x0003c8ec
   148a8:	0003c944 	.word	0x0003c944

000148ac <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   148ac:	e92d4030 	push	{r4, r5, lr}
   148b0:	e2513000 	subs	r3, r1, #0
   148b4:	e24dd01c 	sub	sp, sp, #28
   148b8:	0a000023 	beq	1494c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa0>
   148bc:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
   148c0:	e1a04002 	mov	r4, r2
   148c4:	e5902028 	ldr	r2, [r0, #40]	; 0x28
   148c8:	e35c0c02 	cmp	ip, #512	; 0x200
   148cc:	33a01000 	movcc	r1, #0
   148d0:	23a01001 	movcs	r1, #1
   148d4:	e7e8e052 	ubfx	lr, r2, #0, #9
   148d8:	e35e0000 	cmp	lr, #0
   148dc:	13811001 	orrne	r1, r1, #1
   148e0:	e3510000 	cmp	r1, #0
   148e4:	1a000021 	bne	14970 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
   148e8:	e1a024a2 	lsr	r2, r2, #9
   148ec:	e7e81054 	ubfx	r1, r4, #0, #9
   148f0:	e1822b8c 	orr	r2, r2, ip, lsl #23
   148f4:	e3510000 	cmp	r1, #0
   148f8:	1a00001c 	bne	14970 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
   148fc:	e6bf2f32 	rev	r2, r2
   14900:	e58d200e 	str	r2, [sp, #14]
   14904:	e1a024a4 	lsr	r2, r4, #9
   14908:	e5cd1012 	strb	r1, [sp, #18]
   1490c:	e6bf2fb2 	rev16	r2, r2
   14910:	e5cd1015 	strb	r1, [sp, #21]
   14914:	e1cd21b3 	strh	r2, [sp, #19]
   14918:	e3a05001 	mov	r5, #1
   1491c:	e3a0200a 	mov	r2, #10
   14920:	e28d100c 	add	r1, sp, #12
   14924:	e58d4000 	str	r4, [sp]
   14928:	e3a0c028 	mov	ip, #40	; 0x28
   1492c:	e58d5004 	str	r5, [sp, #4]
   14930:	e1cdc0bc 	strh	ip, [sp, #12]
   14934:	ebfffee3 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14938:	e1500004 	cmp	r0, r4
   1493c:	1a000006 	bne	1495c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb0>
   14940:	e1a00004 	mov	r0, r4
   14944:	e28dd01c 	add	sp, sp, #28
   14948:	e8bd8030 	pop	{r4, r5, pc}
   1494c:	e59f1024 	ldr	r1, [pc, #36]	; 14978 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xcc>
   14950:	e30021f1 	movw	r2, #497	; 0x1f1
   14954:	e28100c0 	add	r0, r1, #192	; 0xc0
   14958:	eb005fd8 	bl	2c8c0 <assertion_failed>
   1495c:	eb006a54 	bl	2f2b4 <CLogger::Get()>
   14960:	e59f3014 	ldr	r3, [pc, #20]	; 1497c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd0>
   14964:	e1a02005 	mov	r2, r5
   14968:	e24310c8 	sub	r1, r3, #200	; 0xc8
   1496c:	eb006c1e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14970:	e3e04000 	mvn	r4, #0
   14974:	eafffff1 	b	14940 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x94>
   14978:	0003c848 	.word	0x0003c848
   1497c:	0003c9c8 	.word	0x0003c9c8

00014980 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   14980:	e92d4010 	push	{r4, lr}
   14984:	e2513000 	subs	r3, r1, #0
   14988:	e24dd018 	sub	sp, sp, #24
   1498c:	0a000022 	beq	14a1c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x9c>
   14990:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
   14994:	e1a04002 	mov	r4, r2
   14998:	e5902028 	ldr	r2, [r0, #40]	; 0x28
   1499c:	e35c0c02 	cmp	ip, #512	; 0x200
   149a0:	33a01000 	movcc	r1, #0
   149a4:	23a01001 	movcs	r1, #1
   149a8:	e7e8e052 	ubfx	lr, r2, #0, #9
   149ac:	e35e0000 	cmp	lr, #0
   149b0:	13811001 	orrne	r1, r1, #1
   149b4:	e3510000 	cmp	r1, #0
   149b8:	1a000020 	bne	14a40 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc0>
   149bc:	e1a024a2 	lsr	r2, r2, #9
   149c0:	e7e81054 	ubfx	r1, r4, #0, #9
   149c4:	e1822b8c 	orr	r2, r2, ip, lsl #23
   149c8:	e3510000 	cmp	r1, #0
   149cc:	1a00001b 	bne	14a40 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc0>
   149d0:	e6bf2f32 	rev	r2, r2
   149d4:	e58d200e 	str	r2, [sp, #14]
   149d8:	e1a024a4 	lsr	r2, r4, #9
   149dc:	e58d1004 	str	r1, [sp, #4]
   149e0:	e6bf2fb2 	rev16	r2, r2
   149e4:	e5cd1012 	strb	r1, [sp, #18]
   149e8:	e1cd21b3 	strh	r2, [sp, #19]
   149ec:	e3a0200a 	mov	r2, #10
   149f0:	e5cd1015 	strb	r1, [sp, #21]
   149f4:	e28d100c 	add	r1, sp, #12
   149f8:	e58d4000 	str	r4, [sp]
   149fc:	e300c82a 	movw	ip, #2090	; 0x82a
   14a00:	e1cdc0bc 	strh	ip, [sp, #12]
   14a04:	ebfffeaf 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14a08:	e3500000 	cmp	r0, #0
   14a0c:	a1a00004 	movge	r0, r4
   14a10:	ba000005 	blt	14a2c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   14a14:	e28dd018 	add	sp, sp, #24
   14a18:	e8bd8010 	pop	{r4, pc}
   14a1c:	e59f1024 	ldr	r1, [pc, #36]	; 14a48 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc8>
   14a20:	e3002216 	movw	r2, #534	; 0x216
   14a24:	e28100c0 	add	r0, r1, #192	; 0xc0
   14a28:	eb005fa4 	bl	2c8c0 <assertion_failed>
   14a2c:	eb006a20 	bl	2f2b4 <CLogger::Get()>
   14a30:	e59f3014 	ldr	r3, [pc, #20]	; 14a4c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xcc>
   14a34:	e3a02001 	mov	r2, #1
   14a38:	e24310d8 	sub	r1, r3, #216	; 0xd8
   14a3c:	eb006bea 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a40:	e3e00000 	mvn	r0, #0
   14a44:	eafffff2 	b	14a14 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x94>
   14a48:	0003c848 	.word	0x0003c848
   14a4c:	0003c9d8 	.word	0x0003c9d8

00014a50 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   14a50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14a54:	e1a05000 	mov	r5, r0
   14a58:	e24dd014 	sub	sp, sp, #20
   14a5c:	ebffeef3 	bl	10630 <CUSBFunction::GetHost() const>
   14a60:	e2506000 	subs	r6, r0, #0
   14a64:	0a00003c 	beq	14b5c <CUSBBulkOnlyMassStorageDevice::Reset()+0x10c>
   14a68:	e1a00005 	mov	r0, r5
   14a6c:	e3a04000 	mov	r4, #0
   14a70:	ebffeee3 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   14a74:	e1a07000 	mov	r7, r0
   14a78:	e1a00005 	mov	r0, r5
   14a7c:	ebffef4a 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   14a80:	e1a01007 	mov	r1, r7
   14a84:	e98d0011 	stmib	sp, {r0, r4}
   14a88:	e3a030ff 	mov	r3, #255	; 0xff
   14a8c:	e3a02021 	mov	r2, #33	; 0x21
   14a90:	e1a00006 	mov	r0, r6
   14a94:	e58d400c 	str	r4, [sp, #12]
   14a98:	e58d4000 	str	r4, [sp]
   14a9c:	ebfffbe1 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14aa0:	e1500004 	cmp	r0, r4
   14aa4:	ba000030 	blt	14b6c <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   14aa8:	eb00843a 	bl	35b98 <CTimer::Get()>
   14aac:	e3a00064 	mov	r0, #100	; 0x64
   14ab0:	eb0083f7 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   14ab4:	e1a00005 	mov	r0, r5
   14ab8:	ebffeed1 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   14abc:	e1a07000 	mov	r7, r0
   14ac0:	e5950014 	ldr	r0, [r5, #20]
   14ac4:	ebffed58 	bl	1002c <CUSBEndpoint::GetNumber() const>
   14ac8:	e1e00c80 	mvn	r0, r0, lsl #25
   14acc:	e1a01007 	mov	r1, r7
   14ad0:	e3a03001 	mov	r3, #1
   14ad4:	e1e00ca0 	mvn	r0, r0, lsr #25
   14ad8:	e3a02002 	mov	r2, #2
   14adc:	e58d400c 	str	r4, [sp, #12]
   14ae0:	e6ef0070 	uxtb	r0, r0
   14ae4:	e58d4008 	str	r4, [sp, #8]
   14ae8:	e58d0004 	str	r0, [sp, #4]
   14aec:	e1a00006 	mov	r0, r6
   14af0:	e58d4000 	str	r4, [sp]
   14af4:	ebfffbcb 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14af8:	e3500000 	cmp	r0, #0
   14afc:	ba000027 	blt	14ba0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
   14b00:	e1a00005 	mov	r0, r5
   14b04:	ebffeebe 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   14b08:	e1a07000 	mov	r7, r0
   14b0c:	e5950018 	ldr	r0, [r5, #24]
   14b10:	ebffed45 	bl	1002c <CUSBEndpoint::GetNumber() const>
   14b14:	e1a01007 	mov	r1, r7
   14b18:	e1a03000 	mov	r3, r0
   14b1c:	e3a02002 	mov	r2, #2
   14b20:	e98d0018 	stmib	sp, {r3, r4}
   14b24:	e1a00006 	mov	r0, r6
   14b28:	e3a03001 	mov	r3, #1
   14b2c:	e58d400c 	str	r4, [sp, #12]
   14b30:	e58d4000 	str	r4, [sp]
   14b34:	ebfffbbb 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14b38:	e3500000 	cmp	r0, #0
   14b3c:	ba000011 	blt	14b88 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   14b40:	e5950014 	ldr	r0, [r5, #20]
   14b44:	ebffed87 	bl	10168 <CUSBEndpoint::ResetPID()>
   14b48:	e5950018 	ldr	r0, [r5, #24]
   14b4c:	ebffed85 	bl	10168 <CUSBEndpoint::ResetPID()>
   14b50:	e1a00004 	mov	r0, r4
   14b54:	e28dd014 	add	sp, sp, #20
   14b58:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14b5c:	e59f1054 	ldr	r1, [pc, #84]	; 14bb8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x168>
   14b60:	e30022bb 	movw	r2, #699	; 0x2bb
   14b64:	e2810098 	add	r0, r1, #152	; 0x98
   14b68:	eb005f54 	bl	2c8c0 <assertion_failed>
   14b6c:	eb0069d0 	bl	2f2b4 <CLogger::Get()>
   14b70:	e59f3044 	ldr	r3, [pc, #68]	; 14bbc <CUSBBulkOnlyMassStorageDevice::Reset()+0x16c>
   14b74:	e3a02004 	mov	r2, #4
   14b78:	e24310e8 	sub	r1, r3, #232	; 0xe8
   14b7c:	eb006b9a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b80:	e3e00000 	mvn	r0, #0
   14b84:	eafffff2 	b	14b54 <CUSBBulkOnlyMassStorageDevice::Reset()+0x104>
   14b88:	eb0069c9 	bl	2f2b4 <CLogger::Get()>
   14b8c:	e59f302c 	ldr	r3, [pc, #44]	; 14bc0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x170>
   14b90:	e3a02004 	mov	r2, #4
   14b94:	e24310fc 	sub	r1, r3, #252	; 0xfc
   14b98:	eb006b93 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b9c:	eafffff7 	b	14b80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x130>
   14ba0:	eb0069c3 	bl	2f2b4 <CLogger::Get()>
   14ba4:	e59f3018 	ldr	r3, [pc, #24]	; 14bc4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x174>
   14ba8:	e3a02004 	mov	r2, #4
   14bac:	e2431044 	sub	r1, r3, #68	; 0x44
   14bb0:	eb006b8d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14bb4:	eafffff1 	b	14b80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x130>
   14bb8:	0003c848 	.word	0x0003c848
   14bbc:	0003c9e8 	.word	0x0003c9e8
   14bc0:	0003c9fc 	.word	0x0003c9fc
   14bc4:	0003c944 	.word	0x0003c944

00014bc8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   14bc8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14bcc:	e1a05002 	mov	r5, r2
   14bd0:	e1a06000 	mov	r6, r0
   14bd4:	e1a08001 	mov	r8, r1
   14bd8:	e1a09002 	mov	r9, r2
   14bdc:	e3a07008 	mov	r7, #8
   14be0:	e1a02005 	mov	r2, r5
   14be4:	e1a01008 	mov	r1, r8
   14be8:	e1a00006 	mov	r0, r6
   14bec:	ebffff2e 	bl	148ac <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   14bf0:	e1a04000 	mov	r4, r0
   14bf4:	e1540005 	cmp	r4, r5
   14bf8:	e1a00006 	mov	r0, r6
   14bfc:	1a000001 	bne	14c08 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x40>
   14c00:	e1a00009 	mov	r0, r9
   14c04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c08:	ebffff90 	bl	14a50 <CUSBBulkOnlyMassStorageDevice::Reset()>
   14c0c:	e3500000 	cmp	r0, #0
   14c10:	1a000004 	bne	14c28 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   14c14:	e2577001 	subs	r7, r7, #1
   14c18:	1afffff0 	bne	14be0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   14c1c:	e1a09004 	mov	r9, r4
   14c20:	e1a00009 	mov	r0, r9
   14c24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c28:	e1a09000 	mov	r9, r0
   14c2c:	eafffff3 	b	14c00 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x38>

00014c30 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   14c30:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c34:	e1a05002 	mov	r5, r2
   14c38:	e1a06000 	mov	r6, r0
   14c3c:	e1a08001 	mov	r8, r1
   14c40:	e1a09002 	mov	r9, r2
   14c44:	e3a07008 	mov	r7, #8
   14c48:	e1a02005 	mov	r2, r5
   14c4c:	e1a01008 	mov	r1, r8
   14c50:	e1a00006 	mov	r0, r6
   14c54:	ebffff49 	bl	14980 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   14c58:	e1a04000 	mov	r4, r0
   14c5c:	e1540005 	cmp	r4, r5
   14c60:	e1a00006 	mov	r0, r6
   14c64:	1a000001 	bne	14c70 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x40>
   14c68:	e1a00009 	mov	r0, r9
   14c6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c70:	ebffff76 	bl	14a50 <CUSBBulkOnlyMassStorageDevice::Reset()>
   14c74:	e3500000 	cmp	r0, #0
   14c78:	1a000004 	bne	14c90 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   14c7c:	e2577001 	subs	r7, r7, #1
   14c80:	1afffff0 	bne	14c48 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   14c84:	e1a09004 	mov	r9, r4
   14c88:	e1a00009 	mov	r0, r9
   14c8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c90:	e1a09000 	mov	r9, r0
   14c94:	eafffff3 	b	14c68 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x38>

00014c98 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   14c98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14c9c:	e1a05000 	mov	r5, r0
   14ca0:	e24dd064 	sub	sp, sp, #100	; 0x64
   14ca4:	ebffee40 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   14ca8:	e3500001 	cmp	r0, #1
   14cac:	8a000004 	bhi	14cc4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   14cb0:	ea0000b9 	b	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14cb4:	e5d43003 	ldrb	r3, [r4, #3]
   14cb8:	e203303f 	and	r3, r3, #63	; 0x3f
   14cbc:	e3530002 	cmp	r3, #2
   14cc0:	0a000028 	beq	14d68 <CUSBBulkOnlyMassStorageDevice::Configure()+0xd0>
   14cc4:	e3a01005 	mov	r1, #5
   14cc8:	e1a00005 	mov	r0, r5
   14ccc:	ebffee62 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   14cd0:	e2504000 	subs	r4, r0, #0
   14cd4:	1afffff6 	bne	14cb4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
   14cd8:	e5953014 	ldr	r3, [r5, #20]
   14cdc:	e3530000 	cmp	r3, #0
   14ce0:	0a0000ad 	beq	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14ce4:	e5953018 	ldr	r3, [r5, #24]
   14ce8:	e3530000 	cmp	r3, #0
   14cec:	0a0000aa 	beq	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14cf0:	e1a00005 	mov	r0, r5
   14cf4:	ebffed65 	bl	10290 <CUSBFunction::Configure()>
   14cf8:	e3500000 	cmp	r0, #0
   14cfc:	0a0000ab 	beq	14fb0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   14d00:	e3a01024 	mov	r1, #36	; 0x24
   14d04:	e3a00012 	mov	r0, #18
   14d08:	e1cd11b0 	strh	r1, [sp, #16]
   14d0c:	e3a06001 	mov	r6, #1
   14d10:	e58d000c 	str	r0, [sp, #12]
   14d14:	e28d303c 	add	r3, sp, #60	; 0x3c
   14d18:	e88d0042 	stm	sp, {r1, r6}
   14d1c:	e3a02006 	mov	r2, #6
   14d20:	e28d100c 	add	r1, sp, #12
   14d24:	e1a00005 	mov	r0, r5
   14d28:	ebfffde6 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14d2c:	e3500024 	cmp	r0, #36	; 0x24
   14d30:	1a0000a4 	bne	14fc8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x330>
   14d34:	e5dd403c 	ldrb	r4, [sp, #60]	; 0x3c
   14d38:	e214401f 	ands	r4, r4, #31
   14d3c:	03a06063 	moveq	r6, #99	; 0x63
   14d40:	0a000028 	beq	14de8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x150>
   14d44:	eb00695a 	bl	2f2b4 <CLogger::Get()>
   14d48:	e5dd103c 	ldrb	r1, [sp, #60]	; 0x3c
   14d4c:	e59f335c 	ldr	r3, [pc, #860]	; 150b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x418>
   14d50:	e1a02006 	mov	r2, r6
   14d54:	e201101f 	and	r1, r1, #31
   14d58:	e58d1000 	str	r1, [sp]
   14d5c:	e2431e15 	sub	r1, r3, #336	; 0x150
   14d60:	eb006b21 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d64:	ea00008f 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14d68:	e1d430d2 	ldrsb	r3, [r4, #2]
   14d6c:	e3530000 	cmp	r3, #0
   14d70:	ba00007b 	blt	14f64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2cc>
   14d74:	e5953018 	ldr	r3, [r5, #24]
   14d78:	e3530000 	cmp	r3, #0
   14d7c:	1a000086 	bne	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14d80:	e3a00014 	mov	r0, #20
   14d84:	eb0087c4 	bl	36c9c <operator new(unsigned int)>
   14d88:	e1a06000 	mov	r6, r0
   14d8c:	e1a00005 	mov	r0, r5
   14d90:	ebffee11 	bl	105dc <CUSBFunction::GetDevice() const>
   14d94:	e1a02004 	mov	r2, r4
   14d98:	e1a01000 	mov	r1, r0
   14d9c:	e1a00006 	mov	r0, r6
   14da0:	ebffec1c 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14da4:	e5856018 	str	r6, [r5, #24]
   14da8:	eaffffc5 	b	14cc4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   14dac:	e3a00012 	mov	r0, #18
   14db0:	e3a07001 	mov	r7, #1
   14db4:	e1cd02b0 	strh	r0, [sp, #32]
   14db8:	e28d3028 	add	r3, sp, #40	; 0x28
   14dbc:	e88d0081 	stm	sp, {r0, r7}
   14dc0:	e3a02006 	mov	r2, #6
   14dc4:	e28d101c 	add	r1, sp, #28
   14dc8:	e1a00005 	mov	r0, r5
   14dcc:	e3a0c003 	mov	ip, #3
   14dd0:	e58dc01c 	str	ip, [sp, #28]
   14dd4:	ebfffdbb 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14dd8:	e3500000 	cmp	r0, #0
   14ddc:	ba00007f 	blt	14fe0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x348>
   14de0:	e2566001 	subs	r6, r6, #1
   14de4:	0a00008b 	beq	15018 <CUSBBulkOnlyMassStorageDevice::Configure()+0x380>
   14de8:	eb00836a 	bl	35b98 <CTimer::Get()>
   14dec:	e3a00064 	mov	r0, #100	; 0x64
   14df0:	eb008327 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   14df4:	e3a03000 	mov	r3, #0
   14df8:	e3a02006 	mov	r2, #6
   14dfc:	e28d1014 	add	r1, sp, #20
   14e00:	e1a00005 	mov	r0, r5
   14e04:	e58d4004 	str	r4, [sp, #4]
   14e08:	e58d4000 	str	r4, [sp]
   14e0c:	e58d4014 	str	r4, [sp, #20]
   14e10:	e1cd41b8 	strh	r4, [sp, #24]
   14e14:	ebfffdab 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14e18:	e3500000 	cmp	r0, #0
   14e1c:	baffffe2 	blt	14dac <CUSBBulkOnlyMassStorageDevice::Configure()+0x114>
   14e20:	e3a02025 	mov	r2, #37	; 0x25
   14e24:	e28d3014 	add	r3, sp, #20
   14e28:	e58d201c 	str	r2, [sp, #28]
   14e2c:	e28d101c 	add	r1, sp, #28
   14e30:	e3a02008 	mov	r2, #8
   14e34:	e3a06001 	mov	r6, #1
   14e38:	e58d2000 	str	r2, [sp]
   14e3c:	e1a00005 	mov	r0, r5
   14e40:	e3a0200a 	mov	r2, #10
   14e44:	e58d6004 	str	r6, [sp, #4]
   14e48:	e58d4020 	str	r4, [sp, #32]
   14e4c:	e1cd42b4 	strh	r4, [sp, #36]	; 0x24
   14e50:	ebfffd9c 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14e54:	e3500008 	cmp	r0, #8
   14e58:	1a000074 	bne	15030 <CUSBBulkOnlyMassStorageDevice::Configure()+0x398>
   14e5c:	e59d4018 	ldr	r4, [sp, #24]
   14e60:	e3540802 	cmp	r4, #131072	; 0x20000
   14e64:	1a000063 	bne	14ff8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x360>
   14e68:	e59d2014 	ldr	r2, [sp, #20]
   14e6c:	e6bf3f32 	rev	r3, r2
   14e70:	e3720001 	cmn	r2, #1
   14e74:	e5853020 	str	r3, [r5, #32]
   14e78:	0a000078 	beq	15060 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c8>
   14e7c:	e2833001 	add	r3, r3, #1
   14e80:	e5853020 	str	r3, [r5, #32]
   14e84:	eb00690a 	bl	2f2b4 <CLogger::Get()>
   14e88:	e5952020 	ldr	r2, [r5, #32]
   14e8c:	e59f3220 	ldr	r3, [pc, #544]	; 150b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
   14e90:	e1a025a2 	lsr	r2, r2, #11
   14e94:	e2431f7b 	sub	r1, r3, #492	; 0x1ec
   14e98:	e58d2000 	str	r2, [sp]
   14e9c:	e3a02004 	mov	r2, #4
   14ea0:	eb006ad1 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ea4:	e59f220c 	ldr	r2, [pc, #524]	; 150b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x420>
   14ea8:	e3a01000 	mov	r1, #0
   14eac:	e3040e98 	movw	r0, #20120	; 0x4e98
   14eb0:	e3400004 	movt	r0, #4
   14eb4:	eb0088c8 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   14eb8:	e3500040 	cmp	r0, #64	; 0x40
   14ebc:	0a00006d 	beq	15078 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e0>
   14ec0:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   14ec4:	e3520000 	cmp	r2, #0
   14ec8:	1a000074 	bne	150a0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x408>
   14ecc:	e5850034 	str	r0, [r5, #52]	; 0x34
   14ed0:	e28d0028 	add	r0, sp, #40	; 0x28
   14ed4:	eb0079a0 	bl	3355c <CString::CString()>
   14ed8:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   14edc:	e59f11d8 	ldr	r1, [pc, #472]	; 150bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x424>
   14ee0:	e28d0028 	add	r0, sp, #40	; 0x28
   14ee4:	eb007f67 	bl	34c88 <CString::Format(char const*, ...)>
   14ee8:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   14eec:	e3530000 	cmp	r3, #0
   14ef0:	1a000066 	bne	15090 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f8>
   14ef4:	e3a00024 	mov	r0, #36	; 0x24
   14ef8:	eb008767 	bl	36c9c <operator new(unsigned int)>
   14efc:	e1a04000 	mov	r4, r0
   14f00:	e28d0028 	add	r0, sp, #40	; 0x28
   14f04:	eb0079cc 	bl	3363c <CString::operator char const*() const>
   14f08:	e1a01005 	mov	r1, r5
   14f0c:	e1a02000 	mov	r2, r0
   14f10:	e1a00004 	mov	r0, r4
   14f14:	eb002b38 	bl	1fbfc <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   14f18:	e1a00004 	mov	r0, r4
   14f1c:	e5854030 	str	r4, [r5, #48]	; 0x30
   14f20:	eb002b71 	bl	1fcec <CPartitionManager::Initialize()>
   14f24:	e2504000 	subs	r4, r0, #0
   14f28:	0a000046 	beq	15048 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3b0>
   14f2c:	eb0061fa 	bl	2d71c <CDeviceNameService::Get()>
   14f30:	e1a07000 	mov	r7, r0
   14f34:	e28d0028 	add	r0, sp, #40	; 0x28
   14f38:	eb0079bf 	bl	3363c <CString::operator char const*() const>
   14f3c:	e1a03006 	mov	r3, r6
   14f40:	e1a01000 	mov	r1, r0
   14f44:	e1a02005 	mov	r2, r5
   14f48:	e1a00007 	mov	r0, r7
   14f4c:	eb00611c 	bl	2d3c4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14f50:	e28d0028 	add	r0, sp, #40	; 0x28
   14f54:	eb00794d 	bl	33490 <CString::~CString()>
   14f58:	e1a00004 	mov	r0, r4
   14f5c:	e28dd064 	add	sp, sp, #100	; 0x64
   14f60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14f64:	e5953014 	ldr	r3, [r5, #20]
   14f68:	e3530000 	cmp	r3, #0
   14f6c:	1a00000a 	bne	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14f70:	e3a00014 	mov	r0, #20
   14f74:	eb008748 	bl	36c9c <operator new(unsigned int)>
   14f78:	e1a06000 	mov	r6, r0
   14f7c:	e1a00005 	mov	r0, r5
   14f80:	ebffed95 	bl	105dc <CUSBFunction::GetDevice() const>
   14f84:	e1a02004 	mov	r2, r4
   14f88:	e1a01000 	mov	r1, r0
   14f8c:	e1a00006 	mov	r0, r6
   14f90:	ebffeba0 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14f94:	e5856014 	str	r6, [r5, #20]
   14f98:	eaffff49 	b	14cc4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   14f9c:	e59f111c 	ldr	r1, [pc, #284]	; 150c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   14fa0:	e1a00005 	mov	r0, r5
   14fa4:	ebffedb7 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   14fa8:	e3a04000 	mov	r4, #0
   14fac:	eaffffe9 	b	14f58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   14fb0:	eb0068bf 	bl	2f2b4 <CLogger::Get()>
   14fb4:	e59f3108 	ldr	r3, [pc, #264]	; 150c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x42c>
   14fb8:	e3a02001 	mov	r2, #1
   14fbc:	e2431e12 	sub	r1, r3, #288	; 0x120
   14fc0:	eb006a89 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fc4:	eafffff7 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14fc8:	eb0068b9 	bl	2f2b4 <CLogger::Get()>
   14fcc:	e59f30f4 	ldr	r3, [pc, #244]	; 150c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x430>
   14fd0:	e1a02006 	mov	r2, r6
   14fd4:	e2431f4e 	sub	r1, r3, #312	; 0x138
   14fd8:	eb006a83 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fdc:	eafffff1 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14fe0:	eb0068b3 	bl	2f2b4 <CLogger::Get()>
   14fe4:	e59f30e0 	ldr	r3, [pc, #224]	; 150cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x434>
   14fe8:	e1a02007 	mov	r2, r7
   14fec:	e2431e17 	sub	r1, r3, #368	; 0x170
   14ff0:	eb006a7d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ff4:	eaffffeb 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14ff8:	eb0068ad 	bl	2f2b4 <CLogger::Get()>
   14ffc:	e59f30cc 	ldr	r3, [pc, #204]	; 150d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x438>
   15000:	e6bf4f34 	rev	r4, r4
   15004:	e1a02006 	mov	r2, r6
   15008:	e2431f6d 	sub	r1, r3, #436	; 0x1b4
   1500c:	e58d4000 	str	r4, [sp]
   15010:	eb006a75 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15014:	eaffffe3 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15018:	eb0068a5 	bl	2f2b4 <CLogger::Get()>
   1501c:	e59f30b0 	ldr	r3, [pc, #176]	; 150d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x43c>
   15020:	e1a02007 	mov	r2, r7
   15024:	e2431f62 	sub	r1, r3, #392	; 0x188
   15028:	eb006a6f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1502c:	eaffffdd 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15030:	eb00689f 	bl	2f2b4 <CLogger::Get()>
   15034:	e59f309c 	ldr	r3, [pc, #156]	; 150d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x440>
   15038:	e1a02006 	mov	r2, r6
   1503c:	e2431f67 	sub	r1, r3, #412	; 0x19c
   15040:	eb006a69 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15044:	eaffffd7 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15048:	e5951034 	ldr	r1, [r5, #52]	; 0x34
   1504c:	e3040e98 	movw	r0, #20120	; 0x4e98
   15050:	e3400004 	movt	r0, #4
   15054:	eb008892 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   15058:	e5854034 	str	r4, [r5, #52]	; 0x34
   1505c:	eaffffbb 	b	14f50 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2b8>
   15060:	eb006893 	bl	2f2b4 <CLogger::Get()>
   15064:	e59f3070 	ldr	r3, [pc, #112]	; 150dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   15068:	e1a02006 	mov	r2, r6
   1506c:	e2431e1d 	sub	r1, r3, #464	; 0x1d0
   15070:	eb006a5d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15074:	eaffffcb 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15078:	eb00688d 	bl	2f2b4 <CLogger::Get()>
   1507c:	e59f305c 	ldr	r3, [pc, #92]	; 150e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x448>
   15080:	e1a02006 	mov	r2, r6
   15084:	e2431f83 	sub	r1, r3, #524	; 0x20c
   15088:	eb006a57 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1508c:	eaffffc5 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15090:	e59f104c 	ldr	r1, [pc, #76]	; 150e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x44c>
   15094:	e3002199 	movw	r2, #409	; 0x199
   15098:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   1509c:	eb005e07 	bl	2c8c0 <assertion_failed>
   150a0:	e59f103c 	ldr	r1, [pc, #60]	; 150e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x44c>
   150a4:	e3002193 	movw	r2, #403	; 0x193
   150a8:	e2810fb6 	add	r0, r1, #728	; 0x2d8
   150ac:	eb005e03 	bl	2c8c0 <assertion_failed>
   150b0:	0003ca50 	.word	0x0003ca50
   150b4:	0003caec 	.word	0x0003caec
   150b8:	0003cb04 	.word	0x0003cb04
   150bc:	0003cb38 	.word	0x0003cb38
   150c0:	0003c900 	.word	0x0003c900
   150c4:	0003ca20 	.word	0x0003ca20
   150c8:	0003ca38 	.word	0x0003ca38
   150cc:	0003ca70 	.word	0x0003ca70
   150d0:	0003cab4 	.word	0x0003cab4
   150d4:	0003ca88 	.word	0x0003ca88
   150d8:	0003ca9c 	.word	0x0003ca9c
   150dc:	0003cad0 	.word	0x0003cad0
   150e0:	0003cb0c 	.word	0x0003cb0c
   150e4:	0003c848 	.word	0x0003c848

000150e8 <_GLOBAL__sub_I__ZN29CUSBBulkOnlyMassStorageDevice18s_DeviceNumberPoolE>:
   150e8:	e92d4010 	push	{r4, lr}
   150ec:	e3044e98 	movw	r4, #20120	; 0x4e98
   150f0:	e3404004 	movt	r4, #4
   150f4:	e3a0203f 	mov	r2, #63	; 0x3f
   150f8:	e3a01001 	mov	r1, #1
   150fc:	e1a00004 	mov	r0, r4
   15100:	eb008820 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   15104:	e1a00004 	mov	r0, r4
   15108:	e3042f78 	movw	r2, #20344	; 0x4f78
   1510c:	e3402004 	movt	r2, #4
   15110:	e30711d8 	movw	r1, #29144	; 0x71d8
   15114:	e3401003 	movt	r1, #3
   15118:	e8bd4010 	pop	{r4, lr}
   1511c:	ea007ee4 	b	34cb4 <__aeabi_atexit>

00015120 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   15120:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   15124:	e59f20c0 	ldr	r2, [pc, #192]	; 151ec <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0xcc>
   15128:	e92d4070 	push	{r4, r5, r6, lr}
   1512c:	e3530000 	cmp	r3, #0
   15130:	e1a04000 	mov	r4, r0
   15134:	e5802000 	str	r2, [r0]
   15138:	1a000025 	bne	151d4 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0xb4>
   1513c:	e5940014 	ldr	r0, [r4, #20]
   15140:	e3500000 	cmp	r0, #0
   15144:	0a000002 	beq	15154 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x34>
   15148:	e5903000 	ldr	r3, [r0]
   1514c:	e5933004 	ldr	r3, [r3, #4]
   15150:	e12fff33 	blx	r3
   15154:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   15158:	e3a03000 	mov	r3, #0
   1515c:	e5843014 	str	r3, [r4, #20]
   15160:	e1500003 	cmp	r0, r3
   15164:	0a000000 	beq	1516c <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x4c>
   15168:	eb0086dd 	bl	36ce4 <operator delete[](void*)>
   1516c:	e5945018 	ldr	r5, [r4, #24]
   15170:	e3a03000 	mov	r3, #0
   15174:	e5843024 	str	r3, [r4, #36]	; 0x24
   15178:	e1550003 	cmp	r5, r3
   1517c:	0a000004 	beq	15194 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x74>
   15180:	e1a00005 	mov	r0, r5
   15184:	ebffeb9d 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   15188:	e3a01014 	mov	r1, #20
   1518c:	e1a00005 	mov	r0, r5
   15190:	eb0086d9 	bl	36cfc <operator delete(void*, unsigned int)>
   15194:	e594501c 	ldr	r5, [r4, #28]
   15198:	e3a03000 	mov	r3, #0
   1519c:	e5843018 	str	r3, [r4, #24]
   151a0:	e1550003 	cmp	r5, r3
   151a4:	0a000004 	beq	151bc <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x9c>
   151a8:	e1a00005 	mov	r0, r5
   151ac:	ebffeb93 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   151b0:	e3a01014 	mov	r1, #20
   151b4:	e1a00005 	mov	r0, r5
   151b8:	eb0086cf 	bl	36cfc <operator delete(void*, unsigned int)>
   151bc:	e3a03000 	mov	r3, #0
   151c0:	e1a00004 	mov	r0, r4
   151c4:	e584301c 	str	r3, [r4, #28]
   151c8:	ebffebf6 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   151cc:	e1a00004 	mov	r0, r4
   151d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   151d4:	eb00826f 	bl	35b98 <CTimer::Get()>
   151d8:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   151dc:	eb0080d7 	bl	35540 <CTimer::CancelKernelTimer(unsigned int)>
   151e0:	e3a03000 	mov	r3, #0
   151e4:	e5843028 	str	r3, [r4, #40]	; 0x28
   151e8:	eaffffd3 	b	1513c <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x1c>
   151ec:	0003cc70 	.word	0x0003cc70

000151f0 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   151f0:	e92d4010 	push	{r4, lr}
   151f4:	e1a04000 	mov	r4, r0
   151f8:	ebffffc8 	bl	15120 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>
   151fc:	e1a00004 	mov	r0, r4
   15200:	e3a0102c 	mov	r1, #44	; 0x2c
   15204:	eb0086bc 	bl	36cfc <operator delete(void*, unsigned int)>
   15208:	e1a00004 	mov	r0, r4
   1520c:	e8bd8010 	pop	{r4, pc}

00015210 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)>:
   15210:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   15214:	e2525000 	subs	r5, r2, #0
   15218:	e28db014 	add	fp, sp, #20
   1521c:	e24dd008 	sub	sp, sp, #8
   15220:	0a000020 	beq	152a8 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x98>
   15224:	e3500000 	cmp	r0, #0
   15228:	0a000024 	beq	152c0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xb0>
   1522c:	e1a04001 	mov	r4, r1
   15230:	e3510000 	cmp	r1, #0
   15234:	0a000027 	beq	152d8 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xc8>
   15238:	e2116003 	ands	r6, r1, #3
   1523c:	1a00002b 	bne	152f0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xe0>
   15240:	e595301c 	ldr	r3, [r5, #28]
   15244:	e3530000 	cmp	r3, #0
   15248:	01a00003 	moveq	r0, r3
   1524c:	0a000013 	beq	152a0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x90>
   15250:	e2413001 	sub	r3, r1, #1
   15254:	e1a02001 	mov	r2, r1
   15258:	e383303f 	orr	r3, r3, #63	; 0x3f
   1525c:	e1a01000 	mov	r1, r0
   15260:	e2833040 	add	r3, r3, #64	; 0x40
   15264:	e3c33007 	bic	r3, r3, #7
   15268:	e04dd003 	sub	sp, sp, r3
   1526c:	e28d7047 	add	r7, sp, #71	; 0x47
   15270:	e3c7703f 	bic	r7, r7, #63	; 0x3f
   15274:	e1a00007 	mov	r0, r7
   15278:	eb00847e 	bl	36478 <memcpy>
   1527c:	e1a00005 	mov	r0, r5
   15280:	ebffecea 	bl	10630 <CUSBFunction::GetHost() const>
   15284:	e595101c 	ldr	r1, [r5, #28]
   15288:	e1a03004 	mov	r3, r4
   1528c:	e1a02007 	mov	r2, r7
   15290:	e58d6000 	str	r6, [sp]
   15294:	ebfffa4a 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15298:	e1e00000 	mvn	r0, r0
   1529c:	e1a00fa0 	lsr	r0, r0, #31
   152a0:	e24bd014 	sub	sp, fp, #20
   152a4:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}
   152a8:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   152ac:	e3401003 	movt	r1, #3
   152b0:	e30c0b6c 	movw	r0, #52076	; 0xcb6c
   152b4:	e3400003 	movt	r0, #3
   152b8:	e3a020ab 	mov	r2, #171	; 0xab
   152bc:	eb005d7f 	bl	2c8c0 <assertion_failed>
   152c0:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   152c4:	e3401003 	movt	r1, #3
   152c8:	e30c0b74 	movw	r0, #52084	; 0xcb74
   152cc:	e3400003 	movt	r0, #3
   152d0:	e3a020ad 	mov	r2, #173	; 0xad
   152d4:	eb005d79 	bl	2c8c0 <assertion_failed>
   152d8:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   152dc:	e3401003 	movt	r1, #3
   152e0:	e30c0b80 	movw	r0, #52096	; 0xcb80
   152e4:	e3400003 	movt	r0, #3
   152e8:	e3a020ae 	mov	r2, #174	; 0xae
   152ec:	eb005d73 	bl	2c8c0 <assertion_failed>
   152f0:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   152f4:	e3401003 	movt	r1, #3
   152f8:	e30c0b8c 	movw	r0, #52108	; 0xcb8c
   152fc:	e3400003 	movt	r0, #3
   15300:	e3a020af 	mov	r2, #175	; 0xaf
   15304:	eb005d6d 	bl	2c8c0 <assertion_failed>

00015308 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>:
   15308:	e92d4010 	push	{r4, lr}
   1530c:	e1a04000 	mov	r4, r0
   15310:	ebffec4d 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15314:	e1a03004 	mov	r3, r4
   15318:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1531c:	e59f101c 	ldr	r1, [pc, #28]	; 15340 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)+0x38>
   15320:	e3a02000 	mov	r2, #0
   15324:	e1a00004 	mov	r0, r4
   15328:	e4831014 	str	r1, [r3], #20
   1532c:	f443078f 	vst1.32	{d16}, [r3]
   15330:	e584201c 	str	r2, [r4, #28]
   15334:	e5842024 	str	r2, [r4, #36]	; 0x24
   15338:	e5842028 	str	r2, [r4, #40]	; 0x28
   1533c:	e8bd8010 	pop	{r4, pc}
   15340:	0003cc70 	.word	0x0003cc70

00015344 <CUSBMIDIHostDevice::StartRequest()>:
   15344:	e5903018 	ldr	r3, [r0, #24]
   15348:	e92d4070 	push	{r4, r5, r6, lr}
   1534c:	e3530000 	cmp	r3, #0
   15350:	e24dd008 	sub	sp, sp, #8
   15354:	0a000020 	beq	153dc <CUSBMIDIHostDevice::StartRequest()+0x98>
   15358:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1535c:	e1a04000 	mov	r4, r0
   15360:	e3530000 	cmp	r3, #0
   15364:	0a000022 	beq	153f4 <CUSBMIDIHostDevice::StartRequest()+0xb0>
   15368:	e1d032b0 	ldrh	r3, [r0, #32]
   1536c:	e3530000 	cmp	r3, #0
   15370:	0a000025 	beq	1540c <CUSBMIDIHostDevice::StartRequest()+0xc8>
   15374:	e3a00070 	mov	r0, #112	; 0x70
   15378:	e3a06000 	mov	r6, #0
   1537c:	eb0004e3 	bl	16710 <CUSBRequest::operator new(unsigned int)>
   15380:	e1d432b0 	ldrh	r3, [r4, #32]
   15384:	e58d6000 	str	r6, [sp]
   15388:	e1a05000 	mov	r5, r0
   1538c:	e5941018 	ldr	r1, [r4, #24]
   15390:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   15394:	eb000413 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15398:	e1a03004 	mov	r3, r4
   1539c:	e1a02006 	mov	r2, r6
   153a0:	e1a00005 	mov	r0, r5
   153a4:	e305165c 	movw	r1, #22108	; 0x565c
   153a8:	e3401001 	movt	r1, #1
   153ac:	eb0004b8 	bl	16694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   153b0:	e1a00005 	mov	r0, r5
   153b4:	eb0004d0 	bl	166fc <CUSBRequest::SetCompleteOnNAK()>
   153b8:	e1a00004 	mov	r0, r4
   153bc:	ebffec9b 	bl	10630 <CUSBFunction::GetHost() const>
   153c0:	e5903000 	ldr	r3, [r0]
   153c4:	e1a02006 	mov	r2, r6
   153c8:	e1a01005 	mov	r1, r5
   153cc:	e5933014 	ldr	r3, [r3, #20]
   153d0:	e28dd008 	add	sp, sp, #8
   153d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   153d8:	e12fff13 	bx	r3
   153dc:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   153e0:	e3401003 	movt	r1, #3
   153e4:	e30c0ba0 	movw	r0, #52128	; 0xcba0
   153e8:	e3400003 	movt	r0, #3
   153ec:	e3a020be 	mov	r2, #190	; 0xbe
   153f0:	eb005d32 	bl	2c8c0 <assertion_failed>
   153f4:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   153f8:	e3401003 	movt	r1, #3
   153fc:	e30c0bb4 	movw	r0, #52148	; 0xcbb4
   15400:	e3400003 	movt	r0, #3
   15404:	e3a020bf 	mov	r2, #191	; 0xbf
   15408:	eb005d2c 	bl	2c8c0 <assertion_failed>
   1540c:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15410:	e3401003 	movt	r1, #3
   15414:	e30c0bcc 	movw	r0, #52172	; 0xcbcc
   15418:	e3400003 	movt	r0, #3
   1541c:	e3a020c1 	mov	r2, #193	; 0xc1
   15420:	eb005d26 	bl	2c8c0 <assertion_failed>

00015424 <CUSBMIDIHostDevice::TimerStub(unsigned int, void*, void*)>:
   15424:	e1a03000 	mov	r3, r0
   15428:	e92d4010 	push	{r4, lr}
   1542c:	e2520000 	subs	r0, r2, #0
   15430:	0a000006 	beq	15450 <CUSBMIDIHostDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   15434:	e5902028 	ldr	r2, [r0, #40]	; 0x28
   15438:	e1530002 	cmp	r3, r2
   1543c:	1a000009 	bne	15468 <CUSBMIDIHostDevice::TimerStub(unsigned int, void*, void*)+0x44>
   15440:	e3a03000 	mov	r3, #0
   15444:	e5803028 	str	r3, [r0, #40]	; 0x28
   15448:	e8bd4010 	pop	{r4, lr}
   1544c:	eaffffbc 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   15450:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15454:	e3401003 	movt	r1, #3
   15458:	e30a0a18 	movw	r0, #43544	; 0xaa18
   1545c:	e3400003 	movt	r0, #3
   15460:	e3002107 	movw	r2, #263	; 0x107
   15464:	eb005d15 	bl	2c8c0 <assertion_failed>
   15468:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   1546c:	e3401003 	movt	r1, #3
   15470:	e30c0be0 	movw	r0, #52192	; 0xcbe0
   15474:	e3400003 	movt	r0, #3
   15478:	e3a020fe 	mov	r2, #254	; 0xfe
   1547c:	eb005d0f 	bl	2c8c0 <assertion_failed>

00015480 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>:
   15480:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15484:	e2514000 	subs	r4, r1, #0
   15488:	e24dd014 	sub	sp, sp, #20
   1548c:	0a000054 	beq	155e4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x164>
   15490:	e5903014 	ldr	r3, [r0, #20]
   15494:	e1a06000 	mov	r6, r0
   15498:	e3530000 	cmp	r3, #0
   1549c:	0a000056 	beq	155fc <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x17c>
   154a0:	e1a00004 	mov	r0, r4
   154a4:	eb000404 	bl	164bc <CUSBRequest::GetStatus() const>
   154a8:	e3500000 	cmp	r0, #0
   154ac:	0a000019 	beq	15518 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x98>
   154b0:	e1a00004 	mov	r0, r4
   154b4:	eb000402 	bl	164c4 <CUSBRequest::GetResultLength() const>
   154b8:	e3100003 	tst	r0, #3
   154bc:	1a000015 	bne	15518 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x98>
   154c0:	e5965024 	ldr	r5, [r6, #36]	; 0x24
   154c4:	e3550000 	cmp	r5, #0
   154c8:	0a000051 	beq	15614 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x194>
   154cc:	e5967014 	ldr	r7, [r6, #20]
   154d0:	e1a00004 	mov	r0, r4
   154d4:	eb0003fa 	bl	164c4 <CUSBRequest::GetResultLength() const>
   154d8:	e1a01005 	mov	r1, r5
   154dc:	e1a02000 	mov	r2, r0
   154e0:	e1a00007 	mov	r0, r7
   154e4:	eb0022cb 	bl	1e018 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   154e8:	e1a05000 	mov	r5, r0
   154ec:	e1a00004 	mov	r0, r4
   154f0:	eb0003e0 	bl	16478 <CUSBRequest::~CUSBRequest()>
   154f4:	e3a01070 	mov	r1, #112	; 0x70
   154f8:	e1a00004 	mov	r0, r4
   154fc:	eb000499 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   15500:	e3550000 	cmp	r5, #0
   15504:	0a00000c 	beq	1553c <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   15508:	e1a00006 	mov	r0, r6
   1550c:	e28dd014 	add	sp, sp, #20
   15510:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   15514:	eaffff8a 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   15518:	e5960014 	ldr	r0, [r6, #20]
   1551c:	eb002300 	bl	1e124 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>
   15520:	e3500000 	cmp	r0, #0
   15524:	1a000017 	bne	15588 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x108>
   15528:	e1a00004 	mov	r0, r4
   1552c:	eb0003d1 	bl	16478 <CUSBRequest::~CUSBRequest()>
   15530:	e3a01070 	mov	r1, #112	; 0x70
   15534:	e1a00004 	mov	r0, r4
   15538:	eb00048a 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   1553c:	eb00654c 	bl	2ea74 <CKernelOptions::Get()>
   15540:	eb006521 	bl	2e9cc <CKernelOptions::GetUSBBoost() const>
   15544:	e3500000 	cmp	r0, #0
   15548:	1affffee 	bne	15508 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x88>
   1554c:	e5964028 	ldr	r4, [r6, #40]	; 0x28
   15550:	e3540000 	cmp	r4, #0
   15554:	1a000034 	bne	1562c <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1ac>
   15558:	eb00818e 	bl	35b98 <CTimer::Get()>
   1555c:	e1a03004 	mov	r3, r4
   15560:	e3a01001 	mov	r1, #1
   15564:	e58d6000 	str	r6, [sp]
   15568:	e3052424 	movw	r2, #21540	; 0x5424
   1556c:	e3402001 	movt	r2, #1
   15570:	eb007f9d 	bl	353ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   15574:	e3500000 	cmp	r0, #0
   15578:	e5860028 	str	r0, [r6, #40]	; 0x28
   1557c:	0a000030 	beq	15644 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1c4>
   15580:	e28dd014 	add	sp, sp, #20
   15584:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15588:	e1a00004 	mov	r0, r4
   1558c:	eb0003ca 	bl	164bc <CUSBRequest::GetStatus() const>
   15590:	e2505000 	subs	r5, r0, #0
   15594:	1affffe3 	bne	15528 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa8>
   15598:	e1a00004 	mov	r0, r4
   1559c:	eb0003d4 	bl	164f4 <CUSBRequest::GetUSBError() const>
   155a0:	e3500009 	cmp	r0, #9
   155a4:	0affffdf 	beq	15528 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa8>
   155a8:	e3a0900b 	mov	r9, #11
   155ac:	e3a08078 	mov	r8, #120	; 0x78
   155b0:	e3e0704f 	mvn	r7, #79	; 0x4f
   155b4:	e1873005 	orr	r3, r7, r5
   155b8:	e5960014 	ldr	r0, [r6, #20]
   155bc:	e2855001 	add	r5, r5, #1
   155c0:	e3a02004 	mov	r2, #4
   155c4:	e28d100c 	add	r1, sp, #12
   155c8:	e5cd900c 	strb	r9, [sp, #12]
   155cc:	e1cd80be 	strh	r8, [sp, #14]
   155d0:	e5cd300d 	strb	r3, [sp, #13]
   155d4:	eb00228f 	bl	1e018 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   155d8:	e3550010 	cmp	r5, #16
   155dc:	1afffff4 	bne	155b4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x134>
   155e0:	eaffffd0 	b	15528 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa8>
   155e4:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   155e8:	e3401003 	movt	r1, #3
   155ec:	e30a0b00 	movw	r0, #43776	; 0xab00
   155f0:	e3400003 	movt	r0, #3
   155f4:	e3a020cd 	mov	r2, #205	; 0xcd
   155f8:	eb005cb0 	bl	2c8c0 <assertion_failed>
   155fc:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15600:	e3401003 	movt	r1, #3
   15604:	e30c0bf4 	movw	r0, #52212	; 0xcbf4
   15608:	e3400003 	movt	r0, #3
   1560c:	e3a020ce 	mov	r2, #206	; 0xce
   15610:	eb005caa 	bl	2c8c0 <assertion_failed>
   15614:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15618:	e3401003 	movt	r1, #3
   1561c:	e30c0bb4 	movw	r0, #52148	; 0xcbb4
   15620:	e3400003 	movt	r0, #3
   15624:	e3a020d5 	mov	r2, #213	; 0xd5
   15628:	eb005ca4 	bl	2c8c0 <assertion_failed>
   1562c:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15630:	e3401003 	movt	r1, #3
   15634:	e30c0c08 	movw	r0, #52232	; 0xcc08
   15638:	e3400003 	movt	r0, #3
   1563c:	e3a020ee 	mov	r2, #238	; 0xee
   15640:	eb005c9e 	bl	2c8c0 <assertion_failed>
   15644:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15648:	e3401003 	movt	r1, #3
   1564c:	e30c0c18 	movw	r0, #52248	; 0xcc18
   15650:	e3400003 	movt	r0, #3
   15654:	e3a020f0 	mov	r2, #240	; 0xf0
   15658:	eb005c98 	bl	2c8c0 <assertion_failed>

0001565c <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1565c:	e1a01000 	mov	r1, r0
   15660:	e2520000 	subs	r0, r2, #0
   15664:	0a000000 	beq	1566c <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   15668:	eaffff84 	b	15480 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>
   1566c:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15670:	e3401003 	movt	r1, #3
   15674:	e30a0a18 	movw	r0, #43544	; 0xaa18
   15678:	e3400003 	movt	r0, #3
   1567c:	e3a020f7 	mov	r2, #247	; 0xf7
   15680:	e92d4010 	push	{r4, lr}
   15684:	eb005c8d 	bl	2c8c0 <assertion_failed>

00015688 <CUSBMIDIHostDevice::TimerHandler(unsigned int)>:
   15688:	e5902028 	ldr	r2, [r0, #40]	; 0x28
   1568c:	e1520001 	cmp	r2, r1
   15690:	1a000002 	bne	156a0 <CUSBMIDIHostDevice::TimerHandler(unsigned int)+0x18>
   15694:	e3a02000 	mov	r2, #0
   15698:	e5802028 	str	r2, [r0, #40]	; 0x28
   1569c:	eaffff28 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   156a0:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   156a4:	e3401003 	movt	r1, #3
   156a8:	e30c0be0 	movw	r0, #52192	; 0xcbe0
   156ac:	e3400003 	movt	r0, #3
   156b0:	e3a020fe 	mov	r2, #254	; 0xfe
   156b4:	e92d4010 	push	{r4, lr}
   156b8:	eb005c80 	bl	2c8c0 <assertion_failed>

000156bc <CUSBMIDIHostDevice::Configure()>:
   156bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   156c0:	e1a05000 	mov	r5, r0
   156c4:	ebffebb8 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   156c8:	e3500000 	cmp	r0, #0
   156cc:	0a00004a 	beq	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   156d0:	e1a00005 	mov	r0, r5
   156d4:	ebffebc0 	bl	105dc <CUSBFunction::GetDevice() const>
   156d8:	ebffe438 	bl	e7c0 <CUSBDevice::GetDeviceDescriptor() const>
   156dc:	e3500000 	cmp	r0, #0
   156e0:	0a000067 	beq	15884 <CUSBMIDIHostDevice::Configure()+0x1c8>
   156e4:	e1d020b8 	ldrh	r2, [r0, #8]
   156e8:	e3003582 	movw	r3, #1410	; 0x582
   156ec:	e1520003 	cmp	r2, r3
   156f0:	13a07000 	movne	r7, #0
   156f4:	0300312a 	movweq	r3, #298	; 0x12a
   156f8:	01d070ba 	ldrheq	r7, [r0, #10]
   156fc:	00477003 	subeq	r7, r7, r3
   15700:	016f7f17 	clzeq	r7, r7
   15704:	01a072a7 	lsreq	r7, r7, #5
   15708:	e3a01005 	mov	r1, #5
   1570c:	e1a00005 	mov	r0, r5
   15710:	ebffebd1 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   15714:	e2504000 	subs	r4, r0, #0
   15718:	0a00003c 	beq	15810 <CUSBMIDIHostDevice::Configure()+0x154>
   1571c:	e5d43003 	ldrb	r3, [r4, #3]
   15720:	e203303e 	and	r3, r3, #62	; 0x3e
   15724:	e3530002 	cmp	r3, #2
   15728:	1afffff6 	bne	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   1572c:	e3570000 	cmp	r7, #0
   15730:	0a000010 	beq	15778 <CUSBMIDIHostDevice::Configure()+0xbc>
   15734:	e1d430d2 	ldrsb	r3, [r4, #2]
   15738:	e3530000 	cmp	r3, #0
   1573c:	ba000017 	blt	157a0 <CUSBMIDIHostDevice::Configure()+0xe4>
   15740:	e595301c 	ldr	r3, [r5, #28]
   15744:	e3530000 	cmp	r3, #0
   15748:	1a00002b 	bne	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   1574c:	e3a00014 	mov	r0, #20
   15750:	eb008551 	bl	36c9c <operator new(unsigned int)>
   15754:	e1a06000 	mov	r6, r0
   15758:	e1a00005 	mov	r0, r5
   1575c:	ebffeb9e 	bl	105dc <CUSBFunction::GetDevice() const>
   15760:	e1a02004 	mov	r2, r4
   15764:	e1a01000 	mov	r1, r0
   15768:	e1a00006 	mov	r0, r6
   1576c:	ebffe9a9 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15770:	e585601c 	str	r6, [r5, #28]
   15774:	eaffffe3 	b	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   15778:	e3a01025 	mov	r1, #37	; 0x25
   1577c:	e1a00005 	mov	r0, r5
   15780:	ebffebb5 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   15784:	e3500000 	cmp	r0, #0
   15788:	0affffde 	beq	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   1578c:	e5d43000 	ldrb	r3, [r4]
   15790:	e0843003 	add	r3, r4, r3
   15794:	e1500003 	cmp	r0, r3
   15798:	1affffda 	bne	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   1579c:	eaffffe4 	b	15734 <CUSBMIDIHostDevice::Configure()+0x78>
   157a0:	e5953018 	ldr	r3, [r5, #24]
   157a4:	e3530000 	cmp	r3, #0
   157a8:	1a000013 	bne	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   157ac:	e3a00014 	mov	r0, #20
   157b0:	eb008539 	bl	36c9c <operator new(unsigned int)>
   157b4:	e1a06000 	mov	r6, r0
   157b8:	e1a00005 	mov	r0, r5
   157bc:	ebffeb86 	bl	105dc <CUSBFunction::GetDevice() const>
   157c0:	e1a02004 	mov	r2, r4
   157c4:	e1a01000 	mov	r1, r0
   157c8:	e1a00006 	mov	r0, r6
   157cc:	ebffe991 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   157d0:	e5856018 	str	r6, [r5, #24]
   157d4:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   157d8:	e30f0ffc 	movw	r0, #65532	; 0xfffc
   157dc:	e1d430b4 	ldrh	r3, [r4, #4]
   157e0:	e3520000 	cmp	r2, #0
   157e4:	e0000003 	and	r0, r0, r3
   157e8:	e1c502b0 	strh	r0, [r5, #32]
   157ec:	1a00001e 	bne	1586c <CUSBMIDIHostDevice::Configure()+0x1b0>
   157f0:	eb00852f 	bl	36cb4 <operator new[](unsigned int)>
   157f4:	e5850024 	str	r0, [r5, #36]	; 0x24
   157f8:	eaffffc2 	b	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   157fc:	e59f10cc 	ldr	r1, [pc, #204]	; 158d0 <CUSBMIDIHostDevice::Configure()+0x214>
   15800:	e1a00005 	mov	r0, r5
   15804:	ebffeb9f 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   15808:	e3a00000 	mov	r0, #0
   1580c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15810:	e5953018 	ldr	r3, [r5, #24]
   15814:	e3530000 	cmp	r3, #0
   15818:	0afffff7 	beq	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   1581c:	e1a00005 	mov	r0, r5
   15820:	ebffea9a 	bl	10290 <CUSBFunction::Configure()>
   15824:	e3500000 	cmp	r0, #0
   15828:	0a00001b 	beq	1589c <CUSBMIDIHostDevice::Configure()+0x1e0>
   1582c:	e5953014 	ldr	r3, [r5, #20]
   15830:	e3530000 	cmp	r3, #0
   15834:	1a00001f 	bne	158b8 <CUSBMIDIHostDevice::Configure()+0x1fc>
   15838:	e3a00020 	mov	r0, #32
   1583c:	eb008516 	bl	36c9c <operator new(unsigned int)>
   15840:	e1a04000 	mov	r4, r0
   15844:	eb0020c4 	bl	1db5c <CUSBMIDIDevice::CUSBMIDIDevice()>
   15848:	e1a00004 	mov	r0, r4
   1584c:	e1a02005 	mov	r2, r5
   15850:	e5854014 	str	r4, [r5, #20]
   15854:	e3051210 	movw	r1, #21008	; 0x5210
   15858:	e3401001 	movt	r1, #1
   1585c:	eb00221c 	bl	1e0d4 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>
   15860:	e1a00005 	mov	r0, r5
   15864:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   15868:	eafffeb5 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   1586c:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15870:	e3401003 	movt	r1, #3
   15874:	e30c0c3c 	movw	r0, #52284	; 0xcc3c
   15878:	e3400003 	movt	r0, #3
   1587c:	e3a0207e 	mov	r2, #126	; 0x7e
   15880:	eb005c0e 	bl	2c8c0 <assertion_failed>
   15884:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   15888:	e3401003 	movt	r1, #3
   1588c:	e30c0c28 	movw	r0, #52264	; 0xcc28
   15890:	e3400003 	movt	r0, #3
   15894:	e3a02050 	mov	r2, #80	; 0x50
   15898:	eb005c08 	bl	2c8c0 <assertion_failed>
   1589c:	eb006684 	bl	2f2b4 <CLogger::Get()>
   158a0:	e59f1028 	ldr	r1, [pc, #40]	; 158d0 <CUSBMIDIHostDevice::Configure()+0x214>
   158a4:	e3a02001 	mov	r2, #1
   158a8:	e30b3eac 	movw	r3, #48812	; 0xbeac
   158ac:	e3403003 	movt	r3, #3
   158b0:	eb00684d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   158b4:	eaffffd3 	b	15808 <CUSBMIDIHostDevice::Configure()+0x14c>
   158b8:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
   158bc:	e3401003 	movt	r1, #3
   158c0:	e30c0c54 	movw	r0, #52308	; 0xcc54
   158c4:	e3400003 	movt	r0, #3
   158c8:	e3a020a0 	mov	r2, #160	; 0xa0
   158cc:	eb005bfb 	bl	2c8c0 <assertion_failed>
   158d0:	0003cc9c 	.word	0x0003cc9c

000158d4 <CUSBMouseDevice::~CUSBMouseDevice()>:
   158d4:	e92d4010 	push	{r4, lr}
   158d8:	e1a04000 	mov	r4, r0
   158dc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   158e0:	e59f3044 	ldr	r3, [pc, #68]	; 1592c <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   158e4:	e3500000 	cmp	r0, #0
   158e8:	e5843000 	str	r3, [r4]
   158ec:	0a000002 	beq	158fc <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   158f0:	e5903000 	ldr	r3, [r0]
   158f4:	e5933004 	ldr	r3, [r3, #4]
   158f8:	e12fff33 	blx	r3
   158fc:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   15900:	e3a03000 	mov	r3, #0
   15904:	e5843024 	str	r3, [r4, #36]	; 0x24
   15908:	e1500003 	cmp	r0, r3
   1590c:	0a000000 	beq	15914 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   15910:	eb0084f3 	bl	36ce4 <operator delete[](void*)>
   15914:	e3a03000 	mov	r3, #0
   15918:	e1a00004 	mov	r0, r4
   1591c:	e5843028 	str	r3, [r4, #40]	; 0x28
   15920:	ebfff5f9 	bl	1310c <CUSBHIDDevice::~CUSBHIDDevice()>
   15924:	e1a00004 	mov	r0, r4
   15928:	e8bd8010 	pop	{r4, pc}
   1592c:	0003ccf4 	.word	0x0003ccf4

00015930 <CUSBMouseDevice::~CUSBMouseDevice()>:
   15930:	e92d4010 	push	{r4, lr}
   15934:	e1a04000 	mov	r4, r0
   15938:	ebffffe5 	bl	158d4 <CUSBMouseDevice::~CUSBMouseDevice()>
   1593c:	e1a00004 	mov	r0, r4
   15940:	e3a01058 	mov	r1, #88	; 0x58
   15944:	eb0084ec 	bl	36cfc <operator delete(void*, unsigned int)>
   15948:	e1a00004 	mov	r0, r4
   1594c:	e8bd8010 	pop	{r4, pc}

00015950 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   15950:	e92d4010 	push	{r4, lr}
   15954:	e3a02000 	mov	r2, #0
   15958:	e1a04000 	mov	r4, r0
   1595c:	ebfff5d4 	bl	130b4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   15960:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   15964:	e59f200c 	ldr	r2, [pc, #12]	; 15978 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x28>
   15968:	e1a00004 	mov	r0, r4
   1596c:	e4842024 	str	r2, [r4], #36	; 0x24
   15970:	f444078f 	vst1.32	{d16}, [r4]
   15974:	e8bd8010 	pop	{r4, pc}
   15978:	0003ccf4 	.word	0x0003ccf4

0001597c <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>:
   1597c:	e3510000 	cmp	r1, #0
   15980:	e92d4010 	push	{r4, lr}
   15984:	0a000017 	beq	159e8 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x6c>
   15988:	e3530020 	cmp	r3, #32
   1598c:	8a00001b 	bhi	15a00 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x84>
   15990:	e3530000 	cmp	r3, #0
   15994:	0a000011 	beq	159e0 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x64>
   15998:	e2020007 	and	r0, r2, #7
   1599c:	e081c1a2 	add	ip, r1, r2, lsr #3
   159a0:	e3530018 	cmp	r3, #24
   159a4:	e79121a2 	ldr	r2, [r1, r2, lsr #3]
   159a8:	9a000008 	bls	159d0 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x54>
   159ac:	e59c1003 	ldr	r1, [ip, #3]
   159b0:	e2433018 	sub	r3, r3, #24
   159b4:	e3e0c000 	mvn	ip, #0
   159b8:	e1a02032 	lsr	r2, r2, r0
   159bc:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
   159c0:	e1a01031 	lsr	r1, r1, r0
   159c4:	e1c1331c 	bic	r3, r1, ip, lsl r3
   159c8:	e1820c03 	orr	r0, r2, r3, lsl #24
   159cc:	e8bd8010 	pop	{r4, pc}
   159d0:	e1a02032 	lsr	r2, r2, r0
   159d4:	e3e01000 	mvn	r1, #0
   159d8:	e1c20311 	bic	r0, r2, r1, lsl r3
   159dc:	e8bd8010 	pop	{r4, pc}
   159e0:	e1a00003 	mov	r0, r3
   159e4:	e8bd8010 	pop	{r4, pc}
   159e8:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   159ec:	e3401003 	movt	r1, #3
   159f0:	e30c019c 	movw	r0, #49564	; 0xc19c
   159f4:	e3400003 	movt	r0, #3
   159f8:	e3a020ac 	mov	r2, #172	; 0xac
   159fc:	eb005baf 	bl	2c8c0 <assertion_failed>
   15a00:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   15a04:	e3401003 	movt	r1, #3
   15a08:	e30c01a8 	movw	r0, #49576	; 0xc1a8
   15a0c:	e3400003 	movt	r0, #3
   15a10:	e3a020ad 	mov	r2, #173	; 0xad
   15a14:	eb005ba9 	bl	2c8c0 <assertion_failed>

00015a18 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>:
   15a18:	e3510000 	cmp	r1, #0
   15a1c:	e92d4010 	push	{r4, lr}
   15a20:	0a00001f 	beq	15aa4 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x8c>
   15a24:	e3530020 	cmp	r3, #32
   15a28:	8a000023 	bhi	15abc <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0xa4>
   15a2c:	e3530000 	cmp	r3, #0
   15a30:	0a000015 	beq	15a8c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x74>
   15a34:	e79101a2 	ldr	r0, [r1, r2, lsr #3]
   15a38:	e202c007 	and	ip, r2, #7
   15a3c:	e081e1a2 	add	lr, r1, r2, lsr #3
   15a40:	e3530018 	cmp	r3, #24
   15a44:	9a000012 	bls	15a94 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x7c>
   15a48:	e59e2003 	ldr	r2, [lr, #3]
   15a4c:	e2431018 	sub	r1, r3, #24
   15a50:	e1a00c30 	lsr	r0, r0, ip
   15a54:	e3530020 	cmp	r3, #32
   15a58:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   15a5c:	e1a02c32 	lsr	r2, r2, ip
   15a60:	e3e0c000 	mvn	ip, #0
   15a64:	e1c2211c 	bic	r2, r2, ip, lsl r1
   15a68:	e1800c02 	orr	r0, r0, r2, lsl #24
   15a6c:	08bd8010 	popeq	{r4, pc}
   15a70:	e3a01001 	mov	r1, #1
   15a74:	e2432001 	sub	r2, r3, #1
   15a78:	e0102211 	ands	r2, r0, r1, lsl r2
   15a7c:	11a01311 	lslne	r1, r1, r3
   15a80:	12611000 	rsbne	r1, r1, #0
   15a84:	11800001 	orrne	r0, r0, r1
   15a88:	e8bd8010 	pop	{r4, pc}
   15a8c:	e1a00003 	mov	r0, r3
   15a90:	e8bd8010 	pop	{r4, pc}
   15a94:	e1a00c30 	lsr	r0, r0, ip
   15a98:	e3e02000 	mvn	r2, #0
   15a9c:	e1c00312 	bic	r0, r0, r2, lsl r3
   15aa0:	eafffff2 	b	15a70 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x58>
   15aa4:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   15aa8:	e3401003 	movt	r1, #3
   15aac:	e30c019c 	movw	r0, #49564	; 0xc19c
   15ab0:	e3400003 	movt	r0, #3
   15ab4:	e3a020cf 	mov	r2, #207	; 0xcf
   15ab8:	eb005b80 	bl	2c8c0 <assertion_failed>
   15abc:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   15ac0:	e3401003 	movt	r1, #3
   15ac4:	e30c01a8 	movw	r0, #49576	; 0xc1a8
   15ac8:	e3400003 	movt	r0, #3
   15acc:	e3a020d0 	mov	r2, #208	; 0xd0
   15ad0:	eb005b7a 	bl	2c8c0 <assertion_failed>

00015ad4 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   15ad4:	e92d4770 	push	{r4, r5, r6, r8, r9, sl, lr}
   15ad8:	e2515000 	subs	r5, r1, #0
   15adc:	e24dd00c 	sub	sp, sp, #12
   15ae0:	0a000003 	beq	15af4 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   15ae4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   15ae8:	e1a04000 	mov	r4, r0
   15aec:	e1530002 	cmp	r3, r2
   15af0:	0a000001 	beq	15afc <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x28>
   15af4:	e28dd00c 	add	sp, sp, #12
   15af8:	e8bd8770 	pop	{r4, r5, r6, r8, r9, sl, pc}
   15afc:	e590a024 	ldr	sl, [r0, #36]	; 0x24
   15b00:	e35a0000 	cmp	sl, #0
   15b04:	0afffffa 	beq	15af4 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   15b08:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   15b0c:	e3e0907e 	mvn	r9, #126	; 0x7e
   15b10:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   15b14:	ebffff98 	bl	1597c <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>
   15b18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   15b1c:	e1a08000 	mov	r8, r0
   15b20:	e5942044 	ldr	r2, [r4, #68]	; 0x44
   15b24:	e1a01005 	mov	r1, r5
   15b28:	e1a00004 	mov	r0, r4
   15b2c:	ebffffb9 	bl	15a18 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   15b30:	e1500009 	cmp	r0, r9
   15b34:	a1a06000 	movge	r6, r0
   15b38:	b1a06009 	movlt	r6, r9
   15b3c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   15b40:	e356007f 	cmp	r6, #127	; 0x7f
   15b44:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   15b48:	e1a01005 	mov	r1, r5
   15b4c:	e1a00004 	mov	r0, r4
   15b50:	a3a0607f 	movge	r6, #127	; 0x7f
   15b54:	ebffffaf 	bl	15a18 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   15b58:	e1500009 	cmp	r0, r9
   15b5c:	a1a09000 	movge	r9, r0
   15b60:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   15b64:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   15b68:	e359007f 	cmp	r9, #127	; 0x7f
   15b6c:	e1a01005 	mov	r1, r5
   15b70:	e1a00004 	mov	r0, r4
   15b74:	a3a0907f 	movge	r9, #127	; 0x7f
   15b78:	ebffffa6 	bl	15a18 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   15b7c:	e2081001 	and	r1, r8, #1
   15b80:	e3180002 	tst	r8, #2
   15b84:	13811002 	orrne	r1, r1, #2
   15b88:	e3180004 	tst	r8, #4
   15b8c:	13811004 	orrne	r1, r1, #4
   15b90:	e3180008 	tst	r8, #8
   15b94:	13811008 	orrne	r1, r1, #8
   15b98:	e3180010 	tst	r8, #16
   15b9c:	e1a0c000 	mov	ip, r0
   15ba0:	13811010 	orrne	r1, r1, #16
   15ba4:	e1a03009 	mov	r3, r9
   15ba8:	e1a02006 	mov	r2, r6
   15bac:	e1a0000a 	mov	r0, sl
   15bb0:	e58dc000 	str	ip, [sp]
   15bb4:	eb0025b5 	bl	1f290 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   15bb8:	e28dd00c 	add	sp, sp, #12
   15bbc:	e8bd8770 	pop	{r4, r5, r6, r8, r9, sl, pc}

00015bc0 <CUSBMouseDevice::DecodeReport()>:
   15bc0:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   15bc4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc8:	e5902028 	ldr	r2, [r0, #40]	; 0x28
   15bcc:	e24dd024 	sub	sp, sp, #36	; 0x24
   15bd0:	e28d3010 	add	r3, sp, #16
   15bd4:	e3520000 	cmp	r2, #0
   15bd8:	f4430a1f 	vst1.8	{d16-d17}, [r3 :64]
   15bdc:	0a0000b2 	beq	15eac <CUSBMouseDevice::DecodeReport()+0x2ec>
   15be0:	e1d032bc 	ldrh	r3, [r0, #44]	; 0x2c
   15be4:	e1a0b000 	mov	fp, r0
   15be8:	e3530000 	cmp	r3, #0
   15bec:	0a0000b4 	beq	15ec4 <CUSBMouseDevice::DecodeReport()+0x304>
   15bf0:	e3a0c000 	mov	ip, #0
   15bf4:	e58db004 	str	fp, [sp, #4]
   15bf8:	e1a0000c 	mov	r0, ip
   15bfc:	e1a0400c 	mov	r4, ip
   15c00:	e1a0100c 	mov	r1, ip
   15c04:	e1a0a00c 	mov	sl, ip
   15c08:	e1a0500c 	mov	r5, ip
   15c0c:	e1a0700c 	mov	r7, ip
   15c10:	e1a0e00c 	mov	lr, ip
   15c14:	ea00000c 	b	15c4c <CUSBMouseDevice::DecodeReport()+0x8c>
   15c18:	e3560084 	cmp	r6, #132	; 0x84
   15c1c:	1a00005d 	bne	15d98 <CUSBMouseDevice::DecodeReport()+0x1d8>
   15c20:	e35c0000 	cmp	ip, #0
   15c24:	0a000006 	beq	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15c28:	e35a0000 	cmp	sl, #0
   15c2c:	1048000a 	subne	r0, r8, sl
   15c30:	01a0a008 	moveq	sl, r8
   15c34:	116f0f10 	clzne	r0, r0
   15c38:	028ee008 	addeq	lr, lr, #8
   15c3c:	01a0000c 	moveq	r0, ip
   15c40:	11a002a0 	lsrne	r0, r0, #5
   15c44:	e3530000 	cmp	r3, #0
   15c48:	0a00002c 	beq	15d00 <CUSBMouseDevice::DecodeReport()+0x140>
   15c4c:	e1d260d0 	ldrsb	r6, [r2]
   15c50:	e2068003 	and	r8, r6, #3
   15c54:	e3580001 	cmp	r8, #1
   15c58:	0a000049 	beq	15d84 <CUSBMouseDevice::DecodeReport()+0x1c4>
   15c5c:	e3580002 	cmp	r8, #2
   15c60:	0a000040 	beq	15d68 <CUSBMouseDevice::DecodeReport()+0x1a8>
   15c64:	e3580000 	cmp	r8, #0
   15c68:	0a000036 	beq	15d48 <CUSBMouseDevice::DecodeReport()+0x188>
   15c6c:	e1d280d3 	ldrsb	r8, [r2, #3]
   15c70:	e2433005 	sub	r3, r3, #5
   15c74:	e1d290d2 	ldrsb	r9, [r2, #2]
   15c78:	e2822005 	add	r2, r2, #5
   15c7c:	e6ff3073 	uxth	r3, r3
   15c80:	e1a08808 	lsl	r8, r8, #16
   15c84:	e1888409 	orr	r8, r8, r9, lsl #8
   15c88:	e15290d4 	ldrsb	r9, [r2, #-4]
   15c8c:	e1888009 	orr	r8, r8, r9
   15c90:	e15290d1 	ldrsb	r9, [r2, #-1]
   15c94:	e1888c09 	orr	r8, r8, r9, lsl #24
   15c98:	e20660fc 	and	r6, r6, #252	; 0xfc
   15c9c:	e35600a0 	cmp	r6, #160	; 0xa0
   15ca0:	0a00002e 	beq	15d60 <CUSBMouseDevice::DecodeReport()+0x1a0>
   15ca4:	ca000022 	bgt	15d34 <CUSBMouseDevice::DecodeReport()+0x174>
   15ca8:	e3560008 	cmp	r6, #8
   15cac:	1affffd9 	bne	15c18 <CUSBMouseDevice::DecodeReport()+0x58>
   15cb0:	e3580002 	cmp	r8, #2
   15cb4:	03a0c001 	moveq	ip, #1
   15cb8:	0affffe1 	beq	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15cbc:	e3580001 	cmp	r8, #1
   15cc0:	0a00004e 	beq	15e00 <CUSBMouseDevice::DecodeReport()+0x240>
   15cc4:	e3500000 	cmp	r0, #0
   15cc8:	0affffdd 	beq	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15ccc:	e3580031 	cmp	r8, #49	; 0x31
   15cd0:	0a000011 	beq	15d1c <CUSBMouseDevice::DecodeReport()+0x15c>
   15cd4:	e3580038 	cmp	r8, #56	; 0x38
   15cd8:	0a00004b 	beq	15e0c <CUSBMouseDevice::DecodeReport()+0x24c>
   15cdc:	e3580030 	cmp	r8, #48	; 0x30
   15ce0:	1affffd7 	bne	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15ce4:	e28d6020 	add	r6, sp, #32
   15ce8:	e3a08001 	mov	r8, #1
   15cec:	e0866104 	add	r6, r6, r4, lsl #2
   15cf0:	e3530000 	cmp	r3, #0
   15cf4:	e0844008 	add	r4, r4, r8
   15cf8:	e5068010 	str	r8, [r6, #-16]
   15cfc:	1affffd2 	bne	15c4c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d00:	e28ee007 	add	lr, lr, #7
   15d04:	e59db004 	ldr	fp, [sp, #4]
   15d08:	e1a0e1ae 	lsr	lr, lr, #3
   15d0c:	e58ba030 	str	sl, [fp, #48]	; 0x30
   15d10:	e58be034 	str	lr, [fp, #52]	; 0x34
   15d14:	e28dd024 	add	sp, sp, #36	; 0x24
   15d18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d1c:	e3a08002 	mov	r8, #2
   15d20:	e28d6020 	add	r6, sp, #32
   15d24:	e0866814 	add	r6, r6, r4, lsl r8
   15d28:	e2844001 	add	r4, r4, #1
   15d2c:	e5068010 	str	r8, [r6, #-16]
   15d30:	eaffffc3 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15d34:	e35600c0 	cmp	r6, #192	; 0xc0
   15d38:	1affffc1 	bne	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15d3c:	e2511001 	subs	r1, r1, #1
   15d40:	03a00000 	moveq	r0, #0
   15d44:	eaffffbe 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15d48:	e2433001 	sub	r3, r3, #1
   15d4c:	e20660fc 	and	r6, r6, #252	; 0xfc
   15d50:	e2822001 	add	r2, r2, #1
   15d54:	e35600a0 	cmp	r6, #160	; 0xa0
   15d58:	e6ff3073 	uxth	r3, r3
   15d5c:	1affffd0 	bne	15ca4 <CUSBMouseDevice::DecodeReport()+0xe4>
   15d60:	e2811001 	add	r1, r1, #1
   15d64:	eaffffb6 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15d68:	e5d28001 	ldrb	r8, [r2, #1]
   15d6c:	e2433003 	sub	r3, r3, #3
   15d70:	e1d290d2 	ldrsb	r9, [r2, #2]
   15d74:	e2822003 	add	r2, r2, #3
   15d78:	e6ff3073 	uxth	r3, r3
   15d7c:	e1888409 	orr	r8, r8, r9, lsl #8
   15d80:	eaffffc4 	b	15c98 <CUSBMouseDevice::DecodeReport()+0xd8>
   15d84:	e2433002 	sub	r3, r3, #2
   15d88:	e1d280d1 	ldrsb	r8, [r2, #1]
   15d8c:	e2822002 	add	r2, r2, #2
   15d90:	e6ff3073 	uxth	r3, r3
   15d94:	eaffffbf 	b	15c98 <CUSBMouseDevice::DecodeReport()+0xd8>
   15d98:	e3500000 	cmp	r0, #0
   15d9c:	0affffa8 	beq	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15da0:	e3560074 	cmp	r6, #116	; 0x74
   15da4:	01a07008 	moveq	r7, r8
   15da8:	0affffa5 	beq	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15dac:	da000006 	ble	15dcc <CUSBMouseDevice::DecodeReport()+0x20c>
   15db0:	e3560080 	cmp	r6, #128	; 0x80
   15db4:	1a00000e 	bne	15df4 <CUSBMouseDevice::DecodeReport()+0x234>
   15db8:	e2088003 	and	r8, r8, #3
   15dbc:	e3580002 	cmp	r8, #2
   15dc0:	0a000017 	beq	15e24 <CUSBMouseDevice::DecodeReport()+0x264>
   15dc4:	e02ee795 	mla	lr, r5, r7, lr
   15dc8:	eaffff9d 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15dcc:	e3560004 	cmp	r6, #4
   15dd0:	1affff9b 	bne	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15dd4:	e3580009 	cmp	r8, #9
   15dd8:	1affff99 	bne	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15ddc:	e28d6020 	add	r6, sp, #32
   15de0:	e3a08000 	mov	r8, #0
   15de4:	e0866104 	add	r6, r6, r4, lsl #2
   15de8:	e2844001 	add	r4, r4, #1
   15dec:	e5068010 	str	r8, [r6, #-16]
   15df0:	eaffff93 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15df4:	e3560094 	cmp	r6, #148	; 0x94
   15df8:	01a05008 	moveq	r5, r8
   15dfc:	eaffff90 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15e00:	e35a0000 	cmp	sl, #0
   15e04:	03a00001 	moveq	r0, #1
   15e08:	eaffff8d 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15e0c:	e28d6020 	add	r6, sp, #32
   15e10:	e3a08003 	mov	r8, #3
   15e14:	e0866104 	add	r6, r6, r4, lsl #2
   15e18:	e2844001 	add	r4, r4, #1
   15e1c:	e5068010 	str	r8, [r6, #-16]
   15e20:	eaffff87 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x84>
   15e24:	e3540003 	cmp	r4, #3
   15e28:	8a000028 	bhi	15ed0 <CUSBMouseDevice::DecodeReport()+0x310>
   15e2c:	e3540000 	cmp	r4, #0
   15e30:	0a00001b 	beq	15ea4 <CUSBMouseDevice::DecodeReport()+0x2e4>
   15e34:	e28d6010 	add	r6, sp, #16
   15e38:	e59db004 	ldr	fp, [sp, #4]
   15e3c:	e0869104 	add	r9, r6, r4, lsl #2
   15e40:	e1a08006 	mov	r8, r6
   15e44:	e1a0400e 	mov	r4, lr
   15e48:	e58de008 	str	lr, [sp, #8]
   15e4c:	e58d000c 	str	r0, [sp, #12]
   15e50:	ea000008 	b	15e78 <CUSBMouseDevice::DecodeReport()+0x2b8>
   15e54:	e08b6180 	add	r6, fp, r0, lsl #3
   15e58:	e3500000 	cmp	r0, #0
   15e5c:	11a0e007 	movne	lr, r7
   15e60:	01a0e005 	moveq	lr, r5
   15e64:	e1590008 	cmp	r9, r8
   15e68:	e586403c 	str	r4, [r6, #60]	; 0x3c
   15e6c:	e084400e 	add	r4, r4, lr
   15e70:	e586e038 	str	lr, [r6, #56]	; 0x38
   15e74:	0a000008 	beq	15e9c <CUSBMouseDevice::DecodeReport()+0x2dc>
   15e78:	e4980004 	ldr	r0, [r8], #4
   15e7c:	e3500003 	cmp	r0, #3
   15e80:	9afffff3 	bls	15e54 <CUSBMouseDevice::DecodeReport()+0x294>
   15e84:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   15e88:	e3401003 	movt	r1, #3
   15e8c:	e30c0cd4 	movw	r0, #52436	; 0xccd4
   15e90:	e3400003 	movt	r0, #3
   15e94:	e3002169 	movw	r2, #361	; 0x169
   15e98:	eb005a88 	bl	2c8c0 <assertion_failed>
   15e9c:	e59de008 	ldr	lr, [sp, #8]
   15ea0:	e59d000c 	ldr	r0, [sp, #12]
   15ea4:	e3a04000 	mov	r4, #0
   15ea8:	eaffffc5 	b	15dc4 <CUSBMouseDevice::DecodeReport()+0x204>
   15eac:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   15eb0:	e3401003 	movt	r1, #3
   15eb4:	e30c01b8 	movw	r0, #49592	; 0xc1b8
   15eb8:	e3400003 	movt	r0, #3
   15ebc:	e3a020eb 	mov	r2, #235	; 0xeb
   15ec0:	eb005a7e 	bl	2c8c0 <assertion_failed>
   15ec4:	e1a0e003 	mov	lr, r3
   15ec8:	e1a0a003 	mov	sl, r3
   15ecc:	eaffff8e 	b	15d0c <CUSBMouseDevice::DecodeReport()+0x14c>
   15ed0:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   15ed4:	e3401003 	movt	r1, #3
   15ed8:	e30c0cb8 	movw	r0, #52408	; 0xccb8
   15edc:	e3400003 	movt	r0, #3
   15ee0:	e3002165 	movw	r2, #357	; 0x165
   15ee4:	eb005a75 	bl	2c8c0 <assertion_failed>

00015ee8 <CUSBMouseDevice::Configure()>:
   15ee8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15eec:	e3a01021 	mov	r1, #33	; 0x21
   15ef0:	e1a04000 	mov	r4, r0
   15ef4:	e24dd014 	sub	sp, sp, #20
   15ef8:	ebffe9d7 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   15efc:	e2505000 	subs	r5, r0, #0
   15f00:	0a000003 	beq	15f14 <CUSBMouseDevice::Configure()+0x2c>
   15f04:	e1d530b7 	ldrh	r3, [r5, #7]
   15f08:	e6ff0073 	uxth	r0, r3
   15f0c:	e3500000 	cmp	r0, #0
   15f10:	1a000005 	bne	15f2c <CUSBMouseDevice::Configure()+0x44>
   15f14:	e59f1118 	ldr	r1, [pc, #280]	; 16034 <CUSBMouseDevice::Configure()+0x14c>
   15f18:	e1a00004 	mov	r0, r4
   15f1c:	ebffe9d9 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   15f20:	e3a00000 	mov	r0, #0
   15f24:	e28dd014 	add	sp, sp, #20
   15f28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f2c:	e1c432bc 	strh	r3, [r4, #44]	; 0x2c
   15f30:	eb00835f 	bl	36cb4 <operator new[](unsigned int)>
   15f34:	e1a03000 	mov	r3, r0
   15f38:	e1a00004 	mov	r0, r4
   15f3c:	e5843028 	str	r3, [r4, #40]	; 0x28
   15f40:	ebffe9ba 	bl	10630 <CUSBFunction::GetHost() const>
   15f44:	e1a06000 	mov	r6, r0
   15f48:	e1a00004 	mov	r0, r4
   15f4c:	ebffe9ac 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   15f50:	e5d57006 	ldrb	r7, [r5, #6]
   15f54:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   15f58:	e1a05000 	mov	r5, r0
   15f5c:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   15f60:	e1a00004 	mov	r0, r4
   15f64:	ebffea10 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   15f68:	e3a03000 	mov	r3, #0
   15f6c:	e3a0c081 	mov	ip, #129	; 0x81
   15f70:	e58d000c 	str	r0, [sp, #12]
   15f74:	e1a02007 	mov	r2, r7
   15f78:	e1a01005 	mov	r1, r5
   15f7c:	e1a00006 	mov	r0, r6
   15f80:	e58d9004 	str	r9, [sp, #4]
   15f84:	e58d8000 	str	r8, [sp]
   15f88:	e58dc008 	str	ip, [sp, #8]
   15f8c:	ebfff6db 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   15f90:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   15f94:	e1500003 	cmp	r0, r3
   15f98:	0a000008 	beq	15fc0 <CUSBMouseDevice::Configure()+0xd8>
   15f9c:	eb0064c4 	bl	2f2b4 <CLogger::Get()>
   15fa0:	e59f108c 	ldr	r1, [pc, #140]	; 16034 <CUSBMouseDevice::Configure()+0x14c>
   15fa4:	e3a02001 	mov	r2, #1
   15fa8:	e30b3b30 	movw	r3, #47920	; 0xbb30
   15fac:	e3403003 	movt	r3, #3
   15fb0:	eb00668d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fb4:	e3a00000 	mov	r0, #0
   15fb8:	e28dd014 	add	sp, sp, #20
   15fbc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15fc0:	e1a00004 	mov	r0, r4
   15fc4:	ebfffefd 	bl	15bc0 <CUSBMouseDevice::DecodeReport()>
   15fc8:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   15fcc:	e3510000 	cmp	r1, #0
   15fd0:	0affffd2 	beq	15f20 <CUSBMouseDevice::Configure()+0x38>
   15fd4:	e1a00004 	mov	r0, r4
   15fd8:	ebfff476 	bl	131b8 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   15fdc:	e3500000 	cmp	r0, #0
   15fe0:	0a00000c 	beq	16018 <CUSBMouseDevice::Configure()+0x130>
   15fe4:	e3a00038 	mov	r0, #56	; 0x38
   15fe8:	eb00832b 	bl	36c9c <operator new(unsigned int)>
   15fec:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   15ff0:	e5941038 	ldr	r1, [r4, #56]	; 0x38
   15ff4:	e1a05000 	mov	r5, r0
   15ff8:	e2522000 	subs	r2, r2, #0
   15ffc:	13a02001 	movne	r2, #1
   16000:	eb002450 	bl	1f148 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   16004:	e1a00004 	mov	r0, r4
   16008:	e5845024 	str	r5, [r4, #36]	; 0x24
   1600c:	e28dd014 	add	sp, sp, #20
   16010:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   16014:	eafff583 	b	13628 <CUSBHIDDevice::StartRequest()>
   16018:	eb0064a5 	bl	2f2b4 <CLogger::Get()>
   1601c:	e59f1010 	ldr	r1, [pc, #16]	; 16034 <CUSBMouseDevice::Configure()+0x14c>
   16020:	e3a02001 	mov	r2, #1
   16024:	e30c3790 	movw	r3, #51088	; 0xc790
   16028:	e3403003 	movt	r3, #3
   1602c:	eb00666e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16030:	eaffffba 	b	15f20 <CUSBMouseDevice::Configure()+0x38>
   16034:	0003cd24 	.word	0x0003cd24

00016038 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   16038:	e5903020 	ldr	r3, [r0, #32]
   1603c:	e92d4070 	push	{r4, r5, r6, lr}
   16040:	e1a04000 	mov	r4, r0
   16044:	e59f5090 	ldr	r5, [pc, #144]	; 160dc <CUSBPrinterDevice::~CUSBPrinterDevice()+0xa4>
   16048:	e3530000 	cmp	r3, #0
   1604c:	e5805000 	str	r5, [r0]
   16050:	1a000017 	bne	160b4 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x7c>
   16054:	e594501c 	ldr	r5, [r4, #28]
   16058:	e3550000 	cmp	r5, #0
   1605c:	0a000004 	beq	16074 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x3c>
   16060:	e1a00005 	mov	r0, r5
   16064:	ebffe7e5 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   16068:	e3a01014 	mov	r1, #20
   1606c:	e1a00005 	mov	r0, r5
   16070:	eb008321 	bl	36cfc <operator delete(void*, unsigned int)>
   16074:	e5945018 	ldr	r5, [r4, #24]
   16078:	e3a03000 	mov	r3, #0
   1607c:	e584301c 	str	r3, [r4, #28]
   16080:	e1550003 	cmp	r5, r3
   16084:	0a000004 	beq	1609c <CUSBPrinterDevice::~CUSBPrinterDevice()+0x64>
   16088:	e1a00005 	mov	r0, r5
   1608c:	ebffe7db 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   16090:	e3a01014 	mov	r1, #20
   16094:	e1a00005 	mov	r0, r5
   16098:	eb008317 	bl	36cfc <operator delete(void*, unsigned int)>
   1609c:	e3a03000 	mov	r3, #0
   160a0:	e1a00004 	mov	r0, r4
   160a4:	e5843018 	str	r3, [r4, #24]
   160a8:	ebffe83e 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   160ac:	e1a00004 	mov	r0, r4
   160b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   160b4:	eb005d98 	bl	2d71c <CDeviceNameService::Get()>
   160b8:	e285102c 	add	r1, r5, #44	; 0x2c
   160bc:	e5942020 	ldr	r2, [r4, #32]
   160c0:	e3a03000 	mov	r3, #0
   160c4:	eb005dba 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   160c8:	e5941020 	ldr	r1, [r4, #32]
   160cc:	e3040ea8 	movw	r0, #20136	; 0x4ea8
   160d0:	e3400004 	movt	r0, #4
   160d4:	eb008472 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   160d8:	eaffffdd 	b	16054 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x1c>
   160dc:	0003cd94 	.word	0x0003cd94

000160e0 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   160e0:	e92d4010 	push	{r4, lr}
   160e4:	e1a04000 	mov	r4, r0
   160e8:	ebffffd2 	bl	16038 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   160ec:	e1a00004 	mov	r0, r4
   160f0:	e3a01024 	mov	r1, #36	; 0x24
   160f4:	eb008300 	bl	36cfc <operator delete(void*, unsigned int)>
   160f8:	e1a00004 	mov	r0, r4
   160fc:	e8bd8010 	pop	{r4, pc}

00016100 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   16100:	e92d4070 	push	{r4, r5, r6, lr}
   16104:	e2515000 	subs	r5, r1, #0
   16108:	e24dd008 	sub	sp, sp, #8
   1610c:	0a000011 	beq	16158 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   16110:	e1a04002 	mov	r4, r2
   16114:	e3520000 	cmp	r2, #0
   16118:	0a000014 	beq	16170 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x70>
   1611c:	e1a06000 	mov	r6, r0
   16120:	ebffe942 	bl	10630 <CUSBFunction::GetHost() const>
   16124:	e3500000 	cmp	r0, #0
   16128:	0a000016 	beq	16188 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   1612c:	e596101c 	ldr	r1, [r6, #28]
   16130:	e3a03000 	mov	r3, #0
   16134:	e1a02005 	mov	r2, r5
   16138:	e58d3000 	str	r3, [sp]
   1613c:	e1a03004 	mov	r3, r4
   16140:	ebfff69f 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16144:	e3500000 	cmp	r0, #0
   16148:	a1a00004 	movge	r0, r4
   1614c:	b3e00000 	mvnlt	r0, #0
   16150:	e28dd008 	add	sp, sp, #8
   16154:	e8bd8070 	pop	{r4, r5, r6, pc}
   16158:	e30c1d2c 	movw	r1, #52524	; 0xcd2c
   1615c:	e3401003 	movt	r1, #3
   16160:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   16164:	e3400003 	movt	r0, #3
   16168:	e3a02088 	mov	r2, #136	; 0x88
   1616c:	eb0059d3 	bl	2c8c0 <assertion_failed>
   16170:	e30c1d2c 	movw	r1, #52524	; 0xcd2c
   16174:	e3401003 	movt	r1, #3
   16178:	e30c0d3c 	movw	r0, #52540	; 0xcd3c
   1617c:	e3400003 	movt	r0, #3
   16180:	e3a02089 	mov	r2, #137	; 0x89
   16184:	eb0059cd 	bl	2c8c0 <assertion_failed>
   16188:	e30c1d2c 	movw	r1, #52524	; 0xcd2c
   1618c:	e3401003 	movt	r1, #3
   16190:	e30c0d48 	movw	r0, #52552	; 0xcd48
   16194:	e3400003 	movt	r0, #3
   16198:	e3a0208c 	mov	r2, #140	; 0x8c
   1619c:	eb0059c7 	bl	2c8c0 <assertion_failed>

000161a0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   161a0:	e92d4010 	push	{r4, lr}
   161a4:	e1a04000 	mov	r4, r0
   161a8:	ebffe8a7 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   161ac:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   161b0:	e2842018 	add	r2, r4, #24
   161b4:	e59f1018 	ldr	r1, [pc, #24]	; 161d4 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x34>
   161b8:	e3a03000 	mov	r3, #0
   161bc:	e5841000 	str	r1, [r4]
   161c0:	e1a00004 	mov	r0, r4
   161c4:	e5c43014 	strb	r3, [r4, #20]
   161c8:	f442078f 	vst1.32	{d16}, [r2]
   161cc:	e5843020 	str	r3, [r4, #32]
   161d0:	e8bd8010 	pop	{r4, pc}
   161d4:	0003cd94 	.word	0x0003cd94

000161d8 <CUSBPrinterDevice::Configure()>:
   161d8:	e92d4070 	push	{r4, r5, r6, lr}
   161dc:	e1a05000 	mov	r5, r0
   161e0:	e24dd008 	sub	sp, sp, #8
   161e4:	ebffe994 	bl	1083c <CUSBFunction::GetInterfaceProtocol() const>
   161e8:	e2403001 	sub	r3, r0, #1
   161ec:	e3530001 	cmp	r3, #1
   161f0:	e5c50014 	strb	r0, [r5, #20]
   161f4:	8a000036 	bhi	162d4 <CUSBPrinterDevice::Configure()+0xfc>
   161f8:	e1a00005 	mov	r0, r5
   161fc:	ebffe8ea 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   16200:	e5d53014 	ldrb	r3, [r5, #20]
   16204:	e3530001 	cmp	r3, #1
   16208:	13a03002 	movne	r3, #2
   1620c:	03a03001 	moveq	r3, #1
   16210:	e1500003 	cmp	r0, r3
   16214:	aa00000a 	bge	16244 <CUSBPrinterDevice::Configure()+0x6c>
   16218:	e59f1188 	ldr	r1, [pc, #392]	; 163a8 <CUSBPrinterDevice::Configure()+0x1d0>
   1621c:	e1a00005 	mov	r0, r5
   16220:	ebffe918 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   16224:	e3a04000 	mov	r4, #0
   16228:	e1a00004 	mov	r0, r4
   1622c:	e28dd008 	add	sp, sp, #8
   16230:	e8bd8070 	pop	{r4, r5, r6, pc}
   16234:	e5d43003 	ldrb	r3, [r4, #3]
   16238:	e203303f 	and	r3, r3, #63	; 0x3f
   1623c:	e3530002 	cmp	r3, #2
   16240:	0a00002c 	beq	162f8 <CUSBPrinterDevice::Configure()+0x120>
   16244:	e3a01005 	mov	r1, #5
   16248:	e1a00005 	mov	r0, r5
   1624c:	ebffe902 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   16250:	e2504000 	subs	r4, r0, #0
   16254:	1afffff6 	bne	16234 <CUSBPrinterDevice::Configure()+0x5c>
   16258:	e595301c 	ldr	r3, [r5, #28]
   1625c:	e3530000 	cmp	r3, #0
   16260:	0affffec 	beq	16218 <CUSBPrinterDevice::Configure()+0x40>
   16264:	e5d53014 	ldrb	r3, [r5, #20]
   16268:	e3530001 	cmp	r3, #1
   1626c:	0a000002 	beq	1627c <CUSBPrinterDevice::Configure()+0xa4>
   16270:	e5953018 	ldr	r3, [r5, #24]
   16274:	e3530000 	cmp	r3, #0
   16278:	0affffe6 	beq	16218 <CUSBPrinterDevice::Configure()+0x40>
   1627c:	e1a00005 	mov	r0, r5
   16280:	ebffe802 	bl	10290 <CUSBFunction::Configure()>
   16284:	e2504000 	subs	r4, r0, #0
   16288:	0a000039 	beq	16374 <CUSBPrinterDevice::Configure()+0x19c>
   1628c:	e5956020 	ldr	r6, [r5, #32]
   16290:	e3560000 	cmp	r6, #0
   16294:	1a00003d 	bne	16390 <CUSBPrinterDevice::Configure()+0x1b8>
   16298:	e59f2108 	ldr	r2, [pc, #264]	; 163a8 <CUSBPrinterDevice::Configure()+0x1d0>
   1629c:	e3a01001 	mov	r1, #1
   162a0:	e3040ea8 	movw	r0, #20136	; 0x4ea8
   162a4:	e3400004 	movt	r0, #4
   162a8:	eb0083cb 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   162ac:	e5850020 	str	r0, [r5, #32]
   162b0:	eb005d19 	bl	2d71c <CDeviceNameService::Get()>
   162b4:	e5952020 	ldr	r2, [r5, #32]
   162b8:	e59f10ec 	ldr	r1, [pc, #236]	; 163ac <CUSBPrinterDevice::Configure()+0x1d4>
   162bc:	e1a03005 	mov	r3, r5
   162c0:	e58d6000 	str	r6, [sp]
   162c4:	eb005d20 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   162c8:	e1a00004 	mov	r0, r4
   162cc:	e28dd008 	add	sp, sp, #8
   162d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   162d4:	eb0063f6 	bl	2f2b4 <CLogger::Get()>
   162d8:	e5d53014 	ldrb	r3, [r5, #20]
   162dc:	e58d3000 	str	r3, [sp]
   162e0:	e3a02001 	mov	r2, #1
   162e4:	e59f10bc 	ldr	r1, [pc, #188]	; 163a8 <CUSBPrinterDevice::Configure()+0x1d0>
   162e8:	e30c3d54 	movw	r3, #52564	; 0xcd54
   162ec:	e3403003 	movt	r3, #3
   162f0:	eb0065bd 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   162f4:	eaffffca 	b	16224 <CUSBPrinterDevice::Configure()+0x4c>
   162f8:	e1d430d2 	ldrsb	r3, [r4, #2]
   162fc:	e3530000 	cmp	r3, #0
   16300:	ba00000d 	blt	1633c <CUSBPrinterDevice::Configure()+0x164>
   16304:	e595301c 	ldr	r3, [r5, #28]
   16308:	e3530000 	cmp	r3, #0
   1630c:	1affffc1 	bne	16218 <CUSBPrinterDevice::Configure()+0x40>
   16310:	e3a00014 	mov	r0, #20
   16314:	eb008260 	bl	36c9c <operator new(unsigned int)>
   16318:	e1a06000 	mov	r6, r0
   1631c:	e1a00005 	mov	r0, r5
   16320:	ebffe8ad 	bl	105dc <CUSBFunction::GetDevice() const>
   16324:	e1a02004 	mov	r2, r4
   16328:	e1a01000 	mov	r1, r0
   1632c:	e1a00006 	mov	r0, r6
   16330:	ebffe6b8 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16334:	e585601c 	str	r6, [r5, #28]
   16338:	eaffffc1 	b	16244 <CUSBPrinterDevice::Configure()+0x6c>
   1633c:	e5953018 	ldr	r3, [r5, #24]
   16340:	e3530000 	cmp	r3, #0
   16344:	1affffb3 	bne	16218 <CUSBPrinterDevice::Configure()+0x40>
   16348:	e3a00014 	mov	r0, #20
   1634c:	eb008252 	bl	36c9c <operator new(unsigned int)>
   16350:	e1a06000 	mov	r6, r0
   16354:	e1a00005 	mov	r0, r5
   16358:	ebffe89f 	bl	105dc <CUSBFunction::GetDevice() const>
   1635c:	e1a02004 	mov	r2, r4
   16360:	e1a01000 	mov	r1, r0
   16364:	e1a00006 	mov	r0, r6
   16368:	ebffe6aa 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1636c:	e5856018 	str	r6, [r5, #24]
   16370:	eaffffb3 	b	16244 <CUSBPrinterDevice::Configure()+0x6c>
   16374:	eb0063ce 	bl	2f2b4 <CLogger::Get()>
   16378:	e59f1028 	ldr	r1, [pc, #40]	; 163a8 <CUSBPrinterDevice::Configure()+0x1d0>
   1637c:	e3a02001 	mov	r2, #1
   16380:	e30b3eac 	movw	r3, #48812	; 0xbeac
   16384:	e3403003 	movt	r3, #3
   16388:	eb006597 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1638c:	eaffffa4 	b	16224 <CUSBPrinterDevice::Configure()+0x4c>
   16390:	e30c1d2c 	movw	r1, #52524	; 0xcd2c
   16394:	e3401003 	movt	r1, #3
   16398:	e30c0d74 	movw	r0, #52596	; 0xcd74
   1639c:	e3400003 	movt	r0, #3
   163a0:	e3a0207e 	mov	r2, #126	; 0x7e
   163a4:	eb005945 	bl	2c8c0 <assertion_failed>
   163a8:	0003cdc8 	.word	0x0003cdc8
   163ac:	0003cdc0 	.word	0x0003cdc0

000163b0 <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE>:
   163b0:	e92d4010 	push	{r4, lr}
   163b4:	e3044ea8 	movw	r4, #20136	; 0x4ea8
   163b8:	e3404004 	movt	r4, #4
   163bc:	e3a0203f 	mov	r2, #63	; 0x3f
   163c0:	e3a01001 	mov	r1, #1
   163c4:	e1a00004 	mov	r0, r4
   163c8:	eb00836e 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   163cc:	e1a00004 	mov	r0, r4
   163d0:	e3042f78 	movw	r2, #20344	; 0x4f78
   163d4:	e3402004 	movt	r2, #4
   163d8:	e30711d8 	movw	r1, #29144	; 0x71d8
   163dc:	e3401003 	movt	r1, #3
   163e0:	e8bd4010 	pop	{r4, lr}
   163e4:	ea007a32 	b	34cb4 <__aeabi_atexit>

000163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   163e8:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   163ec:	e92d4010 	push	{r4, lr}
   163f0:	e280e064 	add	lr, r0, #100	; 0x64
   163f4:	e5801000 	str	r1, [r0]
   163f8:	e3510000 	cmp	r1, #0
   163fc:	e59d1008 	ldr	r1, [sp, #8]
   16400:	e3a04009 	mov	r4, #9
   16404:	e5801004 	str	r1, [r0, #4]
   16408:	e3a01000 	mov	r1, #0
   1640c:	e1c020f8 	strd	r2, [r0, #8]
   16410:	e5801010 	str	r1, [r0, #16]
   16414:	e5801014 	str	r1, [r0, #20]
   16418:	e580101c 	str	r1, [r0, #28]
   1641c:	e5801060 	str	r1, [r0, #96]	; 0x60
   16420:	e5c04018 	strb	r4, [r0, #24]
   16424:	f44e078f 	vst1.32	{d16}, [lr]
   16428:	e5c0106c 	strb	r1, [r0, #108]	; 0x6c
   1642c:	0a00000b 	beq	16460 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   16430:	e2522000 	subs	r2, r2, #0
   16434:	13a02001 	movne	r2, #1
   16438:	e3530000 	cmp	r3, #0
   1643c:	03822001 	orreq	r2, r2, #1
   16440:	e3520000 	cmp	r2, #0
   16444:	18bd8010 	popne	{r4, pc}
   16448:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1644c:	e3401003 	movt	r1, #3
   16450:	e30c0de0 	movw	r0, #52704	; 0xcde0
   16454:	e3400003 	movt	r0, #3
   16458:	e3a02026 	mov	r2, #38	; 0x26
   1645c:	eb005917 	bl	2c8c0 <assertion_failed>
   16460:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   16464:	e3401003 	movt	r1, #3
   16468:	e30b044c 	movw	r0, #46156	; 0xb44c
   1646c:	e3400003 	movt	r0, #3
   16470:	e3a02025 	mov	r2, #37	; 0x25
   16474:	eb005911 	bl	2c8c0 <assertion_failed>

00016478 <CUSBRequest::~CUSBRequest()>:
   16478:	e12fff1e 	bx	lr

0001647c <CUSBRequest::GetEndpoint() const>:
   1647c:	e5900000 	ldr	r0, [r0]
   16480:	e3500000 	cmp	r0, #0
   16484:	112fff1e 	bxne	lr
   16488:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1648c:	e3401003 	movt	r1, #3
   16490:	e30b044c 	movw	r0, #46156	; 0xb44c
   16494:	e3400003 	movt	r0, #3
   16498:	e3a02033 	mov	r2, #51	; 0x33
   1649c:	e92d4010 	push	{r4, lr}
   164a0:	eb005906 	bl	2c8c0 <assertion_failed>

000164a4 <CUSBRequest::SetStatus(int)>:
   164a4:	e5801010 	str	r1, [r0, #16]
   164a8:	e12fff1e 	bx	lr

000164ac <CUSBRequest::SetResultLen(unsigned int)>:
   164ac:	e5801014 	str	r1, [r0, #20]
   164b0:	e12fff1e 	bx	lr

000164b4 <CUSBRequest::SetUSBError(TUSBError)>:
   164b4:	e5c01018 	strb	r1, [r0, #24]
   164b8:	e12fff1e 	bx	lr

000164bc <CUSBRequest::GetStatus() const>:
   164bc:	e5900010 	ldr	r0, [r0, #16]
   164c0:	e12fff1e 	bx	lr

000164c4 <CUSBRequest::GetResultLength() const>:
   164c4:	e5903010 	ldr	r3, [r0, #16]
   164c8:	e3530000 	cmp	r3, #0
   164cc:	0a000001 	beq	164d8 <CUSBRequest::GetResultLength() const+0x14>
   164d0:	e5900014 	ldr	r0, [r0, #20]
   164d4:	e12fff1e 	bx	lr
   164d8:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   164dc:	e3401003 	movt	r1, #3
   164e0:	e30c0e04 	movw	r0, #52740	; 0xce04
   164e4:	e3400003 	movt	r0, #3
   164e8:	e3a0204d 	mov	r2, #77	; 0x4d
   164ec:	e92d4010 	push	{r4, lr}
   164f0:	eb0058f2 	bl	2c8c0 <assertion_failed>

000164f4 <CUSBRequest::GetUSBError() const>:
   164f4:	e5903010 	ldr	r3, [r0, #16]
   164f8:	e3530000 	cmp	r3, #0
   164fc:	1a000001 	bne	16508 <CUSBRequest::GetUSBError() const+0x14>
   16500:	e5d00018 	ldrb	r0, [r0, #24]
   16504:	e12fff1e 	bx	lr
   16508:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1650c:	e3401003 	movt	r1, #3
   16510:	e30c0e10 	movw	r0, #52752	; 0xce10
   16514:	e3400003 	movt	r0, #3
   16518:	e3a02054 	mov	r2, #84	; 0x54
   1651c:	e92d4010 	push	{r4, lr}
   16520:	eb0058e6 	bl	2c8c0 <assertion_failed>

00016524 <CUSBRequest::GetSetupData()>:
   16524:	e92d4010 	push	{r4, lr}
   16528:	e1a04000 	mov	r4, r0
   1652c:	e5900000 	ldr	r0, [r0]
   16530:	ebffe6bf 	bl	10034 <CUSBEndpoint::GetType() const>
   16534:	e3500000 	cmp	r0, #0
   16538:	1a000008 	bne	16560 <CUSBRequest::GetSetupData()+0x3c>
   1653c:	e5940004 	ldr	r0, [r4, #4]
   16540:	e3500000 	cmp	r0, #0
   16544:	18bd8010 	popne	{r4, pc}
   16548:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1654c:	e3401003 	movt	r1, #3
   16550:	e30c0e4c 	movw	r0, #52812	; 0xce4c
   16554:	e3400003 	movt	r0, #3
   16558:	e3a0205c 	mov	r2, #92	; 0x5c
   1655c:	eb0058d7 	bl	2c8c0 <assertion_failed>
   16560:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   16564:	e3401003 	movt	r1, #3
   16568:	e30c0e1c 	movw	r0, #52764	; 0xce1c
   1656c:	e3400003 	movt	r0, #3
   16570:	e3a0205b 	mov	r2, #91	; 0x5b
   16574:	eb0058d1 	bl	2c8c0 <assertion_failed>

00016578 <CUSBRequest::GetBuffer()>:
   16578:	e1a03000 	mov	r3, r0
   1657c:	e5900008 	ldr	r0, [r0, #8]
   16580:	e3500000 	cmp	r0, #0
   16584:	112fff1e 	bxne	lr
   16588:	e593300c 	ldr	r3, [r3, #12]
   1658c:	e3530000 	cmp	r3, #0
   16590:	012fff1e 	bxeq	lr
   16594:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   16598:	e3401003 	movt	r1, #3
   1659c:	e30c0de0 	movw	r0, #52704	; 0xcde0
   165a0:	e3400003 	movt	r0, #3
   165a4:	e3a02063 	mov	r2, #99	; 0x63
   165a8:	e92d4010 	push	{r4, lr}
   165ac:	eb0058c3 	bl	2c8c0 <assertion_failed>

000165b0 <CUSBRequest::GetBufLen() const>:
   165b0:	e590000c 	ldr	r0, [r0, #12]
   165b4:	e12fff1e 	bx	lr

000165b8 <CUSBRequest::AddIsoPacket(unsigned short)>:
   165b8:	e590301c 	ldr	r3, [r0, #28]
   165bc:	e92d4010 	push	{r4, lr}
   165c0:	e353001f 	cmp	r3, #31
   165c4:	8a000009 	bhi	165f0 <CUSBRequest::AddIsoPacket(unsigned short)+0x38>
   165c8:	e3510000 	cmp	r1, #0
   165cc:	0a00000d 	beq	16608 <CUSBRequest::AddIsoPacket(unsigned short)+0x50>
   165d0:	e590200c 	ldr	r2, [r0, #12]
   165d4:	e1510002 	cmp	r1, r2
   165d8:	8a000010 	bhi	16620 <CUSBRequest::AddIsoPacket(unsigned short)+0x68>
   165dc:	e0802083 	add	r2, r0, r3, lsl #1
   165e0:	e2833001 	add	r3, r3, #1
   165e4:	e580301c 	str	r3, [r0, #28]
   165e8:	e1c212b0 	strh	r1, [r2, #32]
   165ec:	e8bd8010 	pop	{r4, pc}
   165f0:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   165f4:	e3401003 	movt	r1, #3
   165f8:	e30c0e60 	movw	r0, #52832	; 0xce60
   165fc:	e3400003 	movt	r0, #3
   16600:	e3a02070 	mov	r2, #112	; 0x70
   16604:	eb0058ad 	bl	2c8c0 <assertion_failed>
   16608:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1660c:	e3401003 	movt	r1, #3
   16610:	e30c0e84 	movw	r0, #52868	; 0xce84
   16614:	e3400003 	movt	r0, #3
   16618:	e3a02071 	mov	r2, #113	; 0x71
   1661c:	eb0058a7 	bl	2c8c0 <assertion_failed>
   16620:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   16624:	e3401003 	movt	r1, #3
   16628:	e30c0e98 	movw	r0, #52888	; 0xce98
   1662c:	e3400003 	movt	r0, #3
   16630:	e3a02072 	mov	r2, #114	; 0x72
   16634:	eb0058a1 	bl	2c8c0 <assertion_failed>

00016638 <CUSBRequest::GetNumIsoPackets() const>:
   16638:	e590001c 	ldr	r0, [r0, #28]
   1663c:	e3500000 	cmp	r0, #0
   16640:	112fff1e 	bxne	lr
   16644:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   16648:	e3401003 	movt	r1, #3
   1664c:	e30c0eb4 	movw	r0, #52916	; 0xceb4
   16650:	e3400003 	movt	r0, #3
   16654:	e3a02079 	mov	r2, #121	; 0x79
   16658:	e92d4010 	push	{r4, lr}
   1665c:	eb005897 	bl	2c8c0 <assertion_failed>

00016660 <CUSBRequest::GetIsoPacketSize(unsigned int) const>:
   16660:	e590301c 	ldr	r3, [r0, #28]
   16664:	e1530001 	cmp	r3, r1
   16668:	9a000002 	bls	16678 <CUSBRequest::GetIsoPacketSize(unsigned int) const+0x18>
   1666c:	e0800081 	add	r0, r0, r1, lsl #1
   16670:	e1d002b0 	ldrh	r0, [r0, #32]
   16674:	e12fff1e 	bx	lr
   16678:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1667c:	e3401003 	movt	r1, #3
   16680:	e30c0ecc 	movw	r0, #52940	; 0xcecc
   16684:	e3400003 	movt	r0, #3
   16688:	e3a02080 	mov	r2, #128	; 0x80
   1668c:	e92d4010 	push	{r4, lr}
   16690:	eb00588a 	bl	2c8c0 <assertion_failed>

00016694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   16694:	e3510000 	cmp	r1, #0
   16698:	e5801060 	str	r1, [r0, #96]	; 0x60
   1669c:	e1c026f4 	strd	r2, [r0, #100]	; 0x64
   166a0:	112fff1e 	bxne	lr
   166a4:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   166a8:	e3401003 	movt	r1, #3
   166ac:	e30c0eec 	movw	r0, #52972	; 0xceec
   166b0:	e3400003 	movt	r0, #3
   166b4:	e3a0208b 	mov	r2, #139	; 0x8b
   166b8:	e92d4010 	push	{r4, lr}
   166bc:	eb00587f 	bl	2c8c0 <assertion_failed>

000166c0 <CUSBRequest::CallCompletionRoutine()>:
   166c0:	e92d4010 	push	{r4, lr}
   166c4:	e590e060 	ldr	lr, [r0, #96]	; 0x60
   166c8:	e35e0000 	cmp	lr, #0
   166cc:	0a000004 	beq	166e4 <CUSBRequest::CallCompletionRoutine()+0x24>
   166d0:	e1a0300e 	mov	r3, lr
   166d4:	e5902068 	ldr	r2, [r0, #104]	; 0x68
   166d8:	e8bd4010 	pop	{r4, lr}
   166dc:	e5901064 	ldr	r1, [r0, #100]	; 0x64
   166e0:	e12fff13 	bx	r3
   166e4:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   166e8:	e3401003 	movt	r1, #3
   166ec:	e30c0eec 	movw	r0, #52972	; 0xceec
   166f0:	e3400003 	movt	r0, #3
   166f4:	e3a02090 	mov	r2, #144	; 0x90
   166f8:	eb005870 	bl	2c8c0 <assertion_failed>

000166fc <CUSBRequest::SetCompleteOnNAK()>:
   166fc:	e3a03001 	mov	r3, #1
   16700:	e5c0306c 	strb	r3, [r0, #108]	; 0x6c
   16704:	e12fff1e 	bx	lr

00016708 <CUSBRequest::IsCompleteOnNAK() const>:
   16708:	e5d0006c 	ldrb	r0, [r0, #108]	; 0x6c
   1670c:	e12fff1e 	bx	lr

00016710 <CUSBRequest::operator new(unsigned int)>:
   16710:	e3500070 	cmp	r0, #112	; 0x70
   16714:	e92d4010 	push	{r4, lr}
   16718:	1a000006 	bne	16738 <CUSBRequest::operator new(unsigned int)+0x28>
   1671c:	e3043eb8 	movw	r3, #20152	; 0x4eb8
   16720:	e3403004 	movt	r3, #4
   16724:	e5930000 	ldr	r0, [r3]
   16728:	e3500000 	cmp	r0, #0
   1672c:	0a000007 	beq	16750 <CUSBRequest::operator new(unsigned int)+0x40>
   16730:	e8bd4010 	pop	{r4, lr}
   16734:	ea0059aa 	b	2cde4 <CClassAllocator::Allocate()>
   16738:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1673c:	e3401003 	movt	r1, #3
   16740:	e30c0f08 	movw	r0, #53000	; 0xcf08
   16744:	e3400003 	movt	r0, #3
   16748:	e3a0209f 	mov	r2, #159	; 0x9f
   1674c:	eb00585b 	bl	2c8c0 <assertion_failed>
   16750:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   16754:	e3401003 	movt	r1, #3
   16758:	e30b0048 	movw	r0, #45128	; 0xb048
   1675c:	e3400003 	movt	r0, #3
   16760:	e3a0209f 	mov	r2, #159	; 0x9f
   16764:	eb005855 	bl	2c8c0 <assertion_failed>

00016768 <CUSBRequest::operator delete(void*, unsigned int)>:
   16768:	e3510070 	cmp	r1, #112	; 0x70
   1676c:	e92d4010 	push	{r4, lr}
   16770:	1a000008 	bne	16798 <CUSBRequest::operator delete(void*, unsigned int)+0x30>
   16774:	e3042eb8 	movw	r2, #20152	; 0x4eb8
   16778:	e3402004 	movt	r2, #4
   1677c:	e1a03000 	mov	r3, r0
   16780:	e5920000 	ldr	r0, [r2]
   16784:	e3500000 	cmp	r0, #0
   16788:	0a000008 	beq	167b0 <CUSBRequest::operator delete(void*, unsigned int)+0x48>
   1678c:	e8bd4010 	pop	{r4, lr}
   16790:	e1a01003 	mov	r1, r3
   16794:	ea0059cd 	b	2ced0 <CClassAllocator::Free(void*)>
   16798:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   1679c:	e3401003 	movt	r1, #3
   167a0:	e30c0f08 	movw	r0, #53000	; 0xcf08
   167a4:	e3400003 	movt	r0, #3
   167a8:	e3a0209f 	mov	r2, #159	; 0x9f
   167ac:	eb005843 	bl	2c8c0 <assertion_failed>
   167b0:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   167b4:	e3401003 	movt	r1, #3
   167b8:	e30b0048 	movw	r0, #45128	; 0xb048
   167bc:	e3400003 	movt	r0, #3
   167c0:	e3a0209f 	mov	r2, #159	; 0x9f
   167c4:	eb00583d 	bl	2c8c0 <assertion_failed>

000167c8 <CUSBRequest::InitAllocator(unsigned int)>:
   167c8:	e92d4070 	push	{r4, r5, r6, lr}
   167cc:	e3044eb8 	movw	r4, #20152	; 0x4eb8
   167d0:	e3404004 	movt	r4, #4
   167d4:	e5943000 	ldr	r3, [r4]
   167d8:	e3530000 	cmp	r3, #0
   167dc:	1a00000a 	bne	1680c <CUSBRequest::InitAllocator(unsigned int)+0x44>
   167e0:	e1a05000 	mov	r5, r0
   167e4:	e3a00020 	mov	r0, #32
   167e8:	eb00812b 	bl	36c9c <operator new(unsigned int)>
   167ec:	e1a02005 	mov	r2, r5
   167f0:	e3a01070 	mov	r1, #112	; 0x70
   167f4:	e30c3f28 	movw	r3, #53032	; 0xcf28
   167f8:	e3403003 	movt	r3, #3
   167fc:	e1a05000 	mov	r5, r0
   16800:	eb005919 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   16804:	e5845000 	str	r5, [r4]
   16808:	e8bd8070 	pop	{r4, r5, r6, pc}
   1680c:	e30c1dd0 	movw	r1, #52688	; 0xcdd0
   16810:	e3401003 	movt	r1, #3
   16814:	e30b0090 	movw	r0, #45200	; 0xb090
   16818:	e3400003 	movt	r0, #3
   1681c:	e3a0209f 	mov	r2, #159	; 0x9f
   16820:	eb005826 	bl	2c8c0 <assertion_failed>

00016824 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   16824:	e92d4070 	push	{r4, r5, r6, lr}
   16828:	e3044eb8 	movw	r4, #20152	; 0x4eb8
   1682c:	e3404004 	movt	r4, #4
   16830:	e1a05000 	mov	r5, r0
   16834:	e24dd008 	sub	sp, sp, #8
   16838:	e1a06001 	mov	r6, r1
   1683c:	e5940000 	ldr	r0, [r4]
   16840:	e3500000 	cmp	r0, #0
   16844:	0a000004 	beq	1685c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
   16848:	e1a02001 	mov	r2, r1
   1684c:	e1a01005 	mov	r1, r5
   16850:	e28dd008 	add	sp, sp, #8
   16854:	e8bd4070 	pop	{r4, r5, r6, lr}
   16858:	ea00591d 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
   1685c:	e3a00020 	mov	r0, #32
   16860:	eb00810d 	bl	36c9c <operator new(unsigned int)>
   16864:	e1a02005 	mov	r2, r5
   16868:	e1a03006 	mov	r3, r6
   1686c:	e3a01070 	mov	r1, #112	; 0x70
   16870:	e30ccf28 	movw	ip, #53032	; 0xcf28
   16874:	e340c003 	movt	ip, #3
   16878:	e58dc000 	str	ip, [sp]
   1687c:	e1a05000 	mov	r5, r0
   16880:	eb005905 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   16884:	e5845000 	str	r5, [r4]
   16888:	e28dd008 	add	sp, sp, #8
   1688c:	e8bd8070 	pop	{r4, r5, r6, pc}

00016890 <CUSBStandardHub::~CUSBStandardHub()>:
   16890:	e5903070 	ldr	r3, [r0, #112]	; 0x70
   16894:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16898:	e1a05000 	mov	r5, r0
   1689c:	e59f4104 	ldr	r4, [pc, #260]	; 169a8 <CUSBStandardHub::~CUSBStandardHub()+0x118>
   168a0:	e3530000 	cmp	r3, #0
   168a4:	e5804000 	str	r4, [r0]
   168a8:	1a000034 	bne	16980 <CUSBStandardHub::~CUSBStandardHub()+0xf0>
   168ac:	e5953020 	ldr	r3, [r5, #32]
   168b0:	e3530000 	cmp	r3, #0
   168b4:	0a000014 	beq	1690c <CUSBStandardHub::~CUSBStandardHub()+0x7c>
   168b8:	e3a04000 	mov	r4, #0
   168bc:	e2857024 	add	r7, r5, #36	; 0x24
   168c0:	e2856044 	add	r6, r5, #68	; 0x44
   168c4:	e1a08004 	mov	r8, r4
   168c8:	e5b60004 	ldr	r0, [r6, #4]!
   168cc:	e2844001 	add	r4, r4, #1
   168d0:	e3a01004 	mov	r1, #4
   168d4:	e3500000 	cmp	r0, #0
   168d8:	0a000000 	beq	168e0 <CUSBStandardHub::~CUSBStandardHub()+0x50>
   168dc:	eb008106 	bl	36cfc <operator delete(void*, unsigned int)>
   168e0:	e5973004 	ldr	r3, [r7, #4]
   168e4:	e5868000 	str	r8, [r6]
   168e8:	e2530000 	subs	r0, r3, #0
   168ec:	0a000002 	beq	168fc <CUSBStandardHub::~CUSBStandardHub()+0x6c>
   168f0:	e5933000 	ldr	r3, [r3]
   168f4:	e5933004 	ldr	r3, [r3, #4]
   168f8:	e12fff33 	blx	r3
   168fc:	e5953020 	ldr	r3, [r5, #32]
   16900:	e5a78004 	str	r8, [r7, #4]!
   16904:	e1530004 	cmp	r3, r4
   16908:	8affffee 	bhi	168c8 <CUSBStandardHub::~CUSBStandardHub()+0x38>
   1690c:	e595001c 	ldr	r0, [r5, #28]
   16910:	e3a03000 	mov	r3, #0
   16914:	e5853020 	str	r3, [r5, #32]
   16918:	e1500003 	cmp	r0, r3
   1691c:	0a000000 	beq	16924 <CUSBStandardHub::~CUSBStandardHub()+0x94>
   16920:	eb0080ef 	bl	36ce4 <operator delete[](void*)>
   16924:	e5954018 	ldr	r4, [r5, #24]
   16928:	e3a03000 	mov	r3, #0
   1692c:	e585301c 	str	r3, [r5, #28]
   16930:	e1540003 	cmp	r4, r3
   16934:	0a000004 	beq	1694c <CUSBStandardHub::~CUSBStandardHub()+0xbc>
   16938:	e1a00004 	mov	r0, r4
   1693c:	ebffe5af 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   16940:	e3a01014 	mov	r1, #20
   16944:	e1a00004 	mov	r0, r4
   16948:	eb0080eb 	bl	36cfc <operator delete(void*, unsigned int)>
   1694c:	e5950014 	ldr	r0, [r5, #20]
   16950:	e3a03000 	mov	r3, #0
   16954:	e5853018 	str	r3, [r5, #24]
   16958:	e1500003 	cmp	r0, r3
   1695c:	0a000001 	beq	16968 <CUSBStandardHub::~CUSBStandardHub()+0xd8>
   16960:	e3a01009 	mov	r1, #9
   16964:	eb0080e4 	bl	36cfc <operator delete(void*, unsigned int)>
   16968:	e3a03000 	mov	r3, #0
   1696c:	e1a00005 	mov	r0, r5
   16970:	e5853014 	str	r3, [r5, #20]
   16974:	ebffe60b 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   16978:	e1a00005 	mov	r0, r5
   1697c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16980:	eb005b65 	bl	2d71c <CDeviceNameService::Get()>
   16984:	e284102c 	add	r1, r4, #44	; 0x2c
   16988:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   1698c:	e3a03000 	mov	r3, #0
   16990:	eb005b87 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   16994:	e5951070 	ldr	r1, [r5, #112]	; 0x70
   16998:	e3040ec0 	movw	r0, #20160	; 0x4ec0
   1699c:	e3400004 	movt	r0, #4
   169a0:	eb00823f 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   169a4:	eaffffc0 	b	168ac <CUSBStandardHub::~CUSBStandardHub()+0x1c>
   169a8:	0003d2dc 	.word	0x0003d2dc

000169ac <CUSBStandardHub::~CUSBStandardHub()>:
   169ac:	e92d4010 	push	{r4, lr}
   169b0:	e1a04000 	mov	r4, r0
   169b4:	ebffffb5 	bl	16890 <CUSBStandardHub::~CUSBStandardHub()>
   169b8:	e1a00004 	mov	r0, r4
   169bc:	e3a01074 	mov	r1, #116	; 0x74
   169c0:	eb0080cd 	bl	36cfc <operator delete(void*, unsigned int)>
   169c4:	e1a00004 	mov	r0, r4
   169c8:	e8bd8010 	pop	{r4, pc}

000169cc <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   169cc:	e92d4010 	push	{r4, lr}
   169d0:	e1a04000 	mov	r4, r0
   169d4:	ebffe69c 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   169d8:	e1a02004 	mov	r2, r4
   169dc:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   169e0:	e2840030 	add	r0, r4, #48	; 0x30
   169e4:	e59f3068 	ldr	r3, [pc, #104]	; 16a54 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x88>
   169e8:	e284c028 	add	ip, r4, #40	; 0x28
   169ec:	e2841038 	add	r1, r4, #56	; 0x38
   169f0:	e4823014 	str	r3, [r2], #20
   169f4:	e3a03000 	mov	r3, #0
   169f8:	f2c01010 	vmov.i32	d17, #0	; 0x00000000
   169fc:	f442078f 	vst1.32	{d16}, [r2]
   16a00:	e2842040 	add	r2, r4, #64	; 0x40
   16a04:	e584301c 	str	r3, [r4, #28]
   16a08:	e5843020 	str	r3, [r4, #32]
   16a0c:	e5c43024 	strb	r3, [r4, #36]	; 0x24
   16a10:	e5843070 	str	r3, [r4, #112]	; 0x70
   16a14:	e2843050 	add	r3, r4, #80	; 0x50
   16a18:	f44c078f 	vst1.32	{d16}, [ip]
   16a1c:	f440078f 	vst1.32	{d16}, [r0]
   16a20:	e2840048 	add	r0, r4, #72	; 0x48
   16a24:	f441078f 	vst1.32	{d16}, [r1]
   16a28:	e2841058 	add	r1, r4, #88	; 0x58
   16a2c:	f442078f 	vst1.32	{d16}, [r2]
   16a30:	e2842060 	add	r2, r4, #96	; 0x60
   16a34:	f440078f 	vst1.32	{d16}, [r0]
   16a38:	e1a00004 	mov	r0, r4
   16a3c:	f443078f 	vst1.32	{d16}, [r3]
   16a40:	e2843068 	add	r3, r4, #104	; 0x68
   16a44:	f441078f 	vst1.32	{d16}, [r1]
   16a48:	f442078f 	vst1.32	{d16}, [r2]
   16a4c:	f443170f 	vst1.8	{d17}, [r3]
   16a50:	e8bd8010 	pop	{r4, pc}
   16a54:	0003d2dc 	.word	0x0003d2dc

00016a58 <CUSBStandardHub::DisablePort(unsigned int)>:
   16a58:	e5903020 	ldr	r3, [r0, #32]
   16a5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16a60:	e1530001 	cmp	r3, r1
   16a64:	e24dd010 	sub	sp, sp, #16
   16a68:	9a000023 	bls	16afc <CUSBStandardHub::DisablePort(unsigned int)+0xa4>
   16a6c:	e1a05001 	mov	r5, r1
   16a70:	e1a04000 	mov	r4, r0
   16a74:	e2858001 	add	r8, r5, #1
   16a78:	ebffe6ec 	bl	10630 <CUSBFunction::GetHost() const>
   16a7c:	e1a06000 	mov	r6, r0
   16a80:	e1a00004 	mov	r0, r4
   16a84:	ebffe6de 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   16a88:	e1a01000 	mov	r1, r0
   16a8c:	e1a00006 	mov	r0, r6
   16a90:	e3a06001 	mov	r6, #1
   16a94:	e3a07000 	mov	r7, #0
   16a98:	e6ff3078 	uxth	r3, r8
   16a9c:	e3a02023 	mov	r2, #35	; 0x23
   16aa0:	e58d3004 	str	r3, [sp, #4]
   16aa4:	e58d700c 	str	r7, [sp, #12]
   16aa8:	e1a03006 	mov	r3, r6
   16aac:	e58d7008 	str	r7, [sp, #8]
   16ab0:	e58d6000 	str	r6, [sp]
   16ab4:	ebfff3db 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16ab8:	e1500007 	cmp	r0, r7
   16abc:	a0844005 	addge	r4, r4, r5
   16ac0:	a1a00006 	movge	r0, r6
   16ac4:	a5c47068 	strbge	r7, [r4, #104]	; 0x68
   16ac8:	ba000001 	blt	16ad4 <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   16acc:	e28dd010 	add	sp, sp, #16
   16ad0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16ad4:	eb0061f6 	bl	2f2b4 <CLogger::Get()>
   16ad8:	e59f1034 	ldr	r1, [pc, #52]	; 16b14 <CUSBStandardHub::DisablePort(unsigned int)+0xbc>
   16adc:	e1a02006 	mov	r2, r6
   16ae0:	e58d8000 	str	r8, [sp]
   16ae4:	e30c3f60 	movw	r3, #53088	; 0xcf60
   16ae8:	e3403003 	movt	r3, #3
   16aec:	eb0063be 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16af0:	e1a00007 	mov	r0, r7
   16af4:	e28dd010 	add	sp, sp, #16
   16af8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16afc:	e30c1f34 	movw	r1, #53044	; 0xcf34
   16b00:	e3401003 	movt	r1, #3
   16b04:	e30c0f48 	movw	r0, #53064	; 0xcf48
   16b08:	e3400003 	movt	r0, #3
   16b0c:	e3a020db 	mov	r2, #219	; 0xdb
   16b10:	eb00576a 	bl	2c8c0 <assertion_failed>
   16b14:	0003d310 	.word	0x0003d310

00016b18 <CUSBStandardHub::RemoveDeviceAt(unsigned int)>:
   16b18:	e92d4070 	push	{r4, r5, r6, lr}
   16b1c:	e1a04000 	mov	r4, r0
   16b20:	e1a06001 	mov	r6, r1
   16b24:	ebffffcb 	bl	16a58 <CUSBStandardHub::DisablePort(unsigned int)>
   16b28:	e2505000 	subs	r5, r0, #0
   16b2c:	0a000008 	beq	16b54 <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x3c>
   16b30:	e0844106 	add	r4, r4, r6, lsl #2
   16b34:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   16b38:	e3500000 	cmp	r0, #0
   16b3c:	0a000002 	beq	16b4c <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x34>
   16b40:	e5903000 	ldr	r3, [r0]
   16b44:	e5933004 	ldr	r3, [r3, #4]
   16b48:	e12fff33 	blx	r3
   16b4c:	e3a03000 	mov	r3, #0
   16b50:	e5843028 	str	r3, [r4, #40]	; 0x28
   16b54:	e1a00005 	mov	r0, r5
   16b58:	e8bd8070 	pop	{r4, r5, r6, pc}

00016b5c <CUSBStandardHub::StartStatusChangeRequest()>:
   16b5c:	e5903020 	ldr	r3, [r0, #32]
   16b60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16b64:	e3530000 	cmp	r3, #0
   16b68:	e24dd00c 	sub	sp, sp, #12
   16b6c:	0a000024 	beq	16c04 <CUSBStandardHub::StartStatusChangeRequest()+0xa8>
   16b70:	e590201c 	ldr	r2, [r0, #28]
   16b74:	e2833008 	add	r3, r3, #8
   16b78:	e1a04000 	mov	r4, r0
   16b7c:	e3520000 	cmp	r2, #0
   16b80:	e1a051a3 	lsr	r5, r3, #3
   16b84:	0a00001a 	beq	16bf4 <CUSBStandardHub::StartStatusChangeRequest()+0x98>
   16b88:	e5943018 	ldr	r3, [r4, #24]
   16b8c:	e3530000 	cmp	r3, #0
   16b90:	0a000021 	beq	16c1c <CUSBStandardHub::StartStatusChangeRequest()+0xc0>
   16b94:	e3a00070 	mov	r0, #112	; 0x70
   16b98:	e3a07000 	mov	r7, #0
   16b9c:	ebfffedb 	bl	16710 <CUSBRequest::operator new(unsigned int)>
   16ba0:	e58d7000 	str	r7, [sp]
   16ba4:	e1a06000 	mov	r6, r0
   16ba8:	e1a03005 	mov	r3, r5
   16bac:	e5941018 	ldr	r1, [r4, #24]
   16bb0:	e594201c 	ldr	r2, [r4, #28]
   16bb4:	ebfffe0b 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16bb8:	e1a03004 	mov	r3, r4
   16bbc:	e1a02007 	mov	r2, r7
   16bc0:	e1a00006 	mov	r0, r6
   16bc4:	e3061cd8 	movw	r1, #27864	; 0x6cd8
   16bc8:	e3401001 	movt	r1, #1
   16bcc:	ebfffeb0 	bl	16694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   16bd0:	e1a00004 	mov	r0, r4
   16bd4:	ebffe695 	bl	10630 <CUSBFunction::GetHost() const>
   16bd8:	e5903000 	ldr	r3, [r0]
   16bdc:	e1a02007 	mov	r2, r7
   16be0:	e1a01006 	mov	r1, r6
   16be4:	e5933014 	ldr	r3, [r3, #20]
   16be8:	e28dd00c 	add	sp, sp, #12
   16bec:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   16bf0:	e12fff13 	bx	r3
   16bf4:	e1a00005 	mov	r0, r5
   16bf8:	eb00802d 	bl	36cb4 <operator new[](unsigned int)>
   16bfc:	e584001c 	str	r0, [r4, #28]
   16c00:	eaffffe0 	b	16b88 <CUSBStandardHub::StartStatusChangeRequest()+0x2c>
   16c04:	e30c1f34 	movw	r1, #53044	; 0xcf34
   16c08:	e3401003 	movt	r1, #3
   16c0c:	e30c0f78 	movw	r0, #53112	; 0xcf78
   16c10:	e3400003 	movt	r0, #3
   16c14:	e30021e2 	movw	r2, #482	; 0x1e2
   16c18:	eb005728 	bl	2c8c0 <assertion_failed>
   16c1c:	e30c1f34 	movw	r1, #53044	; 0xcf34
   16c20:	e3401003 	movt	r1, #3
   16c24:	e30c0f88 	movw	r0, #53128	; 0xcf88
   16c28:	e3400003 	movt	r0, #3
   16c2c:	e30021eb 	movw	r2, #491	; 0x1eb
   16c30:	eb005722 	bl	2c8c0 <assertion_failed>

00016c34 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>:
   16c34:	e92d4070 	push	{r4, r5, r6, lr}
   16c38:	e2514000 	subs	r4, r1, #0
   16c3c:	0a000016 	beq	16c9c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x68>
   16c40:	e1a05000 	mov	r5, r0
   16c44:	e1a00004 	mov	r0, r4
   16c48:	ebfffe1b 	bl	164bc <CUSBRequest::GetStatus() const>
   16c4c:	e3500000 	cmp	r0, #0
   16c50:	e1a00004 	mov	r0, r4
   16c54:	0a000007 	beq	16c78 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x44>
   16c58:	ebfffe19 	bl	164c4 <CUSBRequest::GetResultLength() const>
   16c5c:	e3500000 	cmp	r0, #0
   16c60:	0a000016 	beq	16cc0 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x8c>
   16c64:	e1a00005 	mov	r0, r5
   16c68:	ebffe670 	bl	10630 <CUSBFunction::GetHost() const>
   16c6c:	e1a01005 	mov	r1, r5
   16c70:	ebfff426 	bl	13d10 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>
   16c74:	ea000002 	b	16c84 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x50>
   16c78:	ebfffe1d 	bl	164f4 <CUSBRequest::GetUSBError() const>
   16c7c:	e3500003 	cmp	r0, #3
   16c80:	0a00000b 	beq	16cb4 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x80>
   16c84:	e1a00004 	mov	r0, r4
   16c88:	ebfffdfa 	bl	16478 <CUSBRequest::~CUSBRequest()>
   16c8c:	e1a00004 	mov	r0, r4
   16c90:	e3a01070 	mov	r1, #112	; 0x70
   16c94:	e8bd4070 	pop	{r4, r5, r6, lr}
   16c98:	eafffeb2 	b	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   16c9c:	e30c1f34 	movw	r1, #53044	; 0xcf34
   16ca0:	e3401003 	movt	r1, #3
   16ca4:	e30a0b00 	movw	r0, #43776	; 0xab00
   16ca8:	e3400003 	movt	r0, #3
   16cac:	e30021f5 	movw	r2, #501	; 0x1f5
   16cb0:	eb005702 	bl	2c8c0 <assertion_failed>
   16cb4:	e1a00005 	mov	r0, r5
   16cb8:	ebffffa7 	bl	16b5c <CUSBStandardHub::StartStatusChangeRequest()>
   16cbc:	eafffff0 	b	16c84 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x50>
   16cc0:	e30c1f34 	movw	r1, #53044	; 0xcf34
   16cc4:	e3401003 	movt	r1, #3
   16cc8:	e30c0fa4 	movw	r0, #53156	; 0xcfa4
   16ccc:	e3400003 	movt	r0, #3
   16cd0:	e30021f9 	movw	r2, #505	; 0x1f9
   16cd4:	eb0056f9 	bl	2c8c0 <assertion_failed>

00016cd8 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)>:
   16cd8:	e1a01000 	mov	r1, r0
   16cdc:	e2520000 	subs	r0, r2, #0
   16ce0:	0a000000 	beq	16ce8 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   16ce4:	eaffffd2 	b	16c34 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>
   16ce8:	e30c1f34 	movw	r1, #53044	; 0xcf34
   16cec:	e3401003 	movt	r1, #3
   16cf0:	e30a0a18 	movw	r0, #43544	; 0xaa18
   16cf4:	e3400003 	movt	r0, #3
   16cf8:	e92d4010 	push	{r4, lr}
   16cfc:	e300220b 	movw	r2, #523	; 0x20b
   16d00:	eb0056ee 	bl	2c8c0 <assertion_failed>

00016d04 <CUSBStandardHub::Initialize()>:
   16d04:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16d08:	e1a04000 	mov	r4, r0
   16d0c:	e24dd014 	sub	sp, sp, #20
   16d10:	ebffe520 	bl	10198 <CUSBFunction::Initialize()>
   16d14:	e2505000 	subs	r5, r0, #0
   16d18:	0a00002f 	beq	16ddc <CUSBStandardHub::Initialize()+0xd8>
   16d1c:	e5946014 	ldr	r6, [r4, #20]
   16d20:	e3560000 	cmp	r6, #0
   16d24:	1a00003e 	bne	16e24 <CUSBStandardHub::Initialize()+0x120>
   16d28:	e3a00009 	mov	r0, #9
   16d2c:	eb007fda 	bl	36c9c <operator new(unsigned int)>
   16d30:	e1a03000 	mov	r3, r0
   16d34:	e1a00004 	mov	r0, r4
   16d38:	e5843014 	str	r3, [r4, #20]
   16d3c:	ebffe63b 	bl	10630 <CUSBFunction::GetHost() const>
   16d40:	e1a07000 	mov	r7, r0
   16d44:	e1a00004 	mov	r0, r4
   16d48:	ebffe62d 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   16d4c:	e58d600c 	str	r6, [sp, #12]
   16d50:	e1a01000 	mov	r1, r0
   16d54:	e1a03006 	mov	r3, r6
   16d58:	e5942014 	ldr	r2, [r4, #20]
   16d5c:	e1a00007 	mov	r0, r7
   16d60:	e58d2000 	str	r2, [sp]
   16d64:	e3a07009 	mov	r7, #9
   16d68:	e3a020a0 	mov	r2, #160	; 0xa0
   16d6c:	e58d7004 	str	r7, [sp, #4]
   16d70:	e58d2008 	str	r2, [sp, #8]
   16d74:	e3a02029 	mov	r2, #41	; 0x29
   16d78:	ebfff360 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16d7c:	e1a06000 	mov	r6, r0
   16d80:	e1500007 	cmp	r0, r7
   16d84:	1a000007 	bne	16da8 <CUSBStandardHub::Initialize()+0xa4>
   16d88:	e5943014 	ldr	r3, [r4, #20]
   16d8c:	e5d33002 	ldrb	r3, [r3, #2]
   16d90:	e5843020 	str	r3, [r4, #32]
   16d94:	e3530008 	cmp	r3, #8
   16d98:	8a000013 	bhi	16dec <CUSBStandardHub::Initialize()+0xe8>
   16d9c:	e1a00005 	mov	r0, r5
   16da0:	e28dd014 	add	sp, sp, #20
   16da4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16da8:	eb006141 	bl	2f2b4 <CLogger::Get()>
   16dac:	e59f1088 	ldr	r1, [pc, #136]	; 16e3c <CUSBStandardHub::Initialize()+0x138>
   16db0:	e3a02001 	mov	r2, #1
   16db4:	e30c3fd4 	movw	r3, #53204	; 0xcfd4
   16db8:	e3403003 	movt	r3, #3
   16dbc:	eb00630a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16dc0:	e5940014 	ldr	r0, [r4, #20]
   16dc4:	e3500000 	cmp	r0, #0
   16dc8:	0a000001 	beq	16dd4 <CUSBStandardHub::Initialize()+0xd0>
   16dcc:	e1a01007 	mov	r1, r7
   16dd0:	eb007fc9 	bl	36cfc <operator delete(void*, unsigned int)>
   16dd4:	e3a03000 	mov	r3, #0
   16dd8:	e5843014 	str	r3, [r4, #20]
   16ddc:	e3a05000 	mov	r5, #0
   16de0:	e1a00005 	mov	r0, r5
   16de4:	e28dd014 	add	sp, sp, #20
   16de8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16dec:	eb006130 	bl	2f2b4 <CLogger::Get()>
   16df0:	e5943020 	ldr	r3, [r4, #32]
   16df4:	e58d3000 	str	r3, [sp]
   16df8:	e3a02001 	mov	r2, #1
   16dfc:	e59f1038 	ldr	r1, [pc, #56]	; 16e3c <CUSBStandardHub::Initialize()+0x138>
   16e00:	e30c3ff0 	movw	r3, #53232	; 0xcff0
   16e04:	e3403003 	movt	r3, #3
   16e08:	eb0062f7 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16e0c:	e5940014 	ldr	r0, [r4, #20]
   16e10:	e3500000 	cmp	r0, #0
   16e14:	0affffee 	beq	16dd4 <CUSBStandardHub::Initialize()+0xd0>
   16e18:	e1a01006 	mov	r1, r6
   16e1c:	eb007fb6 	bl	36cfc <operator delete(void*, unsigned int)>
   16e20:	eaffffeb 	b	16dd4 <CUSBStandardHub::Initialize()+0xd0>
   16e24:	e30c1f34 	movw	r1, #53044	; 0xcf34
   16e28:	e3401003 	movt	r1, #3
   16e2c:	e30c0fc4 	movw	r0, #53188	; 0xcfc4
   16e30:	e3400003 	movt	r0, #3
   16e34:	e3a02062 	mov	r2, #98	; 0x62
   16e38:	eb0056a0 	bl	2c8c0 <assertion_failed>
   16e3c:	0003d310 	.word	0x0003d310

00016e40 <CUSBStandardHub::EnumeratePorts()>:
   16e40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e44:	e1a07000 	mov	r7, r0
   16e48:	e24dd024 	sub	sp, sp, #36	; 0x24
   16e4c:	ebffe5f7 	bl	10630 <CUSBFunction::GetHost() const>
   16e50:	e250a000 	subs	sl, r0, #0
   16e54:	0a00012a 	beq	17304 <CUSBStandardHub::EnumeratePorts()+0x4c4>
   16e58:	e1a00007 	mov	r0, r7
   16e5c:	ebffe5e8 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   16e60:	e2503000 	subs	r3, r0, #0
   16e64:	e58d3014 	str	r3, [sp, #20]
   16e68:	0a00012b 	beq	1731c <CUSBStandardHub::EnumeratePorts()+0x4dc>
   16e6c:	e5973020 	ldr	r3, [r7, #32]
   16e70:	e3530000 	cmp	r3, #0
   16e74:	0a00012e 	beq	17334 <CUSBStandardHub::EnumeratePorts()+0x4f4>
   16e78:	e5d73024 	ldrb	r3, [r7, #36]	; 0x24
   16e7c:	e3530000 	cmp	r3, #0
   16e80:	0a00006d 	beq	1703c <CUSBStandardHub::EnumeratePorts()+0x1fc>
   16e84:	e2876024 	add	r6, r7, #36	; 0x24
   16e88:	e30d302c 	movw	r3, #53292	; 0xd02c
   16e8c:	e3403003 	movt	r3, #3
   16e90:	e1a09006 	mov	r9, r6
   16e94:	e2875048 	add	r5, r7, #72	; 0x48
   16e98:	e3a04001 	mov	r4, #1
   16e9c:	e58d601c 	str	r6, [sp, #28]
   16ea0:	e5b90004 	ldr	r0, [r9, #4]!
   16ea4:	e58d3018 	str	r3, [sp, #24]
   16ea8:	e3500000 	cmp	r0, #0
   16eac:	1a000051 	bne	16ff8 <CUSBStandardHub::EnumeratePorts()+0x1b8>
   16eb0:	e5950000 	ldr	r0, [r5]
   16eb4:	e3500000 	cmp	r0, #0
   16eb8:	0a000057 	beq	1701c <CUSBStandardHub::EnumeratePorts()+0x1dc>
   16ebc:	e3a08000 	mov	r8, #0
   16ec0:	e3a03004 	mov	r3, #4
   16ec4:	e58d0008 	str	r0, [sp, #8]
   16ec8:	e6ffb074 	uxth	fp, r4
   16ecc:	e58d300c 	str	r3, [sp, #12]
   16ed0:	e3a020a3 	mov	r2, #163	; 0xa3
   16ed4:	e59d1014 	ldr	r1, [sp, #20]
   16ed8:	e1a03008 	mov	r3, r8
   16edc:	e1a0000a 	mov	r0, sl
   16ee0:	e88d0900 	stm	sp, {r8, fp}
   16ee4:	ebfff2cf 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16ee8:	e1a06000 	mov	r6, r0
   16eec:	e3500004 	cmp	r0, #4
   16ef0:	1a000042 	bne	17000 <CUSBStandardHub::EnumeratePorts()+0x1c0>
   16ef4:	e5953000 	ldr	r3, [r5]
   16ef8:	e1d330b0 	ldrh	r3, [r3]
   16efc:	e3130c01 	tst	r3, #256	; 0x100
   16f00:	0a00007d 	beq	170fc <CUSBStandardHub::EnumeratePorts()+0x2bc>
   16f04:	e3130001 	tst	r3, #1
   16f08:	0a000031 	beq	16fd4 <CUSBStandardHub::EnumeratePorts()+0x194>
   16f0c:	e59d1014 	ldr	r1, [sp, #20]
   16f10:	e3a03003 	mov	r3, #3
   16f14:	e3a02023 	mov	r2, #35	; 0x23
   16f18:	e1a0000a 	mov	r0, sl
   16f1c:	e58d800c 	str	r8, [sp, #12]
   16f20:	e58d8008 	str	r8, [sp, #8]
   16f24:	e88d0840 	stm	sp, {r6, fp}
   16f28:	ebfff2be 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16f2c:	e3500000 	cmp	r0, #0
   16f30:	ba000069 	blt	170dc <CUSBStandardHub::EnumeratePorts()+0x29c>
   16f34:	eb007b17 	bl	35b98 <CTimer::Get()>
   16f38:	e3a00064 	mov	r0, #100	; 0x64
   16f3c:	eb007ad4 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   16f40:	e58d600c 	str	r6, [sp, #12]
   16f44:	e88d0900 	stm	sp, {r8, fp}
   16f48:	e3a020a3 	mov	r2, #163	; 0xa3
   16f4c:	e59d1014 	ldr	r1, [sp, #20]
   16f50:	e1a0000a 	mov	r0, sl
   16f54:	e5953000 	ldr	r3, [r5]
   16f58:	e58d3008 	str	r3, [sp, #8]
   16f5c:	e1a03008 	mov	r3, r8
   16f60:	ebfff2b0 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16f64:	e3500004 	cmp	r0, #4
   16f68:	1a00004e 	bne	170a8 <CUSBStandardHub::EnumeratePorts()+0x268>
   16f6c:	e5953000 	ldr	r3, [r5]
   16f70:	e1d330b0 	ldrh	r3, [r3]
   16f74:	e3130002 	tst	r3, #2
   16f78:	0a000065 	beq	17114 <CUSBStandardHub::EnumeratePorts()+0x2d4>
   16f7c:	e2132008 	ands	r2, r3, #8
   16f80:	1a000139 	bne	1746c <CUSBStandardHub::EnumeratePorts()+0x62c>
   16f84:	e3130c02 	tst	r3, #512	; 0x200
   16f88:	11a08002 	movne	r8, r2
   16f8c:	0a000026 	beq	1702c <CUSBStandardHub::EnumeratePorts()+0x1ec>
   16f90:	e5993000 	ldr	r3, [r9]
   16f94:	e3530000 	cmp	r3, #0
   16f98:	1a0000eb 	bne	1734c <CUSBStandardHub::EnumeratePorts()+0x50c>
   16f9c:	e3a00058 	mov	r0, #88	; 0x58
   16fa0:	eb007f3d 	bl	36c9c <operator new(unsigned int)>
   16fa4:	e244c001 	sub	ip, r4, #1
   16fa8:	e1a06000 	mov	r6, r0
   16fac:	e1a02008 	mov	r2, r8
   16fb0:	e1a03007 	mov	r3, r7
   16fb4:	e1a0100a 	mov	r1, sl
   16fb8:	e58dc000 	str	ip, [sp]
   16fbc:	ebffdcdb 	bl	e330 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   16fc0:	e1a00006 	mov	r0, r6
   16fc4:	e5896000 	str	r6, [r9]
   16fc8:	ebffdede 	bl	eb48 <CUSBDevice::Initialize()>
   16fcc:	e3500000 	cmp	r0, #0
   16fd0:	0a000038 	beq	170b8 <CUSBStandardHub::EnumeratePorts()+0x278>
   16fd4:	e5972020 	ldr	r2, [r7, #32]
   16fd8:	e2843001 	add	r3, r4, #1
   16fdc:	e2855004 	add	r5, r5, #4
   16fe0:	e1520004 	cmp	r2, r4
   16fe4:	9a000093 	bls	17238 <CUSBStandardHub::EnumeratePorts()+0x3f8>
   16fe8:	e5b90004 	ldr	r0, [r9, #4]!
   16fec:	e1a04003 	mov	r4, r3
   16ff0:	e3500000 	cmp	r0, #0
   16ff4:	0affffad 	beq	16eb0 <CUSBStandardHub::EnumeratePorts()+0x70>
   16ff8:	ebffdd25 	bl	e494 <CUSBDevice::ReScanDevices()>
   16ffc:	eafffff4 	b	16fd4 <CUSBStandardHub::EnumeratePorts()+0x194>
   17000:	eb0060ab 	bl	2f2b4 <CLogger::Get()>
   17004:	e59d3018 	ldr	r3, [sp, #24]
   17008:	e59f14a8 	ldr	r1, [pc, #1192]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   1700c:	e3a02001 	mov	r2, #1
   17010:	e58d4000 	str	r4, [sp]
   17014:	eb006274 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17018:	eaffffed 	b	16fd4 <CUSBStandardHub::EnumeratePorts()+0x194>
   1701c:	e3a00004 	mov	r0, #4
   17020:	eb007f1d 	bl	36c9c <operator new(unsigned int)>
   17024:	e5850000 	str	r0, [r5]
   17028:	eaffffa3 	b	16ebc <CUSBStandardHub::EnumeratePorts()+0x7c>
   1702c:	e3130b01 	tst	r3, #1024	; 0x400
   17030:	03a08001 	moveq	r8, #1
   17034:	13a08002 	movne	r8, #2
   17038:	eaffffd4 	b	16f90 <CUSBStandardHub::EnumeratePorts()+0x150>
   1703c:	e59d8014 	ldr	r8, [sp, #20]
   17040:	e1a05003 	mov	r5, r3
   17044:	e3a06008 	mov	r6, #8
   17048:	e1a04003 	mov	r4, r3
   1704c:	ea000002 	b	1705c <CUSBStandardHub::EnumeratePorts()+0x21c>
   17050:	e5973020 	ldr	r3, [r7, #32]
   17054:	e1530004 	cmp	r3, r4
   17058:	9a000035 	bls	17134 <CUSBStandardHub::EnumeratePorts()+0x2f4>
   1705c:	e2844001 	add	r4, r4, #1
   17060:	e3a03003 	mov	r3, #3
   17064:	e3a02023 	mov	r2, #35	; 0x23
   17068:	e1a01008 	mov	r1, r8
   1706c:	e6ffc074 	uxth	ip, r4
   17070:	e1a0000a 	mov	r0, sl
   17074:	e58d500c 	str	r5, [sp, #12]
   17078:	e58d5008 	str	r5, [sp, #8]
   1707c:	e88d1040 	stm	sp, {r6, ip}
   17080:	ebfff268 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17084:	e3500000 	cmp	r0, #0
   17088:	aafffff0 	bge	17050 <CUSBStandardHub::EnumeratePorts()+0x210>
   1708c:	eb006088 	bl	2f2b4 <CLogger::Get()>
   17090:	e30d3014 	movw	r3, #53268	; 0xd014
   17094:	e3403003 	movt	r3, #3
   17098:	e59f1418 	ldr	r1, [pc, #1048]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   1709c:	e3a02001 	mov	r2, #1
   170a0:	e58d4000 	str	r4, [sp]
   170a4:	eb006250 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   170a8:	e3a09000 	mov	r9, #0
   170ac:	e1a00009 	mov	r0, r9
   170b0:	e28dd024 	add	sp, sp, #36	; 0x24
   170b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170b8:	e5990000 	ldr	r0, [r9]
   170bc:	e3500000 	cmp	r0, #0
   170c0:	0a000002 	beq	170d0 <CUSBStandardHub::EnumeratePorts()+0x290>
   170c4:	e5903000 	ldr	r3, [r0]
   170c8:	e5933004 	ldr	r3, [r3, #4]
   170cc:	e12fff33 	blx	r3
   170d0:	e3a03000 	mov	r3, #0
   170d4:	e5893000 	str	r3, [r9]
   170d8:	eaffffbd 	b	16fd4 <CUSBStandardHub::EnumeratePorts()+0x194>
   170dc:	eb006074 	bl	2f2b4 <CLogger::Get()>
   170e0:	e59f13d0 	ldr	r1, [pc, #976]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   170e4:	e3a02001 	mov	r2, #1
   170e8:	e58d4000 	str	r4, [sp]
   170ec:	e30d3080 	movw	r3, #53376	; 0xd080
   170f0:	e3403003 	movt	r3, #3
   170f4:	eb00623c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   170f8:	eaffffb5 	b	16fd4 <CUSBStandardHub::EnumeratePorts()+0x194>
   170fc:	e30c1f34 	movw	r1, #53044	; 0xcf34
   17100:	e3401003 	movt	r1, #3
   17104:	e30d004c 	movw	r0, #53324	; 0xd04c
   17108:	e3400003 	movt	r0, #3
   1710c:	e3002139 	movw	r2, #313	; 0x139
   17110:	eb0055ea 	bl	2c8c0 <assertion_failed>
   17114:	eb006066 	bl	2f2b4 <CLogger::Get()>
   17118:	e59f1398 	ldr	r1, [pc, #920]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   1711c:	e3a02001 	mov	r2, #1
   17120:	e58d4000 	str	r4, [sp]
   17124:	e30d3098 	movw	r3, #53400	; 0xd098
   17128:	e3403003 	movt	r3, #3
   1712c:	eb00622e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17130:	eaffffa7 	b	16fd4 <CUSBStandardHub::EnumeratePorts()+0x194>
   17134:	e3a03001 	mov	r3, #1
   17138:	e5c73024 	strb	r3, [r7, #36]	; 0x24
   1713c:	eb005e4c 	bl	2ea74 <CKernelOptions::Get()>
   17140:	e3500000 	cmp	r0, #0
   17144:	0a000002 	beq	17154 <CUSBStandardHub::EnumeratePorts()+0x314>
   17148:	eb005e1b 	bl	2e9bc <CKernelOptions::GetUSBPowerDelay() const>
   1714c:	e2504000 	subs	r4, r0, #0
   17150:	1a000000 	bne	17158 <CUSBStandardHub::EnumeratePorts()+0x318>
   17154:	e30041fe 	movw	r4, #510	; 0x1fe
   17158:	eb007a8e 	bl	35b98 <CTimer::Get()>
   1715c:	e1a00004 	mov	r0, r4
   17160:	eb007a4b 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   17164:	e5973020 	ldr	r3, [r7, #32]
   17168:	e3530000 	cmp	r3, #0
   1716c:	1affff44 	bne	16e84 <CUSBStandardHub::EnumeratePorts()+0x44>
   17170:	e3a05000 	mov	r5, #0
   17174:	e3a00004 	mov	r0, #4
   17178:	e1a04000 	mov	r4, r0
   1717c:	eb007ec6 	bl	36c9c <operator new(unsigned int)>
   17180:	e59d1014 	ldr	r1, [sp, #20]
   17184:	e1a06000 	mov	r6, r0
   17188:	e58d0008 	str	r0, [sp, #8]
   1718c:	e1a03005 	mov	r3, r5
   17190:	e3a020a0 	mov	r2, #160	; 0xa0
   17194:	e1a0000a 	mov	r0, sl
   17198:	e58d400c 	str	r4, [sp, #12]
   1719c:	e58d5004 	str	r5, [sp, #4]
   171a0:	e58d5000 	str	r5, [sp]
   171a4:	ebfff21f 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   171a8:	e1a0b000 	mov	fp, r0
   171ac:	e1500004 	cmp	r0, r4
   171b0:	1a0000a1 	bne	1743c <CUSBStandardHub::EnumeratePorts()+0x5fc>
   171b4:	e1d630b0 	ldrh	r3, [r6]
   171b8:	e3130002 	tst	r3, #2
   171bc:	0a000068 	beq	17364 <CUSBStandardHub::EnumeratePorts()+0x524>
   171c0:	e5973020 	ldr	r3, [r7, #32]
   171c4:	e3530000 	cmp	r3, #0
   171c8:	13a04001 	movne	r4, #1
   171cc:	13a08008 	movne	r8, #8
   171d0:	159d9014 	ldrne	r9, [sp, #20]
   171d4:	0a00000d 	beq	17210 <CUSBStandardHub::EnumeratePorts()+0x3d0>
   171d8:	e6ff3074 	uxth	r3, r4
   171dc:	e3a02023 	mov	r2, #35	; 0x23
   171e0:	e58d3004 	str	r3, [sp, #4]
   171e4:	e1a01009 	mov	r1, r9
   171e8:	e3a03001 	mov	r3, #1
   171ec:	e1a0000a 	mov	r0, sl
   171f0:	e58d500c 	str	r5, [sp, #12]
   171f4:	e58d5008 	str	r5, [sp, #8]
   171f8:	e58d8000 	str	r8, [sp]
   171fc:	ebfff209 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17200:	e5972020 	ldr	r2, [r7, #32]
   17204:	e1520004 	cmp	r2, r4
   17208:	e2844001 	add	r4, r4, #1
   1720c:	8afffff1 	bhi	171d8 <CUSBStandardHub::EnumeratePorts()+0x398>
   17210:	eb006027 	bl	2f2b4 <CLogger::Get()>
   17214:	e59f129c 	ldr	r1, [pc, #668]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   17218:	e3a02001 	mov	r2, #1
   1721c:	e30d3144 	movw	r3, #53572	; 0xd144
   17220:	e3403003 	movt	r3, #3
   17224:	eb0061f0 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17228:	e3a01004 	mov	r1, #4
   1722c:	e1a00006 	mov	r0, r6
   17230:	eb007eb1 	bl	36cfc <operator delete(void*, unsigned int)>
   17234:	eaffff9b 	b	170a8 <CUSBStandardHub::EnumeratePorts()+0x268>
   17238:	e59d601c 	ldr	r6, [sp, #28]
   1723c:	e3520000 	cmp	r2, #0
   17240:	0affffca 	beq	17170 <CUSBStandardHub::EnumeratePorts()+0x330>
   17244:	e30d9110 	movw	r9, #53520	; 0xd110
   17248:	e3409003 	movt	r9, #3
   1724c:	e30db0ec 	movw	fp, #53484	; 0xd0ec
   17250:	e340b003 	movt	fp, #3
   17254:	e59f825c 	ldr	r8, [pc, #604]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   17258:	e2875068 	add	r5, r7, #104	; 0x68
   1725c:	e3a04001 	mov	r4, #1
   17260:	ea00000a 	b	17290 <CUSBStandardHub::EnumeratePorts()+0x450>
   17264:	eb006012 	bl	2f2b4 <CLogger::Get()>
   17268:	e3a02004 	mov	r2, #4
   1726c:	e1a03009 	mov	r3, r9
   17270:	e1a01008 	mov	r1, r8
   17274:	e58d4000 	str	r4, [sp]
   17278:	eb0061db 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1727c:	e5972020 	ldr	r2, [r7, #32]
   17280:	e1520004 	cmp	r2, r4
   17284:	e2855001 	add	r5, r5, #1
   17288:	e2844001 	add	r4, r4, #1
   1728c:	9affffb7 	bls	17170 <CUSBStandardHub::EnumeratePorts()+0x330>
   17290:	e5b60004 	ldr	r0, [r6, #4]!
   17294:	e3500000 	cmp	r0, #0
   17298:	0afffff8 	beq	17280 <CUSBStandardHub::EnumeratePorts()+0x440>
   1729c:	e5d53000 	ldrb	r3, [r5]
   172a0:	e3530000 	cmp	r3, #0
   172a4:	1afffff5 	bne	17280 <CUSBStandardHub::EnumeratePorts()+0x440>
   172a8:	e5903000 	ldr	r3, [r0]
   172ac:	e3a02001 	mov	r2, #1
   172b0:	e593300c 	ldr	r3, [r3, #12]
   172b4:	e5c52000 	strb	r2, [r5]
   172b8:	e12fff33 	blx	r3
   172bc:	e3500000 	cmp	r0, #0
   172c0:	1affffe7 	bne	17264 <CUSBStandardHub::EnumeratePorts()+0x424>
   172c4:	eb005ffa 	bl	2f2b4 <CLogger::Get()>
   172c8:	e1a0300b 	mov	r3, fp
   172cc:	e3a02002 	mov	r2, #2
   172d0:	e1a01008 	mov	r1, r8
   172d4:	e58d4000 	str	r4, [sp]
   172d8:	eb0061c3 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   172dc:	e5960000 	ldr	r0, [r6]
   172e0:	e3500000 	cmp	r0, #0
   172e4:	0a000002 	beq	172f4 <CUSBStandardHub::EnumeratePorts()+0x4b4>
   172e8:	e5903000 	ldr	r3, [r0]
   172ec:	e5933004 	ldr	r3, [r3, #4]
   172f0:	e12fff33 	blx	r3
   172f4:	e3a03000 	mov	r3, #0
   172f8:	e5972020 	ldr	r2, [r7, #32]
   172fc:	e5863000 	str	r3, [r6]
   17300:	eaffffde 	b	17280 <CUSBStandardHub::EnumeratePorts()+0x440>
   17304:	e30c1f34 	movw	r1, #53044	; 0xcf34
   17308:	e3401003 	movt	r1, #3
   1730c:	e30c0d48 	movw	r0, #52552	; 0xcd48
   17310:	e3400003 	movt	r0, #3
   17314:	e3a020f7 	mov	r2, #247	; 0xf7
   17318:	eb005568 	bl	2c8c0 <assertion_failed>
   1731c:	e30c1f34 	movw	r1, #53044	; 0xcf34
   17320:	e3401003 	movt	r1, #3
   17324:	e30d0004 	movw	r0, #53252	; 0xd004
   17328:	e3400003 	movt	r0, #3
   1732c:	e3a020fa 	mov	r2, #250	; 0xfa
   17330:	eb005562 	bl	2c8c0 <assertion_failed>
   17334:	e30c1f34 	movw	r1, #53044	; 0xcf34
   17338:	e3401003 	movt	r1, #3
   1733c:	e30c0f78 	movw	r0, #53112	; 0xcf78
   17340:	e3400003 	movt	r0, #3
   17344:	e3a020fc 	mov	r2, #252	; 0xfc
   17348:	eb00555c 	bl	2c8c0 <assertion_failed>
   1734c:	e30c1f34 	movw	r1, #53044	; 0xcf34
   17350:	e3401003 	movt	r1, #3
   17354:	e30d00d4 	movw	r0, #53460	; 0xd0d4
   17358:	e3400003 	movt	r0, #3
   1735c:	e3002176 	movw	r2, #374	; 0x176
   17360:	eb005556 	bl	2c8c0 <assertion_failed>
   17364:	e1a00006 	mov	r0, r6
   17368:	e1a0100b 	mov	r1, fp
   1736c:	eb007e62 	bl	36cfc <operator delete(void*, unsigned int)>
   17370:	e5973020 	ldr	r3, [r7, #32]
   17374:	e3530000 	cmp	r3, #0
   17378:	0a00004c 	beq	174b0 <CUSBStandardHub::EnumeratePorts()+0x670>
   1737c:	e59d8014 	ldr	r8, [sp, #20]
   17380:	e3a04001 	mov	r4, #1
   17384:	e30d30b0 	movw	r3, #53424	; 0xd0b0
   17388:	e3403003 	movt	r3, #3
   1738c:	e2876044 	add	r6, r7, #68	; 0x44
   17390:	e58d4014 	str	r4, [sp, #20]
   17394:	e58d3018 	str	r3, [sp, #24]
   17398:	ea000003 	b	173ac <CUSBStandardHub::EnumeratePorts()+0x56c>
   1739c:	e5973020 	ldr	r3, [r7, #32]
   173a0:	e1540003 	cmp	r4, r3
   173a4:	e2844001 	add	r4, r4, #1
   173a8:	2a00002d 	bcs	17464 <CUSBStandardHub::EnumeratePorts()+0x624>
   173ac:	e58db00c 	str	fp, [sp, #12]
   173b0:	e3a09000 	mov	r9, #0
   173b4:	e6ff5074 	uxth	r5, r4
   173b8:	e3a020a3 	mov	r2, #163	; 0xa3
   173bc:	e5b63004 	ldr	r3, [r6, #4]!
   173c0:	e1a01008 	mov	r1, r8
   173c4:	e58d3008 	str	r3, [sp, #8]
   173c8:	e1a0000a 	mov	r0, sl
   173cc:	e1a03009 	mov	r3, r9
   173d0:	e58d9000 	str	r9, [sp]
   173d4:	e58d5004 	str	r5, [sp, #4]
   173d8:	ebfff192 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   173dc:	e3500004 	cmp	r0, #4
   173e0:	1affffed 	bne	1739c <CUSBStandardHub::EnumeratePorts()+0x55c>
   173e4:	e5962000 	ldr	r2, [r6]
   173e8:	e1d220b0 	ldrh	r2, [r2]
   173ec:	e3120008 	tst	r2, #8
   173f0:	0affffe9 	beq	1739c <CUSBStandardHub::EnumeratePorts()+0x55c>
   173f4:	e1a01008 	mov	r1, r8
   173f8:	e3a03001 	mov	r3, #1
   173fc:	e3a02023 	mov	r2, #35	; 0x23
   17400:	e3a00008 	mov	r0, #8
   17404:	e58d5004 	str	r5, [sp, #4]
   17408:	e58d0000 	str	r0, [sp]
   1740c:	e1a0000a 	mov	r0, sl
   17410:	e58d900c 	str	r9, [sp, #12]
   17414:	e58d9008 	str	r9, [sp, #8]
   17418:	e58d9014 	str	r9, [sp, #20]
   1741c:	ebfff181 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17420:	eb005fa3 	bl	2f2b4 <CLogger::Get()>
   17424:	e59d3018 	ldr	r3, [sp, #24]
   17428:	e59f1088 	ldr	r1, [pc, #136]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   1742c:	e3a02001 	mov	r2, #1
   17430:	e58d4000 	str	r4, [sp]
   17434:	eb00616c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17438:	eaffffd7 	b	1739c <CUSBStandardHub::EnumeratePorts()+0x55c>
   1743c:	eb005f9c 	bl	2f2b4 <CLogger::Get()>
   17440:	e59f1070 	ldr	r1, [pc, #112]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   17444:	e3a02001 	mov	r2, #1
   17448:	e30d312c 	movw	r3, #53548	; 0xd12c
   1744c:	e3403003 	movt	r3, #3
   17450:	eb006165 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17454:	e1a01004 	mov	r1, r4
   17458:	e1a00006 	mov	r0, r6
   1745c:	eb007e26 	bl	36cfc <operator delete(void*, unsigned int)>
   17460:	eaffff10 	b	170a8 <CUSBStandardHub::EnumeratePorts()+0x268>
   17464:	e59d9014 	ldr	r9, [sp, #20]
   17468:	eaffff0f 	b	170ac <CUSBStandardHub::EnumeratePorts()+0x26c>
   1746c:	e59d1014 	ldr	r1, [sp, #20]
   17470:	e3a03001 	mov	r3, #1
   17474:	e1a0000a 	mov	r0, sl
   17478:	e3a02008 	mov	r2, #8
   1747c:	e58d800c 	str	r8, [sp, #12]
   17480:	e88d0804 	stm	sp, {r2, fp}
   17484:	e3a02023 	mov	r2, #35	; 0x23
   17488:	e58d8008 	str	r8, [sp, #8]
   1748c:	ebfff165 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17490:	eb005f87 	bl	2f2b4 <CLogger::Get()>
   17494:	e59f101c 	ldr	r1, [pc, #28]	; 174b8 <CUSBStandardHub::EnumeratePorts()+0x678>
   17498:	e3a02001 	mov	r2, #1
   1749c:	e58d4000 	str	r4, [sp]
   174a0:	e30d30b0 	movw	r3, #53424	; 0xd0b0
   174a4:	e3403003 	movt	r3, #3
   174a8:	eb00614f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   174ac:	eafffefd 	b	170a8 <CUSBStandardHub::EnumeratePorts()+0x268>
   174b0:	e3a09001 	mov	r9, #1
   174b4:	eafffefc 	b	170ac <CUSBStandardHub::EnumeratePorts()+0x26c>
   174b8:	0003d310 	.word	0x0003d310

000174bc <CUSBStandardHub::ReScanDevices()>:
   174bc:	eafffe5f 	b	16e40 <CUSBStandardHub::EnumeratePorts()>

000174c0 <CUSBStandardHub::Configure()>:
   174c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   174c4:	e1a04000 	mov	r4, r0
   174c8:	e24dd00c 	sub	sp, sp, #12
   174cc:	ebffe436 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   174d0:	e3500001 	cmp	r0, #1
   174d4:	1a00000c 	bne	1750c <CUSBStandardHub::Configure()+0x4c>
   174d8:	e1a05000 	mov	r5, r0
   174dc:	e3a01005 	mov	r1, #5
   174e0:	e1a00004 	mov	r0, r4
   174e4:	ebffe45c 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   174e8:	e2506000 	subs	r6, r0, #0
   174ec:	0a000006 	beq	1750c <CUSBStandardHub::Configure()+0x4c>
   174f0:	e1d630d2 	ldrsb	r3, [r6, #2]
   174f4:	e3530000 	cmp	r3, #0
   174f8:	aa000003 	bge	1750c <CUSBStandardHub::Configure()+0x4c>
   174fc:	e5d63003 	ldrb	r3, [r6, #3]
   17500:	e203303f 	and	r3, r3, #63	; 0x3f
   17504:	e3530003 	cmp	r3, #3
   17508:	0a000006 	beq	17528 <CUSBStandardHub::Configure()+0x68>
   1750c:	e59f1108 	ldr	r1, [pc, #264]	; 1761c <CUSBStandardHub::Configure()+0x15c>
   17510:	e1a00004 	mov	r0, r4
   17514:	ebffe45b 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   17518:	e3a06000 	mov	r6, #0
   1751c:	e1a00006 	mov	r0, r6
   17520:	e28dd00c 	add	sp, sp, #12
   17524:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17528:	e3a00014 	mov	r0, #20
   1752c:	eb007dda 	bl	36c9c <operator new(unsigned int)>
   17530:	e1a07000 	mov	r7, r0
   17534:	e1a00004 	mov	r0, r4
   17538:	ebffe427 	bl	105dc <CUSBFunction::GetDevice() const>
   1753c:	e1a02006 	mov	r2, r6
   17540:	e1a01000 	mov	r1, r0
   17544:	e1a00007 	mov	r0, r7
   17548:	ebffe232 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1754c:	e1a00004 	mov	r0, r4
   17550:	e5847018 	str	r7, [r4, #24]
   17554:	ebffe34d 	bl	10290 <CUSBFunction::Configure()>
   17558:	e3500000 	cmp	r0, #0
   1755c:	0a000027 	beq	17600 <CUSBStandardHub::Configure()+0x140>
   17560:	e59f20b4 	ldr	r2, [pc, #180]	; 1761c <CUSBStandardHub::Configure()+0x15c>
   17564:	e1a01005 	mov	r1, r5
   17568:	e3040ec0 	movw	r0, #20160	; 0x4ec0
   1756c:	e3400004 	movt	r0, #4
   17570:	eb007f19 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   17574:	e5840070 	str	r0, [r4, #112]	; 0x70
   17578:	eb005867 	bl	2d71c <CDeviceNameService::Get()>
   1757c:	e5942070 	ldr	r2, [r4, #112]	; 0x70
   17580:	e3a0c000 	mov	ip, #0
   17584:	e59f1094 	ldr	r1, [pc, #148]	; 17620 <CUSBStandardHub::Configure()+0x160>
   17588:	e1a03004 	mov	r3, r4
   1758c:	e58dc000 	str	ip, [sp]
   17590:	eb00586d 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17594:	e1a00004 	mov	r0, r4
   17598:	ebfffe28 	bl	16e40 <CUSBStandardHub::EnumeratePorts()>
   1759c:	e2506000 	subs	r6, r0, #0
   175a0:	0a00000f 	beq	175e4 <CUSBStandardHub::Configure()+0x124>
   175a4:	e1a00004 	mov	r0, r4
   175a8:	ebffe420 	bl	10630 <CUSBFunction::GetHost() const>
   175ac:	ebfff19d 	bl	13c28 <CUSBHostController::IsPlugAndPlay()>
   175b0:	e3500000 	cmp	r0, #0
   175b4:	0affffd8 	beq	1751c <CUSBStandardHub::Configure()+0x5c>
   175b8:	e1a00004 	mov	r0, r4
   175bc:	ebfffd66 	bl	16b5c <CUSBStandardHub::StartStatusChangeRequest()>
   175c0:	e3500000 	cmp	r0, #0
   175c4:	1affffd4 	bne	1751c <CUSBStandardHub::Configure()+0x5c>
   175c8:	eb005f39 	bl	2f2b4 <CLogger::Get()>
   175cc:	e59f1048 	ldr	r1, [pc, #72]	; 1761c <CUSBStandardHub::Configure()+0x15c>
   175d0:	e1a02005 	mov	r2, r5
   175d4:	e30d3178 	movw	r3, #53624	; 0xd178
   175d8:	e3403003 	movt	r3, #3
   175dc:	eb006102 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   175e0:	eaffffcc 	b	17518 <CUSBStandardHub::Configure()+0x58>
   175e4:	eb005f32 	bl	2f2b4 <CLogger::Get()>
   175e8:	e59f102c 	ldr	r1, [pc, #44]	; 1761c <CUSBStandardHub::Configure()+0x15c>
   175ec:	e1a02005 	mov	r2, r5
   175f0:	e30d3160 	movw	r3, #53600	; 0xd160
   175f4:	e3403003 	movt	r3, #3
   175f8:	eb0060fb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   175fc:	eaffffc5 	b	17518 <CUSBStandardHub::Configure()+0x58>
   17600:	eb005f2b 	bl	2f2b4 <CLogger::Get()>
   17604:	e59f1010 	ldr	r1, [pc, #16]	; 1761c <CUSBStandardHub::Configure()+0x15c>
   17608:	e1a02005 	mov	r2, r5
   1760c:	e30b3eac 	movw	r3, #48812	; 0xbeac
   17610:	e3403003 	movt	r3, #3
   17614:	eb0060f4 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17618:	eaffffbe 	b	17518 <CUSBStandardHub::Configure()+0x58>
   1761c:	0003d310 	.word	0x0003d310
   17620:	0003d308 	.word	0x0003d308

00017624 <CUSBStandardHub::HandlePortStatusChange()>:
   17624:	e590301c 	ldr	r3, [r0, #28]
   17628:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1762c:	e3530000 	cmp	r3, #0
   17630:	e24dd01c 	sub	sp, sp, #28
   17634:	0a0000d5 	beq	17990 <CUSBStandardHub::HandlePortStatusChange()+0x36c>
   17638:	e5901020 	ldr	r1, [r0, #32]
   1763c:	e1a06000 	mov	r6, r0
   17640:	e5d32000 	ldrb	r2, [r3]
   17644:	e3510007 	cmp	r1, #7
   17648:	8a00008e 	bhi	17888 <CUSBStandardHub::HandlePortStatusChange()+0x264>
   1764c:	e1a0b002 	mov	fp, r2
   17650:	e3120001 	tst	r2, #1
   17654:	1a000090 	bne	1789c <CUSBStandardHub::HandlePortStatusChange()+0x278>
   17658:	e3510000 	cmp	r1, #0
   1765c:	0a0000a9 	beq	17908 <CUSBStandardHub::HandlePortStatusChange()+0x2e4>
   17660:	e30d31dc 	movw	r3, #53724	; 0xd1dc
   17664:	e3403003 	movt	r3, #3
   17668:	e2865028 	add	r5, r6, #40	; 0x28
   1766c:	e3a04000 	mov	r4, #0
   17670:	e58d3010 	str	r3, [sp, #16]
   17674:	ea000007 	b	17698 <CUSBStandardHub::HandlePortStatusChange()+0x74>
   17678:	e3170010 	tst	r7, #16
   1767c:	1a000044 	bne	17794 <CUSBStandardHub::HandlePortStatusChange()+0x170>
   17680:	e3170001 	tst	r7, #1
   17684:	1a00005d 	bne	17800 <CUSBStandardHub::HandlePortStatusChange()+0x1dc>
   17688:	e5961020 	ldr	r1, [r6, #32]
   1768c:	e2855004 	add	r5, r5, #4
   17690:	e1540001 	cmp	r4, r1
   17694:	2a00009b 	bcs	17908 <CUSBStandardHub::HandlePortStatusChange()+0x2e4>
   17698:	e1a0a004 	mov	sl, r4
   1769c:	e2844001 	add	r4, r4, #1
   176a0:	e1a0345b 	asr	r3, fp, r4
   176a4:	e3130001 	tst	r3, #1
   176a8:	0afffff7 	beq	1768c <CUSBStandardHub::HandlePortStatusChange()+0x68>
   176ac:	e1a00006 	mov	r0, r6
   176b0:	e6ff8074 	uxth	r8, r4
   176b4:	ebffe3dd 	bl	10630 <CUSBFunction::GetHost() const>
   176b8:	e1a07000 	mov	r7, r0
   176bc:	e1a00006 	mov	r0, r6
   176c0:	ebffe3cf 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   176c4:	e3a03004 	mov	r3, #4
   176c8:	e58d300c 	str	r3, [sp, #12]
   176cc:	e1a01000 	mov	r1, r0
   176d0:	e1a00007 	mov	r0, r7
   176d4:	e3a07000 	mov	r7, #0
   176d8:	e5953020 	ldr	r3, [r5, #32]
   176dc:	e3a020a3 	mov	r2, #163	; 0xa3
   176e0:	e58d3008 	str	r3, [sp, #8]
   176e4:	e1a03007 	mov	r3, r7
   176e8:	e88d0180 	stm	sp, {r7, r8}
   176ec:	ebfff0cd 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   176f0:	e3500004 	cmp	r0, #4
   176f4:	0a000005 	beq	17710 <CUSBStandardHub::HandlePortStatusChange()+0xec>
   176f8:	eb005eed 	bl	2f2b4 <CLogger::Get()>
   176fc:	e59d3010 	ldr	r3, [sp, #16]
   17700:	e59f12c0 	ldr	r1, [pc, #704]	; 179c8 <CUSBStandardHub::HandlePortStatusChange()+0x3a4>
   17704:	e1a02007 	mov	r2, r7
   17708:	e58d4000 	str	r4, [sp]
   1770c:	eb0060b6 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17710:	e5953020 	ldr	r3, [r5, #32]
   17714:	e1d370b2 	ldrh	r7, [r3, #2]
   17718:	e3170004 	tst	r7, #4
   1771c:	1a00007f 	bne	17920 <CUSBStandardHub::HandlePortStatusChange()+0x2fc>
   17720:	e2179008 	ands	r9, r7, #8
   17724:	1a000083 	bne	17938 <CUSBStandardHub::HandlePortStatusChange()+0x314>
   17728:	e3170002 	tst	r7, #2
   1772c:	0affffd1 	beq	17678 <CUSBStandardHub::HandlePortStatusChange()+0x54>
   17730:	e1a00006 	mov	r0, r6
   17734:	ebffe3bd 	bl	10630 <CUSBFunction::GetHost() const>
   17738:	e58d0014 	str	r0, [sp, #20]
   1773c:	e1a00006 	mov	r0, r6
   17740:	ebffe3af 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   17744:	e3a03011 	mov	r3, #17
   17748:	e1a01000 	mov	r1, r0
   1774c:	e58d3000 	str	r3, [sp]
   17750:	e59d0014 	ldr	r0, [sp, #20]
   17754:	e3a03001 	mov	r3, #1
   17758:	e3a02023 	mov	r2, #35	; 0x23
   1775c:	e58d900c 	str	r9, [sp, #12]
   17760:	e1cd80f4 	strd	r8, [sp, #4]
   17764:	ebfff0af 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17768:	e3500000 	cmp	r0, #0
   1776c:	aaffffc1 	bge	17678 <CUSBStandardHub::HandlePortStatusChange()+0x54>
   17770:	eb005ecf 	bl	2f2b4 <CLogger::Get()>
   17774:	e59f124c 	ldr	r1, [pc, #588]	; 179c8 <CUSBStandardHub::HandlePortStatusChange()+0x3a4>
   17778:	e1a02009 	mov	r2, r9
   1777c:	e58d4000 	str	r4, [sp]
   17780:	e30d325c 	movw	r3, #53852	; 0xd25c
   17784:	e3403003 	movt	r3, #3
   17788:	eb006097 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1778c:	e3170010 	tst	r7, #16
   17790:	0affffba 	beq	17680 <CUSBStandardHub::HandlePortStatusChange()+0x5c>
   17794:	e1a00006 	mov	r0, r6
   17798:	ebffe3a4 	bl	10630 <CUSBFunction::GetHost() const>
   1779c:	e1a09000 	mov	r9, r0
   177a0:	e1a00006 	mov	r0, r6
   177a4:	ebffe396 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   177a8:	e3a03014 	mov	r3, #20
   177ac:	e1a01000 	mov	r1, r0
   177b0:	e58d3000 	str	r3, [sp]
   177b4:	e1a00009 	mov	r0, r9
   177b8:	e3a03001 	mov	r3, #1
   177bc:	e3a09000 	mov	r9, #0
   177c0:	e3a02023 	mov	r2, #35	; 0x23
   177c4:	e58d8004 	str	r8, [sp, #4]
   177c8:	e58d900c 	str	r9, [sp, #12]
   177cc:	e58d9008 	str	r9, [sp, #8]
   177d0:	ebfff094 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   177d4:	e1500009 	cmp	r0, r9
   177d8:	aaffffa8 	bge	17680 <CUSBStandardHub::HandlePortStatusChange()+0x5c>
   177dc:	eb005eb4 	bl	2f2b4 <CLogger::Get()>
   177e0:	e59f11e0 	ldr	r1, [pc, #480]	; 179c8 <CUSBStandardHub::HandlePortStatusChange()+0x3a4>
   177e4:	e1a02009 	mov	r2, r9
   177e8:	e58d4000 	str	r4, [sp]
   177ec:	e30d3284 	movw	r3, #53892	; 0xd284
   177f0:	e3403003 	movt	r3, #3
   177f4:	eb00607c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   177f8:	e3170001 	tst	r7, #1
   177fc:	0affffa1 	beq	17688 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   17800:	e1a00006 	mov	r0, r6
   17804:	ebffe389 	bl	10630 <CUSBFunction::GetHost() const>
   17808:	e1a07000 	mov	r7, r0
   1780c:	e1a00006 	mov	r0, r6
   17810:	ebffe37b 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   17814:	e3a03010 	mov	r3, #16
   17818:	e1a01000 	mov	r1, r0
   1781c:	e58d3000 	str	r3, [sp]
   17820:	e1a00007 	mov	r0, r7
   17824:	e3a03001 	mov	r3, #1
   17828:	e3a07000 	mov	r7, #0
   1782c:	e3a02023 	mov	r2, #35	; 0x23
   17830:	e58d8004 	str	r8, [sp, #4]
   17834:	e58d700c 	str	r7, [sp, #12]
   17838:	e58d7008 	str	r7, [sp, #8]
   1783c:	ebfff079 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17840:	e1500007 	cmp	r0, r7
   17844:	ba000041 	blt	17950 <CUSBStandardHub::HandlePortStatusChange()+0x32c>
   17848:	e5953020 	ldr	r3, [r5, #32]
   1784c:	e1d330b0 	ldrh	r3, [r3]
   17850:	e3130001 	tst	r3, #1
   17854:	e5953000 	ldr	r3, [r5]
   17858:	0a000017 	beq	178bc <CUSBStandardHub::HandlePortStatusChange()+0x298>
   1785c:	e3530000 	cmp	r3, #0
   17860:	1affff88 	bne	17688 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   17864:	e5963000 	ldr	r3, [r6]
   17868:	e1a00006 	mov	r0, r6
   1786c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   17870:	e30734bc 	movw	r3, #29884	; 0x74bc
   17874:	e3403001 	movt	r3, #1
   17878:	e1520003 	cmp	r2, r3
   1787c:	1a00004f 	bne	179c0 <CUSBStandardHub::HandlePortStatusChange()+0x39c>
   17880:	ebfffd6e 	bl	16e40 <CUSBStandardHub::EnumeratePorts()>
   17884:	eaffff7f 	b	17688 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   17888:	e351000f 	cmp	r1, #15
   1788c:	8a000045 	bhi	179a8 <CUSBStandardHub::HandlePortStatusChange()+0x384>
   17890:	e1d3b0b0 	ldrh	fp, [r3]
   17894:	e31b0001 	tst	fp, #1
   17898:	0affff70 	beq	17660 <CUSBStandardHub::HandlePortStatusChange()+0x3c>
   1789c:	eb005e84 	bl	2f2b4 <CLogger::Get()>
   178a0:	e59f1120 	ldr	r1, [pc, #288]	; 179c8 <CUSBStandardHub::HandlePortStatusChange()+0x3a4>
   178a4:	e3a02000 	mov	r2, #0
   178a8:	e30d31bc 	movw	r3, #53692	; 0xd1bc
   178ac:	e3403003 	movt	r3, #3
   178b0:	eb00604d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   178b4:	e5961020 	ldr	r1, [r6, #32]
   178b8:	eaffff66 	b	17658 <CUSBStandardHub::HandlePortStatusChange()+0x34>
   178bc:	e3530000 	cmp	r3, #0
   178c0:	0affff70 	beq	17688 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   178c4:	e1a0100a 	mov	r1, sl
   178c8:	e1a00006 	mov	r0, r6
   178cc:	ebfffc61 	bl	16a58 <CUSBStandardHub::DisablePort(unsigned int)>
   178d0:	e3500000 	cmp	r0, #0
   178d4:	0affff6b 	beq	17688 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   178d8:	e5950000 	ldr	r0, [r5]
   178dc:	e3500000 	cmp	r0, #0
   178e0:	0a000002 	beq	178f0 <CUSBStandardHub::HandlePortStatusChange()+0x2cc>
   178e4:	e5903000 	ldr	r3, [r0]
   178e8:	e5933004 	ldr	r3, [r3, #4]
   178ec:	e12fff33 	blx	r3
   178f0:	e5961020 	ldr	r1, [r6, #32]
   178f4:	e3a03000 	mov	r3, #0
   178f8:	e2855004 	add	r5, r5, #4
   178fc:	e5053004 	str	r3, [r5, #-4]
   17900:	e1540001 	cmp	r4, r1
   17904:	3affff63 	bcc	17698 <CUSBStandardHub::HandlePortStatusChange()+0x74>
   17908:	e1a00006 	mov	r0, r6
   1790c:	ebfffc92 	bl	16b5c <CUSBStandardHub::StartStatusChangeRequest()>
   17910:	e3500000 	cmp	r0, #0
   17914:	0a000015 	beq	17970 <CUSBStandardHub::HandlePortStatusChange()+0x34c>
   17918:	e28dd01c 	add	sp, sp, #28
   1791c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17920:	e30c1f34 	movw	r1, #53044	; 0xcf34
   17924:	e3401003 	movt	r1, #3
   17928:	e30d0200 	movw	r0, #53760	; 0xd200
   1792c:	e3400003 	movt	r0, #3
   17930:	e3002236 	movw	r2, #566	; 0x236
   17934:	eb0053e1 	bl	2c8c0 <assertion_failed>
   17938:	e30c1f34 	movw	r1, #53044	; 0xcf34
   1793c:	e3401003 	movt	r1, #3
   17940:	e30d022c 	movw	r0, #53804	; 0xd22c
   17944:	e3400003 	movt	r0, #3
   17948:	e3002237 	movw	r2, #567	; 0x237
   1794c:	eb0053db 	bl	2c8c0 <assertion_failed>
   17950:	eb005e57 	bl	2f2b4 <CLogger::Get()>
   17954:	e59f106c 	ldr	r1, [pc, #108]	; 179c8 <CUSBStandardHub::HandlePortStatusChange()+0x3a4>
   17958:	e1a02007 	mov	r2, r7
   1795c:	e58d4000 	str	r4, [sp]
   17960:	e30d32a8 	movw	r3, #53928	; 0xd2a8
   17964:	e3403003 	movt	r3, #3
   17968:	eb00601f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1796c:	eaffffb5 	b	17848 <CUSBStandardHub::HandlePortStatusChange()+0x224>
   17970:	eb005e4f 	bl	2f2b4 <CLogger::Get()>
   17974:	e59f104c 	ldr	r1, [pc, #76]	; 179c8 <CUSBStandardHub::HandlePortStatusChange()+0x3a4>
   17978:	e3a02001 	mov	r2, #1
   1797c:	e30c3668 	movw	r3, #50792	; 0xc668
   17980:	e3403003 	movt	r3, #3
   17984:	e28dd01c 	add	sp, sp, #28
   17988:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1798c:	ea006016 	b	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17990:	e30c1f34 	movw	r1, #53044	; 0xcf34
   17994:	e3401003 	movt	r1, #3
   17998:	e30d0190 	movw	r0, #53648	; 0xd190
   1799c:	e3400003 	movt	r0, #3
   179a0:	e3002212 	movw	r2, #530	; 0x212
   179a4:	eb0053c5 	bl	2c8c0 <assertion_failed>
   179a8:	e30c1f34 	movw	r1, #53044	; 0xcf34
   179ac:	e3401003 	movt	r1, #3
   179b0:	e30d01ac 	movw	r0, #53676	; 0xd1ac
   179b4:	e3400003 	movt	r0, #3
   179b8:	e3002216 	movw	r2, #534	; 0x216
   179bc:	eb0053bf 	bl	2c8c0 <assertion_failed>
   179c0:	e12fff32 	blx	r2
   179c4:	eaffff2f 	b	17688 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   179c8:	0003d310 	.word	0x0003d310

000179cc <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE>:
   179cc:	e92d4010 	push	{r4, lr}
   179d0:	e3044ec0 	movw	r4, #20160	; 0x4ec0
   179d4:	e3404004 	movt	r4, #4
   179d8:	e3a0203f 	mov	r2, #63	; 0x3f
   179dc:	e3a01001 	mov	r1, #1
   179e0:	e1a00004 	mov	r0, r4
   179e4:	eb007de7 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   179e8:	e1a00004 	mov	r0, r4
   179ec:	e3042f78 	movw	r2, #20344	; 0x4f78
   179f0:	e3402004 	movt	r2, #4
   179f4:	e30711d8 	movw	r1, #29144	; 0x71d8
   179f8:	e3401003 	movt	r1, #3
   179fc:	e8bd4010 	pop	{r4, lr}
   17a00:	ea0074ab 	b	34cb4 <__aeabi_atexit>

00017a04 <CUSBString::CUSBString(CUSBDevice*)>:
   17a04:	e92d4070 	push	{r4, r5, r6, lr}
   17a08:	e1a04000 	mov	r4, r0
   17a0c:	e3a03000 	mov	r3, #0
   17a10:	e3a00010 	mov	r0, #16
   17a14:	e884000a 	stm	r4, {r1, r3}
   17a18:	eb007c9f 	bl	36c9c <operator new(unsigned int)>
   17a1c:	e1a05000 	mov	r5, r0
   17a20:	eb006ecd 	bl	3355c <CString::CString()>
   17a24:	e5943000 	ldr	r3, [r4]
   17a28:	e5845008 	str	r5, [r4, #8]
   17a2c:	e3530000 	cmp	r3, #0
   17a30:	0a000001 	beq	17a3c <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17a34:	e1a00004 	mov	r0, r4
   17a38:	e8bd8070 	pop	{r4, r5, r6, pc}
   17a3c:	e30d1318 	movw	r1, #54040	; 0xd318
   17a40:	e3401003 	movt	r1, #3
   17a44:	e30b0460 	movw	r0, #46176	; 0xb460
   17a48:	e3400003 	movt	r0, #3
   17a4c:	e3a02023 	mov	r2, #35	; 0x23
   17a50:	eb00539a 	bl	2c8c0 <assertion_failed>

00017a54 <CUSBString::CUSBString(CUSBString*)>:
   17a54:	e92d4070 	push	{r4, r5, r6, lr}
   17a58:	e1a04000 	mov	r4, r0
   17a5c:	e3a03000 	mov	r3, #0
   17a60:	e3a00010 	mov	r0, #16
   17a64:	e1a05001 	mov	r5, r1
   17a68:	e5843004 	str	r3, [r4, #4]
   17a6c:	eb007c8a 	bl	36c9c <operator new(unsigned int)>
   17a70:	e1a06000 	mov	r6, r0
   17a74:	eb006eb8 	bl	3355c <CString::CString()>
   17a78:	e3550000 	cmp	r5, #0
   17a7c:	e5846008 	str	r6, [r4, #8]
   17a80:	0a000018 	beq	17ae8 <CUSBString::CUSBString(CUSBString*)+0x94>
   17a84:	e1c520d0 	ldrd	r2, [r5]
   17a88:	e5842000 	str	r2, [r4]
   17a8c:	e3530000 	cmp	r3, #0
   17a90:	0a000008 	beq	17ab8 <CUSBString::CUSBString(CUSBString*)+0x64>
   17a94:	e5d30000 	ldrb	r0, [r3]
   17a98:	eb007c85 	bl	36cb4 <operator new[](unsigned int)>
   17a9c:	e5951004 	ldr	r1, [r5, #4]
   17aa0:	e5840004 	str	r0, [r4, #4]
   17aa4:	e5d12000 	ldrb	r2, [r1]
   17aa8:	eb007a72 	bl	36478 <memcpy>
   17aac:	e5943008 	ldr	r3, [r4, #8]
   17ab0:	e3530000 	cmp	r3, #0
   17ab4:	0a000005 	beq	17ad0 <CUSBString::CUSBString(CUSBString*)+0x7c>
   17ab8:	e5953008 	ldr	r3, [r5, #8]
   17abc:	e3530000 	cmp	r3, #0
   17ac0:	0a00000e 	beq	17b00 <CUSBString::CUSBString(CUSBString*)+0xac>
   17ac4:	e1a00004 	mov	r0, r4
   17ac8:	e5843008 	str	r3, [r4, #8]
   17acc:	e8bd8070 	pop	{r4, r5, r6, pc}
   17ad0:	e30d1318 	movw	r1, #54040	; 0xd318
   17ad4:	e3401003 	movt	r1, #3
   17ad8:	e30d0328 	movw	r0, #54056	; 0xd328
   17adc:	e3400003 	movt	r0, #3
   17ae0:	e3a02035 	mov	r2, #53	; 0x35
   17ae4:	eb005375 	bl	2c8c0 <assertion_failed>
   17ae8:	e30d1318 	movw	r1, #54040	; 0xd318
   17aec:	e3401003 	movt	r1, #3
   17af0:	e30b0b6c 	movw	r0, #47980	; 0xbb6c
   17af4:	e3400003 	movt	r0, #3
   17af8:	e3a0202b 	mov	r2, #43	; 0x2b
   17afc:	eb00536f 	bl	2c8c0 <assertion_failed>
   17b00:	e30d1318 	movw	r1, #54040	; 0xd318
   17b04:	e3401003 	movt	r1, #3
   17b08:	e30d0338 	movw	r0, #54072	; 0xd338
   17b0c:	e3400003 	movt	r0, #3
   17b10:	e3a02036 	mov	r2, #54	; 0x36
   17b14:	eb005369 	bl	2c8c0 <assertion_failed>

00017b18 <CUSBString::~CUSBString()>:
   17b18:	e92d4010 	push	{r4, lr}
   17b1c:	e1a04000 	mov	r4, r0
   17b20:	e5900008 	ldr	r0, [r0, #8]
   17b24:	e3500000 	cmp	r0, #0
   17b28:	0a000002 	beq	17b38 <CUSBString::~CUSBString()+0x20>
   17b2c:	e5903000 	ldr	r3, [r0]
   17b30:	e5933004 	ldr	r3, [r3, #4]
   17b34:	e12fff33 	blx	r3
   17b38:	e5940004 	ldr	r0, [r4, #4]
   17b3c:	e3a03000 	mov	r3, #0
   17b40:	e5843008 	str	r3, [r4, #8]
   17b44:	e1500003 	cmp	r0, r3
   17b48:	0a000000 	beq	17b50 <CUSBString::~CUSBString()+0x38>
   17b4c:	eb007c64 	bl	36ce4 <operator delete[](void*)>
   17b50:	e1a00004 	mov	r0, r4
   17b54:	e8bd8010 	pop	{r4, pc}

00017b58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17b58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b5c:	e2516000 	subs	r6, r1, #0
   17b60:	e28db020 	add	fp, sp, #32
   17b64:	e24dd014 	sub	sp, sp, #20
   17b68:	0a000051 	beq	17cb4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x15c>
   17b6c:	e1a04000 	mov	r4, r0
   17b70:	e5900004 	ldr	r0, [r0, #4]
   17b74:	e1a07002 	mov	r7, r2
   17b78:	e3500000 	cmp	r0, #0
   17b7c:	0a000000 	beq	17b84 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17b80:	eb007c57 	bl	36ce4 <operator delete[](void*)>
   17b84:	e3a00004 	mov	r0, #4
   17b88:	eb007c49 	bl	36cb4 <operator new[](unsigned int)>
   17b8c:	e5943000 	ldr	r3, [r4]
   17b90:	e5840004 	str	r0, [r4, #4]
   17b94:	e3530000 	cmp	r3, #0
   17b98:	0a00004b 	beq	17ccc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x174>
   17b9c:	e1a00003 	mov	r0, r3
   17ba0:	e3a08080 	mov	r8, #128	; 0x80
   17ba4:	ebffdafb 	bl	e798 <CUSBDevice::GetHost() const>
   17ba8:	e1a05000 	mov	r5, r0
   17bac:	e5940000 	ldr	r0, [r4]
   17bb0:	ebffdaee 	bl	e770 <CUSBDevice::GetEndpoint0() const>
   17bb4:	e58d700c 	str	r7, [sp, #12]
   17bb8:	e58d8008 	str	r8, [sp, #8]
   17bbc:	e1a01000 	mov	r1, r0
   17bc0:	e3a02003 	mov	r2, #3
   17bc4:	e1a00005 	mov	r0, r5
   17bc8:	e5943004 	ldr	r3, [r4, #4]
   17bcc:	e58d3000 	str	r3, [sp]
   17bd0:	e3a03004 	mov	r3, #4
   17bd4:	e58d3004 	str	r3, [sp, #4]
   17bd8:	e1a03006 	mov	r3, r6
   17bdc:	ebffefc7 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17be0:	e3500000 	cmp	r0, #0
   17be4:	ba00002f 	blt	17ca8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17be8:	e5940004 	ldr	r0, [r4, #4]
   17bec:	e5d05000 	ldrb	r5, [r0]
   17bf0:	e3550001 	cmp	r5, #1
   17bf4:	9a00002b 	bls	17ca8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17bf8:	e3150001 	tst	r5, #1
   17bfc:	1a000029 	bne	17ca8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17c00:	e5d09001 	ldrb	r9, [r0, #1]
   17c04:	e3590003 	cmp	r9, #3
   17c08:	1a000026 	bne	17ca8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17c0c:	e3550004 	cmp	r5, #4
   17c10:	8a000033 	bhi	17ce4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x18c>
   17c14:	e3550002 	cmp	r5, #2
   17c18:	0a000057 	beq	17d7c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   17c1c:	e3550004 	cmp	r5, #4
   17c20:	024dd008 	subeq	sp, sp, #8
   17c24:	03a06001 	moveq	r6, #1
   17c28:	028d5010 	addeq	r5, sp, #16
   17c2c:	1a000058 	bne	17d94 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>
   17c30:	e246e001 	sub	lr, r6, #1
   17c34:	e2452001 	sub	r2, r5, #1
   17c38:	e08ee005 	add	lr, lr, r5
   17c3c:	e2651001 	rsb	r1, r5, #1
   17c40:	e0813002 	add	r3, r1, r2
   17c44:	e0803083 	add	r3, r0, r3, lsl #1
   17c48:	e1d330b2 	ldrh	r3, [r3, #2]
   17c4c:	e243c020 	sub	ip, r3, #32
   17c50:	e3530000 	cmp	r3, #0
   17c54:	135c005e 	cmpne	ip, #94	; 0x5e
   17c58:	83a0305f 	movhi	r3, #95	; 0x5f
   17c5c:	e5e23001 	strb	r3, [r2, #1]!
   17c60:	e152000e 	cmp	r2, lr
   17c64:	1afffff5 	bne	17c40 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xe8>
   17c68:	e5940008 	ldr	r0, [r4, #8]
   17c6c:	e3a03000 	mov	r3, #0
   17c70:	e7c53006 	strb	r3, [r5, r6]
   17c74:	e1500003 	cmp	r0, r3
   17c78:	0a000002 	beq	17c88 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x130>
   17c7c:	e5903000 	ldr	r3, [r0]
   17c80:	e5933004 	ldr	r3, [r3, #4]
   17c84:	e12fff33 	blx	r3
   17c88:	e3a00010 	mov	r0, #16
   17c8c:	eb007c02 	bl	36c9c <operator new(unsigned int)>
   17c90:	e1a01005 	mov	r1, r5
   17c94:	e1a05000 	mov	r5, r0
   17c98:	eb006e35 	bl	33574 <CString::CString(char const*)>
   17c9c:	e3a00001 	mov	r0, #1
   17ca0:	e5845008 	str	r5, [r4, #8]
   17ca4:	ea000000 	b	17cac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x154>
   17ca8:	e3a00000 	mov	r0, #0
   17cac:	e24bd020 	sub	sp, fp, #32
   17cb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cb4:	e30d1318 	movw	r1, #54040	; 0xd318
   17cb8:	e3401003 	movt	r1, #3
   17cbc:	e30d0350 	movw	r0, #54096	; 0xd350
   17cc0:	e3400003 	movt	r0, #3
   17cc4:	e3a02047 	mov	r2, #71	; 0x47
   17cc8:	eb0052fc 	bl	2c8c0 <assertion_failed>
   17ccc:	e30d1318 	movw	r1, #54040	; 0xd318
   17cd0:	e3401003 	movt	r1, #3
   17cd4:	e30b0460 	movw	r0, #46176	; 0xb460
   17cd8:	e3400003 	movt	r0, #3
   17cdc:	e3a0204d 	mov	r2, #77	; 0x4d
   17ce0:	eb0052f6 	bl	2c8c0 <assertion_failed>
   17ce4:	e3a01002 	mov	r1, #2
   17ce8:	eb007c03 	bl	36cfc <operator delete(void*, unsigned int)>
   17cec:	e1a00005 	mov	r0, r5
   17cf0:	eb007bef 	bl	36cb4 <operator new[](unsigned int)>
   17cf4:	e5840004 	str	r0, [r4, #4]
   17cf8:	e5940000 	ldr	r0, [r4]
   17cfc:	ebffdaa5 	bl	e798 <CUSBDevice::GetHost() const>
   17d00:	e1a0a000 	mov	sl, r0
   17d04:	e5940000 	ldr	r0, [r4]
   17d08:	ebffda98 	bl	e770 <CUSBDevice::GetEndpoint0() const>
   17d0c:	e58d700c 	str	r7, [sp, #12]
   17d10:	e58d8008 	str	r8, [sp, #8]
   17d14:	e1a01000 	mov	r1, r0
   17d18:	e58d5004 	str	r5, [sp, #4]
   17d1c:	e1a03006 	mov	r3, r6
   17d20:	e1a02009 	mov	r2, r9
   17d24:	e1a0000a 	mov	r0, sl
   17d28:	e594c004 	ldr	ip, [r4, #4]
   17d2c:	e58dc000 	str	ip, [sp]
   17d30:	ebffef72 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17d34:	e1550000 	cmp	r5, r0
   17d38:	1affffda 	bne	17ca8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17d3c:	e5940004 	ldr	r0, [r4, #4]
   17d40:	e5d03000 	ldrb	r3, [r0]
   17d44:	e1530005 	cmp	r3, r5
   17d48:	1affffd6 	bne	17ca8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17d4c:	e5d02001 	ldrb	r2, [r0, #1]
   17d50:	e3520003 	cmp	r2, #3
   17d54:	1affffd3 	bne	17ca8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17d58:	e3130001 	tst	r3, #1
   17d5c:	1a00000c 	bne	17d94 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>
   17d60:	e2433002 	sub	r3, r3, #2
   17d64:	e1a060c3 	asr	r6, r3, #1
   17d68:	e2863008 	add	r3, r6, #8
   17d6c:	e3c33007 	bic	r3, r3, #7
   17d70:	e04dd003 	sub	sp, sp, r3
   17d74:	e28d5010 	add	r5, sp, #16
   17d78:	eaffffac 	b	17c30 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd8>
   17d7c:	e30d1318 	movw	r1, #54040	; 0xd318
   17d80:	e3401003 	movt	r1, #3
   17d84:	e30d035c 	movw	r0, #54108	; 0xd35c
   17d88:	e3400003 	movt	r0, #3
   17d8c:	e3a02075 	mov	r2, #117	; 0x75
   17d90:	eb0052ca 	bl	2c8c0 <assertion_failed>
   17d94:	e30d1318 	movw	r1, #54040	; 0xd318
   17d98:	e3401003 	movt	r1, #3
   17d9c:	e30d0378 	movw	r0, #54136	; 0xd378
   17da0:	e3400003 	movt	r0, #3
   17da4:	e3a02076 	mov	r2, #118	; 0x76
   17da8:	eb0052c4 	bl	2c8c0 <assertion_failed>

00017dac <CUSBString::Get() const>:
   17dac:	e5900008 	ldr	r0, [r0, #8]
   17db0:	ea006e21 	b	3363c <CString::operator char const*() const>

00017db4 <CUSBString::GetLanguageID()>:
   17db4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   17db8:	e1a06000 	mov	r6, r0
   17dbc:	e3a00004 	mov	r0, #4
   17dc0:	e24dd014 	sub	sp, sp, #20
   17dc4:	eb007bba 	bl	36cb4 <operator new[](unsigned int)>
   17dc8:	e1a04000 	mov	r4, r0
   17dcc:	e5960000 	ldr	r0, [r6]
   17dd0:	e3500000 	cmp	r0, #0
   17dd4:	0a000056 	beq	17f34 <CUSBString::GetLanguageID()+0x180>
   17dd8:	ebffda6e 	bl	e798 <CUSBDevice::GetHost() const>
   17ddc:	e1a05000 	mov	r5, r0
   17de0:	e5960000 	ldr	r0, [r6]
   17de4:	e3a07080 	mov	r7, #128	; 0x80
   17de8:	ebffda60 	bl	e770 <CUSBDevice::GetEndpoint0() const>
   17dec:	e3a03000 	mov	r3, #0
   17df0:	e1a01000 	mov	r1, r0
   17df4:	e3a02004 	mov	r2, #4
   17df8:	e1a00005 	mov	r0, r5
   17dfc:	e58d2004 	str	r2, [sp, #4]
   17e00:	e58d300c 	str	r3, [sp, #12]
   17e04:	e3a02003 	mov	r2, #3
   17e08:	e58d4000 	str	r4, [sp]
   17e0c:	e58d7008 	str	r7, [sp, #8]
   17e10:	ebffef3a 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17e14:	e3500000 	cmp	r0, #0
   17e18:	ba000015 	blt	17e74 <CUSBString::GetLanguageID()+0xc0>
   17e1c:	e5d45000 	ldrb	r5, [r4]
   17e20:	e3550003 	cmp	r5, #3
   17e24:	9a000012 	bls	17e74 <CUSBString::GetLanguageID()+0xc0>
   17e28:	e2159001 	ands	r9, r5, #1
   17e2c:	1a000010 	bne	17e74 <CUSBString::GetLanguageID()+0xc0>
   17e30:	e5d48001 	ldrb	r8, [r4, #1]
   17e34:	e3580003 	cmp	r8, #3
   17e38:	1a00000d 	bne	17e74 <CUSBString::GetLanguageID()+0xc0>
   17e3c:	e3550004 	cmp	r5, #4
   17e40:	1a000011 	bne	17e8c <CUSBString::GetLanguageID()+0xd8>
   17e44:	e2455002 	sub	r5, r5, #2
   17e48:	e3a03000 	mov	r3, #0
   17e4c:	e3001409 	movw	r1, #1033	; 0x409
   17e50:	e1a050c5 	asr	r5, r5, #1
   17e54:	ea000002 	b	17e64 <CUSBString::GetLanguageID()+0xb0>
   17e58:	e2833001 	add	r3, r3, #1
   17e5c:	e1550003 	cmp	r5, r3
   17e60:	0a00002d 	beq	17f1c <CUSBString::GetLanguageID()+0x168>
   17e64:	e0842083 	add	r2, r4, r3, lsl #1
   17e68:	e1d220b2 	ldrh	r2, [r2, #2]
   17e6c:	e1520001 	cmp	r2, r1
   17e70:	1afffff8 	bne	17e58 <CUSBString::GetLanguageID()+0xa4>
   17e74:	e1a00004 	mov	r0, r4
   17e78:	e3004409 	movw	r4, #1033	; 0x409
   17e7c:	eb007b98 	bl	36ce4 <operator delete[](void*)>
   17e80:	e1a00004 	mov	r0, r4
   17e84:	e28dd014 	add	sp, sp, #20
   17e88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e8c:	e1a00004 	mov	r0, r4
   17e90:	eb007b93 	bl	36ce4 <operator delete[](void*)>
   17e94:	e1a00005 	mov	r0, r5
   17e98:	eb007b85 	bl	36cb4 <operator new[](unsigned int)>
   17e9c:	e1a04000 	mov	r4, r0
   17ea0:	e5960000 	ldr	r0, [r6]
   17ea4:	ebffda3b 	bl	e798 <CUSBDevice::GetHost() const>
   17ea8:	e1a03000 	mov	r3, r0
   17eac:	e5960000 	ldr	r0, [r6]
   17eb0:	e1a06003 	mov	r6, r3
   17eb4:	ebffda2d 	bl	e770 <CUSBDevice::GetEndpoint0() const>
   17eb8:	e1a02008 	mov	r2, r8
   17ebc:	e1a01000 	mov	r1, r0
   17ec0:	e1a03009 	mov	r3, r9
   17ec4:	e1a00006 	mov	r0, r6
   17ec8:	e58d7008 	str	r7, [sp, #8]
   17ecc:	e58d900c 	str	r9, [sp, #12]
   17ed0:	e1cd40f0 	strd	r4, [sp]
   17ed4:	ebffef09 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17ed8:	e1550000 	cmp	r5, r0
   17edc:	1affffe4 	bne	17e74 <CUSBString::GetLanguageID()+0xc0>
   17ee0:	e5d43000 	ldrb	r3, [r4]
   17ee4:	e1530005 	cmp	r3, r5
   17ee8:	1affffe1 	bne	17e74 <CUSBString::GetLanguageID()+0xc0>
   17eec:	e5d42001 	ldrb	r2, [r4, #1]
   17ef0:	e3520003 	cmp	r2, #3
   17ef4:	1affffde 	bne	17e74 <CUSBString::GetLanguageID()+0xc0>
   17ef8:	e3130001 	tst	r3, #1
   17efc:	01a05003 	moveq	r5, r3
   17f00:	0affffcf 	beq	17e44 <CUSBString::GetLanguageID()+0x90>
   17f04:	e30d1318 	movw	r1, #54040	; 0xd318
   17f08:	e3401003 	movt	r1, #3
   17f0c:	e30d039c 	movw	r0, #54172	; 0xd39c
   17f10:	e3400003 	movt	r0, #3
   17f14:	e3a020c9 	mov	r2, #201	; 0xc9
   17f18:	eb005268 	bl	2c8c0 <assertion_failed>
   17f1c:	e1a00004 	mov	r0, r4
   17f20:	e1d440b2 	ldrh	r4, [r4, #2]
   17f24:	eb007b6e 	bl	36ce4 <operator delete[](void*)>
   17f28:	e1a00004 	mov	r0, r4
   17f2c:	e28dd014 	add	sp, sp, #20
   17f30:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17f34:	e30d1318 	movw	r1, #54040	; 0xd318
   17f38:	e3401003 	movt	r1, #3
   17f3c:	e30b0460 	movw	r0, #46176	; 0xb460
   17f40:	e3400003 	movt	r0, #3
   17f44:	e3a0209b 	mov	r2, #155	; 0x9b
   17f48:	eb00525c 	bl	2c8c0 <assertion_failed>

00017f4c <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   17f4c:	e59f3014 	ldr	r3, [pc, #20]	; 17f68 <CUSBSerialCH341Device::~CUSBSerialCH341Device()+0x1c>
   17f50:	e92d4010 	push	{r4, lr}
   17f54:	e1a04000 	mov	r4, r0
   17f58:	e5803000 	str	r3, [r0]
   17f5c:	eb001884 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   17f60:	e1a00004 	mov	r0, r4
   17f64:	e8bd8010 	pop	{r4, pc}
   17f68:	0003d4f4 	.word	0x0003d4f4

00017f6c <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   17f6c:	e59f3020 	ldr	r3, [pc, #32]	; 17f94 <CUSBSerialCH341Device::~CUSBSerialCH341Device()+0x28>
   17f70:	e92d4010 	push	{r4, lr}
   17f74:	e1a04000 	mov	r4, r0
   17f78:	e5803000 	str	r3, [r0]
   17f7c:	eb00187c 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   17f80:	e1a00004 	mov	r0, r4
   17f84:	e3a01040 	mov	r1, #64	; 0x40
   17f88:	eb007b5b 	bl	36cfc <operator delete(void*, unsigned int)>
   17f8c:	e1a00004 	mov	r0, r4
   17f90:	e8bd8010 	pop	{r4, pc}
   17f94:	0003d4f4 	.word	0x0003d4f4

00017f98 <CUSBSerialCH341Device::SetBaudRate(unsigned int)>:
   17f98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17f9c:	e3a02a0f 	mov	r2, #61440	; 0xf000
   17fa0:	e3452b59 	movt	r2, #23385	; 0x5b59
   17fa4:	e1a05001 	mov	r5, r1
   17fa8:	e24dd014 	sub	sp, sp, #20
   17fac:	e30f1ff0 	movw	r1, #65520	; 0xfff0
   17fb0:	e1a04000 	mov	r4, r0
   17fb4:	e3a03003 	mov	r3, #3
   17fb8:	e732f512 	udiv	r2, r2, r5
   17fbc:	e1520001 	cmp	r2, r1
   17fc0:	9a000007 	bls	17fe4 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x4c>
   17fc4:	e2433001 	sub	r3, r3, #1
   17fc8:	e1a021a2 	lsr	r2, r2, #3
   17fcc:	e6ff3073 	uxth	r3, r3
   17fd0:	e3530000 	cmp	r3, #0
   17fd4:	11520001 	cmpne	r2, r1
   17fd8:	8afffff9 	bhi	17fc4 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x2c>
   17fdc:	e1520001 	cmp	r2, r1
   17fe0:	8a00001a 	bhi	18050 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xb8>
   17fe4:	e2622801 	rsb	r2, r2, #65536	; 0x10000
   17fe8:	e1a00004 	mov	r0, r4
   17fec:	e2022cff 	and	r2, r2, #65280	; 0xff00
   17ff0:	e1822003 	orr	r2, r2, r3
   17ff4:	e3826080 	orr	r6, r2, #128	; 0x80
   17ff8:	ebffe18c 	bl	10630 <CUSBFunction::GetHost() const>
   17ffc:	e2507000 	subs	r7, r0, #0
   18000:	0a000021 	beq	1808c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xf4>
   18004:	e1a00004 	mov	r0, r4
   18008:	ebffe17d 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1800c:	e3a02000 	mov	r2, #0
   18010:	e1a01000 	mov	r1, r0
   18014:	e3013312 	movw	r3, #4882	; 0x1312
   18018:	e58d200c 	str	r2, [sp, #12]
   1801c:	e1a00007 	mov	r0, r7
   18020:	e58d3000 	str	r3, [sp]
   18024:	e3a0309a 	mov	r3, #154	; 0x9a
   18028:	e58d2008 	str	r2, [sp, #8]
   1802c:	e3a02040 	mov	r2, #64	; 0x40
   18030:	e58d6004 	str	r6, [sp, #4]
   18034:	ebffee7b 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18038:	e3500000 	cmp	r0, #0
   1803c:	a3a00001 	movge	r0, #1
   18040:	a5845014 	strge	r5, [r4, #20]
   18044:	ba000009 	blt	18070 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xd8>
   18048:	e28dd014 	add	sp, sp, #20
   1804c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18050:	eb005c97 	bl	2f2b4 <CLogger::Get()>
   18054:	e30d33c0 	movw	r3, #54208	; 0xd3c0
   18058:	e3403003 	movt	r3, #3
   1805c:	e59f1040 	ldr	r1, [pc, #64]	; 180a4 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x10c>
   18060:	e3a02001 	mov	r2, #1
   18064:	eb005e60 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18068:	e3a00000 	mov	r0, #0
   1806c:	eafffff5 	b	18048 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xb0>
   18070:	eb005c8f 	bl	2f2b4 <CLogger::Get()>
   18074:	e59f1028 	ldr	r1, [pc, #40]	; 180a4 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x10c>
   18078:	e3a02001 	mov	r2, #1
   1807c:	e30d33e4 	movw	r3, #54244	; 0xd3e4
   18080:	e3403003 	movt	r3, #3
   18084:	eb005e58 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18088:	eafffff6 	b	18068 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xd0>
   1808c:	e30d13d0 	movw	r1, #54224	; 0xd3d0
   18090:	e3401003 	movt	r1, #3
   18094:	e30c0d48 	movw	r0, #52552	; 0xcd48
   18098:	e3400003 	movt	r0, #3
   1809c:	e3a02087 	mov	r2, #135	; 0x87
   180a0:	eb005206 	bl	2c8c0 <assertion_failed>
   180a4:	0003d528 	.word	0x0003d528

000180a8 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>:
   180a8:	e92d4010 	push	{r4, lr}
   180ac:	e1a04000 	mov	r4, r0
   180b0:	e3a02000 	mov	r2, #0
   180b4:	eb00193a 	bl	1e5a4 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   180b8:	e59f3008 	ldr	r3, [pc, #8]	; 180c8 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)+0x20>
   180bc:	e1a00004 	mov	r0, r4
   180c0:	e5843000 	str	r3, [r4]
   180c4:	e8bd8010 	pop	{r4, pc}
   180c8:	0003d4f4 	.word	0x0003d4f4

000180cc <CUSBSerialCH341Device::GetDeviceIDTable()>:
   180cc:	e59f0000 	ldr	r0, [pc]	; 180d4 <CUSBSerialCH341Device::GetDeviceIDTable()+0x8>
   180d0:	e12fff1e 	bx	lr
   180d4:	0003d530 	.word	0x0003d530

000180d8 <CUSBSerialCH341Device::Configure()>:
   180d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   180dc:	e1a04000 	mov	r4, r0
   180e0:	e24dd08c 	sub	sp, sp, #140	; 0x8c
   180e4:	eb001992 	bl	1e734 <CUSBSerialDevice::Configure()>
   180e8:	e3500000 	cmp	r0, #0
   180ec:	0a00004c 	beq	18224 <CUSBSerialCH341Device::Configure()+0x14c>
   180f0:	e1a00004 	mov	r0, r4
   180f4:	ebffe14d 	bl	10630 <CUSBFunction::GetHost() const>
   180f8:	e2507000 	subs	r7, r0, #0
   180fc:	0a00004f 	beq	18240 <CUSBSerialCH341Device::Configure()+0x168>
   18100:	e28d504f 	add	r5, sp, #79	; 0x4f
   18104:	e3a06000 	mov	r6, #0
   18108:	e3c5503f 	bic	r5, r5, #63	; 0x3f
   1810c:	e1a00004 	mov	r0, r4
   18110:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   18114:	e1a03005 	mov	r3, r5
   18118:	e4836004 	str	r6, [r3], #4
   1811c:	edc30b0c 	vstr	d16, [r3, #48]	; 0x30
   18120:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   18124:	edc30b04 	vstr	d16, [r3, #16]
   18128:	edc30b06 	vstr	d16, [r3, #24]
   1812c:	edc30b08 	vstr	d16, [r3, #32]
   18130:	edc30b0a 	vstr	d16, [r3, #40]	; 0x28
   18134:	edc30b0d 	vstr	d16, [r3, #52]	; 0x34
   18138:	ebffe131 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1813c:	e3a03002 	mov	r3, #2
   18140:	e1a01000 	mov	r1, r0
   18144:	e58d300c 	str	r3, [sp, #12]
   18148:	e3a020c0 	mov	r2, #192	; 0xc0
   1814c:	e3a0305f 	mov	r3, #95	; 0x5f
   18150:	e1a00007 	mov	r0, r7
   18154:	e58d5008 	str	r5, [sp, #8]
   18158:	e58d6004 	str	r6, [sp, #4]
   1815c:	e58d6000 	str	r6, [sp]
   18160:	ebffee30 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18164:	e3500002 	cmp	r0, #2
   18168:	0a000008 	beq	18190 <CUSBSerialCH341Device::Configure()+0xb8>
   1816c:	eb005c50 	bl	2f2b4 <CLogger::Get()>
   18170:	e30d341c 	movw	r3, #54300	; 0xd41c
   18174:	e3403003 	movt	r3, #3
   18178:	e59f10f4 	ldr	r1, [pc, #244]	; 18274 <CUSBSerialCH341Device::Configure()+0x19c>
   1817c:	e3a02001 	mov	r2, #1
   18180:	eb005e19 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18184:	e3a00000 	mov	r0, #0
   18188:	e28dd08c 	add	sp, sp, #140	; 0x8c
   1818c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18190:	eb005c47 	bl	2f2b4 <CLogger::Get()>
   18194:	e5d53000 	ldrb	r3, [r5]
   18198:	e59f10d4 	ldr	r1, [pc, #212]	; 18274 <CUSBSerialCH341Device::Configure()+0x19c>
   1819c:	e3a02003 	mov	r2, #3
   181a0:	e58d3000 	str	r3, [sp]
   181a4:	e30d3438 	movw	r3, #54328	; 0xd438
   181a8:	e3403003 	movt	r3, #3
   181ac:	eb005e0e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   181b0:	e1a00004 	mov	r0, r4
   181b4:	ebffe112 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   181b8:	e3a030a1 	mov	r3, #161	; 0xa1
   181bc:	e1a01000 	mov	r1, r0
   181c0:	e3a02040 	mov	r2, #64	; 0x40
   181c4:	e1a00007 	mov	r0, r7
   181c8:	e58d600c 	str	r6, [sp, #12]
   181cc:	e58d6008 	str	r6, [sp, #8]
   181d0:	e58d6004 	str	r6, [sp, #4]
   181d4:	e58d6000 	str	r6, [sp]
   181d8:	ebffee12 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   181dc:	e3500000 	cmp	r0, #0
   181e0:	ba00001c 	blt	18258 <CUSBSerialCH341Device::Configure()+0x180>
   181e4:	e5943000 	ldr	r3, [r4]
   181e8:	e3a01d96 	mov	r1, #9600	; 0x2580
   181ec:	e1a00004 	mov	r0, r4
   181f0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   181f4:	e12fff33 	blx	r3
   181f8:	e3500000 	cmp	r0, #0
   181fc:	0affffe0 	beq	18184 <CUSBSerialCH341Device::Configure()+0xac>
   18200:	e594c000 	ldr	ip, [r4]
   18204:	e3a03001 	mov	r3, #1
   18208:	e1a02006 	mov	r2, r6
   1820c:	e3a01008 	mov	r1, #8
   18210:	e1a00004 	mov	r0, r4
   18214:	e59c4030 	ldr	r4, [ip, #48]	; 0x30
   18218:	e12fff34 	blx	r4
   1821c:	e28dd08c 	add	sp, sp, #140	; 0x8c
   18220:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18224:	eb005c22 	bl	2f2b4 <CLogger::Get()>
   18228:	e59f1044 	ldr	r1, [pc, #68]	; 18274 <CUSBSerialCH341Device::Configure()+0x19c>
   1822c:	e3a02001 	mov	r2, #1
   18230:	e30d33fc 	movw	r3, #54268	; 0xd3fc
   18234:	e3403003 	movt	r3, #3
   18238:	eb005deb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1823c:	eaffffd0 	b	18184 <CUSBSerialCH341Device::Configure()+0xac>
   18240:	e30d13d0 	movw	r1, #54224	; 0xd3d0
   18244:	e3401003 	movt	r1, #3
   18248:	e30c0d48 	movw	r0, #52552	; 0xcd48
   1824c:	e3400003 	movt	r0, #3
   18250:	e3a02044 	mov	r2, #68	; 0x44
   18254:	eb005199 	bl	2c8c0 <assertion_failed>
   18258:	eb005c15 	bl	2f2b4 <CLogger::Get()>
   1825c:	e59f1010 	ldr	r1, [pc, #16]	; 18274 <CUSBSerialCH341Device::Configure()+0x19c>
   18260:	e3a02001 	mov	r2, #1
   18264:	e30d344c 	movw	r3, #54348	; 0xd44c
   18268:	e3403003 	movt	r3, #3
   1826c:	eb005dde 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18270:	eaffffc3 	b	18184 <CUSBSerialCH341Device::Configure()+0xac>
   18274:	0003d528 	.word	0x0003d528

00018278 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   18278:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1827c:	e1a08000 	mov	r8, r0
   18280:	e1a04001 	mov	r4, r1
   18284:	e24dd024 	sub	sp, sp, #36	; 0x24
   18288:	e1a05002 	mov	r5, r2
   1828c:	e1a09003 	mov	r9, r3
   18290:	ebffe0e6 	bl	10630 <CUSBFunction::GetHost() const>
   18294:	e2506000 	subs	r6, r0, #0
   18298:	0a000070 	beq	18460 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e8>
   1829c:	e28d0010 	add	r0, sp, #16
   182a0:	eb006cad 	bl	3355c <CString::CString()>
   182a4:	e2443005 	sub	r3, r4, #5
   182a8:	e3530003 	cmp	r3, #3
   182ac:	8a000019 	bhi	18318 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>
   182b0:	e2447045 	sub	r7, r4, #69	; 0x45
   182b4:	e1a02004 	mov	r2, r4
   182b8:	e28d0010 	add	r0, sp, #16
   182bc:	e30d1464 	movw	r1, #54372	; 0xd464
   182c0:	e3401003 	movt	r1, #3
   182c4:	e6ef7077 	uxtb	r7, r7
   182c8:	eb00726e 	bl	34c88 <CString::Format(char const*, ...)>
   182cc:	e3550001 	cmp	r5, #1
   182d0:	0a000019 	beq	1833c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc4>
   182d4:	e3550002 	cmp	r5, #2
   182d8:	0a000033 	beq	183ac <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x134>
   182dc:	e3550000 	cmp	r5, #0
   182e0:	0a000026 	beq	18380 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x108>
   182e4:	e3a04000 	mov	r4, #0
   182e8:	eb005bf1 	bl	2f2b4 <CLogger::Get()>
   182ec:	e59f11bc 	ldr	r1, [pc, #444]	; 184b0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   182f0:	e3a02001 	mov	r2, #1
   182f4:	e30d3488 	movw	r3, #54408	; 0xd488
   182f8:	e3403003 	movt	r3, #3
   182fc:	e58d5000 	str	r5, [sp]
   18300:	eb005db9 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18304:	e28d0010 	add	r0, sp, #16
   18308:	eb006c60 	bl	33490 <CString::~CString()>
   1830c:	e1a00004 	mov	r0, r4
   18310:	e28dd024 	add	sp, sp, #36	; 0x24
   18314:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18318:	eb005be5 	bl	2f2b4 <CLogger::Get()>
   1831c:	e30d3468 	movw	r3, #54376	; 0xd468
   18320:	e3403003 	movt	r3, #3
   18324:	e59f1184 	ldr	r1, [pc, #388]	; 184b0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   18328:	e3a02001 	mov	r2, #1
   1832c:	e58d4000 	str	r4, [sp]
   18330:	eb005dad 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18334:	e3a04000 	mov	r4, #0
   18338:	eafffff1 	b	18304 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x8c>
   1833c:	e30d1484 	movw	r1, #54404	; 0xd484
   18340:	e3401003 	movt	r1, #3
   18344:	e28d0010 	add	r0, sp, #16
   18348:	e3877008 	orr	r7, r7, #8
   1834c:	eb006cfc 	bl	33744 <CString::Append(char const*)>
   18350:	e3590001 	cmp	r9, #1
   18354:	0a00000f 	beq	18398 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   18358:	e3590002 	cmp	r9, #2
   1835c:	0a000018 	beq	183c4 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x14c>
   18360:	eb005bd3 	bl	2f2b4 <CLogger::Get()>
   18364:	e59f1144 	ldr	r1, [pc, #324]	; 184b0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   18368:	e3a02001 	mov	r2, #1
   1836c:	e58d9000 	str	r9, [sp]
   18370:	e30d349c 	movw	r3, #54428	; 0xd49c
   18374:	e3403003 	movt	r3, #3
   18378:	eb005d9b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1837c:	eaffffec 	b	18334 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xbc>
   18380:	e28d0010 	add	r0, sp, #16
   18384:	e30d1480 	movw	r1, #54400	; 0xd480
   18388:	e3401003 	movt	r1, #3
   1838c:	eb006cec 	bl	33744 <CString::Append(char const*)>
   18390:	e3590001 	cmp	r9, #1
   18394:	1affffef 	bne	18358 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xe0>
   18398:	e28d0010 	add	r0, sp, #16
   1839c:	e30b1ce4 	movw	r1, #48356	; 0xbce4
   183a0:	e3401003 	movt	r1, #3
   183a4:	eb006ce6 	bl	33744 <CString::Append(char const*)>
   183a8:	ea00000a 	b	183d8 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x160>
   183ac:	e28d0010 	add	r0, sp, #16
   183b0:	e3011da8 	movw	r1, #7592	; 0x1da8
   183b4:	e3401004 	movt	r1, #4
   183b8:	e3877018 	orr	r7, r7, #24
   183bc:	eb006ce0 	bl	33744 <CString::Append(char const*)>
   183c0:	eaffffe2 	b	18350 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xd8>
   183c4:	e30d1374 	movw	r1, #54132	; 0xd374
   183c8:	e3401003 	movt	r1, #3
   183cc:	e28d0010 	add	r0, sp, #16
   183d0:	e3877004 	orr	r7, r7, #4
   183d4:	eb006cda 	bl	33744 <CString::Append(char const*)>
   183d8:	e1a00008 	mov	r0, r8
   183dc:	ebffe088 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   183e0:	e58d7004 	str	r7, [sp, #4]
   183e4:	e1a01000 	mov	r1, r0
   183e8:	e3a07000 	mov	r7, #0
   183ec:	e302c518 	movw	ip, #9496	; 0x2518
   183f0:	e3a0309a 	mov	r3, #154	; 0x9a
   183f4:	e3a02040 	mov	r2, #64	; 0x40
   183f8:	e1a00006 	mov	r0, r6
   183fc:	e58d700c 	str	r7, [sp, #12]
   18400:	e58d7008 	str	r7, [sp, #8]
   18404:	e58dc000 	str	ip, [sp]
   18408:	ebffed86 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1840c:	e1500007 	cmp	r0, r7
   18410:	ba000018 	blt	18478 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x200>
   18414:	e1a00008 	mov	r0, r8
   18418:	ebffe079 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1841c:	e30fcfff 	movw	ip, #65535	; 0xffff
   18420:	e1a01000 	mov	r1, r0
   18424:	e3a030a4 	mov	r3, #164	; 0xa4
   18428:	e1a00006 	mov	r0, r6
   1842c:	e3a02040 	mov	r2, #64	; 0x40
   18430:	e58d700c 	str	r7, [sp, #12]
   18434:	e58d7008 	str	r7, [sp, #8]
   18438:	e58d7004 	str	r7, [sp, #4]
   1843c:	e58dc000 	str	ip, [sp]
   18440:	ebffed78 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18444:	e3500000 	cmp	r0, #0
   18448:	ba000011 	blt	18494 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x21c>
   1844c:	e5c84018 	strb	r4, [r8, #24]
   18450:	e3a04001 	mov	r4, #1
   18454:	e5c85019 	strb	r5, [r8, #25]
   18458:	e5c8901a 	strb	r9, [r8, #26]
   1845c:	eaffffa8 	b	18304 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x8c>
   18460:	e30d13d0 	movw	r1, #54224	; 0xd3d0
   18464:	e3401003 	movt	r1, #3
   18468:	e30c0d48 	movw	r0, #52552	; 0xcd48
   1846c:	e3400003 	movt	r0, #3
   18470:	e3a020a0 	mov	r2, #160	; 0xa0
   18474:	eb005111 	bl	2c8c0 <assertion_failed>
   18478:	eb005b8d 	bl	2f2b4 <CLogger::Get()>
   1847c:	e59f102c 	ldr	r1, [pc, #44]	; 184b0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   18480:	e3a02001 	mov	r2, #1
   18484:	e30d34b4 	movw	r3, #54452	; 0xd4b4
   18488:	e3403003 	movt	r3, #3
   1848c:	eb005d56 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18490:	eaffffa7 	b	18334 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xbc>
   18494:	eb005b86 	bl	2f2b4 <CLogger::Get()>
   18498:	e59f1010 	ldr	r1, [pc, #16]	; 184b0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   1849c:	e3a02001 	mov	r2, #1
   184a0:	e30d34d0 	movw	r3, #54480	; 0xd4d0
   184a4:	e3403003 	movt	r3, #3
   184a8:	eb005d4f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   184ac:	eaffffa0 	b	18334 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xbc>
   184b0:	0003d528 	.word	0x0003d528

000184b4 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   184b4:	e59f3014 	ldr	r3, [pc, #20]	; 184d0 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()+0x1c>
   184b8:	e92d4010 	push	{r4, lr}
   184bc:	e1a04000 	mov	r4, r0
   184c0:	e5803000 	str	r3, [r0]
   184c4:	eb00172a 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   184c8:	e1a00004 	mov	r0, r4
   184cc:	e8bd8010 	pop	{r4, pc}
   184d0:	0003d6b4 	.word	0x0003d6b4

000184d4 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   184d4:	e59f3020 	ldr	r3, [pc, #32]	; 184fc <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()+0x28>
   184d8:	e92d4010 	push	{r4, lr}
   184dc:	e1a04000 	mov	r4, r0
   184e0:	e5803000 	str	r3, [r0]
   184e4:	eb001722 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   184e8:	e1a00004 	mov	r0, r4
   184ec:	e3a01044 	mov	r1, #68	; 0x44
   184f0:	eb007a01 	bl	36cfc <operator delete(void*, unsigned int)>
   184f4:	e1a00004 	mov	r0, r4
   184f8:	e8bd8010 	pop	{r4, pc}
   184fc:	0003d6b4 	.word	0x0003d6b4

00018500 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)>:
   18500:	e92d4070 	push	{r4, r5, r6, lr}
   18504:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   18508:	e24dd018 	sub	sp, sp, #24
   1850c:	e3530000 	cmp	r3, #0
   18510:	e58d1014 	str	r1, [sp, #20]
   18514:	0a000035 	beq	185f0 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xf0>
   18518:	e5933004 	ldr	r3, [r3, #4]
   1851c:	e1530001 	cmp	r3, r1
   18520:	3a000020 	bcc	185a8 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xa8>
   18524:	e1a04000 	mov	r4, r0
   18528:	ebffe040 	bl	10630 <CUSBFunction::GetHost() const>
   1852c:	e2505000 	subs	r5, r0, #0
   18530:	0a000034 	beq	18608 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x108>
   18534:	e1a00004 	mov	r0, r4
   18538:	e3a06004 	mov	r6, #4
   1853c:	ebffe030 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18540:	e28d3014 	add	r3, sp, #20
   18544:	e1a01000 	mov	r1, r0
   18548:	e58d3008 	str	r3, [sp, #8]
   1854c:	e1a00005 	mov	r0, r5
   18550:	e3a03000 	mov	r3, #0
   18554:	e3a02041 	mov	r2, #65	; 0x41
   18558:	e58d3004 	str	r3, [sp, #4]
   1855c:	e58d3000 	str	r3, [sp]
   18560:	e3a0301e 	mov	r3, #30
   18564:	e58d600c 	str	r6, [sp, #12]
   18568:	ebffed2e 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1856c:	e3500000 	cmp	r0, #0
   18570:	ba000017 	blt	185d4 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xd4>
   18574:	e59d3014 	ldr	r3, [sp, #20]
   18578:	e5843014 	str	r3, [r4, #20]
   1857c:	eb005b4c 	bl	2f2b4 <CLogger::Get()>
   18580:	e5943014 	ldr	r3, [r4, #20]
   18584:	e58d3000 	str	r3, [sp]
   18588:	e1a02006 	mov	r2, r6
   1858c:	e59f108c 	ldr	r1, [pc, #140]	; 18620 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x120>
   18590:	e30d35a0 	movw	r3, #54688	; 0xd5a0
   18594:	e3403003 	movt	r3, #3
   18598:	eb005d13 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1859c:	e3a00001 	mov	r0, #1
   185a0:	e28dd018 	add	sp, sp, #24
   185a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   185a8:	eb005b41 	bl	2f2b4 <CLogger::Get()>
   185ac:	e59d3014 	ldr	r3, [sp, #20]
   185b0:	e58d3000 	str	r3, [sp]
   185b4:	e3a02001 	mov	r2, #1
   185b8:	e30d356c 	movw	r3, #54636	; 0xd56c
   185bc:	e3403003 	movt	r3, #3
   185c0:	e59f1058 	ldr	r1, [pc, #88]	; 18620 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x120>
   185c4:	eb005d08 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   185c8:	e3a00000 	mov	r0, #0
   185cc:	e28dd018 	add	sp, sp, #24
   185d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   185d4:	eb005b36 	bl	2f2b4 <CLogger::Get()>
   185d8:	e59f1040 	ldr	r1, [pc, #64]	; 18620 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x120>
   185dc:	e3a02001 	mov	r2, #1
   185e0:	e30d3588 	movw	r3, #54664	; 0xd588
   185e4:	e3403003 	movt	r3, #3
   185e8:	eb005cff 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   185ec:	eafffff5 	b	185c8 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xc8>
   185f0:	e30d1544 	movw	r1, #54596	; 0xd544
   185f4:	e3401003 	movt	r1, #3
   185f8:	e30d0558 	movw	r0, #54616	; 0xd558
   185fc:	e3400003 	movt	r0, #3
   18600:	e3a0209c 	mov	r2, #156	; 0x9c
   18604:	eb0050ad 	bl	2c8c0 <assertion_failed>
   18608:	e30d1544 	movw	r1, #54596	; 0xd544
   1860c:	e3401003 	movt	r1, #3
   18610:	e30c0d48 	movw	r0, #52552	; 0xcd48
   18614:	e3400003 	movt	r0, #3
   18618:	e3a020a6 	mov	r2, #166	; 0xa6
   1861c:	eb0050a7 	bl	2c8c0 <assertion_failed>
   18620:	0003d6e8 	.word	0x0003d6e8

00018624 <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>:
   18624:	e92d4010 	push	{r4, lr}
   18628:	e1a04000 	mov	r4, r0
   1862c:	e3a02000 	mov	r2, #0
   18630:	eb0017db 	bl	1e5a4 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   18634:	e59f2010 	ldr	r2, [pc, #16]	; 1864c <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)+0x28>
   18638:	e3a03000 	mov	r3, #0
   1863c:	e1a00004 	mov	r0, r4
   18640:	e5842000 	str	r2, [r4]
   18644:	e5843040 	str	r3, [r4, #64]	; 0x40
   18648:	e8bd8010 	pop	{r4, pc}
   1864c:	0003d6b4 	.word	0x0003d6b4

00018650 <CUSBSerialCP210xDevice::GetDeviceIDTable()>:
   18650:	e59f0000 	ldr	r0, [pc]	; 18658 <CUSBSerialCP210xDevice::GetDeviceIDTable()+0x8>
   18654:	e12fff1e 	bx	lr
   18658:	0003d6f0 	.word	0x0003d6f0

0001865c <CUSBSerialCP210xDevice::Configure()>:
   1865c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18660:	e1a04000 	mov	r4, r0
   18664:	e24dd088 	sub	sp, sp, #136	; 0x88
   18668:	eb001831 	bl	1e734 <CUSBSerialDevice::Configure()>
   1866c:	e3500000 	cmp	r0, #0
   18670:	0a000053 	beq	187c4 <CUSBSerialCP210xDevice::Configure()+0x168>
   18674:	e1a00004 	mov	r0, r4
   18678:	ebffdfec 	bl	10630 <CUSBFunction::GetHost() const>
   1867c:	e2506000 	subs	r6, r0, #0
   18680:	0a000068 	beq	18828 <CUSBSerialCP210xDevice::Configure()+0x1cc>
   18684:	e28d504f 	add	r5, sp, #79	; 0x4f
   18688:	e3a07000 	mov	r7, #0
   1868c:	e3c5503f 	bic	r5, r5, #63	; 0x3f
   18690:	e1a00004 	mov	r0, r4
   18694:	e1a03005 	mov	r3, r5
   18698:	e3a08001 	mov	r8, #1
   1869c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   186a0:	e4837004 	str	r7, [r3], #4
   186a4:	edc30b0c 	vstr	d16, [r3, #48]	; 0x30
   186a8:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   186ac:	edc30b04 	vstr	d16, [r3, #16]
   186b0:	edc30b06 	vstr	d16, [r3, #24]
   186b4:	edc30b08 	vstr	d16, [r3, #32]
   186b8:	edc30b0a 	vstr	d16, [r3, #40]	; 0x28
   186bc:	edc30b0d 	vstr	d16, [r3, #52]	; 0x34
   186c0:	ebffdfcf 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   186c4:	e303c70b 	movw	ip, #14091	; 0x370b
   186c8:	e1a01000 	mov	r1, r0
   186cc:	e3a030ff 	mov	r3, #255	; 0xff
   186d0:	e3a020c0 	mov	r2, #192	; 0xc0
   186d4:	e1a00006 	mov	r0, r6
   186d8:	e58d5008 	str	r5, [sp, #8]
   186dc:	e58d7004 	str	r7, [sp, #4]
   186e0:	e58d800c 	str	r8, [sp, #12]
   186e4:	e58dc000 	str	ip, [sp]
   186e8:	ebffecce 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   186ec:	e1500008 	cmp	r0, r8
   186f0:	1a00003c 	bne	187e8 <CUSBSerialCP210xDevice::Configure()+0x18c>
   186f4:	e5d51000 	ldrb	r1, [r5]
   186f8:	e59f315c 	ldr	r3, [pc, #348]	; 1885c <CUSBSerialCP210xDevice::Configure()+0x200>
   186fc:	e5847040 	str	r7, [r4, #64]	; 0x40
   18700:	ea000003 	b	18714 <CUSBSerialCP210xDevice::Configure()+0xb8>
   18704:	e5932014 	ldr	r2, [r3, #20]
   18708:	e2833010 	add	r3, r3, #16
   1870c:	e3520000 	cmp	r2, #0
   18710:	0a00003b 	beq	18804 <CUSBSerialCP210xDevice::Configure()+0x1a8>
   18714:	e5d32000 	ldrb	r2, [r3]
   18718:	e1520001 	cmp	r2, r1
   1871c:	1afffff8 	bne	18704 <CUSBSerialCP210xDevice::Configure()+0xa8>
   18720:	e5843040 	str	r3, [r4, #64]	; 0x40
   18724:	e3a05000 	mov	r5, #0
   18728:	eb005ae1 	bl	2f2b4 <CLogger::Get()>
   1872c:	e5941040 	ldr	r1, [r4, #64]	; 0x40
   18730:	e3a02003 	mov	r2, #3
   18734:	e30d35cc 	movw	r3, #54732	; 0xd5cc
   18738:	e3403003 	movt	r3, #3
   1873c:	e3a07001 	mov	r7, #1
   18740:	e591100c 	ldr	r1, [r1, #12]
   18744:	e58d1000 	str	r1, [sp]
   18748:	e59f1110 	ldr	r1, [pc, #272]	; 18860 <CUSBSerialCP210xDevice::Configure()+0x204>
   1874c:	eb005ca6 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18750:	e1a00004 	mov	r0, r4
   18754:	ebffdfaa 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18758:	e1a03005 	mov	r3, r5
   1875c:	e1a01000 	mov	r1, r0
   18760:	e3a02041 	mov	r2, #65	; 0x41
   18764:	e1a00006 	mov	r0, r6
   18768:	e58d500c 	str	r5, [sp, #12]
   1876c:	e58d5008 	str	r5, [sp, #8]
   18770:	e58d5004 	str	r5, [sp, #4]
   18774:	e58d7000 	str	r7, [sp]
   18778:	ebffecaa 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1877c:	e1500005 	cmp	r0, r5
   18780:	ba00002e 	blt	18840 <CUSBSerialCP210xDevice::Configure()+0x1e4>
   18784:	e5943000 	ldr	r3, [r4]
   18788:	e3a01d96 	mov	r1, #9600	; 0x2580
   1878c:	e1a00004 	mov	r0, r4
   18790:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   18794:	e12fff33 	blx	r3
   18798:	e3500000 	cmp	r0, #0
   1879c:	0a00000e 	beq	187dc <CUSBSerialCP210xDevice::Configure()+0x180>
   187a0:	e594c000 	ldr	ip, [r4]
   187a4:	e1a03007 	mov	r3, r7
   187a8:	e1a02005 	mov	r2, r5
   187ac:	e3a01008 	mov	r1, #8
   187b0:	e1a00004 	mov	r0, r4
   187b4:	e59c4030 	ldr	r4, [ip, #48]	; 0x30
   187b8:	e12fff34 	blx	r4
   187bc:	e28dd088 	add	sp, sp, #136	; 0x88
   187c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   187c4:	eb005aba 	bl	2f2b4 <CLogger::Get()>
   187c8:	e30d33fc 	movw	r3, #54268	; 0xd3fc
   187cc:	e3403003 	movt	r3, #3
   187d0:	e59f1088 	ldr	r1, [pc, #136]	; 18860 <CUSBSerialCP210xDevice::Configure()+0x204>
   187d4:	e3a02001 	mov	r2, #1
   187d8:	eb005c83 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   187dc:	e3a00000 	mov	r0, #0
   187e0:	e28dd088 	add	sp, sp, #136	; 0x88
   187e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   187e8:	eb005ab1 	bl	2f2b4 <CLogger::Get()>
   187ec:	e59f106c 	ldr	r1, [pc, #108]	; 18860 <CUSBSerialCP210xDevice::Configure()+0x204>
   187f0:	e1a02008 	mov	r2, r8
   187f4:	e30d35b0 	movw	r3, #54704	; 0xd5b0
   187f8:	e3403003 	movt	r3, #3
   187fc:	eb005c7a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18800:	eafffff5 	b	187dc <CUSBSerialCP210xDevice::Configure()+0x180>
   18804:	eb005aaa 	bl	2f2b4 <CLogger::Get()>
   18808:	e5d53000 	ldrb	r3, [r5]
   1880c:	e58d3000 	str	r3, [sp]
   18810:	e3a02001 	mov	r2, #1
   18814:	e59f1044 	ldr	r1, [pc, #68]	; 18860 <CUSBSerialCP210xDevice::Configure()+0x204>
   18818:	e30d35dc 	movw	r3, #54748	; 0xd5dc
   1881c:	e3403003 	movt	r3, #3
   18820:	eb005c71 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18824:	eaffffec 	b	187dc <CUSBSerialCP210xDevice::Configure()+0x180>
   18828:	e30d1544 	movw	r1, #54596	; 0xd544
   1882c:	e3401003 	movt	r1, #3
   18830:	e30c0d48 	movw	r0, #52552	; 0xcd48
   18834:	e3400003 	movt	r0, #3
   18838:	e3a0205d 	mov	r2, #93	; 0x5d
   1883c:	eb00501f 	bl	2c8c0 <assertion_failed>
   18840:	eb005a9b 	bl	2f2b4 <CLogger::Get()>
   18844:	e59f1014 	ldr	r1, [pc, #20]	; 18860 <CUSBSerialCP210xDevice::Configure()+0x204>
   18848:	e1a02007 	mov	r2, r7
   1884c:	e30d35fc 	movw	r3, #54780	; 0xd5fc
   18850:	e3403003 	movt	r3, #3
   18854:	eb005c64 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18858:	eaffffdf 	b	187dc <CUSBSerialCP210xDevice::Configure()+0x180>
   1885c:	0003d6f8 	.word	0x0003d6f8
   18860:	0003d6e8 	.word	0x0003d6e8

00018864 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   18864:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18868:	e1a05003 	mov	r5, r3
   1886c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   18870:	e24dd024 	sub	sp, sp, #36	; 0x24
   18874:	e3530000 	cmp	r3, #0
   18878:	0a000060 	beq	18a00 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x19c>
   1887c:	e1a06002 	mov	r6, r2
   18880:	e5d32008 	ldrb	r2, [r3, #8]
   18884:	e1a04001 	mov	r4, r1
   18888:	e1520001 	cmp	r2, r1
   1888c:	8a000053 	bhi	189e0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x17c>
   18890:	e5d33009 	ldrb	r3, [r3, #9]
   18894:	e1530005 	cmp	r3, r5
   18898:	3a00001c 	bcc	18910 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xac>
   1889c:	e1a07000 	mov	r7, r0
   188a0:	ebffdf62 	bl	10630 <CUSBFunction::GetHost() const>
   188a4:	e2508000 	subs	r8, r0, #0
   188a8:	0a000077 	beq	18a8c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x228>
   188ac:	e28d0010 	add	r0, sp, #16
   188b0:	eb006b29 	bl	3355c <CString::CString()>
   188b4:	e2443005 	sub	r3, r4, #5
   188b8:	e3530003 	cmp	r3, #3
   188bc:	8a00001e 	bhi	1893c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xd8>
   188c0:	e1a02004 	mov	r2, r4
   188c4:	e28d0010 	add	r0, sp, #16
   188c8:	e30d1464 	movw	r1, #54372	; 0xd464
   188cc:	e3401003 	movt	r1, #3
   188d0:	eb0070ec 	bl	34c88 <CString::Format(char const*, ...)>
   188d4:	e1a09404 	lsl	r9, r4, #8
   188d8:	e3560001 	cmp	r6, #1
   188dc:	0a000039 	beq	189c8 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x164>
   188e0:	e3560002 	cmp	r6, #2
   188e4:	0a000021 	beq	18970 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x10c>
   188e8:	e3560000 	cmp	r6, #0
   188ec:	0a000030 	beq	189b4 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x150>
   188f0:	eb005a6f 	bl	2f2b4 <CLogger::Get()>
   188f4:	e59f11c4 	ldr	r1, [pc, #452]	; 18ac0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   188f8:	e3a02001 	mov	r2, #1
   188fc:	e30d3488 	movw	r3, #54408	; 0xd488
   18900:	e3403003 	movt	r3, #3
   18904:	e58d6000 	str	r6, [sp]
   18908:	eb005c37 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1890c:	ea000011 	b	18958 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf4>
   18910:	eb005a67 	bl	2f2b4 <CLogger::Get()>
   18914:	e30d3634 	movw	r3, #54836	; 0xd634
   18918:	e3403003 	movt	r3, #3
   1891c:	e59f119c 	ldr	r1, [pc, #412]	; 18ac0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   18920:	e3a02001 	mov	r2, #1
   18924:	e58d5000 	str	r5, [sp]
   18928:	eb005c2f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1892c:	e3a04000 	mov	r4, #0
   18930:	e1a00004 	mov	r0, r4
   18934:	e28dd024 	add	sp, sp, #36	; 0x24
   18938:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1893c:	eb005a5c 	bl	2f2b4 <CLogger::Get()>
   18940:	e30d3468 	movw	r3, #54376	; 0xd468
   18944:	e3403003 	movt	r3, #3
   18948:	e59f1170 	ldr	r1, [pc, #368]	; 18ac0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   1894c:	e3a02001 	mov	r2, #1
   18950:	e58d4000 	str	r4, [sp]
   18954:	eb005c24 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18958:	e3a04000 	mov	r4, #0
   1895c:	e28d0010 	add	r0, sp, #16
   18960:	eb006aca 	bl	33490 <CString::~CString()>
   18964:	e1a00004 	mov	r0, r4
   18968:	e28dd024 	add	sp, sp, #36	; 0x24
   1896c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18970:	e3011da8 	movw	r1, #7592	; 0x1da8
   18974:	e3401004 	movt	r1, #4
   18978:	e28d0010 	add	r0, sp, #16
   1897c:	e3899020 	orr	r9, r9, #32
   18980:	eb006b6f 	bl	33744 <CString::Append(char const*)>
   18984:	e3550001 	cmp	r5, #1
   18988:	0a00003a 	beq	18a78 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x214>
   1898c:	e3550002 	cmp	r5, #2
   18990:	0a000020 	beq	18a18 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b4>
   18994:	eb005a46 	bl	2f2b4 <CLogger::Get()>
   18998:	e59f1120 	ldr	r1, [pc, #288]	; 18ac0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   1899c:	e3a02001 	mov	r2, #1
   189a0:	e58d5000 	str	r5, [sp]
   189a4:	e30d349c 	movw	r3, #54428	; 0xd49c
   189a8:	e3403003 	movt	r3, #3
   189ac:	eb005c0e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   189b0:	eaffffe8 	b	18958 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf4>
   189b4:	e28d0010 	add	r0, sp, #16
   189b8:	e30d1480 	movw	r1, #54400	; 0xd480
   189bc:	e3401003 	movt	r1, #3
   189c0:	eb006b5f 	bl	33744 <CString::Append(char const*)>
   189c4:	eaffffee 	b	18984 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   189c8:	e28d0010 	add	r0, sp, #16
   189cc:	e30d1484 	movw	r1, #54404	; 0xd484
   189d0:	e3401003 	movt	r1, #3
   189d4:	e3899010 	orr	r9, r9, #16
   189d8:	eb006b59 	bl	33744 <CString::Append(char const*)>
   189dc:	eaffffe8 	b	18984 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   189e0:	eb005a33 	bl	2f2b4 <CLogger::Get()>
   189e4:	e59f10d4 	ldr	r1, [pc, #212]	; 18ac0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   189e8:	e3a02001 	mov	r2, #1
   189ec:	e58d4000 	str	r4, [sp]
   189f0:	e30d3618 	movw	r3, #54808	; 0xd618
   189f4:	e3403003 	movt	r3, #3
   189f8:	eb005bfb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   189fc:	eaffffca 	b	1892c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc8>
   18a00:	e30d1544 	movw	r1, #54596	; 0xd544
   18a04:	e3401003 	movt	r1, #3
   18a08:	e30d0558 	movw	r0, #54616	; 0xd558
   18a0c:	e3400003 	movt	r0, #3
   18a10:	e3a020be 	mov	r2, #190	; 0xbe
   18a14:	eb004fa9 	bl	2c8c0 <assertion_failed>
   18a18:	e30d1374 	movw	r1, #54132	; 0xd374
   18a1c:	e3401003 	movt	r1, #3
   18a20:	e28d0010 	add	r0, sp, #16
   18a24:	e3899002 	orr	r9, r9, #2
   18a28:	eb006b45 	bl	33744 <CString::Append(char const*)>
   18a2c:	e1a00007 	mov	r0, r7
   18a30:	ebffdef3 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18a34:	e3a03000 	mov	r3, #0
   18a38:	e1a01000 	mov	r1, r0
   18a3c:	e58d300c 	str	r3, [sp, #12]
   18a40:	e58d3008 	str	r3, [sp, #8]
   18a44:	e1a00008 	mov	r0, r8
   18a48:	e58d3004 	str	r3, [sp, #4]
   18a4c:	e3a02041 	mov	r2, #65	; 0x41
   18a50:	e3a03003 	mov	r3, #3
   18a54:	e58d9000 	str	r9, [sp]
   18a58:	ebffebf2 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18a5c:	e3500000 	cmp	r0, #0
   18a60:	ba00000f 	blt	18aa4 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x240>
   18a64:	e5c74018 	strb	r4, [r7, #24]
   18a68:	e3a04001 	mov	r4, #1
   18a6c:	e5c76019 	strb	r6, [r7, #25]
   18a70:	e5c7501a 	strb	r5, [r7, #26]
   18a74:	eaffffb8 	b	1895c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf8>
   18a78:	e28d0010 	add	r0, sp, #16
   18a7c:	e30b1ce4 	movw	r1, #48356	; 0xbce4
   18a80:	e3401003 	movt	r1, #3
   18a84:	eb006b2e 	bl	33744 <CString::Append(char const*)>
   18a88:	eaffffe7 	b	18a2c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c8>
   18a8c:	e30d1544 	movw	r1, #54596	; 0xd544
   18a90:	e3401003 	movt	r1, #3
   18a94:	e30c0d48 	movw	r0, #52552	; 0xcd48
   18a98:	e3400003 	movt	r0, #3
   18a9c:	e3a020ce 	mov	r2, #206	; 0xce
   18aa0:	eb004f86 	bl	2c8c0 <assertion_failed>
   18aa4:	eb005a02 	bl	2f2b4 <CLogger::Get()>
   18aa8:	e59f1010 	ldr	r1, [pc, #16]	; 18ac0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   18aac:	e3a02001 	mov	r2, #1
   18ab0:	e30d3650 	movw	r3, #54864	; 0xd650
   18ab4:	e3403003 	movt	r3, #3
   18ab8:	eb005bcb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18abc:	eaffffa5 	b	18958 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf4>
   18ac0:	0003d6e8 	.word	0x0003d6e8

00018ac4 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   18ac4:	e59f3014 	ldr	r3, [pc, #20]	; 18ae0 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()+0x1c>
   18ac8:	e92d4010 	push	{r4, lr}
   18acc:	e1a04000 	mov	r4, r0
   18ad0:	e5803000 	str	r3, [r0]
   18ad4:	eb0015a6 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   18ad8:	e1a00004 	mov	r0, r4
   18adc:	e8bd8010 	pop	{r4, pc}
   18ae0:	0003d884 	.word	0x0003d884

00018ae4 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   18ae4:	e59f3020 	ldr	r3, [pc, #32]	; 18b0c <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()+0x28>
   18ae8:	e92d4010 	push	{r4, lr}
   18aec:	e1a04000 	mov	r4, r0
   18af0:	e5803000 	str	r3, [r0]
   18af4:	eb00159e 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   18af8:	e1a00004 	mov	r0, r4
   18afc:	e3a01040 	mov	r1, #64	; 0x40
   18b00:	eb00787d 	bl	36cfc <operator delete(void*, unsigned int)>
   18b04:	e1a00004 	mov	r0, r4
   18b08:	e8bd8010 	pop	{r4, pc}
   18b0c:	0003d884 	.word	0x0003d884

00018b10 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)>:
   18b10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18b14:	e1a08000 	mov	r8, r0
   18b18:	e24dd090 	sub	sp, sp, #144	; 0x90
   18b1c:	e58d1014 	str	r1, [sp, #20]
   18b20:	ebffdec2 	bl	10630 <CUSBFunction::GetHost() const>
   18b24:	e2507000 	subs	r7, r0, #0
   18b28:	0a000039 	beq	18c14 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x104>
   18b2c:	e28d4057 	add	r4, sp, #87	; 0x57
   18b30:	e3a05000 	mov	r5, #0
   18b34:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   18b38:	e1a00008 	mov	r0, r8
   18b3c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   18b40:	e1a03004 	mov	r3, r4
   18b44:	e4835004 	str	r5, [r3], #4
   18b48:	edc30b0c 	vstr	d16, [r3, #48]	; 0x30
   18b4c:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   18b50:	edc30b04 	vstr	d16, [r3, #16]
   18b54:	edc30b06 	vstr	d16, [r3, #24]
   18b58:	edc30b08 	vstr	d16, [r3, #32]
   18b5c:	edc30b0a 	vstr	d16, [r3, #40]	; 0x28
   18b60:	edc30b0d 	vstr	d16, [r3, #52]	; 0x34
   18b64:	ebffdea6 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18b68:	e3a03007 	mov	r3, #7
   18b6c:	e1a01000 	mov	r1, r0
   18b70:	e58d300c 	str	r3, [sp, #12]
   18b74:	e3a020a1 	mov	r2, #161	; 0xa1
   18b78:	e3a03021 	mov	r3, #33	; 0x21
   18b7c:	e1a00007 	mov	r0, r7
   18b80:	e58d4008 	str	r4, [sp, #8]
   18b84:	e58d5004 	str	r5, [sp, #4]
   18b88:	e58d5000 	str	r5, [sp]
   18b8c:	ebffeba5 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18b90:	e1a06000 	mov	r6, r0
   18b94:	e3500007 	cmp	r0, #7
   18b98:	1a000015 	bne	18bf4 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xe4>
   18b9c:	e3a02004 	mov	r2, #4
   18ba0:	e28d1014 	add	r1, sp, #20
   18ba4:	e1a00004 	mov	r0, r4
   18ba8:	eb007632 	bl	36478 <memcpy>
   18bac:	e1a00008 	mov	r0, r8
   18bb0:	ebffde93 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18bb4:	e3a03020 	mov	r3, #32
   18bb8:	e1a01000 	mov	r1, r0
   18bbc:	e3a02021 	mov	r2, #33	; 0x21
   18bc0:	e1a00007 	mov	r0, r7
   18bc4:	e58d600c 	str	r6, [sp, #12]
   18bc8:	e58d4008 	str	r4, [sp, #8]
   18bcc:	e58d5004 	str	r5, [sp, #4]
   18bd0:	e58d5000 	str	r5, [sp]
   18bd4:	ebffeb93 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18bd8:	e3500000 	cmp	r0, #0
   18bdc:	ba000012 	blt	18c2c <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x11c>
   18be0:	e59d3014 	ldr	r3, [sp, #20]
   18be4:	e3a00001 	mov	r0, #1
   18be8:	e5883014 	str	r3, [r8, #20]
   18bec:	e28dd090 	add	sp, sp, #144	; 0x90
   18bf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18bf4:	eb0059ae 	bl	2f2b4 <CLogger::Get()>
   18bf8:	e30d37bc 	movw	r3, #55228	; 0xd7bc
   18bfc:	e3403003 	movt	r3, #3
   18c00:	e59f1040 	ldr	r1, [pc, #64]	; 18c48 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x138>
   18c04:	e3a02001 	mov	r2, #1
   18c08:	eb005b77 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c0c:	e3a00000 	mov	r0, #0
   18c10:	eafffff5 	b	18bec <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xdc>
   18c14:	e30d17a8 	movw	r1, #55208	; 0xd7a8
   18c18:	e3401003 	movt	r1, #3
   18c1c:	e30c0d48 	movw	r0, #52552	; 0xcd48
   18c20:	e3400003 	movt	r0, #3
   18c24:	e3a020ed 	mov	r2, #237	; 0xed
   18c28:	eb004f24 	bl	2c8c0 <assertion_failed>
   18c2c:	eb0059a0 	bl	2f2b4 <CLogger::Get()>
   18c30:	e59f1010 	ldr	r1, [pc, #16]	; 18c48 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x138>
   18c34:	e3a02001 	mov	r2, #1
   18c38:	e30d3588 	movw	r3, #54664	; 0xd588
   18c3c:	e3403003 	movt	r3, #3
   18c40:	eb005b69 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c44:	eafffff0 	b	18c0c <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xfc>
   18c48:	0003d8b8 	.word	0x0003d8b8

00018c4c <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>:
   18c4c:	e92d4010 	push	{r4, lr}
   18c50:	e1a04000 	mov	r4, r0
   18c54:	e3a02000 	mov	r2, #0
   18c58:	eb001651 	bl	1e5a4 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   18c5c:	e59f3008 	ldr	r3, [pc, #8]	; 18c6c <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)+0x20>
   18c60:	e1a00004 	mov	r0, r4
   18c64:	e5843000 	str	r3, [r4]
   18c68:	e8bd8010 	pop	{r4, pc}
   18c6c:	0003d884 	.word	0x0003d884

00018c70 <CUSBSerialPL2303Device::GetDeviceIDTable()>:
   18c70:	e59f0000 	ldr	r0, [pc]	; 18c78 <CUSBSerialPL2303Device::GetDeviceIDTable()+0x8>
   18c74:	e12fff1e 	bx	lr
   18c78:	0003d8c0 	.word	0x0003d8c0

00018c7c <CUSBSerialPL2303Device::Configure()>:
   18c7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c80:	e1a04000 	mov	r4, r0
   18c84:	e24dd09c 	sub	sp, sp, #156	; 0x9c
   18c88:	eb0016a9 	bl	1e734 <CUSBSerialDevice::Configure()>
   18c8c:	e2505000 	subs	r5, r0, #0
   18c90:	0a00004a 	beq	18dc0 <CUSBSerialPL2303Device::Configure()+0x144>
   18c94:	e1a00004 	mov	r0, r4
   18c98:	e28d605f 	add	r6, sp, #95	; 0x5f
   18c9c:	ebffde4e 	bl	105dc <CUSBFunction::GetDevice() const>
   18ca0:	e3c6603f 	bic	r6, r6, #63	; 0x3f
   18ca4:	ebffd6c5 	bl	e7c0 <CUSBDevice::GetDeviceDescriptor() const>
   18ca8:	e1a05000 	mov	r5, r0
   18cac:	e30b1708 	movw	r1, #46856	; 0xb708
   18cb0:	e3401003 	movt	r1, #3
   18cb4:	e28d0010 	add	r0, sp, #16
   18cb8:	eb006a2d 	bl	33574 <CString::CString(char const*)>
   18cbc:	e5d53004 	ldrb	r3, [r5, #4]
   18cc0:	e3530002 	cmp	r3, #2
   18cc4:	0a000097 	beq	18f28 <CUSBSerialPL2303Device::Configure()+0x2ac>
   18cc8:	e5d52007 	ldrb	r2, [r5, #7]
   18ccc:	e3520040 	cmp	r2, #64	; 0x40
   18cd0:	0a00008a 	beq	18f00 <CUSBSerialPL2303Device::Configure()+0x284>
   18cd4:	e2433001 	sub	r3, r3, #1
   18cd8:	e6ef3073 	uxtb	r3, r3
   18cdc:	e35300fd 	cmp	r3, #253	; 0xfd
   18ce0:	8a00008b 	bhi	18f14 <CUSBSerialPL2303Device::Configure()+0x298>
   18ce4:	eb005972 	bl	2f2b4 <CLogger::Get()>
   18ce8:	e1a05000 	mov	r5, r0
   18cec:	e28d0010 	add	r0, sp, #16
   18cf0:	eb006a51 	bl	3363c <CString::operator char const*() const>
   18cf4:	e59f14e0 	ldr	r1, [pc, #1248]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   18cf8:	e1a03000 	mov	r3, r0
   18cfc:	e3a02003 	mov	r2, #3
   18d00:	e1a00005 	mov	r0, r5
   18d04:	e58d3000 	str	r3, [sp]
   18d08:	e30d37d8 	movw	r3, #55256	; 0xd7d8
   18d0c:	e3403003 	movt	r3, #3
   18d10:	eb005b35 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18d14:	e1a00004 	mov	r0, r4
   18d18:	ebffde44 	bl	10630 <CUSBFunction::GetHost() const>
   18d1c:	e2505000 	subs	r5, r0, #0
   18d20:	0a00008c 	beq	18f58 <CUSBSerialPL2303Device::Configure()+0x2dc>
   18d24:	e1a03006 	mov	r3, r6
   18d28:	e3a07000 	mov	r7, #0
   18d2c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   18d30:	e3a09001 	mov	r9, #1
   18d34:	e1a00004 	mov	r0, r4
   18d38:	e3088484 	movw	r8, #33924	; 0x8484
   18d3c:	e4837004 	str	r7, [r3], #4
   18d40:	edc30b0c 	vstr	d16, [r3, #48]	; 0x30
   18d44:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   18d48:	edc30b04 	vstr	d16, [r3, #16]
   18d4c:	edc30b06 	vstr	d16, [r3, #24]
   18d50:	edc30b08 	vstr	d16, [r3, #32]
   18d54:	edc30b0a 	vstr	d16, [r3, #40]	; 0x28
   18d58:	edc30b0d 	vstr	d16, [r3, #52]	; 0x34
   18d5c:	ebffde28 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18d60:	e1a03009 	mov	r3, r9
   18d64:	e1a01000 	mov	r1, r0
   18d68:	e3a020c0 	mov	r2, #192	; 0xc0
   18d6c:	e1a00005 	mov	r0, r5
   18d70:	e58d6008 	str	r6, [sp, #8]
   18d74:	e58d7004 	str	r7, [sp, #4]
   18d78:	e58d900c 	str	r9, [sp, #12]
   18d7c:	e58d8000 	str	r8, [sp]
   18d80:	ebffeb28 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18d84:	e1a0b000 	mov	fp, r0
   18d88:	e1500009 	cmp	r0, r9
   18d8c:	0a000014 	beq	18de4 <CUSBSerialPL2303Device::Configure()+0x168>
   18d90:	eb005947 	bl	2f2b4 <CLogger::Get()>
   18d94:	e30d37f4 	movw	r3, #55284	; 0xd7f4
   18d98:	e3403003 	movt	r3, #3
   18d9c:	e59f1438 	ldr	r1, [pc, #1080]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   18da0:	e1a02009 	mov	r2, r9
   18da4:	eb005b10 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18da8:	e3a05000 	mov	r5, #0
   18dac:	e28d0010 	add	r0, sp, #16
   18db0:	eb0069b6 	bl	33490 <CString::~CString()>
   18db4:	e1a00005 	mov	r0, r5
   18db8:	e28dd09c 	add	sp, sp, #156	; 0x9c
   18dbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dc0:	eb00593b 	bl	2f2b4 <CLogger::Get()>
   18dc4:	e59f1410 	ldr	r1, [pc, #1040]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   18dc8:	e3a02001 	mov	r2, #1
   18dcc:	e30d33fc 	movw	r3, #54268	; 0xd3fc
   18dd0:	e3403003 	movt	r3, #3
   18dd4:	eb005b04 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18dd8:	e1a00005 	mov	r0, r5
   18ddc:	e28dd09c 	add	sp, sp, #156	; 0x9c
   18de0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18de4:	e1a00004 	mov	r0, r4
   18de8:	e3009404 	movw	r9, #1028	; 0x404
   18dec:	ebffde04 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18df0:	e1a0300b 	mov	r3, fp
   18df4:	e1a01000 	mov	r1, r0
   18df8:	e3a02040 	mov	r2, #64	; 0x40
   18dfc:	e1a00005 	mov	r0, r5
   18e00:	e58d700c 	str	r7, [sp, #12]
   18e04:	e58d7008 	str	r7, [sp, #8]
   18e08:	e58d7004 	str	r7, [sp, #4]
   18e0c:	e58d9000 	str	r9, [sp]
   18e10:	ebffeb04 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18e14:	e3500000 	cmp	r0, #0
   18e18:	ba000047 	blt	18f3c <CUSBSerialPL2303Device::Configure()+0x2c0>
   18e1c:	e1a00004 	mov	r0, r4
   18e20:	ebffddf7 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18e24:	e1a0300b 	mov	r3, fp
   18e28:	e1a01000 	mov	r1, r0
   18e2c:	e3a020c0 	mov	r2, #192	; 0xc0
   18e30:	e1a00005 	mov	r0, r5
   18e34:	e58db00c 	str	fp, [sp, #12]
   18e38:	e58d6008 	str	r6, [sp, #8]
   18e3c:	e58d7004 	str	r7, [sp, #4]
   18e40:	e58d8000 	str	r8, [sp]
   18e44:	ebffeaf7 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18e48:	e1a0a000 	mov	sl, r0
   18e4c:	e3500001 	cmp	r0, #1
   18e50:	1a000023 	bne	18ee4 <CUSBSerialPL2303Device::Configure()+0x268>
   18e54:	e1a00004 	mov	r0, r4
   18e58:	ebffdde9 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18e5c:	e308c383 	movw	ip, #33667	; 0x8383
   18e60:	e1a01000 	mov	r1, r0
   18e64:	e1a0300a 	mov	r3, sl
   18e68:	e3a020c0 	mov	r2, #192	; 0xc0
   18e6c:	e1a00005 	mov	r0, r5
   18e70:	e58da00c 	str	sl, [sp, #12]
   18e74:	e58d6008 	str	r6, [sp, #8]
   18e78:	e58d7004 	str	r7, [sp, #4]
   18e7c:	e58dc000 	str	ip, [sp]
   18e80:	ebffeae8 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18e84:	e1a0b000 	mov	fp, r0
   18e88:	e3500001 	cmp	r0, #1
   18e8c:	0a000006 	beq	18eac <CUSBSerialPL2303Device::Configure()+0x230>
   18e90:	eb005907 	bl	2f2b4 <CLogger::Get()>
   18e94:	e59f1340 	ldr	r1, [pc, #832]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   18e98:	e1a0200a 	mov	r2, sl
   18e9c:	e30d381c 	movw	r3, #55324	; 0xd81c
   18ea0:	e3403003 	movt	r3, #3
   18ea4:	eb005ad0 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18ea8:	eaffffbe 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   18eac:	e1a00004 	mov	r0, r4
   18eb0:	ebffddd3 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18eb4:	e1a0300b 	mov	r3, fp
   18eb8:	e1a01000 	mov	r1, r0
   18ebc:	e3a020c0 	mov	r2, #192	; 0xc0
   18ec0:	e1a00005 	mov	r0, r5
   18ec4:	e58db00c 	str	fp, [sp, #12]
   18ec8:	e58d6008 	str	r6, [sp, #8]
   18ecc:	e58d7004 	str	r7, [sp, #4]
   18ed0:	e58d8000 	str	r8, [sp]
   18ed4:	ebffead3 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18ed8:	e1a0a000 	mov	sl, r0
   18edc:	e3500001 	cmp	r0, #1
   18ee0:	0a000022 	beq	18f70 <CUSBSerialPL2303Device::Configure()+0x2f4>
   18ee4:	eb0058f2 	bl	2f2b4 <CLogger::Get()>
   18ee8:	e59f12ec 	ldr	r1, [pc, #748]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   18eec:	e1a0200b 	mov	r2, fp
   18ef0:	e30d37f4 	movw	r3, #55284	; 0xd7f4
   18ef4:	e3403003 	movt	r3, #3
   18ef8:	eb005abb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18efc:	eaffffa9 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   18f00:	e28d0010 	add	r0, sp, #16
   18f04:	e30d17d4 	movw	r1, #55252	; 0xd7d4
   18f08:	e3401003 	movt	r1, #3
   18f0c:	eb0069d0 	bl	33654 <CString::operator=(char const*)>
   18f10:	eaffff73 	b	18ce4 <CUSBSerialPL2303Device::Configure()+0x68>
   18f14:	e28d0010 	add	r0, sp, #16
   18f18:	e30b1ce4 	movw	r1, #48356	; 0xbce4
   18f1c:	e3401003 	movt	r1, #3
   18f20:	eb0069cb 	bl	33654 <CString::operator=(char const*)>
   18f24:	eaffff6e 	b	18ce4 <CUSBSerialPL2303Device::Configure()+0x68>
   18f28:	e28d0010 	add	r0, sp, #16
   18f2c:	e30b1708 	movw	r1, #46856	; 0xb708
   18f30:	e3401003 	movt	r1, #3
   18f34:	eb0069c6 	bl	33654 <CString::operator=(char const*)>
   18f38:	eaffff69 	b	18ce4 <CUSBSerialPL2303Device::Configure()+0x68>
   18f3c:	eb0058dc 	bl	2f2b4 <CLogger::Get()>
   18f40:	e59f1294 	ldr	r1, [pc, #660]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   18f44:	e1a0200b 	mov	r2, fp
   18f48:	e30d3808 	movw	r3, #55304	; 0xd808
   18f4c:	e3403003 	movt	r3, #3
   18f50:	eb005aa5 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18f54:	eaffff93 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   18f58:	e30d17a8 	movw	r1, #55208	; 0xd7a8
   18f5c:	e3401003 	movt	r1, #3
   18f60:	e30c0d48 	movw	r0, #52552	; 0xcd48
   18f64:	e3400003 	movt	r0, #3
   18f68:	e3a0204a 	mov	r2, #74	; 0x4a
   18f6c:	eb004e53 	bl	2c8c0 <assertion_failed>
   18f70:	e1a00004 	mov	r0, r4
   18f74:	ebffdda2 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18f78:	e1a0300a 	mov	r3, sl
   18f7c:	e1a01000 	mov	r1, r0
   18f80:	e3a02040 	mov	r2, #64	; 0x40
   18f84:	e1a00005 	mov	r0, r5
   18f88:	e58d9000 	str	r9, [sp]
   18f8c:	e58d700c 	str	r7, [sp, #12]
   18f90:	e58d7008 	str	r7, [sp, #8]
   18f94:	e58da004 	str	sl, [sp, #4]
   18f98:	ebffeaa2 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18f9c:	e3500000 	cmp	r0, #0
   18fa0:	ba00002a 	blt	19050 <CUSBSerialPL2303Device::Configure()+0x3d4>
   18fa4:	e1a00004 	mov	r0, r4
   18fa8:	ebffdd95 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   18fac:	e58d8000 	str	r8, [sp]
   18fb0:	e1a01000 	mov	r1, r0
   18fb4:	e1a0300a 	mov	r3, sl
   18fb8:	e3a020c0 	mov	r2, #192	; 0xc0
   18fbc:	e1a00005 	mov	r0, r5
   18fc0:	e58da00c 	str	sl, [sp, #12]
   18fc4:	e58d6008 	str	r6, [sp, #8]
   18fc8:	e58d7004 	str	r7, [sp, #4]
   18fcc:	ebffea95 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18fd0:	e1a08000 	mov	r8, r0
   18fd4:	e3500001 	cmp	r0, #1
   18fd8:	0a000006 	beq	18ff8 <CUSBSerialPL2303Device::Configure()+0x37c>
   18fdc:	eb0058b4 	bl	2f2b4 <CLogger::Get()>
   18fe0:	e59f11f4 	ldr	r1, [pc, #500]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   18fe4:	e1a0200a 	mov	r2, sl
   18fe8:	e30d37f4 	movw	r3, #55284	; 0xd7f4
   18fec:	e3403003 	movt	r3, #3
   18ff0:	eb005a7d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18ff4:	eaffff6b 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   18ff8:	e1a00004 	mov	r0, r4
   18ffc:	ebffdd80 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   19000:	e58d6008 	str	r6, [sp, #8]
   19004:	e1a01000 	mov	r1, r0
   19008:	e3083383 	movw	r3, #33667	; 0x8383
   1900c:	e3a020c0 	mov	r2, #192	; 0xc0
   19010:	e58d3000 	str	r3, [sp]
   19014:	e1a00005 	mov	r0, r5
   19018:	e1a03008 	mov	r3, r8
   1901c:	e58d800c 	str	r8, [sp, #12]
   19020:	e58d7004 	str	r7, [sp, #4]
   19024:	ebffea7f 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19028:	e1a06000 	mov	r6, r0
   1902c:	e3500001 	cmp	r0, #1
   19030:	0a00000d 	beq	1906c <CUSBSerialPL2303Device::Configure()+0x3f0>
   19034:	eb00589e 	bl	2f2b4 <CLogger::Get()>
   19038:	e59f119c 	ldr	r1, [pc, #412]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   1903c:	e1a02008 	mov	r2, r8
   19040:	e30d381c 	movw	r3, #55324	; 0xd81c
   19044:	e3403003 	movt	r3, #3
   19048:	eb005a67 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1904c:	eaffff55 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   19050:	eb005897 	bl	2f2b4 <CLogger::Get()>
   19054:	e59f1180 	ldr	r1, [pc, #384]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   19058:	e1a0200a 	mov	r2, sl
   1905c:	e30d3808 	movw	r3, #55304	; 0xd808
   19060:	e3403003 	movt	r3, #3
   19064:	eb005a60 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19068:	eaffff4e 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   1906c:	e1a00004 	mov	r0, r4
   19070:	ebffdd63 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   19074:	e1a03006 	mov	r3, r6
   19078:	e1a01000 	mov	r1, r0
   1907c:	e3a02040 	mov	r2, #64	; 0x40
   19080:	e1a00005 	mov	r0, r5
   19084:	e58d700c 	str	r7, [sp, #12]
   19088:	e58d7008 	str	r7, [sp, #8]
   1908c:	e58d7000 	str	r7, [sp]
   19090:	e58d6004 	str	r6, [sp, #4]
   19094:	ebffea63 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19098:	e3500000 	cmp	r0, #0
   1909c:	ba000039 	blt	19188 <CUSBSerialPL2303Device::Configure()+0x50c>
   190a0:	e3a07001 	mov	r7, #1
   190a4:	e1a00004 	mov	r0, r4
   190a8:	ebffdd55 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   190ac:	e3a06000 	mov	r6, #0
   190b0:	e1a01000 	mov	r1, r0
   190b4:	e1a03007 	mov	r3, r7
   190b8:	e3a02040 	mov	r2, #64	; 0x40
   190bc:	e1a00005 	mov	r0, r5
   190c0:	e58d600c 	str	r6, [sp, #12]
   190c4:	e58d6008 	str	r6, [sp, #8]
   190c8:	e58d6004 	str	r6, [sp, #4]
   190cc:	e58d7000 	str	r7, [sp]
   190d0:	ebffea54 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   190d4:	e1500006 	cmp	r0, r6
   190d8:	ba000031 	blt	191a4 <CUSBSerialPL2303Device::Configure()+0x528>
   190dc:	e1a00004 	mov	r0, r4
   190e0:	e3a08002 	mov	r8, #2
   190e4:	ebffdd46 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   190e8:	e3a09044 	mov	r9, #68	; 0x44
   190ec:	e1a01000 	mov	r1, r0
   190f0:	e1a03007 	mov	r3, r7
   190f4:	e3a02040 	mov	r2, #64	; 0x40
   190f8:	e1a00005 	mov	r0, r5
   190fc:	e58d600c 	str	r6, [sp, #12]
   19100:	e58d6008 	str	r6, [sp, #8]
   19104:	e1cd80f0 	strd	r8, [sp]
   19108:	ebffea46 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1910c:	e3500000 	cmp	r0, #0
   19110:	ba00002a 	blt	191c0 <CUSBSerialPL2303Device::Configure()+0x544>
   19114:	e1a00004 	mov	r0, r4
   19118:	ebffdd39 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1911c:	e1a03007 	mov	r3, r7
   19120:	e1a01000 	mov	r1, r0
   19124:	e3a02040 	mov	r2, #64	; 0x40
   19128:	e1a00005 	mov	r0, r5
   1912c:	e58d600c 	str	r6, [sp, #12]
   19130:	e58d6008 	str	r6, [sp, #8]
   19134:	e58d6004 	str	r6, [sp, #4]
   19138:	e58d6000 	str	r6, [sp]
   1913c:	ebffea39 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19140:	e3500000 	cmp	r0, #0
   19144:	ba00000f 	blt	19188 <CUSBSerialPL2303Device::Configure()+0x50c>
   19148:	e5943000 	ldr	r3, [r4]
   1914c:	e3a01d96 	mov	r1, #9600	; 0x2580
   19150:	e1a00004 	mov	r0, r4
   19154:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   19158:	e12fff33 	blx	r3
   1915c:	e3500000 	cmp	r0, #0
   19160:	0affff10 	beq	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   19164:	e5941000 	ldr	r1, [r4]
   19168:	e1a00004 	mov	r0, r4
   1916c:	e1a03007 	mov	r3, r7
   19170:	e1a02006 	mov	r2, r6
   19174:	e5914030 	ldr	r4, [r1, #48]	; 0x30
   19178:	e3a01008 	mov	r1, #8
   1917c:	e12fff34 	blx	r4
   19180:	e1a05000 	mov	r5, r0
   19184:	eaffff08 	b	18dac <CUSBSerialPL2303Device::Configure()+0x130>
   19188:	eb005849 	bl	2f2b4 <CLogger::Get()>
   1918c:	e59f1048 	ldr	r1, [pc, #72]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   19190:	e3a02001 	mov	r2, #1
   19194:	e30d3830 	movw	r3, #55344	; 0xd830
   19198:	e3403003 	movt	r3, #3
   1919c:	eb005a12 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   191a0:	eaffff00 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   191a4:	eb005842 	bl	2f2b4 <CLogger::Get()>
   191a8:	e59f102c 	ldr	r1, [pc, #44]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   191ac:	e1a02007 	mov	r2, r7
   191b0:	e30d3840 	movw	r3, #55360	; 0xd840
   191b4:	e3403003 	movt	r3, #3
   191b8:	eb005a0b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   191bc:	eafffef9 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   191c0:	eb00583b 	bl	2f2b4 <CLogger::Get()>
   191c4:	e59f1010 	ldr	r1, [pc, #16]	; 191dc <CUSBSerialPL2303Device::Configure()+0x560>
   191c8:	e1a02007 	mov	r2, r7
   191cc:	e30d3850 	movw	r3, #55376	; 0xd850
   191d0:	e3403003 	movt	r3, #3
   191d4:	eb005a04 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   191d8:	eafffef2 	b	18da8 <CUSBSerialPL2303Device::Configure()+0x12c>
   191dc:	0003d8b8 	.word	0x0003d8b8

000191e0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   191e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191e4:	e1a07000 	mov	r7, r0
   191e8:	e1a09001 	mov	r9, r1
   191ec:	e24dd098 	sub	sp, sp, #152	; 0x98
   191f0:	e1a06002 	mov	r6, r2
   191f4:	e1a08003 	mov	r8, r3
   191f8:	ebffdd0c 	bl	10630 <CUSBFunction::GetHost() const>
   191fc:	e250a000 	subs	sl, r0, #0
   19200:	0a000046 	beq	19320 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x140>
   19204:	e28d405f 	add	r4, sp, #95	; 0x5f
   19208:	e3a05000 	mov	r5, #0
   1920c:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   19210:	e1a00007 	mov	r0, r7
   19214:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   19218:	e1a0c004 	mov	ip, r4
   1921c:	e48c5004 	str	r5, [ip], #4
   19220:	edcc0b0c 	vstr	d16, [ip, #48]	; 0x30
   19224:	f44c0a0f 	vst1.8	{d16-d17}, [ip]
   19228:	edcc0b04 	vstr	d16, [ip, #16]
   1922c:	edcc0b06 	vstr	d16, [ip, #24]
   19230:	edcc0b08 	vstr	d16, [ip, #32]
   19234:	edcc0b0a 	vstr	d16, [ip, #40]	; 0x28
   19238:	edcc0b0d 	vstr	d16, [ip, #52]	; 0x34
   1923c:	ebffdcf0 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   19240:	e3a03007 	mov	r3, #7
   19244:	e1a01000 	mov	r1, r0
   19248:	e58d300c 	str	r3, [sp, #12]
   1924c:	e3a020a1 	mov	r2, #161	; 0xa1
   19250:	e3a03021 	mov	r3, #33	; 0x21
   19254:	e1a0000a 	mov	r0, sl
   19258:	e58d4008 	str	r4, [sp, #8]
   1925c:	e58d5004 	str	r5, [sp, #4]
   19260:	e58d5000 	str	r5, [sp]
   19264:	ebffe9ef 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19268:	e3500007 	cmp	r0, #7
   1926c:	0a000008 	beq	19294 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb4>
   19270:	eb00580f 	bl	2f2b4 <CLogger::Get()>
   19274:	e59f11f4 	ldr	r1, [pc, #500]	; 19470 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x290>
   19278:	e3a02001 	mov	r2, #1
   1927c:	e30d3860 	movw	r3, #55392	; 0xd860
   19280:	e3403003 	movt	r3, #3
   19284:	eb0059d8 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19288:	e1a00005 	mov	r0, r5
   1928c:	e28dd098 	add	sp, sp, #152	; 0x98
   19290:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19294:	e28d0010 	add	r0, sp, #16
   19298:	eb0068af 	bl	3355c <CString::CString()>
   1929c:	e2493005 	sub	r3, r9, #5
   192a0:	e3530003 	cmp	r3, #3
   192a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   192a8:	ea000068 	b	19450 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x270>
   192ac:	000192bc 	.word	0x000192bc
   192b0:	000192bc 	.word	0x000192bc
   192b4:	000192bc 	.word	0x000192bc
   192b8:	000192bc 	.word	0x000192bc
   192bc:	e1a02009 	mov	r2, r9
   192c0:	e28d0010 	add	r0, sp, #16
   192c4:	e30d1464 	movw	r1, #54372	; 0xd464
   192c8:	e3401003 	movt	r1, #3
   192cc:	e5c49006 	strb	r9, [r4, #6]
   192d0:	eb006e6c 	bl	34c88 <CString::Format(char const*, ...)>
   192d4:	e3560001 	cmp	r6, #1
   192d8:	0a00004f 	beq	1941c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x23c>
   192dc:	e3560002 	cmp	r6, #2
   192e0:	0a000025 	beq	1937c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x19c>
   192e4:	e3560000 	cmp	r6, #0
   192e8:	0a000012 	beq	19338 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x158>
   192ec:	eb0057f0 	bl	2f2b4 <CLogger::Get()>
   192f0:	e30d3488 	movw	r3, #54408	; 0xd488
   192f4:	e3403003 	movt	r3, #3
   192f8:	e59f1170 	ldr	r1, [pc, #368]	; 19470 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x290>
   192fc:	e3a02001 	mov	r2, #1
   19300:	e58d6000 	str	r6, [sp]
   19304:	eb0059b8 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19308:	e28d0010 	add	r0, sp, #16
   1930c:	e3a05000 	mov	r5, #0
   19310:	eb00685e 	bl	33490 <CString::~CString()>
   19314:	e1a00005 	mov	r0, r5
   19318:	e28dd098 	add	sp, sp, #152	; 0x98
   1931c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19320:	e30d17a8 	movw	r1, #55208	; 0xd7a8
   19324:	e3401003 	movt	r1, #3
   19328:	e30c0d48 	movw	r0, #52552	; 0xcd48
   1932c:	e3400003 	movt	r0, #3
   19330:	e3002115 	movw	r2, #277	; 0x115
   19334:	eb004d61 	bl	2c8c0 <assertion_failed>
   19338:	e30d1480 	movw	r1, #54400	; 0xd480
   1933c:	e3401003 	movt	r1, #3
   19340:	e28d0010 	add	r0, sp, #16
   19344:	e5c46005 	strb	r6, [r4, #5]
   19348:	eb0068fd 	bl	33744 <CString::Append(char const*)>
   1934c:	e3580001 	cmp	r8, #1
   19350:	0a00002a 	beq	19400 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x220>
   19354:	e3580002 	cmp	r8, #2
   19358:	0a00000d 	beq	19394 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b4>
   1935c:	eb0057d4 	bl	2f2b4 <CLogger::Get()>
   19360:	e59f1108 	ldr	r1, [pc, #264]	; 19470 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x290>
   19364:	e3a02001 	mov	r2, #1
   19368:	e58d8000 	str	r8, [sp]
   1936c:	e30d349c 	movw	r3, #54428	; 0xd49c
   19370:	e3403003 	movt	r3, #3
   19374:	eb00599c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19378:	eaffffe2 	b	19308 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x128>
   1937c:	e28d0010 	add	r0, sp, #16
   19380:	e3011da8 	movw	r1, #7592	; 0x1da8
   19384:	e3401004 	movt	r1, #4
   19388:	e5c46005 	strb	r6, [r4, #5]
   1938c:	eb0068ec 	bl	33744 <CString::Append(char const*)>
   19390:	eaffffed 	b	1934c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x16c>
   19394:	e30d1374 	movw	r1, #54132	; 0xd374
   19398:	e3401003 	movt	r1, #3
   1939c:	e28d0010 	add	r0, sp, #16
   193a0:	e5c48004 	strb	r8, [r4, #4]
   193a4:	eb0068e6 	bl	33744 <CString::Append(char const*)>
   193a8:	e1a00007 	mov	r0, r7
   193ac:	ebffdc94 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   193b0:	e3a03000 	mov	r3, #0
   193b4:	e1a01000 	mov	r1, r0
   193b8:	e58d3004 	str	r3, [sp, #4]
   193bc:	e58d3000 	str	r3, [sp]
   193c0:	e1a0000a 	mov	r0, sl
   193c4:	e3a03007 	mov	r3, #7
   193c8:	e3a02021 	mov	r2, #33	; 0x21
   193cc:	e58d300c 	str	r3, [sp, #12]
   193d0:	e3a03020 	mov	r3, #32
   193d4:	e58d4008 	str	r4, [sp, #8]
   193d8:	ebffe992 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   193dc:	e3500000 	cmp	r0, #0
   193e0:	ba000013 	blt	19434 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x254>
   193e4:	e28d0010 	add	r0, sp, #16
   193e8:	e5c79018 	strb	r9, [r7, #24]
   193ec:	e5c76019 	strb	r6, [r7, #25]
   193f0:	e3a05001 	mov	r5, #1
   193f4:	e5c7801a 	strb	r8, [r7, #26]
   193f8:	eb006824 	bl	33490 <CString::~CString()>
   193fc:	eaffffc4 	b	19314 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x134>
   19400:	e28d0010 	add	r0, sp, #16
   19404:	e30b1ce4 	movw	r1, #48356	; 0xbce4
   19408:	e3401003 	movt	r1, #3
   1940c:	e3a03000 	mov	r3, #0
   19410:	e5c43004 	strb	r3, [r4, #4]
   19414:	eb0068ca 	bl	33744 <CString::Append(char const*)>
   19418:	eaffffe2 	b	193a8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c8>
   1941c:	e28d0010 	add	r0, sp, #16
   19420:	e30d1484 	movw	r1, #54404	; 0xd484
   19424:	e3401003 	movt	r1, #3
   19428:	e5c46005 	strb	r6, [r4, #5]
   1942c:	eb0068c4 	bl	33744 <CString::Append(char const*)>
   19430:	eaffffc5 	b	1934c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x16c>
   19434:	eb00579e 	bl	2f2b4 <CLogger::Get()>
   19438:	e59f1030 	ldr	r1, [pc, #48]	; 19470 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x290>
   1943c:	e3a02001 	mov	r2, #1
   19440:	e30d3650 	movw	r3, #54864	; 0xd650
   19444:	e3403003 	movt	r3, #3
   19448:	eb005967 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1944c:	eaffffad 	b	19308 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x128>
   19450:	eb005797 	bl	2f2b4 <CLogger::Get()>
   19454:	e59f1014 	ldr	r1, [pc, #20]	; 19470 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x290>
   19458:	e3a02001 	mov	r2, #1
   1945c:	e58d9000 	str	r9, [sp]
   19460:	e30d3468 	movw	r3, #54376	; 0xd468
   19464:	e3403003 	movt	r3, #3
   19468:	eb00595f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1946c:	eaffffa5 	b	19308 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x128>
   19470:	0003d8b8 	.word	0x0003d8b8

00019474 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   19474:	e59f3014 	ldr	r3, [pc, #20]	; 19490 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()+0x1c>
   19478:	e92d4010 	push	{r4, lr}
   1947c:	e1a04000 	mov	r4, r0
   19480:	e5803000 	str	r3, [r0]
   19484:	eb00133a 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   19488:	e1a00004 	mov	r0, r4
   1948c:	e8bd8010 	pop	{r4, pc}
   19490:	0003d93c 	.word	0x0003d93c

00019494 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   19494:	e59f3020 	ldr	r3, [pc, #32]	; 194bc <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()+0x28>
   19498:	e92d4010 	push	{r4, lr}
   1949c:	e1a04000 	mov	r4, r0
   194a0:	e5803000 	str	r3, [r0]
   194a4:	eb001332 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   194a8:	e1a00004 	mov	r0, r4
   194ac:	e3a01040 	mov	r1, #64	; 0x40
   194b0:	eb007611 	bl	36cfc <operator delete(void*, unsigned int)>
   194b4:	e1a00004 	mov	r0, r4
   194b8:	e8bd8010 	pop	{r4, pc}
   194bc:	0003d93c 	.word	0x0003d93c

000194c0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)>:
   194c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   194c4:	e1a05000 	mov	r5, r0
   194c8:	e1a07001 	mov	r7, r1
   194cc:	e24dd018 	sub	sp, sp, #24
   194d0:	ebffdc56 	bl	10630 <CUSBFunction::GetHost() const>
   194d4:	e2506000 	subs	r6, r0, #0
   194d8:	0a00003c 	beq	195d0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x110>
   194dc:	e59f3104 	ldr	r3, [pc, #260]	; 195e8 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x128>
   194e0:	e3a02c36 	mov	r2, #13824	; 0x3600
   194e4:	e340216e 	movt	r2, #366	; 0x16e
   194e8:	e732f712 	udiv	r2, r2, r7
   194ec:	e8930003 	ldm	r3, {r0, r1}
   194f0:	e28d3018 	add	r3, sp, #24
   194f4:	e9030003 	stmdb	r3, {r0, r1}
   194f8:	e2023007 	and	r3, r2, #7
   194fc:	e2833018 	add	r3, r3, #24
   19500:	e08d3003 	add	r3, sp, r3
   19504:	e5533008 	ldrb	r3, [r3, #-8]
   19508:	e1a03703 	lsl	r3, r3, #14
   1950c:	e18331a2 	orr	r3, r3, r2, lsr #3
   19510:	e3530001 	cmp	r3, #1
   19514:	0a000021 	beq	195a0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xe0>
   19518:	e3042001 	movw	r2, #16385	; 0x4001
   1951c:	e1530002 	cmp	r3, r2
   19520:	0a00001b 	beq	19594 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xd4>
   19524:	e6ff8073 	uxth	r8, r3
   19528:	e1a04823 	lsr	r4, r3, #16
   1952c:	e1a00005 	mov	r0, r5
   19530:	ebffdc33 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   19534:	e58d4004 	str	r4, [sp, #4]
   19538:	e1a01000 	mov	r1, r0
   1953c:	e3a04000 	mov	r4, #0
   19540:	e1a00006 	mov	r0, r6
   19544:	e3a03003 	mov	r3, #3
   19548:	e3a02040 	mov	r2, #64	; 0x40
   1954c:	e58d8000 	str	r8, [sp]
   19550:	e58d400c 	str	r4, [sp, #12]
   19554:	e58d4008 	str	r4, [sp, #8]
   19558:	ebffe932 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1955c:	e1500004 	cmp	r0, r4
   19560:	ba000011 	blt	195ac <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xec>
   19564:	e5857014 	str	r7, [r5, #20]
   19568:	eb005751 	bl	2f2b4 <CLogger::Get()>
   1956c:	e5953014 	ldr	r3, [r5, #20]
   19570:	e58d3000 	str	r3, [sp]
   19574:	e3a02004 	mov	r2, #4
   19578:	e59f106c 	ldr	r1, [pc, #108]	; 195ec <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x12c>
   1957c:	e30d35a0 	movw	r3, #54688	; 0xd5a0
   19580:	e3403003 	movt	r3, #3
   19584:	eb005918 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19588:	e3a00001 	mov	r0, #1
   1958c:	e28dd018 	add	sp, sp, #24
   19590:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19594:	e3a04000 	mov	r4, #0
   19598:	e3a08001 	mov	r8, #1
   1959c:	eaffffe2 	b	1952c <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x6c>
   195a0:	e3a04000 	mov	r4, #0
   195a4:	e1a08004 	mov	r8, r4
   195a8:	eaffffdf 	b	1952c <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x6c>
   195ac:	eb005740 	bl	2f2b4 <CLogger::Get()>
   195b0:	e59f1034 	ldr	r1, [pc, #52]	; 195ec <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x12c>
   195b4:	e3a02001 	mov	r2, #1
   195b8:	e30d3588 	movw	r3, #54664	; 0xd588
   195bc:	e3403003 	movt	r3, #3
   195c0:	eb005909 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   195c4:	e1a00004 	mov	r0, r4
   195c8:	e28dd018 	add	sp, sp, #24
   195cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   195d0:	e30d18c8 	movw	r1, #55496	; 0xd8c8
   195d4:	e3401003 	movt	r1, #3
   195d8:	e30c0d48 	movw	r0, #52552	; 0xcd48
   195dc:	e3400003 	movt	r0, #3
   195e0:	e3a0207b 	mov	r2, #123	; 0x7b
   195e4:	eb004cb5 	bl	2c8c0 <assertion_failed>
   195e8:	0003d970 	.word	0x0003d970
   195ec:	0003d978 	.word	0x0003d978

000195f0 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>:
   195f0:	e92d4010 	push	{r4, lr}
   195f4:	e1a04000 	mov	r4, r0
   195f8:	e3a02002 	mov	r2, #2
   195fc:	eb0013e8 	bl	1e5a4 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   19600:	e59f3008 	ldr	r3, [pc, #8]	; 19610 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)+0x20>
   19604:	e1a00004 	mov	r0, r4
   19608:	e5843000 	str	r3, [r4]
   1960c:	e8bd8010 	pop	{r4, pc}
   19610:	0003d93c 	.word	0x0003d93c

00019614 <CUSBSerialFT231XDevice::GetDeviceIDTable()>:
   19614:	e59f0000 	ldr	r0, [pc]	; 1961c <CUSBSerialFT231XDevice::GetDeviceIDTable()+0x8>
   19618:	e12fff1e 	bx	lr
   1961c:	0003d980 	.word	0x0003d980

00019620 <CUSBSerialFT231XDevice::Configure()>:
   19620:	e92d4070 	push	{r4, r5, r6, lr}
   19624:	e1a04000 	mov	r4, r0
   19628:	e24dd020 	sub	sp, sp, #32
   1962c:	eb001440 	bl	1e734 <CUSBSerialDevice::Configure()>
   19630:	e2505000 	subs	r5, r0, #0
   19634:	0a000050 	beq	1977c <CUSBSerialFT231XDevice::Configure()+0x15c>
   19638:	e1a00004 	mov	r0, r4
   1963c:	ebffdbe6 	bl	105dc <CUSBFunction::GetDevice() const>
   19640:	ebffd45e 	bl	e7c0 <CUSBDevice::GetDeviceDescriptor() const>
   19644:	e1a05000 	mov	r5, r0
   19648:	e30d18dc 	movw	r1, #55516	; 0xd8dc
   1964c:	e3401003 	movt	r1, #3
   19650:	e28d0010 	add	r0, sp, #16
   19654:	eb0067c6 	bl	33574 <CString::CString(char const*)>
   19658:	e1d530bc 	ldrh	r3, [r5, #12]
   1965c:	e3530a01 	cmp	r3, #4096	; 0x1000
   19660:	0a000060 	beq	197e8 <CUSBSerialFT231XDevice::Configure()+0x1c8>
   19664:	e3530c06 	cmp	r3, #1536	; 0x600
   19668:	0a00004c 	beq	197a0 <CUSBSerialFT231XDevice::Configure()+0x180>
   1966c:	e2433c07 	sub	r3, r3, #1792	; 0x700
   19670:	e30f2dff 	movw	r2, #65023	; 0xfdff
   19674:	e0022003 	and	r2, r2, r3
   19678:	e3520000 	cmp	r2, #0
   1967c:	0a000054 	beq	197d4 <CUSBSerialFT231XDevice::Configure()+0x1b4>
   19680:	eb00570b 	bl	2f2b4 <CLogger::Get()>
   19684:	e1a05000 	mov	r5, r0
   19688:	e28d0010 	add	r0, sp, #16
   1968c:	eb0067ea 	bl	3363c <CString::operator char const*() const>
   19690:	e59f1198 	ldr	r1, [pc, #408]	; 19830 <CUSBSerialFT231XDevice::Configure()+0x210>
   19694:	e1a03000 	mov	r3, r0
   19698:	e3a02003 	mov	r2, #3
   1969c:	e1a00005 	mov	r0, r5
   196a0:	e58d3000 	str	r3, [sp]
   196a4:	e30d35cc 	movw	r3, #54732	; 0xd5cc
   196a8:	e3403003 	movt	r3, #3
   196ac:	eb0058ce 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   196b0:	e1a00004 	mov	r0, r4
   196b4:	ebffdbdd 	bl	10630 <CUSBFunction::GetHost() const>
   196b8:	e2506000 	subs	r6, r0, #0
   196bc:	0a00004e 	beq	197fc <CUSBSerialFT231XDevice::Configure()+0x1dc>
   196c0:	e3a05000 	mov	r5, #0
   196c4:	e1a00004 	mov	r0, r4
   196c8:	ebffdbcd 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   196cc:	e1a03005 	mov	r3, r5
   196d0:	e1a01000 	mov	r1, r0
   196d4:	e3a02040 	mov	r2, #64	; 0x40
   196d8:	e1a00006 	mov	r0, r6
   196dc:	e58d500c 	str	r5, [sp, #12]
   196e0:	e58d5008 	str	r5, [sp, #8]
   196e4:	e58d5004 	str	r5, [sp, #4]
   196e8:	e58d5000 	str	r5, [sp]
   196ec:	ebffe8cd 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   196f0:	e1500005 	cmp	r0, r5
   196f4:	ba00002e 	blt	197b4 <CUSBSerialFT231XDevice::Configure()+0x194>
   196f8:	e1a00004 	mov	r0, r4
   196fc:	ebffdbc0 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   19700:	e3a03002 	mov	r3, #2
   19704:	e1a01000 	mov	r1, r0
   19708:	e3a02040 	mov	r2, #64	; 0x40
   1970c:	e1a00006 	mov	r0, r6
   19710:	e58d500c 	str	r5, [sp, #12]
   19714:	e58d5008 	str	r5, [sp, #8]
   19718:	e58d5004 	str	r5, [sp, #4]
   1971c:	e58d5000 	str	r5, [sp]
   19720:	ebffe8c0 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19724:	e3500000 	cmp	r0, #0
   19728:	ba000039 	blt	19814 <CUSBSerialFT231XDevice::Configure()+0x1f4>
   1972c:	e5943000 	ldr	r3, [r4]
   19730:	e3a01d96 	mov	r1, #9600	; 0x2580
   19734:	e1a00004 	mov	r0, r4
   19738:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1973c:	e12fff33 	blx	r3
   19740:	e3500000 	cmp	r0, #0
   19744:	0a000020 	beq	197cc <CUSBSerialFT231XDevice::Configure()+0x1ac>
   19748:	e5941000 	ldr	r1, [r4]
   1974c:	e1a02005 	mov	r2, r5
   19750:	e1a00004 	mov	r0, r4
   19754:	e3a03001 	mov	r3, #1
   19758:	e5914030 	ldr	r4, [r1, #48]	; 0x30
   1975c:	e3a01008 	mov	r1, #8
   19760:	e12fff34 	blx	r4
   19764:	e1a05000 	mov	r5, r0
   19768:	e28d0010 	add	r0, sp, #16
   1976c:	eb006747 	bl	33490 <CString::~CString()>
   19770:	e1a00005 	mov	r0, r5
   19774:	e28dd020 	add	sp, sp, #32
   19778:	e8bd8070 	pop	{r4, r5, r6, pc}
   1977c:	eb0056cc 	bl	2f2b4 <CLogger::Get()>
   19780:	e59f10a8 	ldr	r1, [pc, #168]	; 19830 <CUSBSerialFT231XDevice::Configure()+0x210>
   19784:	e3a02001 	mov	r2, #1
   19788:	e30d33fc 	movw	r3, #54268	; 0xd3fc
   1978c:	e3403003 	movt	r3, #3
   19790:	eb005895 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19794:	e1a00005 	mov	r0, r5
   19798:	e28dd020 	add	sp, sp, #32
   1979c:	e8bd8070 	pop	{r4, r5, r6, pc}
   197a0:	e28d0010 	add	r0, sp, #16
   197a4:	e30d18e8 	movw	r1, #55528	; 0xd8e8
   197a8:	e3401003 	movt	r1, #3
   197ac:	eb0067a8 	bl	33654 <CString::operator=(char const*)>
   197b0:	eaffffb2 	b	19680 <CUSBSerialFT231XDevice::Configure()+0x60>
   197b4:	eb0056be 	bl	2f2b4 <CLogger::Get()>
   197b8:	e30d38f8 	movw	r3, #55544	; 0xd8f8
   197bc:	e3403003 	movt	r3, #3
   197c0:	e59f1068 	ldr	r1, [pc, #104]	; 19830 <CUSBSerialFT231XDevice::Configure()+0x210>
   197c4:	e3a02001 	mov	r2, #1
   197c8:	eb005887 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   197cc:	e3a05000 	mov	r5, #0
   197d0:	eaffffe4 	b	19768 <CUSBSerialFT231XDevice::Configure()+0x148>
   197d4:	e28d0010 	add	r0, sp, #16
   197d8:	e30d18f0 	movw	r1, #55536	; 0xd8f0
   197dc:	e3401003 	movt	r1, #3
   197e0:	eb00679b 	bl	33654 <CString::operator=(char const*)>
   197e4:	eaffffa5 	b	19680 <CUSBSerialFT231XDevice::Configure()+0x60>
   197e8:	e28d0010 	add	r0, sp, #16
   197ec:	e30d18e0 	movw	r1, #55520	; 0xd8e0
   197f0:	e3401003 	movt	r1, #3
   197f4:	eb006796 	bl	33654 <CString::operator=(char const*)>
   197f8:	eaffffa0 	b	19680 <CUSBSerialFT231XDevice::Configure()+0x60>
   197fc:	e30d18c8 	movw	r1, #55496	; 0xd8c8
   19800:	e3401003 	movt	r1, #3
   19804:	e30c0d48 	movw	r0, #52552	; 0xcd48
   19808:	e3400003 	movt	r0, #3
   1980c:	e3a02051 	mov	r2, #81	; 0x51
   19810:	eb004c2a 	bl	2c8c0 <assertion_failed>
   19814:	eb0056a6 	bl	2f2b4 <CLogger::Get()>
   19818:	e59f1010 	ldr	r1, [pc, #16]	; 19830 <CUSBSerialFT231XDevice::Configure()+0x210>
   1981c:	e3a02001 	mov	r2, #1
   19820:	e30d390c 	movw	r3, #55564	; 0xd90c
   19824:	e3403003 	movt	r3, #3
   19828:	eb00586f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1982c:	eaffffe6 	b	197cc <CUSBSerialFT231XDevice::Configure()+0x1ac>
   19830:	0003d978 	.word	0x0003d978

00019834 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   19834:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   19838:	e1a08000 	mov	r8, r0
   1983c:	e1a04001 	mov	r4, r1
   19840:	e24dd024 	sub	sp, sp, #36	; 0x24
   19844:	e1a05002 	mov	r5, r2
   19848:	e1a07003 	mov	r7, r3
   1984c:	ebffdb77 	bl	10630 <CUSBFunction::GetHost() const>
   19850:	e2506000 	subs	r6, r0, #0
   19854:	0a00006c 	beq	19a0c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d8>
   19858:	e28d0010 	add	r0, sp, #16
   1985c:	eb00673e 	bl	3355c <CString::CString()>
   19860:	e3540007 	cmp	r4, #7
   19864:	0a00000e 	beq	198a4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x70>
   19868:	e3540008 	cmp	r4, #8
   1986c:	0a00000c 	beq	198a4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x70>
   19870:	eb00568f 	bl	2f2b4 <CLogger::Get()>
   19874:	e30d3618 	movw	r3, #54808	; 0xd618
   19878:	e3403003 	movt	r3, #3
   1987c:	e59f11bc 	ldr	r1, [pc, #444]	; 19a40 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   19880:	e3a02001 	mov	r2, #1
   19884:	e58d4000 	str	r4, [sp]
   19888:	eb005857 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1988c:	e3a04000 	mov	r4, #0
   19890:	e28d0010 	add	r0, sp, #16
   19894:	eb0066fd 	bl	33490 <CString::~CString()>
   19898:	e1a00004 	mov	r0, r4
   1989c:	e28dd024 	add	sp, sp, #36	; 0x24
   198a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   198a4:	e1a02004 	mov	r2, r4
   198a8:	e28d0010 	add	r0, sp, #16
   198ac:	e30d1464 	movw	r1, #54372	; 0xd464
   198b0:	e3401003 	movt	r1, #3
   198b4:	eb006cf3 	bl	34c88 <CString::Format(char const*, ...)>
   198b8:	e1a09004 	mov	r9, r4
   198bc:	e3550001 	cmp	r5, #1
   198c0:	0a00000b 	beq	198f4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
   198c4:	e3550002 	cmp	r5, #2
   198c8:	0a000049 	beq	199f4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c0>
   198cc:	e3550000 	cmp	r5, #0
   198d0:	0a000018 	beq	19938 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x104>
   198d4:	eb005676 	bl	2f2b4 <CLogger::Get()>
   198d8:	e59f1160 	ldr	r1, [pc, #352]	; 19a40 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   198dc:	e3a02001 	mov	r2, #1
   198e0:	e58d5000 	str	r5, [sp]
   198e4:	e30d3488 	movw	r3, #54408	; 0xd488
   198e8:	e3403003 	movt	r3, #3
   198ec:	eb00583e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   198f0:	eaffffe5 	b	1988c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   198f4:	e30d1484 	movw	r1, #54404	; 0xd484
   198f8:	e3401003 	movt	r1, #3
   198fc:	e28d0010 	add	r0, sp, #16
   19900:	e3849c01 	orr	r9, r4, #256	; 0x100
   19904:	eb00678e 	bl	33744 <CString::Append(char const*)>
   19908:	e3570001 	cmp	r7, #1
   1990c:	0a00000f 	beq	19950 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x11c>
   19910:	e3570002 	cmp	r7, #2
   19914:	0a000012 	beq	19964 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x130>
   19918:	eb005665 	bl	2f2b4 <CLogger::Get()>
   1991c:	e59f111c 	ldr	r1, [pc, #284]	; 19a40 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   19920:	e3a02001 	mov	r2, #1
   19924:	e58d7000 	str	r7, [sp]
   19928:	e30d349c 	movw	r3, #54428	; 0xd49c
   1992c:	e3403003 	movt	r3, #3
   19930:	eb00582d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19934:	eaffffd4 	b	1988c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   19938:	e28d0010 	add	r0, sp, #16
   1993c:	e30d1480 	movw	r1, #54400	; 0xd480
   19940:	e3401003 	movt	r1, #3
   19944:	eb00677e 	bl	33744 <CString::Append(char const*)>
   19948:	e3570001 	cmp	r7, #1
   1994c:	1affffef 	bne	19910 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   19950:	e28d0010 	add	r0, sp, #16
   19954:	e30b1ce4 	movw	r1, #48356	; 0xbce4
   19958:	e3401003 	movt	r1, #3
   1995c:	eb006778 	bl	33744 <CString::Append(char const*)>
   19960:	ea000004 	b	19978 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x144>
   19964:	e30d1374 	movw	r1, #54132	; 0xd374
   19968:	e3401003 	movt	r1, #3
   1996c:	e28d0010 	add	r0, sp, #16
   19970:	e3899a01 	orr	r9, r9, #4096	; 0x1000
   19974:	eb006772 	bl	33744 <CString::Append(char const*)>
   19978:	e1a00008 	mov	r0, r8
   1997c:	ebffdb20 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   19980:	e3a03000 	mov	r3, #0
   19984:	e1a01000 	mov	r1, r0
   19988:	e58d300c 	str	r3, [sp, #12]
   1998c:	e58d3008 	str	r3, [sp, #8]
   19990:	e1a00006 	mov	r0, r6
   19994:	e58d3004 	str	r3, [sp, #4]
   19998:	e3a02040 	mov	r2, #64	; 0x40
   1999c:	e3a03004 	mov	r3, #4
   199a0:	e58d9000 	str	r9, [sp]
   199a4:	ebffe81f 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   199a8:	e3500000 	cmp	r0, #0
   199ac:	ba00001c 	blt	19a24 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f0>
   199b0:	e5c84018 	strb	r4, [r8, #24]
   199b4:	e3a04001 	mov	r4, #1
   199b8:	e5c85019 	strb	r5, [r8, #25]
   199bc:	e5c8701a 	strb	r7, [r8, #26]
   199c0:	eb00563b 	bl	2f2b4 <CLogger::Get()>
   199c4:	e1a05000 	mov	r5, r0
   199c8:	e28d0010 	add	r0, sp, #16
   199cc:	eb00671a 	bl	3363c <CString::operator char const*() const>
   199d0:	e59f1068 	ldr	r1, [pc, #104]	; 19a40 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   199d4:	e1a03000 	mov	r3, r0
   199d8:	e3a02004 	mov	r2, #4
   199dc:	e58d3000 	str	r3, [sp]
   199e0:	e1a00005 	mov	r0, r5
   199e4:	e30d3928 	movw	r3, #55592	; 0xd928
   199e8:	e3403003 	movt	r3, #3
   199ec:	eb0057fe 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   199f0:	eaffffa6 	b	19890 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x5c>
   199f4:	e28d0010 	add	r0, sp, #16
   199f8:	e3011da8 	movw	r1, #7592	; 0x1da8
   199fc:	e3401004 	movt	r1, #4
   19a00:	e3849c02 	orr	r9, r4, #512	; 0x200
   19a04:	eb00674e 	bl	33744 <CString::Append(char const*)>
   19a08:	eaffffbe 	b	19908 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xd4>
   19a0c:	e30d18c8 	movw	r1, #55496	; 0xd8c8
   19a10:	e3401003 	movt	r1, #3
   19a14:	e30c0d48 	movw	r0, #52552	; 0xcd48
   19a18:	e3400003 	movt	r0, #3
   19a1c:	e3a020a1 	mov	r2, #161	; 0xa1
   19a20:	eb004ba6 	bl	2c8c0 <assertion_failed>
   19a24:	eb005622 	bl	2f2b4 <CLogger::Get()>
   19a28:	e59f1010 	ldr	r1, [pc, #16]	; 19a40 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   19a2c:	e3a02001 	mov	r2, #1
   19a30:	e30d3650 	movw	r3, #54864	; 0xd650
   19a34:	e3403003 	movt	r3, #3
   19a38:	eb0057eb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19a3c:	eaffff92 	b	1988c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   19a40:	0003d978 	.word	0x0003d978

00019a44 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   19a44:	e59f3014 	ldr	r3, [pc, #20]	; 19a60 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()+0x1c>
   19a48:	e92d4010 	push	{r4, lr}
   19a4c:	e1a04000 	mov	r4, r0
   19a50:	e5803000 	str	r3, [r0]
   19a54:	eb0011c6 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   19a58:	e1a00004 	mov	r0, r4
   19a5c:	e8bd8010 	pop	{r4, pc}
   19a60:	0003d9c8 	.word	0x0003d9c8

00019a64 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   19a64:	e59f3020 	ldr	r3, [pc, #32]	; 19a8c <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()+0x28>
   19a68:	e92d4010 	push	{r4, lr}
   19a6c:	e1a04000 	mov	r4, r0
   19a70:	e5803000 	str	r3, [r0]
   19a74:	eb0011be 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   19a78:	e1a00004 	mov	r0, r4
   19a7c:	e3a01044 	mov	r1, #68	; 0x44
   19a80:	eb00749d 	bl	36cfc <operator delete(void*, unsigned int)>
   19a84:	e1a00004 	mov	r0, r4
   19a88:	e8bd8010 	pop	{r4, pc}
   19a8c:	0003d9c8 	.word	0x0003d9c8

00019a90 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>:
   19a90:	e92d4010 	push	{r4, lr}
   19a94:	e1a04000 	mov	r4, r0
   19a98:	e3a02000 	mov	r2, #0
   19a9c:	eb0012c0 	bl	1e5a4 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   19aa0:	e59f3030 	ldr	r3, [pc, #48]	; 19ad8 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)+0x48>
   19aa4:	e5843000 	str	r3, [r4]
   19aa8:	e1a00004 	mov	r0, r4
   19aac:	ebffdb3e 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   19ab0:	e3a03000 	mov	r3, #0
   19ab4:	e1a02003 	mov	r2, r3
   19ab8:	e5c40040 	strb	r0, [r4, #64]	; 0x40
   19abc:	e3a0100a 	mov	r1, #10
   19ac0:	e1a00004 	mov	r0, r4
   19ac4:	ebffdb03 	bl	106d8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   19ac8:	e1a03000 	mov	r3, r0
   19acc:	e1a00004 	mov	r0, r4
   19ad0:	e5c43041 	strb	r3, [r4, #65]	; 0x41
   19ad4:	e8bd8010 	pop	{r4, pc}
   19ad8:	0003d9c8 	.word	0x0003d9c8

00019adc <CUSBSerialCDCDevice::SetLineCoding()>:
   19adc:	e92d4070 	push	{r4, r5, r6, lr}
   19ae0:	e1a04000 	mov	r4, r0
   19ae4:	e5d0301a 	ldrb	r3, [r0, #26]
   19ae8:	e24dd088 	sub	sp, sp, #136	; 0x88
   19aec:	e5901014 	ldr	r1, [r0, #20]
   19af0:	e28d504f 	add	r5, sp, #79	; 0x4f
   19af4:	e2533001 	subs	r3, r3, #1
   19af8:	e3c5503f 	bic	r5, r5, #63	; 0x3f
   19afc:	13a03001 	movne	r3, #1
   19b00:	e5d02019 	ldrb	r2, [r0, #25]
   19b04:	e1a03083 	lsl	r3, r3, #1
   19b08:	e5851000 	str	r1, [r5]
   19b0c:	e3520001 	cmp	r2, #1
   19b10:	e5d01018 	ldrb	r1, [r0, #24]
   19b14:	e5c51006 	strb	r1, [r5, #6]
   19b18:	e5c53004 	strb	r3, [r5, #4]
   19b1c:	0a000009 	beq	19b48 <CUSBSerialCDCDevice::SetLineCoding()+0x6c>
   19b20:	e3520002 	cmp	r2, #2
   19b24:	0a000007 	beq	19b48 <CUSBSerialCDCDevice::SetLineCoding()+0x6c>
   19b28:	e3520000 	cmp	r2, #0
   19b2c:	0a000005 	beq	19b48 <CUSBSerialCDCDevice::SetLineCoding()+0x6c>
   19b30:	e30d1994 	movw	r1, #55700	; 0xd994
   19b34:	e3401003 	movt	r1, #3
   19b38:	e30b0708 	movw	r0, #46856	; 0xb708
   19b3c:	e3400003 	movt	r0, #3
   19b40:	e3a02077 	mov	r2, #119	; 0x77
   19b44:	eb004b5d 	bl	2c8c0 <assertion_failed>
   19b48:	e1a00004 	mov	r0, r4
   19b4c:	e5c52005 	strb	r2, [r5, #5]
   19b50:	ebffdab6 	bl	10630 <CUSBFunction::GetHost() const>
   19b54:	e1a06000 	mov	r6, r0
   19b58:	e1a00004 	mov	r0, r4
   19b5c:	ebffdaa8 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   19b60:	e5d43040 	ldrb	r3, [r4, #64]	; 0x40
   19b64:	e1a01000 	mov	r1, r0
   19b68:	e3a02007 	mov	r2, #7
   19b6c:	e3a04000 	mov	r4, #0
   19b70:	e58d200c 	str	r2, [sp, #12]
   19b74:	e98d0028 	stmib	sp, {r3, r5}
   19b78:	e1a00006 	mov	r0, r6
   19b7c:	e3a03020 	mov	r3, #32
   19b80:	e3a02021 	mov	r2, #33	; 0x21
   19b84:	e58d4000 	str	r4, [sp]
   19b88:	ebffe7a6 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19b8c:	e1500004 	cmp	r0, r4
   19b90:	a3a00001 	movge	r0, #1
   19b94:	ba000001 	blt	19ba0 <CUSBSerialCDCDevice::SetLineCoding()+0xc4>
   19b98:	e28dd088 	add	sp, sp, #136	; 0x88
   19b9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19ba0:	eb0055c3 	bl	2f2b4 <CLogger::Get()>
   19ba4:	e59f1018 	ldr	r1, [pc, #24]	; 19bc4 <CUSBSerialCDCDevice::SetLineCoding()+0xe8>
   19ba8:	e3a02002 	mov	r2, #2
   19bac:	e30d39a8 	movw	r3, #55720	; 0xd9a8
   19bb0:	e3403003 	movt	r3, #3
   19bb4:	eb00578c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19bb8:	e1a00004 	mov	r0, r4
   19bbc:	e28dd088 	add	sp, sp, #136	; 0x88
   19bc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   19bc4:	0003d9fc 	.word	0x0003d9fc

00019bc8 <CUSBSerialCDCDevice::SetBaudRate(unsigned int)>:
   19bc8:	e5801014 	str	r1, [r0, #20]
   19bcc:	eaffffc2 	b	19adc <CUSBSerialCDCDevice::SetLineCoding()>

00019bd0 <CUSBSerialCDCDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   19bd0:	e5c01018 	strb	r1, [r0, #24]
   19bd4:	e5c02019 	strb	r2, [r0, #25]
   19bd8:	e5c0301a 	strb	r3, [r0, #26]
   19bdc:	eaffffbe 	b	19adc <CUSBSerialCDCDevice::SetLineCoding()>

00019be0 <CUSBSerialCDCDevice::Configure()>:
   19be0:	e5d03041 	ldrb	r3, [r0, #65]	; 0x41
   19be4:	e92d4010 	push	{r4, lr}
   19be8:	e3530000 	cmp	r3, #0
   19bec:	0a00000e 	beq	19c2c <CUSBSerialCDCDevice::Configure()+0x4c>
   19bf0:	e1a04000 	mov	r4, r0
   19bf4:	eb0012ce 	bl	1e734 <CUSBSerialDevice::Configure()>
   19bf8:	e3500000 	cmp	r0, #0
   19bfc:	0a000002 	beq	19c0c <CUSBSerialCDCDevice::Configure()+0x2c>
   19c00:	e1a00004 	mov	r0, r4
   19c04:	e8bd4010 	pop	{r4, lr}
   19c08:	eaffffb3 	b	19adc <CUSBSerialCDCDevice::SetLineCoding()>
   19c0c:	eb0055a8 	bl	2f2b4 <CLogger::Get()>
   19c10:	e59f1024 	ldr	r1, [pc, #36]	; 19c3c <CUSBSerialCDCDevice::Configure()+0x5c>
   19c14:	e3a02001 	mov	r2, #1
   19c18:	e30d33fc 	movw	r3, #54268	; 0xd3fc
   19c1c:	e3403003 	movt	r3, #3
   19c20:	eb005771 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19c24:	e3a00000 	mov	r0, #0
   19c28:	e8bd8010 	pop	{r4, pc}
   19c2c:	e59f1008 	ldr	r1, [pc, #8]	; 19c3c <CUSBSerialCDCDevice::Configure()+0x5c>
   19c30:	ebffda94 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   19c34:	e3a00000 	mov	r0, #0
   19c38:	e8bd8010 	pop	{r4, pc}
   19c3c:	0003d9fc 	.word	0x0003d9fc

00019c40 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   19c40:	e92d4010 	push	{r4, lr}
   19c44:	e1a04000 	mov	r4, r0
   19c48:	e5900204 	ldr	r0, [r0, #516]	; 0x204
   19c4c:	e59f302c 	ldr	r3, [pc, #44]	; 19c80 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x40>
   19c50:	e3500000 	cmp	r0, #0
   19c54:	e5843000 	str	r3, [r4]
   19c58:	0a000002 	beq	19c68 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x28>
   19c5c:	e5903000 	ldr	r3, [r0]
   19c60:	e5933004 	ldr	r3, [r3, #4]
   19c64:	e12fff33 	blx	r3
   19c68:	e3a03000 	mov	r3, #0
   19c6c:	e1a00004 	mov	r0, r4
   19c70:	e5843204 	str	r3, [r4, #516]	; 0x204
   19c74:	ebffe524 	bl	1310c <CUSBHIDDevice::~CUSBHIDDevice()>
   19c78:	e1a00004 	mov	r0, r4
   19c7c:	e8bd8010 	pop	{r4, pc}
   19c80:	0003da74 	.word	0x0003da74

00019c84 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   19c84:	e92d4010 	push	{r4, lr}
   19c88:	e1a04000 	mov	r4, r0
   19c8c:	e5900204 	ldr	r0, [r0, #516]	; 0x204
   19c90:	e59f3038 	ldr	r3, [pc, #56]	; 19cd0 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x4c>
   19c94:	e3500000 	cmp	r0, #0
   19c98:	e5843000 	str	r3, [r4]
   19c9c:	0a000002 	beq	19cac <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x28>
   19ca0:	e5903000 	ldr	r3, [r0]
   19ca4:	e5933004 	ldr	r3, [r3, #4]
   19ca8:	e12fff33 	blx	r3
   19cac:	e3a03000 	mov	r3, #0
   19cb0:	e1a00004 	mov	r0, r4
   19cb4:	e5843204 	str	r3, [r4, #516]	; 0x204
   19cb8:	ebffe513 	bl	1310c <CUSBHIDDevice::~CUSBHIDDevice()>
   19cbc:	e1a00004 	mov	r0, r4
   19cc0:	e3a01f82 	mov	r1, #520	; 0x208
   19cc4:	eb00740c 	bl	36cfc <operator delete(void*, unsigned int)>
   19cc8:	e1a00004 	mov	r0, r4
   19ccc:	e8bd8010 	pop	{r4, pc}
   19cd0:	0003da74 	.word	0x0003da74

00019cd4 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>:
   19cd4:	e92d4070 	push	{r4, r5, r6, lr}
   19cd8:	e1a05000 	mov	r5, r0
   19cdc:	e3a02000 	mov	r2, #0
   19ce0:	e1a04002 	mov	r4, r2
   19ce4:	ebffe4f2 	bl	130b4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   19ce8:	e59f3038 	ldr	r3, [pc, #56]	; 19d28 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)+0x54>
   19cec:	e3a02f69 	mov	r2, #420	; 0x1a4
   19cf0:	e5853000 	str	r3, [r5]
   19cf4:	e1a01004 	mov	r1, r4
   19cf8:	e2850024 	add	r0, r5, #36	; 0x24
   19cfc:	e5854204 	str	r4, [r5, #516]	; 0x204
   19d00:	eb0071c5 	bl	3641c <memset>
   19d04:	e2853f71 	add	r3, r5, #452	; 0x1c4
   19d08:	e2852e1d 	add	r2, r5, #464	; 0x1d0
   19d0c:	e2833003 	add	r3, r3, #3
   19d10:	e2822001 	add	r2, r2, #1
   19d14:	e5e34001 	strb	r4, [r3, #1]!
   19d18:	e1530002 	cmp	r3, r2
   19d1c:	1afffffc 	bne	19d14 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)+0x40>
   19d20:	e1a00005 	mov	r0, r5
   19d24:	e8bd8070 	pop	{r4, r5, r6, pc}
   19d28:	0003da74 	.word	0x0003da74

00019d2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>:
   19d2c:	e3520000 	cmp	r2, #0
   19d30:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d34:	0a0000c0 	beq	1a03c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x310>
   19d38:	e3a05000 	mov	r5, #0
   19d3c:	e1a06005 	mov	r6, r5
   19d40:	e1a08005 	mov	r8, r5
   19d44:	e1a0a005 	mov	sl, r5
   19d48:	e1a09005 	mov	r9, r5
   19d4c:	e1a04005 	mov	r4, r5
   19d50:	e1a07005 	mov	r7, r5
   19d54:	e1a0e005 	mov	lr, r5
   19d58:	e5d13000 	ldrb	r3, [r1]
   19d5c:	e203c003 	and	ip, r3, #3
   19d60:	e35c0002 	cmp	ip, #2
   19d64:	0a000053 	beq	19eb8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x18c>
   19d68:	e35c0003 	cmp	ip, #3
   19d6c:	0a000049 	beq	19e98 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x16c>
   19d70:	e35c0001 	cmp	ip, #1
   19d74:	12811001 	addne	r1, r1, #1
   19d78:	12422001 	subne	r2, r2, #1
   19d7c:	13a0c000 	movne	ip, #0
   19d80:	02422002 	subeq	r2, r2, #2
   19d84:	05d1c001 	ldrbeq	ip, [r1, #1]
   19d88:	02811002 	addeq	r1, r1, #2
   19d8c:	e20330fc 	and	r3, r3, #252	; 0xfc
   19d90:	e3530074 	cmp	r3, #116	; 0x74
   19d94:	0a000045 	beq	19eb0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x184>
   19d98:	8a000025 	bhi	19e34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x108>
   19d9c:	e3530004 	cmp	r3, #4
   19da0:	0a000034 	beq	19e78 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x14c>
   19da4:	e3530008 	cmp	r3, #8
   19da8:	01a0400c 	moveq	r4, ip
   19dac:	1a00004c 	bne	19ee4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b8>
   19db0:	e35e0001 	cmp	lr, #1
   19db4:	0a000007 	beq	19dd8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xac>
   19db8:	e35e0002 	cmp	lr, #2
   19dbc:	1a00004c 	bne	19ef4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1c8>
   19dc0:	e35300a0 	cmp	r3, #160	; 0xa0
   19dc4:	0a000018 	beq	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   19dc8:	e35300c0 	cmp	r3, #192	; 0xc0
   19dcc:	1a00003d 	bne	19ec8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x19c>
   19dd0:	e3550009 	cmp	r5, #9
   19dd4:	9a000055 	bls	19f30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x204>
   19dd8:	e3a0e001 	mov	lr, #1
   19ddc:	e3520000 	cmp	r2, #0
   19de0:	1affffdc 	bne	19d58 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2c>
   19de4:	e2866007 	add	r6, r6, #7
   19de8:	e1a021a6 	lsr	r2, r6, #3
   19dec:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   19df0:	e5802024 	str	r2, [r0, #36]	; 0x24
   19df4:	e3510001 	cmp	r1, #1
   19df8:	9a000070 	bls	19fc0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x294>
   19dfc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   19e00:	e3530000 	cmp	r3, #0
   19e04:	0a000008 	beq	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   19e08:	e3a03000 	mov	r3, #0
   19e0c:	ea000001 	b	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>
   19e10:	e1510003 	cmp	r1, r3
   19e14:	0a000069 	beq	19fc0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x294>
   19e18:	e5902044 	ldr	r2, [r0, #68]	; 0x44
   19e1c:	e2833001 	add	r3, r3, #1
   19e20:	e2800028 	add	r0, r0, #40	; 0x28
   19e24:	e3520000 	cmp	r2, #0
   19e28:	1afffff8 	bne	19e10 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xe4>
   19e2c:	e3a00000 	mov	r0, #0
   19e30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e34:	e3530084 	cmp	r3, #132	; 0x84
   19e38:	0a000003 	beq	19e4c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x120>
   19e3c:	e3530094 	cmp	r3, #148	; 0x94
   19e40:	01a0a00c 	moveq	sl, ip
   19e44:	01a0c009 	moveq	ip, r9
   19e48:	1a00008f 	bne	1a08c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x360>
   19e4c:	e35e0001 	cmp	lr, #1
   19e50:	0a000031 	beq	19f1c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1f0>
   19e54:	e35e0002 	cmp	lr, #2
   19e58:	01a0900c 	moveq	r9, ip
   19e5c:	0affffde 	beq	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   19e60:	e1a0900c 	mov	r9, ip
   19e64:	e3a0e000 	mov	lr, #0
   19e68:	e3530080 	cmp	r3, #128	; 0x80
   19e6c:	1affffda 	bne	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   19e70:	e026689a 	mla	r6, sl, r8, r6
   19e74:	eaffffd8 	b	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   19e78:	e35e0001 	cmp	lr, #1
   19e7c:	0a000024 	beq	19f14 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1e8>
   19e80:	e24ee002 	sub	lr, lr, #2
   19e84:	e1a0700c 	mov	r7, ip
   19e88:	e16fef1e 	clz	lr, lr
   19e8c:	e1a0e2ae 	lsr	lr, lr, #5
   19e90:	e1a0e08e 	lsl	lr, lr, #1
   19e94:	eaffffd0 	b	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   19e98:	e20330fc 	and	r3, r3, #252	; 0xfc
   19e9c:	e591c001 	ldr	ip, [r1, #1]
   19ea0:	e2422005 	sub	r2, r2, #5
   19ea4:	e2811005 	add	r1, r1, #5
   19ea8:	e3530074 	cmp	r3, #116	; 0x74
   19eac:	1affffb9 	bne	19d98 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x6c>
   19eb0:	e1a0800c 	mov	r8, ip
   19eb4:	eaffffbd 	b	19db0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x84>
   19eb8:	e1d1c0b1 	ldrh	ip, [r1, #1]
   19ebc:	e2422003 	sub	r2, r2, #3
   19ec0:	e2811003 	add	r1, r1, #3
   19ec4:	eaffffb0 	b	19d8c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19ec8:	e3530080 	cmp	r3, #128	; 0x80
   19ecc:	1a000015 	bne	19f28 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1fc>
   19ed0:	e20cc003 	and	ip, ip, #3
   19ed4:	e35c0002 	cmp	ip, #2
   19ed8:	0a00001a 	beq	19f48 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x21c>
   19edc:	e3a0e002 	mov	lr, #2
   19ee0:	eaffffe2 	b	19e70 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x144>
   19ee4:	e35e0001 	cmp	lr, #1
   19ee8:	0a000058 	beq	1a050 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x324>
   19eec:	e35e0002 	cmp	lr, #2
   19ef0:	0affffb4 	beq	19dc8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x9c>
   19ef4:	e35300a0 	cmp	r3, #160	; 0xa0
   19ef8:	035c0001 	cmpeq	ip, #1
   19efc:	1a000074 	bne	1a0d4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x3a8>
   19f00:	e357000d 	cmp	r7, #13
   19f04:	03540004 	cmpeq	r4, #4
   19f08:	03a0e001 	moveq	lr, #1
   19f0c:	13a0e000 	movne	lr, #0
   19f10:	eaffffb1 	b	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   19f14:	e1a0700c 	mov	r7, ip
   19f18:	e1a0c009 	mov	ip, r9
   19f1c:	e1a0900c 	mov	r9, ip
   19f20:	eaffffac 	b	19dd8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xac>
   19f24:	e3a0700d 	mov	r7, #13
   19f28:	e3a0e002 	mov	lr, #2
   19f2c:	eaffffaa 	b	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   19f30:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   19f34:	e2855001 	add	r5, r5, #1
   19f38:	e3a0e001 	mov	lr, #1
   19f3c:	e2833001 	add	r3, r3, #1
   19f40:	e580302c 	str	r3, [r0, #44]	; 0x2c
   19f44:	eaffffa4 	b	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   19f48:	e3570001 	cmp	r7, #1
   19f4c:	0a00000f 	beq	19f90 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x264>
   19f50:	e357000d 	cmp	r7, #13
   19f54:	1affffe0 	bne	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   19f58:	e3540042 	cmp	r4, #66	; 0x42
   19f5c:	0a00002e 	beq	1a01c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2f0>
   19f60:	e3540051 	cmp	r4, #81	; 0x51
   19f64:	0a000024 	beq	19ffc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2d0>
   19f68:	e3540030 	cmp	r4, #48	; 0x30
   19f6c:	1affffda 	bne	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   19f70:	e35a0001 	cmp	sl, #1
   19f74:	1affffac 	bne	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   19f78:	e3550009 	cmp	r5, #9
   19f7c:	93a03028 	movls	r3, #40	; 0x28
   19f80:	90230593 	mlals	r3, r3, r5, r0
   19f84:	95836048 	strls	r6, [r3, #72]	; 0x48
   19f88:	9583804c 	strls	r8, [r3, #76]	; 0x4c
   19f8c:	eaffffd2 	b	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   19f90:	e3540030 	cmp	r4, #48	; 0x30
   19f94:	0a00000e 	beq	19fd4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2a8>
   19f98:	e3540031 	cmp	r4, #49	; 0x31
   19f9c:	1affffce 	bne	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   19fa0:	e35a0001 	cmp	sl, #1
   19fa4:	1affffa0 	bne	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   19fa8:	e3550009 	cmp	r5, #9
   19fac:	93a03028 	movls	r3, #40	; 0x28
   19fb0:	90230593 	mlals	r3, r3, r5, r0
   19fb4:	95836058 	strls	r6, [r3, #88]	; 0x58
   19fb8:	9583805c 	strls	r8, [r3, #92]	; 0x5c
   19fbc:	eaffffc6 	b	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   19fc0:	e16f0f1e 	clz	r0, lr
   19fc4:	e3510000 	cmp	r1, #0
   19fc8:	e1a002a0 	lsr	r0, r0, #5
   19fcc:	03a00000 	moveq	r0, #0
   19fd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fd4:	e35a0001 	cmp	sl, #1
   19fd8:	1affff93 	bne	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   19fdc:	e3550009 	cmp	r5, #9
   19fe0:	8affffbd 	bhi	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   19fe4:	e3a03028 	mov	r3, #40	; 0x28
   19fe8:	e0233395 	mla	r3, r5, r3, r3
   19fec:	e0803003 	add	r3, r0, r3
   19ff0:	e5836028 	str	r6, [r3, #40]	; 0x28
   19ff4:	e583802c 	str	r8, [r3, #44]	; 0x2c
   19ff8:	eaffffb7 	b	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   19ffc:	e35a0001 	cmp	sl, #1
   1a000:	1affff89 	bne	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   1a004:	e3550009 	cmp	r5, #9
   1a008:	93a03028 	movls	r3, #40	; 0x28
   1a00c:	90230593 	mlals	r3, r3, r5, r0
   1a010:	95836040 	strls	r6, [r3, #64]	; 0x40
   1a014:	95838044 	strls	r8, [r3, #68]	; 0x44
   1a018:	eaffffaf 	b	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   1a01c:	e35a0001 	cmp	sl, #1
   1a020:	1affff81 	bne	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   1a024:	e3550009 	cmp	r5, #9
   1a028:	93a03028 	movls	r3, #40	; 0x28
   1a02c:	90230593 	mlals	r3, r3, r5, r0
   1a030:	95836038 	strls	r6, [r3, #56]	; 0x38
   1a034:	9583803c 	strls	r8, [r3, #60]	; 0x3c
   1a038:	eaffffa7 	b	19edc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b0>
   1a03c:	e1a0e002 	mov	lr, r2
   1a040:	eaffff69 	b	19dec <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc0>
   1a044:	e35300c0 	cmp	r3, #192	; 0xc0
   1a048:	03a0e000 	moveq	lr, #0
   1a04c:	0affff62 	beq	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   1a050:	e3530080 	cmp	r3, #128	; 0x80
   1a054:	1affff5f 	bne	19dd8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xac>
   1a058:	e20cc003 	and	ip, ip, #3
   1a05c:	e35c0002 	cmp	ip, #2
   1a060:	0a000001 	beq	1a06c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x340>
   1a064:	e3a0e001 	mov	lr, #1
   1a068:	eaffff80 	b	19e70 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x144>
   1a06c:	e357000d 	cmp	r7, #13
   1a070:	03540054 	cmpeq	r4, #84	; 0x54
   1a074:	1afffffa 	bne	1a064 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x338>
   1a078:	e35a0001 	cmp	sl, #1
   1a07c:	1affff6a 	bne	19e2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   1a080:	e5806030 	str	r6, [r0, #48]	; 0x30
   1a084:	e5808034 	str	r8, [r0, #52]	; 0x34
   1a088:	eafffff5 	b	1a064 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x338>
   1a08c:	e35e0001 	cmp	lr, #1
   1a090:	1affff48 	bne	19db8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x8c>
   1a094:	e35300a0 	cmp	r3, #160	; 0xa0
   1a098:	1affffe9 	bne	1a044 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x318>
   1a09c:	e35c0002 	cmp	ip, #2
   1a0a0:	0357000d 	cmpeq	r7, #13
   1a0a4:	1affff4c 	bne	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   1a0a8:	e3540022 	cmp	r4, #34	; 0x22
   1a0ac:	13a0700d 	movne	r7, #13
   1a0b0:	1affff49 	bne	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   1a0b4:	e5d03028 	ldrb	r3, [r0, #40]	; 0x28
   1a0b8:	e3530000 	cmp	r3, #0
   1a0bc:	1affff98 	bne	19f24 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1f8>
   1a0c0:	e2866008 	add	r6, r6, #8
   1a0c4:	e3a0700d 	mov	r7, #13
   1a0c8:	e3a0e002 	mov	lr, #2
   1a0cc:	e5c09028 	strb	r9, [r0, #40]	; 0x28
   1a0d0:	eaffff41 	b	19ddc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   1a0d4:	e1a0c009 	mov	ip, r9
   1a0d8:	eaffff60 	b	19e60 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x134>

0001a0dc <CUSBTouchScreenDevice::Configure()>:
   1a0dc:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a0e0:	e3a01021 	mov	r1, #33	; 0x21
   1a0e4:	e1a04000 	mov	r4, r0
   1a0e8:	e28db01c 	add	fp, sp, #28
   1a0ec:	e24dd010 	sub	sp, sp, #16
   1a0f0:	ebffd959 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1a0f4:	e2505000 	subs	r5, r0, #0
   1a0f8:	0a000002 	beq	1a108 <CUSBTouchScreenDevice::Configure()+0x2c>
   1a0fc:	e1d560b7 	ldrh	r6, [r5, #7]
   1a100:	e3560000 	cmp	r6, #0
   1a104:	1a000006 	bne	1a124 <CUSBTouchScreenDevice::Configure()+0x48>
   1a108:	e59f1158 	ldr	r1, [pc, #344]	; 1a268 <CUSBTouchScreenDevice::Configure()+0x18c>
   1a10c:	e1a00004 	mov	r0, r4
   1a110:	ebffd95c 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1a114:	e3a05000 	mov	r5, #0
   1a118:	e1a00005 	mov	r0, r5
   1a11c:	e24bd01c 	sub	sp, fp, #28
   1a120:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a124:	e2463001 	sub	r3, r6, #1
   1a128:	e1a00004 	mov	r0, r4
   1a12c:	e383303f 	orr	r3, r3, #63	; 0x3f
   1a130:	e2833040 	add	r3, r3, #64	; 0x40
   1a134:	e3c33007 	bic	r3, r3, #7
   1a138:	e04dd003 	sub	sp, sp, r3
   1a13c:	ebffd93b 	bl	10630 <CUSBFunction::GetHost() const>
   1a140:	e1a08000 	mov	r8, r0
   1a144:	e1a00004 	mov	r0, r4
   1a148:	e28d704f 	add	r7, sp, #79	; 0x4f
   1a14c:	ebffd92c 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1a150:	e5d59006 	ldrb	r9, [r5, #6]
   1a154:	e1a05000 	mov	r5, r0
   1a158:	e1a00004 	mov	r0, r4
   1a15c:	ebffd992 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   1a160:	e3c7703f 	bic	r7, r7, #63	; 0x3f
   1a164:	e1a02009 	mov	r2, r9
   1a168:	e3a03081 	mov	r3, #129	; 0x81
   1a16c:	e58d000c 	str	r0, [sp, #12]
   1a170:	e1a01005 	mov	r1, r5
   1a174:	e58d3008 	str	r3, [sp, #8]
   1a178:	e1a00008 	mov	r0, r8
   1a17c:	e3a03000 	mov	r3, #0
   1a180:	e58d6004 	str	r6, [sp, #4]
   1a184:	e58d7000 	str	r7, [sp]
   1a188:	ebffe65c 	bl	13b00 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1a18c:	e1a02000 	mov	r2, r0
   1a190:	e1500006 	cmp	r0, r6
   1a194:	0a000006 	beq	1a1b4 <CUSBTouchScreenDevice::Configure()+0xd8>
   1a198:	eb005445 	bl	2f2b4 <CLogger::Get()>
   1a19c:	e59f10c4 	ldr	r1, [pc, #196]	; 1a268 <CUSBTouchScreenDevice::Configure()+0x18c>
   1a1a0:	e3a02001 	mov	r2, #1
   1a1a4:	e30b3b30 	movw	r3, #47920	; 0xbb30
   1a1a8:	e3403003 	movt	r3, #3
   1a1ac:	eb00560e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a1b0:	eaffffd7 	b	1a114 <CUSBTouchScreenDevice::Configure()+0x38>
   1a1b4:	e1a01007 	mov	r1, r7
   1a1b8:	e1a00004 	mov	r0, r4
   1a1bc:	ebfffeda 	bl	19d2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>
   1a1c0:	e3500000 	cmp	r0, #0
   1a1c4:	0a000013 	beq	1a218 <CUSBTouchScreenDevice::Configure()+0x13c>
   1a1c8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   1a1cc:	e1a00004 	mov	r0, r4
   1a1d0:	ebffe3f8 	bl	131b8 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   1a1d4:	e3500000 	cmp	r0, #0
   1a1d8:	0a000015 	beq	1a234 <CUSBTouchScreenDevice::Configure()+0x158>
   1a1dc:	e1a00004 	mov	r0, r4
   1a1e0:	ebffe510 	bl	13628 <CUSBHIDDevice::StartRequest()>
   1a1e4:	e2505000 	subs	r5, r0, #0
   1a1e8:	0affffc9 	beq	1a114 <CUSBTouchScreenDevice::Configure()+0x38>
   1a1ec:	e5946204 	ldr	r6, [r4, #516]	; 0x204
   1a1f0:	e3560000 	cmp	r6, #0
   1a1f4:	1a000015 	bne	1a250 <CUSBTouchScreenDevice::Configure()+0x174>
   1a1f8:	e3a00030 	mov	r0, #48	; 0x30
   1a1fc:	eb0072a6 	bl	36c9c <operator new(unsigned int)>
   1a200:	e1a02006 	mov	r2, r6
   1a204:	e1a01006 	mov	r1, r6
   1a208:	e1a06000 	mov	r6, r0
   1a20c:	eb00147a 	bl	1f3fc <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>
   1a210:	e5846204 	str	r6, [r4, #516]	; 0x204
   1a214:	eaffffbf 	b	1a118 <CUSBTouchScreenDevice::Configure()+0x3c>
   1a218:	eb005425 	bl	2f2b4 <CLogger::Get()>
   1a21c:	e59f1044 	ldr	r1, [pc, #68]	; 1a268 <CUSBTouchScreenDevice::Configure()+0x18c>
   1a220:	e3a02001 	mov	r2, #1
   1a224:	e30d3a04 	movw	r3, #55812	; 0xda04
   1a228:	e3403003 	movt	r3, #3
   1a22c:	eb0055ee 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a230:	eaffffb7 	b	1a114 <CUSBTouchScreenDevice::Configure()+0x38>
   1a234:	eb00541e 	bl	2f2b4 <CLogger::Get()>
   1a238:	e59f1028 	ldr	r1, [pc, #40]	; 1a268 <CUSBTouchScreenDevice::Configure()+0x18c>
   1a23c:	e3a02001 	mov	r2, #1
   1a240:	e30c3790 	movw	r3, #51088	; 0xc790
   1a244:	e3403003 	movt	r3, #3
   1a248:	eb0055e7 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a24c:	eaffffb0 	b	1a114 <CUSBTouchScreenDevice::Configure()+0x38>
   1a250:	e30d1a24 	movw	r1, #55844	; 0xda24
   1a254:	e3401003 	movt	r1, #3
   1a258:	e30b02bc 	movw	r0, #45756	; 0xb2bc
   1a25c:	e3400003 	movt	r0, #3
   1a260:	e3a0207a 	mov	r2, #122	; 0x7a
   1a264:	eb004995 	bl	2c8c0 <assertion_failed>
   1a268:	0003daa4 	.word	0x0003daa4

0001a26c <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>:
   1a26c:	e3500000 	cmp	r0, #0
   1a270:	e92d4010 	push	{r4, lr}
   1a274:	0a000019 	beq	1a2e0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x74>
   1a278:	e5913004 	ldr	r3, [r1, #4]
   1a27c:	e3530020 	cmp	r3, #32
   1a280:	8a00001c 	bhi	1a2f8 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x8c>
   1a284:	e3530000 	cmp	r3, #0
   1a288:	0a00000e 	beq	1a2c8 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x5c>
   1a28c:	e5911000 	ldr	r1, [r1]
   1a290:	e3530018 	cmp	r3, #24
   1a294:	e79021a1 	ldr	r2, [r0, r1, lsr #3]
   1a298:	e08001a1 	add	r0, r0, r1, lsr #3
   1a29c:	e2011007 	and	r1, r1, #7
   1a2a0:	9a00000a 	bls	1a2d0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x64>
   1a2a4:	e590c003 	ldr	ip, [r0, #3]
   1a2a8:	e2433018 	sub	r3, r3, #24
   1a2ac:	e1a00132 	lsr	r0, r2, r1
   1a2b0:	e3e0e000 	mvn	lr, #0
   1a2b4:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   1a2b8:	e1a0213c 	lsr	r2, ip, r1
   1a2bc:	e1c2331e 	bic	r3, r2, lr, lsl r3
   1a2c0:	e1800c03 	orr	r0, r0, r3, lsl #24
   1a2c4:	e8bd8010 	pop	{r4, pc}
   1a2c8:	e1a00002 	mov	r0, r2
   1a2cc:	e8bd8010 	pop	{r4, pc}
   1a2d0:	e1a00132 	lsr	r0, r2, r1
   1a2d4:	e3e02000 	mvn	r2, #0
   1a2d8:	e1c00312 	bic	r0, r0, r2, lsl r3
   1a2dc:	e8bd8010 	pop	{r4, pc}
   1a2e0:	e30d1a24 	movw	r1, #55844	; 0xda24
   1a2e4:	e3401003 	movt	r1, #3
   1a2e8:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1a2ec:	e3400003 	movt	r0, #3
   1a2f0:	e30021b7 	movw	r2, #439	; 0x1b7
   1a2f4:	eb004971 	bl	2c8c0 <assertion_failed>
   1a2f8:	e30d1a24 	movw	r1, #55844	; 0xda24
   1a2fc:	e3401003 	movt	r1, #3
   1a300:	e30d0a38 	movw	r0, #55864	; 0xda38
   1a304:	e3400003 	movt	r0, #3
   1a308:	e30021bb 	movw	r2, #443	; 0x1bb
   1a30c:	eb00496b 	bl	2c8c0 <assertion_failed>

0001a310 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1a310:	e5903204 	ldr	r3, [r0, #516]	; 0x204
   1a314:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a318:	e3530000 	cmp	r3, #0
   1a31c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1a320:	0a000082 	beq	1a530 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x220>
   1a324:	e1a05001 	mov	r5, r1
   1a328:	e3510000 	cmp	r1, #0
   1a32c:	0a000068 	beq	1a4d4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c4>
   1a330:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a334:	e1a06000 	mov	r6, r0
   1a338:	e1530002 	cmp	r3, r2
   1a33c:	1a000064 	bne	1a4d4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c4>
   1a340:	e5d03028 	ldrb	r3, [r0, #40]	; 0x28
   1a344:	e3530000 	cmp	r3, #0
   1a348:	0a000002 	beq	1a358 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   1a34c:	e5d12000 	ldrb	r2, [r1]
   1a350:	e1520003 	cmp	r2, r3
   1a354:	1a00005e 	bne	1a4d4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c4>
   1a358:	e3a02001 	mov	r2, #1
   1a35c:	e2861030 	add	r1, r6, #48	; 0x30
   1a360:	e1a00005 	mov	r0, r5
   1a364:	ebffffc0 	bl	1a26c <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a368:	e1a09000 	mov	r9, r0
   1a36c:	e350000a 	cmp	r0, #10
   1a370:	8a00009a 	bhi	1a5e0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2d0>
   1a374:	e3500000 	cmp	r0, #0
   1a378:	0a00004f 	beq	1a4bc <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1ac>
   1a37c:	e2864038 	add	r4, r6, #56	; 0x38
   1a380:	e3a08028 	mov	r8, #40	; 0x28
   1a384:	e28d701c 	add	r7, sp, #28
   1a388:	e3e0b000 	mvn	fp, #0
   1a38c:	e0284098 	mla	r8, r8, r0, r4
   1a390:	ea000004 	b	1a3a8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x98>
   1a394:	e5c7b000 	strb	fp, [r7]
   1a398:	e2844028 	add	r4, r4, #40	; 0x28
   1a39c:	e2877001 	add	r7, r7, #1
   1a3a0:	e1540008 	cmp	r4, r8
   1a3a4:	0a000044 	beq	1a4bc <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1ac>
   1a3a8:	e3a02001 	mov	r2, #1
   1a3ac:	e1a01004 	mov	r1, r4
   1a3b0:	e1a00005 	mov	r0, r5
   1a3b4:	ebffffac 	bl	1a26c <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a3b8:	e3500000 	cmp	r0, #0
   1a3bc:	0afffff4 	beq	1a394 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x84>
   1a3c0:	e3a02001 	mov	r2, #1
   1a3c4:	e2841010 	add	r1, r4, #16
   1a3c8:	e1a00005 	mov	r0, r5
   1a3cc:	ebffffa6 	bl	1a26c <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a3d0:	e3500000 	cmp	r0, #0
   1a3d4:	0affffee 	beq	1a394 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x84>
   1a3d8:	e3a02000 	mov	r2, #0
   1a3dc:	e2841008 	add	r1, r4, #8
   1a3e0:	e1a00005 	mov	r0, r5
   1a3e4:	ebffffa0 	bl	1a26c <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a3e8:	e3a02000 	mov	r2, #0
   1a3ec:	e6efa070 	uxtb	sl, r0
   1a3f0:	e2841018 	add	r1, r4, #24
   1a3f4:	e1a00005 	mov	r0, r5
   1a3f8:	e5c7a000 	strb	sl, [r7]
   1a3fc:	ebffff9a 	bl	1a26c <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a400:	e3a02000 	mov	r2, #0
   1a404:	e58d000c 	str	r0, [sp, #12]
   1a408:	e2841020 	add	r1, r4, #32
   1a40c:	e1a00005 	mov	r0, r5
   1a410:	ebffff95 	bl	1a26c <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a414:	e58d0010 	str	r0, [sp, #16]
   1a418:	e596002c 	ldr	r0, [r6, #44]	; 0x2c
   1a41c:	e286cf71 	add	ip, r6, #452	; 0x1c4
   1a420:	e28cc003 	add	ip, ip, #3
   1a424:	e3500000 	cmp	r0, #0
   1a428:	13a02000 	movne	r2, #0
   1a42c:	11a0300c 	movne	r3, ip
   1a430:	0a00000a 	beq	1a460 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x150>
   1a434:	e5f31001 	ldrb	r1, [r3, #1]!
   1a438:	e3510000 	cmp	r1, #0
   1a43c:	0a000002 	beq	1a44c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x13c>
   1a440:	e5d3100a 	ldrb	r1, [r3, #10]
   1a444:	e151000a 	cmp	r1, sl
   1a448:	0a000048 	beq	1a570 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x260>
   1a44c:	e2822001 	add	r2, r2, #1
   1a450:	e1520000 	cmp	r2, r0
   1a454:	1afffff6 	bne	1a434 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   1a458:	e3500001 	cmp	r0, #1
   1a45c:	0a000065 	beq	1a5f8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2e8>
   1a460:	e2400001 	sub	r0, r0, #1
   1a464:	e3a02000 	mov	r2, #0
   1a468:	ea000002 	b	1a478 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x168>
   1a46c:	e2822001 	add	r2, r2, #1
   1a470:	e1520000 	cmp	r2, r0
   1a474:	2a000002 	bcs	1a484 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x174>
   1a478:	e5fc3001 	ldrb	r3, [ip, #1]!
   1a47c:	e3530000 	cmp	r3, #0
   1a480:	1afffff9 	bne	1a46c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
   1a484:	e59d3010 	ldr	r3, [sp, #16]
   1a488:	e3a01000 	mov	r1, #0
   1a48c:	e58d3000 	str	r3, [sp]
   1a490:	e59d300c 	ldr	r3, [sp, #12]
   1a494:	e5960204 	ldr	r0, [r6, #516]	; 0x204
   1a498:	e58d2014 	str	r2, [sp, #20]
   1a49c:	eb001448 	bl	1f5c4 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   1a4a0:	e59d2014 	ldr	r2, [sp, #20]
   1a4a4:	e0863002 	add	r3, r6, r2
   1a4a8:	e5c3a1d2 	strb	sl, [r3, #466]	; 0x1d2
   1a4ac:	e1a0a082 	lsl	sl, r2, #1
   1a4b0:	e3a02001 	mov	r2, #1
   1a4b4:	e5c321c8 	strb	r2, [r3, #456]	; 0x1c8
   1a4b8:	ea000040 	b	1a5c0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2b0>
   1a4bc:	e596c02c 	ldr	ip, [r6, #44]	; 0x2c
   1a4c0:	e35c0000 	cmp	ip, #0
   1a4c4:	12865f71 	addne	r5, r6, #452	; 0x1c4
   1a4c8:	13a04000 	movne	r4, #0
   1a4cc:	12855003 	addne	r5, r5, #3
   1a4d0:	1a000012 	bne	1a520 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x210>
   1a4d4:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1a4d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4dc:	e3590000 	cmp	r9, #0
   1a4e0:	0a000018 	beq	1a548 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x238>
   1a4e4:	e5d5200a 	ldrb	r2, [r5, #10]
   1a4e8:	e28d101c 	add	r1, sp, #28
   1a4ec:	e3a03000 	mov	r3, #0
   1a4f0:	ea000002 	b	1a500 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1f0>
   1a4f4:	e2833001 	add	r3, r3, #1
   1a4f8:	e1590003 	cmp	r9, r3
   1a4fc:	0a000011 	beq	1a548 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x238>
   1a500:	e4d10001 	ldrb	r0, [r1], #1
   1a504:	e1520000 	cmp	r2, r0
   1a508:	1afffff9 	bne	1a4f4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1e4>
   1a50c:	e1590003 	cmp	r9, r3
   1a510:	0a00000c 	beq	1a548 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x238>
   1a514:	e2844001 	add	r4, r4, #1
   1a518:	e154000c 	cmp	r4, ip
   1a51c:	2affffec 	bcs	1a4d4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c4>
   1a520:	e5f53001 	ldrb	r3, [r5, #1]!
   1a524:	e3530000 	cmp	r3, #0
   1a528:	0afffff9 	beq	1a514 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x204>
   1a52c:	eaffffea 	b	1a4dc <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1cc>
   1a530:	e30d1a24 	movw	r1, #55844	; 0xda24
   1a534:	e3401003 	movt	r1, #3
   1a538:	e30b0460 	movw	r0, #46176	; 0xb460
   1a53c:	e3400003 	movt	r0, #3
   1a540:	e3a02083 	mov	r2, #131	; 0x83
   1a544:	eb0048dd 	bl	2c8c0 <assertion_failed>
   1a548:	e3a07000 	mov	r7, #0
   1a54c:	e58d7000 	str	r7, [sp]
   1a550:	e1a03007 	mov	r3, r7
   1a554:	e1a02004 	mov	r2, r4
   1a558:	e5960204 	ldr	r0, [r6, #516]	; 0x204
   1a55c:	e3a01001 	mov	r1, #1
   1a560:	eb001417 	bl	1f5c4 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   1a564:	e596c02c 	ldr	ip, [r6, #44]	; 0x2c
   1a568:	e5c57000 	strb	r7, [r5]
   1a56c:	eaffffe8 	b	1a514 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x204>
   1a570:	e1520000 	cmp	r2, r0
   1a574:	0affffb7 	beq	1a458 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x148>
   1a578:	e1a0a082 	lsl	sl, r2, #1
   1a57c:	e59d000c 	ldr	r0, [sp, #12]
   1a580:	e086300a 	add	r3, r6, sl
   1a584:	e2831f77 	add	r1, r3, #476	; 0x1dc
   1a588:	e1d110b0 	ldrh	r1, [r1]
   1a58c:	e1500001 	cmp	r0, r1
   1a590:	1a000004 	bne	1a5a8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x298>
   1a594:	e2833e1f 	add	r3, r3, #496	; 0x1f0
   1a598:	e59d1010 	ldr	r1, [sp, #16]
   1a59c:	e1d330b0 	ldrh	r3, [r3]
   1a5a0:	e1510003 	cmp	r1, r3
   1a5a4:	0a000005 	beq	1a5c0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2b0>
   1a5a8:	e59d3010 	ldr	r3, [sp, #16]
   1a5ac:	e3a01002 	mov	r1, #2
   1a5b0:	e58d3000 	str	r3, [sp]
   1a5b4:	e59d300c 	ldr	r3, [sp, #12]
   1a5b8:	e5960204 	ldr	r0, [r6, #516]	; 0x204
   1a5bc:	eb001400 	bl	1f5c4 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   1a5c0:	e086a00a 	add	sl, r6, sl
   1a5c4:	e59d200c 	ldr	r2, [sp, #12]
   1a5c8:	e28a3f77 	add	r3, sl, #476	; 0x1dc
   1a5cc:	e28aae1f 	add	sl, sl, #496	; 0x1f0
   1a5d0:	e1c320b0 	strh	r2, [r3]
   1a5d4:	e59d3010 	ldr	r3, [sp, #16]
   1a5d8:	e1ca30b0 	strh	r3, [sl]
   1a5dc:	eaffff6d 	b	1a398 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x88>
   1a5e0:	e30d1a24 	movw	r1, #55844	; 0xda24
   1a5e4:	e3401003 	movt	r1, #3
   1a5e8:	e30d0a48 	movw	r0, #55880	; 0xda48
   1a5ec:	e3400003 	movt	r0, #3
   1a5f0:	e3a02093 	mov	r2, #147	; 0x93
   1a5f4:	eb0048b1 	bl	2c8c0 <assertion_failed>
   1a5f8:	e3a02000 	mov	r2, #0
   1a5fc:	eaffffa0 	b	1a484 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x174>

0001a600 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
   1a600:	e3a02000 	mov	r2, #0
   1a604:	e5801004 	str	r1, [r0, #4]
   1a608:	e5c02000 	strb	r2, [r0]
   1a60c:	e12fff1e 	bx	lr

0001a610 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
   1a610:	e3a0c001 	mov	ip, #1
   1a614:	e5801004 	str	r1, [r0, #4]
   1a618:	e5c0c000 	strb	ip, [r0]
   1a61c:	e5802008 	str	r2, [r0, #8]
   1a620:	e12fff1e 	bx	lr

0001a624 <CDWHCIRegister::~CDWHCIRegister()>:
   1a624:	e12fff1e 	bx	lr

0001a628 <CDWHCIRegister::Read()>:
   1a628:	e5901004 	ldr	r1, [r0, #4]
   1a62c:	e1a03000 	mov	r3, r0
   1a630:	e3a02001 	mov	r2, #1
   1a634:	e5910000 	ldr	r0, [r1]
   1a638:	e5830008 	str	r0, [r3, #8]
   1a63c:	e5c32000 	strb	r2, [r3]
   1a640:	e12fff1e 	bx	lr

0001a644 <CDWHCIRegister::Write()>:
   1a644:	e5d03000 	ldrb	r3, [r0]
   1a648:	e3530000 	cmp	r3, #0
   1a64c:	0a000003 	beq	1a660 <CDWHCIRegister::Write()+0x1c>
   1a650:	e5903004 	ldr	r3, [r0, #4]
   1a654:	e5902008 	ldr	r2, [r0, #8]
   1a658:	e5832000 	str	r2, [r3]
   1a65c:	e12fff1e 	bx	lr
   1a660:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a664:	e3401003 	movt	r1, #3
   1a668:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1a66c:	e3400003 	movt	r0, #3
   1a670:	e3a02035 	mov	r2, #53	; 0x35
   1a674:	e92d4010 	push	{r4, lr}
   1a678:	eb004890 	bl	2c8c0 <assertion_failed>

0001a67c <CDWHCIRegister::Get() const>:
   1a67c:	e5d03000 	ldrb	r3, [r0]
   1a680:	e3530000 	cmp	r3, #0
   1a684:	0a000001 	beq	1a690 <CDWHCIRegister::Get() const+0x14>
   1a688:	e5900008 	ldr	r0, [r0, #8]
   1a68c:	e12fff1e 	bx	lr
   1a690:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a694:	e3401003 	movt	r1, #3
   1a698:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1a69c:	e3400003 	movt	r0, #3
   1a6a0:	e3a0203b 	mov	r2, #59	; 0x3b
   1a6a4:	e92d4010 	push	{r4, lr}
   1a6a8:	eb004884 	bl	2c8c0 <assertion_failed>

0001a6ac <CDWHCIRegister::Set(unsigned int)>:
   1a6ac:	e3a03001 	mov	r3, #1
   1a6b0:	e5801008 	str	r1, [r0, #8]
   1a6b4:	e5c03000 	strb	r3, [r0]
   1a6b8:	e12fff1e 	bx	lr

0001a6bc <CDWHCIRegister::IsSet(unsigned int) const>:
   1a6bc:	e5d03000 	ldrb	r3, [r0]
   1a6c0:	e3530000 	cmp	r3, #0
   1a6c4:	0a000004 	beq	1a6dc <CDWHCIRegister::IsSet(unsigned int) const+0x20>
   1a6c8:	e5903008 	ldr	r3, [r0, #8]
   1a6cc:	e1110003 	tst	r1, r3
   1a6d0:	13a00001 	movne	r0, #1
   1a6d4:	03a00000 	moveq	r0, #0
   1a6d8:	e12fff1e 	bx	lr
   1a6dc:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a6e0:	e3401003 	movt	r1, #3
   1a6e4:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1a6e8:	e3400003 	movt	r0, #3
   1a6ec:	e3a02047 	mov	r2, #71	; 0x47
   1a6f0:	e92d4010 	push	{r4, lr}
   1a6f4:	eb004871 	bl	2c8c0 <assertion_failed>

0001a6f8 <CDWHCIRegister::And(unsigned int)>:
   1a6f8:	e5d03000 	ldrb	r3, [r0]
   1a6fc:	e3530000 	cmp	r3, #0
   1a700:	0a000003 	beq	1a714 <CDWHCIRegister::And(unsigned int)+0x1c>
   1a704:	e5903008 	ldr	r3, [r0, #8]
   1a708:	e0033001 	and	r3, r3, r1
   1a70c:	e5803008 	str	r3, [r0, #8]
   1a710:	e12fff1e 	bx	lr
   1a714:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a718:	e3401003 	movt	r1, #3
   1a71c:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1a720:	e3400003 	movt	r0, #3
   1a724:	e3a0204d 	mov	r2, #77	; 0x4d
   1a728:	e92d4010 	push	{r4, lr}
   1a72c:	eb004863 	bl	2c8c0 <assertion_failed>

0001a730 <CDWHCIRegister::Or(unsigned int)>:
   1a730:	e5d03000 	ldrb	r3, [r0]
   1a734:	e3530000 	cmp	r3, #0
   1a738:	0a000003 	beq	1a74c <CDWHCIRegister::Or(unsigned int)+0x1c>
   1a73c:	e5903008 	ldr	r3, [r0, #8]
   1a740:	e1833001 	orr	r3, r3, r1
   1a744:	e5803008 	str	r3, [r0, #8]
   1a748:	e12fff1e 	bx	lr
   1a74c:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a750:	e3401003 	movt	r1, #3
   1a754:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1a758:	e3400003 	movt	r0, #3
   1a75c:	e3a02053 	mov	r2, #83	; 0x53
   1a760:	e92d4010 	push	{r4, lr}
   1a764:	eb004855 	bl	2c8c0 <assertion_failed>

0001a768 <CDWHCIRegister::ClearBit(unsigned int)>:
   1a768:	e5d03000 	ldrb	r3, [r0]
   1a76c:	e92d4010 	push	{r4, lr}
   1a770:	e3530000 	cmp	r3, #0
   1a774:	0a000006 	beq	1a794 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
   1a778:	e351001f 	cmp	r1, #31
   1a77c:	8a00000a 	bhi	1a7ac <CDWHCIRegister::ClearBit(unsigned int)+0x44>
   1a780:	e5903008 	ldr	r3, [r0, #8]
   1a784:	e3a02001 	mov	r2, #1
   1a788:	e1c33112 	bic	r3, r3, r2, lsl r1
   1a78c:	e5803008 	str	r3, [r0, #8]
   1a790:	e8bd8010 	pop	{r4, pc}
   1a794:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a798:	e3401003 	movt	r1, #3
   1a79c:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1a7a0:	e3400003 	movt	r0, #3
   1a7a4:	e3a02059 	mov	r2, #89	; 0x59
   1a7a8:	eb004844 	bl	2c8c0 <assertion_failed>
   1a7ac:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a7b0:	e3401003 	movt	r1, #3
   1a7b4:	e30d0acc 	movw	r0, #56012	; 0xdacc
   1a7b8:	e3400003 	movt	r0, #3
   1a7bc:	e3a0205a 	mov	r2, #90	; 0x5a
   1a7c0:	eb00483e 	bl	2c8c0 <assertion_failed>

0001a7c4 <CDWHCIRegister::SetBit(unsigned int)>:
   1a7c4:	e5d03000 	ldrb	r3, [r0]
   1a7c8:	e92d4010 	push	{r4, lr}
   1a7cc:	e3530000 	cmp	r3, #0
   1a7d0:	0a000006 	beq	1a7f0 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
   1a7d4:	e351001f 	cmp	r1, #31
   1a7d8:	8a00000a 	bhi	1a808 <CDWHCIRegister::SetBit(unsigned int)+0x44>
   1a7dc:	e5903008 	ldr	r3, [r0, #8]
   1a7e0:	e3a02001 	mov	r2, #1
   1a7e4:	e1833112 	orr	r3, r3, r2, lsl r1
   1a7e8:	e5803008 	str	r3, [r0, #8]
   1a7ec:	e8bd8010 	pop	{r4, pc}
   1a7f0:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a7f4:	e3401003 	movt	r1, #3
   1a7f8:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1a7fc:	e3400003 	movt	r0, #3
   1a800:	e3a02060 	mov	r2, #96	; 0x60
   1a804:	eb00482d 	bl	2c8c0 <assertion_failed>
   1a808:	e30d1aac 	movw	r1, #55980	; 0xdaac
   1a80c:	e3401003 	movt	r1, #3
   1a810:	e30d0acc 	movw	r0, #56012	; 0xdacc
   1a814:	e3400003 	movt	r0, #3
   1a818:	e3a02061 	mov	r2, #97	; 0x61
   1a81c:	eb004827 	bl	2c8c0 <assertion_failed>

0001a820 <CDWHCIRegister::ClearAll()>:
   1a820:	e3a02000 	mov	r2, #0
   1a824:	e3a03001 	mov	r3, #1
   1a828:	e5802008 	str	r2, [r0, #8]
   1a82c:	e5c03000 	strb	r3, [r0]
   1a830:	e12fff1e 	bx	lr

0001a834 <CDWHCIRegister::SetAll()>:
   1a834:	e3a02001 	mov	r2, #1
   1a838:	e3e03000 	mvn	r3, #0
   1a83c:	e5c02000 	strb	r2, [r0]
   1a840:	e5803008 	str	r3, [r0, #8]
   1a844:	e12fff1e 	bx	lr

0001a848 <CDWHCIRegister::Dump() const>:
   1a848:	e92d4010 	push	{r4, lr}
   1a84c:	e1a04000 	mov	r4, r0
   1a850:	e5d03000 	ldrb	r3, [r0]
   1a854:	e24dd008 	sub	sp, sp, #8
   1a858:	e3530000 	cmp	r3, #0
   1a85c:	0a00000d 	beq	1a898 <CDWHCIRegister::Dump() const+0x50>
   1a860:	eb005293 	bl	2f2b4 <CLogger::Get()>
   1a864:	e594c004 	ldr	ip, [r4, #4]
   1a868:	e5943008 	ldr	r3, [r4, #8]
   1a86c:	e3a02004 	mov	r2, #4
   1a870:	e58d3004 	str	r3, [sp, #4]
   1a874:	e30d1b04 	movw	r1, #56068	; 0xdb04
   1a878:	e3401003 	movt	r1, #3
   1a87c:	e7ebc05c 	ubfx	ip, ip, #0, #12
   1a880:	e30d3ae8 	movw	r3, #56040	; 0xdae8
   1a884:	e3403003 	movt	r3, #3
   1a888:	e58dc000 	str	ip, [sp]
   1a88c:	eb005456 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a890:	e28dd008 	add	sp, sp, #8
   1a894:	e8bd8010 	pop	{r4, pc}
   1a898:	eb005285 	bl	2f2b4 <CLogger::Get()>
   1a89c:	e594c004 	ldr	ip, [r4, #4]
   1a8a0:	e3a02004 	mov	r2, #4
   1a8a4:	e30d3b0c 	movw	r3, #56076	; 0xdb0c
   1a8a8:	e3403003 	movt	r3, #3
   1a8ac:	e30d1b04 	movw	r1, #56068	; 0xdb04
   1a8b0:	e3401003 	movt	r1, #3
   1a8b4:	e7ebc05c 	ubfx	ip, ip, #0, #12
   1a8b8:	e58dc000 	str	ip, [sp]
   1a8bc:	eb00544a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a8c0:	e28dd008 	add	sp, sp, #8
   1a8c4:	e8bd8010 	pop	{r4, pc}

0001a8c8 <CLAN7800Device::GetMACAddress() const>:
   1a8c8:	e2800020 	add	r0, r0, #32
   1a8cc:	e12fff1e 	bx	lr

0001a8d0 <CLAN7800Device::~CLAN7800Device()>:
   1a8d0:	e92d4070 	push	{r4, r5, r6, lr}
   1a8d4:	e1a04000 	mov	r4, r0
   1a8d8:	e59f3070 	ldr	r3, [pc, #112]	; 1a950 <CLAN7800Device::~CLAN7800Device()+0x80>
   1a8dc:	e590501c 	ldr	r5, [r0, #28]
   1a8e0:	e2832048 	add	r2, r3, #72	; 0x48
   1a8e4:	e5803000 	str	r3, [r0]
   1a8e8:	e3550000 	cmp	r5, #0
   1a8ec:	e5802014 	str	r2, [r0, #20]
   1a8f0:	0a000004 	beq	1a908 <CLAN7800Device::~CLAN7800Device()+0x38>
   1a8f4:	e1a00005 	mov	r0, r5
   1a8f8:	ebffd5c0 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1a8fc:	e3a01014 	mov	r1, #20
   1a900:	e1a00005 	mov	r0, r5
   1a904:	eb0070fc 	bl	36cfc <operator delete(void*, unsigned int)>
   1a908:	e5945018 	ldr	r5, [r4, #24]
   1a90c:	e3a03000 	mov	r3, #0
   1a910:	e584301c 	str	r3, [r4, #28]
   1a914:	e1550003 	cmp	r5, r3
   1a918:	0a000004 	beq	1a930 <CLAN7800Device::~CLAN7800Device()+0x60>
   1a91c:	e1a00005 	mov	r0, r5
   1a920:	ebffd5b6 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1a924:	e3a01014 	mov	r1, #20
   1a928:	e1a00005 	mov	r0, r5
   1a92c:	eb0070f2 	bl	36cfc <operator delete(void*, unsigned int)>
   1a930:	e3a03000 	mov	r3, #0
   1a934:	e2840020 	add	r0, r4, #32
   1a938:	e5843018 	str	r3, [r4, #24]
   1a93c:	eb006fd2 	bl	3688c <CMACAddress::~CMACAddress()>
   1a940:	e1a00004 	mov	r0, r4
   1a944:	ebffd617 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   1a948:	e1a00004 	mov	r0, r4
   1a94c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a950:	0003dce0 	.word	0x0003dce0

0001a954 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   1a954:	e2400014 	sub	r0, r0, #20
   1a958:	eaffffdc 	b	1a8d0 <CLAN7800Device::~CLAN7800Device()>

0001a95c <CLAN7800Device::~CLAN7800Device()>:
   1a95c:	e92d4010 	push	{r4, lr}
   1a960:	e1a04000 	mov	r4, r0
   1a964:	ebffffd9 	bl	1a8d0 <CLAN7800Device::~CLAN7800Device()>
   1a968:	e1a00004 	mov	r0, r4
   1a96c:	e3a01028 	mov	r1, #40	; 0x28
   1a970:	eb0070e1 	bl	36cfc <operator delete(void*, unsigned int)>
   1a974:	e1a00004 	mov	r0, r4
   1a978:	e8bd8010 	pop	{r4, pc}

0001a97c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   1a97c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a980:	e1a04001 	mov	r4, r1
   1a984:	e5901018 	ldr	r1, [r0, #24]
   1a988:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   1a98c:	e3510000 	cmp	r1, #0
   1a990:	0a000033 	beq	1aa64 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   1a994:	e3540000 	cmp	r4, #0
   1a998:	0a000037 	beq	1aa7c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x100>
   1a99c:	e1a05000 	mov	r5, r0
   1a9a0:	e3a03d19 	mov	r3, #1600	; 0x640
   1a9a4:	e3a07000 	mov	r7, #0
   1a9a8:	e1a06002 	mov	r6, r2
   1a9ac:	e28d0008 	add	r0, sp, #8
   1a9b0:	e1a02004 	mov	r2, r4
   1a9b4:	e58d7000 	str	r7, [sp]
   1a9b8:	ebffee8a 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1a9bc:	e1a00005 	mov	r0, r5
   1a9c0:	ebffd71a 	bl	10630 <CUSBFunction::GetHost() const>
   1a9c4:	e5903000 	ldr	r3, [r0]
   1a9c8:	e1a02007 	mov	r2, r7
   1a9cc:	e28d1008 	add	r1, sp, #8
   1a9d0:	e5933010 	ldr	r3, [r3, #16]
   1a9d4:	e12fff33 	blx	r3
   1a9d8:	e2505000 	subs	r5, r0, #0
   1a9dc:	1a000005 	bne	1a9f8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x7c>
   1a9e0:	e3a05000 	mov	r5, #0
   1a9e4:	e28d0008 	add	r0, sp, #8
   1a9e8:	ebffeea2 	bl	16478 <CUSBRequest::~CUSBRequest()>
   1a9ec:	e1a00005 	mov	r0, r5
   1a9f0:	e28dd07c 	add	sp, sp, #124	; 0x7c
   1a9f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a9f8:	e28d0008 	add	r0, sp, #8
   1a9fc:	ebffeeb0 	bl	164c4 <CUSBRequest::GetResultLength() const>
   1aa00:	e3500009 	cmp	r0, #9
   1aa04:	9afffff5 	bls	1a9e0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>
   1aa08:	e5947000 	ldr	r7, [r4]
   1aa0c:	e3170501 	tst	r7, #4194304	; 0x400000
   1aa10:	1a00001f 	bne	1aa94 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x118>
   1aa14:	e7ed7057 	ubfx	r7, r7, #0, #14
   1aa18:	e240300a 	sub	r3, r0, #10
   1aa1c:	e1530007 	cmp	r3, r7
   1aa20:	1a000023 	bne	1aab4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   1aa24:	e3530004 	cmp	r3, #4
   1aa28:	9a000027 	bls	1aacc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   1aa2c:	e240700e 	sub	r7, r0, #14
   1aa30:	e284100a 	add	r1, r4, #10
   1aa34:	e1a00004 	mov	r0, r4
   1aa38:	e1a02007 	mov	r2, r7
   1aa3c:	eb006e8d 	bl	36478 <memcpy>
   1aa40:	e3560000 	cmp	r6, #0
   1aa44:	15867000 	strne	r7, [r6]
   1aa48:	1affffe5 	bne	1a9e4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   1aa4c:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1aa50:	e3401003 	movt	r1, #3
   1aa54:	e30d0bac 	movw	r0, #56236	; 0xdbac
   1aa58:	e3400003 	movt	r0, #3
   1aa5c:	e3a02f79 	mov	r2, #484	; 0x1e4
   1aa60:	eb004796 	bl	2c8c0 <assertion_failed>
   1aa64:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1aa68:	e3401003 	movt	r1, #3
   1aa6c:	e30d0b38 	movw	r0, #56120	; 0xdb38
   1aa70:	e3400003 	movt	r0, #3
   1aa74:	e3a02d07 	mov	r2, #448	; 0x1c0
   1aa78:	eb004790 	bl	2c8c0 <assertion_failed>
   1aa7c:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1aa80:	e3401003 	movt	r1, #3
   1aa84:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1aa88:	e3400003 	movt	r0, #3
   1aa8c:	e30021c1 	movw	r2, #449	; 0x1c1
   1aa90:	eb00478a 	bl	2c8c0 <assertion_failed>
   1aa94:	eb005206 	bl	2f2b4 <CLogger::Get()>
   1aa98:	e59f1044 	ldr	r1, [pc, #68]	; 1aae4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   1aa9c:	e3a02002 	mov	r2, #2
   1aaa0:	e30d3b50 	movw	r3, #56144	; 0xdb50
   1aaa4:	e3403003 	movt	r3, #3
   1aaa8:	e58d7000 	str	r7, [sp]
   1aaac:	eb0053ce 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aab0:	eaffffca 	b	1a9e0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>
   1aab4:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1aab8:	e3401003 	movt	r1, #3
   1aabc:	e30d0b68 	movw	r0, #56168	; 0xdb68
   1aac0:	e3400003 	movt	r0, #3
   1aac4:	e3a02f76 	mov	r2, #472	; 0x1d8
   1aac8:	eb00477c 	bl	2c8c0 <assertion_failed>
   1aacc:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1aad0:	e3401003 	movt	r1, #3
   1aad4:	e30d0b98 	movw	r0, #56216	; 0xdb98
   1aad8:	e3400003 	movt	r0, #3
   1aadc:	e30021d9 	movw	r2, #473	; 0x1d9
   1aae0:	eb004776 	bl	2c8c0 <assertion_failed>
   1aae4:	0003dd50 	.word	0x0003dd50

0001aae8 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   1aae8:	e2400014 	sub	r0, r0, #20
   1aaec:	eaffffa2 	b	1a97c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

0001aaf0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   1aaf0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1aaf4:	e1a05000 	mov	r5, r0
   1aaf8:	e1a06002 	mov	r6, r2
   1aafc:	e24ddd1b 	sub	sp, sp, #1728	; 0x6c0
   1ab00:	e3a07000 	mov	r7, #0
   1ab04:	e24dd004 	sub	sp, sp, #4
   1ab08:	e28d4047 	add	r4, sp, #71	; 0x47
   1ab0c:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   1ab10:	e2840008 	add	r0, r4, #8
   1ab14:	eb006e57 	bl	36478 <memcpy>
   1ab18:	e595301c 	ldr	r3, [r5, #28]
   1ab1c:	e3862501 	orr	r2, r6, #4194304	; 0x400000
   1ab20:	e5847004 	str	r7, [r4, #4]
   1ab24:	e1530007 	cmp	r3, r7
   1ab28:	e5842000 	str	r2, [r4]
   1ab2c:	0a00000b 	beq	1ab60 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x70>
   1ab30:	e1a00005 	mov	r0, r5
   1ab34:	ebffd6bd 	bl	10630 <CUSBFunction::GetHost() const>
   1ab38:	e595101c 	ldr	r1, [r5, #28]
   1ab3c:	e2863008 	add	r3, r6, #8
   1ab40:	e1a02004 	mov	r2, r4
   1ab44:	e58d7000 	str	r7, [sp]
   1ab48:	ebffe41d 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1ab4c:	e1e00000 	mvn	r0, r0
   1ab50:	e1a00fa0 	lsr	r0, r0, #31
   1ab54:	e28ddd1b 	add	sp, sp, #1728	; 0x6c0
   1ab58:	e28dd004 	add	sp, sp, #4
   1ab5c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ab60:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1ab64:	e3401003 	movt	r1, #3
   1ab68:	e30d0bc0 	movw	r0, #56256	; 0xdbc0
   1ab6c:	e3400003 	movt	r0, #3
   1ab70:	e30021ba 	movw	r2, #442	; 0x1ba
   1ab74:	eb004751 	bl	2c8c0 <assertion_failed>

0001ab78 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1ab78:	e3520d19 	cmp	r2, #1600	; 0x640
   1ab7c:	8a000002 	bhi	1ab8c <CLAN7800Device::SendFrame(void const*, unsigned int)+0x14>
   1ab80:	e3510000 	cmp	r1, #0
   1ab84:	0a000002 	beq	1ab94 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x1c>
   1ab88:	eaffffd8 	b	1aaf0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   1ab8c:	e3a00000 	mov	r0, #0
   1ab90:	e12fff1e 	bx	lr
   1ab94:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1ab98:	e3401003 	movt	r1, #3
   1ab9c:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1aba0:	e3400003 	movt	r0, #3
   1aba4:	e92d4010 	push	{r4, lr}
   1aba8:	e30021b3 	movw	r2, #435	; 0x1b3
   1abac:	eb004743 	bl	2c8c0 <assertion_failed>

0001abb0 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   1abb0:	e280000c 	add	r0, r0, #12
   1abb4:	e12fff1e 	bx	lr

0001abb8 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   1abb8:	e92d4010 	push	{r4, lr}
   1abbc:	e2404014 	sub	r4, r0, #20
   1abc0:	e1a00004 	mov	r0, r4
   1abc4:	ebffff41 	bl	1a8d0 <CLAN7800Device::~CLAN7800Device()>
   1abc8:	e1a00004 	mov	r0, r4
   1abcc:	e3a01028 	mov	r1, #40	; 0x28
   1abd0:	eb007049 	bl	36cfc <operator delete(void*, unsigned int)>
   1abd4:	e1a00004 	mov	r0, r4
   1abd8:	e8bd8010 	pop	{r4, pc}

0001abdc <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1abdc:	e3520d19 	cmp	r2, #1600	; 0x640
   1abe0:	8a000003 	bhi	1abf4 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x18>
   1abe4:	e3510000 	cmp	r1, #0
   1abe8:	0a000003 	beq	1abfc <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x20>
   1abec:	e2400014 	sub	r0, r0, #20
   1abf0:	eaffffbe 	b	1aaf0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   1abf4:	e3a00000 	mov	r0, #0
   1abf8:	e12fff1e 	bx	lr
   1abfc:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1ac00:	e3401003 	movt	r1, #3
   1ac04:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1ac08:	e3400003 	movt	r0, #3
   1ac0c:	e92d4010 	push	{r4, lr}
   1ac10:	e30021b3 	movw	r2, #435	; 0x1b3
   1ac14:	eb004729 	bl	2c8c0 <assertion_failed>

0001ac18 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   1ac18:	e92d4010 	push	{r4, lr}
   1ac1c:	e1a04000 	mov	r4, r0
   1ac20:	ebffd609 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1ac24:	e30d3cd8 	movw	r3, #56536	; 0xdcd8
   1ac28:	e3403003 	movt	r3, #3
   1ac2c:	e2831008 	add	r1, r3, #8
   1ac30:	e3a02000 	mov	r2, #0
   1ac34:	e2833050 	add	r3, r3, #80	; 0x50
   1ac38:	e2840020 	add	r0, r4, #32
   1ac3c:	e5841000 	str	r1, [r4]
   1ac40:	e5843014 	str	r3, [r4, #20]
   1ac44:	e5842018 	str	r2, [r4, #24]
   1ac48:	e584201c 	str	r2, [r4, #28]
   1ac4c:	eb006efa 	bl	3683c <CMACAddress::CMACAddress()>
   1ac50:	e1a00004 	mov	r0, r4
   1ac54:	e8bd8010 	pop	{r4, pc}

0001ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   1ac58:	e92d4070 	push	{r4, r5, r6, lr}
   1ac5c:	e1a04001 	mov	r4, r1
   1ac60:	e1a06000 	mov	r6, r0
   1ac64:	e24dd018 	sub	sp, sp, #24
   1ac68:	e58d2014 	str	r2, [sp, #20]
   1ac6c:	ebffd66f 	bl	10630 <CUSBFunction::GetHost() const>
   1ac70:	e1a05000 	mov	r5, r0
   1ac74:	e1a00006 	mov	r0, r6
   1ac78:	ebffd661 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1ac7c:	e3a02004 	mov	r2, #4
   1ac80:	e1a01000 	mov	r1, r0
   1ac84:	e28d3014 	add	r3, sp, #20
   1ac88:	e1a00005 	mov	r0, r5
   1ac8c:	e58d200c 	str	r2, [sp, #12]
   1ac90:	e3a05000 	mov	r5, #0
   1ac94:	e58d3008 	str	r3, [sp, #8]
   1ac98:	e3a02040 	mov	r2, #64	; 0x40
   1ac9c:	e6ff3074 	uxth	r3, r4
   1aca0:	e58d5000 	str	r5, [sp]
   1aca4:	e58d3004 	str	r3, [sp, #4]
   1aca8:	e3a030a0 	mov	r3, #160	; 0xa0
   1acac:	ebffe35d 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1acb0:	e1500005 	cmp	r0, r5
   1acb4:	a3a00001 	movge	r0, #1
   1acb8:	ba000001 	blt	1acc4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   1acbc:	e28dd018 	add	sp, sp, #24
   1acc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1acc4:	eb00517a 	bl	2f2b4 <CLogger::Get()>
   1acc8:	e59f101c 	ldr	r1, [pc, #28]	; 1acec <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   1accc:	e3a02002 	mov	r2, #2
   1acd0:	e58d4000 	str	r4, [sp]
   1acd4:	e30d3bd8 	movw	r3, #56280	; 0xdbd8
   1acd8:	e3403003 	movt	r3, #3
   1acdc:	eb005342 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ace0:	e1a00005 	mov	r0, r5
   1ace4:	e28dd018 	add	sp, sp, #24
   1ace8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1acec:	0003dd50 	.word	0x0003dd50

0001acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   1acf0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1acf4:	e1a05001 	mov	r5, r1
   1acf8:	e1a07000 	mov	r7, r0
   1acfc:	e24dd014 	sub	sp, sp, #20
   1ad00:	e1a04002 	mov	r4, r2
   1ad04:	ebffd649 	bl	10630 <CUSBFunction::GetHost() const>
   1ad08:	e1a06000 	mov	r6, r0
   1ad0c:	e1a00007 	mov	r0, r7
   1ad10:	ebffd63b 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1ad14:	e3a03004 	mov	r3, #4
   1ad18:	e1a01000 	mov	r1, r0
   1ad1c:	e58d300c 	str	r3, [sp, #12]
   1ad20:	e1a00006 	mov	r0, r6
   1ad24:	e6ff3075 	uxth	r3, r5
   1ad28:	e3a020c0 	mov	r2, #192	; 0xc0
   1ad2c:	e98d0018 	stmib	sp, {r3, r4}
   1ad30:	e3a04000 	mov	r4, #0
   1ad34:	e3a030a1 	mov	r3, #161	; 0xa1
   1ad38:	e58d4000 	str	r4, [sp]
   1ad3c:	ebffe339 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1ad40:	e3500004 	cmp	r0, #4
   1ad44:	03a00001 	moveq	r0, #1
   1ad48:	1a000001 	bne	1ad54 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x64>
   1ad4c:	e28dd014 	add	sp, sp, #20
   1ad50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ad54:	eb005156 	bl	2f2b4 <CLogger::Get()>
   1ad58:	e59f101c 	ldr	r1, [pc, #28]	; 1ad7c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x8c>
   1ad5c:	e3a02002 	mov	r2, #2
   1ad60:	e58d5000 	str	r5, [sp]
   1ad64:	e30d3bf4 	movw	r3, #56308	; 0xdbf4
   1ad68:	e3403003 	movt	r3, #3
   1ad6c:	eb00531e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ad70:	e1a00004 	mov	r0, r4
   1ad74:	e28dd014 	add	sp, sp, #20
   1ad78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ad7c:	0003dd50 	.word	0x0003dd50

0001ad80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   1ad80:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad84:	e1a07000 	mov	r7, r0
   1ad88:	e1a08001 	mov	r8, r1
   1ad8c:	e24dd00c 	sub	sp, sp, #12
   1ad90:	e1a09002 	mov	r9, r2
   1ad94:	e1a0a003 	mov	sl, r3
   1ad98:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1ad9c:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   1ada0:	eb006b7c 	bl	35b98 <CTimer::Get()>
   1ada4:	e2504000 	subs	r4, r0, #0
   1ada8:	0a000019 	beq	1ae14 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   1adac:	eb0068a7 	bl	35050 <CTimer::GetTicks() const>
   1adb0:	e1a06000 	mov	r6, r0
   1adb4:	ea00000e 	b	1adf4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   1adb8:	e1a00004 	mov	r0, r4
   1adbc:	eb0068a3 	bl	35050 <CTimer::GetTicks() const>
   1adc0:	e0400006 	sub	r0, r0, r6
   1adc4:	e150000b 	cmp	r0, fp
   1adc8:	2a00000e 	bcs	1ae08 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   1adcc:	e28d2004 	add	r2, sp, #4
   1add0:	e1a01008 	mov	r1, r8
   1add4:	e1a00007 	mov	r0, r7
   1add8:	ebffffc4 	bl	1acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1addc:	e3500000 	cmp	r0, #0
   1ade0:	0a000008 	beq	1ae08 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   1ade4:	e59d3004 	ldr	r3, [sp, #4]
   1ade8:	e0033009 	and	r3, r3, r9
   1adec:	e153000a 	cmp	r3, sl
   1adf0:	0a000005 	beq	1ae0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1adf4:	e3550000 	cmp	r5, #0
   1adf8:	0affffee 	beq	1adb8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   1adfc:	e1a00005 	mov	r0, r5
   1ae00:	eb006b32 	bl	35ad0 <CTimer::SimpleusDelay(unsigned int)>
   1ae04:	eaffffeb 	b	1adb8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   1ae08:	e3a00000 	mov	r0, #0
   1ae0c:	e28dd00c 	add	sp, sp, #12
   1ae10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae14:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1ae18:	e3401003 	movt	r1, #3
   1ae1c:	e30d0c10 	movw	r0, #56336	; 0xdc10
   1ae20:	e3400003 	movt	r0, #3
   1ae24:	e300228f 	movw	r2, #655	; 0x28f
   1ae28:	eb0046a4 	bl	2c8c0 <assertion_failed>

0001ae2c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   1ae2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ae30:	e351001f 	cmp	r1, #31
   1ae34:	e24dd008 	sub	sp, sp, #8
   1ae38:	8a000024 	bhi	1aed0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa4>
   1ae3c:	e3a06000 	mov	r6, #0
   1ae40:	e1a04001 	mov	r4, r1
   1ae44:	e1a05002 	mov	r5, r2
   1ae48:	e3a08064 	mov	r8, #100	; 0x64
   1ae4c:	e1a03006 	mov	r3, r6
   1ae50:	e3a02001 	mov	r2, #1
   1ae54:	e3a01e12 	mov	r1, #288	; 0x120
   1ae58:	e58d8004 	str	r8, [sp, #4]
   1ae5c:	e58d6000 	str	r6, [sp]
   1ae60:	e1a07000 	mov	r7, r0
   1ae64:	ebffffc5 	bl	1ad80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1ae68:	e1500006 	cmp	r0, r6
   1ae6c:	1a000002 	bne	1ae7c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x50>
   1ae70:	e3a00000 	mov	r0, #0
   1ae74:	e28dd008 	add	sp, sp, #8
   1ae78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae7c:	e1a02005 	mov	r2, r5
   1ae80:	e3a01f49 	mov	r1, #292	; 0x124
   1ae84:	e1a00007 	mov	r0, r7
   1ae88:	ebffff72 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1ae8c:	e3500000 	cmp	r0, #0
   1ae90:	0afffff6 	beq	1ae70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   1ae94:	e3002803 	movw	r2, #2051	; 0x803
   1ae98:	e3a01e12 	mov	r1, #288	; 0x120
   1ae9c:	e1822304 	orr	r2, r2, r4, lsl #6
   1aea0:	e1a00007 	mov	r0, r7
   1aea4:	ebffff6b 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1aea8:	e3500000 	cmp	r0, #0
   1aeac:	0affffef 	beq	1ae70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   1aeb0:	e1a03006 	mov	r3, r6
   1aeb4:	e3a02001 	mov	r2, #1
   1aeb8:	e1a00007 	mov	r0, r7
   1aebc:	e3a01e12 	mov	r1, #288	; 0x120
   1aec0:	e88d0140 	stm	sp, {r6, r8}
   1aec4:	ebffffad 	bl	1ad80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1aec8:	e28dd008 	add	sp, sp, #8
   1aecc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aed0:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1aed4:	e3401003 	movt	r1, #3
   1aed8:	e30d0c1c 	movw	r0, #56348	; 0xdc1c
   1aedc:	e3400003 	movt	r0, #3
   1aee0:	e300225a 	movw	r2, #602	; 0x25a
   1aee4:	eb004675 	bl	2c8c0 <assertion_failed>

0001aee8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   1aee8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1aeec:	e351001f 	cmp	r1, #31
   1aef0:	e24dd010 	sub	sp, sp, #16
   1aef4:	8a00002e 	bhi	1afb4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xcc>
   1aef8:	e3a05000 	mov	r5, #0
   1aefc:	e1a04001 	mov	r4, r1
   1af00:	e1a08002 	mov	r8, r2
   1af04:	e3a06064 	mov	r6, #100	; 0x64
   1af08:	e1a03005 	mov	r3, r5
   1af0c:	e3a02001 	mov	r2, #1
   1af10:	e3a01e12 	mov	r1, #288	; 0x120
   1af14:	e58d6004 	str	r6, [sp, #4]
   1af18:	e58d5000 	str	r5, [sp]
   1af1c:	e1a07000 	mov	r7, r0
   1af20:	ebffff96 	bl	1ad80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1af24:	e1500005 	cmp	r0, r5
   1af28:	1a000002 	bne	1af38 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x50>
   1af2c:	e3a00000 	mov	r0, #0
   1af30:	e28dd010 	add	sp, sp, #16
   1af34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1af38:	e3002801 	movw	r2, #2049	; 0x801
   1af3c:	e3a01e12 	mov	r1, #288	; 0x120
   1af40:	e1822304 	orr	r2, r2, r4, lsl #6
   1af44:	e1a00007 	mov	r0, r7
   1af48:	ebffff42 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1af4c:	e3500000 	cmp	r0, #0
   1af50:	0afffff5 	beq	1af2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   1af54:	e1a03005 	mov	r3, r5
   1af58:	e3a02001 	mov	r2, #1
   1af5c:	e3a01e12 	mov	r1, #288	; 0x120
   1af60:	e1a00007 	mov	r0, r7
   1af64:	e88d0060 	stm	sp, {r5, r6}
   1af68:	ebffff84 	bl	1ad80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1af6c:	e3500000 	cmp	r0, #0
   1af70:	0affffed 	beq	1af2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   1af74:	e28d200c 	add	r2, sp, #12
   1af78:	e3a01f49 	mov	r1, #292	; 0x124
   1af7c:	e1a00007 	mov	r0, r7
   1af80:	ebffff5a 	bl	1acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1af84:	e3500000 	cmp	r0, #0
   1af88:	0affffe7 	beq	1af2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   1af8c:	e3580000 	cmp	r8, #0
   1af90:	159d300c 	ldrne	r3, [sp, #12]
   1af94:	11c830b0 	strhne	r3, [r8]
   1af98:	1affffe4 	bne	1af30 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   1af9c:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1afa0:	e3401003 	movt	r1, #3
   1afa4:	e30d0c2c 	movw	r0, #56364	; 0xdc2c
   1afa8:	e3400003 	movt	r0, #3
   1afac:	e3002285 	movw	r2, #645	; 0x285
   1afb0:	eb004642 	bl	2c8c0 <assertion_failed>
   1afb4:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1afb8:	e3401003 	movt	r1, #3
   1afbc:	e30d0c1c 	movw	r0, #56348	; 0xdc1c
   1afc0:	e3400003 	movt	r0, #3
   1afc4:	e3002271 	movw	r2, #625	; 0x271
   1afc8:	eb00463c 	bl	2c8c0 <assertion_failed>

0001afcc <CLAN7800Device::IsLinkUp()>:
   1afcc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1afd0:	e3a01001 	mov	r1, #1
   1afd4:	e24dd00c 	sub	sp, sp, #12
   1afd8:	e28d2006 	add	r2, sp, #6
   1afdc:	ebffffc1 	bl	1aee8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1afe0:	e3500000 	cmp	r0, #0
   1afe4:	11dd00b6 	ldrhne	r0, [sp, #6]
   1afe8:	17e00150 	ubfxne	r0, r0, #2, #1
   1afec:	e28dd00c 	add	sp, sp, #12
   1aff0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001aff4 <CLAN7800Device::GetLinkSpeed()>:
   1aff4:	e92d4010 	push	{r4, lr}
   1aff8:	e3a02000 	mov	r2, #0
   1affc:	e3a0101f 	mov	r1, #31
   1b000:	e24dd008 	sub	sp, sp, #8
   1b004:	e1a04000 	mov	r4, r0
   1b008:	ebffff87 	bl	1ae2c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   1b00c:	e3500000 	cmp	r0, #0
   1b010:	0a000028 	beq	1b0b8 <CLAN7800Device::GetLinkSpeed()+0xc4>
   1b014:	e28d2006 	add	r2, sp, #6
   1b018:	e3a0101c 	mov	r1, #28
   1b01c:	e1a00004 	mov	r0, r4
   1b020:	ebffffb0 	bl	1aee8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1b024:	e3500000 	cmp	r0, #0
   1b028:	0a000022 	beq	1b0b8 <CLAN7800Device::GetLinkSpeed()+0xc4>
   1b02c:	e1dd30b6 	ldrh	r3, [sp, #6]
   1b030:	e3130901 	tst	r3, #16384	; 0x4000
   1b034:	1a00000c 	bne	1b06c <CLAN7800Device::GetLinkSpeed()+0x78>
   1b038:	e3130902 	tst	r3, #32768	; 0x8000
   1b03c:	0a00001d 	beq	1b0b8 <CLAN7800Device::GetLinkSpeed()+0xc4>
   1b040:	e7e231d3 	ubfx	r3, r3, #3, #3
   1b044:	e3530006 	cmp	r3, #6
   1b048:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1b04c:	ea000019 	b	1b0b8 <CLAN7800Device::GetLinkSpeed()+0xc4>
   1b050:	0001b084 	.word	0x0001b084
   1b054:	0001b090 	.word	0x0001b090
   1b058:	0001b098 	.word	0x0001b098
   1b05c:	0001b0b8 	.word	0x0001b0b8
   1b060:	0001b0a8 	.word	0x0001b0a8
   1b064:	0001b0b0 	.word	0x0001b0b0
   1b068:	0001b0a0 	.word	0x0001b0a0
   1b06c:	e30d1b2c 	movw	r1, #56108	; 0xdb2c
   1b070:	e3401003 	movt	r1, #3
   1b074:	e30d0c38 	movw	r0, #56376	; 0xdc38
   1b078:	e3400003 	movt	r0, #3
   1b07c:	e3a02f81 	mov	r2, #516	; 0x204
   1b080:	eb00460e 	bl	2c8c0 <assertion_failed>
   1b084:	e3a00000 	mov	r0, #0
   1b088:	e28dd008 	add	sp, sp, #8
   1b08c:	e8bd8010 	pop	{r4, pc}
   1b090:	e3a00002 	mov	r0, #2
   1b094:	eafffffb 	b	1b088 <CLAN7800Device::GetLinkSpeed()+0x94>
   1b098:	e3a00004 	mov	r0, #4
   1b09c:	eafffff9 	b	1b088 <CLAN7800Device::GetLinkSpeed()+0x94>
   1b0a0:	e3a00005 	mov	r0, #5
   1b0a4:	eafffff7 	b	1b088 <CLAN7800Device::GetLinkSpeed()+0x94>
   1b0a8:	e3a00001 	mov	r0, #1
   1b0ac:	eafffff5 	b	1b088 <CLAN7800Device::GetLinkSpeed()+0x94>
   1b0b0:	e3a00003 	mov	r0, #3
   1b0b4:	eafffff3 	b	1b088 <CLAN7800Device::GetLinkSpeed()+0x94>
   1b0b8:	e3a00006 	mov	r0, #6
   1b0bc:	eafffff1 	b	1b088 <CLAN7800Device::GetLinkSpeed()+0x94>

0001b0c0 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   1b0c0:	e2400014 	sub	r0, r0, #20
   1b0c4:	eaffffca 	b	1aff4 <CLAN7800Device::GetLinkSpeed()>

0001b0c8 <CLAN7800Device::InitPHY()>:
   1b0c8:	e92d4010 	push	{r4, lr}
   1b0cc:	e3a02000 	mov	r2, #0
   1b0d0:	e3a0101f 	mov	r1, #31
   1b0d4:	e24dd008 	sub	sp, sp, #8
   1b0d8:	e1a04000 	mov	r4, r0
   1b0dc:	ebffff52 	bl	1ae2c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   1b0e0:	e3500000 	cmp	r0, #0
   1b0e4:	1a000002 	bne	1b0f4 <CLAN7800Device::InitPHY()+0x2c>
   1b0e8:	e3a00000 	mov	r0, #0
   1b0ec:	e28dd008 	add	sp, sp, #8
   1b0f0:	e8bd8010 	pop	{r4, pc}
   1b0f4:	e28d2006 	add	r2, sp, #6
   1b0f8:	e3a0101d 	mov	r1, #29
   1b0fc:	e1a00004 	mov	r0, r4
   1b100:	ebffff78 	bl	1aee8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1b104:	e3500000 	cmp	r0, #0
   1b108:	0afffff6 	beq	1b0e8 <CLAN7800Device::InitPHY()+0x20>
   1b10c:	e1dd20b6 	ldrh	r2, [sp, #6]
   1b110:	e3a0101d 	mov	r1, #29
   1b114:	e1a00004 	mov	r0, r4
   1b118:	e3c220ff 	bic	r2, r2, #255	; 0xff
   1b11c:	e3822061 	orr	r2, r2, #97	; 0x61
   1b120:	e28dd008 	add	sp, sp, #8
   1b124:	e8bd4010 	pop	{r4, lr}
   1b128:	eaffff3f 	b	1ae2c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>

0001b12c <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   1b12c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1b130:	e3a01001 	mov	r1, #1
   1b134:	e2400014 	sub	r0, r0, #20
   1b138:	e24dd00c 	sub	sp, sp, #12
   1b13c:	e28d2006 	add	r2, sp, #6
   1b140:	ebffff68 	bl	1aee8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1b144:	e3500000 	cmp	r0, #0
   1b148:	11dd00b6 	ldrhne	r0, [sp, #6]
   1b14c:	17e00150 	ubfxne	r0, r0, #2, #1
   1b150:	e28dd00c 	add	sp, sp, #12
   1b154:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   1b158:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b15c:	e1a05002 	mov	r5, r2
   1b160:	e1a06000 	mov	r6, r0
   1b164:	e24dd00c 	sub	sp, sp, #12
   1b168:	e1a04003 	mov	r4, r3
   1b16c:	e28d2004 	add	r2, sp, #4
   1b170:	e1a07001 	mov	r7, r1
   1b174:	ebfffedd 	bl	1acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b178:	e3500000 	cmp	r0, #0
   1b17c:	0a000006 	beq	1b19c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   1b180:	e59d3004 	ldr	r3, [sp, #4]
   1b184:	e1a01007 	mov	r1, r7
   1b188:	e1a00006 	mov	r0, r6
   1b18c:	e0033004 	and	r3, r3, r4
   1b190:	e1832005 	orr	r2, r3, r5
   1b194:	e58d2004 	str	r2, [sp, #4]
   1b198:	ebfffeae 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b19c:	e28dd00c 	add	sp, sp, #12
   1b1a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001b1a4 <CLAN7800Device::InitMACAddress()>:
   1b1a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b1a8:	e3a01000 	mov	r1, #0
   1b1ac:	e1a04000 	mov	r4, r0
   1b1b0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   1b1b4:	e28d000c 	add	r0, sp, #12
   1b1b8:	eb0045e1 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1b1bc:	e3a01000 	mov	r1, #0
   1b1c0:	e3a03014 	mov	r3, #20
   1b1c4:	e58d1000 	str	r1, [sp]
   1b1c8:	e28d2024 	add	r2, sp, #36	; 0x24
   1b1cc:	e3a01003 	mov	r1, #3
   1b1d0:	e3401001 	movt	r1, #1
   1b1d4:	e28d000c 	add	r0, sp, #12
   1b1d8:	eb00462b 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1b1dc:	e3500000 	cmp	r0, #0
   1b1e0:	1a000005 	bne	1b1fc <CLAN7800Device::InitMACAddress()+0x58>
   1b1e4:	e3a04000 	mov	r4, #0
   1b1e8:	e28d000c 	add	r0, sp, #12
   1b1ec:	eb0045db 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   1b1f0:	e1a00004 	mov	r0, r4
   1b1f4:	e28dd03c 	add	sp, sp, #60	; 0x3c
   1b1f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b1fc:	e2846020 	add	r6, r4, #32
   1b200:	e28d1030 	add	r1, sp, #48	; 0x30
   1b204:	e1a00006 	mov	r0, r6
   1b208:	eb006dd4 	bl	36960 <CMACAddress::Set(unsigned char const*)>
   1b20c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1b210:	e3a01f47 	mov	r1, #284	; 0x11c
   1b214:	e1a00004 	mov	r0, r4
   1b218:	e1a02005 	mov	r2, r5
   1b21c:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   1b220:	ebfffe8c 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b224:	e3500000 	cmp	r0, #0
   1b228:	0affffed 	beq	1b1e4 <CLAN7800Device::InitMACAddress()+0x40>
   1b22c:	e1a02007 	mov	r2, r7
   1b230:	e3a01f46 	mov	r1, #280	; 0x118
   1b234:	e1a00004 	mov	r0, r4
   1b238:	ebfffe86 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b23c:	e3500000 	cmp	r0, #0
   1b240:	0affffe7 	beq	1b1e4 <CLAN7800Device::InitMACAddress()+0x40>
   1b244:	e1a02005 	mov	r2, r5
   1b248:	e1a00004 	mov	r0, r4
   1b24c:	e3001404 	movw	r1, #1028	; 0x404
   1b250:	ebfffe80 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b254:	e3500000 	cmp	r0, #0
   1b258:	0affffe1 	beq	1b1e4 <CLAN7800Device::InitMACAddress()+0x40>
   1b25c:	e1a00004 	mov	r0, r4
   1b260:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   1b264:	e3a01b01 	mov	r1, #1024	; 0x400
   1b268:	ebfffe7a 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b26c:	e2504000 	subs	r4, r0, #0
   1b270:	0affffdb 	beq	1b1e4 <CLAN7800Device::InitMACAddress()+0x40>
   1b274:	e28d0014 	add	r0, sp, #20
   1b278:	eb0060b7 	bl	3355c <CString::CString()>
   1b27c:	e28d1014 	add	r1, sp, #20
   1b280:	e1a00006 	mov	r0, r6
   1b284:	eb006e08 	bl	36aac <CMACAddress::Format(CString*) const>
   1b288:	eb005009 	bl	2f2b4 <CLogger::Get()>
   1b28c:	e1a05000 	mov	r5, r0
   1b290:	e28d0014 	add	r0, sp, #20
   1b294:	eb0060e8 	bl	3363c <CString::operator char const*() const>
   1b298:	e59f1024 	ldr	r1, [pc, #36]	; 1b2c4 <CLAN7800Device::InitMACAddress()+0x120>
   1b29c:	e1a03000 	mov	r3, r0
   1b2a0:	e3a02004 	mov	r2, #4
   1b2a4:	e1a00005 	mov	r0, r5
   1b2a8:	e58d3000 	str	r3, [sp]
   1b2ac:	e30d3c60 	movw	r3, #56416	; 0xdc60
   1b2b0:	e3403003 	movt	r3, #3
   1b2b4:	eb0051cc 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b2b8:	e28d0014 	add	r0, sp, #20
   1b2bc:	eb006073 	bl	33490 <CString::~CString()>
   1b2c0:	eaffffc8 	b	1b1e8 <CLAN7800Device::InitMACAddress()+0x44>
   1b2c4:	0003dd50 	.word	0x0003dd50

0001b2c8 <CLAN7800Device::Configure()>:
   1b2c8:	e92d4070 	push	{r4, r5, r6, lr}
   1b2cc:	e1a05000 	mov	r5, r0
   1b2d0:	e24dd010 	sub	sp, sp, #16
   1b2d4:	ebffd4b4 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   1b2d8:	e3500003 	cmp	r0, #3
   1b2dc:	0a000004 	beq	1b2f4 <CLAN7800Device::Configure()+0x2c>
   1b2e0:	ea000024 	b	1b378 <CLAN7800Device::Configure()+0xb0>
   1b2e4:	e5d42003 	ldrb	r2, [r4, #3]
   1b2e8:	e202203f 	and	r2, r2, #63	; 0x3f
   1b2ec:	e3520002 	cmp	r2, #2
   1b2f0:	0a000027 	beq	1b394 <CLAN7800Device::Configure()+0xcc>
   1b2f4:	e3a01005 	mov	r1, #5
   1b2f8:	e1a00005 	mov	r0, r5
   1b2fc:	ebffd4d6 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1b300:	e2504000 	subs	r4, r0, #0
   1b304:	1afffff6 	bne	1b2e4 <CLAN7800Device::Configure()+0x1c>
   1b308:	e5953018 	ldr	r3, [r5, #24]
   1b30c:	e3530000 	cmp	r3, #0
   1b310:	0a000018 	beq	1b378 <CLAN7800Device::Configure()+0xb0>
   1b314:	e595301c 	ldr	r3, [r5, #28]
   1b318:	e3530000 	cmp	r3, #0
   1b31c:	0a000015 	beq	1b378 <CLAN7800Device::Configure()+0xb0>
   1b320:	e1a00005 	mov	r0, r5
   1b324:	ebffd3d9 	bl	10290 <CUSBFunction::Configure()>
   1b328:	e3500000 	cmp	r0, #0
   1b32c:	0a000043 	beq	1b440 <CLAN7800Device::Configure()+0x178>
   1b330:	e28d2008 	add	r2, sp, #8
   1b334:	e1a01004 	mov	r1, r4
   1b338:	e1a00005 	mov	r0, r5
   1b33c:	ebfffe6b 	bl	1acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b340:	e3500000 	cmp	r0, #0
   1b344:	0a000002 	beq	1b354 <CLAN7800Device::Configure()+0x8c>
   1b348:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b34c:	e3530b1e 	cmp	r3, #30720	; 0x7800
   1b350:	0a00002d 	beq	1b40c <CLAN7800Device::Configure()+0x144>
   1b354:	eb004fd6 	bl	2f2b4 <CLogger::Get()>
   1b358:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b35c:	e58d3000 	str	r3, [sp]
   1b360:	e3a02001 	mov	r2, #1
   1b364:	e59f13ec 	ldr	r1, [pc, #1004]	; 1b758 <CLAN7800Device::Configure()+0x490>
   1b368:	e30d3c74 	movw	r3, #56436	; 0xdc74
   1b36c:	e3403003 	movt	r3, #3
   1b370:	eb00519d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b374:	ea000002 	b	1b384 <CLAN7800Device::Configure()+0xbc>
   1b378:	e59f13d8 	ldr	r1, [pc, #984]	; 1b758 <CLAN7800Device::Configure()+0x490>
   1b37c:	e1a00005 	mov	r0, r5
   1b380:	ebffd4c0 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1b384:	e3a04000 	mov	r4, #0
   1b388:	e1a00004 	mov	r0, r4
   1b38c:	e28dd010 	add	sp, sp, #16
   1b390:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b394:	e1d430d2 	ldrsb	r3, [r4, #2]
   1b398:	e3a00014 	mov	r0, #20
   1b39c:	e3530000 	cmp	r3, #0
   1b3a0:	ba00000c 	blt	1b3d8 <CLAN7800Device::Configure()+0x110>
   1b3a4:	e595301c 	ldr	r3, [r5, #28]
   1b3a8:	e3530000 	cmp	r3, #0
   1b3ac:	1afffff1 	bne	1b378 <CLAN7800Device::Configure()+0xb0>
   1b3b0:	eb006e39 	bl	36c9c <operator new(unsigned int)>
   1b3b4:	e1a06000 	mov	r6, r0
   1b3b8:	e1a00005 	mov	r0, r5
   1b3bc:	ebffd486 	bl	105dc <CUSBFunction::GetDevice() const>
   1b3c0:	e1a02004 	mov	r2, r4
   1b3c4:	e1a01000 	mov	r1, r0
   1b3c8:	e1a00006 	mov	r0, r6
   1b3cc:	ebffd291 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1b3d0:	e585601c 	str	r6, [r5, #28]
   1b3d4:	eaffffc6 	b	1b2f4 <CLAN7800Device::Configure()+0x2c>
   1b3d8:	e5953018 	ldr	r3, [r5, #24]
   1b3dc:	e3530000 	cmp	r3, #0
   1b3e0:	1affffe4 	bne	1b378 <CLAN7800Device::Configure()+0xb0>
   1b3e4:	eb006e2c 	bl	36c9c <operator new(unsigned int)>
   1b3e8:	e1a06000 	mov	r6, r0
   1b3ec:	e1a00005 	mov	r0, r5
   1b3f0:	ebffd479 	bl	105dc <CUSBFunction::GetDevice() const>
   1b3f4:	e1a02004 	mov	r2, r4
   1b3f8:	e1a01000 	mov	r1, r0
   1b3fc:	e1a00006 	mov	r0, r6
   1b400:	ebffd284 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1b404:	e5856018 	str	r6, [r5, #24]
   1b408:	eaffffb9 	b	1b2f4 <CLAN7800Device::Configure()+0x2c>
   1b40c:	e3a01010 	mov	r1, #16
   1b410:	e28d200c 	add	r2, sp, #12
   1b414:	e1a00005 	mov	r0, r5
   1b418:	ebfffe34 	bl	1acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b41c:	e3500000 	cmp	r0, #0
   1b420:	1a00000d 	bne	1b45c <CLAN7800Device::Configure()+0x194>
   1b424:	eb004fa2 	bl	2f2b4 <CLogger::Get()>
   1b428:	e59f1328 	ldr	r1, [pc, #808]	; 1b758 <CLAN7800Device::Configure()+0x490>
   1b42c:	e3a02001 	mov	r2, #1
   1b430:	e30d3c8c 	movw	r3, #56460	; 0xdc8c
   1b434:	e3403003 	movt	r3, #3
   1b438:	eb00516b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b43c:	eaffffd0 	b	1b384 <CLAN7800Device::Configure()+0xbc>
   1b440:	eb004f9b 	bl	2f2b4 <CLogger::Get()>
   1b444:	e59f130c 	ldr	r1, [pc, #780]	; 1b758 <CLAN7800Device::Configure()+0x490>
   1b448:	e3a02001 	mov	r2, #1
   1b44c:	e30b3eac 	movw	r3, #48812	; 0xbeac
   1b450:	e3403003 	movt	r3, #3
   1b454:	eb005164 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b458:	eaffffc9 	b	1b384 <CLAN7800Device::Configure()+0xbc>
   1b45c:	e59d200c 	ldr	r2, [sp, #12]
   1b460:	e3a01010 	mov	r1, #16
   1b464:	e1a00005 	mov	r0, r5
   1b468:	e3822002 	orr	r2, r2, #2
   1b46c:	e58d200c 	str	r2, [sp, #12]
   1b470:	ebfffdf8 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b474:	e3500000 	cmp	r0, #0
   1b478:	0affffe9 	beq	1b424 <CLAN7800Device::Configure()+0x15c>
   1b47c:	e3a01064 	mov	r1, #100	; 0x64
   1b480:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   1b484:	e58d1004 	str	r1, [sp, #4]
   1b488:	e1a03004 	mov	r3, r4
   1b48c:	e58d2000 	str	r2, [sp]
   1b490:	e3a01010 	mov	r1, #16
   1b494:	e3a02002 	mov	r2, #2
   1b498:	e1a00005 	mov	r0, r5
   1b49c:	ebfffe37 	bl	1ad80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1b4a0:	e3500000 	cmp	r0, #0
   1b4a4:	0affffde 	beq	1b424 <CLAN7800Device::Configure()+0x15c>
   1b4a8:	e1a00005 	mov	r0, r5
   1b4ac:	ebffff3c 	bl	1b1a4 <CLAN7800Device::InitMACAddress()>
   1b4b0:	e3500000 	cmp	r0, #0
   1b4b4:	0a000092 	beq	1b704 <CLAN7800Device::Configure()+0x43c>
   1b4b8:	e3a02018 	mov	r2, #24
   1b4bc:	e3a01090 	mov	r1, #144	; 0x90
   1b4c0:	e1a00005 	mov	r0, r5
   1b4c4:	ebfffde3 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b4c8:	e3500000 	cmp	r0, #0
   1b4cc:	0affffac 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b4d0:	e3a02b02 	mov	r2, #2048	; 0x800
   1b4d4:	e3a01094 	mov	r1, #148	; 0x94
   1b4d8:	e1a00005 	mov	r0, r5
   1b4dc:	ebfffddd 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b4e0:	e3500000 	cmp	r0, #0
   1b4e4:	0affffa6 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b4e8:	e28d200c 	add	r2, sp, #12
   1b4ec:	e3a01010 	mov	r1, #16
   1b4f0:	e1a00005 	mov	r0, r5
   1b4f4:	ebfffdfd 	bl	1acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b4f8:	e3500000 	cmp	r0, #0
   1b4fc:	0affffa0 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b500:	e59d200c 	ldr	r2, [sp, #12]
   1b504:	e3a01010 	mov	r1, #16
   1b508:	e1a00005 	mov	r0, r5
   1b50c:	e3c22010 	bic	r2, r2, #16
   1b510:	e3822603 	orr	r2, r2, #3145728	; 0x300000
   1b514:	e58d200c 	str	r2, [sp, #12]
   1b518:	ebfffdce 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b51c:	e3500000 	cmp	r0, #0
   1b520:	0affff97 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b524:	e28d200c 	add	r2, sp, #12
   1b528:	e3a01080 	mov	r1, #128	; 0x80
   1b52c:	e1a00005 	mov	r0, r5
   1b530:	ebfffdee 	bl	1acf0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b534:	e3500000 	cmp	r0, #0
   1b538:	0affff91 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b53c:	e59d200c 	ldr	r2, [sp, #12]
   1b540:	e3a01080 	mov	r1, #128	; 0x80
   1b544:	e1a00005 	mov	r0, r5
   1b548:	e3c22040 	bic	r2, r2, #64	; 0x40
   1b54c:	e3822020 	orr	r2, r2, #32
   1b550:	e58d200c 	str	r2, [sp, #12]
   1b554:	ebfffdbf 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b558:	e3500000 	cmp	r0, #0
   1b55c:	0affff88 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b560:	e3a02017 	mov	r2, #23
   1b564:	e3a010c8 	mov	r1, #200	; 0xc8
   1b568:	e1a00005 	mov	r0, r5
   1b56c:	ebfffdb9 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b570:	e3500000 	cmp	r0, #0
   1b574:	0affff82 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b578:	e3a02017 	mov	r2, #23
   1b57c:	e3a010cc 	mov	r1, #204	; 0xcc
   1b580:	e1a00005 	mov	r0, r5
   1b584:	ebfffdb3 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b588:	e3500000 	cmp	r0, #0
   1b58c:	0affff7c 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b590:	e3a02000 	mov	r2, #0
   1b594:	e3a01098 	mov	r1, #152	; 0x98
   1b598:	e1a00005 	mov	r0, r5
   1b59c:	ebfffdad 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b5a0:	e3500000 	cmp	r0, #0
   1b5a4:	0affff76 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b5a8:	e3a0100c 	mov	r1, #12
   1b5ac:	e1a00005 	mov	r0, r5
   1b5b0:	e3e02000 	mvn	r2, #0
   1b5b4:	ebfffda7 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b5b8:	e3500000 	cmp	r0, #0
   1b5bc:	0affff70 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b5c0:	e3a02000 	mov	r2, #0
   1b5c4:	e3a01f43 	mov	r1, #268	; 0x10c
   1b5c8:	e1a00005 	mov	r0, r5
   1b5cc:	ebfffda1 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b5d0:	e3500000 	cmp	r0, #0
   1b5d4:	0affff6a 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b5d8:	e3a02000 	mov	r2, #0
   1b5dc:	e3a010d0 	mov	r1, #208	; 0xd0
   1b5e0:	e1a00005 	mov	r0, r5
   1b5e4:	ebfffd9b 	bl	1ac58 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b5e8:	e3500000 	cmp	r0, #0
   1b5ec:	0affff64 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b5f0:	e3a010b0 	mov	r1, #176	; 0xb0
   1b5f4:	e1a00005 	mov	r0, r5
   1b5f8:	e3e03000 	mvn	r3, #0
   1b5fc:	e3002402 	movw	r2, #1026	; 0x402
   1b600:	ebfffed4 	bl	1b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b604:	e3500000 	cmp	r0, #0
   1b608:	0affff5d 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b60c:	e3a02010 	mov	r2, #16
   1b610:	e3a01014 	mov	r1, #20
   1b614:	e1a00005 	mov	r0, r5
   1b618:	e3e03000 	mvn	r3, #0
   1b61c:	ebfffecd 	bl	1b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b620:	e3500000 	cmp	r0, #0
   1b624:	0a000044 	beq	1b73c <CLAN7800Device::Configure()+0x474>
   1b628:	e3a00064 	mov	r0, #100	; 0x64
   1b62c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   1b630:	e58d0004 	str	r0, [sp, #4]
   1b634:	e3a03080 	mov	r3, #128	; 0x80
   1b638:	e58d1000 	str	r1, [sp]
   1b63c:	e3a02090 	mov	r2, #144	; 0x90
   1b640:	e3a01014 	mov	r1, #20
   1b644:	e1a00005 	mov	r0, r5
   1b648:	ebfffdcc 	bl	1ad80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1b64c:	e3500000 	cmp	r0, #0
   1b650:	0a000039 	beq	1b73c <CLAN7800Device::Configure()+0x474>
   1b654:	e3a02b06 	mov	r2, #6144	; 0x1800
   1b658:	e3a01c01 	mov	r1, #256	; 0x100
   1b65c:	e1a00005 	mov	r0, r5
   1b660:	e3e03000 	mvn	r3, #0
   1b664:	ebfffebb 	bl	1b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b668:	e3500000 	cmp	r0, #0
   1b66c:	0affff44 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b670:	e3a02001 	mov	r2, #1
   1b674:	e3a01f42 	mov	r1, #264	; 0x108
   1b678:	e1a00005 	mov	r0, r5
   1b67c:	e3e03000 	mvn	r3, #0
   1b680:	ebfffeb4 	bl	1b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b684:	e3500000 	cmp	r0, #0
   1b688:	0affff3d 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b68c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   1b690:	e3a010c4 	mov	r1, #196	; 0xc4
   1b694:	e1a00005 	mov	r0, r5
   1b698:	e3e03000 	mvn	r3, #0
   1b69c:	ebfffead 	bl	1b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b6a0:	e3500000 	cmp	r0, #0
   1b6a4:	0affff36 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b6a8:	e3a02001 	mov	r2, #1
   1b6ac:	e34025ee 	movt	r2, #1518	; 0x5ee
   1b6b0:	e3a01f41 	mov	r1, #260	; 0x104
   1b6b4:	e1a00005 	mov	r0, r5
   1b6b8:	e30f3fff 	movw	r3, #65535	; 0xffff
   1b6bc:	e34c3000 	movt	r3, #49152	; 0xc000
   1b6c0:	ebfffea4 	bl	1b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b6c4:	e3500000 	cmp	r0, #0
   1b6c8:	0affff2d 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b6cc:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   1b6d0:	e3a010c0 	mov	r1, #192	; 0xc0
   1b6d4:	e1a00005 	mov	r0, r5
   1b6d8:	e3e03000 	mvn	r3, #0
   1b6dc:	ebfffe9d 	bl	1b158 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b6e0:	e3500000 	cmp	r0, #0
   1b6e4:	0affff26 	beq	1b384 <CLAN7800Device::Configure()+0xbc>
   1b6e8:	e1a00005 	mov	r0, r5
   1b6ec:	ebfffe75 	bl	1b0c8 <CLAN7800Device::InitPHY()>
   1b6f0:	e2504000 	subs	r4, r0, #0
   1b6f4:	0a000009 	beq	1b720 <CLAN7800Device::Configure()+0x458>
   1b6f8:	e2850014 	add	r0, r5, #20
   1b6fc:	eb006d0d 	bl	36b38 <CNetDevice::AddNetDevice()>
   1b700:	eaffff20 	b	1b388 <CLAN7800Device::Configure()+0xc0>
   1b704:	eb004eea 	bl	2f2b4 <CLogger::Get()>
   1b708:	e59f1048 	ldr	r1, [pc, #72]	; 1b758 <CLAN7800Device::Configure()+0x490>
   1b70c:	e3a02001 	mov	r2, #1
   1b710:	e30d3c9c 	movw	r3, #56476	; 0xdc9c
   1b714:	e3403003 	movt	r3, #3
   1b718:	eb0050b3 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b71c:	eaffff18 	b	1b384 <CLAN7800Device::Configure()+0xbc>
   1b720:	eb004ee3 	bl	2f2b4 <CLogger::Get()>
   1b724:	e59f102c 	ldr	r1, [pc, #44]	; 1b758 <CLAN7800Device::Configure()+0x490>
   1b728:	e3a02001 	mov	r2, #1
   1b72c:	e30d3cc8 	movw	r3, #56520	; 0xdcc8
   1b730:	e3403003 	movt	r3, #3
   1b734:	eb0050ac 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b738:	eaffff11 	b	1b384 <CLAN7800Device::Configure()+0xbc>
   1b73c:	eb004edc 	bl	2f2b4 <CLogger::Get()>
   1b740:	e59f1010 	ldr	r1, [pc, #16]	; 1b758 <CLAN7800Device::Configure()+0x490>
   1b744:	e3a02001 	mov	r2, #1
   1b748:	e30d3cb4 	movw	r3, #56500	; 0xdcb4
   1b74c:	e3403003 	movt	r3, #3
   1b750:	eb0050a5 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b754:	eaffff0a 	b	1b384 <CLAN7800Device::Configure()+0xbc>
   1b758:	0003dd50 	.word	0x0003dd50

0001b75c <CNetDevice::GetType()>:
   1b75c:	e3a00000 	mov	r0, #0
   1b760:	e12fff1e 	bx	lr

0001b764 <CNetDevice::IsSendFrameAdvisable()>:
   1b764:	e3a00001 	mov	r0, #1
   1b768:	e12fff1e 	bx	lr

0001b76c <CNetDevice::UpdatePHY()>:
   1b76c:	e3a00000 	mov	r0, #0
   1b770:	e12fff1e 	bx	lr

0001b774 <CSMSC951xDevice::GetMACAddress() const>:
   1b774:	e2800020 	add	r0, r0, #32
   1b778:	e12fff1e 	bx	lr

0001b77c <CSMSC951xDevice::~CSMSC951xDevice()>:
   1b77c:	e92d4070 	push	{r4, r5, r6, lr}
   1b780:	e1a04000 	mov	r4, r0
   1b784:	e59f3070 	ldr	r3, [pc, #112]	; 1b7fc <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   1b788:	e590501c 	ldr	r5, [r0, #28]
   1b78c:	e2832048 	add	r2, r3, #72	; 0x48
   1b790:	e5803000 	str	r3, [r0]
   1b794:	e3550000 	cmp	r5, #0
   1b798:	e5802014 	str	r2, [r0, #20]
   1b79c:	0a000004 	beq	1b7b4 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   1b7a0:	e1a00005 	mov	r0, r5
   1b7a4:	ebffd215 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1b7a8:	e3a01014 	mov	r1, #20
   1b7ac:	e1a00005 	mov	r0, r5
   1b7b0:	eb006d51 	bl	36cfc <operator delete(void*, unsigned int)>
   1b7b4:	e5945018 	ldr	r5, [r4, #24]
   1b7b8:	e3a03000 	mov	r3, #0
   1b7bc:	e584301c 	str	r3, [r4, #28]
   1b7c0:	e1550003 	cmp	r5, r3
   1b7c4:	0a000004 	beq	1b7dc <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   1b7c8:	e1a00005 	mov	r0, r5
   1b7cc:	ebffd20b 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1b7d0:	e3a01014 	mov	r1, #20
   1b7d4:	e1a00005 	mov	r0, r5
   1b7d8:	eb006d47 	bl	36cfc <operator delete(void*, unsigned int)>
   1b7dc:	e3a03000 	mov	r3, #0
   1b7e0:	e2840020 	add	r0, r4, #32
   1b7e4:	e5843018 	str	r3, [r4, #24]
   1b7e8:	eb006c27 	bl	3688c <CMACAddress::~CMACAddress()>
   1b7ec:	e1a00004 	mov	r0, r4
   1b7f0:	ebffd26c 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   1b7f4:	e1a00004 	mov	r0, r4
   1b7f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b7fc:	0003de8c 	.word	0x0003de8c

0001b800 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   1b800:	e2400014 	sub	r0, r0, #20
   1b804:	eaffffdc 	b	1b77c <CSMSC951xDevice::~CSMSC951xDevice()>

0001b808 <CSMSC951xDevice::~CSMSC951xDevice()>:
   1b808:	e92d4010 	push	{r4, lr}
   1b80c:	e1a04000 	mov	r4, r0
   1b810:	ebffffd9 	bl	1b77c <CSMSC951xDevice::~CSMSC951xDevice()>
   1b814:	e1a00004 	mov	r0, r4
   1b818:	e3a01028 	mov	r1, #40	; 0x28
   1b81c:	eb006d36 	bl	36cfc <operator delete(void*, unsigned int)>
   1b820:	e1a00004 	mov	r0, r4
   1b824:	e8bd8010 	pop	{r4, pc}

0001b828 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   1b828:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b82c:	e1a04001 	mov	r4, r1
   1b830:	e5901018 	ldr	r1, [r0, #24]
   1b834:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   1b838:	e3510000 	cmp	r1, #0
   1b83c:	0a000036 	beq	1b91c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   1b840:	e3540000 	cmp	r4, #0
   1b844:	0a00003a 	beq	1b934 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x10c>
   1b848:	e3a03d19 	mov	r3, #1600	; 0x640
   1b84c:	e3a07000 	mov	r7, #0
   1b850:	e1a05000 	mov	r5, r0
   1b854:	e58d7000 	str	r7, [sp]
   1b858:	e1a06002 	mov	r6, r2
   1b85c:	e28d0008 	add	r0, sp, #8
   1b860:	e1a02004 	mov	r2, r4
   1b864:	ebffeadf 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1b868:	e1a00005 	mov	r0, r5
   1b86c:	ebffd36f 	bl	10630 <CUSBFunction::GetHost() const>
   1b870:	e5903000 	ldr	r3, [r0]
   1b874:	e1a02007 	mov	r2, r7
   1b878:	e28d1008 	add	r1, sp, #8
   1b87c:	e5933010 	ldr	r3, [r3, #16]
   1b880:	e12fff33 	blx	r3
   1b884:	e2507000 	subs	r7, r0, #0
   1b888:	1a000005 	bne	1b8a4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x7c>
   1b88c:	e3a07000 	mov	r7, #0
   1b890:	e28d0008 	add	r0, sp, #8
   1b894:	ebffeaf7 	bl	16478 <CUSBRequest::~CUSBRequest()>
   1b898:	e1a00007 	mov	r0, r7
   1b89c:	e28dd07c 	add	sp, sp, #124	; 0x7c
   1b8a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b8a4:	e28d0008 	add	r0, sp, #8
   1b8a8:	ebffeb05 	bl	164c4 <CUSBRequest::GetResultLength() const>
   1b8ac:	e3500003 	cmp	r0, #3
   1b8b0:	9afffff5 	bls	1b88c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   1b8b4:	e5945000 	ldr	r5, [r4]
   1b8b8:	e30930de 	movw	r3, #37086	; 0x90de
   1b8bc:	e3443000 	movt	r3, #16384	; 0x4000
   1b8c0:	e0033005 	and	r3, r3, r5
   1b8c4:	e3530000 	cmp	r3, #0
   1b8c8:	1a00001f 	bne	1b94c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x124>
   1b8cc:	e7ed5855 	ubfx	r5, r5, #16, #14
   1b8d0:	e2400004 	sub	r0, r0, #4
   1b8d4:	e1500005 	cmp	r0, r5
   1b8d8:	1a000023 	bne	1b96c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x144>
   1b8dc:	e3500004 	cmp	r0, #4
   1b8e0:	9a000027 	bls	1b984 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   1b8e4:	e2405004 	sub	r5, r0, #4
   1b8e8:	e2841004 	add	r1, r4, #4
   1b8ec:	e1a00004 	mov	r0, r4
   1b8f0:	e1a02005 	mov	r2, r5
   1b8f4:	eb006adf 	bl	36478 <memcpy>
   1b8f8:	e3560000 	cmp	r6, #0
   1b8fc:	15865000 	strne	r5, [r6]
   1b900:	1affffe2 	bne	1b890 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   1b904:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1b908:	e3401003 	movt	r1, #3
   1b90c:	e30d0bac 	movw	r0, #56236	; 0xdbac
   1b910:	e3400003 	movt	r0, #3
   1b914:	e3a02f4e 	mov	r2, #312	; 0x138
   1b918:	eb0043e8 	bl	2c8c0 <assertion_failed>
   1b91c:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1b920:	e3401003 	movt	r1, #3
   1b924:	e30d0b38 	movw	r0, #56120	; 0xdb38
   1b928:	e3400003 	movt	r0, #3
   1b92c:	e3a02f45 	mov	r2, #276	; 0x114
   1b930:	eb0043e2 	bl	2c8c0 <assertion_failed>
   1b934:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1b938:	e3401003 	movt	r1, #3
   1b93c:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1b940:	e3400003 	movt	r0, #3
   1b944:	e3002115 	movw	r2, #277	; 0x115
   1b948:	eb0043dc 	bl	2c8c0 <assertion_failed>
   1b94c:	eb004e58 	bl	2f2b4 <CLogger::Get()>
   1b950:	e59f1044 	ldr	r1, [pc, #68]	; 1b99c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   1b954:	e3a02002 	mov	r2, #2
   1b958:	e30d3b50 	movw	r3, #56144	; 0xdb50
   1b95c:	e3403003 	movt	r3, #3
   1b960:	e58d5000 	str	r5, [sp]
   1b964:	eb005020 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b968:	eaffffc7 	b	1b88c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   1b96c:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1b970:	e3401003 	movt	r1, #3
   1b974:	e30d0d68 	movw	r0, #56680	; 0xdd68
   1b978:	e3400003 	movt	r0, #3
   1b97c:	e3a02f4b 	mov	r2, #300	; 0x12c
   1b980:	eb0043ce 	bl	2c8c0 <assertion_failed>
   1b984:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1b988:	e3401003 	movt	r1, #3
   1b98c:	e30d0b98 	movw	r0, #56216	; 0xdb98
   1b990:	e3400003 	movt	r0, #3
   1b994:	e300212d 	movw	r2, #301	; 0x12d
   1b998:	eb0043c8 	bl	2c8c0 <assertion_failed>
   1b99c:	0003defc 	.word	0x0003defc

0001b9a0 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   1b9a0:	e2400014 	sub	r0, r0, #20
   1b9a4:	eaffff9f 	b	1b828 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

0001b9a8 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   1b9a8:	e92d4070 	push	{r4, r5, r6, lr}
   1b9ac:	e1a06000 	mov	r6, r0
   1b9b0:	e1a05002 	mov	r5, r2
   1b9b4:	e24ddd1b 	sub	sp, sp, #1728	; 0x6c0
   1b9b8:	e28d4047 	add	r4, sp, #71	; 0x47
   1b9bc:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   1b9c0:	e2840008 	add	r0, r4, #8
   1b9c4:	eb006aab 	bl	36478 <memcpy>
   1b9c8:	e596201c 	ldr	r2, [r6, #28]
   1b9cc:	e3853a03 	orr	r3, r5, #12288	; 0x3000
   1b9d0:	e5845004 	str	r5, [r4, #4]
   1b9d4:	e3520000 	cmp	r2, #0
   1b9d8:	e5843000 	str	r3, [r4]
   1b9dc:	0a00000b 	beq	1ba10 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x68>
   1b9e0:	e1a00006 	mov	r0, r6
   1b9e4:	ebffd311 	bl	10630 <CUSBFunction::GetHost() const>
   1b9e8:	e596101c 	ldr	r1, [r6, #28]
   1b9ec:	e3a0c000 	mov	ip, #0
   1b9f0:	e2853008 	add	r3, r5, #8
   1b9f4:	e1a02004 	mov	r2, r4
   1b9f8:	e58dc000 	str	ip, [sp]
   1b9fc:	ebffe070 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1ba00:	e1e00000 	mvn	r0, r0
   1ba04:	e1a00fa0 	lsr	r0, r0, #31
   1ba08:	e28ddd1b 	add	sp, sp, #1728	; 0x6c0
   1ba0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ba10:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1ba14:	e3401003 	movt	r1, #3
   1ba18:	e30d0bc0 	movw	r0, #56256	; 0xdbc0
   1ba1c:	e3400003 	movt	r0, #3
   1ba20:	e300210e 	movw	r2, #270	; 0x10e
   1ba24:	eb0043a5 	bl	2c8c0 <assertion_failed>

0001ba28 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   1ba28:	e3520d19 	cmp	r2, #1600	; 0x640
   1ba2c:	8a000002 	bhi	1ba3c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x14>
   1ba30:	e3510000 	cmp	r1, #0
   1ba34:	0a000002 	beq	1ba44 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x1c>
   1ba38:	eaffffda 	b	1b9a8 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   1ba3c:	e3a00000 	mov	r0, #0
   1ba40:	e12fff1e 	bx	lr
   1ba44:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1ba48:	e3401003 	movt	r1, #3
   1ba4c:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1ba50:	e3400003 	movt	r0, #3
   1ba54:	e92d4010 	push	{r4, lr}
   1ba58:	e3002107 	movw	r2, #263	; 0x107
   1ba5c:	eb004397 	bl	2c8c0 <assertion_failed>

0001ba60 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   1ba60:	e280000c 	add	r0, r0, #12
   1ba64:	e12fff1e 	bx	lr

0001ba68 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   1ba68:	e92d4010 	push	{r4, lr}
   1ba6c:	e2404014 	sub	r4, r0, #20
   1ba70:	e1a00004 	mov	r0, r4
   1ba74:	ebffff40 	bl	1b77c <CSMSC951xDevice::~CSMSC951xDevice()>
   1ba78:	e1a00004 	mov	r0, r4
   1ba7c:	e3a01028 	mov	r1, #40	; 0x28
   1ba80:	eb006c9d 	bl	36cfc <operator delete(void*, unsigned int)>
   1ba84:	e1a00004 	mov	r0, r4
   1ba88:	e8bd8010 	pop	{r4, pc}

0001ba8c <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   1ba8c:	e3520d19 	cmp	r2, #1600	; 0x640
   1ba90:	8a000003 	bhi	1baa4 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x18>
   1ba94:	e3510000 	cmp	r1, #0
   1ba98:	0a000003 	beq	1baac <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x20>
   1ba9c:	e2400014 	sub	r0, r0, #20
   1baa0:	eaffffc0 	b	1b9a8 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   1baa4:	e3a00000 	mov	r0, #0
   1baa8:	e12fff1e 	bx	lr
   1baac:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1bab0:	e3401003 	movt	r1, #3
   1bab4:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1bab8:	e3400003 	movt	r0, #3
   1babc:	e92d4010 	push	{r4, lr}
   1bac0:	e3002107 	movw	r2, #263	; 0x107
   1bac4:	eb00437d 	bl	2c8c0 <assertion_failed>

0001bac8 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   1bac8:	e92d4010 	push	{r4, lr}
   1bacc:	e1a04000 	mov	r4, r0
   1bad0:	ebffd25d 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1bad4:	e30d3e84 	movw	r3, #56964	; 0xde84
   1bad8:	e3403003 	movt	r3, #3
   1badc:	e2831008 	add	r1, r3, #8
   1bae0:	e3a02000 	mov	r2, #0
   1bae4:	e2833050 	add	r3, r3, #80	; 0x50
   1bae8:	e2840020 	add	r0, r4, #32
   1baec:	e5841000 	str	r1, [r4]
   1baf0:	e5843014 	str	r3, [r4, #20]
   1baf4:	e5842018 	str	r2, [r4, #24]
   1baf8:	e584201c 	str	r2, [r4, #28]
   1bafc:	eb006b4e 	bl	3683c <CMACAddress::CMACAddress()>
   1bb00:	e1a00004 	mov	r0, r4
   1bb04:	e8bd8010 	pop	{r4, pc}

0001bb08 <CSMSC951xDevice::PHYWaitNotBusy()>:
   1bb08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bb0c:	e1a04000 	mov	r4, r0
   1bb10:	e24dd018 	sub	sp, sp, #24
   1bb14:	eb00681f 	bl	35b98 <CTimer::Get()>
   1bb18:	e2505000 	subs	r5, r0, #0
   1bb1c:	0a000023 	beq	1bbb0 <CSMSC951xDevice::PHYWaitNotBusy()+0xa8>
   1bb20:	eb00654a 	bl	35050 <CTimer::GetTicks() const>
   1bb24:	e3a09004 	mov	r9, #4
   1bb28:	e1a06000 	mov	r6, r0
   1bb2c:	e28d8014 	add	r8, sp, #20
   1bb30:	e3a07f45 	mov	r7, #276	; 0x114
   1bb34:	ea000012 	b	1bb84 <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   1bb38:	e1a00004 	mov	r0, r4
   1bb3c:	ebffd2bb 	bl	10630 <CUSBFunction::GetHost() const>
   1bb40:	e1a0a000 	mov	sl, r0
   1bb44:	e1a00004 	mov	r0, r4
   1bb48:	ebffd2ad 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bb4c:	e3a0c000 	mov	ip, #0
   1bb50:	e1a01000 	mov	r1, r0
   1bb54:	e3a030a1 	mov	r3, #161	; 0xa1
   1bb58:	e3a020c0 	mov	r2, #192	; 0xc0
   1bb5c:	e1a0000a 	mov	r0, sl
   1bb60:	e1cd80f8 	strd	r8, [sp, #8]
   1bb64:	e58d7004 	str	r7, [sp, #4]
   1bb68:	e58dc000 	str	ip, [sp]
   1bb6c:	ebffdfad 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bb70:	e3500004 	cmp	r0, #4
   1bb74:	1a000007 	bne	1bb98 <CSMSC951xDevice::PHYWaitNotBusy()+0x90>
   1bb78:	e59d3014 	ldr	r3, [sp, #20]
   1bb7c:	e3130001 	tst	r3, #1
   1bb80:	0a000007 	beq	1bba4 <CSMSC951xDevice::PHYWaitNotBusy()+0x9c>
   1bb84:	e1a00005 	mov	r0, r5
   1bb88:	eb006530 	bl	35050 <CTimer::GetTicks() const>
   1bb8c:	e0403006 	sub	r3, r0, r6
   1bb90:	e3530063 	cmp	r3, #99	; 0x63
   1bb94:	9affffe7 	bls	1bb38 <CSMSC951xDevice::PHYWaitNotBusy()+0x30>
   1bb98:	e3a00000 	mov	r0, #0
   1bb9c:	e28dd018 	add	sp, sp, #24
   1bba0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bba4:	e3a00001 	mov	r0, #1
   1bba8:	e28dd018 	add	sp, sp, #24
   1bbac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bbb0:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1bbb4:	e3401003 	movt	r1, #3
   1bbb8:	e30d0c10 	movw	r0, #56336	; 0xdc10
   1bbbc:	e3400003 	movt	r0, #3
   1bbc0:	e300218f 	movw	r2, #399	; 0x18f
   1bbc4:	eb00433d 	bl	2c8c0 <assertion_failed>

0001bbc8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   1bbc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1bbcc:	e351001f 	cmp	r1, #31
   1bbd0:	e24dd01c 	sub	sp, sp, #28
   1bbd4:	8a000036 	bhi	1bcb4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0xec>
   1bbd8:	e1a06001 	mov	r6, r1
   1bbdc:	e1a04000 	mov	r4, r0
   1bbe0:	e1a05002 	mov	r5, r2
   1bbe4:	ebffffc7 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1bbe8:	e3500000 	cmp	r0, #0
   1bbec:	1a000002 	bne	1bbfc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x34>
   1bbf0:	e3a00000 	mov	r0, #0
   1bbf4:	e28dd01c 	add	sp, sp, #28
   1bbf8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bbfc:	e1a00004 	mov	r0, r4
   1bc00:	e58d5014 	str	r5, [sp, #20]
   1bc04:	ebffd289 	bl	10630 <CUSBFunction::GetHost() const>
   1bc08:	e1a05000 	mov	r5, r0
   1bc0c:	e1a00004 	mov	r0, r4
   1bc10:	e3a07004 	mov	r7, #4
   1bc14:	ebffd27a 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bc18:	e28d3014 	add	r3, sp, #20
   1bc1c:	e1a01000 	mov	r1, r0
   1bc20:	e58d3008 	str	r3, [sp, #8]
   1bc24:	e1a00005 	mov	r0, r5
   1bc28:	e3a03f46 	mov	r3, #280	; 0x118
   1bc2c:	e3a05000 	mov	r5, #0
   1bc30:	e58d3004 	str	r3, [sp, #4]
   1bc34:	e3a02040 	mov	r2, #64	; 0x40
   1bc38:	e3a030a0 	mov	r3, #160	; 0xa0
   1bc3c:	e58d700c 	str	r7, [sp, #12]
   1bc40:	e58d5000 	str	r5, [sp]
   1bc44:	ebffdf77 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bc48:	e1500005 	cmp	r0, r5
   1bc4c:	baffffe7 	blt	1bbf0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   1bc50:	e1a00004 	mov	r0, r4
   1bc54:	e3003803 	movw	r3, #2051	; 0x803
   1bc58:	e1833306 	orr	r3, r3, r6, lsl #6
   1bc5c:	e58d3014 	str	r3, [sp, #20]
   1bc60:	ebffd272 	bl	10630 <CUSBFunction::GetHost() const>
   1bc64:	e1a06000 	mov	r6, r0
   1bc68:	e1a00004 	mov	r0, r4
   1bc6c:	ebffd264 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bc70:	e28d3014 	add	r3, sp, #20
   1bc74:	e1a01000 	mov	r1, r0
   1bc78:	e3a02f45 	mov	r2, #276	; 0x114
   1bc7c:	e58d3008 	str	r3, [sp, #8]
   1bc80:	e1a00006 	mov	r0, r6
   1bc84:	e58d2004 	str	r2, [sp, #4]
   1bc88:	e3a030a0 	mov	r3, #160	; 0xa0
   1bc8c:	e3a02040 	mov	r2, #64	; 0x40
   1bc90:	e58d700c 	str	r7, [sp, #12]
   1bc94:	e58d5000 	str	r5, [sp]
   1bc98:	ebffdf62 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bc9c:	e1500005 	cmp	r0, r5
   1bca0:	baffffd2 	blt	1bbf0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   1bca4:	e1a00004 	mov	r0, r4
   1bca8:	e28dd01c 	add	sp, sp, #28
   1bcac:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   1bcb0:	eaffff94 	b	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1bcb4:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1bcb8:	e3401003 	movt	r1, #3
   1bcbc:	e30d0c1c 	movw	r0, #56348	; 0xdc1c
   1bcc0:	e3400003 	movt	r0, #3
   1bcc4:	e3002163 	movw	r2, #355	; 0x163
   1bcc8:	eb0042fc 	bl	2c8c0 <assertion_failed>

0001bccc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   1bccc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bcd0:	e351001f 	cmp	r1, #31
   1bcd4:	e24dd018 	sub	sp, sp, #24
   1bcd8:	8a000041 	bhi	1bde4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x118>
   1bcdc:	e1a04001 	mov	r4, r1
   1bce0:	e1a05000 	mov	r5, r0
   1bce4:	e1a06002 	mov	r6, r2
   1bce8:	ebffff86 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1bcec:	e3500000 	cmp	r0, #0
   1bcf0:	1a000003 	bne	1bd04 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x38>
   1bcf4:	e3a04000 	mov	r4, #0
   1bcf8:	e1a00004 	mov	r0, r4
   1bcfc:	e28dd018 	add	sp, sp, #24
   1bd00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bd04:	e1a00005 	mov	r0, r5
   1bd08:	e3003801 	movw	r3, #2049	; 0x801
   1bd0c:	e1833304 	orr	r3, r3, r4, lsl #6
   1bd10:	e58d3014 	str	r3, [sp, #20]
   1bd14:	ebffd245 	bl	10630 <CUSBFunction::GetHost() const>
   1bd18:	e1a04000 	mov	r4, r0
   1bd1c:	e1a00005 	mov	r0, r5
   1bd20:	e3a08000 	mov	r8, #0
   1bd24:	ebffd236 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bd28:	e3a07004 	mov	r7, #4
   1bd2c:	e1a01000 	mov	r1, r0
   1bd30:	e28d3014 	add	r3, sp, #20
   1bd34:	e1a00004 	mov	r0, r4
   1bd38:	e58d3008 	str	r3, [sp, #8]
   1bd3c:	e3a02040 	mov	r2, #64	; 0x40
   1bd40:	e3a03f45 	mov	r3, #276	; 0x114
   1bd44:	e58d700c 	str	r7, [sp, #12]
   1bd48:	e58d3004 	str	r3, [sp, #4]
   1bd4c:	e3a030a0 	mov	r3, #160	; 0xa0
   1bd50:	e58d8000 	str	r8, [sp]
   1bd54:	ebffdf33 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bd58:	e1500008 	cmp	r0, r8
   1bd5c:	baffffe4 	blt	1bcf4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   1bd60:	e1a00005 	mov	r0, r5
   1bd64:	ebffff67 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1bd68:	e2504000 	subs	r4, r0, #0
   1bd6c:	0affffe0 	beq	1bcf4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   1bd70:	e1a00005 	mov	r0, r5
   1bd74:	ebffd22d 	bl	10630 <CUSBFunction::GetHost() const>
   1bd78:	e1a03000 	mov	r3, r0
   1bd7c:	e1a00005 	mov	r0, r5
   1bd80:	e1a05003 	mov	r5, r3
   1bd84:	ebffd21e 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bd88:	e28d3014 	add	r3, sp, #20
   1bd8c:	e1a01000 	mov	r1, r0
   1bd90:	e3a02f46 	mov	r2, #280	; 0x118
   1bd94:	e58d3008 	str	r3, [sp, #8]
   1bd98:	e1a00005 	mov	r0, r5
   1bd9c:	e58d2004 	str	r2, [sp, #4]
   1bda0:	e3a030a1 	mov	r3, #161	; 0xa1
   1bda4:	e3a020c0 	mov	r2, #192	; 0xc0
   1bda8:	e58d700c 	str	r7, [sp, #12]
   1bdac:	e58d8000 	str	r8, [sp]
   1bdb0:	ebffdf1c 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bdb4:	e1500007 	cmp	r0, r7
   1bdb8:	1affffcd 	bne	1bcf4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   1bdbc:	e1560008 	cmp	r6, r8
   1bdc0:	159d3014 	ldrne	r3, [sp, #20]
   1bdc4:	11c630b0 	strhne	r3, [r6]
   1bdc8:	1affffca 	bne	1bcf8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   1bdcc:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1bdd0:	e3401003 	movt	r1, #3
   1bdd4:	e30d0c2c 	movw	r0, #56364	; 0xdc2c
   1bdd8:	e3400003 	movt	r0, #3
   1bddc:	e3002186 	movw	r2, #390	; 0x186
   1bde0:	eb0042b6 	bl	2c8c0 <assertion_failed>
   1bde4:	e30d1d58 	movw	r1, #56664	; 0xdd58
   1bde8:	e3401003 	movt	r1, #3
   1bdec:	e30d0c1c 	movw	r0, #56348	; 0xdc1c
   1bdf0:	e3400003 	movt	r0, #3
   1bdf4:	e3002176 	movw	r2, #374	; 0x176
   1bdf8:	eb0042b0 	bl	2c8c0 <assertion_failed>

0001bdfc <CSMSC951xDevice::IsLinkUp()>:
   1bdfc:	e92d4070 	push	{r4, r5, r6, lr}
   1be00:	e1a04000 	mov	r4, r0
   1be04:	e24dd018 	sub	sp, sp, #24
   1be08:	ebffff3e 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1be0c:	e3500000 	cmp	r0, #0
   1be10:	1a000002 	bne	1be20 <CSMSC951xDevice::IsLinkUp()+0x24>
   1be14:	e3a00000 	mov	r0, #0
   1be18:	e28dd018 	add	sp, sp, #24
   1be1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1be20:	e1a00004 	mov	r0, r4
   1be24:	e3003841 	movw	r3, #2113	; 0x841
   1be28:	e58d3014 	str	r3, [sp, #20]
   1be2c:	ebffd1ff 	bl	10630 <CUSBFunction::GetHost() const>
   1be30:	e1a05000 	mov	r5, r0
   1be34:	e1a00004 	mov	r0, r4
   1be38:	ebffd1f1 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1be3c:	e3a06004 	mov	r6, #4
   1be40:	e1a01000 	mov	r1, r0
   1be44:	e28d3014 	add	r3, sp, #20
   1be48:	e1a00005 	mov	r0, r5
   1be4c:	e58d3008 	str	r3, [sp, #8]
   1be50:	e3a05000 	mov	r5, #0
   1be54:	e3a03f45 	mov	r3, #276	; 0x114
   1be58:	e3a02040 	mov	r2, #64	; 0x40
   1be5c:	e58d3004 	str	r3, [sp, #4]
   1be60:	e58d600c 	str	r6, [sp, #12]
   1be64:	e3a030a0 	mov	r3, #160	; 0xa0
   1be68:	e58d5000 	str	r5, [sp]
   1be6c:	ebffdeed 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1be70:	e1500005 	cmp	r0, r5
   1be74:	baffffe6 	blt	1be14 <CSMSC951xDevice::IsLinkUp()+0x18>
   1be78:	e1a00004 	mov	r0, r4
   1be7c:	ebffff21 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1be80:	e1500005 	cmp	r0, r5
   1be84:	0affffe2 	beq	1be14 <CSMSC951xDevice::IsLinkUp()+0x18>
   1be88:	e1a00004 	mov	r0, r4
   1be8c:	ebffd1e7 	bl	10630 <CUSBFunction::GetHost() const>
   1be90:	e1a03000 	mov	r3, r0
   1be94:	e1a00004 	mov	r0, r4
   1be98:	e1a04003 	mov	r4, r3
   1be9c:	ebffd1d8 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bea0:	e3a03f46 	mov	r3, #280	; 0x118
   1bea4:	e1a01000 	mov	r1, r0
   1bea8:	e28d2014 	add	r2, sp, #20
   1beac:	e58d3004 	str	r3, [sp, #4]
   1beb0:	e1a00004 	mov	r0, r4
   1beb4:	e58d2008 	str	r2, [sp, #8]
   1beb8:	e3a030a1 	mov	r3, #161	; 0xa1
   1bebc:	e3a020c0 	mov	r2, #192	; 0xc0
   1bec0:	e58d600c 	str	r6, [sp, #12]
   1bec4:	e58d5000 	str	r5, [sp]
   1bec8:	ebffded6 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1becc:	e1500006 	cmp	r0, r6
   1bed0:	1affffcf 	bne	1be14 <CSMSC951xDevice::IsLinkUp()+0x18>
   1bed4:	e59d0014 	ldr	r0, [sp, #20]
   1bed8:	e7e00150 	ubfx	r0, r0, #2, #1
   1bedc:	e28dd018 	add	sp, sp, #24
   1bee0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bee4 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   1bee4:	e92d4070 	push	{r4, r5, r6, lr}
   1bee8:	e2404014 	sub	r4, r0, #20
   1beec:	e1a00004 	mov	r0, r4
   1bef0:	e24dd018 	sub	sp, sp, #24
   1bef4:	ebffff03 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1bef8:	e3500000 	cmp	r0, #0
   1befc:	1a000002 	bne	1bf0c <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x28>
   1bf00:	e3a00000 	mov	r0, #0
   1bf04:	e28dd018 	add	sp, sp, #24
   1bf08:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bf0c:	e1a00004 	mov	r0, r4
   1bf10:	e3003841 	movw	r3, #2113	; 0x841
   1bf14:	e58d3014 	str	r3, [sp, #20]
   1bf18:	ebffd1c4 	bl	10630 <CUSBFunction::GetHost() const>
   1bf1c:	e1a05000 	mov	r5, r0
   1bf20:	e1a00004 	mov	r0, r4
   1bf24:	ebffd1b6 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bf28:	e3a06004 	mov	r6, #4
   1bf2c:	e1a01000 	mov	r1, r0
   1bf30:	e28d3014 	add	r3, sp, #20
   1bf34:	e1a00005 	mov	r0, r5
   1bf38:	e58d3008 	str	r3, [sp, #8]
   1bf3c:	e3a05000 	mov	r5, #0
   1bf40:	e3a03f45 	mov	r3, #276	; 0x114
   1bf44:	e3a02040 	mov	r2, #64	; 0x40
   1bf48:	e58d3004 	str	r3, [sp, #4]
   1bf4c:	e58d600c 	str	r6, [sp, #12]
   1bf50:	e3a030a0 	mov	r3, #160	; 0xa0
   1bf54:	e58d5000 	str	r5, [sp]
   1bf58:	ebffdeb2 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bf5c:	e1500005 	cmp	r0, r5
   1bf60:	baffffe6 	blt	1bf00 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x1c>
   1bf64:	e1a00004 	mov	r0, r4
   1bf68:	ebfffee6 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1bf6c:	e1500005 	cmp	r0, r5
   1bf70:	0affffe2 	beq	1bf00 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x1c>
   1bf74:	e1a00004 	mov	r0, r4
   1bf78:	ebffd1ac 	bl	10630 <CUSBFunction::GetHost() const>
   1bf7c:	e1a03000 	mov	r3, r0
   1bf80:	e1a00004 	mov	r0, r4
   1bf84:	e1a04003 	mov	r4, r3
   1bf88:	ebffd19d 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1bf8c:	e3a03f46 	mov	r3, #280	; 0x118
   1bf90:	e1a01000 	mov	r1, r0
   1bf94:	e28d2014 	add	r2, sp, #20
   1bf98:	e58d3004 	str	r3, [sp, #4]
   1bf9c:	e1a00004 	mov	r0, r4
   1bfa0:	e58d2008 	str	r2, [sp, #8]
   1bfa4:	e3a030a1 	mov	r3, #161	; 0xa1
   1bfa8:	e3a020c0 	mov	r2, #192	; 0xc0
   1bfac:	e58d600c 	str	r6, [sp, #12]
   1bfb0:	e58d5000 	str	r5, [sp]
   1bfb4:	ebffde9b 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bfb8:	e1500006 	cmp	r0, r6
   1bfbc:	1affffcf 	bne	1bf00 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x1c>
   1bfc0:	e59d0014 	ldr	r0, [sp, #20]
   1bfc4:	e7e00150 	ubfx	r0, r0, #2, #1
   1bfc8:	e28dd018 	add	sp, sp, #24
   1bfcc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bfd0 <CSMSC951xDevice::GetLinkSpeed()>:
   1bfd0:	e92d4070 	push	{r4, r5, r6, lr}
   1bfd4:	e1a04000 	mov	r4, r0
   1bfd8:	e24dd018 	sub	sp, sp, #24
   1bfdc:	ebfffec9 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1bfe0:	e3500000 	cmp	r0, #0
   1bfe4:	1a000002 	bne	1bff4 <CSMSC951xDevice::GetLinkSpeed()+0x24>
   1bfe8:	e3a00006 	mov	r0, #6
   1bfec:	e28dd018 	add	sp, sp, #24
   1bff0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bff4:	e1a00004 	mov	r0, r4
   1bff8:	e3003fc1 	movw	r3, #4033	; 0xfc1
   1bffc:	e58d3014 	str	r3, [sp, #20]
   1c000:	ebffd18a 	bl	10630 <CUSBFunction::GetHost() const>
   1c004:	e1a05000 	mov	r5, r0
   1c008:	e1a00004 	mov	r0, r4
   1c00c:	ebffd17c 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c010:	e3a06004 	mov	r6, #4
   1c014:	e1a01000 	mov	r1, r0
   1c018:	e28d3014 	add	r3, sp, #20
   1c01c:	e1a00005 	mov	r0, r5
   1c020:	e58d3008 	str	r3, [sp, #8]
   1c024:	e3a05000 	mov	r5, #0
   1c028:	e3a03f45 	mov	r3, #276	; 0x114
   1c02c:	e3a02040 	mov	r2, #64	; 0x40
   1c030:	e58d3004 	str	r3, [sp, #4]
   1c034:	e58d600c 	str	r6, [sp, #12]
   1c038:	e3a030a0 	mov	r3, #160	; 0xa0
   1c03c:	e58d5000 	str	r5, [sp]
   1c040:	ebffde78 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c044:	e1500005 	cmp	r0, r5
   1c048:	baffffe6 	blt	1bfe8 <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1c04c:	e1a00004 	mov	r0, r4
   1c050:	ebfffeac 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1c054:	e1500005 	cmp	r0, r5
   1c058:	0affffe2 	beq	1bfe8 <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1c05c:	e1a00004 	mov	r0, r4
   1c060:	ebffd172 	bl	10630 <CUSBFunction::GetHost() const>
   1c064:	e1a03000 	mov	r3, r0
   1c068:	e1a00004 	mov	r0, r4
   1c06c:	e1a04003 	mov	r4, r3
   1c070:	ebffd163 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c074:	e3a03f46 	mov	r3, #280	; 0x118
   1c078:	e1a01000 	mov	r1, r0
   1c07c:	e28d2014 	add	r2, sp, #20
   1c080:	e58d3004 	str	r3, [sp, #4]
   1c084:	e1a00004 	mov	r0, r4
   1c088:	e58d2008 	str	r2, [sp, #8]
   1c08c:	e3a030a1 	mov	r3, #161	; 0xa1
   1c090:	e3a020c0 	mov	r2, #192	; 0xc0
   1c094:	e58d600c 	str	r6, [sp, #12]
   1c098:	e58d5000 	str	r5, [sp]
   1c09c:	ebffde61 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c0a0:	e1500006 	cmp	r0, r6
   1c0a4:	1affffcf 	bne	1bfe8 <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1c0a8:	e1dd31b4 	ldrh	r3, [sp, #20]
   1c0ac:	e3130a01 	tst	r3, #4096	; 0x1000
   1c0b0:	0affffcc 	beq	1bfe8 <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1c0b4:	e7e23153 	ubfx	r3, r3, #2, #3
   1c0b8:	e2433001 	sub	r3, r3, #1
   1c0bc:	e3530005 	cmp	r3, #5
   1c0c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c0c4:	eaffffc7 	b	1bfe8 <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1c0c8:	0001c0f8 	.word	0x0001c0f8
   1c0cc:	0001c104 	.word	0x0001c104
   1c0d0:	0001bfe8 	.word	0x0001bfe8
   1c0d4:	0001bfe8 	.word	0x0001bfe8
   1c0d8:	0001c0ec 	.word	0x0001c0ec
   1c0dc:	0001c0e0 	.word	0x0001c0e0
   1c0e0:	e3a00003 	mov	r0, #3
   1c0e4:	e28dd018 	add	sp, sp, #24
   1c0e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c0ec:	e3a00001 	mov	r0, #1
   1c0f0:	e28dd018 	add	sp, sp, #24
   1c0f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c0f8:	e3a00000 	mov	r0, #0
   1c0fc:	e28dd018 	add	sp, sp, #24
   1c100:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c104:	e3a00002 	mov	r0, #2
   1c108:	eaffffb7 	b	1bfec <CSMSC951xDevice::GetLinkSpeed()+0x1c>

0001c10c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   1c10c:	e92d4070 	push	{r4, r5, r6, lr}
   1c110:	e2404014 	sub	r4, r0, #20
   1c114:	e1a00004 	mov	r0, r4
   1c118:	e24dd018 	sub	sp, sp, #24
   1c11c:	ebfffe79 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1c120:	e3500000 	cmp	r0, #0
   1c124:	1a000002 	bne	1c134 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x28>
   1c128:	e3a00006 	mov	r0, #6
   1c12c:	e28dd018 	add	sp, sp, #24
   1c130:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c134:	e1a00004 	mov	r0, r4
   1c138:	e3003fc1 	movw	r3, #4033	; 0xfc1
   1c13c:	e58d3014 	str	r3, [sp, #20]
   1c140:	ebffd13a 	bl	10630 <CUSBFunction::GetHost() const>
   1c144:	e1a05000 	mov	r5, r0
   1c148:	e1a00004 	mov	r0, r4
   1c14c:	ebffd12c 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c150:	e3a06004 	mov	r6, #4
   1c154:	e1a01000 	mov	r1, r0
   1c158:	e28d3014 	add	r3, sp, #20
   1c15c:	e1a00005 	mov	r0, r5
   1c160:	e58d3008 	str	r3, [sp, #8]
   1c164:	e3a05000 	mov	r5, #0
   1c168:	e3a03f45 	mov	r3, #276	; 0x114
   1c16c:	e3a02040 	mov	r2, #64	; 0x40
   1c170:	e58d3004 	str	r3, [sp, #4]
   1c174:	e58d600c 	str	r6, [sp, #12]
   1c178:	e3a030a0 	mov	r3, #160	; 0xa0
   1c17c:	e58d5000 	str	r5, [sp]
   1c180:	ebffde28 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c184:	e1500005 	cmp	r0, r5
   1c188:	baffffe6 	blt	1c128 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c18c:	e1a00004 	mov	r0, r4
   1c190:	ebfffe5c 	bl	1bb08 <CSMSC951xDevice::PHYWaitNotBusy()>
   1c194:	e1500005 	cmp	r0, r5
   1c198:	0affffe2 	beq	1c128 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c19c:	e1a00004 	mov	r0, r4
   1c1a0:	ebffd122 	bl	10630 <CUSBFunction::GetHost() const>
   1c1a4:	e1a03000 	mov	r3, r0
   1c1a8:	e1a00004 	mov	r0, r4
   1c1ac:	e1a04003 	mov	r4, r3
   1c1b0:	ebffd113 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c1b4:	e3a03f46 	mov	r3, #280	; 0x118
   1c1b8:	e1a01000 	mov	r1, r0
   1c1bc:	e28d2014 	add	r2, sp, #20
   1c1c0:	e58d3004 	str	r3, [sp, #4]
   1c1c4:	e1a00004 	mov	r0, r4
   1c1c8:	e58d2008 	str	r2, [sp, #8]
   1c1cc:	e3a030a1 	mov	r3, #161	; 0xa1
   1c1d0:	e3a020c0 	mov	r2, #192	; 0xc0
   1c1d4:	e58d600c 	str	r6, [sp, #12]
   1c1d8:	e58d5000 	str	r5, [sp]
   1c1dc:	ebffde11 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c1e0:	e1500006 	cmp	r0, r6
   1c1e4:	1affffcf 	bne	1c128 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c1e8:	e1dd31b4 	ldrh	r3, [sp, #20]
   1c1ec:	e3130a01 	tst	r3, #4096	; 0x1000
   1c1f0:	0affffcc 	beq	1c128 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c1f4:	e7e23153 	ubfx	r3, r3, #2, #3
   1c1f8:	e2433001 	sub	r3, r3, #1
   1c1fc:	e3530005 	cmp	r3, #5
   1c200:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c204:	eaffffc7 	b	1c128 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c208:	0001c238 	.word	0x0001c238
   1c20c:	0001c244 	.word	0x0001c244
   1c210:	0001c128 	.word	0x0001c128
   1c214:	0001c128 	.word	0x0001c128
   1c218:	0001c22c 	.word	0x0001c22c
   1c21c:	0001c220 	.word	0x0001c220
   1c220:	e3a00003 	mov	r0, #3
   1c224:	e28dd018 	add	sp, sp, #24
   1c228:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c22c:	e3a00001 	mov	r0, #1
   1c230:	e28dd018 	add	sp, sp, #24
   1c234:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c238:	e3a00000 	mov	r0, #0
   1c23c:	e28dd018 	add	sp, sp, #24
   1c240:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c244:	e3a00002 	mov	r0, #2
   1c248:	eaffffb7 	b	1c12c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x20>

0001c24c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   1c24c:	e92d4070 	push	{r4, r5, r6, lr}
   1c250:	e1a04001 	mov	r4, r1
   1c254:	e1a06000 	mov	r6, r0
   1c258:	e24dd018 	sub	sp, sp, #24
   1c25c:	e58d2014 	str	r2, [sp, #20]
   1c260:	ebffd0f2 	bl	10630 <CUSBFunction::GetHost() const>
   1c264:	e1a05000 	mov	r5, r0
   1c268:	e1a00006 	mov	r0, r6
   1c26c:	ebffd0e4 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c270:	e28d3014 	add	r3, sp, #20
   1c274:	e1a01000 	mov	r1, r0
   1c278:	e6ff2074 	uxth	r2, r4
   1c27c:	e58d3008 	str	r3, [sp, #8]
   1c280:	e3a0c004 	mov	ip, #4
   1c284:	e58d2004 	str	r2, [sp, #4]
   1c288:	e1a00005 	mov	r0, r5
   1c28c:	e58dc00c 	str	ip, [sp, #12]
   1c290:	e3a030a0 	mov	r3, #160	; 0xa0
   1c294:	e3a0c000 	mov	ip, #0
   1c298:	e3a02040 	mov	r2, #64	; 0x40
   1c29c:	e58dc000 	str	ip, [sp]
   1c2a0:	ebffdde0 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c2a4:	e1e00000 	mvn	r0, r0
   1c2a8:	e1a00fa0 	lsr	r0, r0, #31
   1c2ac:	e28dd018 	add	sp, sp, #24
   1c2b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c2b4 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   1c2b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1c2b8:	e1a04001 	mov	r4, r1
   1c2bc:	e1a07000 	mov	r7, r0
   1c2c0:	e24dd014 	sub	sp, sp, #20
   1c2c4:	e1a05002 	mov	r5, r2
   1c2c8:	ebffd0d8 	bl	10630 <CUSBFunction::GetHost() const>
   1c2cc:	e1a06000 	mov	r6, r0
   1c2d0:	e1a00007 	mov	r0, r7
   1c2d4:	e6ff4074 	uxth	r4, r4
   1c2d8:	ebffd0c9 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c2dc:	e3a0c000 	mov	ip, #0
   1c2e0:	e1a01000 	mov	r1, r0
   1c2e4:	e3a03004 	mov	r3, #4
   1c2e8:	e1a00006 	mov	r0, r6
   1c2ec:	e58d300c 	str	r3, [sp, #12]
   1c2f0:	e3a020c0 	mov	r2, #192	; 0xc0
   1c2f4:	e3a030a1 	mov	r3, #161	; 0xa1
   1c2f8:	e1cd40f4 	strd	r4, [sp, #4]
   1c2fc:	e58dc000 	str	ip, [sp]
   1c300:	ebffddc8 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c304:	e2400004 	sub	r0, r0, #4
   1c308:	e16f0f10 	clz	r0, r0
   1c30c:	e1a002a0 	lsr	r0, r0, #5
   1c310:	e28dd014 	add	sp, sp, #20
   1c314:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   1c318:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1c31c:	e1a05002 	mov	r5, r2
   1c320:	e1a06000 	mov	r6, r0
   1c324:	e24dd01c 	sub	sp, sp, #28
   1c328:	e1a07001 	mov	r7, r1
   1c32c:	ebffd0bf 	bl	10630 <CUSBFunction::GetHost() const>
   1c330:	e1a04000 	mov	r4, r0
   1c334:	e1a00006 	mov	r0, r6
   1c338:	ebffd0b1 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c33c:	e3a03004 	mov	r3, #4
   1c340:	e1a01000 	mov	r1, r0
   1c344:	e58d300c 	str	r3, [sp, #12]
   1c348:	e1a00004 	mov	r0, r4
   1c34c:	e28d3014 	add	r3, sp, #20
   1c350:	e3a020c0 	mov	r2, #192	; 0xc0
   1c354:	e58d3008 	str	r3, [sp, #8]
   1c358:	e6ff3075 	uxth	r3, r5
   1c35c:	e58d3004 	str	r3, [sp, #4]
   1c360:	e3a03000 	mov	r3, #0
   1c364:	e58d3000 	str	r3, [sp]
   1c368:	e3a030a1 	mov	r3, #161	; 0xa1
   1c36c:	ebffddad 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c370:	e3500004 	cmp	r0, #4
   1c374:	1a00000a 	bne	1c3a4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x8c>
   1c378:	e1a04000 	mov	r4, r0
   1c37c:	eb004bcc 	bl	2f2b4 <CLogger::Get()>
   1c380:	e59d1014 	ldr	r1, [sp, #20]
   1c384:	e1a02004 	mov	r2, r4
   1c388:	e88d0082 	stm	sp, {r1, r7}
   1c38c:	e30d3d88 	movw	r3, #56712	; 0xdd88
   1c390:	e3403003 	movt	r3, #3
   1c394:	e59f102c 	ldr	r1, [pc, #44]	; 1c3c8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0xb0>
   1c398:	eb004d93 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c39c:	e28dd01c 	add	sp, sp, #28
   1c3a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1c3a4:	eb004bc2 	bl	2f2b4 <CLogger::Get()>
   1c3a8:	e59f1018 	ldr	r1, [pc, #24]	; 1c3c8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0xb0>
   1c3ac:	e3a02001 	mov	r2, #1
   1c3b0:	e58d5000 	str	r5, [sp]
   1c3b4:	e30d3bf4 	movw	r3, #56308	; 0xdbf4
   1c3b8:	e3403003 	movt	r3, #3
   1c3bc:	eb004d8a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c3c0:	e28dd01c 	add	sp, sp, #28
   1c3c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1c3c8:	0003defc 	.word	0x0003defc

0001c3cc <CSMSC951xDevice::DumpRegs()>:
   1c3cc:	e92d4010 	push	{r4, lr}
   1c3d0:	e3a02000 	mov	r2, #0
   1c3d4:	e1a04000 	mov	r4, r0
   1c3d8:	e30d1d90 	movw	r1, #56720	; 0xdd90
   1c3dc:	e3401003 	movt	r1, #3
   1c3e0:	ebffffcc 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c3e4:	e1a00004 	mov	r0, r4
   1c3e8:	e3a02008 	mov	r2, #8
   1c3ec:	e30d1d98 	movw	r1, #56728	; 0xdd98
   1c3f0:	e3401003 	movt	r1, #3
   1c3f4:	ebffffc7 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c3f8:	e1a00004 	mov	r0, r4
   1c3fc:	e3a0200c 	mov	r2, #12
   1c400:	e30d1da0 	movw	r1, #56736	; 0xdda0
   1c404:	e3401003 	movt	r1, #3
   1c408:	ebffffc2 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c40c:	e1a00004 	mov	r0, r4
   1c410:	e3a02010 	mov	r2, #16
   1c414:	e30d1da8 	movw	r1, #56744	; 0xdda8
   1c418:	e3401003 	movt	r1, #3
   1c41c:	ebffffbd 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c420:	e1a00004 	mov	r0, r4
   1c424:	e3a02014 	mov	r2, #20
   1c428:	e30d1db0 	movw	r1, #56752	; 0xddb0
   1c42c:	e3401003 	movt	r1, #3
   1c430:	ebffffb8 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c434:	e1a00004 	mov	r0, r4
   1c438:	e3a02018 	mov	r2, #24
   1c43c:	e30d1db8 	movw	r1, #56760	; 0xddb8
   1c440:	e3401003 	movt	r1, #3
   1c444:	ebffffb3 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c448:	e1a00004 	mov	r0, r4
   1c44c:	e3a02020 	mov	r2, #32
   1c450:	e30d1dc4 	movw	r1, #56772	; 0xddc4
   1c454:	e3401003 	movt	r1, #3
   1c458:	ebffffae 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c45c:	e1a00004 	mov	r0, r4
   1c460:	e3a02024 	mov	r2, #36	; 0x24
   1c464:	e30d1dcc 	movw	r1, #56780	; 0xddcc
   1c468:	e3401003 	movt	r1, #3
   1c46c:	ebffffa9 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c470:	e1a00004 	mov	r0, r4
   1c474:	e3a02028 	mov	r2, #40	; 0x28
   1c478:	e30d1dd0 	movw	r1, #56784	; 0xddd0
   1c47c:	e3401003 	movt	r1, #3
   1c480:	ebffffa4 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c484:	e1a00004 	mov	r0, r4
   1c488:	e3a0202c 	mov	r2, #44	; 0x2c
   1c48c:	e30d1ddc 	movw	r1, #56796	; 0xdddc
   1c490:	e3401003 	movt	r1, #3
   1c494:	ebffff9f 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c498:	e1a00004 	mov	r0, r4
   1c49c:	e3a02038 	mov	r2, #56	; 0x38
   1c4a0:	e30d1de4 	movw	r1, #56804	; 0xdde4
   1c4a4:	e3401003 	movt	r1, #3
   1c4a8:	ebffff9a 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c4ac:	e1a00004 	mov	r0, r4
   1c4b0:	e3a02068 	mov	r2, #104	; 0x68
   1c4b4:	e30d1df0 	movw	r1, #56816	; 0xddf0
   1c4b8:	e3401003 	movt	r1, #3
   1c4bc:	ebffff95 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c4c0:	e1a00004 	mov	r0, r4
   1c4c4:	e3a0206c 	mov	r2, #108	; 0x6c
   1c4c8:	e30d1dfc 	movw	r1, #56828	; 0xddfc
   1c4cc:	e3401003 	movt	r1, #3
   1c4d0:	ebffff90 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c4d4:	e1a00004 	mov	r0, r4
   1c4d8:	e3a02c01 	mov	r2, #256	; 0x100
   1c4dc:	e30d1e08 	movw	r1, #56840	; 0xde08
   1c4e0:	e3401003 	movt	r1, #3
   1c4e4:	ebffff8b 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c4e8:	e1a00004 	mov	r0, r4
   1c4ec:	e3a02f41 	mov	r2, #260	; 0x104
   1c4f0:	e30d1e10 	movw	r1, #56848	; 0xde10
   1c4f4:	e3401003 	movt	r1, #3
   1c4f8:	ebffff86 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c4fc:	e1a00004 	mov	r0, r4
   1c500:	e3a02f42 	mov	r2, #264	; 0x108
   1c504:	e30d1e18 	movw	r1, #56856	; 0xde18
   1c508:	e3401003 	movt	r1, #3
   1c50c:	ebffff81 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c510:	e1a00004 	mov	r0, r4
   1c514:	e3a02f43 	mov	r2, #268	; 0x10c
   1c518:	e30d1e20 	movw	r1, #56864	; 0xde20
   1c51c:	e3401003 	movt	r1, #3
   1c520:	ebffff7c 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c524:	e1a00004 	mov	r0, r4
   1c528:	e3a02e11 	mov	r2, #272	; 0x110
   1c52c:	e30d1e28 	movw	r1, #56872	; 0xde28
   1c530:	e3401003 	movt	r1, #3
   1c534:	ebffff77 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c538:	e1a00004 	mov	r0, r4
   1c53c:	e3a02f47 	mov	r2, #284	; 0x11c
   1c540:	e30d1e30 	movw	r1, #56880	; 0xde30
   1c544:	e3401003 	movt	r1, #3
   1c548:	ebffff72 	bl	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c54c:	e1a00004 	mov	r0, r4
   1c550:	e30d1e38 	movw	r1, #56888	; 0xde38
   1c554:	e3401003 	movt	r1, #3
   1c558:	e8bd4010 	pop	{r4, lr}
   1c55c:	e3a02f4b 	mov	r2, #300	; 0x12c
   1c560:	eaffff6c 	b	1c318 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>

0001c564 <CSMSC951xDevice::Configure()>:
   1c564:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c568:	e3a01000 	mov	r1, #0
   1c56c:	e1a05000 	mov	r5, r0
   1c570:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1c574:	e28d001c 	add	r0, sp, #28
   1c578:	eb0040f1 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1c57c:	e3a01000 	mov	r1, #0
   1c580:	e3a03014 	mov	r3, #20
   1c584:	e58d1000 	str	r1, [sp]
   1c588:	e28d2034 	add	r2, sp, #52	; 0x34
   1c58c:	e3a01003 	mov	r1, #3
   1c590:	e3401001 	movt	r1, #1
   1c594:	e28d001c 	add	r0, sp, #28
   1c598:	eb00413b 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1c59c:	e2506000 	subs	r6, r0, #0
   1c5a0:	0a0000ae 	beq	1c860 <CSMSC951xDevice::Configure()+0x2fc>
   1c5a4:	e2857020 	add	r7, r5, #32
   1c5a8:	e28d1040 	add	r1, sp, #64	; 0x40
   1c5ac:	e1a00007 	mov	r0, r7
   1c5b0:	eb0068ea 	bl	36960 <CMACAddress::Set(unsigned char const*)>
   1c5b4:	e28d0024 	add	r0, sp, #36	; 0x24
   1c5b8:	eb005be7 	bl	3355c <CString::CString()>
   1c5bc:	e28d1024 	add	r1, sp, #36	; 0x24
   1c5c0:	e1a00007 	mov	r0, r7
   1c5c4:	eb006938 	bl	36aac <CMACAddress::Format(CString*) const>
   1c5c8:	eb004b39 	bl	2f2b4 <CLogger::Get()>
   1c5cc:	e1a04000 	mov	r4, r0
   1c5d0:	e28d0024 	add	r0, sp, #36	; 0x24
   1c5d4:	eb005c18 	bl	3363c <CString::operator char const*() const>
   1c5d8:	e59f1324 	ldr	r1, [pc, #804]	; 1c904 <CSMSC951xDevice::Configure()+0x3a0>
   1c5dc:	e3a02004 	mov	r2, #4
   1c5e0:	e58d0000 	str	r0, [sp]
   1c5e4:	e30d3c60 	movw	r3, #56416	; 0xdc60
   1c5e8:	e3403003 	movt	r3, #3
   1c5ec:	e1a00004 	mov	r0, r4
   1c5f0:	eb004cfd 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c5f4:	e1a00005 	mov	r0, r5
   1c5f8:	ebffcfeb 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   1c5fc:	e3500003 	cmp	r0, #3
   1c600:	0a00000e 	beq	1c640 <CSMSC951xDevice::Configure()+0xdc>
   1c604:	e59f12f8 	ldr	r1, [pc, #760]	; 1c904 <CSMSC951xDevice::Configure()+0x3a0>
   1c608:	e1a00005 	mov	r0, r5
   1c60c:	ebffd01d 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1c610:	e3a06000 	mov	r6, #0
   1c614:	e28d0024 	add	r0, sp, #36	; 0x24
   1c618:	eb005b9c 	bl	33490 <CString::~CString()>
   1c61c:	e28d001c 	add	r0, sp, #28
   1c620:	eb0040ce 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   1c624:	e1a00006 	mov	r0, r6
   1c628:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1c62c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c630:	e5d43003 	ldrb	r3, [r4, #3]
   1c634:	e203303f 	and	r3, r3, #63	; 0x3f
   1c638:	e3530002 	cmp	r3, #2
   1c63c:	0a000076 	beq	1c81c <CSMSC951xDevice::Configure()+0x2b8>
   1c640:	e3a01005 	mov	r1, #5
   1c644:	e1a00005 	mov	r0, r5
   1c648:	ebffd003 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1c64c:	e2504000 	subs	r4, r0, #0
   1c650:	1afffff6 	bne	1c630 <CSMSC951xDevice::Configure()+0xcc>
   1c654:	e5953018 	ldr	r3, [r5, #24]
   1c658:	e3530000 	cmp	r3, #0
   1c65c:	0affffe8 	beq	1c604 <CSMSC951xDevice::Configure()+0xa0>
   1c660:	e595301c 	ldr	r3, [r5, #28]
   1c664:	e3530000 	cmp	r3, #0
   1c668:	0affffe5 	beq	1c604 <CSMSC951xDevice::Configure()+0xa0>
   1c66c:	e1a00005 	mov	r0, r5
   1c670:	ebffcf06 	bl	10290 <CUSBFunction::Configure()>
   1c674:	e2506000 	subs	r6, r0, #0
   1c678:	0a00007f 	beq	1c87c <CSMSC951xDevice::Configure()+0x318>
   1c67c:	e28d1014 	add	r1, sp, #20
   1c680:	e1a00007 	mov	r0, r7
   1c684:	eb0068da 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   1c688:	e1dd31b8 	ldrh	r3, [sp, #24]
   1c68c:	e1a00005 	mov	r0, r5
   1c690:	e58d3010 	str	r3, [sp, #16]
   1c694:	e59d9014 	ldr	r9, [sp, #20]
   1c698:	ebffcfe4 	bl	10630 <CUSBFunction::GetHost() const>
   1c69c:	e1a07000 	mov	r7, r0
   1c6a0:	e1a00005 	mov	r0, r5
   1c6a4:	ebffcfd6 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c6a8:	e28d8010 	add	r8, sp, #16
   1c6ac:	e1a01000 	mov	r1, r0
   1c6b0:	e3a03f41 	mov	r3, #260	; 0x104
   1c6b4:	e1a00007 	mov	r0, r7
   1c6b8:	e58d3004 	str	r3, [sp, #4]
   1c6bc:	e3a07004 	mov	r7, #4
   1c6c0:	e3a030a0 	mov	r3, #160	; 0xa0
   1c6c4:	e3a02040 	mov	r2, #64	; 0x40
   1c6c8:	e58d4000 	str	r4, [sp]
   1c6cc:	e58d700c 	str	r7, [sp, #12]
   1c6d0:	e58d8008 	str	r8, [sp, #8]
   1c6d4:	ebffdcd3 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c6d8:	e3500000 	cmp	r0, #0
   1c6dc:	ba00007a 	blt	1c8cc <CSMSC951xDevice::Configure()+0x368>
   1c6e0:	e1a00005 	mov	r0, r5
   1c6e4:	e58d9010 	str	r9, [sp, #16]
   1c6e8:	ebffcfd0 	bl	10630 <CUSBFunction::GetHost() const>
   1c6ec:	e1a09000 	mov	r9, r0
   1c6f0:	e1a00005 	mov	r0, r5
   1c6f4:	ebffcfc2 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c6f8:	e3a03f42 	mov	r3, #264	; 0x108
   1c6fc:	e1a01000 	mov	r1, r0
   1c700:	e58d3004 	str	r3, [sp, #4]
   1c704:	e1a00009 	mov	r0, r9
   1c708:	e3a030a0 	mov	r3, #160	; 0xa0
   1c70c:	e3a02040 	mov	r2, #64	; 0x40
   1c710:	e58d700c 	str	r7, [sp, #12]
   1c714:	e58d8008 	str	r8, [sp, #8]
   1c718:	e58d4000 	str	r4, [sp]
   1c71c:	ebffdcc1 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c720:	e3500000 	cmp	r0, #0
   1c724:	ba000068 	blt	1c8cc <CSMSC951xDevice::Configure()+0x368>
   1c728:	e1a00005 	mov	r0, r5
   1c72c:	e3a03000 	mov	r3, #0
   1c730:	e3403111 	movt	r3, #273	; 0x111
   1c734:	e58d3010 	str	r3, [sp, #16]
   1c738:	ebffcfbc 	bl	10630 <CUSBFunction::GetHost() const>
   1c73c:	e1a09000 	mov	r9, r0
   1c740:	e1a00005 	mov	r0, r5
   1c744:	ebffcfae 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c748:	e3a03024 	mov	r3, #36	; 0x24
   1c74c:	e1a01000 	mov	r1, r0
   1c750:	e58d3004 	str	r3, [sp, #4]
   1c754:	e1a00009 	mov	r0, r9
   1c758:	e3a030a0 	mov	r3, #160	; 0xa0
   1c75c:	e3a02040 	mov	r2, #64	; 0x40
   1c760:	e58d700c 	str	r7, [sp, #12]
   1c764:	e58d8008 	str	r8, [sp, #8]
   1c768:	e58d4000 	str	r4, [sp]
   1c76c:	ebffdcad 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c770:	e3500000 	cmp	r0, #0
   1c774:	ba00005b 	blt	1c8e8 <CSMSC951xDevice::Configure()+0x384>
   1c778:	e1a00005 	mov	r0, r5
   1c77c:	e3a0300c 	mov	r3, #12
   1c780:	e3403080 	movt	r3, #128	; 0x80
   1c784:	e58d3010 	str	r3, [sp, #16]
   1c788:	ebffcfa8 	bl	10630 <CUSBFunction::GetHost() const>
   1c78c:	e1a09000 	mov	r9, r0
   1c790:	e1a00005 	mov	r0, r5
   1c794:	ebffcf9a 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c798:	e3a03c01 	mov	r3, #256	; 0x100
   1c79c:	e1a01000 	mov	r1, r0
   1c7a0:	e58d3004 	str	r3, [sp, #4]
   1c7a4:	e1a00009 	mov	r0, r9
   1c7a8:	e3a030a0 	mov	r3, #160	; 0xa0
   1c7ac:	e3a02040 	mov	r2, #64	; 0x40
   1c7b0:	e58d700c 	str	r7, [sp, #12]
   1c7b4:	e58d8008 	str	r8, [sp, #8]
   1c7b8:	e58d4000 	str	r4, [sp]
   1c7bc:	ebffdc99 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c7c0:	e3500000 	cmp	r0, #0
   1c7c4:	ba000047 	blt	1c8e8 <CSMSC951xDevice::Configure()+0x384>
   1c7c8:	e1a00005 	mov	r0, r5
   1c7cc:	e58d7010 	str	r7, [sp, #16]
   1c7d0:	ebffcf96 	bl	10630 <CUSBFunction::GetHost() const>
   1c7d4:	e1a09000 	mov	r9, r0
   1c7d8:	e1a00005 	mov	r0, r5
   1c7dc:	ebffcf88 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1c7e0:	e3a03010 	mov	r3, #16
   1c7e4:	e1a01000 	mov	r1, r0
   1c7e8:	e58d3004 	str	r3, [sp, #4]
   1c7ec:	e1a00009 	mov	r0, r9
   1c7f0:	e3a030a0 	mov	r3, #160	; 0xa0
   1c7f4:	e3a02040 	mov	r2, #64	; 0x40
   1c7f8:	e58d700c 	str	r7, [sp, #12]
   1c7fc:	e58d8008 	str	r8, [sp, #8]
   1c800:	e58d4000 	str	r4, [sp]
   1c804:	ebffdc87 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c808:	e3500000 	cmp	r0, #0
   1c80c:	ba000035 	blt	1c8e8 <CSMSC951xDevice::Configure()+0x384>
   1c810:	e2850014 	add	r0, r5, #20
   1c814:	eb0068c7 	bl	36b38 <CNetDevice::AddNetDevice()>
   1c818:	eaffff7d 	b	1c614 <CSMSC951xDevice::Configure()+0xb0>
   1c81c:	e1d430d2 	ldrsb	r3, [r4, #2]
   1c820:	e3a00014 	mov	r0, #20
   1c824:	e3530000 	cmp	r3, #0
   1c828:	ba00001a 	blt	1c898 <CSMSC951xDevice::Configure()+0x334>
   1c82c:	e595301c 	ldr	r3, [r5, #28]
   1c830:	e3530000 	cmp	r3, #0
   1c834:	1affff72 	bne	1c604 <CSMSC951xDevice::Configure()+0xa0>
   1c838:	eb006917 	bl	36c9c <operator new(unsigned int)>
   1c83c:	e1a06000 	mov	r6, r0
   1c840:	e1a00005 	mov	r0, r5
   1c844:	ebffcf64 	bl	105dc <CUSBFunction::GetDevice() const>
   1c848:	e1a02004 	mov	r2, r4
   1c84c:	e1a01000 	mov	r1, r0
   1c850:	e1a00006 	mov	r0, r6
   1c854:	ebffcd6f 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1c858:	e585601c 	str	r6, [r5, #28]
   1c85c:	eaffff77 	b	1c640 <CSMSC951xDevice::Configure()+0xdc>
   1c860:	eb004a93 	bl	2f2b4 <CLogger::Get()>
   1c864:	e59f1098 	ldr	r1, [pc, #152]	; 1c904 <CSMSC951xDevice::Configure()+0x3a0>
   1c868:	e3a02001 	mov	r2, #1
   1c86c:	e30d3e40 	movw	r3, #56896	; 0xde40
   1c870:	e3403003 	movt	r3, #3
   1c874:	eb004c5c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c878:	eaffff67 	b	1c61c <CSMSC951xDevice::Configure()+0xb8>
   1c87c:	eb004a8c 	bl	2f2b4 <CLogger::Get()>
   1c880:	e59f107c 	ldr	r1, [pc, #124]	; 1c904 <CSMSC951xDevice::Configure()+0x3a0>
   1c884:	e3a02001 	mov	r2, #1
   1c888:	e30b3eac 	movw	r3, #48812	; 0xbeac
   1c88c:	e3403003 	movt	r3, #3
   1c890:	eb004c55 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c894:	eaffff5d 	b	1c610 <CSMSC951xDevice::Configure()+0xac>
   1c898:	e5953018 	ldr	r3, [r5, #24]
   1c89c:	e3530000 	cmp	r3, #0
   1c8a0:	1affff57 	bne	1c604 <CSMSC951xDevice::Configure()+0xa0>
   1c8a4:	eb0068fc 	bl	36c9c <operator new(unsigned int)>
   1c8a8:	e1a06000 	mov	r6, r0
   1c8ac:	e1a00005 	mov	r0, r5
   1c8b0:	ebffcf49 	bl	105dc <CUSBFunction::GetDevice() const>
   1c8b4:	e1a02004 	mov	r2, r4
   1c8b8:	e1a01000 	mov	r1, r0
   1c8bc:	e1a00006 	mov	r0, r6
   1c8c0:	ebffcd54 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1c8c4:	e5856018 	str	r6, [r5, #24]
   1c8c8:	eaffff5c 	b	1c640 <CSMSC951xDevice::Configure()+0xdc>
   1c8cc:	eb004a78 	bl	2f2b4 <CLogger::Get()>
   1c8d0:	e59f102c 	ldr	r1, [pc, #44]	; 1c904 <CSMSC951xDevice::Configure()+0x3a0>
   1c8d4:	e3a02001 	mov	r2, #1
   1c8d8:	e30d3e58 	movw	r3, #56920	; 0xde58
   1c8dc:	e3403003 	movt	r3, #3
   1c8e0:	eb004c41 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c8e4:	eaffff49 	b	1c610 <CSMSC951xDevice::Configure()+0xac>
   1c8e8:	eb004a71 	bl	2f2b4 <CLogger::Get()>
   1c8ec:	e59f1010 	ldr	r1, [pc, #16]	; 1c904 <CSMSC951xDevice::Configure()+0x3a0>
   1c8f0:	e3a02001 	mov	r2, #1
   1c8f4:	e30d3e70 	movw	r3, #56944	; 0xde70
   1c8f8:	e3403003 	movt	r3, #3
   1c8fc:	eb004c3a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c900:	eaffff42 	b	1c610 <CSMSC951xDevice::Configure()+0xac>
   1c904:	0003defc 	.word	0x0003defc

0001c908 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1c908:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1c90c:	e92d4070 	push	{r4, r5, r6, lr}
   1c910:	e3a06000 	mov	r6, #0
   1c914:	e59f50d8 	ldr	r5, [pc, #216]	; 1c9f4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xec>
   1c918:	e1a04000 	mov	r4, r0
   1c91c:	e1530006 	cmp	r3, r6
   1c920:	e5805000 	str	r5, [r0]
   1c924:	e5806024 	str	r6, [r0, #36]	; 0x24
   1c928:	1a000027 	bne	1c9cc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xc4>
   1c92c:	e5940020 	ldr	r0, [r4, #32]
   1c930:	e3500000 	cmp	r0, #0
   1c934:	0a000000 	beq	1c93c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x34>
   1c938:	eb0068e9 	bl	36ce4 <operator delete[](void*)>
   1c93c:	e594501c 	ldr	r5, [r4, #28]
   1c940:	e3a03000 	mov	r3, #0
   1c944:	e5843020 	str	r3, [r4, #32]
   1c948:	e1550003 	cmp	r5, r3
   1c94c:	0a000004 	beq	1c964 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x5c>
   1c950:	e1a00005 	mov	r0, r5
   1c954:	ebffcda9 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1c958:	e3a01014 	mov	r1, #20
   1c95c:	e1a00005 	mov	r0, r5
   1c960:	eb0068e5 	bl	36cfc <operator delete(void*, unsigned int)>
   1c964:	e5945018 	ldr	r5, [r4, #24]
   1c968:	e3a03000 	mov	r3, #0
   1c96c:	e584301c 	str	r3, [r4, #28]
   1c970:	e1550003 	cmp	r5, r3
   1c974:	0a000004 	beq	1c98c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x84>
   1c978:	e1a00005 	mov	r0, r5
   1c97c:	ebffcd9f 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1c980:	e3a01014 	mov	r1, #20
   1c984:	e1a00005 	mov	r0, r5
   1c988:	eb0068db 	bl	36cfc <operator delete(void*, unsigned int)>
   1c98c:	e5945014 	ldr	r5, [r4, #20]
   1c990:	e3a03000 	mov	r3, #0
   1c994:	e5843018 	str	r3, [r4, #24]
   1c998:	e1550003 	cmp	r5, r3
   1c99c:	0a000004 	beq	1c9b4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xac>
   1c9a0:	e1a00005 	mov	r0, r5
   1c9a4:	ebffcd95 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1c9a8:	e3a01014 	mov	r1, #20
   1c9ac:	e1a00005 	mov	r0, r5
   1c9b0:	eb0068d1 	bl	36cfc <operator delete(void*, unsigned int)>
   1c9b4:	e3a03000 	mov	r3, #0
   1c9b8:	e1a00004 	mov	r0, r4
   1c9bc:	e5843014 	str	r3, [r4, #20]
   1c9c0:	ebffcdf8 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   1c9c4:	e1a00004 	mov	r0, r4
   1c9c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c9cc:	eb004352 	bl	2d71c <CDeviceNameService::Get()>
   1c9d0:	e285102c 	add	r1, r5, #44	; 0x2c
   1c9d4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   1c9d8:	e1a03006 	mov	r3, r6
   1c9dc:	eb004374 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1c9e0:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   1c9e4:	e3040ed0 	movw	r0, #20176	; 0x4ed0
   1c9e8:	e3400004 	movt	r0, #4
   1c9ec:	eb006a2c 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1c9f0:	eaffffcd 	b	1c92c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x24>
   1c9f4:	0003dfa0 	.word	0x0003dfa0

0001c9f8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1c9f8:	e92d4010 	push	{r4, lr}
   1c9fc:	e1a04000 	mov	r4, r0
   1ca00:	ebffffc0 	bl	1c908 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   1ca04:	e1a00004 	mov	r0, r4
   1ca08:	e3a0102c 	mov	r1, #44	; 0x2c
   1ca0c:	eb0068ba 	bl	36cfc <operator delete(void*, unsigned int)>
   1ca10:	e1a00004 	mov	r0, r4
   1ca14:	e8bd8010 	pop	{r4, pc}

0001ca18 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   1ca18:	e92d4010 	push	{r4, lr}
   1ca1c:	e1a04000 	mov	r4, r0
   1ca20:	ebffce89 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1ca24:	e1a03004 	mov	r3, r4
   1ca28:	e59f101c 	ldr	r1, [pc, #28]	; 1ca4c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x34>
   1ca2c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   1ca30:	e3a02000 	mov	r2, #0
   1ca34:	e1a00004 	mov	r0, r4
   1ca38:	e4831014 	str	r1, [r3], #20
   1ca3c:	f4430a8f 	vst1.32	{d16-d17}, [r3]
   1ca40:	e5842024 	str	r2, [r4, #36]	; 0x24
   1ca44:	e5842028 	str	r2, [r4, #40]	; 0x28
   1ca48:	e8bd8010 	pop	{r4, pc}
   1ca4c:	0003dfa0 	.word	0x0003dfa0

0001ca50 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   1ca50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ca54:	e1a04002 	mov	r4, r2
   1ca58:	e1a07000 	mov	r7, r0
   1ca5c:	e24dd014 	sub	sp, sp, #20
   1ca60:	e1a05001 	mov	r5, r1
   1ca64:	ebffcef1 	bl	10630 <CUSBFunction::GetHost() const>
   1ca68:	e1a06000 	mov	r6, r0
   1ca6c:	e1a00007 	mov	r0, r7
   1ca70:	e6ff4074 	uxth	r4, r4
   1ca74:	ebffcee2 	bl	10604 <CUSBFunction::GetEndpoint0() const>
   1ca78:	e3a03000 	mov	r3, #0
   1ca7c:	e1a01000 	mov	r1, r0
   1ca80:	e3a02020 	mov	r2, #32
   1ca84:	e1a00006 	mov	r0, r6
   1ca88:	e58d400c 	str	r4, [sp, #12]
   1ca8c:	e58d5008 	str	r5, [sp, #8]
   1ca90:	e58d3004 	str	r3, [sp, #4]
   1ca94:	e58d3000 	str	r3, [sp]
   1ca98:	ebffdbe2 	bl	13a28 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1ca9c:	e1e00000 	mvn	r0, r0
   1caa0:	e1a00fa0 	lsr	r0, r0, #31
   1caa4:	e28dd014 	add	sp, sp, #20
   1caa8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001caac <CUSBBluetoothDevice::StartRequest()>:
   1caac:	e5903014 	ldr	r3, [r0, #20]
   1cab0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1cab4:	e3530000 	cmp	r3, #0
   1cab8:	e24dd00c 	sub	sp, sp, #12
   1cabc:	0a000020 	beq	1cb44 <CUSBBluetoothDevice::StartRequest()+0x98>
   1cac0:	e5903020 	ldr	r3, [r0, #32]
   1cac4:	e1a04000 	mov	r4, r0
   1cac8:	e3530000 	cmp	r3, #0
   1cacc:	0a000022 	beq	1cb5c <CUSBBluetoothDevice::StartRequest()+0xb0>
   1cad0:	e3a00070 	mov	r0, #112	; 0x70
   1cad4:	ebffe70d 	bl	16710 <CUSBRequest::operator new(unsigned int)>
   1cad8:	e5946014 	ldr	r6, [r4, #20]
   1cadc:	e5947020 	ldr	r7, [r4, #32]
   1cae0:	e1a05000 	mov	r5, r0
   1cae4:	e1a00006 	mov	r0, r6
   1cae8:	ebffcd59 	bl	10054 <CUSBEndpoint::GetMaxPacketSize() const>
   1caec:	e1a01006 	mov	r1, r6
   1caf0:	e1a03000 	mov	r3, r0
   1caf4:	e3a06000 	mov	r6, #0
   1caf8:	e1a02007 	mov	r2, r7
   1cafc:	e1a00005 	mov	r0, r5
   1cb00:	e58d6000 	str	r6, [sp]
   1cb04:	ebffe637 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1cb08:	e1a03004 	mov	r3, r4
   1cb0c:	e1a02006 	mov	r2, r6
   1cb10:	e1a00005 	mov	r0, r5
   1cb14:	e30c1ca8 	movw	r1, #52392	; 0xcca8
   1cb18:	e3401001 	movt	r1, #1
   1cb1c:	ebffe6dc 	bl	16694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1cb20:	e1a00004 	mov	r0, r4
   1cb24:	ebffcec1 	bl	10630 <CUSBFunction::GetHost() const>
   1cb28:	e5903000 	ldr	r3, [r0]
   1cb2c:	e1a02006 	mov	r2, r6
   1cb30:	e1a01005 	mov	r1, r5
   1cb34:	e5933014 	ldr	r3, [r3, #20]
   1cb38:	e28dd00c 	add	sp, sp, #12
   1cb3c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   1cb40:	e12fff13 	bx	r3
   1cb44:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1cb48:	e3401003 	movt	r1, #3
   1cb4c:	e30d0f1c 	movw	r0, #57116	; 0xdf1c
   1cb50:	e3400003 	movt	r0, #3
   1cb54:	e3a020ac 	mov	r2, #172	; 0xac
   1cb58:	eb003f58 	bl	2c8c0 <assertion_failed>
   1cb5c:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1cb60:	e3401003 	movt	r1, #3
   1cb64:	e30d0f38 	movw	r0, #57144	; 0xdf38
   1cb68:	e3400003 	movt	r0, #3
   1cb6c:	e3a020ad 	mov	r2, #173	; 0xad
   1cb70:	eb003f52 	bl	2c8c0 <assertion_failed>

0001cb74 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   1cb74:	e3510000 	cmp	r1, #0
   1cb78:	e5801024 	str	r1, [r0, #36]	; 0x24
   1cb7c:	0a000000 	beq	1cb84 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   1cb80:	eaffffc9 	b	1caac <CUSBBluetoothDevice::StartRequest()>
   1cb84:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1cb88:	e3401003 	movt	r1, #3
   1cb8c:	e30d0f4c 	movw	r0, #57164	; 0xdf4c
   1cb90:	e3400003 	movt	r0, #3
   1cb94:	e3a020a5 	mov	r2, #165	; 0xa5
   1cb98:	e92d4010 	push	{r4, lr}
   1cb9c:	eb003f47 	bl	2c8c0 <assertion_failed>

0001cba0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   1cba0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cba4:	e2514000 	subs	r4, r1, #0
   1cba8:	0a000031 	beq	1cc74 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   1cbac:	e1a05000 	mov	r5, r0
   1cbb0:	e1a00004 	mov	r0, r4
   1cbb4:	ebffe640 	bl	164bc <CUSBRequest::GetStatus() const>
   1cbb8:	e3500000 	cmp	r0, #0
   1cbbc:	0a00001a 	beq	1cc2c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x8c>
   1cbc0:	e5956024 	ldr	r6, [r5, #36]	; 0x24
   1cbc4:	e3560000 	cmp	r6, #0
   1cbc8:	0a00002f 	beq	1cc8c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xec>
   1cbcc:	e5957020 	ldr	r7, [r5, #32]
   1cbd0:	e3570000 	cmp	r7, #0
   1cbd4:	0a000020 	beq	1cc5c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   1cbd8:	e1a00004 	mov	r0, r4
   1cbdc:	ebffe638 	bl	164c4 <CUSBRequest::GetResultLength() const>
   1cbe0:	e1a01000 	mov	r1, r0
   1cbe4:	e1a00007 	mov	r0, r7
   1cbe8:	e12fff36 	blx	r6
   1cbec:	e1a00004 	mov	r0, r4
   1cbf0:	ebffe620 	bl	16478 <CUSBRequest::~CUSBRequest()>
   1cbf4:	e3a01070 	mov	r1, #112	; 0x70
   1cbf8:	e1a00004 	mov	r0, r4
   1cbfc:	ebffe6d9 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   1cc00:	e1a00005 	mov	r0, r5
   1cc04:	ebffffa8 	bl	1caac <CUSBBluetoothDevice::StartRequest()>
   1cc08:	e3500000 	cmp	r0, #0
   1cc0c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   1cc10:	eb0049a7 	bl	2f2b4 <CLogger::Get()>
   1cc14:	e30c3668 	movw	r3, #50792	; 0xc668
   1cc18:	e3403003 	movt	r3, #3
   1cc1c:	e59f1080 	ldr	r1, [pc, #128]	; 1cca4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   1cc20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1cc24:	e3a02001 	mov	r2, #1
   1cc28:	ea004b6f 	b	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cc2c:	eb0049a0 	bl	2f2b4 <CLogger::Get()>
   1cc30:	e59f106c 	ldr	r1, [pc, #108]	; 1cca4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   1cc34:	e3a02002 	mov	r2, #2
   1cc38:	e30d3f64 	movw	r3, #57188	; 0xdf64
   1cc3c:	e3403003 	movt	r3, #3
   1cc40:	eb004b69 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cc44:	e1a00004 	mov	r0, r4
   1cc48:	ebffe60a 	bl	16478 <CUSBRequest::~CUSBRequest()>
   1cc4c:	e1a00004 	mov	r0, r4
   1cc50:	e3a01070 	mov	r1, #112	; 0x70
   1cc54:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1cc58:	eaffe6c2 	b	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   1cc5c:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1cc60:	e3401003 	movt	r1, #3
   1cc64:	e30d0f38 	movw	r0, #57144	; 0xdf38
   1cc68:	e3400003 	movt	r0, #3
   1cc6c:	e3a020c1 	mov	r2, #193	; 0xc1
   1cc70:	eb003f12 	bl	2c8c0 <assertion_failed>
   1cc74:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1cc78:	e3401003 	movt	r1, #3
   1cc7c:	e30a0b00 	movw	r0, #43776	; 0xab00
   1cc80:	e3400003 	movt	r0, #3
   1cc84:	e3a020ba 	mov	r2, #186	; 0xba
   1cc88:	eb003f0c 	bl	2c8c0 <assertion_failed>
   1cc8c:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1cc90:	e3401003 	movt	r1, #3
   1cc94:	e30d0f4c 	movw	r0, #57164	; 0xdf4c
   1cc98:	e3400003 	movt	r0, #3
   1cc9c:	e3a020c0 	mov	r2, #192	; 0xc0
   1cca0:	eb003f06 	bl	2c8c0 <assertion_failed>
   1cca4:	0003dfd0 	.word	0x0003dfd0

0001cca8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1cca8:	e1a01000 	mov	r1, r0
   1ccac:	e2520000 	subs	r0, r2, #0
   1ccb0:	0a000000 	beq	1ccb8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   1ccb4:	eaffffb9 	b	1cba0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   1ccb8:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1ccbc:	e3401003 	movt	r1, #3
   1ccc0:	e30a0a18 	movw	r0, #43544	; 0xaa18
   1ccc4:	e3400003 	movt	r0, #3
   1ccc8:	e3a020d7 	mov	r2, #215	; 0xd7
   1cccc:	e92d4010 	push	{r4, lr}
   1ccd0:	eb003efa 	bl	2c8c0 <assertion_failed>

0001ccd4 <CUSBBluetoothDevice::Configure()>:
   1ccd4:	e92d4070 	push	{r4, r5, r6, lr}
   1ccd8:	e1a05000 	mov	r5, r0
   1ccdc:	e24dd008 	sub	sp, sp, #8
   1cce0:	ebffceb1 	bl	107ac <CUSBFunction::GetInterfaceNumber() const>
   1cce4:	e3500000 	cmp	r0, #0
   1cce8:	1a00004b 	bne	1ce1c <CUSBBluetoothDevice::Configure()+0x148>
   1ccec:	e1a00005 	mov	r0, r5
   1ccf0:	ebffce2d 	bl	105ac <CUSBFunction::GetNumEndpoints() const>
   1ccf4:	e3500003 	cmp	r0, #3
   1ccf8:	1a000021 	bne	1cd84 <CUSBBluetoothDevice::Configure()+0xb0>
   1ccfc:	e3a01005 	mov	r1, #5
   1cd00:	e1a00005 	mov	r0, r5
   1cd04:	ebffce54 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1cd08:	e2504000 	subs	r4, r0, #0
   1cd0c:	0a000013 	beq	1cd60 <CUSBBluetoothDevice::Configure()+0x8c>
   1cd10:	e5d43003 	ldrb	r3, [r4, #3]
   1cd14:	e203303f 	and	r3, r3, #63	; 0x3f
   1cd18:	e3530002 	cmp	r3, #2
   1cd1c:	0a00001f 	beq	1cda0 <CUSBBluetoothDevice::Configure()+0xcc>
   1cd20:	e3530003 	cmp	r3, #3
   1cd24:	1afffff4 	bne	1ccfc <CUSBBluetoothDevice::Configure()+0x28>
   1cd28:	e5953014 	ldr	r3, [r5, #20]
   1cd2c:	e3530000 	cmp	r3, #0
   1cd30:	1a000013 	bne	1cd84 <CUSBBluetoothDevice::Configure()+0xb0>
   1cd34:	e3a00014 	mov	r0, #20
   1cd38:	eb0067d7 	bl	36c9c <operator new(unsigned int)>
   1cd3c:	e1a06000 	mov	r6, r0
   1cd40:	e1a00005 	mov	r0, r5
   1cd44:	ebffce24 	bl	105dc <CUSBFunction::GetDevice() const>
   1cd48:	e1a02004 	mov	r2, r4
   1cd4c:	e1a01000 	mov	r1, r0
   1cd50:	e1a00006 	mov	r0, r6
   1cd54:	ebffcc2f 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1cd58:	e5856014 	str	r6, [r5, #20]
   1cd5c:	eaffffe6 	b	1ccfc <CUSBBluetoothDevice::Configure()+0x28>
   1cd60:	e5953018 	ldr	r3, [r5, #24]
   1cd64:	e3530000 	cmp	r3, #0
   1cd68:	0a000005 	beq	1cd84 <CUSBBluetoothDevice::Configure()+0xb0>
   1cd6c:	e595301c 	ldr	r3, [r5, #28]
   1cd70:	e3530000 	cmp	r3, #0
   1cd74:	0a000002 	beq	1cd84 <CUSBBluetoothDevice::Configure()+0xb0>
   1cd78:	e5953014 	ldr	r3, [r5, #20]
   1cd7c:	e3530000 	cmp	r3, #0
   1cd80:	1a00002c 	bne	1ce38 <CUSBBluetoothDevice::Configure()+0x164>
   1cd84:	e59f1140 	ldr	r1, [pc, #320]	; 1cecc <CUSBBluetoothDevice::Configure()+0x1f8>
   1cd88:	e1a00005 	mov	r0, r5
   1cd8c:	ebffce3d 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1cd90:	e3a04000 	mov	r4, #0
   1cd94:	e1a00004 	mov	r0, r4
   1cd98:	e28dd008 	add	sp, sp, #8
   1cd9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cda0:	e1d430d2 	ldrsb	r3, [r4, #2]
   1cda4:	e3530000 	cmp	r3, #0
   1cda8:	ba00000d 	blt	1cde4 <CUSBBluetoothDevice::Configure()+0x110>
   1cdac:	e595301c 	ldr	r3, [r5, #28]
   1cdb0:	e3530000 	cmp	r3, #0
   1cdb4:	1afffff2 	bne	1cd84 <CUSBBluetoothDevice::Configure()+0xb0>
   1cdb8:	e3a00014 	mov	r0, #20
   1cdbc:	eb0067b6 	bl	36c9c <operator new(unsigned int)>
   1cdc0:	e1a06000 	mov	r6, r0
   1cdc4:	e1a00005 	mov	r0, r5
   1cdc8:	ebffce03 	bl	105dc <CUSBFunction::GetDevice() const>
   1cdcc:	e1a02004 	mov	r2, r4
   1cdd0:	e1a01000 	mov	r1, r0
   1cdd4:	e1a00006 	mov	r0, r6
   1cdd8:	ebffcc0e 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1cddc:	e585601c 	str	r6, [r5, #28]
   1cde0:	eaffffc5 	b	1ccfc <CUSBBluetoothDevice::Configure()+0x28>
   1cde4:	e5953018 	ldr	r3, [r5, #24]
   1cde8:	e3530000 	cmp	r3, #0
   1cdec:	1affffe4 	bne	1cd84 <CUSBBluetoothDevice::Configure()+0xb0>
   1cdf0:	e3a00014 	mov	r0, #20
   1cdf4:	eb0067a8 	bl	36c9c <operator new(unsigned int)>
   1cdf8:	e1a06000 	mov	r6, r0
   1cdfc:	e1a00005 	mov	r0, r5
   1ce00:	ebffcdf5 	bl	105dc <CUSBFunction::GetDevice() const>
   1ce04:	e1a02004 	mov	r2, r4
   1ce08:	e1a01000 	mov	r1, r0
   1ce0c:	e1a00006 	mov	r0, r6
   1ce10:	ebffcc00 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1ce14:	e5856018 	str	r6, [r5, #24]
   1ce18:	eaffffb7 	b	1ccfc <CUSBBluetoothDevice::Configure()+0x28>
   1ce1c:	eb004924 	bl	2f2b4 <CLogger::Get()>
   1ce20:	e59f10a4 	ldr	r1, [pc, #164]	; 1cecc <CUSBBluetoothDevice::Configure()+0x1f8>
   1ce24:	e3a02002 	mov	r2, #2
   1ce28:	e30d3f74 	movw	r3, #57204	; 0xdf74
   1ce2c:	e3403003 	movt	r3, #3
   1ce30:	eb004aed 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ce34:	eaffffd5 	b	1cd90 <CUSBBluetoothDevice::Configure()+0xbc>
   1ce38:	e1a00005 	mov	r0, r5
   1ce3c:	ebffcd13 	bl	10290 <CUSBFunction::Configure()>
   1ce40:	e2504000 	subs	r4, r0, #0
   1ce44:	0a000013 	beq	1ce98 <CUSBBluetoothDevice::Configure()+0x1c4>
   1ce48:	e5950014 	ldr	r0, [r5, #20]
   1ce4c:	ebffcc80 	bl	10054 <CUSBEndpoint::GetMaxPacketSize() const>
   1ce50:	eb006797 	bl	36cb4 <operator new[](unsigned int)>
   1ce54:	e5956028 	ldr	r6, [r5, #40]	; 0x28
   1ce58:	e5850020 	str	r0, [r5, #32]
   1ce5c:	e3560000 	cmp	r6, #0
   1ce60:	1a000013 	bne	1ceb4 <CUSBBluetoothDevice::Configure()+0x1e0>
   1ce64:	e59f2060 	ldr	r2, [pc, #96]	; 1cecc <CUSBBluetoothDevice::Configure()+0x1f8>
   1ce68:	e3a01001 	mov	r1, #1
   1ce6c:	e3040ed0 	movw	r0, #20176	; 0x4ed0
   1ce70:	e3400004 	movt	r0, #4
   1ce74:	eb0068d8 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   1ce78:	e5850028 	str	r0, [r5, #40]	; 0x28
   1ce7c:	eb004226 	bl	2d71c <CDeviceNameService::Get()>
   1ce80:	e5952028 	ldr	r2, [r5, #40]	; 0x28
   1ce84:	e59f1044 	ldr	r1, [pc, #68]	; 1ced0 <CUSBBluetoothDevice::Configure()+0x1fc>
   1ce88:	e1a03005 	mov	r3, r5
   1ce8c:	e58d6000 	str	r6, [sp]
   1ce90:	eb00422d 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1ce94:	eaffffbe 	b	1cd94 <CUSBBluetoothDevice::Configure()+0xc0>
   1ce98:	eb004905 	bl	2f2b4 <CLogger::Get()>
   1ce9c:	e59f1028 	ldr	r1, [pc, #40]	; 1cecc <CUSBBluetoothDevice::Configure()+0x1f8>
   1cea0:	e3a02001 	mov	r2, #1
   1cea4:	e30b3eac 	movw	r3, #48812	; 0xbeac
   1cea8:	e3403003 	movt	r3, #3
   1ceac:	eb004ace 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ceb0:	eaffffb6 	b	1cd90 <CUSBBluetoothDevice::Configure()+0xbc>
   1ceb4:	e30d1f08 	movw	r1, #57096	; 0xdf08
   1ceb8:	e3401003 	movt	r1, #3
   1cebc:	e30c0d74 	movw	r0, #52596	; 0xcd74
   1cec0:	e3400003 	movt	r0, #3
   1cec4:	e3a0208f 	mov	r2, #143	; 0x8f
   1cec8:	eb003e7c 	bl	2c8c0 <assertion_failed>
   1cecc:	0003dfd0 	.word	0x0003dfd0
   1ced0:	0003dfcc 	.word	0x0003dfcc

0001ced4 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE>:
   1ced4:	e92d4010 	push	{r4, lr}
   1ced8:	e3044ed0 	movw	r4, #20176	; 0x4ed0
   1cedc:	e3404004 	movt	r4, #4
   1cee0:	e3a0203f 	mov	r2, #63	; 0x3f
   1cee4:	e3a01001 	mov	r1, #1
   1cee8:	e1a00004 	mov	r0, r4
   1ceec:	eb0068a5 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1cef0:	e1a00004 	mov	r0, r4
   1cef4:	e3042f78 	movw	r2, #20344	; 0x4f78
   1cef8:	e3402004 	movt	r2, #4
   1cefc:	e30711d8 	movw	r1, #29144	; 0x71d8
   1cf00:	e3401003 	movt	r1, #3
   1cf04:	e8bd4010 	pop	{r4, lr}
   1cf08:	ea005f69 	b	34cb4 <__aeabi_atexit>

0001cf0c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1cf0c:	e2800020 	add	r0, r0, #32
   1cf10:	e12fff1e 	bx	lr

0001cf14 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1cf14:	e92d4070 	push	{r4, r5, r6, lr}
   1cf18:	e1a04000 	mov	r4, r0
   1cf1c:	e59f3070 	ldr	r3, [pc, #112]	; 1cf94 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   1cf20:	e590501c 	ldr	r5, [r0, #28]
   1cf24:	e2832040 	add	r2, r3, #64	; 0x40
   1cf28:	e5803000 	str	r3, [r0]
   1cf2c:	e3550000 	cmp	r5, #0
   1cf30:	e5802014 	str	r2, [r0, #20]
   1cf34:	0a000004 	beq	1cf4c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   1cf38:	e1a00005 	mov	r0, r5
   1cf3c:	ebffcc2f 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1cf40:	e3a01014 	mov	r1, #20
   1cf44:	e1a00005 	mov	r0, r5
   1cf48:	eb00676b 	bl	36cfc <operator delete(void*, unsigned int)>
   1cf4c:	e5945018 	ldr	r5, [r4, #24]
   1cf50:	e3a03000 	mov	r3, #0
   1cf54:	e584301c 	str	r3, [r4, #28]
   1cf58:	e1550003 	cmp	r5, r3
   1cf5c:	0a000004 	beq	1cf74 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   1cf60:	e1a00005 	mov	r0, r5
   1cf64:	ebffcc25 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1cf68:	e3a01014 	mov	r1, #20
   1cf6c:	e1a00005 	mov	r0, r5
   1cf70:	eb006761 	bl	36cfc <operator delete(void*, unsigned int)>
   1cf74:	e3a03000 	mov	r3, #0
   1cf78:	e2840020 	add	r0, r4, #32
   1cf7c:	e5843018 	str	r3, [r4, #24]
   1cf80:	eb006641 	bl	3688c <CMACAddress::~CMACAddress()>
   1cf84:	e1a00004 	mov	r0, r4
   1cf88:	ebffcc86 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   1cf8c:	e1a00004 	mov	r0, r4
   1cf90:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cf94:	0003e024 	.word	0x0003e024

0001cf98 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1cf98:	e2400014 	sub	r0, r0, #20
   1cf9c:	eaffffdc 	b	1cf14 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

0001cfa0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1cfa0:	e92d4010 	push	{r4, lr}
   1cfa4:	e1a04000 	mov	r4, r0
   1cfa8:	ebffffd9 	bl	1cf14 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1cfac:	e1a00004 	mov	r0, r4
   1cfb0:	e3a01028 	mov	r1, #40	; 0x28
   1cfb4:	eb006750 	bl	36cfc <operator delete(void*, unsigned int)>
   1cfb8:	e1a00004 	mov	r0, r4
   1cfbc:	e8bd8010 	pop	{r4, pc}

0001cfc0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   1cfc0:	e590301c 	ldr	r3, [r0, #28]
   1cfc4:	e92d4070 	push	{r4, r5, r6, lr}
   1cfc8:	e3530000 	cmp	r3, #0
   1cfcc:	e24dd008 	sub	sp, sp, #8
   1cfd0:	0a000011 	beq	1d01c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   1cfd4:	e1a05001 	mov	r5, r1
   1cfd8:	e3510000 	cmp	r1, #0
   1cfdc:	0a000014 	beq	1d034 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x74>
   1cfe0:	e1a06002 	mov	r6, r2
   1cfe4:	e3520d19 	cmp	r2, #1600	; 0x640
   1cfe8:	8a000017 	bhi	1d04c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1cfec:	e1a04000 	mov	r4, r0
   1cff0:	ebffcd8e 	bl	10630 <CUSBFunction::GetHost() const>
   1cff4:	e3a0c000 	mov	ip, #0
   1cff8:	e1a03006 	mov	r3, r6
   1cffc:	e1a02005 	mov	r2, r5
   1d000:	e594101c 	ldr	r1, [r4, #28]
   1d004:	e58dc000 	str	ip, [sp]
   1d008:	ebffdaed 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1d00c:	e1e00000 	mvn	r0, r0
   1d010:	e1a00fa0 	lsr	r0, r0, #31
   1d014:	e28dd008 	add	sp, sp, #8
   1d018:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d01c:	e30d1fd8 	movw	r1, #57304	; 0xdfd8
   1d020:	e3401003 	movt	r1, #3
   1d024:	e30d0bc0 	movw	r0, #56256	; 0xdbc0
   1d028:	e3400003 	movt	r0, #3
   1d02c:	e3a020aa 	mov	r2, #170	; 0xaa
   1d030:	eb003e22 	bl	2c8c0 <assertion_failed>
   1d034:	e30d1fd8 	movw	r1, #57304	; 0xdfd8
   1d038:	e3401003 	movt	r1, #3
   1d03c:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1d040:	e3400003 	movt	r0, #3
   1d044:	e3a020ab 	mov	r2, #171	; 0xab
   1d048:	eb003e1c 	bl	2c8c0 <assertion_failed>
   1d04c:	e30d1fd8 	movw	r1, #57304	; 0xdfd8
   1d050:	e3401003 	movt	r1, #3
   1d054:	e30d0fec 	movw	r0, #57324	; 0xdfec
   1d058:	e3400003 	movt	r0, #3
   1d05c:	e3a020ac 	mov	r2, #172	; 0xac
   1d060:	eb003e16 	bl	2c8c0 <assertion_failed>

0001d064 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   1d064:	e2400014 	sub	r0, r0, #20
   1d068:	eaffffd4 	b	1cfc0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

0001d06c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1d06c:	e1a03001 	mov	r3, r1
   1d070:	e92d4070 	push	{r4, r5, r6, lr}
   1d074:	e5901018 	ldr	r1, [r0, #24]
   1d078:	e24dd078 	sub	sp, sp, #120	; 0x78
   1d07c:	e3510000 	cmp	r1, #0
   1d080:	0a000027 	beq	1d124 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb8>
   1d084:	e3530000 	cmp	r3, #0
   1d088:	0a00002b 	beq	1d13c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   1d08c:	e1a04000 	mov	r4, r0
   1d090:	e3a05000 	mov	r5, #0
   1d094:	e1a06002 	mov	r6, r2
   1d098:	e28d0008 	add	r0, sp, #8
   1d09c:	e1a02003 	mov	r2, r3
   1d0a0:	e58d5000 	str	r5, [sp]
   1d0a4:	e3a03d19 	mov	r3, #1600	; 0x640
   1d0a8:	ebffe4ce 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1d0ac:	e28d0008 	add	r0, sp, #8
   1d0b0:	ebffe591 	bl	166fc <CUSBRequest::SetCompleteOnNAK()>
   1d0b4:	e1a00004 	mov	r0, r4
   1d0b8:	ebffcd5c 	bl	10630 <CUSBFunction::GetHost() const>
   1d0bc:	e5903000 	ldr	r3, [r0]
   1d0c0:	e1a02005 	mov	r2, r5
   1d0c4:	e28d1008 	add	r1, sp, #8
   1d0c8:	e5933010 	ldr	r3, [r3, #16]
   1d0cc:	e12fff33 	blx	r3
   1d0d0:	e2504000 	subs	r4, r0, #0
   1d0d4:	1a000005 	bne	1d0f0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   1d0d8:	e3a04000 	mov	r4, #0
   1d0dc:	e28d0008 	add	r0, sp, #8
   1d0e0:	ebffe4e4 	bl	16478 <CUSBRequest::~CUSBRequest()>
   1d0e4:	e1a00004 	mov	r0, r4
   1d0e8:	e28dd078 	add	sp, sp, #120	; 0x78
   1d0ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d0f0:	e28d0008 	add	r0, sp, #8
   1d0f4:	ebffe4f2 	bl	164c4 <CUSBRequest::GetResultLength() const>
   1d0f8:	e3500000 	cmp	r0, #0
   1d0fc:	0afffff5 	beq	1d0d8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1d100:	e3560000 	cmp	r6, #0
   1d104:	15860000 	strne	r0, [r6]
   1d108:	1afffff3 	bne	1d0dc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   1d10c:	e30d1fd8 	movw	r1, #57304	; 0xdfd8
   1d110:	e3401003 	movt	r1, #3
   1d114:	e30d0bac 	movw	r0, #56236	; 0xdbac
   1d118:	e3400003 	movt	r0, #3
   1d11c:	e3a020c3 	mov	r2, #195	; 0xc3
   1d120:	eb003de6 	bl	2c8c0 <assertion_failed>
   1d124:	e30d1fd8 	movw	r1, #57304	; 0xdfd8
   1d128:	e3401003 	movt	r1, #3
   1d12c:	e30d0b38 	movw	r0, #56120	; 0xdb38
   1d130:	e3400003 	movt	r0, #3
   1d134:	e3a020b2 	mov	r2, #178	; 0xb2
   1d138:	eb003de0 	bl	2c8c0 <assertion_failed>
   1d13c:	e30d1fd8 	movw	r1, #57304	; 0xdfd8
   1d140:	e3401003 	movt	r1, #3
   1d144:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1d148:	e3400003 	movt	r0, #3
   1d14c:	e3a020b3 	mov	r2, #179	; 0xb3
   1d150:	eb003dda 	bl	2c8c0 <assertion_failed>

0001d154 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1d154:	e2400014 	sub	r0, r0, #20
   1d158:	eaffffc3 	b	1d06c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

0001d15c <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   1d15c:	e280000c 	add	r0, r0, #12
   1d160:	e12fff1e 	bx	lr

0001d164 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1d164:	e92d4010 	push	{r4, lr}
   1d168:	e2404014 	sub	r4, r0, #20
   1d16c:	e1a00004 	mov	r0, r4
   1d170:	ebffff67 	bl	1cf14 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1d174:	e1a00004 	mov	r0, r4
   1d178:	e3a01028 	mov	r1, #40	; 0x28
   1d17c:	eb0066de 	bl	36cfc <operator delete(void*, unsigned int)>
   1d180:	e1a00004 	mov	r0, r4
   1d184:	e8bd8010 	pop	{r4, pc}

0001d188 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   1d188:	e92d4010 	push	{r4, lr}
   1d18c:	e1a04000 	mov	r4, r0
   1d190:	ebffccad 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1d194:	e30e301c 	movw	r3, #57372	; 0xe01c
   1d198:	e3403003 	movt	r3, #3
   1d19c:	e2831008 	add	r1, r3, #8
   1d1a0:	e3a02000 	mov	r2, #0
   1d1a4:	e2833048 	add	r3, r3, #72	; 0x48
   1d1a8:	e2840020 	add	r0, r4, #32
   1d1ac:	e5841000 	str	r1, [r4]
   1d1b0:	e5843014 	str	r3, [r4, #20]
   1d1b4:	e5842018 	str	r2, [r4, #24]
   1d1b8:	e584201c 	str	r2, [r4, #28]
   1d1bc:	eb00659e 	bl	3683c <CMACAddress::CMACAddress()>
   1d1c0:	e1a00004 	mov	r0, r4
   1d1c4:	e8bd8010 	pop	{r4, pc}

0001d1c8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   1d1c8:	e92d4030 	push	{r4, r5, lr}
   1d1cc:	e1a04001 	mov	r4, r1
   1d1d0:	e1a05000 	mov	r5, r0
   1d1d4:	e24dd01c 	sub	sp, sp, #28
   1d1d8:	ebffccff 	bl	105dc <CUSBFunction::GetDevice() const>
   1d1dc:	e1a01000 	mov	r1, r0
   1d1e0:	e28d000c 	add	r0, sp, #12
   1d1e4:	ebffea06 	bl	17a04 <CUSBString::CUSBString(CUSBDevice*)>
   1d1e8:	e3540000 	cmp	r4, #0
   1d1ec:	1a000005 	bne	1d208 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   1d1f0:	e3a04000 	mov	r4, #0
   1d1f4:	e28d000c 	add	r0, sp, #12
   1d1f8:	ebffea46 	bl	17b18 <CUSBString::~CUSBString()>
   1d1fc:	e1a00004 	mov	r0, r4
   1d200:	e28dd01c 	add	sp, sp, #28
   1d204:	e8bd8030 	pop	{r4, r5, pc}
   1d208:	e28d000c 	add	r0, sp, #12
   1d20c:	ebffeae8 	bl	17db4 <CUSBString::GetLanguageID()>
   1d210:	e1a01004 	mov	r1, r4
   1d214:	e1a02000 	mov	r2, r0
   1d218:	e28d000c 	add	r0, sp, #12
   1d21c:	ebffea4d 	bl	17b58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   1d220:	e2504000 	subs	r4, r0, #0
   1d224:	0afffff1 	beq	1d1f0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1d228:	e28d000c 	add	r0, sp, #12
   1d22c:	ebffeade 	bl	17dac <CUSBString::Get() const>
   1d230:	e3500000 	cmp	r0, #0
   1d234:	12801002 	addne	r1, r0, #2
   1d238:	128dc004 	addne	ip, sp, #4
   1d23c:	1280000e 	addne	r0, r0, #14
   1d240:	0a000019 	beq	1d2ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe4>
   1d244:	e15130d2 	ldrsb	r3, [r1, #-2]
   1d248:	e3530039 	cmp	r3, #57	; 0x39
   1d24c:	c2432007 	subgt	r2, r3, #7
   1d250:	d6ef2073 	uxtble	r2, r3
   1d254:	c6ef2072 	uxtbgt	r2, r2
   1d258:	e2422030 	sub	r2, r2, #48	; 0x30
   1d25c:	e6ef2072 	uxtb	r2, r2
   1d260:	e352000f 	cmp	r2, #15
   1d264:	8affffe1 	bhi	1d1f0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1d268:	e15130d1 	ldrsb	r3, [r1, #-1]
   1d26c:	e3530039 	cmp	r3, #57	; 0x39
   1d270:	c2433007 	subgt	r3, r3, #7
   1d274:	e6ef3073 	uxtb	r3, r3
   1d278:	e2433030 	sub	r3, r3, #48	; 0x30
   1d27c:	e6ef3073 	uxtb	r3, r3
   1d280:	e353000f 	cmp	r3, #15
   1d284:	8affffd9 	bhi	1d1f0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1d288:	e2811002 	add	r1, r1, #2
   1d28c:	e1833202 	orr	r3, r3, r2, lsl #4
   1d290:	e1500001 	cmp	r0, r1
   1d294:	e4cc3001 	strb	r3, [ip], #1
   1d298:	1affffe9 	bne	1d244 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   1d29c:	e28d1004 	add	r1, sp, #4
   1d2a0:	e2850020 	add	r0, r5, #32
   1d2a4:	eb0065ad 	bl	36960 <CMACAddress::Set(unsigned char const*)>
   1d2a8:	eaffffd1 	b	1d1f4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1d2ac:	e30d1fd8 	movw	r1, #57304	; 0xdfd8
   1d2b0:	e3401003 	movt	r1, #3
   1d2b4:	e30e000c 	movw	r0, #57356	; 0xe00c
   1d2b8:	e3400003 	movt	r0, #3
   1d2bc:	e3a020d3 	mov	r2, #211	; 0xd3
   1d2c0:	eb003d7e 	bl	2c8c0 <assertion_failed>

0001d2c4 <CUSBCDCEthernetDevice::Configure()>:
   1d2c4:	e92d4070 	push	{r4, r5, r6, lr}
   1d2c8:	e1a05000 	mov	r5, r0
   1d2cc:	e24dd018 	sub	sp, sp, #24
   1d2d0:	ea000002 	b	1d2e0 <CUSBCDCEthernetDevice::Configure()+0x1c>
   1d2d4:	e5d43002 	ldrb	r3, [r4, #2]
   1d2d8:	e353000f 	cmp	r3, #15
   1d2dc:	0a000014 	beq	1d334 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d2e0:	e3a01024 	mov	r1, #36	; 0x24
   1d2e4:	e1a00005 	mov	r0, r5
   1d2e8:	ebffccdb 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1d2ec:	e2504000 	subs	r4, r0, #0
   1d2f0:	1afffff7 	bne	1d2d4 <CUSBCDCEthernetDevice::Configure()+0x10>
   1d2f4:	e59f11e4 	ldr	r1, [pc, #484]	; 1d4e0 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d2f8:	e1a00005 	mov	r0, r5
   1d2fc:	ebffcce1 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1d300:	e3a04000 	mov	r4, #0
   1d304:	e1a00004 	mov	r0, r4
   1d308:	e28dd018 	add	sp, sp, #24
   1d30c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d310:	e5d03006 	ldrb	r3, [r0, #6]
   1d314:	e3530000 	cmp	r3, #0
   1d318:	1a000005 	bne	1d334 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d31c:	e5d03007 	ldrb	r3, [r0, #7]
   1d320:	e3530000 	cmp	r3, #0
   1d324:	1a000002 	bne	1d334 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d328:	e5d03004 	ldrb	r3, [r0, #4]
   1d32c:	e3530001 	cmp	r3, #1
   1d330:	8a000008 	bhi	1d358 <CUSBCDCEthernetDevice::Configure()+0x94>
   1d334:	e3a01004 	mov	r1, #4
   1d338:	e1a00005 	mov	r0, r5
   1d33c:	ebffccc6 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1d340:	e3500000 	cmp	r0, #0
   1d344:	0affffea 	beq	1d2f4 <CUSBCDCEthernetDevice::Configure()+0x30>
   1d348:	e5d03005 	ldrb	r3, [r0, #5]
   1d34c:	e353000a 	cmp	r3, #10
   1d350:	1afffff7 	bne	1d334 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d354:	eaffffed 	b	1d310 <CUSBCDCEthernetDevice::Configure()+0x4c>
   1d358:	e5d41003 	ldrb	r1, [r4, #3]
   1d35c:	e1a00005 	mov	r0, r5
   1d360:	ebffff98 	bl	1d1c8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   1d364:	e3500000 	cmp	r0, #0
   1d368:	0a00002b 	beq	1d41c <CUSBCDCEthernetDevice::Configure()+0x158>
   1d36c:	e28d0008 	add	r0, sp, #8
   1d370:	eb005879 	bl	3355c <CString::CString()>
   1d374:	e28d1008 	add	r1, sp, #8
   1d378:	e2850020 	add	r0, r5, #32
   1d37c:	eb0065ca 	bl	36aac <CMACAddress::Format(CString*) const>
   1d380:	eb0047cb 	bl	2f2b4 <CLogger::Get()>
   1d384:	e1a04000 	mov	r4, r0
   1d388:	e28d0008 	add	r0, sp, #8
   1d38c:	eb0058aa 	bl	3363c <CString::operator char const*() const>
   1d390:	e59f1148 	ldr	r1, [pc, #328]	; 1d4e0 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d394:	e1a03000 	mov	r3, r0
   1d398:	e3a02004 	mov	r2, #4
   1d39c:	e58d3000 	str	r3, [sp]
   1d3a0:	e1a00004 	mov	r0, r4
   1d3a4:	e30d3c60 	movw	r3, #56416	; 0xdc60
   1d3a8:	e3403003 	movt	r3, #3
   1d3ac:	eb00498e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d3b0:	ea000003 	b	1d3c4 <CUSBCDCEthernetDevice::Configure()+0x100>
   1d3b4:	e5d43003 	ldrb	r3, [r4, #3]
   1d3b8:	e203303f 	and	r3, r3, #63	; 0x3f
   1d3bc:	e3530002 	cmp	r3, #2
   1d3c0:	0a00001c 	beq	1d438 <CUSBCDCEthernetDevice::Configure()+0x174>
   1d3c4:	e3a01005 	mov	r1, #5
   1d3c8:	e1a00005 	mov	r0, r5
   1d3cc:	ebffcca2 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1d3d0:	e2504000 	subs	r4, r0, #0
   1d3d4:	1afffff6 	bne	1d3b4 <CUSBCDCEthernetDevice::Configure()+0xf0>
   1d3d8:	e5953018 	ldr	r3, [r5, #24]
   1d3dc:	e3530000 	cmp	r3, #0
   1d3e0:	0a00002d 	beq	1d49c <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d3e4:	e595301c 	ldr	r3, [r5, #28]
   1d3e8:	e3530000 	cmp	r3, #0
   1d3ec:	0a00002a 	beq	1d49c <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d3f0:	e1a00005 	mov	r0, r5
   1d3f4:	ebffcba5 	bl	10290 <CUSBFunction::Configure()>
   1d3f8:	e2504000 	subs	r4, r0, #0
   1d3fc:	0a00001e 	beq	1d47c <CUSBCDCEthernetDevice::Configure()+0x1b8>
   1d400:	e2850014 	add	r0, r5, #20
   1d404:	eb0065cb 	bl	36b38 <CNetDevice::AddNetDevice()>
   1d408:	e28d0008 	add	r0, sp, #8
   1d40c:	eb00581f 	bl	33490 <CString::~CString()>
   1d410:	e1a00004 	mov	r0, r4
   1d414:	e28dd018 	add	sp, sp, #24
   1d418:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d41c:	eb0047a4 	bl	2f2b4 <CLogger::Get()>
   1d420:	e59f10b8 	ldr	r1, [pc, #184]	; 1d4e0 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d424:	e3a02001 	mov	r2, #1
   1d428:	e30d3e40 	movw	r3, #56896	; 0xde40
   1d42c:	e3403003 	movt	r3, #3
   1d430:	eb00496d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d434:	eaffffb1 	b	1d300 <CUSBCDCEthernetDevice::Configure()+0x3c>
   1d438:	e1d430d2 	ldrsb	r3, [r4, #2]
   1d43c:	e3a00014 	mov	r0, #20
   1d440:	e3530000 	cmp	r3, #0
   1d444:	ba000018 	blt	1d4ac <CUSBCDCEthernetDevice::Configure()+0x1e8>
   1d448:	e595301c 	ldr	r3, [r5, #28]
   1d44c:	e3530000 	cmp	r3, #0
   1d450:	1a000011 	bne	1d49c <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d454:	eb006610 	bl	36c9c <operator new(unsigned int)>
   1d458:	e1a06000 	mov	r6, r0
   1d45c:	e1a00005 	mov	r0, r5
   1d460:	ebffcc5d 	bl	105dc <CUSBFunction::GetDevice() const>
   1d464:	e1a02004 	mov	r2, r4
   1d468:	e1a01000 	mov	r1, r0
   1d46c:	e1a00006 	mov	r0, r6
   1d470:	ebffca68 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1d474:	e585601c 	str	r6, [r5, #28]
   1d478:	eaffffd1 	b	1d3c4 <CUSBCDCEthernetDevice::Configure()+0x100>
   1d47c:	eb00478c 	bl	2f2b4 <CLogger::Get()>
   1d480:	e30b3eac 	movw	r3, #48812	; 0xbeac
   1d484:	e3403003 	movt	r3, #3
   1d488:	e59f1050 	ldr	r1, [pc, #80]	; 1d4e0 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d48c:	e3a02001 	mov	r2, #1
   1d490:	eb004955 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d494:	e3a04000 	mov	r4, #0
   1d498:	eaffffda 	b	1d408 <CUSBCDCEthernetDevice::Configure()+0x144>
   1d49c:	e59f103c 	ldr	r1, [pc, #60]	; 1d4e0 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d4a0:	e1a00005 	mov	r0, r5
   1d4a4:	ebffcc77 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1d4a8:	eafffff9 	b	1d494 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   1d4ac:	e5953018 	ldr	r3, [r5, #24]
   1d4b0:	e3530000 	cmp	r3, #0
   1d4b4:	1afffff8 	bne	1d49c <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d4b8:	eb0065f7 	bl	36c9c <operator new(unsigned int)>
   1d4bc:	e1a06000 	mov	r6, r0
   1d4c0:	e1a00005 	mov	r0, r5
   1d4c4:	ebffcc44 	bl	105dc <CUSBFunction::GetDevice() const>
   1d4c8:	e1a02004 	mov	r2, r4
   1d4cc:	e1a01000 	mov	r1, r0
   1d4d0:	e1a00006 	mov	r0, r6
   1d4d4:	ebffca4f 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1d4d8:	e5856018 	str	r6, [r5, #24]
   1d4dc:	eaffffb8 	b	1d3c4 <CUSBCDCEthernetDevice::Configure()+0x100>
   1d4e0:	0003e08c 	.word	0x0003e08c

0001d4e4 <CNetDevice::IsLinkUp()>:
   1d4e4:	e3a00001 	mov	r0, #1
   1d4e8:	e12fff1e 	bx	lr

0001d4ec <CNetDevice::GetLinkSpeed()>:
   1d4ec:	e3a00006 	mov	r0, #6
   1d4f0:	e12fff1e 	bx	lr

0001d4f4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   1d4f4:	e3a03000 	mov	r3, #0
   1d4f8:	e92d4070 	push	{r4, r5, r6, lr}
   1d4fc:	e1510003 	cmp	r1, r3
   1d500:	e081e002 	add	lr, r1, r2
   1d504:	e8800006 	stm	r0, {r1, r2}
   1d508:	e5c03008 	strb	r3, [r0, #8]
   1d50c:	e580e00c 	str	lr, [r0, #12]
   1d510:	e5801010 	str	r1, [r0, #16]
   1d514:	e5803014 	str	r3, [r0, #20]
   1d518:	e5801018 	str	r1, [r0, #24]
   1d51c:	0a000041 	beq	1d628 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x134>
   1d520:	e2423004 	sub	r3, r2, #4
   1d524:	e3530fff 	cmp	r3, #1020	; 0x3fc
   1d528:	88bd8070 	pophi	{r4, r5, r6, pc}
   1d52c:	e5d13000 	ldrb	r3, [r1]
   1d530:	e3530009 	cmp	r3, #9
   1d534:	18bd8070 	popne	{r4, r5, r6, pc}
   1d538:	e5d1c001 	ldrb	ip, [r1, #1]
   1d53c:	e35c0002 	cmp	ip, #2
   1d540:	18bd8070 	popne	{r4, r5, r6, pc}
   1d544:	e1d130b2 	ldrh	r3, [r1, #2]
   1d548:	e1520003 	cmp	r2, r3
   1d54c:	38bd8070 	popcc	{r4, r5, r6, pc}
   1d550:	8081e003 	addhi	lr, r1, r3
   1d554:	e2813002 	add	r3, r1, #2
   1d558:	8580e00c 	strhi	lr, [r0, #12]
   1d55c:	e15e0003 	cmp	lr, r3
   1d560:	9a000036 	bls	1d640 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x14c>
   1d564:	e3a05000 	mov	r5, #0
   1d568:	e3a02009 	mov	r2, #9
   1d56c:	e1a04005 	mov	r4, r5
   1d570:	ea000008 	b	1d598 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa4>
   1d574:	e35c0002 	cmp	ip, #2
   1d578:	0a000024 	beq	1d610 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x11c>
   1d57c:	e2832002 	add	r2, r3, #2
   1d580:	e15e0002 	cmp	lr, r2
   1d584:	9a00002e 	bls	1d644 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x150>
   1d588:	e1a0400c 	mov	r4, ip
   1d58c:	e5d32000 	ldrb	r2, [r3]
   1d590:	e5d3c001 	ldrb	ip, [r3, #1]
   1d594:	e1a01003 	mov	r1, r3
   1d598:	e0813002 	add	r3, r1, r2
   1d59c:	e153000e 	cmp	r3, lr
   1d5a0:	8a00000a 	bhi	1d5d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   1d5a4:	e35c0004 	cmp	ip, #4
   1d5a8:	0a00000a 	beq	1d5d8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1d5ac:	e35c0005 	cmp	ip, #5
   1d5b0:	1affffef 	bne	1d574 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x80>
   1d5b4:	e31400fd 	tst	r4, #253	; 0xfd
   1d5b8:	0a000004 	beq	1d5d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   1d5bc:	e3550000 	cmp	r5, #0
   1d5c0:	0a000016 	beq	1d620 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   1d5c4:	e2422007 	sub	r2, r2, #7
   1d5c8:	e31200fd 	tst	r2, #253	; 0xfd
   1d5cc:	0affffea 	beq	1d57c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   1d5d0:	e5801018 	str	r1, [r0, #24]
   1d5d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d5d8:	e3540000 	cmp	r4, #0
   1d5dc:	0afffffb 	beq	1d5d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   1d5e0:	e5d14005 	ldrb	r4, [r1, #5]
   1d5e4:	e3540001 	cmp	r4, #1
   1d5e8:	13a04009 	movne	r4, #9
   1d5ec:	13a05000 	movne	r5, #0
   1d5f0:	1a000003 	bne	1d604 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x110>
   1d5f4:	e5d15007 	ldrb	r5, [r1, #7]
   1d5f8:	e3a04009 	mov	r4, #9
   1d5fc:	e2555020 	subs	r5, r5, #32
   1d600:	13a05001 	movne	r5, #1
   1d604:	e1520004 	cmp	r2, r4
   1d608:	0affffdb 	beq	1d57c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   1d60c:	eaffffef 	b	1d5d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   1d610:	e3540000 	cmp	r4, #0
   1d614:	1affffed 	bne	1d5d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   1d618:	e3a04009 	mov	r4, #9
   1d61c:	eafffff8 	b	1d604 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x110>
   1d620:	e3a04007 	mov	r4, #7
   1d624:	eafffff6 	b	1d604 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x110>
   1d628:	e30e1094 	movw	r1, #57492	; 0xe094
   1d62c:	e3401003 	movt	r1, #3
   1d630:	e30e00a8 	movw	r0, #57512	; 0xe0a8
   1d634:	e3400003 	movt	r0, #3
   1d638:	e3a02024 	mov	r2, #36	; 0x24
   1d63c:	eb003c9f 	bl	2c8c0 <assertion_failed>
   1d640:	e1a03001 	mov	r3, r1
   1d644:	e153000e 	cmp	r3, lr
   1d648:	15803018 	strne	r3, [r0, #24]
   1d64c:	03a03001 	moveq	r3, #1
   1d650:	05c03008 	strbeq	r3, [r0, #8]
   1d654:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d658 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   1d658:	e3510000 	cmp	r1, #0
   1d65c:	e92d4010 	push	{r4, lr}
   1d660:	0a00000a 	beq	1d690 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x38>
   1d664:	e281c00c 	add	ip, r1, #12
   1d668:	e280200c 	add	r2, r0, #12
   1d66c:	e591e000 	ldr	lr, [r1]
   1d670:	e580e000 	str	lr, [r0]
   1d674:	f46c0a8f 	vld1.32	{d16-d17}, [ip]
   1d678:	e591c004 	ldr	ip, [r1, #4]
   1d67c:	e5d11008 	ldrb	r1, [r1, #8]
   1d680:	e580c004 	str	ip, [r0, #4]
   1d684:	e5c01008 	strb	r1, [r0, #8]
   1d688:	f4420a8f 	vst1.32	{d16-d17}, [r2]
   1d68c:	e8bd8010 	pop	{r4, pc}
   1d690:	e30e1094 	movw	r1, #57492	; 0xe094
   1d694:	e3401003 	movt	r1, #3
   1d698:	e30e00b8 	movw	r0, #57528	; 0xe0b8
   1d69c:	e3400003 	movt	r0, #3
   1d6a0:	e3a0208b 	mov	r2, #139	; 0x8b
   1d6a4:	eb003c85 	bl	2c8c0 <assertion_failed>

0001d6a8 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   1d6a8:	e12fff1e 	bx	lr

0001d6ac <CUSBConfigurationParser::IsValid() const>:
   1d6ac:	e5d00008 	ldrb	r0, [r0, #8]
   1d6b0:	e12fff1e 	bx	lr

0001d6b4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   1d6b4:	e5d03008 	ldrb	r3, [r0, #8]
   1d6b8:	e92d4010 	push	{r4, lr}
   1d6bc:	e3530000 	cmp	r3, #0
   1d6c0:	0a000020 	beq	1d748 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x94>
   1d6c4:	e5903010 	ldr	r3, [r0, #16]
   1d6c8:	e1a0e000 	mov	lr, r0
   1d6cc:	e590c00c 	ldr	ip, [r0, #12]
   1d6d0:	e153000c 	cmp	r3, ip
   1d6d4:	3a000008 	bcc	1d6fc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   1d6d8:	ea000017 	b	1d73c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1d6dc:	e3510005 	cmp	r1, #5
   1d6e0:	03520004 	cmpeq	r2, #4
   1d6e4:	0a000014 	beq	1d73c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1d6e8:	e1520001 	cmp	r2, r1
   1d6ec:	0a00000e 	beq	1d72c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   1d6f0:	e15c0003 	cmp	ip, r3
   1d6f4:	e58e3010 	str	r3, [lr, #16]
   1d6f8:	9a00000f 	bls	1d73c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1d6fc:	e5d34000 	ldrb	r4, [r3]
   1d700:	e1a00003 	mov	r0, r3
   1d704:	e5d32001 	ldrb	r2, [r3, #1]
   1d708:	e0833004 	add	r3, r3, r4
   1d70c:	e15c0003 	cmp	ip, r3
   1d710:	2afffff1 	bcs	1d6dc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x28>
   1d714:	e30e1094 	movw	r1, #57492	; 0xe094
   1d718:	e3401003 	movt	r1, #3
   1d71c:	e30e00c8 	movw	r0, #57544	; 0xe0c8
   1d720:	e3400003 	movt	r0, #3
   1d724:	e3a020b2 	mov	r2, #178	; 0xb2
   1d728:	eb003c64 	bl	2c8c0 <assertion_failed>
   1d72c:	e58e3010 	str	r3, [lr, #16]
   1d730:	e58e0018 	str	r0, [lr, #24]
   1d734:	e58e0014 	str	r0, [lr, #20]
   1d738:	e8bd8010 	pop	{r4, pc}
   1d73c:	e3a00000 	mov	r0, #0
   1d740:	e58e0014 	str	r0, [lr, #20]
   1d744:	e8bd8010 	pop	{r4, pc}
   1d748:	e30e1094 	movw	r1, #57492	; 0xe094
   1d74c:	e3401003 	movt	r1, #3
   1d750:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1d754:	e3400003 	movt	r0, #3
   1d758:	e3a020a8 	mov	r2, #168	; 0xa8
   1d75c:	eb003c57 	bl	2c8c0 <assertion_failed>

0001d760 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   1d760:	e5d03008 	ldrb	r3, [r0, #8]
   1d764:	e92d4010 	push	{r4, lr}
   1d768:	e3530000 	cmp	r3, #0
   1d76c:	0a000008 	beq	1d794 <CUSBConfigurationParser::GetCurrentDescriptor()+0x34>
   1d770:	e5900014 	ldr	r0, [r0, #20]
   1d774:	e3500000 	cmp	r0, #0
   1d778:	18bd8010 	popne	{r4, pc}
   1d77c:	e30e1094 	movw	r1, #57492	; 0xe094
   1d780:	e3401003 	movt	r1, #3
   1d784:	e30e00e4 	movw	r0, #57572	; 0xe0e4
   1d788:	e3400003 	movt	r0, #3
   1d78c:	e3a020d1 	mov	r2, #209	; 0xd1
   1d790:	eb003c4a 	bl	2c8c0 <assertion_failed>
   1d794:	e30e1094 	movw	r1, #57492	; 0xe094
   1d798:	e3401003 	movt	r1, #3
   1d79c:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   1d7a0:	e3400003 	movt	r0, #3
   1d7a4:	e3a020d0 	mov	r2, #208	; 0xd0
   1d7a8:	eb003c44 	bl	2c8c0 <assertion_failed>

0001d7ac <CUSBConfigurationParser::Error(char const*) const>:
   1d7ac:	e92d4030 	push	{r4, r5, lr}
   1d7b0:	e2515000 	subs	r5, r1, #0
   1d7b4:	e24dd00c 	sub	sp, sp, #12
   1d7b8:	0a00000f 	beq	1d7fc <CUSBConfigurationParser::Error(char const*) const+0x50>
   1d7bc:	e1a04000 	mov	r4, r0
   1d7c0:	eb0046bb 	bl	2f2b4 <CLogger::Get()>
   1d7c4:	e1a01005 	mov	r1, r5
   1d7c8:	e5942000 	ldr	r2, [r4]
   1d7cc:	e5943018 	ldr	r3, [r4, #24]
   1d7d0:	e0433002 	sub	r3, r3, r2
   1d7d4:	e3a02001 	mov	r2, #1
   1d7d8:	e58d3000 	str	r3, [sp]
   1d7dc:	e30e3100 	movw	r3, #57600	; 0xe100
   1d7e0:	e3403003 	movt	r3, #3
   1d7e4:	eb004880 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d7e8:	e1a02005 	mov	r2, r5
   1d7ec:	e1c400d0 	ldrd	r0, [r4]
   1d7f0:	e28dd00c 	add	sp, sp, #12
   1d7f4:	e8bd4030 	pop	{r4, r5, lr}
   1d7f8:	ea003de9 	b	2cfa4 <debug_hexdump(void const*, unsigned int, char const*)>
   1d7fc:	e30e1094 	movw	r1, #57492	; 0xe094
   1d800:	e3401003 	movt	r1, #3
   1d804:	e30b0f14 	movw	r0, #48916	; 0xbf14
   1d808:	e3400003 	movt	r0, #3
   1d80c:	e3a020d8 	mov	r2, #216	; 0xd8
   1d810:	eb003c2a 	bl	2c8c0 <assertion_failed>

0001d814 <CUSBGamePadDevice::GetInitialState()>:
   1d814:	e2800024 	add	r0, r0, #36	; 0x24
   1d818:	e12fff1e 	bx	lr

0001d81c <CUSBGamePadDevice::Configure()>:
   1d81c:	e2803f4a 	add	r3, r0, #296	; 0x128
   1d820:	e92d4070 	push	{r4, r5, r6, lr}
   1d824:	e24dd008 	sub	sp, sp, #8
   1d828:	e1d310b0 	ldrh	r1, [r3]
   1d82c:	e3510000 	cmp	r1, #0
   1d830:	0a000020 	beq	1d8b8 <CUSBGamePadDevice::Configure()+0x9c>
   1d834:	e1a04000 	mov	r4, r0
   1d838:	ebffd65e 	bl	131b8 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   1d83c:	e2505000 	subs	r5, r0, #0
   1d840:	0a000012 	beq	1d890 <CUSBGamePadDevice::Configure()+0x74>
   1d844:	e594612c 	ldr	r6, [r4, #300]	; 0x12c
   1d848:	e3560000 	cmp	r6, #0
   1d84c:	1a00001f 	bne	1d8d0 <CUSBGamePadDevice::Configure()+0xb4>
   1d850:	e3a01001 	mov	r1, #1
   1d854:	e30e2170 	movw	r2, #57712	; 0xe170
   1d858:	e3402003 	movt	r2, #3
   1d85c:	e3040ee0 	movw	r0, #20192	; 0x4ee0
   1d860:	e3400004 	movt	r0, #4
   1d864:	eb00665c 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   1d868:	e584012c 	str	r0, [r4, #300]	; 0x12c
   1d86c:	eb003faa 	bl	2d71c <CDeviceNameService::Get()>
   1d870:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   1d874:	e59f106c 	ldr	r1, [pc, #108]	; 1d8e8 <CUSBGamePadDevice::Configure()+0xcc>
   1d878:	e1a03004 	mov	r3, r4
   1d87c:	e58d6000 	str	r6, [sp]
   1d880:	eb003fb1 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1d884:	e1a00005 	mov	r0, r5
   1d888:	e28dd008 	add	sp, sp, #8
   1d88c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d890:	eb004687 	bl	2f2b4 <CLogger::Get()>
   1d894:	e3a02001 	mov	r2, #1
   1d898:	e30c3790 	movw	r3, #51088	; 0xc790
   1d89c:	e3403003 	movt	r3, #3
   1d8a0:	e30e1170 	movw	r1, #57712	; 0xe170
   1d8a4:	e3401003 	movt	r1, #3
   1d8a8:	eb00484f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d8ac:	e1a00005 	mov	r0, r5
   1d8b0:	e28dd008 	add	sp, sp, #8
   1d8b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d8b8:	e30e1130 	movw	r1, #57648	; 0xe130
   1d8bc:	e3401003 	movt	r1, #3
   1d8c0:	e30c01d4 	movw	r0, #49620	; 0xc1d4
   1d8c4:	e3400003 	movt	r0, #3
   1d8c8:	e3a0203a 	mov	r2, #58	; 0x3a
   1d8cc:	eb003bfb 	bl	2c8c0 <assertion_failed>
   1d8d0:	e30e1130 	movw	r1, #57648	; 0xe130
   1d8d4:	e3401003 	movt	r1, #3
   1d8d8:	e30c0d74 	movw	r0, #52596	; 0xcd74
   1d8dc:	e3400003 	movt	r0, #3
   1d8e0:	e3a02042 	mov	r2, #66	; 0x42
   1d8e4:	eb003bf5 	bl	2c8c0 <assertion_failed>
   1d8e8:	0003e178 	.word	0x0003e178

0001d8ec <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1d8ec:	e3510000 	cmp	r1, #0
   1d8f0:	012fff1e 	bxeq	lr
   1d8f4:	e2803f4a 	add	r3, r0, #296	; 0x128
   1d8f8:	e92d4070 	push	{r4, r5, r6, lr}
   1d8fc:	e1a04000 	mov	r4, r0
   1d900:	e1d330b0 	ldrh	r3, [r3]
   1d904:	e1530002 	cmp	r3, r2
   1d908:	18bd8070 	popne	{r4, r5, r6, pc}
   1d90c:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   1d910:	e3530000 	cmp	r3, #0
   1d914:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d918:	e1a05000 	mov	r5, r0
   1d91c:	e4953024 	ldr	r3, [r5], #36	; 0x24
   1d920:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1d924:	e12fff33 	blx	r3
   1d928:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   1d92c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   1d930:	e1a01005 	mov	r1, r5
   1d934:	e2400001 	sub	r0, r0, #1
   1d938:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d93c:	e12fff13 	bx	r3

0001d940 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   1d940:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   1d944:	e92d4010 	push	{r4, lr}
   1d948:	e3530000 	cmp	r3, #0
   1d94c:	1a000008 	bne	1d974 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x34>
   1d950:	e3510000 	cmp	r1, #0
   1d954:	e5801124 	str	r1, [r0, #292]	; 0x124
   1d958:	18bd8010 	popne	{r4, pc}
   1d95c:	e30e1130 	movw	r1, #57648	; 0xe130
   1d960:	e3401003 	movt	r1, #3
   1d964:	e30e0158 	movw	r0, #57688	; 0xe158
   1d968:	e3400003 	movt	r0, #3
   1d96c:	e3a02053 	mov	r2, #83	; 0x53
   1d970:	eb003bd2 	bl	2c8c0 <assertion_failed>
   1d974:	e30e1130 	movw	r1, #57648	; 0xe130
   1d978:	e3401003 	movt	r1, #3
   1d97c:	e30e0140 	movw	r0, #57664	; 0xe140
   1d980:	e3400003 	movt	r0, #3
   1d984:	e3a02051 	mov	r2, #81	; 0x51
   1d988:	eb003bcc 	bl	2c8c0 <assertion_failed>

0001d98c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   1d98c:	e92d4010 	push	{r4, lr}
   1d990:	e3a02000 	mov	r2, #0
   1d994:	e1a04000 	mov	r4, r0
   1d998:	ebffd5c5 	bl	130b4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   1d99c:	e2843f4a 	add	r3, r4, #296	; 0x128
   1d9a0:	e59f0024 	ldr	r0, [pc, #36]	; 1d9cc <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x40>
   1d9a4:	e3a01000 	mov	r1, #0
   1d9a8:	e5840000 	str	r0, [r4]
   1d9ac:	e3a02c01 	mov	r2, #256	; 0x100
   1d9b0:	e5841124 	str	r1, [r4, #292]	; 0x124
   1d9b4:	e2840024 	add	r0, r4, #36	; 0x24
   1d9b8:	e1c310b0 	strh	r1, [r3]
   1d9bc:	e584112c 	str	r1, [r4, #300]	; 0x12c
   1d9c0:	eb006295 	bl	3641c <memset>
   1d9c4:	e1a00004 	mov	r0, r4
   1d9c8:	e8bd8010 	pop	{r4, pc}
   1d9cc:	0003e188 	.word	0x0003e188

0001d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1d9d0:	e590312c 	ldr	r3, [r0, #300]	; 0x12c
   1d9d4:	e92d4070 	push	{r4, r5, r6, lr}
   1d9d8:	e3a06000 	mov	r6, #0
   1d9dc:	e59f5048 	ldr	r5, [pc, #72]	; 1da2c <CUSBGamePadDevice::~CUSBGamePadDevice()+0x5c>
   1d9e0:	e1a04000 	mov	r4, r0
   1d9e4:	e1530006 	cmp	r3, r6
   1d9e8:	e5805000 	str	r5, [r0]
   1d9ec:	e5806124 	str	r6, [r0, #292]	; 0x124
   1d9f0:	1a000003 	bne	1da04 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x34>
   1d9f4:	e1a00004 	mov	r0, r4
   1d9f8:	ebffd5c3 	bl	1310c <CUSBHIDDevice::~CUSBHIDDevice()>
   1d9fc:	e1a00004 	mov	r0, r4
   1da00:	e8bd8070 	pop	{r4, r5, r6, pc}
   1da04:	eb003f44 	bl	2d71c <CDeviceNameService::Get()>
   1da08:	e2451010 	sub	r1, r5, #16
   1da0c:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   1da10:	e1a03006 	mov	r3, r6
   1da14:	eb003f66 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1da18:	e594112c 	ldr	r1, [r4, #300]	; 0x12c
   1da1c:	e3040ee0 	movw	r0, #20192	; 0x4ee0
   1da20:	e3400004 	movt	r0, #4
   1da24:	eb00661e 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1da28:	eafffff1 	b	1d9f4 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x24>
   1da2c:	0003e188 	.word	0x0003e188

0001da30 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1da30:	e92d4010 	push	{r4, lr}
   1da34:	e1a04000 	mov	r4, r0
   1da38:	ebffffe4 	bl	1d9d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1da3c:	e1a00004 	mov	r0, r4
   1da40:	e3a01e13 	mov	r1, #304	; 0x130
   1da44:	eb0064ac 	bl	36cfc <operator delete(void*, unsigned int)>
   1da48:	e1a00004 	mov	r0, r4
   1da4c:	e8bd8010 	pop	{r4, pc}

0001da50 <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE>:
   1da50:	e92d4010 	push	{r4, lr}
   1da54:	e3044ee0 	movw	r4, #20192	; 0x4ee0
   1da58:	e3404004 	movt	r4, #4
   1da5c:	e3a0203f 	mov	r2, #63	; 0x3f
   1da60:	e3a01001 	mov	r1, #1
   1da64:	e1a00004 	mov	r0, r4
   1da68:	eb0065c6 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1da6c:	e1a00004 	mov	r0, r4
   1da70:	e3042f78 	movw	r2, #20344	; 0x4f78
   1da74:	e3402004 	movt	r2, #4
   1da78:	e30711d8 	movw	r1, #29144	; 0x71d8
   1da7c:	e3401003 	movt	r1, #3
   1da80:	e8bd4010 	pop	{r4, lr}
   1da84:	ea005c8a 	b	34cb4 <__aeabi_atexit>

0001da88 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   1da88:	e92d4070 	push	{r4, r5, r6, lr}
   1da8c:	e1a04000 	mov	r4, r0
   1da90:	e30e52d0 	movw	r5, #58064	; 0xe2d0
   1da94:	e3405003 	movt	r5, #3
   1da98:	e2853008 	add	r3, r5, #8
   1da9c:	e5803000 	str	r3, [r0]
   1daa0:	eb003f1d 	bl	2d71c <CDeviceNameService::Get()>
   1daa4:	e594201c 	ldr	r2, [r4, #28]
   1daa8:	e3a03000 	mov	r3, #0
   1daac:	e2851028 	add	r1, r5, #40	; 0x28
   1dab0:	eb003f3f 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1dab4:	e594101c 	ldr	r1, [r4, #28]
   1dab8:	e3040ef0 	movw	r0, #20208	; 0x4ef0
   1dabc:	e3400004 	movt	r0, #4
   1dac0:	eb0065f7 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1dac4:	e1a00004 	mov	r0, r4
   1dac8:	eb003daa 	bl	2d178 <CDevice::~CDevice()>
   1dacc:	e1a00004 	mov	r0, r4
   1dad0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dad4 <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)>:
   1dad4:	e92d4010 	push	{r4, lr}
   1dad8:	e59d3008 	ldr	r3, [sp, #8]
   1dadc:	e3530000 	cmp	r3, #0
   1dae0:	0a000001 	beq	1daec <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)+0x18>
   1dae4:	e8bd4010 	pop	{r4, lr}
   1dae8:	e12fff13 	bx	r3
   1daec:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1daf0:	e3401003 	movt	r1, #3
   1daf4:	e30e01e0 	movw	r0, #57824	; 0xe1e0
   1daf8:	e3400003 	movt	r0, #3
   1dafc:	e3a0203e 	mov	r2, #62	; 0x3e
   1db00:	eb003b6e 	bl	2c8c0 <assertion_failed>

0001db04 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   1db04:	e92d4070 	push	{r4, r5, r6, lr}
   1db08:	e1a04000 	mov	r4, r0
   1db0c:	e30e52d0 	movw	r5, #58064	; 0xe2d0
   1db10:	e3405003 	movt	r5, #3
   1db14:	e2853008 	add	r3, r5, #8
   1db18:	e5803000 	str	r3, [r0]
   1db1c:	eb003efe 	bl	2d71c <CDeviceNameService::Get()>
   1db20:	e594201c 	ldr	r2, [r4, #28]
   1db24:	e3a03000 	mov	r3, #0
   1db28:	e2851028 	add	r1, r5, #40	; 0x28
   1db2c:	eb003f20 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1db30:	e594101c 	ldr	r1, [r4, #28]
   1db34:	e3040ef0 	movw	r0, #20208	; 0x4ef0
   1db38:	e3400004 	movt	r0, #4
   1db3c:	eb0065d8 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1db40:	e1a00004 	mov	r0, r4
   1db44:	eb003d8b 	bl	2d178 <CDevice::~CDevice()>
   1db48:	e1a00004 	mov	r0, r4
   1db4c:	e3a01020 	mov	r1, #32
   1db50:	eb006469 	bl	36cfc <operator delete(void*, unsigned int)>
   1db54:	e1a00004 	mov	r0, r4
   1db58:	e8bd8070 	pop	{r4, r5, r6, pc}

0001db5c <CUSBMIDIDevice::CUSBMIDIDevice()>:
   1db5c:	e92d4070 	push	{r4, r5, r6, lr}
   1db60:	e1a04000 	mov	r4, r0
   1db64:	e30e52d0 	movw	r5, #58064	; 0xe2d0
   1db68:	e3405003 	movt	r5, #3
   1db6c:	e24dd008 	sub	sp, sp, #8
   1db70:	eb003dad 	bl	2d22c <CDevice::CDevice()>
   1db74:	e3a06000 	mov	r6, #0
   1db78:	e2853008 	add	r3, r5, #8
   1db7c:	e2852030 	add	r2, r5, #48	; 0x30
   1db80:	e5843000 	str	r3, [r4]
   1db84:	e3a01001 	mov	r1, #1
   1db88:	e5846008 	str	r6, [r4, #8]
   1db8c:	e3040ef0 	movw	r0, #20208	; 0x4ef0
   1db90:	e3400004 	movt	r0, #4
   1db94:	e5846010 	str	r6, [r4, #16]
   1db98:	e5c46018 	strb	r6, [r4, #24]
   1db9c:	eb00658e 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   1dba0:	e584001c 	str	r0, [r4, #28]
   1dba4:	eb003edc 	bl	2d71c <CDeviceNameService::Get()>
   1dba8:	e594201c 	ldr	r2, [r4, #28]
   1dbac:	e1a03004 	mov	r3, r4
   1dbb0:	e2851028 	add	r1, r5, #40	; 0x28
   1dbb4:	e58d6000 	str	r6, [sp]
   1dbb8:	eb003ee3 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1dbbc:	e1a00004 	mov	r0, r4
   1dbc0:	e28dd008 	add	sp, sp, #8
   1dbc4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dbc8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   1dbc8:	e3510000 	cmp	r1, #0
   1dbcc:	e92d4010 	push	{r4, lr}
   1dbd0:	0a000007 	beq	1dbf4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   1dbd4:	e5903008 	ldr	r3, [r0, #8]
   1dbd8:	e580100c 	str	r1, [r0, #12]
   1dbdc:	e3530000 	cmp	r3, #0
   1dbe0:	1a000009 	bne	1dc0c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   1dbe4:	e30d3ad4 	movw	r3, #56020	; 0xdad4
   1dbe8:	e3403001 	movt	r3, #1
   1dbec:	e5803008 	str	r3, [r0, #8]
   1dbf0:	e8bd8010 	pop	{r4, pc}
   1dbf4:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1dbf8:	e3401003 	movt	r1, #3
   1dbfc:	e30e01e8 	movw	r0, #57832	; 0xe1e8
   1dc00:	e3400003 	movt	r0, #3
   1dc04:	e3a02044 	mov	r2, #68	; 0x44
   1dc08:	eb003b2c 	bl	2c8c0 <assertion_failed>
   1dc0c:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1dc10:	e3401003 	movt	r1, #3
   1dc14:	e30e01f8 	movw	r0, #57848	; 0xe1f8
   1dc18:	e3400003 	movt	r0, #3
   1dc1c:	e3a0204c 	mov	r2, #76	; 0x4c
   1dc20:	eb003b26 	bl	2c8c0 <assertion_failed>

0001dc24 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)>:
   1dc24:	e5903008 	ldr	r3, [r0, #8]
   1dc28:	e92d4010 	push	{r4, lr}
   1dc2c:	e3530000 	cmp	r3, #0
   1dc30:	e580200c 	str	r2, [r0, #12]
   1dc34:	1a000008 	bne	1dc5c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)+0x38>
   1dc38:	e3510000 	cmp	r1, #0
   1dc3c:	e5801008 	str	r1, [r0, #8]
   1dc40:	18bd8010 	popne	{r4, pc}
   1dc44:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1dc48:	e3401003 	movt	r1, #3
   1dc4c:	e30e0210 	movw	r0, #57872	; 0xe210
   1dc50:	e3400003 	movt	r0, #3
   1dc54:	e3a0204e 	mov	r2, #78	; 0x4e
   1dc58:	eb003b18 	bl	2c8c0 <assertion_failed>
   1dc5c:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1dc60:	e3401003 	movt	r1, #3
   1dc64:	e30e01f8 	movw	r0, #57848	; 0xe1f8
   1dc68:	e3400003 	movt	r0, #3
   1dc6c:	e3a0204c 	mov	r2, #76	; 0x4c
   1dc70:	eb003b12 	bl	2c8c0 <assertion_failed>

0001dc74 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)>:
   1dc74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1dc78:	e1a03000 	mov	r3, r0
   1dc7c:	e590e010 	ldr	lr, [r0, #16]
   1dc80:	e35e0000 	cmp	lr, #0
   1dc84:	0a000005 	beq	1dca0 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0x2c>
   1dc88:	e1a00001 	mov	r0, r1
   1dc8c:	e1a01002 	mov	r1, r2
   1dc90:	e5932014 	ldr	r2, [r3, #20]
   1dc94:	e1a0300e 	mov	r3, lr
   1dc98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1dc9c:	e12fff13 	bx	r3
   1dca0:	e1a0000e 	mov	r0, lr
   1dca4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001dca8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)>:
   1dca8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcac:	e351000f 	cmp	r1, #15
   1dcb0:	e28db020 	add	fp, sp, #32
   1dcb4:	e24dd01c 	sub	sp, sp, #28
   1dcb8:	8a0000ba 	bhi	1dfa8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x300>
   1dcbc:	e3520000 	cmp	r2, #0
   1dcc0:	0a0000c5 	beq	1dfdc <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x334>
   1dcc4:	e3530000 	cmp	r3, #0
   1dcc8:	0a0000c9 	beq	1dff4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x34c>
   1dccc:	e1a09000 	mov	r9, r0
   1dcd0:	e1a00103 	lsl	r0, r3, #2
   1dcd4:	e2800007 	add	r0, r0, #7
   1dcd8:	e1a01201 	lsl	r1, r1, #4
   1dcdc:	e0825003 	add	r5, r2, r3
   1dce0:	e3c03007 	bic	r3, r0, #7
   1dce4:	e04dd003 	sub	sp, sp, r3
   1dce8:	e3a08000 	mov	r8, #0
   1dcec:	e6ef7071 	uxtb	r7, r1
   1dcf0:	e28de008 	add	lr, sp, #8
   1dcf4:	e30ea2d0 	movw	sl, #58064	; 0xe2d0
   1dcf8:	e340a003 	movt	sl, #3
   1dcfc:	e3873004 	orr	r3, r7, #4
   1dd00:	e1a0400a 	mov	r4, sl
   1dd04:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   1dd08:	e1a0c008 	mov	ip, r8
   1dd0c:	e1a0300e 	mov	r3, lr
   1dd10:	e1a00008 	mov	r0, r8
   1dd14:	e1a01008 	mov	r1, r8
   1dd18:	e1a06008 	mov	r6, r8
   1dd1c:	e1a0a009 	mov	sl, r9
   1dd20:	e50be02c 	str	lr, [fp, #-44]	; 0xffffffd4
   1dd24:	ea00000e 	b	1dd64 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xbc>
   1dd28:	e35900ef 	cmp	r9, #239	; 0xef
   1dd2c:	8a000028 	bhi	1ddd4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x12c>
   1dd30:	e1a00229 	lsr	r0, r9, #4
   1dd34:	e2811001 	add	r1, r1, #1
   1dd38:	e187c000 	orr	ip, r7, r0
   1dd3c:	e4c3c001 	strb	ip, [r3], #1
   1dd40:	e0840100 	add	r0, r4, r0, lsl #2
   1dd44:	e590c038 	ldr	ip, [r0, #56]	; 0x38
   1dd48:	e25cc001 	subs	ip, ip, #1
   1dd4c:	e2811001 	add	r1, r1, #1
   1dd50:	13a00001 	movne	r0, #1
   1dd54:	e4c39001 	strb	r9, [r3], #1
   1dd58:	0a000033 	beq	1de2c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x184>
   1dd5c:	e1550002 	cmp	r5, r2
   1dd60:	0a000010 	beq	1dda8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x100>
   1dd64:	e4d29001 	ldrb	r9, [r2], #1
   1dd68:	e3500001 	cmp	r0, #1
   1dd6c:	0afffff5 	beq	1dd48 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xa0>
   1dd70:	e3500002 	cmp	r0, #2
   1dd74:	1affffeb 	bne	1dd28 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x80>
   1dd78:	e35c0003 	cmp	ip, #3
   1dd7c:	0a000035 	beq	1de58 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1b0>
   1dd80:	e1a0e003 	mov	lr, r3
   1dd84:	e35900f7 	cmp	r9, #247	; 0xf7
   1dd88:	e2811001 	add	r1, r1, #1
   1dd8c:	e4ce9001 	strb	r9, [lr], #1
   1dd90:	e28c9001 	add	r9, ip, #1
   1dd94:	0a000044 	beq	1deac <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x204>
   1dd98:	e1a0c009 	mov	ip, r9
   1dd9c:	e1a0300e 	mov	r3, lr
   1dda0:	e1550002 	cmp	r5, r2
   1dda4:	1affffee 	bne	1dd64 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xbc>
   1dda8:	e51be02c 	ldr	lr, [fp, #-44]	; 0xffffffd4
   1ddac:	e3500000 	cmp	r0, #0
   1ddb0:	1a000082 	bne	1dfc0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x318>
   1ddb4:	e59a3010 	ldr	r3, [sl, #16]
   1ddb8:	e3530000 	cmp	r3, #0
   1ddbc:	0a000018 	beq	1de24 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x17c>
   1ddc0:	e59a2014 	ldr	r2, [sl, #20]
   1ddc4:	e1a0000e 	mov	r0, lr
   1ddc8:	e12fff33 	blx	r3
   1ddcc:	e24bd020 	sub	sp, fp, #32
   1ddd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddd4:	e35900f0 	cmp	r9, #240	; 0xf0
   1ddd8:	0a000058 	beq	1df40 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x298>
   1dddc:	e289000f 	add	r0, r9, #15
   1dde0:	e3a0c001 	mov	ip, #1
   1dde4:	e6ef0070 	uxtb	r0, r0
   1dde8:	e1a0001c 	lsl	r0, ip, r0
   1ddec:	e306cea0 	movw	ip, #28320	; 0x6ea0
   1ddf0:	e110000c 	tst	r0, ip
   1ddf4:	1a00005c 	bne	1df6c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2c4>
   1ddf8:	e3100005 	tst	r0, #5
   1ddfc:	1a000046 	bne	1df1c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x274>
   1de00:	e35900f2 	cmp	r9, #242	; 0xf2
   1de04:	0a00001e 	beq	1de84 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1dc>
   1de08:	eb004529 	bl	2f2b4 <CLogger::Get()>
   1de0c:	e30e3238 	movw	r3, #57912	; 0xe238
   1de10:	e3403003 	movt	r3, #3
   1de14:	e59f11f0 	ldr	r1, [pc, #496]	; 1e00c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x364>
   1de18:	e3a02002 	mov	r2, #2
   1de1c:	e58d9000 	str	r9, [sp]
   1de20:	eb0046f1 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1de24:	e3a00000 	mov	r0, #0
   1de28:	eaffffe7 	b	1ddcc <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x124>
   1de2c:	e1a0c003 	mov	ip, r3
   1de30:	e2110003 	ands	r0, r1, #3
   1de34:	e1a0300c 	mov	r3, ip
   1de38:	1041c00c 	subne	ip, r1, ip
   1de3c:	0a000003 	beq	1de50 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1a8>
   1de40:	e4c36001 	strb	r6, [r3], #1
   1de44:	e083100c 	add	r1, r3, ip
   1de48:	e2110003 	ands	r0, r1, #3
   1de4c:	1afffffb 	bne	1de40 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x198>
   1de50:	e1a0c000 	mov	ip, r0
   1de54:	eaffffc0 	b	1dd5c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1de58:	e1a0e003 	mov	lr, r3
   1de5c:	e51bc028 	ldr	ip, [fp, #-40]	; 0xffffffd8
   1de60:	e2811002 	add	r1, r1, #2
   1de64:	e35900f7 	cmp	r9, #247	; 0xf7
   1de68:	e1a08003 	mov	r8, r3
   1de6c:	e4cec002 	strb	ip, [lr], #2
   1de70:	e5c39001 	strb	r9, [r3, #1]
   1de74:	0a000046 	beq	1df94 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2ec>
   1de78:	e1a0300e 	mov	r3, lr
   1de7c:	e3a0c001 	mov	ip, #1
   1de80:	eaffffb5 	b	1dd5c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1de84:	e1a00003 	mov	r0, r3
   1de88:	e387c003 	orr	ip, r7, #3
   1de8c:	e2811002 	add	r1, r1, #2
   1de90:	e4c0c002 	strb	ip, [r0], #2
   1de94:	e3e0c00d 	mvn	ip, #13
   1de98:	e5c3c001 	strb	ip, [r3, #1]
   1de9c:	e3a0c002 	mov	ip, #2
   1dea0:	e1a03000 	mov	r3, r0
   1dea4:	e3a00001 	mov	r0, #1
   1dea8:	eaffffab 	b	1dd5c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1deac:	e28c0005 	add	r0, ip, #5
   1deb0:	e3590002 	cmp	r9, #2
   1deb4:	e1870000 	orr	r0, r7, r0
   1deb8:	e5c80000 	strb	r0, [r8]
   1debc:	e28c0002 	add	r0, ip, #2
   1dec0:	8a00002f 	bhi	1df84 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2dc>
   1dec4:	e50be030 	str	lr, [fp, #-48]	; 0xffffffd0
   1dec8:	e04c3003 	sub	r3, ip, r3
   1decc:	e3a09000 	mov	r9, #0
   1ded0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
   1ded4:	e4ce9001 	strb	r9, [lr], #1
   1ded8:	e08e0003 	add	r0, lr, r3
   1dedc:	e3500002 	cmp	r0, #2
   1dee0:	9afffffb 	bls	1ded4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x22c>
   1dee4:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   1dee8:	e26ce001 	rsb	lr, ip, #1
   1deec:	e26c3002 	rsb	r3, ip, #2
   1def0:	e2811001 	add	r1, r1, #1
   1def4:	e3500003 	cmp	r0, #3
   1def8:	e2800001 	add	r0, r0, #1
   1defc:	83a0e000 	movhi	lr, #0
   1df00:	83a03001 	movhi	r3, #1
   1df04:	e08ec000 	add	ip, lr, r0
   1df08:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   1df0c:	e08e1001 	add	r1, lr, r1
   1df10:	e0803003 	add	r3, r0, r3
   1df14:	e3a00000 	mov	r0, #0
   1df18:	eaffff8f 	b	1dd5c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1df1c:	e1a00003 	mov	r0, r3
   1df20:	e387c002 	orr	ip, r7, #2
   1df24:	e2811002 	add	r1, r1, #2
   1df28:	e4c0c002 	strb	ip, [r0], #2
   1df2c:	e3a0c001 	mov	ip, #1
   1df30:	e5c39001 	strb	r9, [r3, #1]
   1df34:	e1a03000 	mov	r3, r0
   1df38:	e1a0000c 	mov	r0, ip
   1df3c:	eaffff86 	b	1dd5c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1df40:	e1a00003 	mov	r0, r3
   1df44:	e51bc028 	ldr	ip, [fp, #-40]	; 0xffffffd8
   1df48:	e1a08003 	mov	r8, r3
   1df4c:	e2811002 	add	r1, r1, #2
   1df50:	e4c0c002 	strb	ip, [r0], #2
   1df54:	e3e0c00f 	mvn	ip, #15
   1df58:	e5c3c001 	strb	ip, [r3, #1]
   1df5c:	e3a0c001 	mov	ip, #1
   1df60:	e1a03000 	mov	r3, r0
   1df64:	e3a00002 	mov	r0, #2
   1df68:	eaffff7b 	b	1dd5c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1df6c:	e1a0c003 	mov	ip, r3
   1df70:	e3870005 	orr	r0, r7, #5
   1df74:	e2811002 	add	r1, r1, #2
   1df78:	e4cc0002 	strb	r0, [ip], #2
   1df7c:	e5c39001 	strb	r9, [r3, #1]
   1df80:	eaffffaa 	b	1de30 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x188>
   1df84:	e1a0c000 	mov	ip, r0
   1df88:	e1a0300e 	mov	r3, lr
   1df8c:	e3a00000 	mov	r0, #0
   1df90:	eaffff71 	b	1dd5c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1df94:	e387c005 	orr	ip, r7, #5
   1df98:	e50be030 	str	lr, [fp, #-48]	; 0xffffffd0
   1df9c:	e4c3c001 	strb	ip, [r3], #1
   1dfa0:	e3a0c000 	mov	ip, #0
   1dfa4:	eaffffc7 	b	1dec8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x220>
   1dfa8:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1dfac:	e3401003 	movt	r1, #3
   1dfb0:	e30e0228 	movw	r0, #57896	; 0xe228
   1dfb4:	e3400003 	movt	r0, #3
   1dfb8:	e3a0205d 	mov	r2, #93	; 0x5d
   1dfbc:	eb003a3f 	bl	2c8c0 <assertion_failed>
   1dfc0:	eb0044bb 	bl	2f2b4 <CLogger::Get()>
   1dfc4:	e59f1040 	ldr	r1, [pc, #64]	; 1e00c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x364>
   1dfc8:	e3a02002 	mov	r2, #2
   1dfcc:	e30e325c 	movw	r3, #57948	; 0xe25c
   1dfd0:	e3403003 	movt	r3, #3
   1dfd4:	eb004684 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1dfd8:	eaffff91 	b	1de24 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x17c>
   1dfdc:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1dfe0:	e3401003 	movt	r1, #3
   1dfe4:	e30c0b74 	movw	r0, #52084	; 0xcb74
   1dfe8:	e3400003 	movt	r0, #3
   1dfec:	e3a0205e 	mov	r2, #94	; 0x5e
   1dff0:	eb003a32 	bl	2c8c0 <assertion_failed>
   1dff4:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1dff8:	e3401003 	movt	r1, #3
   1dffc:	e30c0b80 	movw	r0, #52096	; 0xcb80
   1e000:	e3400003 	movt	r0, #3
   1e004:	e3a0205f 	mov	r2, #95	; 0x5f
   1e008:	eb003a2c 	bl	2c8c0 <assertion_failed>
   1e00c:	0003e300 	.word	0x0003e300

0001e010 <CUSBMIDIDevice::SetAllSoundOffOnUSBError(bool)>:
   1e010:	e5c01018 	strb	r1, [r0, #24]
   1e014:	e12fff1e 	bx	lr

0001e018 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>:
   1e018:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e01c:	e2514000 	subs	r4, r1, #0
   1e020:	e24dd008 	sub	sp, sp, #8
   1e024:	0a00001e 	beq	1e0a4 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x8c>
   1e028:	e1a06000 	mov	r6, r0
   1e02c:	e2120003 	ands	r0, r2, #3
   1e030:	1a000021 	bne	1e0bc <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0xa4>
   1e034:	e0845002 	add	r5, r4, r2
   1e038:	e1540005 	cmp	r4, r5
   1e03c:	2a000016 	bcs	1e09c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x84>
   1e040:	e30e72d0 	movw	r7, #58064	; 0xe2d0
   1e044:	e3407003 	movt	r7, #3
   1e048:	e2844001 	add	r4, r4, #1
   1e04c:	e5542001 	ldrb	r2, [r4, #-1]
   1e050:	e3520000 	cmp	r2, #0
   1e054:	0a00000c 	beq	1e08c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x74>
   1e058:	e5968008 	ldr	r8, [r6, #8]
   1e05c:	e3580000 	cmp	r8, #0
   1e060:	0a000008 	beq	1e088 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x70>
   1e064:	e202100f 	and	r1, r2, #15
   1e068:	e596c00c 	ldr	ip, [r6, #12]
   1e06c:	e596301c 	ldr	r3, [r6, #28]
   1e070:	e1a00222 	lsr	r0, r2, #4
   1e074:	e0871101 	add	r1, r7, r1, lsl #2
   1e078:	e58dc000 	str	ip, [sp]
   1e07c:	e5912038 	ldr	r2, [r1, #56]	; 0x38
   1e080:	e1a01004 	mov	r1, r4
   1e084:	e12fff38 	blx	r8
   1e088:	e3a00001 	mov	r0, #1
   1e08c:	e2843003 	add	r3, r4, #3
   1e090:	e2844004 	add	r4, r4, #4
   1e094:	e1550003 	cmp	r5, r3
   1e098:	8affffeb 	bhi	1e04c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x34>
   1e09c:	e28dd008 	add	sp, sp, #8
   1e0a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e0a4:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1e0a8:	e3401003 	movt	r1, #3
   1e0ac:	e30e0274 	movw	r0, #57972	; 0xe274
   1e0b0:	e3400003 	movt	r0, #3
   1e0b4:	e3a020eb 	mov	r2, #235	; 0xeb
   1e0b8:	eb003a00 	bl	2c8c0 <assertion_failed>
   1e0bc:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1e0c0:	e3401003 	movt	r1, #3
   1e0c4:	e30e027c 	movw	r0, #57980	; 0xe27c
   1e0c8:	e3400003 	movt	r0, #3
   1e0cc:	e3a020ec 	mov	r2, #236	; 0xec
   1e0d0:	eb0039fa 	bl	2c8c0 <assertion_failed>

0001e0d4 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>:
   1e0d4:	e5903010 	ldr	r3, [r0, #16]
   1e0d8:	e92d4010 	push	{r4, lr}
   1e0dc:	e3530000 	cmp	r3, #0
   1e0e0:	e5802014 	str	r2, [r0, #20]
   1e0e4:	1a000008 	bne	1e10c <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)+0x38>
   1e0e8:	e3510000 	cmp	r1, #0
   1e0ec:	e5801010 	str	r1, [r0, #16]
   1e0f0:	18bd8010 	popne	{r4, pc}
   1e0f4:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1e0f8:	e3401003 	movt	r1, #3
   1e0fc:	e30e02b4 	movw	r0, #58036	; 0xe2b4
   1e100:	e3400003 	movt	r0, #3
   1e104:	e300210d 	movw	r2, #269	; 0x10d
   1e108:	eb0039ec 	bl	2c8c0 <assertion_failed>
   1e10c:	e30e11d4 	movw	r1, #57812	; 0xe1d4
   1e110:	e3401003 	movt	r1, #3
   1e114:	e30e029c 	movw	r0, #58012	; 0xe29c
   1e118:	e3400003 	movt	r0, #3
   1e11c:	e300210b 	movw	r2, #267	; 0x10b
   1e120:	eb0039e6 	bl	2c8c0 <assertion_failed>

0001e124 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>:
   1e124:	e5d00018 	ldrb	r0, [r0, #24]
   1e128:	e12fff1e 	bx	lr

0001e12c <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE>:
   1e12c:	e92d4010 	push	{r4, lr}
   1e130:	e3044ef0 	movw	r4, #20208	; 0x4ef0
   1e134:	e3404004 	movt	r4, #4
   1e138:	e3a0203f 	mov	r2, #63	; 0x3f
   1e13c:	e3a01001 	mov	r1, #1
   1e140:	e1a00004 	mov	r0, r4
   1e144:	eb00640f 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1e148:	e1a00004 	mov	r0, r4
   1e14c:	e3042f78 	movw	r2, #20344	; 0x4f78
   1e150:	e3402004 	movt	r2, #4
   1e154:	e30711d8 	movw	r1, #29144	; 0x71d8
   1e158:	e3401003 	movt	r1, #3
   1e15c:	e8bd4010 	pop	{r4, lr}
   1e160:	ea005ad3 	b	34cb4 <__aeabi_atexit>

0001e164 <CUSBSerialDevice::SetBaudRate(unsigned int)>:
   1e164:	e3a00001 	mov	r0, #1
   1e168:	e12fff1e 	bx	lr

0001e16c <CUSBSerialDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   1e16c:	e3a00001 	mov	r0, #1
   1e170:	e12fff1e 	bx	lr

0001e174 <CUSBSerialDevice::~CUSBSerialDevice()>:
   1e174:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   1e178:	e92d4070 	push	{r4, r5, r6, lr}
   1e17c:	e1a04000 	mov	r4, r0
   1e180:	e59f50ac 	ldr	r5, [pc, #172]	; 1e234 <CUSBSerialDevice::~CUSBSerialDevice()+0xc0>
   1e184:	e3530000 	cmp	r3, #0
   1e188:	e5805000 	str	r5, [r0]
   1e18c:	1a00001e 	bne	1e20c <CUSBSerialDevice::~CUSBSerialDevice()+0x98>
   1e190:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   1e194:	e3550000 	cmp	r5, #0
   1e198:	0a000004 	beq	1e1b0 <CUSBSerialDevice::~CUSBSerialDevice()+0x3c>
   1e19c:	e1a00005 	mov	r0, r5
   1e1a0:	ebffc796 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1e1a4:	e3a01014 	mov	r1, #20
   1e1a8:	e1a00005 	mov	r0, r5
   1e1ac:	eb0062d2 	bl	36cfc <operator delete(void*, unsigned int)>
   1e1b0:	e5945020 	ldr	r5, [r4, #32]
   1e1b4:	e3a03000 	mov	r3, #0
   1e1b8:	e5843024 	str	r3, [r4, #36]	; 0x24
   1e1bc:	e1550003 	cmp	r5, r3
   1e1c0:	0a000004 	beq	1e1d8 <CUSBSerialDevice::~CUSBSerialDevice()+0x64>
   1e1c4:	e1a00005 	mov	r0, r5
   1e1c8:	ebffc78c 	bl	10000 <CUSBEndpoint::~CUSBEndpoint()>
   1e1cc:	e3a01014 	mov	r1, #20
   1e1d0:	e1a00005 	mov	r0, r5
   1e1d4:	eb0062c8 	bl	36cfc <operator delete(void*, unsigned int)>
   1e1d8:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   1e1dc:	e3a03000 	mov	r3, #0
   1e1e0:	e5843020 	str	r3, [r4, #32]
   1e1e4:	e1500003 	cmp	r0, r3
   1e1e8:	0a000000 	beq	1e1f0 <CUSBSerialDevice::~CUSBSerialDevice()+0x7c>
   1e1ec:	eb0062bc 	bl	36ce4 <operator delete[](void*)>
   1e1f0:	e3a03000 	mov	r3, #0
   1e1f4:	e1a00004 	mov	r0, r4
   1e1f8:	e5843028 	str	r3, [r4, #40]	; 0x28
   1e1fc:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1e200:	ebffc7e8 	bl	101a8 <CUSBFunction::~CUSBFunction()>
   1e204:	e1a00004 	mov	r0, r4
   1e208:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e20c:	eb003d42 	bl	2d71c <CDeviceNameService::Get()>
   1e210:	e2851034 	add	r1, r5, #52	; 0x34
   1e214:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   1e218:	e3a03000 	mov	r3, #0
   1e21c:	eb003d64 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1e220:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
   1e224:	e3040f00 	movw	r0, #20224	; 0x4f00
   1e228:	e3400004 	movt	r0, #4
   1e22c:	eb00641c 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1e230:	eaffffd6 	b	1e190 <CUSBSerialDevice::~CUSBSerialDevice()+0x1c>
   1e234:	0003e454 	.word	0x0003e454

0001e238 <CUSBSerialDevice::~CUSBSerialDevice()>:
   1e238:	e92d4010 	push	{r4, lr}
   1e23c:	e1a04000 	mov	r4, r0
   1e240:	ebffffcb 	bl	1e174 <CUSBSerialDevice::~CUSBSerialDevice()>
   1e244:	e1a00004 	mov	r0, r4
   1e248:	e3a01040 	mov	r1, #64	; 0x40
   1e24c:	eb0062aa 	bl	36cfc <operator delete(void*, unsigned int)>
   1e250:	e1a00004 	mov	r0, r4
   1e254:	e8bd8010 	pop	{r4, pc}

0001e258 <CUSBSerialDevice::Write(void const*, unsigned int)>:
   1e258:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1e25c:	e2518000 	subs	r8, r1, #0
   1e260:	e28db018 	add	fp, sp, #24
   1e264:	e24dd00c 	sub	sp, sp, #12
   1e268:	0a00002c 	beq	1e320 <CUSBSerialDevice::Write(void const*, unsigned int)+0xc8>
   1e26c:	e1a05000 	mov	r5, r0
   1e270:	e1a07002 	mov	r7, r2
   1e274:	e3520000 	cmp	r2, #0
   1e278:	0a00002e 	beq	1e338 <CUSBSerialDevice::Write(void const*, unsigned int)+0xe0>
   1e27c:	f57ff05f 	dmb	sy
   1e280:	e5d5c038 	ldrb	ip, [r5, #56]	; 0x38
   1e284:	e21c40ff 	ands	r4, ip, #255	; 0xff
   1e288:	1afffffb 	bne	1e27c <CUSBSerialDevice::Write(void const*, unsigned int)+0x24>
   1e28c:	e1a00005 	mov	r0, r5
   1e290:	ebffc8e6 	bl	10630 <CUSBFunction::GetHost() const>
   1e294:	e2506000 	subs	r6, r0, #0
   1e298:	0a00002c 	beq	1e350 <CUSBSerialDevice::Write(void const*, unsigned int)+0xf8>
   1e29c:	e247c001 	sub	ip, r7, #1
   1e2a0:	e1a01008 	mov	r1, r8
   1e2a4:	e38cc03f 	orr	ip, ip, #63	; 0x3f
   1e2a8:	e1a02007 	mov	r2, r7
   1e2ac:	e28cc040 	add	ip, ip, #64	; 0x40
   1e2b0:	e3ccc007 	bic	ip, ip, #7
   1e2b4:	e04dd00c 	sub	sp, sp, ip
   1e2b8:	e28d8047 	add	r8, sp, #71	; 0x47
   1e2bc:	e3c8803f 	bic	r8, r8, #63	; 0x3f
   1e2c0:	e1a00008 	mov	r0, r8
   1e2c4:	eb00606b 	bl	36478 <memcpy>
   1e2c8:	e5951024 	ldr	r1, [r5, #36]	; 0x24
   1e2cc:	e3510000 	cmp	r1, #0
   1e2d0:	0a000024 	beq	1e368 <CUSBSerialDevice::Write(void const*, unsigned int)+0x110>
   1e2d4:	e58d4000 	str	r4, [sp]
   1e2d8:	e1a03007 	mov	r3, r7
   1e2dc:	e1a02008 	mov	r2, r8
   1e2e0:	e1a00006 	mov	r0, r6
   1e2e4:	ebffd636 	bl	13bc4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1e2e8:	e2504000 	subs	r4, r0, #0
   1e2ec:	ba000002 	blt	1e2fc <CUSBSerialDevice::Write(void const*, unsigned int)+0xa4>
   1e2f0:	e1a00004 	mov	r0, r4
   1e2f4:	e24bd018 	sub	sp, fp, #24
   1e2f8:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1e2fc:	eb0043ec 	bl	2f2b4 <CLogger::Get()>
   1e300:	e59f1078 	ldr	r1, [pc, #120]	; 1e380 <CUSBSerialDevice::Write(void const*, unsigned int)+0x128>
   1e304:	e3a02002 	mov	r2, #2
   1e308:	e30e336c 	movw	r3, #58220	; 0xe36c
   1e30c:	e3403003 	movt	r3, #3
   1e310:	eb0045b5 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e314:	e1a00004 	mov	r0, r4
   1e318:	e24bd018 	sub	sp, fp, #24
   1e31c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1e320:	e30e1348 	movw	r1, #58184	; 0xe348
   1e324:	e3401003 	movt	r1, #3
   1e328:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1e32c:	e3400003 	movt	r0, #3
   1e330:	e3a02085 	mov	r2, #133	; 0x85
   1e334:	eb003961 	bl	2c8c0 <assertion_failed>
   1e338:	e30e1348 	movw	r1, #58184	; 0xe348
   1e33c:	e3401003 	movt	r1, #3
   1e340:	e30c0d3c 	movw	r0, #52540	; 0xcd3c
   1e344:	e3400003 	movt	r0, #3
   1e348:	e3a02086 	mov	r2, #134	; 0x86
   1e34c:	eb00395b 	bl	2c8c0 <assertion_failed>
   1e350:	e30e1348 	movw	r1, #58184	; 0xe348
   1e354:	e3401003 	movt	r1, #3
   1e358:	e30c0d48 	movw	r0, #52552	; 0xcd48
   1e35c:	e3400003 	movt	r0, #3
   1e360:	e3a02093 	mov	r2, #147	; 0x93
   1e364:	eb003955 	bl	2c8c0 <assertion_failed>
   1e368:	e30e1348 	movw	r1, #58184	; 0xe348
   1e36c:	e3401003 	movt	r1, #3
   1e370:	e30e0358 	movw	r0, #58200	; 0xe358
   1e374:	e3400003 	movt	r0, #3
   1e378:	e3a02098 	mov	r2, #152	; 0x98
   1e37c:	eb00394f 	bl	2c8c0 <assertion_failed>
   1e380:	0003e490 	.word	0x0003e490

0001e384 <CUSBSerialDevice::Read(void*, unsigned int)>:
   1e384:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e388:	e2513000 	subs	r3, r1, #0
   1e38c:	e24dd00c 	sub	sp, sp, #12
   1e390:	0a00004a 	beq	1e4c0 <CUSBSerialDevice::Read(void*, unsigned int)+0x13c>
   1e394:	e3520000 	cmp	r2, #0
   1e398:	0a00004e 	beq	1e4d8 <CUSBSerialDevice::Read(void*, unsigned int)+0x154>
   1e39c:	e1a04000 	mov	r4, r0
   1e3a0:	f57ff05f 	dmb	sy
   1e3a4:	e5d01038 	ldrb	r1, [r0, #56]	; 0x38
   1e3a8:	e3510000 	cmp	r1, #0
   1e3ac:	1a00003a 	bne	1e49c <CUSBSerialDevice::Read(void*, unsigned int)+0x118>
   1e3b0:	e5901028 	ldr	r1, [r0, #40]	; 0x28
   1e3b4:	e3510000 	cmp	r1, #0
   1e3b8:	0a00003a 	beq	1e4a8 <CUSBSerialDevice::Read(void*, unsigned int)+0x124>
   1e3bc:	e590e02c 	ldr	lr, [r0, #44]	; 0x2c
   1e3c0:	e35e0000 	cmp	lr, #0
   1e3c4:	0a000057 	beq	1e528 <CUSBSerialDevice::Read(void*, unsigned int)+0x1a4>
   1e3c8:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   1e3cc:	e15e000c 	cmp	lr, ip
   1e3d0:	3a00005a 	bcc	1e540 <CUSBSerialDevice::Read(void*, unsigned int)+0x1bc>
   1e3d4:	e590e034 	ldr	lr, [r0, #52]	; 0x34
   1e3d8:	e15c000e 	cmp	ip, lr
   1e3dc:	3a00005d 	bcc	1e558 <CUSBSerialDevice::Read(void*, unsigned int)+0x1d4>
   1e3e0:	0a00000d 	beq	1e41c <CUSBSerialDevice::Read(void*, unsigned int)+0x98>
   1e3e4:	e04cc00e 	sub	ip, ip, lr
   1e3e8:	e1a00003 	mov	r0, r3
   1e3ec:	e15c0002 	cmp	ip, r2
   1e3f0:	e081100e 	add	r1, r1, lr
   1e3f4:	31a0500c 	movcc	r5, ip
   1e3f8:	21a05002 	movcs	r5, r2
   1e3fc:	e1a02005 	mov	r2, r5
   1e400:	eb00601c 	bl	36478 <memcpy>
   1e404:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1e408:	e1a00005 	mov	r0, r5
   1e40c:	e0833005 	add	r3, r3, r5
   1e410:	e5843034 	str	r3, [r4, #52]	; 0x34
   1e414:	e28dd00c 	add	sp, sp, #12
   1e418:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e41c:	ebffc883 	bl	10630 <CUSBFunction::GetHost() const>
   1e420:	e2505000 	subs	r5, r0, #0
   1e424:	0a000051 	beq	1e570 <CUSBSerialDevice::Read(void*, unsigned int)+0x1ec>
   1e428:	e5943020 	ldr	r3, [r4, #32]
   1e42c:	e3530000 	cmp	r3, #0
   1e430:	0a000054 	beq	1e588 <CUSBSerialDevice::Read(void*, unsigned int)+0x204>
   1e434:	e3a00070 	mov	r0, #112	; 0x70
   1e438:	e3a07000 	mov	r7, #0
   1e43c:	ebffe0b3 	bl	16710 <CUSBRequest::operator new(unsigned int)>
   1e440:	e58d7000 	str	r7, [sp]
   1e444:	e1a06000 	mov	r6, r0
   1e448:	e1c422d8 	ldrd	r2, [r4, #40]	; 0x28
   1e44c:	e5941020 	ldr	r1, [r4, #32]
   1e450:	ebffdfe4 	bl	163e8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1e454:	e1a00006 	mov	r0, r6
   1e458:	ebffe0a7 	bl	166fc <CUSBRequest::SetCompleteOnNAK()>
   1e45c:	e1a03004 	mov	r3, r4
   1e460:	e1a02007 	mov	r2, r7
   1e464:	e1a00006 	mov	r0, r6
   1e468:	e30e1708 	movw	r1, #59144	; 0xe708
   1e46c:	e3401001 	movt	r1, #1
   1e470:	ebffe087 	bl	16694 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1e474:	e3a03001 	mov	r3, #1
   1e478:	e5c43038 	strb	r3, [r4, #56]	; 0x38
   1e47c:	e1a00005 	mov	r0, r5
   1e480:	e5953000 	ldr	r3, [r5]
   1e484:	e1a02007 	mov	r2, r7
   1e488:	e1a01006 	mov	r1, r6
   1e48c:	e5933014 	ldr	r3, [r3, #20]
   1e490:	e12fff33 	blx	r3
   1e494:	e2505000 	subs	r5, r0, #0
   1e498:	0a000014 	beq	1e4f0 <CUSBSerialDevice::Read(void*, unsigned int)+0x16c>
   1e49c:	e3a00000 	mov	r0, #0
   1e4a0:	e28dd00c 	add	sp, sp, #12
   1e4a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e4a8:	e30e1348 	movw	r1, #58184	; 0xe348
   1e4ac:	e3401003 	movt	r1, #3
   1e4b0:	e30e0380 	movw	r0, #58240	; 0xe380
   1e4b4:	e3400003 	movt	r0, #3
   1e4b8:	e3a020ae 	mov	r2, #174	; 0xae
   1e4bc:	eb0038ff 	bl	2c8c0 <assertion_failed>
   1e4c0:	e30e1348 	movw	r1, #58184	; 0xe348
   1e4c4:	e3401003 	movt	r1, #3
   1e4c8:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   1e4cc:	e3400003 	movt	r0, #3
   1e4d0:	e3a020a4 	mov	r2, #164	; 0xa4
   1e4d4:	eb0038f9 	bl	2c8c0 <assertion_failed>
   1e4d8:	e30e1348 	movw	r1, #58184	; 0xe348
   1e4dc:	e3401003 	movt	r1, #3
   1e4e0:	e30c0d3c 	movw	r0, #52540	; 0xcd3c
   1e4e4:	e3400003 	movt	r0, #3
   1e4e8:	e3a020a5 	mov	r2, #165	; 0xa5
   1e4ec:	eb0038f3 	bl	2c8c0 <assertion_failed>
   1e4f0:	eb00436f 	bl	2f2b4 <CLogger::Get()>
   1e4f4:	e59f10a4 	ldr	r1, [pc, #164]	; 1e5a0 <CUSBSerialDevice::Read(void*, unsigned int)+0x21c>
   1e4f8:	e3a02002 	mov	r2, #2
   1e4fc:	e30e33f0 	movw	r3, #58352	; 0xe3f0
   1e500:	e3403003 	movt	r3, #3
   1e504:	eb004538 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e508:	e1a00006 	mov	r0, r6
   1e50c:	e5c45038 	strb	r5, [r4, #56]	; 0x38
   1e510:	ebffdfd8 	bl	16478 <CUSBRequest::~CUSBRequest()>
   1e514:	e1a00006 	mov	r0, r6
   1e518:	e3a01070 	mov	r1, #112	; 0x70
   1e51c:	ebffe091 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   1e520:	e3e00000 	mvn	r0, #0
   1e524:	eaffffba 	b	1e414 <CUSBSerialDevice::Read(void*, unsigned int)+0x90>
   1e528:	e30e1348 	movw	r1, #58184	; 0xe348
   1e52c:	e3401003 	movt	r1, #3
   1e530:	e30e0394 	movw	r0, #58260	; 0xe394
   1e534:	e3400003 	movt	r0, #3
   1e538:	e3a020af 	mov	r2, #175	; 0xaf
   1e53c:	eb0038df 	bl	2c8c0 <assertion_failed>
   1e540:	e30e1348 	movw	r1, #58184	; 0xe348
   1e544:	e3401003 	movt	r1, #3
   1e548:	e30e03a8 	movw	r0, #58280	; 0xe3a8
   1e54c:	e3400003 	movt	r0, #3
   1e550:	e3a020b0 	mov	r2, #176	; 0xb0
   1e554:	eb0038d9 	bl	2c8c0 <assertion_failed>
   1e558:	e30e1348 	movw	r1, #58184	; 0xe348
   1e55c:	e3401003 	movt	r1, #3
   1e560:	e30e03cc 	movw	r0, #58316	; 0xe3cc
   1e564:	e3400003 	movt	r0, #3
   1e568:	e3a020b1 	mov	r2, #177	; 0xb1
   1e56c:	eb0038d3 	bl	2c8c0 <assertion_failed>
   1e570:	e30e1348 	movw	r1, #58184	; 0xe348
   1e574:	e3401003 	movt	r1, #3
   1e578:	e30c0d48 	movw	r0, #52552	; 0xcd48
   1e57c:	e3400003 	movt	r0, #3
   1e580:	e3a020b6 	mov	r2, #182	; 0xb6
   1e584:	eb0038cd 	bl	2c8c0 <assertion_failed>
   1e588:	e30e1348 	movw	r1, #58184	; 0xe348
   1e58c:	e3401003 	movt	r1, #3
   1e590:	e30c0ba0 	movw	r0, #52128	; 0xcba0
   1e594:	e3400003 	movt	r0, #3
   1e598:	e3a020b8 	mov	r2, #184	; 0xb8
   1e59c:	eb0038c7 	bl	2c8c0 <assertion_failed>
   1e5a0:	0003e490 	.word	0x0003e490

0001e5a4 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>:
   1e5a4:	e92d4070 	push	{r4, r5, r6, lr}
   1e5a8:	e1a04000 	mov	r4, r0
   1e5ac:	e1a05002 	mov	r5, r2
   1e5b0:	ebffc7a5 	bl	1044c <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1e5b4:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1e5b8:	e2841020 	add	r1, r4, #32
   1e5bc:	e284202c 	add	r2, r4, #44	; 0x2c
   1e5c0:	e59f0040 	ldr	r0, [pc, #64]	; 1e608 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)+0x64>
   1e5c4:	e3a03000 	mov	r3, #0
   1e5c8:	e5840000 	str	r0, [r4]
   1e5cc:	e3a00d96 	mov	r0, #9600	; 0x2580
   1e5d0:	e584501c 	str	r5, [r4, #28]
   1e5d4:	e5840014 	str	r0, [r4, #20]
   1e5d8:	e3a00008 	mov	r0, #8
   1e5dc:	e1c401b8 	strh	r0, [r4, #24]
   1e5e0:	e3a00001 	mov	r0, #1
   1e5e4:	e5c4001a 	strb	r0, [r4, #26]
   1e5e8:	e1a00004 	mov	r0, r4
   1e5ec:	f441078f 	vst1.32	{d16}, [r1]
   1e5f0:	e5843028 	str	r3, [r4, #40]	; 0x28
   1e5f4:	f442078f 	vst1.32	{d16}, [r2]
   1e5f8:	e5843034 	str	r3, [r4, #52]	; 0x34
   1e5fc:	e5c43038 	strb	r3, [r4, #56]	; 0x38
   1e600:	e584303c 	str	r3, [r4, #60]	; 0x3c
   1e604:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e608:	0003e454 	.word	0x0003e454

0001e60c <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)>:
   1e60c:	e92d4070 	push	{r4, r5, r6, lr}
   1e610:	e2515000 	subs	r5, r1, #0
   1e614:	0a000028 	beq	1e6bc <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   1e618:	e5d03038 	ldrb	r3, [r0, #56]	; 0x38
   1e61c:	e1a04000 	mov	r4, r0
   1e620:	e3530000 	cmp	r3, #0
   1e624:	0a00002a 	beq	1e6d4 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   1e628:	e1c023d0 	ldrd	r2, [r0, #48]	; 0x30
   1e62c:	e1520003 	cmp	r2, r3
   1e630:	1a00002d 	bne	1e6ec <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   1e634:	e1a00005 	mov	r0, r5
   1e638:	ebffdf9f 	bl	164bc <CUSBRequest::GetStatus() const>
   1e63c:	e3500000 	cmp	r0, #0
   1e640:	1a000008 	bne	1e668 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   1e644:	e1a00005 	mov	r0, r5
   1e648:	ebffdf8a 	bl	16478 <CUSBRequest::~CUSBRequest()>
   1e64c:	e3a01070 	mov	r1, #112	; 0x70
   1e650:	e1a00005 	mov	r0, r5
   1e654:	ebffe043 	bl	16768 <CUSBRequest::operator delete(void*, unsigned int)>
   1e658:	e3a03000 	mov	r3, #0
   1e65c:	e5c43038 	strb	r3, [r4, #56]	; 0x38
   1e660:	f57ff04f 	dsb	sy
   1e664:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e668:	e1a00005 	mov	r0, r5
   1e66c:	ebffdf94 	bl	164c4 <CUSBRequest::GetResultLength() const>
   1e670:	e594301c 	ldr	r3, [r4, #28]
   1e674:	e5843034 	str	r3, [r4, #52]	; 0x34
   1e678:	e3500000 	cmp	r0, #0
   1e67c:	11500003 	cmpne	r0, r3
   1e680:	e5840030 	str	r0, [r4, #48]	; 0x30
   1e684:	1a000003 	bne	1e698 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x8c>
   1e688:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1e68c:	e2843030 	add	r3, r4, #48	; 0x30
   1e690:	f443078f 	vst1.32	{d16}, [r3]
   1e694:	eaffffea 	b	1e644 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1e698:	e1500003 	cmp	r0, r3
   1e69c:	2affffe8 	bcs	1e644 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1e6a0:	eb004303 	bl	2f2b4 <CLogger::Get()>
   1e6a4:	e59f1058 	ldr	r1, [pc, #88]	; 1e704 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   1e6a8:	e3a02002 	mov	r2, #2
   1e6ac:	e30e3438 	movw	r3, #58424	; 0xe438
   1e6b0:	e3403003 	movt	r3, #3
   1e6b4:	eb0044cc 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e6b8:	eafffff2 	b	1e688 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   1e6bc:	e30e1348 	movw	r1, #58184	; 0xe348
   1e6c0:	e3401003 	movt	r1, #3
   1e6c4:	e30a0b00 	movw	r0, #43776	; 0xab00
   1e6c8:	e3400003 	movt	r0, #3
   1e6cc:	e3a020ef 	mov	r2, #239	; 0xef
   1e6d0:	eb00387a 	bl	2c8c0 <assertion_failed>
   1e6d4:	e30e1348 	movw	r1, #58184	; 0xe348
   1e6d8:	e3401003 	movt	r1, #3
   1e6dc:	e30e0400 	movw	r0, #58368	; 0xe400
   1e6e0:	e3400003 	movt	r0, #3
   1e6e4:	e3a020f0 	mov	r2, #240	; 0xf0
   1e6e8:	eb003874 	bl	2c8c0 <assertion_failed>
   1e6ec:	e30e1348 	movw	r1, #58184	; 0xe348
   1e6f0:	e3401003 	movt	r1, #3
   1e6f4:	e30e0414 	movw	r0, #58388	; 0xe414
   1e6f8:	e3400003 	movt	r0, #3
   1e6fc:	e3a020f1 	mov	r2, #241	; 0xf1
   1e700:	eb00386e 	bl	2c8c0 <assertion_failed>
   1e704:	0003e490 	.word	0x0003e490

0001e708 <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1e708:	e1a01000 	mov	r1, r0
   1e70c:	e2520000 	subs	r0, r2, #0
   1e710:	0a000000 	beq	1e718 <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   1e714:	eaffffbc 	b	1e60c <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)>
   1e718:	e30e1348 	movw	r1, #58184	; 0xe348
   1e71c:	e3401003 	movt	r1, #3
   1e720:	e30a0a18 	movw	r0, #43544	; 0xaa18
   1e724:	e3400003 	movt	r0, #3
   1e728:	e3a02e11 	mov	r2, #272	; 0x110
   1e72c:	e92d4010 	push	{r4, lr}
   1e730:	eb003862 	bl	2c8c0 <assertion_failed>

0001e734 <CUSBSerialDevice::Configure()>:
   1e734:	e92d4070 	push	{r4, r5, r6, lr}
   1e738:	e1a05000 	mov	r5, r0
   1e73c:	e24dd008 	sub	sp, sp, #8
   1e740:	ea000003 	b	1e754 <CUSBSerialDevice::Configure()+0x20>
   1e744:	e5d43003 	ldrb	r3, [r4, #3]
   1e748:	e203303f 	and	r3, r3, #63	; 0x3f
   1e74c:	e3530002 	cmp	r3, #2
   1e750:	0a000025 	beq	1e7ec <CUSBSerialDevice::Configure()+0xb8>
   1e754:	e3a01005 	mov	r1, #5
   1e758:	e1a00005 	mov	r0, r5
   1e75c:	ebffc7be 	bl	1065c <CUSBFunction::GetDescriptor(unsigned char)>
   1e760:	e2504000 	subs	r4, r0, #0
   1e764:	1afffff6 	bne	1e744 <CUSBSerialDevice::Configure()+0x10>
   1e768:	e5950020 	ldr	r0, [r5, #32]
   1e76c:	e3500000 	cmp	r0, #0
   1e770:	0a00002e 	beq	1e830 <CUSBSerialDevice::Configure()+0xfc>
   1e774:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e778:	e3530000 	cmp	r3, #0
   1e77c:	0a00002b 	beq	1e830 <CUSBSerialDevice::Configure()+0xfc>
   1e780:	ebffc633 	bl	10054 <CUSBEndpoint::GetMaxPacketSize() const>
   1e784:	e585002c 	str	r0, [r5, #44]	; 0x2c
   1e788:	eb006149 	bl	36cb4 <operator new[](unsigned int)>
   1e78c:	e1a03000 	mov	r3, r0
   1e790:	e1a00005 	mov	r0, r5
   1e794:	e5853028 	str	r3, [r5, #40]	; 0x28
   1e798:	ebffc6bc 	bl	10290 <CUSBFunction::Configure()>
   1e79c:	e2504000 	subs	r4, r0, #0
   1e7a0:	0a000035 	beq	1e87c <CUSBSerialDevice::Configure()+0x148>
   1e7a4:	e595603c 	ldr	r6, [r5, #60]	; 0x3c
   1e7a8:	e3560000 	cmp	r6, #0
   1e7ac:	1a000039 	bne	1e898 <CUSBSerialDevice::Configure()+0x164>
   1e7b0:	e59f20f8 	ldr	r2, [pc, #248]	; 1e8b0 <CUSBSerialDevice::Configure()+0x17c>
   1e7b4:	e3a01001 	mov	r1, #1
   1e7b8:	e3040f00 	movw	r0, #20224	; 0x4f00
   1e7bc:	e3400004 	movt	r0, #4
   1e7c0:	eb006285 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   1e7c4:	e585003c 	str	r0, [r5, #60]	; 0x3c
   1e7c8:	eb003bd3 	bl	2d71c <CDeviceNameService::Get()>
   1e7cc:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
   1e7d0:	e59f10dc 	ldr	r1, [pc, #220]	; 1e8b4 <CUSBSerialDevice::Configure()+0x180>
   1e7d4:	e1a03005 	mov	r3, r5
   1e7d8:	e58d6000 	str	r6, [sp]
   1e7dc:	eb003bda 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1e7e0:	e1a00004 	mov	r0, r4
   1e7e4:	e28dd008 	add	sp, sp, #8
   1e7e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e7ec:	e1d430d2 	ldrsb	r3, [r4, #2]
   1e7f0:	e3530000 	cmp	r3, #0
   1e7f4:	ba000012 	blt	1e844 <CUSBSerialDevice::Configure()+0x110>
   1e7f8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1e7fc:	e3530000 	cmp	r3, #0
   1e800:	1a00000a 	bne	1e830 <CUSBSerialDevice::Configure()+0xfc>
   1e804:	e3a00014 	mov	r0, #20
   1e808:	eb006123 	bl	36c9c <operator new(unsigned int)>
   1e80c:	e1a06000 	mov	r6, r0
   1e810:	e1a00005 	mov	r0, r5
   1e814:	ebffc770 	bl	105dc <CUSBFunction::GetDevice() const>
   1e818:	e1a02004 	mov	r2, r4
   1e81c:	e1a01000 	mov	r1, r0
   1e820:	e1a00006 	mov	r0, r6
   1e824:	ebffc57b 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1e828:	e5856024 	str	r6, [r5, #36]	; 0x24
   1e82c:	eaffffc8 	b	1e754 <CUSBSerialDevice::Configure()+0x20>
   1e830:	e59f1078 	ldr	r1, [pc, #120]	; 1e8b0 <CUSBSerialDevice::Configure()+0x17c>
   1e834:	e1a00005 	mov	r0, r5
   1e838:	ebffc792 	bl	10688 <CUSBFunction::ConfigurationError(char const*) const>
   1e83c:	e3a04000 	mov	r4, #0
   1e840:	eaffffe6 	b	1e7e0 <CUSBSerialDevice::Configure()+0xac>
   1e844:	e5953020 	ldr	r3, [r5, #32]
   1e848:	e3530000 	cmp	r3, #0
   1e84c:	1afffff7 	bne	1e830 <CUSBSerialDevice::Configure()+0xfc>
   1e850:	e3a00014 	mov	r0, #20
   1e854:	eb006110 	bl	36c9c <operator new(unsigned int)>
   1e858:	e1a06000 	mov	r6, r0
   1e85c:	e1a00005 	mov	r0, r5
   1e860:	ebffc75d 	bl	105dc <CUSBFunction::GetDevice() const>
   1e864:	e1a02004 	mov	r2, r4
   1e868:	e1a01000 	mov	r1, r0
   1e86c:	e1a00006 	mov	r0, r6
   1e870:	ebffc568 	bl	fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1e874:	e5856020 	str	r6, [r5, #32]
   1e878:	eaffffb5 	b	1e754 <CUSBSerialDevice::Configure()+0x20>
   1e87c:	eb00428c 	bl	2f2b4 <CLogger::Get()>
   1e880:	e59f1028 	ldr	r1, [pc, #40]	; 1e8b0 <CUSBSerialDevice::Configure()+0x17c>
   1e884:	e3a02001 	mov	r2, #1
   1e888:	e30b3eac 	movw	r3, #48812	; 0xbeac
   1e88c:	e3403003 	movt	r3, #3
   1e890:	eb004455 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e894:	eaffffe8 	b	1e83c <CUSBSerialDevice::Configure()+0x108>
   1e898:	e30e1348 	movw	r1, #58184	; 0xe348
   1e89c:	e3401003 	movt	r1, #3
   1e8a0:	e30c0d74 	movw	r0, #52596	; 0xcd74
   1e8a4:	e3400003 	movt	r0, #3
   1e8a8:	e3a0207b 	mov	r2, #123	; 0x7b
   1e8ac:	eb003803 	bl	2c8c0 <assertion_failed>
   1e8b0:	0003e490 	.word	0x0003e490
   1e8b4:	0003e488 	.word	0x0003e488

0001e8b8 <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE>:
   1e8b8:	e92d4010 	push	{r4, lr}
   1e8bc:	e3044f00 	movw	r4, #20224	; 0x4f00
   1e8c0:	e3404004 	movt	r4, #4
   1e8c4:	e3a0203f 	mov	r2, #63	; 0x3f
   1e8c8:	e3a01001 	mov	r1, #1
   1e8cc:	e1a00004 	mov	r0, r4
   1e8d0:	eb00622c 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1e8d4:	e1a00004 	mov	r0, r4
   1e8d8:	e3042f78 	movw	r2, #20344	; 0x4f78
   1e8dc:	e3402004 	movt	r2, #4
   1e8e0:	e30711d8 	movw	r1, #29144	; 0x71d8
   1e8e4:	e3401003 	movt	r1, #3
   1e8e8:	e8bd4010 	pop	{r4, lr}
   1e8ec:	ea0058f0 	b	34cb4 <__aeabi_atexit>

0001e8f0 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   1e8f0:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1e8f4:	e92d4010 	push	{r4, lr}
   1e8f8:	e1a04000 	mov	r4, r0
   1e8fc:	e3a03000 	mov	r3, #0
   1e900:	e2800014 	add	r0, r0, #20
   1e904:	e5843008 	str	r3, [r4, #8]
   1e908:	e1c430bc 	strh	r3, [r4, #12]
   1e90c:	e5843010 	str	r3, [r4, #16]
   1e910:	f444078f 	vst1.32	{d16}, [r4]
   1e914:	eb0000d7 	bl	1ec78 <CKeyMap::CKeyMap()>
   1e918:	e1a00004 	mov	r0, r4
   1e91c:	e8bd8010 	pop	{r4, pc}

0001e920 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   1e920:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   1e924:	e92d4010 	push	{r4, lr}
   1e928:	e1a04000 	mov	r4, r0
   1e92c:	e3a03000 	mov	r3, #0
   1e930:	e2800014 	add	r0, r0, #20
   1e934:	e5843008 	str	r3, [r4, #8]
   1e938:	f444078f 	vst1.32	{d16}, [r4]
   1e93c:	eb00010d 	bl	1ed78 <CKeyMap::~CKeyMap()>
   1e940:	e1a00004 	mov	r0, r4
   1e944:	e8bd8010 	pop	{r4, pc}

0001e948 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   1e948:	e3510000 	cmp	r1, #0
   1e94c:	0a000001 	beq	1e958 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   1e950:	e5801000 	str	r1, [r0]
   1e954:	e12fff1e 	bx	lr
   1e958:	e30e1498 	movw	r1, #58520	; 0xe498
   1e95c:	e3401003 	movt	r1, #3
   1e960:	e30e04b0 	movw	r0, #58544	; 0xe4b0
   1e964:	e3400003 	movt	r0, #3
   1e968:	e3a0202f 	mov	r2, #47	; 0x2f
   1e96c:	e92d4010 	push	{r4, lr}
   1e970:	eb0037d2 	bl	2c8c0 <assertion_failed>

0001e974 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   1e974:	e3510000 	cmp	r1, #0
   1e978:	0a000001 	beq	1e984 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   1e97c:	e5801004 	str	r1, [r0, #4]
   1e980:	e12fff1e 	bx	lr
   1e984:	e30e1498 	movw	r1, #58520	; 0xe498
   1e988:	e3401003 	movt	r1, #3
   1e98c:	e30e04c8 	movw	r0, #58568	; 0xe4c8
   1e990:	e3400003 	movt	r0, #3
   1e994:	e3a02035 	mov	r2, #53	; 0x35
   1e998:	e92d4010 	push	{r4, lr}
   1e99c:	eb0037c7 	bl	2c8c0 <assertion_failed>

0001e9a0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   1e9a0:	e3510000 	cmp	r1, #0
   1e9a4:	0a000001 	beq	1e9b0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   1e9a8:	e5801008 	str	r1, [r0, #8]
   1e9ac:	e12fff1e 	bx	lr
   1e9b0:	e30e1498 	movw	r1, #58520	; 0xe498
   1e9b4:	e3401003 	movt	r1, #3
   1e9b8:	e30e04e4 	movw	r0, #58596	; 0xe4e4
   1e9bc:	e3400003 	movt	r0, #3
   1e9c0:	e3a0203b 	mov	r2, #59	; 0x3b
   1e9c4:	e92d4010 	push	{r4, lr}
   1e9c8:	eb0037bc 	bl	2c8c0 <assertion_failed>

0001e9cc <CKeyboardBehaviour::GetLEDStatus() const>:
   1e9cc:	e2800014 	add	r0, r0, #20
   1e9d0:	ea00018f 	b	1f014 <CKeyMap::GetLEDStatus() const>

0001e9d4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   1e9d4:	e92d4070 	push	{r4, r5, r6, lr}
   1e9d8:	e1a04000 	mov	r4, r0
   1e9dc:	e2805014 	add	r5, r0, #20
   1e9e0:	e24dd008 	sub	sp, sp, #8
   1e9e4:	e1a00005 	mov	r0, r5
   1e9e8:	e5d4600c 	ldrb	r6, [r4, #12]
   1e9ec:	e1a02006 	mov	r2, r6
   1e9f0:	eb000103 	bl	1ee04 <CKeyMap::Translate(unsigned char, unsigned char)>
   1e9f4:	e3003149 	movw	r3, #329	; 0x149
   1e9f8:	e1500003 	cmp	r0, r3
   1e9fc:	8a000009 	bhi	1ea28 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x54>
   1ea00:	e300313d 	movw	r3, #317	; 0x13d
   1ea04:	e1500003 	cmp	r0, r3
   1ea08:	8a00001c 	bhi	1ea80 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   1ea0c:	e2403f4e 	sub	r3, r0, #312	; 0x138
   1ea10:	e2433003 	sub	r3, r3, #3
   1ea14:	e6ff3073 	uxth	r3, r3
   1ea18:	e3530002 	cmp	r3, #2
   1ea1c:	8a00000a 	bhi	1ea4c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x78>
   1ea20:	e28dd008 	add	sp, sp, #8
   1ea24:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ea28:	e300314a 	movw	r3, #330	; 0x14a
   1ea2c:	e1500003 	cmp	r0, r3
   1ea30:	1a000005 	bne	1ea4c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x78>
   1ea34:	e5943008 	ldr	r3, [r4, #8]
   1ea38:	e3530000 	cmp	r3, #0
   1ea3c:	0afffff7 	beq	1ea20 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1ea40:	e28dd008 	add	sp, sp, #8
   1ea44:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ea48:	e12fff13 	bx	r3
   1ea4c:	e1a01000 	mov	r1, r0
   1ea50:	e28d3004 	add	r3, sp, #4
   1ea54:	e1a02006 	mov	r2, r6
   1ea58:	e1a00005 	mov	r0, r5
   1ea5c:	eb00013e 	bl	1ef5c <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   1ea60:	e3500000 	cmp	r0, #0
   1ea64:	0affffed 	beq	1ea20 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1ea68:	e5943000 	ldr	r3, [r4]
   1ea6c:	e3530000 	cmp	r3, #0
   1ea70:	0affffea 	beq	1ea20 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1ea74:	e12fff33 	blx	r3
   1ea78:	e28dd008 	add	sp, sp, #8
   1ea7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ea80:	e5943004 	ldr	r3, [r4, #4]
   1ea84:	e3530000 	cmp	r3, #0
   1ea88:	0affffe4 	beq	1ea20 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1ea8c:	e2400f4f 	sub	r0, r0, #316	; 0x13c
   1ea90:	e2400002 	sub	r0, r0, #2
   1ea94:	e28dd008 	add	sp, sp, #8
   1ea98:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ea9c:	e12fff13 	bx	r3

0001eaa0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   1eaa0:	e92d4010 	push	{r4, lr}
   1eaa4:	e2524000 	subs	r4, r2, #0
   1eaa8:	e24dd008 	sub	sp, sp, #8
   1eaac:	0a000019 	beq	1eb18 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x78>
   1eab0:	e5943010 	ldr	r3, [r4, #16]
   1eab4:	e1500003 	cmp	r0, r3
   1eab8:	1a00001c 	bne	1eb30 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x90>
   1eabc:	e5d4100d 	ldrb	r1, [r4, #13]
   1eac0:	e3510000 	cmp	r1, #0
   1eac4:	1a000001 	bne	1ead0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x30>
   1eac8:	e28dd008 	add	sp, sp, #8
   1eacc:	e8bd8010 	pop	{r4, pc}
   1ead0:	e1a00004 	mov	r0, r4
   1ead4:	ebffffbe 	bl	1e9d4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   1ead8:	eb005c2e 	bl	35b98 <CTimer::Get()>
   1eadc:	e3a03000 	mov	r3, #0
   1eae0:	e3a01008 	mov	r1, #8
   1eae4:	e58d4000 	str	r4, [sp]
   1eae8:	e30e2aa0 	movw	r2, #60064	; 0xeaa0
   1eaec:	e3402001 	movt	r2, #1
   1eaf0:	eb005a3d 	bl	353ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1eaf4:	e3500000 	cmp	r0, #0
   1eaf8:	e5840010 	str	r0, [r4, #16]
   1eafc:	1afffff1 	bne	1eac8 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   1eb00:	e30e1498 	movw	r1, #58520	; 0xe498
   1eb04:	e3401003 	movt	r1, #3
   1eb08:	e30c0c18 	movw	r0, #52248	; 0xcc18
   1eb0c:	e3400003 	movt	r0, #3
   1eb10:	e3a020b7 	mov	r2, #183	; 0xb7
   1eb14:	eb003769 	bl	2c8c0 <assertion_failed>
   1eb18:	e30e1498 	movw	r1, #58520	; 0xe498
   1eb1c:	e3401003 	movt	r1, #3
   1eb20:	e30a0a18 	movw	r0, #43544	; 0xaa18
   1eb24:	e3400003 	movt	r0, #3
   1eb28:	e3a020be 	mov	r2, #190	; 0xbe
   1eb2c:	eb003763 	bl	2c8c0 <assertion_failed>
   1eb30:	e30e1498 	movw	r1, #58520	; 0xe498
   1eb34:	e3401003 	movt	r1, #3
   1eb38:	e30e04fc 	movw	r0, #58620	; 0xe4fc
   1eb3c:	e3400003 	movt	r0, #3
   1eb40:	e3a020b0 	mov	r2, #176	; 0xb0
   1eb44:	eb00375d 	bl	2c8c0 <assertion_failed>

0001eb48 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   1eb48:	e221c080 	eor	ip, r1, #128	; 0x80
   1eb4c:	e1a02000 	mov	r2, r0
   1eb50:	e35c0007 	cmp	ip, #7
   1eb54:	8a000006 	bhi	1eb74 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>
   1eb58:	e5d0300c 	ldrb	r3, [r0, #12]
   1eb5c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1eb60:	e241e080 	sub	lr, r1, #128	; 0x80
   1eb64:	e3a01001 	mov	r1, #1
   1eb68:	e1833e11 	orr	r3, r3, r1, lsl lr
   1eb6c:	e5c0300c 	strb	r3, [r0, #12]
   1eb70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1eb74:	e5d0c00d 	ldrb	ip, [r0, #13]
   1eb78:	e15c0001 	cmp	ip, r1
   1eb7c:	012fff1e 	bxeq	lr
   1eb80:	e5c2100d 	strb	r1, [r2, #13]
   1eb84:	eaffff92 	b	1e9d4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

0001eb88 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   1eb88:	e2213080 	eor	r3, r1, #128	; 0x80
   1eb8c:	e92d4010 	push	{r4, lr}
   1eb90:	e3530007 	cmp	r3, #7
   1eb94:	e1a04000 	mov	r4, r0
   1eb98:	8a000005 	bhi	1ebb4 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x2c>
   1eb9c:	e5d0300c 	ldrb	r3, [r0, #12]
   1eba0:	e2412080 	sub	r2, r1, #128	; 0x80
   1eba4:	e3a01001 	mov	r1, #1
   1eba8:	e1c33211 	bic	r3, r3, r1, lsl r2
   1ebac:	e5c0300c 	strb	r3, [r0, #12]
   1ebb0:	e8bd8010 	pop	{r4, pc}
   1ebb4:	e5d0300d 	ldrb	r3, [r0, #13]
   1ebb8:	e1530001 	cmp	r3, r1
   1ebbc:	18bd8010 	popne	{r4, pc}
   1ebc0:	e5903010 	ldr	r3, [r0, #16]
   1ebc4:	e3530000 	cmp	r3, #0
   1ebc8:	1a000002 	bne	1ebd8 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   1ebcc:	e3a03000 	mov	r3, #0
   1ebd0:	e5c4300d 	strb	r3, [r4, #13]
   1ebd4:	e8bd8010 	pop	{r4, pc}
   1ebd8:	eb005bee 	bl	35b98 <CTimer::Get()>
   1ebdc:	e5941010 	ldr	r1, [r4, #16]
   1ebe0:	eb005a56 	bl	35540 <CTimer::CancelKernelTimer(unsigned int)>
   1ebe4:	e3a03000 	mov	r3, #0
   1ebe8:	e5843010 	str	r3, [r4, #16]
   1ebec:	eafffff6 	b	1ebcc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

0001ebf0 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   1ebf0:	e5903010 	ldr	r3, [r0, #16]
   1ebf4:	e92d4010 	push	{r4, lr}
   1ebf8:	e1530001 	cmp	r3, r1
   1ebfc:	e24dd008 	sub	sp, sp, #8
   1ec00:	1a000016 	bne	1ec60 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x70>
   1ec04:	e5d0100d 	ldrb	r1, [r0, #13]
   1ec08:	e1a04000 	mov	r4, r0
   1ec0c:	e3510000 	cmp	r1, #0
   1ec10:	1a000001 	bne	1ec1c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   1ec14:	e28dd008 	add	sp, sp, #8
   1ec18:	e8bd8010 	pop	{r4, pc}
   1ec1c:	ebffff6c 	bl	1e9d4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   1ec20:	eb005bdc 	bl	35b98 <CTimer::Get()>
   1ec24:	e3a03000 	mov	r3, #0
   1ec28:	e3a01008 	mov	r1, #8
   1ec2c:	e58d4000 	str	r4, [sp]
   1ec30:	e30e2aa0 	movw	r2, #60064	; 0xeaa0
   1ec34:	e3402001 	movt	r2, #1
   1ec38:	eb0059eb 	bl	353ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1ec3c:	e3500000 	cmp	r0, #0
   1ec40:	e5840010 	str	r0, [r4, #16]
   1ec44:	1afffff2 	bne	1ec14 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   1ec48:	e30e1498 	movw	r1, #58520	; 0xe498
   1ec4c:	e3401003 	movt	r1, #3
   1ec50:	e30c0c18 	movw	r0, #52248	; 0xcc18
   1ec54:	e3400003 	movt	r0, #3
   1ec58:	e3a020b7 	mov	r2, #183	; 0xb7
   1ec5c:	eb003717 	bl	2c8c0 <assertion_failed>
   1ec60:	e30e1498 	movw	r1, #58520	; 0xe498
   1ec64:	e3401003 	movt	r1, #3
   1ec68:	e30e04fc 	movw	r0, #58620	; 0xe4fc
   1ec6c:	e3400003 	movt	r0, #3
   1ec70:	e3a020b0 	mov	r2, #176	; 0xb0
   1ec74:	eb003711 	bl	2c8c0 <assertion_failed>

0001ec78 <CKeyMap::CKeyMap()>:
   1ec78:	e2803c05 	add	r3, r0, #1280	; 0x500
   1ec7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ec80:	e3a04000 	mov	r4, #0
   1ec84:	e1a07000 	mov	r7, r0
   1ec88:	e1c340b0 	strh	r4, [r3]
   1ec8c:	e5c04502 	strb	r4, [r0, #1282]	; 0x502
   1ec90:	eb003f77 	bl	2ea74 <CKernelOptions::Get()>
   1ec94:	eb003f46 	bl	2e9b4 <CKernelOptions::GetKeyMap() const>
   1ec98:	e2506000 	subs	r6, r0, #0
   1ec9c:	0a000029 	beq	1ed48 <CKeyMap::CKeyMap()+0xd0>
   1eca0:	e3048c88 	movw	r8, #19592	; 0x4c88
   1eca4:	e3408004 	movt	r8, #4
   1eca8:	e5980000 	ldr	r0, [r8]
   1ecac:	e1500004 	cmp	r0, r4
   1ecb0:	11a09008 	movne	r9, r8
   1ecb4:	11a05008 	movne	r5, r8
   1ecb8:	1a000004 	bne	1ecd0 <CKeyMap::CKeyMap()+0x58>
   1ecbc:	ea000027 	b	1ed60 <CKeyMap::CKeyMap()+0xe8>
   1ecc0:	e5b50004 	ldr	r0, [r5, #4]!
   1ecc4:	e2844001 	add	r4, r4, #1
   1ecc8:	e3500000 	cmp	r0, #0
   1eccc:	0a00000c 	beq	1ed04 <CKeyMap::CKeyMap()+0x8c>
   1ecd0:	e1a01006 	mov	r1, r6
   1ecd4:	eb005be8 	bl	35c7c <strcmp>
   1ecd8:	e3500000 	cmp	r0, #0
   1ecdc:	1afffff7 	bne	1ecc0 <CKeyMap::CKeyMap()+0x48>
   1ece0:	e3a03c05 	mov	r3, #1280	; 0x500
   1ece4:	e30e1660 	movw	r1, #58976	; 0xe660
   1ece8:	e3401003 	movt	r1, #3
   1ecec:	e3a02c05 	mov	r2, #1280	; 0x500
   1ecf0:	e1a00007 	mov	r0, r7
   1ecf4:	e0211493 	mla	r1, r3, r4, r1
   1ecf8:	eb005dde 	bl	36478 <memcpy>
   1ecfc:	e1a00007 	mov	r0, r7
   1ed00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ed04:	e5983000 	ldr	r3, [r8]
   1ed08:	e3530000 	cmp	r3, #0
   1ed0c:	0a000013 	beq	1ed60 <CKeyMap::CKeyMap()+0xe8>
   1ed10:	e30e552c 	movw	r5, #58668	; 0xe52c
   1ed14:	e3405003 	movt	r5, #3
   1ed18:	e1a04000 	mov	r4, r0
   1ed1c:	ea000003 	b	1ed30 <CKeyMap::CKeyMap()+0xb8>
   1ed20:	e5b93004 	ldr	r3, [r9, #4]!
   1ed24:	e2844001 	add	r4, r4, #1
   1ed28:	e3530000 	cmp	r3, #0
   1ed2c:	0a00000b 	beq	1ed60 <CKeyMap::CKeyMap()+0xe8>
   1ed30:	e1a00003 	mov	r0, r3
   1ed34:	e1a01005 	mov	r1, r5
   1ed38:	eb005bcf 	bl	35c7c <strcmp>
   1ed3c:	e3500000 	cmp	r0, #0
   1ed40:	1afffff6 	bne	1ed20 <CKeyMap::CKeyMap()+0xa8>
   1ed44:	eaffffe5 	b	1ece0 <CKeyMap::CKeyMap()+0x68>
   1ed48:	e30e1510 	movw	r1, #58640	; 0xe510
   1ed4c:	e3401003 	movt	r1, #3
   1ed50:	e30e051c 	movw	r0, #58652	; 0xe51c
   1ed54:	e3400003 	movt	r0, #3
   1ed58:	e3a02087 	mov	r2, #135	; 0x87
   1ed5c:	eb0036d7 	bl	2c8c0 <assertion_failed>
   1ed60:	e30e1510 	movw	r1, #58640	; 0xe510
   1ed64:	e3401003 	movt	r1, #3
   1ed68:	e30e0530 	movw	r0, #58672	; 0xe530
   1ed6c:	e3400003 	movt	r0, #3
   1ed70:	e3a0208d 	mov	r2, #141	; 0x8d
   1ed74:	eb0036d1 	bl	2c8c0 <assertion_failed>

0001ed78 <CKeyMap::~CKeyMap()>:
   1ed78:	e12fff1e 	bx	lr

0001ed7c <CKeyMap::ClearTable(unsigned char)>:
   1ed7c:	e3510004 	cmp	r1, #4
   1ed80:	8a000009 	bhi	1edac <CKeyMap::ClearTable(unsigned char)+0x30>
   1ed84:	e1a01081 	lsl	r1, r1, #1
   1ed88:	e2802c05 	add	r2, r0, #1280	; 0x500
   1ed8c:	e0803001 	add	r3, r0, r1
   1ed90:	e0822001 	add	r2, r2, r1
   1ed94:	e3a01000 	mov	r1, #0
   1ed98:	e0c310ba 	strh	r1, [r3], #10
   1ed9c:	e1530002 	cmp	r3, r2
   1eda0:	1afffffc 	bne	1ed98 <CKeyMap::ClearTable(unsigned char)+0x1c>
   1eda4:	e3a00001 	mov	r0, #1
   1eda8:	e12fff1e 	bx	lr
   1edac:	e3a00000 	mov	r0, #0
   1edb0:	e12fff1e 	bx	lr

0001edb4 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   1edb4:	e6afc072 	sxtb	ip, r2
   1edb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1edbc:	e35c0000 	cmp	ip, #0
   1edc0:	e1a0e000 	mov	lr, r0
   1edc4:	c3a00000 	movgt	r0, #0
   1edc8:	d3a00001 	movle	r0, #1
   1edcc:	e3510004 	cmp	r1, #4
   1edd0:	83800001 	orrhi	r0, r0, #1
   1edd4:	e3500000 	cmp	r0, #0
   1edd8:	1a000007 	bne	1edfc <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   1eddc:	e300c13a 	movw	ip, #314	; 0x13a
   1ede0:	e153000c 	cmp	r3, ip
   1ede4:	90822102 	addls	r2, r2, r2, lsl #2
   1ede8:	93a00001 	movls	r0, #1
   1edec:	90822001 	addls	r2, r2, r1
   1edf0:	91a02012 	lslls	r2, r2, r0
   1edf4:	918e30b2 	strhls	r3, [lr, r2]
   1edf8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1edfc:	e3a00000 	mov	r0, #0
   1ee00:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001ee04 <CKeyMap::Translate(unsigned char, unsigned char)>:
   1ee04:	e6af3071 	sxtb	r3, r1
   1ee08:	e3530000 	cmp	r3, #0
   1ee0c:	da00002a 	ble	1eebc <CKeyMap::Translate(unsigned char, unsigned char)+0xb8>
   1ee10:	e3a0300a 	mov	r3, #10
   1ee14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1ee18:	e1a0e000 	mov	lr, r0
   1ee1c:	e300c10a 	movw	ip, #266	; 0x10a
   1ee20:	e0030193 	mul	r3, r3, r1
   1ee24:	e19000b3 	ldrh	r0, [r0, r3]
   1ee28:	e150000c 	cmp	r0, ip
   1ee2c:	0a00001c 	beq	1eea4 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   1ee30:	e2403f45 	sub	r3, r0, #276	; 0x114
   1ee34:	e2433003 	sub	r3, r3, #3
   1ee38:	e353000b 	cmp	r3, #11
   1ee3c:	8a000001 	bhi	1ee48 <CKeyMap::Translate(unsigned char, unsigned char)+0x44>
   1ee40:	e3120004 	tst	r2, #4
   1ee44:	1a000026 	bne	1eee4 <CKeyMap::Translate(unsigned char, unsigned char)+0xe0>
   1ee48:	e312008c 	tst	r2, #140	; 0x8c
   1ee4c:	1a00001c 	bne	1eec4 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   1ee50:	e2413053 	sub	r3, r1, #83	; 0x53
   1ee54:	e3530010 	cmp	r3, #16
   1ee58:	9a00001b 	bls	1eecc <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   1ee5c:	e3120040 	tst	r2, #64	; 0x40
   1ee60:	0a00002c 	beq	1ef18 <CKeyMap::Translate(unsigned char, unsigned char)+0x114>
   1ee64:	e3a0300a 	mov	r3, #10
   1ee68:	e3120022 	tst	r2, #34	; 0x22
   1ee6c:	e023e193 	mla	r3, r3, r1, lr
   1ee70:	11d300b6 	ldrhne	r0, [r3, #6]
   1ee74:	01d300b4 	ldrheq	r0, [r3, #4]
   1ee78:	e3003126 	movw	r3, #294	; 0x126
   1ee7c:	e1500003 	cmp	r0, r3
   1ee80:	0a00001f 	beq	1ef04 <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   1ee84:	e3500f4a 	cmp	r0, #296	; 0x128
   1ee88:	0a000018 	beq	1eef0 <CKeyMap::Translate(unsigned char, unsigned char)+0xec>
   1ee8c:	e3500f49 	cmp	r0, #292	; 0x124
   1ee90:	0300013b 	movweq	r0, #315	; 0x13b
   1ee94:	05de3500 	ldrbeq	r3, [lr, #1280]	; 0x500
   1ee98:	02233001 	eoreq	r3, r3, #1
   1ee9c:	05ce3500 	strbeq	r3, [lr, #1280]	; 0x500
   1eea0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1eea4:	e3120011 	tst	r2, #17
   1eea8:	0affffe6 	beq	1ee48 <CKeyMap::Translate(unsigned char, unsigned char)+0x44>
   1eeac:	e3120004 	tst	r2, #4
   1eeb0:	0affffe4 	beq	1ee48 <CKeyMap::Translate(unsigned char, unsigned char)+0x44>
   1eeb4:	e300014a 	movw	r0, #330	; 0x14a
   1eeb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1eebc:	e3a00000 	mov	r0, #0
   1eec0:	e12fff1e 	bx	lr
   1eec4:	e3a00000 	mov	r0, #0
   1eec8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1eecc:	e5de3501 	ldrb	r3, [lr, #1281]	; 0x501
   1eed0:	e0811101 	add	r1, r1, r1, lsl #2
   1eed4:	e0811003 	add	r1, r1, r3
   1eed8:	e1a01081 	lsl	r1, r1, #1
   1eedc:	e19e00b1 	ldrh	r0, [lr, r1]
   1eee0:	eaffffe4 	b	1ee78 <CKeyMap::Translate(unsigned char, unsigned char)+0x74>
   1eee4:	e2800027 	add	r0, r0, #39	; 0x27
   1eee8:	e6ff0070 	uxth	r0, r0
   1eeec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1eef0:	e5de3501 	ldrb	r3, [lr, #1281]	; 0x501
   1eef4:	e3a00f4f 	mov	r0, #316	; 0x13c
   1eef8:	e2233001 	eor	r3, r3, #1
   1eefc:	e5ce3501 	strb	r3, [lr, #1281]	; 0x501
   1ef00:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1ef04:	e5de3502 	ldrb	r3, [lr, #1282]	; 0x502
   1ef08:	e300013d 	movw	r0, #317	; 0x13d
   1ef0c:	e2233001 	eor	r3, r3, #1
   1ef10:	e5ce3502 	strb	r3, [lr, #1282]	; 0x502
   1ef14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1ef18:	e3120022 	tst	r2, #34	; 0x22
   1ef1c:	1a00000a 	bne	1ef4c <CKeyMap::Translate(unsigned char, unsigned char)+0x148>
   1ef20:	e3120011 	tst	r2, #17
   1ef24:	0affffd3 	beq	1ee78 <CKeyMap::Translate(unsigned char, unsigned char)+0x74>
   1ef28:	e2412004 	sub	r2, r1, #4
   1ef2c:	e0813101 	add	r3, r1, r1, lsl #2
   1ef30:	e3520019 	cmp	r2, #25
   1ef34:	93a02000 	movls	r2, #0
   1ef38:	83a02001 	movhi	r2, #1
   1ef3c:	e0833102 	add	r3, r3, r2, lsl #2
   1ef40:	e1a03083 	lsl	r3, r3, #1
   1ef44:	e19e00b3 	ldrh	r0, [lr, r3]
   1ef48:	eaffffca 	b	1ee78 <CKeyMap::Translate(unsigned char, unsigned char)+0x74>
   1ef4c:	e3a0300a 	mov	r3, #10
   1ef50:	e023e193 	mla	r3, r3, r1, lr
   1ef54:	e1d300b2 	ldrh	r0, [r3, #2]
   1ef58:	eaffffc6 	b	1ee78 <CKeyMap::Translate(unsigned char, unsigned char)+0x74>

0001ef5c <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   1ef5c:	e241c021 	sub	ip, r1, #33	; 0x21
   1ef60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1ef64:	e300e119 	movw	lr, #281	; 0x119
   1ef68:	e6ffc07c 	uxth	ip, ip
   1ef6c:	e15c000e 	cmp	ip, lr
   1ef70:	8a00001b 	bhi	1efe4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>
   1ef74:	e241cc01 	sub	ip, r1, #256	; 0x100
   1ef78:	e6ffe07c 	uxth	lr, ip
   1ef7c:	e35e003a 	cmp	lr, #58	; 0x3a
   1ef80:	9a000019 	bls	1efec <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   1ef84:	e6afc071 	sxtb	ip, r1
   1ef88:	e3120011 	tst	r2, #17
   1ef8c:	0a00000a 	beq	1efbc <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>
   1ef90:	e6efc071 	uxtb	ip, r1
   1ef94:	e24c2061 	sub	r2, ip, #97	; 0x61
   1ef98:	e3520019 	cmp	r2, #25
   1ef9c:	8a000010 	bhi	1efe4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>
   1efa0:	e24cc060 	sub	ip, ip, #96	; 0x60
   1efa4:	e6afc07c 	sxtb	ip, ip
   1efa8:	e3a02000 	mov	r2, #0
   1efac:	e1a00003 	mov	r0, r3
   1efb0:	e5c3c000 	strb	ip, [r3]
   1efb4:	e5c32001 	strb	r2, [r3, #1]
   1efb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1efbc:	e5d02500 	ldrb	r2, [r0, #1280]	; 0x500
   1efc0:	e3520000 	cmp	r2, #0
   1efc4:	0afffff7 	beq	1efa8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x4c>
   1efc8:	e6ef1071 	uxtb	r1, r1
   1efcc:	e2412041 	sub	r2, r1, #65	; 0x41
   1efd0:	e3520019 	cmp	r2, #25
   1efd4:	8a000009 	bhi	1f000 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   1efd8:	e2811020 	add	r1, r1, #32
   1efdc:	e6afc071 	sxtb	ip, r1
   1efe0:	eafffff0 	b	1efa8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x4c>
   1efe4:	e3a00000 	mov	r0, #0
   1efe8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1efec:	e3043c88 	movw	r3, #19592	; 0x4c88
   1eff0:	e3403004 	movt	r3, #4
   1eff4:	e083310c 	add	r3, r3, ip, lsl #2
   1eff8:	e5930020 	ldr	r0, [r3, #32]
   1effc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1f000:	e2412061 	sub	r2, r1, #97	; 0x61
   1f004:	e3520019 	cmp	r2, #25
   1f008:	92411020 	subls	r1, r1, #32
   1f00c:	96afc071 	sxtbls	ip, r1
   1f010:	eaffffe4 	b	1efa8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x4c>

0001f014 <CKeyMap::GetLEDStatus() const>:
   1f014:	e5d03500 	ldrb	r3, [r0, #1280]	; 0x500
   1f018:	e1a02000 	mov	r2, r0
   1f01c:	e5d01501 	ldrb	r1, [r0, #1281]	; 0x501
   1f020:	e1a03083 	lsl	r3, r3, #1
   1f024:	e3510000 	cmp	r1, #0
   1f028:	e6ef0073 	uxtb	r0, r3
   1f02c:	e5d23502 	ldrb	r3, [r2, #1282]	; 0x502
   1f030:	13800001 	orrne	r0, r0, #1
   1f034:	e3530000 	cmp	r3, #0
   1f038:	13800004 	orrne	r0, r0, #4
   1f03c:	e12fff1e 	bx	lr

0001f040 <CKeyMap::LookupDefaultMap(char const*)>:
   1f040:	e92d4070 	push	{r4, r5, r6, lr}
   1f044:	e3044c88 	movw	r4, #19592	; 0x4c88
   1f048:	e3404004 	movt	r4, #4
   1f04c:	e1a06000 	mov	r6, r0
   1f050:	e5940000 	ldr	r0, [r4]
   1f054:	e3500000 	cmp	r0, #0
   1f058:	0a000016 	beq	1f0b8 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   1f05c:	e3560000 	cmp	r6, #0
   1f060:	13a05000 	movne	r5, #0
   1f064:	1a000004 	bne	1f07c <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   1f068:	ea00000c 	b	1f0a0 <CKeyMap::LookupDefaultMap(char const*)+0x60>
   1f06c:	e5b40004 	ldr	r0, [r4, #4]!
   1f070:	e2855001 	add	r5, r5, #1
   1f074:	e3500000 	cmp	r0, #0
   1f078:	0a00000e 	beq	1f0b8 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   1f07c:	e1a01006 	mov	r1, r6
   1f080:	eb005afd 	bl	35c7c <strcmp>
   1f084:	e3500000 	cmp	r0, #0
   1f088:	1afffff7 	bne	1f06c <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   1f08c:	e3a03c05 	mov	r3, #1280	; 0x500
   1f090:	e30e0660 	movw	r0, #58976	; 0xe660
   1f094:	e3400003 	movt	r0, #3
   1f098:	e0200593 	mla	r0, r3, r5, r0
   1f09c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0a0:	e30e1510 	movw	r1, #58640	; 0xe510
   1f0a4:	e3401003 	movt	r1, #3
   1f0a8:	e30e051c 	movw	r0, #58652	; 0xe51c
   1f0ac:	e3400003 	movt	r0, #3
   1f0b0:	e3002155 	movw	r2, #341	; 0x155
   1f0b4:	eb003601 	bl	2c8c0 <assertion_failed>
   1f0b8:	e3a00000 	mov	r0, #0
   1f0bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f0c0 <proxy_handler(unsigned int, int, int, int, void*)>:
   1f0c0:	e59dc000 	ldr	ip, [sp]
   1f0c4:	e12fff1c 	bx	ip

0001f0c8 <CMouseDevice::~CMouseDevice()>:
   1f0c8:	e92d4070 	push	{r4, r5, r6, lr}
   1f0cc:	e1a04000 	mov	r4, r0
   1f0d0:	e300546c 	movw	r5, #1132	; 0x46c
   1f0d4:	e3405004 	movt	r5, #4
   1f0d8:	e3a06000 	mov	r6, #0
   1f0dc:	e2853008 	add	r3, r5, #8
   1f0e0:	e5806024 	str	r6, [r0, #36]	; 0x24
   1f0e4:	e5803000 	str	r3, [r0]
   1f0e8:	e5806028 	str	r6, [r0, #40]	; 0x28
   1f0ec:	eb00398a 	bl	2d71c <CDeviceNameService::Get()>
   1f0f0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1f0f4:	e1a03006 	mov	r3, r6
   1f0f8:	e2851028 	add	r1, r5, #40	; 0x28
   1f0fc:	eb0039ac 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1f100:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   1f104:	e3040f10 	movw	r0, #20240	; 0x4f10
   1f108:	e3400004 	movt	r0, #4
   1f10c:	eb006064 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1f110:	e2840008 	add	r0, r4, #8
   1f114:	eb000248 	bl	1fa3c <CMouseBehaviour::~CMouseBehaviour()>
   1f118:	e1a00004 	mov	r0, r4
   1f11c:	eb003815 	bl	2d178 <CDevice::~CDevice()>
   1f120:	e1a00004 	mov	r0, r4
   1f124:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f128 <CMouseDevice::~CMouseDevice()>:
   1f128:	e92d4010 	push	{r4, lr}
   1f12c:	e1a04000 	mov	r4, r0
   1f130:	ebffffe4 	bl	1f0c8 <CMouseDevice::~CMouseDevice()>
   1f134:	e1a00004 	mov	r0, r4
   1f138:	e3a01038 	mov	r1, #56	; 0x38
   1f13c:	eb005eee 	bl	36cfc <operator delete(void*, unsigned int)>
   1f140:	e1a00004 	mov	r0, r4
   1f144:	e8bd8010 	pop	{r4, pc}

0001f148 <CMouseDevice::CMouseDevice(unsigned int, bool)>:
   1f148:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f14c:	e1a04000 	mov	r4, r0
   1f150:	e1a08001 	mov	r8, r1
   1f154:	e24dd008 	sub	sp, sp, #8
   1f158:	e1a07002 	mov	r7, r2
   1f15c:	eb003832 	bl	2d22c <CDevice::CDevice()>
   1f160:	e1a00004 	mov	r0, r4
   1f164:	e300546c 	movw	r5, #1132	; 0x46c
   1f168:	e3405004 	movt	r5, #4
   1f16c:	e2853008 	add	r3, r5, #8
   1f170:	e3a06000 	mov	r6, #0
   1f174:	e4803008 	str	r3, [r0], #8
   1f178:	eb000143 	bl	1f68c <CMouseBehaviour::CMouseBehaviour()>
   1f17c:	e2852030 	add	r2, r5, #48	; 0x30
   1f180:	e3a01001 	mov	r1, #1
   1f184:	e5846024 	str	r6, [r4, #36]	; 0x24
   1f188:	e5846028 	str	r6, [r4, #40]	; 0x28
   1f18c:	e3040f10 	movw	r0, #20240	; 0x4f10
   1f190:	e3400004 	movt	r0, #4
   1f194:	eb006010 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   1f198:	e5848030 	str	r8, [r4, #48]	; 0x30
   1f19c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1f1a0:	e5c47034 	strb	r7, [r4, #52]	; 0x34
   1f1a4:	eb00395c 	bl	2d71c <CDeviceNameService::Get()>
   1f1a8:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1f1ac:	e1a03004 	mov	r3, r4
   1f1b0:	e2851028 	add	r1, r5, #40	; 0x28
   1f1b4:	e58d6000 	str	r6, [sp]
   1f1b8:	eb003963 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1f1bc:	e1a00004 	mov	r0, r4
   1f1c0:	e28dd008 	add	sp, sp, #8
   1f1c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001f1c8 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   1f1c8:	e2800008 	add	r0, r0, #8
   1f1cc:	ea000135 	b	1f6a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

0001f1d0 <CMouseDevice::Release()>:
   1f1d0:	e2800008 	add	r0, r0, #8
   1f1d4:	ea000226 	b	1fa74 <CMouseBehaviour::Release()>

0001f1d8 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   1f1d8:	e2800008 	add	r0, r0, #8
   1f1dc:	ea00017b 	b	1f7d0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>

0001f1e0 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   1f1e0:	e2800008 	add	r0, r0, #8
   1f1e4:	ea000238 	b	1facc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

0001f1e8 <CMouseDevice::ShowCursor(bool)>:
   1f1e8:	e2800008 	add	r0, r0, #8
   1f1ec:	ea00025a 	b	1fb5c <CMouseBehaviour::ShowCursor(bool)>

0001f1f0 <CMouseDevice::UpdateCursor()>:
   1f1f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f1f4:	e3530000 	cmp	r3, #0
   1f1f8:	112fff1e 	bxne	lr
   1f1fc:	e2800008 	add	r0, r0, #8
   1f200:	ea000271 	b	1fbcc <CMouseBehaviour::UpdateCursor()>

0001f204 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)>:
   1f204:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f208:	e92d4010 	push	{r4, lr}
   1f20c:	e3530000 	cmp	r3, #0
   1f210:	1a000009 	bne	1f23c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)+0x38>
   1f214:	e3510000 	cmp	r1, #0
   1f218:	e5801024 	str	r1, [r0, #36]	; 0x24
   1f21c:	e5802028 	str	r2, [r0, #40]	; 0x28
   1f220:	18bd8010 	popne	{r4, pc}
   1f224:	e3001460 	movw	r1, #1120	; 0x460
   1f228:	e3401004 	movt	r1, #4
   1f22c:	e30e0158 	movw	r0, #57688	; 0xe158
   1f230:	e3400003 	movt	r0, #3
   1f234:	e3a02057 	mov	r2, #87	; 0x57
   1f238:	eb0035a0 	bl	2c8c0 <assertion_failed>
   1f23c:	e3001460 	movw	r1, #1120	; 0x460
   1f240:	e3401004 	movt	r1, #4
   1f244:	e30e0140 	movw	r0, #57664	; 0xe140
   1f248:	e3400003 	movt	r0, #3
   1f24c:	e3a02054 	mov	r2, #84	; 0x54
   1f250:	eb00359a 	bl	2c8c0 <assertion_failed>

0001f254 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))>:
   1f254:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f258:	e3530000 	cmp	r3, #0
   1f25c:	1a000004 	bne	1f274 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x20>
   1f260:	e30f30c0 	movw	r3, #61632	; 0xf0c0
   1f264:	e3403001 	movt	r3, #1
   1f268:	e5801028 	str	r1, [r0, #40]	; 0x28
   1f26c:	e5803024 	str	r3, [r0, #36]	; 0x24
   1f270:	e12fff1e 	bx	lr
   1f274:	e3001460 	movw	r1, #1120	; 0x460
   1f278:	e3401004 	movt	r1, #4
   1f27c:	e30e0140 	movw	r0, #57664	; 0xe140
   1f280:	e3400003 	movt	r0, #3
   1f284:	e3a02054 	mov	r2, #84	; 0x54
   1f288:	e92d4010 	push	{r4, lr}
   1f28c:	eb00358b 	bl	2c8c0 <assertion_failed>

0001f290 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>:
   1f290:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f294:	e1a04000 	mov	r4, r0
   1f298:	e2800008 	add	r0, r0, #8
   1f29c:	e24dd008 	sub	sp, sp, #8
   1f2a0:	e1a07001 	mov	r7, r1
   1f2a4:	e1a05002 	mov	r5, r2
   1f2a8:	e1a06003 	mov	r6, r3
   1f2ac:	e59d8020 	ldr	r8, [sp, #32]
   1f2b0:	e58d8000 	str	r8, [sp]
   1f2b4:	eb000158 	bl	1f81c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>
   1f2b8:	e594e024 	ldr	lr, [r4, #36]	; 0x24
   1f2bc:	e35e0000 	cmp	lr, #0
   1f2c0:	0a000009 	beq	1f2ec <CMouseDevice::ReportHandler(unsigned int, int, int, int)+0x5c>
   1f2c4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f2c8:	e1a02006 	mov	r2, r6
   1f2cc:	e58d3020 	str	r3, [sp, #32]
   1f2d0:	e1a01005 	mov	r1, r5
   1f2d4:	e1a03008 	mov	r3, r8
   1f2d8:	e1a00007 	mov	r0, r7
   1f2dc:	e1a0c00e 	mov	ip, lr
   1f2e0:	e28dd008 	add	sp, sp, #8
   1f2e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1f2e8:	e12fff1c 	bx	ip
   1f2ec:	e28dd008 	add	sp, sp, #8
   1f2f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001f2f4 <CMouseDevice::GetButtonCount() const>:
   1f2f4:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   1f2f8:	e12fff1e 	bx	lr

0001f2fc <CMouseDevice::HasWheel() const>:
   1f2fc:	e5d00034 	ldrb	r0, [r0, #52]	; 0x34
   1f300:	e12fff1e 	bx	lr

0001f304 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE>:
   1f304:	e92d4010 	push	{r4, lr}
   1f308:	e3044f10 	movw	r4, #20240	; 0x4f10
   1f30c:	e3404004 	movt	r4, #4
   1f310:	e3a0203f 	mov	r2, #63	; 0x3f
   1f314:	e3a01001 	mov	r1, #1
   1f318:	e1a00004 	mov	r0, r4
   1f31c:	eb005f99 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1f320:	e1a00004 	mov	r0, r4
   1f324:	e3042f78 	movw	r2, #20344	; 0x4f78
   1f328:	e3402004 	movt	r2, #4
   1f32c:	e30711d8 	movw	r1, #29144	; 0x71d8
   1f330:	e3401003 	movt	r1, #3
   1f334:	e8bd4010 	pop	{r4, lr}
   1f338:	ea00565d 	b	34cb4 <__aeabi_atexit>
   1f33c:	00000000 	andeq	r0, r0, r0

0001f340 <CTouchScreenDevice::~CTouchScreenDevice()>:
   1f340:	e92d4070 	push	{r4, r5, r6, lr}
   1f344:	e1a04000 	mov	r4, r0
   1f348:	e30054cc 	movw	r5, #1228	; 0x4cc
   1f34c:	e3405004 	movt	r5, #4
   1f350:	e3a06000 	mov	r6, #0
   1f354:	e2853008 	add	r3, r5, #8
   1f358:	e5806008 	str	r6, [r0, #8]
   1f35c:	e5803000 	str	r3, [r0]
   1f360:	e5806010 	str	r6, [r0, #16]
   1f364:	eb0038ec 	bl	2d71c <CDeviceNameService::Get()>
   1f368:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1f36c:	e1a03006 	mov	r3, r6
   1f370:	e2851028 	add	r1, r5, #40	; 0x28
   1f374:	eb00390e 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1f378:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   1f37c:	e3040f20 	movw	r0, #20256	; 0x4f20
   1f380:	e3400004 	movt	r0, #4
   1f384:	eb005fc6 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1f388:	e1a00004 	mov	r0, r4
   1f38c:	eb003779 	bl	2d178 <CDevice::~CDevice()>
   1f390:	e1a00004 	mov	r0, r4
   1f394:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f398 <CTouchScreenDevice::~CTouchScreenDevice()>:
   1f398:	e92d4070 	push	{r4, r5, r6, lr}
   1f39c:	e1a04000 	mov	r4, r0
   1f3a0:	e30054cc 	movw	r5, #1228	; 0x4cc
   1f3a4:	e3405004 	movt	r5, #4
   1f3a8:	e3a06000 	mov	r6, #0
   1f3ac:	e2853008 	add	r3, r5, #8
   1f3b0:	e5806008 	str	r6, [r0, #8]
   1f3b4:	e5803000 	str	r3, [r0]
   1f3b8:	e5806010 	str	r6, [r0, #16]
   1f3bc:	eb0038d6 	bl	2d71c <CDeviceNameService::Get()>
   1f3c0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1f3c4:	e1a03006 	mov	r3, r6
   1f3c8:	e2851028 	add	r1, r5, #40	; 0x28
   1f3cc:	eb0038f8 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1f3d0:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   1f3d4:	e3040f20 	movw	r0, #20256	; 0x4f20
   1f3d8:	e3400004 	movt	r0, #4
   1f3dc:	eb005fb0 	bl	372a4 <CNumberPool::FreeNumber(unsigned int)>
   1f3e0:	e1a00004 	mov	r0, r4
   1f3e4:	eb003763 	bl	2d178 <CDevice::~CDevice()>
   1f3e8:	e1a00004 	mov	r0, r4
   1f3ec:	e3a01030 	mov	r1, #48	; 0x30
   1f3f0:	eb005e41 	bl	36cfc <operator delete(void*, unsigned int)>
   1f3f4:	e1a00004 	mov	r0, r4
   1f3f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f3fc <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>:
   1f3fc:	e92d4070 	push	{r4, r5, r6, lr}
   1f400:	e1a04000 	mov	r4, r0
   1f404:	e1a06001 	mov	r6, r1
   1f408:	e24dd008 	sub	sp, sp, #8
   1f40c:	e1a05002 	mov	r5, r2
   1f410:	eb003785 	bl	2d22c <CDevice::CDevice()>
   1f414:	e3020710 	movw	r0, #10000	; 0x2710
   1f418:	eddf2b1e 	vldr	d18, [pc, #120]	; 1f498 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)+0x9c>
   1f41c:	eddf3b1f 	vldr	d19, [pc, #124]	; 1f4a0 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)+0xa4>
   1f420:	ee800b90 	vdup.32	d16, r0
   1f424:	e2841014 	add	r1, r4, #20
   1f428:	e2842024 	add	r2, r4, #36	; 0x24
   1f42c:	e30034cc 	movw	r3, #1228	; 0x4cc
   1f430:	e3403004 	movt	r3, #4
   1f434:	e5846008 	str	r6, [r4, #8]
   1f438:	e2836028 	add	r6, r3, #40	; 0x28
   1f43c:	e584500c 	str	r5, [r4, #12]
   1f440:	e2833008 	add	r3, r3, #8
   1f444:	e3a05000 	mov	r5, #0
   1f448:	e5843000 	str	r3, [r4]
   1f44c:	e5845010 	str	r5, [r4, #16]
   1f450:	e3040f20 	movw	r0, #20256	; 0x4f20
   1f454:	e3400004 	movt	r0, #4
   1f458:	f4412a8f 	vst1.32	{d18-d19}, [r1]
   1f45c:	e3a01001 	mov	r1, #1
   1f460:	f442078f 	vst1.32	{d16}, [r2]
   1f464:	e1a02006 	mov	r2, r6
   1f468:	eb005f5b 	bl	371dc <CNumberPool::AllocateNumber(bool, char const*)>
   1f46c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1f470:	eb0038a9 	bl	2d71c <CDeviceNameService::Get()>
   1f474:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1f478:	e1a03004 	mov	r3, r4
   1f47c:	e1a01006 	mov	r1, r6
   1f480:	e58d5000 	str	r5, [sp]
   1f484:	eb0038b0 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1f488:	e1a00004 	mov	r0, r4
   1f48c:	e28dd008 	add	sp, sp, #8
   1f490:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f494:	e320f000 	nop	{0}
   1f498:	000003e8 	.word	0x000003e8
   1f49c:	000003e8 	.word	0x000003e8
	...

0001f4a8 <CTouchScreenDevice::Update()>:
   1f4a8:	e5903008 	ldr	r3, [r0, #8]
   1f4ac:	e3530000 	cmp	r3, #0
   1f4b0:	012fff1e 	bxeq	lr
   1f4b4:	e590000c 	ldr	r0, [r0, #12]
   1f4b8:	e12fff13 	bx	r3

0001f4bc <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))>:
   1f4bc:	e5903010 	ldr	r3, [r0, #16]
   1f4c0:	e92d4010 	push	{r4, lr}
   1f4c4:	e3530000 	cmp	r3, #0
   1f4c8:	1a000008 	bne	1f4f0 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))+0x34>
   1f4cc:	e3510000 	cmp	r1, #0
   1f4d0:	e5801010 	str	r1, [r0, #16]
   1f4d4:	18bd8010 	popne	{r4, pc}
   1f4d8:	e30014a4 	movw	r1, #1188	; 0x4a4
   1f4dc:	e3401004 	movt	r1, #4
   1f4e0:	e30d0f4c 	movw	r0, #57164	; 0xdf4c
   1f4e4:	e3400003 	movt	r0, #3
   1f4e8:	e3a02041 	mov	r2, #65	; 0x41
   1f4ec:	eb0034f3 	bl	2c8c0 <assertion_failed>
   1f4f0:	e30014a4 	movw	r1, #1188	; 0x4a4
   1f4f4:	e3401004 	movt	r1, #4
   1f4f8:	e30004b4 	movw	r0, #1204	; 0x4b4
   1f4fc:	e3400004 	movt	r0, #4
   1f500:	e3a0203f 	mov	r2, #63	; 0x3f
   1f504:	eb0034ed 	bl	2c8c0 <assertion_failed>

0001f508 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)>:
   1f508:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1f50c:	e8914020 	ldm	r1, {r5, lr}
   1f510:	e155000e 	cmp	r5, lr
   1f514:	2a000028 	bcs	1f5bc <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xb4>
   1f518:	e5916008 	ldr	r6, [r1, #8]
   1f51c:	e591400c 	ldr	r4, [r1, #12]
   1f520:	e1560004 	cmp	r6, r4
   1f524:	2a000024 	bcs	1f5bc <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xb4>
   1f528:	e3530000 	cmp	r3, #0
   1f52c:	13520000 	cmpne	r2, #0
   1f530:	e1a0c000 	mov	ip, r0
   1f534:	03a00001 	moveq	r0, #1
   1f538:	13a00000 	movne	r0, #0
   1f53c:	0a00001e 	beq	1f5bc <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xb4>
   1f540:	e28ee001 	add	lr, lr, #1
   1f544:	e2844001 	add	r4, r4, #1
   1f548:	e05ee005 	subs	lr, lr, r5
   1f54c:	03a05001 	moveq	r5, #1
   1f550:	13a05000 	movne	r5, #0
   1f554:	e0544006 	subs	r4, r4, r6
   1f558:	03855001 	orreq	r5, r5, #1
   1f55c:	e3550000 	cmp	r5, #0
   1f560:	18bd80f0 	popne	{r4, r5, r6, r7, pc}
   1f564:	e3a05ffa 	mov	r5, #1000	; 0x3e8
   1f568:	e3047dd3 	movw	r7, #19923	; 0x4dd3
   1f56c:	e3417062 	movt	r7, #4194	; 0x1062
   1f570:	e3a00001 	mov	r0, #1
   1f574:	e0060295 	mul	r6, r5, r2
   1f578:	e736fe16 	udiv	r6, r6, lr
   1f57c:	e00e0395 	mul	lr, r5, r3
   1f580:	e73ef41e 	udiv	lr, lr, r4
   1f584:	e58c6014 	str	r6, [ip, #20]
   1f588:	e5914000 	ldr	r4, [r1]
   1f58c:	e58ce018 	str	lr, [ip, #24]
   1f590:	e0060694 	mul	r6, r4, r6
   1f594:	e0864697 	umull	r4, r6, r7, r6
   1f598:	e1a06326 	lsr	r6, r6, #6
   1f59c:	e58c601c 	str	r6, [ip, #28]
   1f5a0:	e5911008 	ldr	r1, [r1, #8]
   1f5a4:	e1cc22f4 	strd	r2, [ip, #36]	; 0x24
   1f5a8:	e00e0e91 	mul	lr, r1, lr
   1f5ac:	e08e7e97 	umull	r7, lr, r7, lr
   1f5b0:	e1a0e32e 	lsr	lr, lr, #6
   1f5b4:	e58ce020 	str	lr, [ip, #32]
   1f5b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1f5bc:	e3a00000 	mov	r0, #0
   1f5c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001f5c4 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>:
   1f5c4:	e92d4030 	push	{r4, r5, lr}
   1f5c8:	e1a0c000 	mov	ip, r0
   1f5cc:	e5904010 	ldr	r4, [r0, #16]
   1f5d0:	e59de00c 	ldr	lr, [sp, #12]
   1f5d4:	e3540000 	cmp	r4, #0
   1f5d8:	08bd8030 	popeq	{r4, r5, pc}
   1f5dc:	e1a00001 	mov	r0, r1
   1f5e0:	e1a01002 	mov	r1, r2
   1f5e4:	e3500001 	cmp	r0, #1
   1f5e8:	0a000014 	beq	1f640 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x7c>
   1f5ec:	e59c2014 	ldr	r2, [ip, #20]
   1f5f0:	e3045dd3 	movw	r5, #19923	; 0x4dd3
   1f5f4:	e3415062 	movt	r5, #4194	; 0x1062
   1f5f8:	e0030392 	mul	r3, r2, r3
   1f5fc:	e0832395 	umull	r2, r3, r5, r3
   1f600:	e59c201c 	ldr	r2, [ip, #28]
   1f604:	e0622323 	rsb	r2, r2, r3, lsr #6
   1f608:	e59c3024 	ldr	r3, [ip, #36]	; 0x24
   1f60c:	e1530002 	cmp	r3, r2
   1f610:	98bd8030 	popls	{r4, r5, pc}
   1f614:	e59c3018 	ldr	r3, [ip, #24]
   1f618:	e00e0e93 	mul	lr, r3, lr
   1f61c:	e59c3020 	ldr	r3, [ip, #32]
   1f620:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
   1f624:	e08e5e95 	umull	r5, lr, r5, lr
   1f628:	e063332e 	rsb	r3, r3, lr, lsr #6
   1f62c:	e15c0003 	cmp	ip, r3
   1f630:	98bd8030 	popls	{r4, r5, pc}
   1f634:	e1a0c004 	mov	ip, r4
   1f638:	e8bd4030 	pop	{r4, r5, lr}
   1f63c:	e12fff1c 	bx	ip
   1f640:	e3a03000 	mov	r3, #0
   1f644:	e1a0c004 	mov	ip, r4
   1f648:	e1a02003 	mov	r2, r3
   1f64c:	e8bd4030 	pop	{r4, r5, lr}
   1f650:	e12fff1c 	bx	ip

0001f654 <_GLOBAL__sub_I__ZN18CTouchScreenDevice18s_DeviceNumberPoolE>:
   1f654:	e92d4010 	push	{r4, lr}
   1f658:	e3044f20 	movw	r4, #20256	; 0x4f20
   1f65c:	e3404004 	movt	r4, #4
   1f660:	e3a0203f 	mov	r2, #63	; 0x3f
   1f664:	e3a01001 	mov	r1, #1
   1f668:	e1a00004 	mov	r0, r4
   1f66c:	eb005ec5 	bl	37188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1f670:	e1a00004 	mov	r0, r4
   1f674:	e3042f78 	movw	r2, #20344	; 0x4f78
   1f678:	e3402004 	movt	r2, #4
   1f67c:	e30711d8 	movw	r1, #29144	; 0x71d8
   1f680:	e3401003 	movt	r1, #3
   1f684:	e8bd4010 	pop	{r4, lr}
   1f688:	ea005589 	b	34cb4 <__aeabi_atexit>

0001f68c <CMouseBehaviour::CMouseBehaviour()>:
   1f68c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   1f690:	e3a02000 	mov	r2, #0
   1f694:	e1c021b0 	strh	r2, [r0, #16]
   1f698:	e5802014 	str	r2, [r0, #20]
   1f69c:	e5802018 	str	r2, [r0, #24]
   1f6a0:	f4400a8f 	vst1.32	{d16-d17}, [r0]
   1f6a4:	e12fff1e 	bx	lr

0001f6a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   1f6a8:	e1a03001 	mov	r3, r1
   1f6ac:	e92d4010 	push	{r4, lr}
   1f6b0:	e5901000 	ldr	r1, [r0]
   1f6b4:	e24dd038 	sub	sp, sp, #56	; 0x38
   1f6b8:	e3510000 	cmp	r1, #0
   1f6bc:	1a00002b 	bne	1f770 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc8>
   1f6c0:	e3530000 	cmp	r3, #0
   1f6c4:	e5803000 	str	r3, [r0]
   1f6c8:	0a00002e 	beq	1f788 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe0>
   1f6cc:	e5904004 	ldr	r4, [r0, #4]
   1f6d0:	e3540000 	cmp	r4, #0
   1f6d4:	1a000031 	bne	1f7a0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf8>
   1f6d8:	e3520000 	cmp	r2, #0
   1f6dc:	e5802004 	str	r2, [r0, #4]
   1f6e0:	0a000034 	beq	1f7b8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   1f6e4:	e2833001 	add	r3, r3, #1
   1f6e8:	e2822001 	add	r2, r2, #1
   1f6ec:	e1a01004 	mov	r1, r4
   1f6f0:	e1a030a3 	lsr	r3, r3, #1
   1f6f4:	e1a020a2 	lsr	r2, r2, #1
   1f6f8:	e5803008 	str	r3, [r0, #8]
   1f6fc:	e580200c 	str	r2, [r0, #12]
   1f700:	e28d0008 	add	r0, sp, #8
   1f704:	eb00348e 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1f708:	f2c10010 	vmov.i32	d16, #16	; 0x00000010
   1f70c:	e28d001c 	add	r0, sp, #28
   1f710:	e30025a0 	movw	r2, #1440	; 0x5a0
   1f714:	e3402004 	movt	r2, #4
   1f718:	e3a03024 	mov	r3, #36	; 0x24
   1f71c:	e3a01018 	mov	r1, #24
   1f720:	e3822103 	orr	r2, r2, #-1073741824	; 0xc0000000
   1f724:	e58d1000 	str	r1, [sp]
   1f728:	e3081010 	movw	r1, #32784	; 0x8010
   1f72c:	f440078f 	vst1.32	{d16}, [r0]
   1f730:	e28d0008 	add	r0, sp, #8
   1f734:	e58d2028 	str	r2, [sp, #40]	; 0x28
   1f738:	e28d2010 	add	r2, sp, #16
   1f73c:	e58d4024 	str	r4, [sp, #36]	; 0x24
   1f740:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   1f744:	e58d4030 	str	r4, [sp, #48]	; 0x30
   1f748:	eb0034cf 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1f74c:	e2504000 	subs	r4, r0, #0
   1f750:	e28d0008 	add	r0, sp, #8
   1f754:	159d401c 	ldrne	r4, [sp, #28]
   1f758:	116f4f14 	clzne	r4, r4
   1f75c:	11a042a4 	lsrne	r4, r4, #5
   1f760:	eb00347e 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   1f764:	e1a00004 	mov	r0, r4
   1f768:	e28dd038 	add	sp, sp, #56	; 0x38
   1f76c:	e8bd8010 	pop	{r4, pc}
   1f770:	e30014fc 	movw	r1, #1276	; 0x4fc
   1f774:	e3401004 	movt	r1, #4
   1f778:	e3000510 	movw	r0, #1296	; 0x510
   1f77c:	e3400004 	movt	r0, #4
   1f780:	e3a02051 	mov	r2, #81	; 0x51
   1f784:	eb00344d 	bl	2c8c0 <assertion_failed>
   1f788:	e30014fc 	movw	r1, #1276	; 0x4fc
   1f78c:	e3401004 	movt	r1, #4
   1f790:	e3000524 	movw	r0, #1316	; 0x524
   1f794:	e3400004 	movt	r0, #4
   1f798:	e3a02053 	mov	r2, #83	; 0x53
   1f79c:	eb003447 	bl	2c8c0 <assertion_failed>
   1f7a0:	e30014fc 	movw	r1, #1276	; 0x4fc
   1f7a4:	e3401004 	movt	r1, #4
   1f7a8:	e3000538 	movw	r0, #1336	; 0x538
   1f7ac:	e3400004 	movt	r0, #4
   1f7b0:	e3a02055 	mov	r2, #85	; 0x55
   1f7b4:	eb003441 	bl	2c8c0 <assertion_failed>
   1f7b8:	e30014fc 	movw	r1, #1276	; 0x4fc
   1f7bc:	e3401004 	movt	r1, #4
   1f7c0:	e3000550 	movw	r0, #1360	; 0x550
   1f7c4:	e3400004 	movt	r0, #4
   1f7c8:	e3a02057 	mov	r2, #87	; 0x57
   1f7cc:	eb00343b 	bl	2c8c0 <assertion_failed>

0001f7d0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   1f7d0:	e5903018 	ldr	r3, [r0, #24]
   1f7d4:	e92d4010 	push	{r4, lr}
   1f7d8:	e3530000 	cmp	r3, #0
   1f7dc:	1a000008 	bne	1f804 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x34>
   1f7e0:	e3510000 	cmp	r1, #0
   1f7e4:	e5801018 	str	r1, [r0, #24]
   1f7e8:	18bd8010 	popne	{r4, pc}
   1f7ec:	e30014fc 	movw	r1, #1276	; 0x4fc
   1f7f0:	e3401004 	movt	r1, #4
   1f7f4:	e30d0f4c 	movw	r0, #57164	; 0xdf4c
   1f7f8:	e3400003 	movt	r0, #3
   1f7fc:	e3a0208b 	mov	r2, #139	; 0x8b
   1f800:	eb00342e 	bl	2c8c0 <assertion_failed>
   1f804:	e30014fc 	movw	r1, #1276	; 0x4fc
   1f808:	e3401004 	movt	r1, #4
   1f80c:	e30004b4 	movw	r0, #1204	; 0x4b4
   1f810:	e3400004 	movt	r0, #4
   1f814:	e3a02089 	mov	r2, #137	; 0x89
   1f818:	eb003428 	bl	2c8c0 <assertion_failed>

0001f81c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>:
   1f81c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1f820:	e1a05001 	mov	r5, r1
   1f824:	e5901000 	ldr	r1, [r0]
   1f828:	e24dd00c 	sub	sp, sp, #12
   1f82c:	e3510000 	cmp	r1, #0
   1f830:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1f834:	0a00004d 	beq	1f970 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x154>
   1f838:	e590c004 	ldr	ip, [r0, #4]
   1f83c:	e1a04000 	mov	r4, r0
   1f840:	e35c0000 	cmp	ip, #0
   1f844:	0a000049 	beq	1f970 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x154>
   1f848:	e3a00012 	mov	r0, #18
   1f84c:	e3068667 	movw	r8, #26215	; 0x6667
   1f850:	e3468666 	movt	r8, #26214	; 0x6666
   1f854:	e594e008 	ldr	lr, [r4, #8]
   1f858:	e0020290 	mul	r2, r0, r2
   1f85c:	e0000390 	mul	r0, r0, r3
   1f860:	e594300c 	ldr	r3, [r4, #12]
   1f864:	e1a07fc2 	asr	r7, r2, #31
   1f868:	e0c29298 	smull	r9, r2, r8, r2
   1f86c:	e0672142 	rsb	r2, r7, r2, asr #2
   1f870:	e0c87098 	smull	r7, r8, r8, r0
   1f874:	e1a00fc0 	asr	r0, r0, #31
   1f878:	e082200e 	add	r2, r2, lr
   1f87c:	e1510002 	cmp	r1, r2
   1f880:	e0600148 	rsb	r0, r0, r8, asr #2
   1f884:	e0830000 	add	r0, r3, r0
   1f888:	9a00003a 	bls	1f978 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x15c>
   1f88c:	e15c0000 	cmp	ip, r0
   1f890:	e5842008 	str	r2, [r4, #8]
   1f894:	8a000047 	bhi	1f9b8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x19c>
   1f898:	e152000e 	cmp	r2, lr
   1f89c:	e584300c 	str	r3, [r4, #12]
   1f8a0:	0a000008 	beq	1f8c8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f8a4:	e5947018 	ldr	r7, [r4, #24]
   1f8a8:	e3a01001 	mov	r1, #1
   1f8ac:	e5c41010 	strb	r1, [r4, #16]
   1f8b0:	e3570000 	cmp	r7, #0
   1f8b4:	0a000003 	beq	1f8c8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f8b8:	e1a01005 	mov	r1, r5
   1f8bc:	e3a00000 	mov	r0, #0
   1f8c0:	e58d6000 	str	r6, [sp]
   1f8c4:	e12fff37 	blx	r7
   1f8c8:	e5943014 	ldr	r3, [r4, #20]
   1f8cc:	e1530005 	cmp	r3, r5
   1f8d0:	0a00001a 	beq	1f940 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x124>
   1f8d4:	e5942018 	ldr	r2, [r4, #24]
   1f8d8:	e3520000 	cmp	r2, #0
   1f8dc:	0a000022 	beq	1f96c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x150>
   1f8e0:	e3a07000 	mov	r7, #0
   1f8e4:	e3a08001 	mov	r8, #1
   1f8e8:	e1a01718 	lsl	r1, r8, r7
   1f8ec:	e1130001 	tst	r3, r1
   1f8f0:	0a000008 	beq	1f918 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xfc>
   1f8f4:	e1150001 	tst	r5, r1
   1f8f8:	0a000028 	beq	1f9a0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x184>
   1f8fc:	e2877001 	add	r7, r7, #1
   1f900:	e3570005 	cmp	r7, #5
   1f904:	0a00000d 	beq	1f940 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x124>
   1f908:	e5943014 	ldr	r3, [r4, #20]
   1f90c:	e1a01718 	lsl	r1, r8, r7
   1f910:	e1130001 	tst	r3, r1
   1f914:	1afffff6 	bne	1f8f4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xd8>
   1f918:	e1150001 	tst	r5, r1
   1f91c:	0afffff6 	beq	1f8fc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xe0>
   1f920:	e58d6000 	str	r6, [sp]
   1f924:	e3a00001 	mov	r0, #1
   1f928:	e2877001 	add	r7, r7, #1
   1f92c:	e1c420d8 	ldrd	r2, [r4, #8]
   1f930:	e594c018 	ldr	ip, [r4, #24]
   1f934:	e12fff3c 	blx	ip
   1f938:	e3570005 	cmp	r7, #5
   1f93c:	1afffff1 	bne	1f908 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xec>
   1f940:	e3560000 	cmp	r6, #0
   1f944:	0a000008 	beq	1f96c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x150>
   1f948:	e5947018 	ldr	r7, [r4, #24]
   1f94c:	e3570000 	cmp	r7, #0
   1f950:	0a000005 	beq	1f96c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x150>
   1f954:	e594300c 	ldr	r3, [r4, #12]
   1f958:	e1a01005 	mov	r1, r5
   1f95c:	e58d6000 	str	r6, [sp]
   1f960:	e3a00003 	mov	r0, #3
   1f964:	e5942008 	ldr	r2, [r4, #8]
   1f968:	e12fff37 	blx	r7
   1f96c:	e5845014 	str	r5, [r4, #20]
   1f970:	e28dd00c 	add	sp, sp, #12
   1f974:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f978:	e15c0000 	cmp	ip, r0
   1f97c:	e584e008 	str	lr, [r4, #8]
   1f980:	9584300c 	strls	r3, [r4, #12]
   1f984:	9affffcf 	bls	1f8c8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f988:	e1a0200e 	mov	r2, lr
   1f98c:	e584000c 	str	r0, [r4, #12]
   1f990:	e1500003 	cmp	r0, r3
   1f994:	0affffcb 	beq	1f8c8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f998:	e1a03000 	mov	r3, r0
   1f99c:	eaffffc0 	b	1f8a4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x88>
   1f9a0:	e58d6000 	str	r6, [sp]
   1f9a4:	e3a00002 	mov	r0, #2
   1f9a8:	e5949018 	ldr	r9, [r4, #24]
   1f9ac:	e1c420d8 	ldrd	r2, [r4, #8]
   1f9b0:	e12fff39 	blx	r9
   1f9b4:	eaffffd0 	b	1f8fc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xe0>
   1f9b8:	e152000e 	cmp	r2, lr
   1f9bc:	e584000c 	str	r0, [r4, #12]
   1f9c0:	1afffff4 	bne	1f998 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x17c>
   1f9c4:	eafffff1 	b	1f990 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x174>

0001f9c8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   1f9c8:	e92d4070 	push	{r4, r5, r6, lr}
   1f9cc:	e1a04001 	mov	r4, r1
   1f9d0:	e1a05000 	mov	r5, r0
   1f9d4:	e24dd030 	sub	sp, sp, #48	; 0x30
   1f9d8:	e3a01000 	mov	r1, #0
   1f9dc:	e28d000c 	add	r0, sp, #12
   1f9e0:	e1a06002 	mov	r6, r2
   1f9e4:	eb0033d6 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1f9e8:	e3081011 	movw	r1, #32785	; 0x8011
   1f9ec:	e3a03010 	mov	r3, #16
   1f9f0:	e3a02001 	mov	r2, #1
   1f9f4:	e58d3000 	str	r3, [sp]
   1f9f8:	e28d000c 	add	r0, sp, #12
   1f9fc:	e3a0301c 	mov	r3, #28
   1fa00:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   1fa04:	e28d2014 	add	r2, sp, #20
   1fa08:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1fa0c:	e58d6020 	str	r6, [sp, #32]
   1fa10:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1fa14:	eb00341c 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1fa18:	e2504000 	subs	r4, r0, #0
   1fa1c:	e28d000c 	add	r0, sp, #12
   1fa20:	159d4020 	ldrne	r4, [sp, #32]
   1fa24:	116f4f14 	clzne	r4, r4
   1fa28:	11a042a4 	lsrne	r4, r4, #5
   1fa2c:	eb0033cb 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   1fa30:	e1a00004 	mov	r0, r4
   1fa34:	e28dd030 	add	sp, sp, #48	; 0x30
   1fa38:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fa3c <CMouseBehaviour::~CMouseBehaviour()>:
   1fa3c:	e5d03011 	ldrb	r3, [r0, #17]
   1fa40:	e3a02000 	mov	r2, #0
   1fa44:	e92d4010 	push	{r4, lr}
   1fa48:	e1a04000 	mov	r4, r0
   1fa4c:	e1530002 	cmp	r3, r2
   1fa50:	e5802018 	str	r2, [r0, #24]
   1fa54:	1a000001 	bne	1fa60 <CMouseBehaviour::~CMouseBehaviour()+0x24>
   1fa58:	e1a00004 	mov	r0, r4
   1fa5c:	e8bd8010 	pop	{r4, pc}
   1fa60:	e1a01002 	mov	r1, r2
   1fa64:	e1a00002 	mov	r0, r2
   1fa68:	ebffffd6 	bl	1f9c8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1fa6c:	e1a00004 	mov	r0, r4
   1fa70:	e8bd8010 	pop	{r4, pc}

0001fa74 <CMouseBehaviour::Release()>:
   1fa74:	e5903000 	ldr	r3, [r0]
   1fa78:	e3530000 	cmp	r3, #0
   1fa7c:	012fff1e 	bxeq	lr
   1fa80:	e5903004 	ldr	r3, [r0, #4]
   1fa84:	e92d4010 	push	{r4, lr}
   1fa88:	e1a04000 	mov	r4, r0
   1fa8c:	e3530000 	cmp	r3, #0
   1fa90:	08bd8010 	popeq	{r4, pc}
   1fa94:	e5d03011 	ldrb	r3, [r0, #17]
   1fa98:	e3530000 	cmp	r3, #0
   1fa9c:	1a000005 	bne	1fab8 <CMouseBehaviour::Release()+0x44>
   1faa0:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   1faa4:	e3a03000 	mov	r3, #0
   1faa8:	e1c431b0 	strh	r3, [r4, #16]
   1faac:	e5843014 	str	r3, [r4, #20]
   1fab0:	f4440a8f 	vst1.32	{d16-d17}, [r4]
   1fab4:	e8bd8010 	pop	{r4, pc}
   1fab8:	e3a02000 	mov	r2, #0
   1fabc:	e1a01002 	mov	r1, r2
   1fac0:	e1a00002 	mov	r0, r2
   1fac4:	ebffffbf 	bl	1f9c8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1fac8:	eafffff4 	b	1faa0 <CMouseBehaviour::Release()+0x2c>

0001facc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   1facc:	e1a03000 	mov	r3, r0
   1fad0:	e1a00001 	mov	r0, r1
   1fad4:	e1a01002 	mov	r1, r2
   1fad8:	e92d4010 	push	{r4, lr}
   1fadc:	e5932000 	ldr	r2, [r3]
   1fae0:	e3520000 	cmp	r2, #0
   1fae4:	0a000010 	beq	1fb2c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x60>
   1fae8:	e593c004 	ldr	ip, [r3, #4]
   1faec:	e35c0000 	cmp	ip, #0
   1faf0:	0a000013 	beq	1fb44 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x78>
   1faf4:	e1520000 	cmp	r2, r0
   1faf8:	815c0001 	cmphi	ip, r1
   1fafc:	8a000001 	bhi	1fb08 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x3c>
   1fb00:	e3a00000 	mov	r0, #0
   1fb04:	e8bd8010 	pop	{r4, pc}
   1fb08:	e5d32011 	ldrb	r2, [r3, #17]
   1fb0c:	e1c300f8 	strd	r0, [r3, #8]
   1fb10:	e3520000 	cmp	r2, #0
   1fb14:	1a000001 	bne	1fb20 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x54>
   1fb18:	e3a00001 	mov	r0, #1
   1fb1c:	e8bd8010 	pop	{r4, pc}
   1fb20:	e8bd4010 	pop	{r4, lr}
   1fb24:	e3a02001 	mov	r2, #1
   1fb28:	eaffffa6 	b	1f9c8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1fb2c:	e30014fc 	movw	r1, #1276	; 0x4fc
   1fb30:	e3401004 	movt	r1, #4
   1fb34:	e3000524 	movw	r0, #1316	; 0x524
   1fb38:	e3400004 	movt	r0, #4
   1fb3c:	e3a02090 	mov	r2, #144	; 0x90
   1fb40:	eb00335e 	bl	2c8c0 <assertion_failed>
   1fb44:	e30014fc 	movw	r1, #1276	; 0x4fc
   1fb48:	e3401004 	movt	r1, #4
   1fb4c:	e3000550 	movw	r0, #1360	; 0x550
   1fb50:	e3400004 	movt	r0, #4
   1fb54:	e3a02091 	mov	r2, #145	; 0x91
   1fb58:	eb003358 	bl	2c8c0 <assertion_failed>

0001fb5c <CMouseBehaviour::ShowCursor(bool)>:
   1fb5c:	e1a03000 	mov	r3, r0
   1fb60:	e1a02001 	mov	r2, r1
   1fb64:	e5900008 	ldr	r0, [r0, #8]
   1fb68:	e92d4010 	push	{r4, lr}
   1fb6c:	e5931000 	ldr	r1, [r3]
   1fb70:	e5d34011 	ldrb	r4, [r3, #17]
   1fb74:	e1500001 	cmp	r0, r1
   1fb78:	e5c32011 	strb	r2, [r3, #17]
   1fb7c:	2a000006 	bcs	1fb9c <CMouseBehaviour::ShowCursor(bool)+0x40>
   1fb80:	e593100c 	ldr	r1, [r3, #12]
   1fb84:	e5933004 	ldr	r3, [r3, #4]
   1fb88:	e1510003 	cmp	r1, r3
   1fb8c:	2a000008 	bcs	1fbb4 <CMouseBehaviour::ShowCursor(bool)+0x58>
   1fb90:	ebffff8c 	bl	1f9c8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1fb94:	e1a00004 	mov	r0, r4
   1fb98:	e8bd8010 	pop	{r4, pc}
   1fb9c:	e30014fc 	movw	r1, #1276	; 0x4fc
   1fba0:	e3401004 	movt	r1, #4
   1fba4:	e3000564 	movw	r0, #1380	; 0x564
   1fba8:	e3400004 	movt	r0, #4
   1fbac:	e3a020a8 	mov	r2, #168	; 0xa8
   1fbb0:	eb003342 	bl	2c8c0 <assertion_failed>
   1fbb4:	e30014fc 	movw	r1, #1276	; 0x4fc
   1fbb8:	e3401004 	movt	r1, #4
   1fbbc:	e3000580 	movw	r0, #1408	; 0x580
   1fbc0:	e3400004 	movt	r0, #4
   1fbc4:	e3a020a9 	mov	r2, #169	; 0xa9
   1fbc8:	eb00333c 	bl	2c8c0 <assertion_failed>

0001fbcc <CMouseBehaviour::UpdateCursor()>:
   1fbcc:	e5d02011 	ldrb	r2, [r0, #17]
   1fbd0:	e1a03000 	mov	r3, r0
   1fbd4:	e3520000 	cmp	r2, #0
   1fbd8:	012fff1e 	bxeq	lr
   1fbdc:	e5d02010 	ldrb	r2, [r0, #16]
   1fbe0:	e3520000 	cmp	r2, #0
   1fbe4:	012fff1e 	bxeq	lr
   1fbe8:	e1c000d8 	ldrd	r0, [r0, #8]
   1fbec:	e3a0c000 	mov	ip, #0
   1fbf0:	e3a02001 	mov	r2, #1
   1fbf4:	e5c3c010 	strb	ip, [r3, #16]
   1fbf8:	eaffff72 	b	1f9c8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

0001fbfc <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1fbfc:	e1a03001 	mov	r3, r1
   1fc00:	e92d4010 	push	{r4, lr}
   1fc04:	e1a01002 	mov	r1, r2
   1fc08:	e1a04000 	mov	r4, r0
   1fc0c:	e4803004 	str	r3, [r0], #4
   1fc10:	eb004e57 	bl	33574 <CString::CString(char const*)>
   1fc14:	e2843014 	add	r3, r4, #20
   1fc18:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   1fc1c:	e1a00004 	mov	r0, r4
   1fc20:	f4430a8f 	vst1.32	{d16-d17}, [r3]
   1fc24:	e8bd8010 	pop	{r4, pc}

0001fc28 <CPartitionManager::~CPartitionManager()>:
   1fc28:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fc2c:	e30089a0 	movw	r8, #2464	; 0x9a0
   1fc30:	e3408004 	movt	r8, #4
   1fc34:	e24dd010 	sub	sp, sp, #16
   1fc38:	e3a07000 	mov	r7, #0
   1fc3c:	e1a06000 	mov	r6, r0
   1fc40:	e280a004 	add	sl, r0, #4
   1fc44:	e2804010 	add	r4, r0, #16
   1fc48:	e2809020 	add	r9, r0, #32
   1fc4c:	e5b43004 	ldr	r3, [r4, #4]!
   1fc50:	e1a0000d 	mov	r0, sp
   1fc54:	e3530000 	cmp	r3, #0
   1fc58:	0a00001a 	beq	1fcc8 <CPartitionManager::~CPartitionManager()+0xa0>
   1fc5c:	eb004e3e 	bl	3355c <CString::CString()>
   1fc60:	e2877001 	add	r7, r7, #1
   1fc64:	e1a0000a 	mov	r0, sl
   1fc68:	eb004e73 	bl	3363c <CString::operator char const*() const>
   1fc6c:	e1a03007 	mov	r3, r7
   1fc70:	e1a02000 	mov	r2, r0
   1fc74:	e1a01008 	mov	r1, r8
   1fc78:	e1a0000d 	mov	r0, sp
   1fc7c:	eb005401 	bl	34c88 <CString::Format(char const*, ...)>
   1fc80:	eb0036a5 	bl	2d71c <CDeviceNameService::Get()>
   1fc84:	e1a05000 	mov	r5, r0
   1fc88:	e1a0000d 	mov	r0, sp
   1fc8c:	eb004e6a 	bl	3363c <CString::operator char const*() const>
   1fc90:	e3a02001 	mov	r2, #1
   1fc94:	e1a01000 	mov	r1, r0
   1fc98:	e1a00005 	mov	r0, r5
   1fc9c:	eb0035f5 	bl	2d478 <CDeviceNameService::RemoveDevice(char const*, bool)>
   1fca0:	e5943000 	ldr	r3, [r4]
   1fca4:	e2530000 	subs	r0, r3, #0
   1fca8:	0a000002 	beq	1fcb8 <CPartitionManager::~CPartitionManager()+0x90>
   1fcac:	e5933000 	ldr	r3, [r3]
   1fcb0:	e5933004 	ldr	r3, [r3, #4]
   1fcb4:	e12fff33 	blx	r3
   1fcb8:	e3a03000 	mov	r3, #0
   1fcbc:	e1a0000d 	mov	r0, sp
   1fcc0:	e5843000 	str	r3, [r4]
   1fcc4:	eb004df1 	bl	33490 <CString::~CString()>
   1fcc8:	e1540009 	cmp	r4, r9
   1fccc:	1affffde 	bne	1fc4c <CPartitionManager::~CPartitionManager()+0x24>
   1fcd0:	e3a03000 	mov	r3, #0
   1fcd4:	e1a0000a 	mov	r0, sl
   1fcd8:	e5863000 	str	r3, [r6]
   1fcdc:	eb004deb 	bl	33490 <CString::~CString()>
   1fce0:	e1a00006 	mov	r0, r6
   1fce4:	e28dd010 	add	sp, sp, #16
   1fce8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001fcec <CPartitionManager::Initialize()>:
   1fcec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcf0:	e1a04000 	mov	r4, r0
   1fcf4:	e5900000 	ldr	r0, [r0]
   1fcf8:	e24ddf85 	sub	sp, sp, #532	; 0x214
   1fcfc:	e3a02000 	mov	r2, #0
   1fd00:	e3a03000 	mov	r3, #0
   1fd04:	e5901000 	ldr	r1, [r0]
   1fd08:	e5911010 	ldr	r1, [r1, #16]
   1fd0c:	e12fff31 	blx	r1
   1fd10:	e1900001 	orrs	r0, r0, r1
   1fd14:	1a000026 	bne	1fdb4 <CPartitionManager::Initialize()+0xc8>
   1fd18:	e5940000 	ldr	r0, [r4]
   1fd1c:	e3a02c02 	mov	r2, #512	; 0x200
   1fd20:	e28d1010 	add	r1, sp, #16
   1fd24:	e5903000 	ldr	r3, [r0]
   1fd28:	e5933008 	ldr	r3, [r3, #8]
   1fd2c:	e12fff33 	blx	r3
   1fd30:	e3500c02 	cmp	r0, #512	; 0x200
   1fd34:	1a00001e 	bne	1fdb4 <CPartitionManager::Initialize()+0xc8>
   1fd38:	e28d3f83 	add	r3, sp, #524	; 0x20c
   1fd3c:	e2833002 	add	r3, r3, #2
   1fd40:	e1d320b0 	ldrh	r2, [r3]
   1fd44:	e30a3a55 	movw	r3, #43605	; 0xaa55
   1fd48:	e1520003 	cmp	r2, r3
   1fd4c:	1a000056 	bne	1feac <CPartitionManager::Initialize()+0x1c0>
   1fd50:	e3a05000 	mov	r5, #0
   1fd54:	e3077fde 	movw	r7, #32734	; 0x7fde
   1fd58:	e34f7fff 	movt	r7, #65535	; 0xffff
   1fd5c:	e2846014 	add	r6, r4, #20
   1fd60:	e1a08005 	mov	r8, r5
   1fd64:	e28d3010 	add	r3, sp, #16
   1fd68:	e0833205 	add	r3, r3, r5, lsl #4
   1fd6c:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   1fd70:	e352000f 	cmp	r2, #15
   1fd74:	91a03257 	asrls	r3, r7, r2
   1fd78:	83a03000 	movhi	r3, #0
   1fd7c:	92033001 	andls	r3, r3, #1
   1fd80:	92233001 	eorls	r3, r3, #1
   1fd84:	e35200ef 	cmp	r2, #239	; 0xef
   1fd88:	03833001 	orreq	r3, r3, #1
   1fd8c:	e3530000 	cmp	r3, #0
   1fd90:	0a000011 	beq	1fddc <CPartitionManager::Initialize()+0xf0>
   1fd94:	e2855001 	add	r5, r5, #1
   1fd98:	e2866004 	add	r6, r6, #4
   1fd9c:	e3550004 	cmp	r5, #4
   1fda0:	1affffef 	bne	1fd64 <CPartitionManager::Initialize()+0x78>
   1fda4:	e3580000 	cmp	r8, #0
   1fda8:	0a000037 	beq	1fe8c <CPartitionManager::Initialize()+0x1a0>
   1fdac:	e3a00001 	mov	r0, #1
   1fdb0:	ea000007 	b	1fdd4 <CPartitionManager::Initialize()+0xe8>
   1fdb4:	eb003d3e 	bl	2f2b4 <CLogger::Get()>
   1fdb8:	e3a02001 	mov	r2, #1
   1fdbc:	e30039a8 	movw	r3, #2472	; 0x9a8
   1fdc0:	e3403004 	movt	r3, #4
   1fdc4:	e3001a20 	movw	r1, #2592	; 0xa20
   1fdc8:	e3401004 	movt	r1, #4
   1fdcc:	eb003f06 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fdd0:	e3a00000 	mov	r0, #0
   1fdd4:	e28ddf85 	add	sp, sp, #532	; 0x214
   1fdd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fddc:	e285901c 	add	r9, r5, #28
   1fde0:	e28d3e21 	add	r3, sp, #528	; 0x210
   1fde4:	e0839209 	add	r9, r3, r9, lsl #4
   1fde8:	e51931fa 	ldr	r3, [r9, #-506]	; 0xfffffe06
   1fdec:	e3530000 	cmp	r3, #0
   1fdf0:	0affffe7 	beq	1fd94 <CPartitionManager::Initialize()+0xa8>
   1fdf4:	e51931f6 	ldr	r3, [r9, #-502]	; 0xfffffe0a
   1fdf8:	e3530000 	cmp	r3, #0
   1fdfc:	0affffe4 	beq	1fd94 <CPartitionManager::Initialize()+0xa8>
   1fe00:	e5963000 	ldr	r3, [r6]
   1fe04:	e3530000 	cmp	r3, #0
   1fe08:	1a000030 	bne	1fed0 <CPartitionManager::Initialize()+0x1e4>
   1fe0c:	e1a0a004 	mov	sl, r4
   1fe10:	e3a00028 	mov	r0, #40	; 0x28
   1fe14:	eb005ba0 	bl	36c9c <operator new(unsigned int)>
   1fe18:	e51931f6 	ldr	r3, [r9, #-502]	; 0xfffffe0a
   1fe1c:	e51921fa 	ldr	r2, [r9, #-506]	; 0xfffffe06
   1fe20:	e1a0b000 	mov	fp, r0
   1fe24:	e49a1004 	ldr	r1, [sl], #4
   1fe28:	e2888001 	add	r8, r8, #1
   1fe2c:	eb0000b4 	bl	20104 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   1fe30:	e1a0000d 	mov	r0, sp
   1fe34:	e586b000 	str	fp, [r6]
   1fe38:	eb004dc7 	bl	3355c <CString::CString()>
   1fe3c:	e1a0000a 	mov	r0, sl
   1fe40:	eb004dfd 	bl	3363c <CString::operator char const*() const>
   1fe44:	e1a03008 	mov	r3, r8
   1fe48:	e1a02000 	mov	r2, r0
   1fe4c:	e30019a0 	movw	r1, #2464	; 0x9a0
   1fe50:	e3401004 	movt	r1, #4
   1fe54:	e1a0000d 	mov	r0, sp
   1fe58:	eb00538a 	bl	34c88 <CString::Format(char const*, ...)>
   1fe5c:	eb00362e 	bl	2d71c <CDeviceNameService::Get()>
   1fe60:	e1a09000 	mov	r9, r0
   1fe64:	e1a0000d 	mov	r0, sp
   1fe68:	eb004df3 	bl	3363c <CString::operator char const*() const>
   1fe6c:	e5962000 	ldr	r2, [r6]
   1fe70:	e1a01000 	mov	r1, r0
   1fe74:	e3a03001 	mov	r3, #1
   1fe78:	e1a00009 	mov	r0, r9
   1fe7c:	eb003550 	bl	2d3c4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1fe80:	e1a0000d 	mov	r0, sp
   1fe84:	eb004d81 	bl	33490 <CString::~CString()>
   1fe88:	eaffffc1 	b	1fd94 <CPartitionManager::Initialize()+0xa8>
   1fe8c:	eb003d08 	bl	2f2b4 <CLogger::Get()>
   1fe90:	e3a02002 	mov	r2, #2
   1fe94:	e30039fc 	movw	r3, #2556	; 0x9fc
   1fe98:	e3403004 	movt	r3, #4
   1fe9c:	e3001a20 	movw	r1, #2592	; 0xa20
   1fea0:	e3401004 	movt	r1, #4
   1fea4:	eb003ed0 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fea8:	eaffffbf 	b	1fdac <CPartitionManager::Initialize()+0xc0>
   1feac:	eb003d00 	bl	2f2b4 <CLogger::Get()>
   1feb0:	e3a02002 	mov	r2, #2
   1feb4:	e30039b8 	movw	r3, #2488	; 0x9b8
   1feb8:	e3403004 	movt	r3, #4
   1febc:	e3001a20 	movw	r1, #2592	; 0xa20
   1fec0:	e3401004 	movt	r1, #4
   1fec4:	eb003ec8 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fec8:	e3a00001 	mov	r0, #1
   1fecc:	eaffffc0 	b	1fdd4 <CPartitionManager::Initialize()+0xe8>
   1fed0:	e30019cc 	movw	r1, #2508	; 0x9cc
   1fed4:	e3401004 	movt	r1, #4
   1fed8:	e30009e4 	movw	r0, #2532	; 0x9e4
   1fedc:	e3400004 	movt	r0, #4
   1fee0:	e3a02078 	mov	r2, #120	; 0x78
   1fee4:	eb003275 	bl	2c8c0 <assertion_failed>

0001fee8 <CPartition::Read(void*, unsigned int)>:
   1fee8:	e92d4010 	push	{r4, lr}
   1feec:	e5d0e020 	ldrb	lr, [r0, #32]
   1fef0:	e35e0000 	cmp	lr, #0
   1fef4:	1a00001a 	bne	1ff64 <CPartition::Read(void*, unsigned int)+0x7c>
   1fef8:	e5904018 	ldr	r4, [r0, #24]
   1fefc:	e300c1ff 	movw	ip, #511	; 0x1ff
   1ff00:	e092300c 	adds	r3, r2, ip
   1ff04:	e0aec00e 	adc	ip, lr, lr
   1ff08:	e0933004 	adds	r3, r3, r4
   1ff0c:	e590401c 	ldr	r4, [r0, #28]
   1ff10:	e1a034a3 	lsr	r3, r3, #9
   1ff14:	e0acc004 	adc	ip, ip, r4
   1ff18:	e5904010 	ldr	r4, [r0, #16]
   1ff1c:	e1833b8c 	orr	r3, r3, ip, lsl #23
   1ff20:	e1a0c4ac 	lsr	ip, ip, #9
   1ff24:	e1540003 	cmp	r4, r3
   1ff28:	e0dec00c 	sbcs	ip, lr, ip
   1ff2c:	3a00000c 	bcc	1ff64 <CPartition::Read(void*, unsigned int)+0x7c>
   1ff30:	e5900008 	ldr	r0, [r0, #8]
   1ff34:	e3500000 	cmp	r0, #0
   1ff38:	0a000003 	beq	1ff4c <CPartition::Read(void*, unsigned int)+0x64>
   1ff3c:	e5903000 	ldr	r3, [r0]
   1ff40:	e8bd4010 	pop	{r4, lr}
   1ff44:	e5933008 	ldr	r3, [r3, #8]
   1ff48:	e12fff13 	bx	r3
   1ff4c:	e3001a28 	movw	r1, #2600	; 0xa28
   1ff50:	e3401004 	movt	r1, #4
   1ff54:	e30b0460 	movw	r0, #46176	; 0xb460
   1ff58:	e3400003 	movt	r0, #3
   1ff5c:	e3a02035 	mov	r2, #53	; 0x35
   1ff60:	eb003256 	bl	2c8c0 <assertion_failed>
   1ff64:	e3e00000 	mvn	r0, #0
   1ff68:	e8bd8010 	pop	{r4, pc}

0001ff6c <CPartition::Write(void const*, unsigned int)>:
   1ff6c:	e92d4010 	push	{r4, lr}
   1ff70:	e5d0e020 	ldrb	lr, [r0, #32]
   1ff74:	e35e0000 	cmp	lr, #0
   1ff78:	1a00001a 	bne	1ffe8 <CPartition::Write(void const*, unsigned int)+0x7c>
   1ff7c:	e5904018 	ldr	r4, [r0, #24]
   1ff80:	e300c1ff 	movw	ip, #511	; 0x1ff
   1ff84:	e092300c 	adds	r3, r2, ip
   1ff88:	e0aec00e 	adc	ip, lr, lr
   1ff8c:	e0933004 	adds	r3, r3, r4
   1ff90:	e590401c 	ldr	r4, [r0, #28]
   1ff94:	e1a034a3 	lsr	r3, r3, #9
   1ff98:	e0acc004 	adc	ip, ip, r4
   1ff9c:	e5904010 	ldr	r4, [r0, #16]
   1ffa0:	e1833b8c 	orr	r3, r3, ip, lsl #23
   1ffa4:	e1a0c4ac 	lsr	ip, ip, #9
   1ffa8:	e1540003 	cmp	r4, r3
   1ffac:	e0dec00c 	sbcs	ip, lr, ip
   1ffb0:	3a00000c 	bcc	1ffe8 <CPartition::Write(void const*, unsigned int)+0x7c>
   1ffb4:	e5900008 	ldr	r0, [r0, #8]
   1ffb8:	e3500000 	cmp	r0, #0
   1ffbc:	0a000003 	beq	1ffd0 <CPartition::Write(void const*, unsigned int)+0x64>
   1ffc0:	e5903000 	ldr	r3, [r0]
   1ffc4:	e8bd4010 	pop	{r4, lr}
   1ffc8:	e593300c 	ldr	r3, [r3, #12]
   1ffcc:	e12fff13 	bx	r3
   1ffd0:	e3001a28 	movw	r1, #2600	; 0xa28
   1ffd4:	e3401004 	movt	r1, #4
   1ffd8:	e30b0460 	movw	r0, #46176	; 0xb460
   1ffdc:	e3400003 	movt	r0, #3
   1ffe0:	e3a02047 	mov	r2, #71	; 0x47
   1ffe4:	eb003235 	bl	2c8c0 <assertion_failed>
   1ffe8:	e3e00000 	mvn	r0, #0
   1ffec:	e8bd8010 	pop	{r4, pc}

0001fff0 <CPartition::Seek(unsigned long long)>:
   1fff0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fff4:	e1a05002 	mov	r5, r2
   1fff8:	e1a04003 	mov	r4, r3
   1fffc:	e7e87055 	ubfx	r7, r5, #0, #9
   20000:	e3a02001 	mov	r2, #1
   20004:	e3973000 	orrs	r3, r7, #0
   20008:	e5c02020 	strb	r2, [r0, #32]
   2000c:	1a00001c 	bne	20084 <CPartition::Seek(unsigned long long)+0x94>
   20010:	e5902010 	ldr	r2, [r0, #16]
   20014:	e1a034a5 	lsr	r3, r5, #9
   20018:	e1833b84 	orr	r3, r3, r4, lsl #23
   2001c:	e1a06000 	mov	r6, r0
   20020:	e1530002 	cmp	r3, r2
   20024:	e1a034a4 	lsr	r3, r4, #9
   20028:	e2d33000 	sbcs	r3, r3, #0
   2002c:	2a000014 	bcs	20084 <CPartition::Seek(unsigned long long)+0x94>
   20030:	e590300c 	ldr	r3, [r0, #12]
   20034:	e5900008 	ldr	r0, [r0, #8]
   20038:	e1a02483 	lsl	r2, r3, #9
   2003c:	e0959002 	adds	r9, r5, r2
   20040:	e0a48ba3 	adc	r8, r4, r3, lsr #23
   20044:	e3500000 	cmp	r0, #0
   20048:	0a000010 	beq	20090 <CPartition::Seek(unsigned long long)+0xa0>
   2004c:	e5903000 	ldr	r3, [r0]
   20050:	e1a02009 	mov	r2, r9
   20054:	e5931010 	ldr	r1, [r3, #16]
   20058:	e1a03008 	mov	r3, r8
   2005c:	e12fff31 	blx	r1
   20060:	e1510008 	cmp	r1, r8
   20064:	01500009 	cmpeq	r0, r9
   20068:	1a000005 	bne	20084 <CPartition::Seek(unsigned long long)+0x94>
   2006c:	e1a00005 	mov	r0, r5
   20070:	e1a01004 	mov	r1, r4
   20074:	e5865018 	str	r5, [r6, #24]
   20078:	e586401c 	str	r4, [r6, #28]
   2007c:	e5c67020 	strb	r7, [r6, #32]
   20080:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20084:	e3e00000 	mvn	r0, #0
   20088:	e1a01000 	mov	r1, r0
   2008c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20090:	e3001a28 	movw	r1, #2600	; 0xa28
   20094:	e3401004 	movt	r1, #4
   20098:	e30b0460 	movw	r0, #46176	; 0xb460
   2009c:	e3400003 	movt	r0, #3
   200a0:	e3a02059 	mov	r2, #89	; 0x59
   200a4:	eb003205 	bl	2c8c0 <assertion_failed>

000200a8 <CPartition::~CPartition()>:
   200a8:	e59f201c 	ldr	r2, [pc, #28]	; 200cc <CPartition::~CPartition()+0x24>
   200ac:	e3a03000 	mov	r3, #0
   200b0:	e92d4010 	push	{r4, lr}
   200b4:	e1a04000 	mov	r4, r0
   200b8:	e5802000 	str	r2, [r0]
   200bc:	e5803008 	str	r3, [r0, #8]
   200c0:	eb00342c 	bl	2d178 <CDevice::~CDevice()>
   200c4:	e1a00004 	mov	r0, r4
   200c8:	e8bd8010 	pop	{r4, pc}
   200cc:	00040a40 	.word	0x00040a40

000200d0 <CPartition::~CPartition()>:
   200d0:	e59f2028 	ldr	r2, [pc, #40]	; 20100 <CPartition::~CPartition()+0x30>
   200d4:	e3a03000 	mov	r3, #0
   200d8:	e92d4010 	push	{r4, lr}
   200dc:	e1a04000 	mov	r4, r0
   200e0:	e5802000 	str	r2, [r0]
   200e4:	e5803008 	str	r3, [r0, #8]
   200e8:	eb003422 	bl	2d178 <CDevice::~CDevice()>
   200ec:	e1a00004 	mov	r0, r4
   200f0:	e3a01028 	mov	r1, #40	; 0x28
   200f4:	eb005b00 	bl	36cfc <operator delete(void*, unsigned int)>
   200f8:	e1a00004 	mov	r0, r4
   200fc:	e8bd8010 	pop	{r4, pc}
   20100:	00040a40 	.word	0x00040a40

00020104 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   20104:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20108:	e1a04000 	mov	r4, r0
   2010c:	e1a05001 	mov	r5, r1
   20110:	e1a06003 	mov	r6, r3
   20114:	e1a07002 	mov	r7, r2
   20118:	eb003443 	bl	2d22c <CDevice::CDevice()>
   2011c:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   20120:	e59f3040 	ldr	r3, [pc, #64]	; 20168 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   20124:	e3550000 	cmp	r5, #0
   20128:	e5843000 	str	r3, [r4]
   2012c:	e3a03001 	mov	r3, #1
   20130:	e5845008 	str	r5, [r4, #8]
   20134:	e584700c 	str	r7, [r4, #12]
   20138:	e5846010 	str	r6, [r4, #16]
   2013c:	e5c43020 	strb	r3, [r4, #32]
   20140:	edc40b06 	vstr	d16, [r4, #24]
   20144:	0a000001 	beq	20150 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   20148:	e1a00004 	mov	r0, r4
   2014c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20150:	e3001a28 	movw	r1, #2600	; 0xa28
   20154:	e3401004 	movt	r1, #4
   20158:	e30b0460 	movw	r0, #46176	; 0xb460
   2015c:	e3400003 	movt	r0, #3
   20160:	e3a0201f 	mov	r2, #31
   20164:	eb0031d5 	bl	2c8c0 <assertion_failed>
   20168:	00040a40 	.word	0x00040a40

0002016c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   2016c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20170:	e1a07003 	mov	r7, r3
   20174:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   20178:	e1a04000 	mov	r4, r0
   2017c:	e2805010 	add	r5, r0, #16
   20180:	e3530000 	cmp	r3, #0
   20184:	e5dda028 	ldrb	sl, [sp, #40]	; 0x28
   20188:	e1a06001 	mov	r6, r1
   2018c:	e3011bc8 	movw	r1, #7112	; 0x1bc8
   20190:	e3401004 	movt	r1, #4
   20194:	11a01003 	movne	r1, r3
   20198:	e1a08002 	mov	r8, r2
   2019c:	e284903c 	add	r9, r4, #60	; 0x3c
   201a0:	eb004cf3 	bl	33574 <CString::CString(char const*)>
   201a4:	e1a00005 	mov	r0, r5
   201a8:	eb00200b 	bl	281dc <CNetConfig::CNetConfig()>
   201ac:	e1a0200a 	mov	r2, sl
   201b0:	e1a01005 	mov	r1, r5
   201b4:	e284a060 	add	sl, r4, #96	; 0x60
   201b8:	e1a00009 	mov	r0, r9
   201bc:	eb000b9f 	bl	23040 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   201c0:	e1a02009 	mov	r2, r9
   201c4:	e1a01005 	mov	r1, r5
   201c8:	e2849098 	add	r9, r4, #152	; 0x98
   201cc:	e1a0000a 	mov	r0, sl
   201d0:	eb0009c1 	bl	228dc <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   201d4:	e1a0200a 	mov	r2, sl
   201d8:	e1a01005 	mov	r1, r5
   201dc:	e1a00009 	mov	r0, r9
   201e0:	eb000780 	bl	21fe8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   201e4:	e1a01005 	mov	r1, r5
   201e8:	e1a02009 	mov	r2, r9
   201ec:	e28400d8 	add	r0, r4, #216	; 0xd8
   201f0:	eb000376 	bl	20fd0 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   201f4:	e3040f30 	movw	r0, #20272	; 0x4f30
   201f8:	e3400004 	movt	r0, #4
   201fc:	e16f1f16 	clz	r1, r6
   20200:	e1a012a1 	lsr	r1, r1, #5
   20204:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   20208:	e5903000 	ldr	r3, [r0]
   2020c:	e3530000 	cmp	r3, #0
   20210:	e3a03000 	mov	r3, #0
   20214:	e5843128 	str	r3, [r4, #296]	; 0x128
   20218:	1a00001a 	bne	20288 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x11c>
   2021c:	e5804000 	str	r4, [r0]
   20220:	e1a00005 	mov	r0, r5
   20224:	eb00204a 	bl	28354 <CNetConfig::SetDHCP(bool)>
   20228:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   2022c:	e3530000 	cmp	r3, #0
   20230:	0a000001 	beq	2023c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xd0>
   20234:	e1a00004 	mov	r0, r4
   20238:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2023c:	e1a01006 	mov	r1, r6
   20240:	e1a00005 	mov	r0, r5
   20244:	eb00206e 	bl	28404 <CNetConfig::SetIPAddress(unsigned char const*)>
   20248:	e1a01008 	mov	r1, r8
   2024c:	e1a00005 	mov	r0, r5
   20250:	eb00207e 	bl	28450 <CNetConfig::SetNetMask(unsigned char const*)>
   20254:	e3570000 	cmp	r7, #0
   20258:	0a000002 	beq	20268 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xfc>
   2025c:	e1a01007 	mov	r1, r7
   20260:	e1a00005 	mov	r0, r5
   20264:	eb00208c 	bl	2849c <CNetConfig::SetDefaultGateway(unsigned char const*)>
   20268:	e59d3020 	ldr	r3, [sp, #32]
   2026c:	e3530000 	cmp	r3, #0
   20270:	0affffef 	beq	20234 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc8>
   20274:	e1a00005 	mov	r0, r5
   20278:	e1a01003 	mov	r1, r3
   2027c:	eb002088 	bl	284a4 <CNetConfig::SetDNSServer(unsigned char const*)>
   20280:	e1a00004 	mov	r0, r4
   20284:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20288:	e3001a60 	movw	r1, #2656	; 0xa60
   2028c:	e3401004 	movt	r1, #4
   20290:	e3000a74 	movw	r0, #2676	; 0xa74
   20294:	e3400004 	movt	r0, #4
   20298:	e3a02026 	mov	r2, #38	; 0x26
   2029c:	eb003187 	bl	2c8c0 <assertion_failed>

000202a0 <CNetSubSystem::Initialize(bool)>:
   202a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   202a4:	e1a04000 	mov	r4, r0
   202a8:	e2806010 	add	r6, r0, #16
   202ac:	e1a00006 	mov	r0, r6
   202b0:	e1a05001 	mov	r5, r1
   202b4:	eb00207c 	bl	284ac <CNetConfig::GetIPAddress() const>
   202b8:	e284703c 	add	r7, r4, #60	; 0x3c
   202bc:	eb002198 	bl	28924 <CIPAddress::IsNull() const>
   202c0:	e1a01000 	mov	r1, r0
   202c4:	e1a00006 	mov	r0, r6
   202c8:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   202cc:	eb002020 	bl	28354 <CNetConfig::SetDHCP(bool)>
   202d0:	e1a01005 	mov	r1, r5
   202d4:	e1a00007 	mov	r0, r7
   202d8:	eb000b6e 	bl	23098 <CNetDeviceLayer::Initialize(bool)>
   202dc:	e3500000 	cmp	r0, #0
   202e0:	1a000002 	bne	202f0 <CNetSubSystem::Initialize(bool)+0x50>
   202e4:	e3a06000 	mov	r6, #0
   202e8:	e1a00006 	mov	r0, r6
   202ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   202f0:	e2846060 	add	r6, r4, #96	; 0x60
   202f4:	e1a00006 	mov	r0, r6
   202f8:	eb0009ad 	bl	229b4 <CLinkLayer::Initialize()>
   202fc:	e3500000 	cmp	r0, #0
   20300:	0afffff7 	beq	202e4 <CNetSubSystem::Initialize(bool)+0x44>
   20304:	e2848098 	add	r8, r4, #152	; 0x98
   20308:	e1a00008 	mov	r0, r8
   2030c:	eb00076d 	bl	220c8 <CNetworkLayer::Initialize()>
   20310:	e3500000 	cmp	r0, #0
   20314:	0afffff2 	beq	202e4 <CNetSubSystem::Initialize(bool)+0x44>
   20318:	e1a00006 	mov	r0, r6
   2031c:	e1a01008 	mov	r1, r8
   20320:	eb0009bc 	bl	22a18 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   20324:	e28400d8 	add	r0, r4, #216	; 0xd8
   20328:	eb00034e 	bl	21068 <CTransportLayer::Initialize()>
   2032c:	e2506000 	subs	r6, r0, #0
   20330:	0affffeb 	beq	202e4 <CNetSubSystem::Initialize(bool)+0x44>
   20334:	e3a000f8 	mov	r0, #248	; 0xf8
   20338:	eb005a57 	bl	36c9c <operator new(unsigned int)>
   2033c:	e1a01004 	mov	r1, r4
   20340:	eb0000ad 	bl	205fc <CNetTask::CNetTask(CNetSubSystem*)>
   20344:	e3550000 	cmp	r5, #0
   20348:	0affffe6 	beq	202e8 <CNetSubSystem::Initialize(bool)+0x48>
   2034c:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   20350:	e3530000 	cmp	r3, #0
   20354:	0a000015 	beq	203b0 <CNetSubSystem::Initialize(bool)+0x110>
   20358:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   2035c:	e3530000 	cmp	r3, #0
   20360:	1a00001a 	bne	203d0 <CNetSubSystem::Initialize(bool)+0x130>
   20364:	e3a00f7e 	mov	r0, #504	; 0x1f8
   20368:	eb005a4b 	bl	36c9c <operator new(unsigned int)>
   2036c:	e1a05000 	mov	r5, r0
   20370:	e1a00004 	mov	r0, r4
   20374:	eb004cb0 	bl	3363c <CString::operator char const*() const>
   20378:	e1a01004 	mov	r1, r4
   2037c:	e1a02000 	mov	r2, r0
   20380:	e1a00005 	mov	r0, r5
   20384:	eb002345 	bl	290a0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   20388:	e5845128 	str	r5, [r4, #296]	; 0x128
   2038c:	ea000007 	b	203b0 <CNetSubSystem::Initialize(bool)+0x110>
   20390:	e5940128 	ldr	r0, [r4, #296]	; 0x128
   20394:	e3500000 	cmp	r0, #0
   20398:	0a000002 	beq	203a8 <CNetSubSystem::Initialize(bool)+0x108>
   2039c:	eb00237b 	bl	29190 <CDHCPClient::IsBound() const>
   203a0:	e3500000 	cmp	r0, #0
   203a4:	1affffcf 	bne	202e8 <CNetSubSystem::Initialize(bool)+0x48>
   203a8:	eb00301b 	bl	2c41c <CScheduler::Get()>
   203ac:	eb002f16 	bl	2c00c <CScheduler::Yield()>
   203b0:	e1a00007 	mov	r0, r7
   203b4:	eb000c00 	bl	233bc <CNetDeviceLayer::IsRunning() const>
   203b8:	e3500000 	cmp	r0, #0
   203bc:	0afffff9 	beq	203a8 <CNetSubSystem::Initialize(bool)+0x108>
   203c0:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   203c4:	e3530000 	cmp	r3, #0
   203c8:	1afffff0 	bne	20390 <CNetSubSystem::Initialize(bool)+0xf0>
   203cc:	eaffffc5 	b	202e8 <CNetSubSystem::Initialize(bool)+0x48>
   203d0:	e3001a60 	movw	r1, #2656	; 0xa60
   203d4:	e3401004 	movt	r1, #4
   203d8:	e3000a84 	movw	r0, #2692	; 0xa84
   203dc:	e3400004 	movt	r0, #4
   203e0:	e3a02065 	mov	r2, #101	; 0x65
   203e4:	eb003135 	bl	2c8c0 <assertion_failed>

000203e8 <CNetSubSystem::Process()>:
   203e8:	e3043f30 	movw	r3, #20272	; 0x4f30
   203ec:	e3403004 	movt	r3, #4
   203f0:	e5933000 	ldr	r3, [r3]
   203f4:	e3530000 	cmp	r3, #0
   203f8:	012fff1e 	bxeq	lr
   203fc:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   20400:	e92d4070 	push	{r4, r5, r6, lr}
   20404:	e1a04000 	mov	r4, r0
   20408:	e3530000 	cmp	r3, #0
   2040c:	0280503c 	addeq	r5, r0, #60	; 0x3c
   20410:	0a000003 	beq	20424 <CNetSubSystem::Process()+0x3c>
   20414:	e5903128 	ldr	r3, [r0, #296]	; 0x128
   20418:	e280503c 	add	r5, r0, #60	; 0x3c
   2041c:	e3530000 	cmp	r3, #0
   20420:	0a000008 	beq	20448 <CNetSubSystem::Process()+0x60>
   20424:	e1a00005 	mov	r0, r5
   20428:	eb000b75 	bl	23204 <CNetDeviceLayer::Process()>
   2042c:	e2840060 	add	r0, r4, #96	; 0x60
   20430:	eb00098b 	bl	22a64 <CLinkLayer::Process()>
   20434:	e2840098 	add	r0, r4, #152	; 0x98
   20438:	eb00073b 	bl	2212c <CNetworkLayer::Process()>
   2043c:	e28400d8 	add	r0, r4, #216	; 0xd8
   20440:	e8bd4070 	pop	{r4, r5, r6, lr}
   20444:	ea000606 	b	21c64 <CTransportLayer::Process()>
   20448:	e1a00005 	mov	r0, r5
   2044c:	eb000bda 	bl	233bc <CNetDeviceLayer::IsRunning() const>
   20450:	e3500000 	cmp	r0, #0
   20454:	0afffff2 	beq	20424 <CNetSubSystem::Process()+0x3c>
   20458:	e3a00f7e 	mov	r0, #504	; 0x1f8
   2045c:	eb005a0e 	bl	36c9c <operator new(unsigned int)>
   20460:	e1a06000 	mov	r6, r0
   20464:	e1a00004 	mov	r0, r4
   20468:	eb004c73 	bl	3363c <CString::operator char const*() const>
   2046c:	e1a01004 	mov	r1, r4
   20470:	e1a02000 	mov	r2, r0
   20474:	e1a00006 	mov	r0, r6
   20478:	eb002308 	bl	290a0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   2047c:	e5846128 	str	r6, [r4, #296]	; 0x128
   20480:	eaffffe7 	b	20424 <CNetSubSystem::Process()+0x3c>

00020484 <CNetSubSystem::GetConfig()>:
   20484:	e2800010 	add	r0, r0, #16
   20488:	e12fff1e 	bx	lr

0002048c <CNetSubSystem::GetNetDeviceLayer()>:
   2048c:	e280003c 	add	r0, r0, #60	; 0x3c
   20490:	e12fff1e 	bx	lr

00020494 <CNetSubSystem::GetLinkLayer()>:
   20494:	e2800060 	add	r0, r0, #96	; 0x60
   20498:	e12fff1e 	bx	lr

0002049c <CNetSubSystem::GetTransportLayer()>:
   2049c:	e28000d8 	add	r0, r0, #216	; 0xd8
   204a0:	e12fff1e 	bx	lr

000204a4 <CNetSubSystem::IsRunning() const>:
   204a4:	e92d4010 	push	{r4, lr}
   204a8:	e1a04000 	mov	r4, r0
   204ac:	e280003c 	add	r0, r0, #60	; 0x3c
   204b0:	eb000bc1 	bl	233bc <CNetDeviceLayer::IsRunning() const>
   204b4:	e3500000 	cmp	r0, #0
   204b8:	08bd8010 	popeq	{r4, pc}
   204bc:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   204c0:	e3530000 	cmp	r3, #0
   204c4:	08bd8010 	popeq	{r4, pc}
   204c8:	e5940128 	ldr	r0, [r4, #296]	; 0x128
   204cc:	e3500000 	cmp	r0, #0
   204d0:	08bd8010 	popeq	{r4, pc}
   204d4:	e8bd4010 	pop	{r4, lr}
   204d8:	ea00232c 	b	29190 <CDHCPClient::IsBound() const>

000204dc <CNetSubSystem::Get()>:
   204dc:	e3043f30 	movw	r3, #20272	; 0x4f30
   204e0:	e3403004 	movt	r3, #4
   204e4:	e5930000 	ldr	r0, [r3]
   204e8:	e3500000 	cmp	r0, #0
   204ec:	112fff1e 	bxne	lr
   204f0:	e3001a60 	movw	r1, #2656	; 0xa60
   204f4:	e3401004 	movt	r1, #4
   204f8:	e30c0730 	movw	r0, #50992	; 0xc730
   204fc:	e3400003 	movt	r0, #3
   20500:	e3a020b4 	mov	r2, #180	; 0xb4
   20504:	e92d4010 	push	{r4, lr}
   20508:	eb0030ec 	bl	2c8c0 <assertion_failed>

0002050c <CNetSubSystem::~CNetSubSystem()>:
   2050c:	e3043f30 	movw	r3, #20272	; 0x4f30
   20510:	e3403004 	movt	r3, #4
   20514:	e92d4010 	push	{r4, lr}
   20518:	e1a04000 	mov	r4, r0
   2051c:	e28000d8 	add	r0, r0, #216	; 0xd8
   20520:	e3a02000 	mov	r2, #0
   20524:	e5832000 	str	r2, [r3]
   20528:	eb0005c3 	bl	21c3c <CTransportLayer::~CTransportLayer()>
   2052c:	e2840098 	add	r0, r4, #152	; 0x98
   20530:	eb0006cc 	bl	22068 <CNetworkLayer::~CNetworkLayer()>
   20534:	e2840060 	add	r0, r4, #96	; 0x60
   20538:	eb000909 	bl	22964 <CLinkLayer::~CLinkLayer()>
   2053c:	e284003c 	add	r0, r4, #60	; 0x3c
   20540:	eb000ac9 	bl	2306c <CNetDeviceLayer::~CNetDeviceLayer()>
   20544:	e2840010 	add	r0, r4, #16
   20548:	eb001f53 	bl	2829c <CNetConfig::~CNetConfig()>
   2054c:	e1a00004 	mov	r0, r4
   20550:	eb004bce 	bl	33490 <CString::~CString()>
   20554:	e1a00004 	mov	r0, r4
   20558:	e8bd8010 	pop	{r4, pc}

0002055c <CNetTask::~CNetTask()>:
   2055c:	e59f201c 	ldr	r2, [pc, #28]	; 20580 <CNetTask::~CNetTask()+0x24>
   20560:	e3a03000 	mov	r3, #0
   20564:	e92d4010 	push	{r4, lr}
   20568:	e1a04000 	mov	r4, r0
   2056c:	e5802000 	str	r2, [r0]
   20570:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   20574:	eb002d0b 	bl	2b9a8 <CTask::~CTask()>
   20578:	e1a00004 	mov	r0, r4
   2057c:	e8bd8010 	pop	{r4, pc}
   20580:	00040ac8 	.word	0x00040ac8

00020584 <CNetTask::~CNetTask()>:
   20584:	e59f2028 	ldr	r2, [pc, #40]	; 205b4 <CNetTask::~CNetTask()+0x30>
   20588:	e3a03000 	mov	r3, #0
   2058c:	e92d4010 	push	{r4, lr}
   20590:	e1a04000 	mov	r4, r0
   20594:	e5802000 	str	r2, [r0]
   20598:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2059c:	eb002d01 	bl	2b9a8 <CTask::~CTask()>
   205a0:	e1a00004 	mov	r0, r4
   205a4:	e3a010f8 	mov	r1, #248	; 0xf8
   205a8:	eb0059d3 	bl	36cfc <operator delete(void*, unsigned int)>
   205ac:	e1a00004 	mov	r0, r4
   205b0:	e8bd8010 	pop	{r4, pc}
   205b4:	00040ac8 	.word	0x00040ac8

000205b8 <CNetTask::Run()>:
   205b8:	e92d4010 	push	{r4, lr}
   205bc:	e1a04000 	mov	r4, r0
   205c0:	e59000f4 	ldr	r0, [r0, #244]	; 0xf4
   205c4:	e3500000 	cmp	r0, #0
   205c8:	0a000005 	beq	205e4 <CNetTask::Run()+0x2c>
   205cc:	ebffff85 	bl	203e8 <CNetSubSystem::Process()>
   205d0:	eb002f91 	bl	2c41c <CScheduler::Get()>
   205d4:	eb002e8c 	bl	2c00c <CScheduler::Yield()>
   205d8:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
   205dc:	e3500000 	cmp	r0, #0
   205e0:	1afffff9 	bne	205cc <CNetTask::Run()+0x14>
   205e4:	e3001a98 	movw	r1, #2712	; 0xa98
   205e8:	e3401004 	movt	r1, #4
   205ec:	e3000aa4 	movw	r0, #2724	; 0xaa4
   205f0:	e3400004 	movt	r0, #4
   205f4:	e3a02027 	mov	r2, #39	; 0x27
   205f8:	eb0030b0 	bl	2c8c0 <assertion_failed>

000205fc <CNetTask::CNetTask(CNetSubSystem*)>:
   205fc:	e92d4070 	push	{r4, r5, r6, lr}
   20600:	e1a04000 	mov	r4, r0
   20604:	e1a05001 	mov	r5, r1
   20608:	e3a02000 	mov	r2, #0
   2060c:	e3a01902 	mov	r1, #32768	; 0x8000
   20610:	eb002c2f 	bl	2b6d4 <CTask::CTask(unsigned int, bool)>
   20614:	e59f301c 	ldr	r3, [pc, #28]	; 20638 <CNetTask::CNetTask(CNetSubSystem*)+0x3c>
   20618:	e1a00004 	mov	r0, r4
   2061c:	e5843000 	str	r3, [r4]
   20620:	e58450f4 	str	r5, [r4, #244]	; 0xf4
   20624:	e3001abc 	movw	r1, #2748	; 0xabc
   20628:	e3401004 	movt	r1, #4
   2062c:	eb002cb7 	bl	2b910 <CTask::SetName(char const*)>
   20630:	e1a00004 	mov	r0, r4
   20634:	e8bd8070 	pop	{r4, r5, r6, pc}
   20638:	00040ac8 	.word	0x00040ac8

0002063c <CSocket::~CSocket()>:
   2063c:	e92d4070 	push	{r4, r5, r6, lr}
   20640:	e1a04000 	mov	r4, r0
   20644:	e590000c 	ldr	r0, [r0, #12]
   20648:	e59f30ac 	ldr	r3, [pc, #172]	; 206fc <CSocket::~CSocket()+0xc0>
   2064c:	e3500000 	cmp	r0, #0
   20650:	e5843000 	str	r3, [r4]
   20654:	0a000022 	beq	206e4 <CSocket::~CSocket()+0xa8>
   20658:	e5941018 	ldr	r1, [r4, #24]
   2065c:	e594301c 	ldr	r3, [r4, #28]
   20660:	e3510000 	cmp	r1, #0
   20664:	ba00000b 	blt	20698 <CSocket::~CSocket()+0x5c>
   20668:	e3530000 	cmp	r3, #0
   2066c:	1a000016 	bne	206cc <CSocket::~CSocket()+0x90>
   20670:	eb000416 	bl	216d0 <CTransportLayer::Disconnect(int)>
   20674:	e3e03000 	mvn	r3, #0
   20678:	e5843018 	str	r3, [r4, #24]
   2067c:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   20680:	e2843008 	add	r3, r4, #8
   20684:	e1a00004 	mov	r0, r4
   20688:	f443078f 	vst1.32	{d16}, [r3]
   2068c:	eb002a78 	bl	2b074 <CNetSocket::~CNetSocket()>
   20690:	e1a00004 	mov	r0, r4
   20694:	e8bd8070 	pop	{r4, r5, r6, pc}
   20698:	e3530000 	cmp	r3, #0
   2069c:	0afffff6 	beq	2067c <CSocket::~CSocket()+0x40>
   206a0:	e284601c 	add	r6, r4, #28
   206a4:	e3a05000 	mov	r5, #0
   206a8:	ea000000 	b	206b0 <CSocket::~CSocket()+0x74>
   206ac:	e594000c 	ldr	r0, [r4, #12]
   206b0:	e5b61004 	ldr	r1, [r6, #4]!
   206b4:	e2855001 	add	r5, r5, #1
   206b8:	eb000404 	bl	216d0 <CTransportLayer::Disconnect(int)>
   206bc:	e594301c 	ldr	r3, [r4, #28]
   206c0:	e1530005 	cmp	r3, r5
   206c4:	8afffff8 	bhi	206ac <CSocket::~CSocket()+0x70>
   206c8:	eaffffeb 	b	2067c <CSocket::~CSocket()+0x40>
   206cc:	e3001ad4 	movw	r1, #2772	; 0xad4
   206d0:	e3401004 	movt	r1, #4
   206d4:	e3000af8 	movw	r0, #2808	; 0xaf8
   206d8:	e3400004 	movt	r0, #4
   206dc:	e3a0203a 	mov	r2, #58	; 0x3a
   206e0:	eb003076 	bl	2c8c0 <assertion_failed>
   206e4:	e3001ad4 	movw	r1, #2772	; 0xad4
   206e8:	e3401004 	movt	r1, #4
   206ec:	e3000ae0 	movw	r0, #2784	; 0xae0
   206f0:	e3400004 	movt	r0, #4
   206f4:	e3a02036 	mov	r2, #54	; 0x36
   206f8:	eb003070 	bl	2c8c0 <assertion_failed>
   206fc:	00040bf0 	.word	0x00040bf0

00020700 <CSocket::~CSocket()>:
   20700:	e92d4010 	push	{r4, lr}
   20704:	e1a04000 	mov	r4, r0
   20708:	ebffffcb 	bl	2063c <CSocket::~CSocket()>
   2070c:	e1a00004 	mov	r0, r4
   20710:	e3a010a0 	mov	r1, #160	; 0xa0
   20714:	eb005978 	bl	36cfc <operator delete(void*, unsigned int)>
   20718:	e1a00004 	mov	r0, r4
   2071c:	e8bd8010 	pop	{r4, pc}

00020720 <CSocket::Bind(unsigned short)>:
   20720:	e2513000 	subs	r3, r1, #0
   20724:	0a000012 	beq	20774 <CSocket::Bind(unsigned short)+0x54>
   20728:	e92d4010 	push	{r4, lr}
   2072c:	e1a04000 	mov	r4, r0
   20730:	e1d001b4 	ldrh	r0, [r0, #20]
   20734:	e3500000 	cmp	r0, #0
   20738:	1a00000b 	bne	2076c <CSocket::Bind(unsigned short)+0x4c>
   2073c:	e5942018 	ldr	r2, [r4, #24]
   20740:	e3520000 	cmp	r2, #0
   20744:	aa000008 	bge	2076c <CSocket::Bind(unsigned short)+0x4c>
   20748:	e5942010 	ldr	r2, [r4, #16]
   2074c:	e1c431b4 	strh	r3, [r4, #20]
   20750:	e3520011 	cmp	r2, #17
   20754:	18bd8010 	popne	{r4, pc}
   20758:	e594000c 	ldr	r0, [r4, #12]
   2075c:	eb000243 	bl	21070 <CTransportLayer::Bind(unsigned short, int)>
   20760:	e5840018 	str	r0, [r4, #24]
   20764:	e0000fc0 	and	r0, r0, r0, asr #31
   20768:	e8bd8010 	pop	{r4, pc}
   2076c:	e3e00000 	mvn	r0, #0
   20770:	e8bd8010 	pop	{r4, pc}
   20774:	e3e00000 	mvn	r0, #0
   20778:	e12fff1e 	bx	lr

0002077c <CSocket::Connect(CIPAddress&, unsigned short)>:
   2077c:	e92d4070 	push	{r4, r5, r6, lr}
   20780:	e2525000 	subs	r5, r2, #0
   20784:	e24dd008 	sub	sp, sp, #8
   20788:	0a000026 	beq	20828 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   2078c:	e1a04000 	mov	r4, r0
   20790:	e590000c 	ldr	r0, [r0, #12]
   20794:	e3500000 	cmp	r0, #0
   20798:	0a000024 	beq	20830 <CSocket::Connect(CIPAddress&, unsigned short)+0xb4>
   2079c:	e1a06001 	mov	r6, r1
   207a0:	e5941018 	ldr	r1, [r4, #24]
   207a4:	e3510000 	cmp	r1, #0
   207a8:	ba000005 	blt	207c4 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   207ac:	e5943010 	ldr	r3, [r4, #16]
   207b0:	e3530011 	cmp	r3, #17
   207b4:	1a00001b 	bne	20828 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   207b8:	eb0003c4 	bl	216d0 <CTransportLayer::Disconnect(int)>
   207bc:	e3e03000 	mvn	r3, #0
   207c0:	e5843018 	str	r3, [r4, #24]
   207c4:	e5940008 	ldr	r0, [r4, #8]
   207c8:	e3500000 	cmp	r0, #0
   207cc:	0a00001d 	beq	20848 <CSocket::Connect(CIPAddress&, unsigned short)+0xcc>
   207d0:	eb001f35 	bl	284ac <CNetConfig::GetIPAddress() const>
   207d4:	eb002052 	bl	28924 <CIPAddress::IsNull() const>
   207d8:	e3500000 	cmp	r0, #0
   207dc:	0a000006 	beq	207fc <CSocket::Connect(CIPAddress&, unsigned short)+0x80>
   207e0:	e5943010 	ldr	r3, [r4, #16]
   207e4:	e3530011 	cmp	r3, #17
   207e8:	1a00000e 	bne	20828 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   207ec:	e1a00006 	mov	r0, r6
   207f0:	eb002059 	bl	2895c <CIPAddress::IsBroadcast() const>
   207f4:	e3500000 	cmp	r0, #0
   207f8:	0a00000a 	beq	20828 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   207fc:	e5940010 	ldr	r0, [r4, #16]
   20800:	e1a02005 	mov	r2, r5
   20804:	e1d431b4 	ldrh	r3, [r4, #20]
   20808:	e1a01006 	mov	r1, r6
   2080c:	e58d0000 	str	r0, [sp]
   20810:	e594000c 	ldr	r0, [r4, #12]
   20814:	eb000272 	bl	211e4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   20818:	e5840018 	str	r0, [r4, #24]
   2081c:	e0000fc0 	and	r0, r0, r0, asr #31
   20820:	e28dd008 	add	sp, sp, #8
   20824:	e8bd8070 	pop	{r4, r5, r6, pc}
   20828:	e3e00000 	mvn	r0, #0
   2082c:	eafffffb 	b	20820 <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   20830:	e3001ad4 	movw	r1, #2772	; 0xad4
   20834:	e3401004 	movt	r1, #4
   20838:	e3000ae0 	movw	r0, #2784	; 0xae0
   2083c:	e3400004 	movt	r0, #4
   20840:	e3a02070 	mov	r2, #112	; 0x70
   20844:	eb00301d 	bl	2c8c0 <assertion_failed>
   20848:	e3001ad4 	movw	r1, #2772	; 0xad4
   2084c:	e3401004 	movt	r1, #4
   20850:	e3000b08 	movw	r0, #2824	; 0xb08
   20854:	e3400004 	movt	r0, #4
   20858:	e3a0207d 	mov	r2, #125	; 0x7d
   2085c:	eb003017 	bl	2c8c0 <assertion_failed>

00020860 <CSocket::Listen(unsigned int)>:
   20860:	e5902010 	ldr	r2, [r0, #16]
   20864:	e3520006 	cmp	r2, #6
   20868:	1a000035 	bne	20944 <CSocket::Listen(unsigned int)+0xe4>
   2086c:	e1a03001 	mov	r3, r1
   20870:	e1d011b4 	ldrh	r1, [r0, #20]
   20874:	e92d4070 	push	{r4, r5, r6, lr}
   20878:	e1a04000 	mov	r4, r0
   2087c:	e3510000 	cmp	r1, #0
   20880:	0a00002d 	beq	2093c <CSocket::Listen(unsigned int)+0xdc>
   20884:	e5900018 	ldr	r0, [r0, #24]
   20888:	e3500000 	cmp	r0, #0
   2088c:	aa00002a 	bge	2093c <CSocket::Listen(unsigned int)+0xdc>
   20890:	e2430001 	sub	r0, r3, #1
   20894:	e350001f 	cmp	r0, #31
   20898:	8a000027 	bhi	2093c <CSocket::Listen(unsigned int)+0xdc>
   2089c:	e594501c 	ldr	r5, [r4, #28]
   208a0:	e3550000 	cmp	r5, #0
   208a4:	1a000018 	bne	2090c <CSocket::Listen(unsigned int)+0xac>
   208a8:	e594000c 	ldr	r0, [r4, #12]
   208ac:	e584301c 	str	r3, [r4, #28]
   208b0:	e3500000 	cmp	r0, #0
   208b4:	0a00001a 	beq	20924 <CSocket::Listen(unsigned int)+0xc4>
   208b8:	e284601c 	add	r6, r4, #28
   208bc:	ea000006 	b	208dc <CSocket::Listen(unsigned int)+0x7c>
   208c0:	e594301c 	ldr	r3, [r4, #28]
   208c4:	e2855001 	add	r5, r5, #1
   208c8:	e1530005 	cmp	r3, r5
   208cc:	9a00000c 	bls	20904 <CSocket::Listen(unsigned int)+0xa4>
   208d0:	e594000c 	ldr	r0, [r4, #12]
   208d4:	e1d411b4 	ldrh	r1, [r4, #20]
   208d8:	e5942010 	ldr	r2, [r4, #16]
   208dc:	eb0002e8 	bl	21484 <CTransportLayer::Listen(unsigned short, int)>
   208e0:	e3500000 	cmp	r0, #0
   208e4:	e5a60004 	str	r0, [r6, #4]!
   208e8:	aafffff4 	bge	208c0 <CSocket::Listen(unsigned int)+0x60>
   208ec:	e3001ad4 	movw	r1, #2772	; 0xad4
   208f0:	e3401004 	movt	r1, #4
   208f4:	e3000b1c 	movw	r0, #2844	; 0xb1c
   208f8:	e3400004 	movt	r0, #4
   208fc:	e3a020a5 	mov	r2, #165	; 0xa5
   20900:	eb002fee 	bl	2c8c0 <assertion_failed>
   20904:	e3a00000 	mov	r0, #0
   20908:	e8bd8070 	pop	{r4, r5, r6, pc}
   2090c:	e3001ad4 	movw	r1, #2772	; 0xad4
   20910:	e3401004 	movt	r1, #4
   20914:	e3000af8 	movw	r0, #2808	; 0xaf8
   20918:	e3400004 	movt	r0, #4
   2091c:	e3a0209d 	mov	r2, #157	; 0x9d
   20920:	eb002fe6 	bl	2c8c0 <assertion_failed>
   20924:	e3001ad4 	movw	r1, #2772	; 0xad4
   20928:	e3401004 	movt	r1, #4
   2092c:	e3000ae0 	movw	r0, #2784	; 0xae0
   20930:	e3400004 	movt	r0, #4
   20934:	e3a020a0 	mov	r2, #160	; 0xa0
   20938:	eb002fe0 	bl	2c8c0 <assertion_failed>
   2093c:	e3e00000 	mvn	r0, #0
   20940:	e8bd8070 	pop	{r4, r5, r6, pc}
   20944:	e3e00000 	mvn	r0, #0
   20948:	e12fff1e 	bx	lr

0002094c <CSocket::Send(void const*, unsigned int, int)>:
   2094c:	e92d4010 	push	{r4, lr}
   20950:	e16fcf12 	clz	ip, r2
   20954:	e5904018 	ldr	r4, [r0, #24]
   20958:	e1a0c2ac 	lsr	ip, ip, #5
   2095c:	e24dd008 	sub	sp, sp, #8
   20960:	e19ccfa4 	orrs	ip, ip, r4, lsr #31
   20964:	1a000014 	bne	209bc <CSocket::Send(void const*, unsigned int, int)+0x70>
   20968:	e590000c 	ldr	r0, [r0, #12]
   2096c:	e3500000 	cmp	r0, #0
   20970:	0a000005 	beq	2098c <CSocket::Send(void const*, unsigned int, int)+0x40>
   20974:	e3510000 	cmp	r1, #0
   20978:	0a000009 	beq	209a4 <CSocket::Send(void const*, unsigned int, int)+0x58>
   2097c:	e58d4000 	str	r4, [sp]
   20980:	eb000374 	bl	21758 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   20984:	e28dd008 	add	sp, sp, #8
   20988:	e8bd8010 	pop	{r4, pc}
   2098c:	e3001ad4 	movw	r1, #2772	; 0xad4
   20990:	e3401004 	movt	r1, #4
   20994:	e3000ae0 	movw	r0, #2784	; 0xae0
   20998:	e3400004 	movt	r0, #4
   2099c:	e3a020ed 	mov	r2, #237	; 0xed
   209a0:	eb002fc6 	bl	2c8c0 <assertion_failed>
   209a4:	e3001ad4 	movw	r1, #2772	; 0xad4
   209a8:	e3401004 	movt	r1, #4
   209ac:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   209b0:	e3400003 	movt	r0, #3
   209b4:	e3a020ee 	mov	r2, #238	; 0xee
   209b8:	eb002fc0 	bl	2c8c0 <assertion_failed>
   209bc:	e3e00000 	mvn	r0, #0
   209c0:	eaffffef 	b	20984 <CSocket::Send(void const*, unsigned int, int)+0x38>

000209c4 <CSocket::Receive(void*, unsigned int, int)>:
   209c4:	e92d4070 	push	{r4, r5, r6, lr}
   209c8:	e16fcf12 	clz	ip, r2
   209cc:	e1a05001 	mov	r5, r1
   209d0:	e1a01003 	mov	r1, r3
   209d4:	e5903018 	ldr	r3, [r0, #24]
   209d8:	e1a0c2ac 	lsr	ip, ip, #5
   209dc:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   209e0:	e19ccfa3 	orrs	ip, ip, r3, lsr #31
   209e4:	1a00001f 	bne	20a68 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   209e8:	e590000c 	ldr	r0, [r0, #12]
   209ec:	e3500000 	cmp	r0, #0
   209f0:	0a000010 	beq	20a38 <CSocket::Receive(void*, unsigned int, int)+0x74>
   209f4:	e1a06002 	mov	r6, r2
   209f8:	e1a02001 	mov	r2, r1
   209fc:	e1a0100d 	mov	r1, sp
   20a00:	eb00038e 	bl	21840 <CTransportLayer::Receive(void*, int, int)>
   20a04:	e2504000 	subs	r4, r0, #0
   20a08:	ba000007 	blt	20a2c <CSocket::Receive(void*, unsigned int, int)+0x68>
   20a0c:	e1540006 	cmp	r4, r6
   20a10:	21a04006 	movcs	r4, r6
   20a14:	e3550000 	cmp	r5, #0
   20a18:	0a00000c 	beq	20a50 <CSocket::Receive(void*, unsigned int, int)+0x8c>
   20a1c:	e1a02004 	mov	r2, r4
   20a20:	e1a0100d 	mov	r1, sp
   20a24:	e1a00005 	mov	r0, r5
   20a28:	eb005692 	bl	36478 <memcpy>
   20a2c:	e1a00004 	mov	r0, r4
   20a30:	e28ddd19 	add	sp, sp, #1600	; 0x640
   20a34:	e8bd8070 	pop	{r4, r5, r6, pc}
   20a38:	e3001ad4 	movw	r1, #2772	; 0xad4
   20a3c:	e3401004 	movt	r1, #4
   20a40:	e3000ae0 	movw	r0, #2784	; 0xae0
   20a44:	e3400004 	movt	r0, #4
   20a48:	e3a020fe 	mov	r2, #254	; 0xfe
   20a4c:	eb002f9b 	bl	2c8c0 <assertion_failed>
   20a50:	e3001ad4 	movw	r1, #2772	; 0xad4
   20a54:	e3401004 	movt	r1, #4
   20a58:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   20a5c:	e3400003 	movt	r0, #3
   20a60:	e300210b 	movw	r2, #267	; 0x10b
   20a64:	eb002f95 	bl	2c8c0 <assertion_failed>
   20a68:	e3e04000 	mvn	r4, #0
   20a6c:	eaffffee 	b	20a2c <CSocket::Receive(void*, unsigned int, int)+0x68>

00020a70 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   20a70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20a74:	e1a04000 	mov	r4, r0
   20a78:	e1a06003 	mov	r6, r3
   20a7c:	e24dd010 	sub	sp, sp, #16
   20a80:	e5903018 	ldr	r3, [r0, #24]
   20a84:	e16f0f12 	clz	r0, r2
   20a88:	e1a002a0 	lsr	r0, r0, #5
   20a8c:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   20a90:	e1900fa3 	orrs	r0, r0, r3, lsr #31
   20a94:	1a00002d 	bne	20b50 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   20a98:	e5940008 	ldr	r0, [r4, #8]
   20a9c:	e3500000 	cmp	r0, #0
   20aa0:	0a000018 	beq	20b08 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x98>
   20aa4:	e1a05001 	mov	r5, r1
   20aa8:	e1a07002 	mov	r7, r2
   20aac:	eb001e7e 	bl	284ac <CNetConfig::GetIPAddress() const>
   20ab0:	eb001f9b 	bl	28924 <CIPAddress::IsNull() const>
   20ab4:	e3580000 	cmp	r8, #0
   20ab8:	03800001 	orreq	r0, r0, #1
   20abc:	e6ef0070 	uxtb	r0, r0
   20ac0:	e3500000 	cmp	r0, #0
   20ac4:	1a000021 	bne	20b50 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   20ac8:	e594000c 	ldr	r0, [r4, #12]
   20acc:	e3500000 	cmp	r0, #0
   20ad0:	0a000012 	beq	20b20 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb0>
   20ad4:	e3550000 	cmp	r5, #0
   20ad8:	0a000016 	beq	20b38 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc8>
   20adc:	e58d8004 	str	r8, [sp, #4]
   20ae0:	e1a02007 	mov	r2, r7
   20ae4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
   20ae8:	e1a01005 	mov	r1, r5
   20aec:	e5943018 	ldr	r3, [r4, #24]
   20af0:	e58d3008 	str	r3, [sp, #8]
   20af4:	e1a03006 	mov	r3, r6
   20af8:	e58dc000 	str	ip, [sp]
   20afc:	eb00037e 	bl	218fc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   20b00:	e28dd010 	add	sp, sp, #16
   20b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20b08:	e3001ad4 	movw	r1, #2772	; 0xad4
   20b0c:	e3401004 	movt	r1, #4
   20b10:	e3000b08 	movw	r0, #2824	; 0xb08
   20b14:	e3400004 	movt	r0, #4
   20b18:	e300211e 	movw	r2, #286	; 0x11e
   20b1c:	eb002f67 	bl	2c8c0 <assertion_failed>
   20b20:	e3001ad4 	movw	r1, #2772	; 0xad4
   20b24:	e3401004 	movt	r1, #4
   20b28:	e3000ae0 	movw	r0, #2784	; 0xae0
   20b2c:	e3400004 	movt	r0, #4
   20b30:	e3002129 	movw	r2, #297	; 0x129
   20b34:	eb002f61 	bl	2c8c0 <assertion_failed>
   20b38:	e3001ad4 	movw	r1, #2772	; 0xad4
   20b3c:	e3401004 	movt	r1, #4
   20b40:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   20b44:	e3400003 	movt	r0, #3
   20b48:	e300212a 	movw	r2, #298	; 0x12a
   20b4c:	eb002f5b 	bl	2c8c0 <assertion_failed>
   20b50:	e3e00000 	mvn	r0, #0
   20b54:	eaffffe9 	b	20b00 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x90>

00020b58 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   20b58:	e92d4070 	push	{r4, r5, r6, lr}
   20b5c:	e16fcf12 	clz	ip, r2
   20b60:	e590e018 	ldr	lr, [r0, #24]
   20b64:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   20b68:	e1a0c2ac 	lsr	ip, ip, #5
   20b6c:	e24dd008 	sub	sp, sp, #8
   20b70:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   20b74:	1a000026 	bne	20c14 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   20b78:	e590000c 	ldr	r0, [r0, #12]
   20b7c:	e3500000 	cmp	r0, #0
   20b80:	0a000017 	beq	20be4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   20b84:	e1a05001 	mov	r5, r1
   20b88:	e1a01003 	mov	r1, r3
   20b8c:	e1a06002 	mov	r6, r2
   20b90:	e1a02001 	mov	r2, r1
   20b94:	e59d165c 	ldr	r1, [sp, #1628]	; 0x65c
   20b98:	e58d1000 	str	r1, [sp]
   20b9c:	e28d1008 	add	r1, sp, #8
   20ba0:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   20ba4:	e58de004 	str	lr, [sp, #4]
   20ba8:	eb000391 	bl	219f4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   20bac:	e2504000 	subs	r4, r0, #0
   20bb0:	ba000007 	blt	20bd4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   20bb4:	e1540006 	cmp	r4, r6
   20bb8:	21a04006 	movcs	r4, r6
   20bbc:	e3550000 	cmp	r5, #0
   20bc0:	0a00000d 	beq	20bfc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa4>
   20bc4:	e1a02004 	mov	r2, r4
   20bc8:	e28d1008 	add	r1, sp, #8
   20bcc:	e1a00005 	mov	r0, r5
   20bd0:	eb005628 	bl	36478 <memcpy>
   20bd4:	e1a00004 	mov	r0, r4
   20bd8:	e28ddd19 	add	sp, sp, #1600	; 0x640
   20bdc:	e28dd008 	add	sp, sp, #8
   20be0:	e8bd8070 	pop	{r4, r5, r6, pc}
   20be4:	e3001ad4 	movw	r1, #2772	; 0xad4
   20be8:	e3401004 	movt	r1, #4
   20bec:	e3000ae0 	movw	r0, #2784	; 0xae0
   20bf0:	e3400004 	movt	r0, #4
   20bf4:	e300213b 	movw	r2, #315	; 0x13b
   20bf8:	eb002f30 	bl	2c8c0 <assertion_failed>
   20bfc:	e3001ad4 	movw	r1, #2772	; 0xad4
   20c00:	e3401004 	movt	r1, #4
   20c04:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   20c08:	e3400003 	movt	r0, #3
   20c0c:	e3002149 	movw	r2, #329	; 0x149
   20c10:	eb002f2a 	bl	2c8c0 <assertion_failed>
   20c14:	e3e04000 	mvn	r4, #0
   20c18:	eaffffed 	b	20bd4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>

00020c1c <CSocket::SetOptionBroadcast(bool)>:
   20c1c:	e5902018 	ldr	r2, [r0, #24]
   20c20:	e3520000 	cmp	r2, #0
   20c24:	ba00000f 	blt	20c68 <CSocket::SetOptionBroadcast(bool)+0x4c>
   20c28:	e5903010 	ldr	r3, [r0, #16]
   20c2c:	e3530011 	cmp	r3, #17
   20c30:	1a000003 	bne	20c44 <CSocket::SetOptionBroadcast(bool)+0x28>
   20c34:	e590000c 	ldr	r0, [r0, #12]
   20c38:	e3500000 	cmp	r0, #0
   20c3c:	0a000002 	beq	20c4c <CSocket::SetOptionBroadcast(bool)+0x30>
   20c40:	ea00039f 	b	21ac4 <CTransportLayer::SetOptionBroadcast(bool, int)>
   20c44:	e3a00000 	mov	r0, #0
   20c48:	e12fff1e 	bx	lr
   20c4c:	e3001ad4 	movw	r1, #2772	; 0xad4
   20c50:	e3401004 	movt	r1, #4
   20c54:	e3000ae0 	movw	r0, #2784	; 0xae0
   20c58:	e3400004 	movt	r0, #4
   20c5c:	e92d4010 	push	{r4, lr}
   20c60:	e300215b 	movw	r2, #347	; 0x15b
   20c64:	eb002f15 	bl	2c8c0 <assertion_failed>
   20c68:	e3e00000 	mvn	r0, #0
   20c6c:	e12fff1e 	bx	lr

00020c70 <CSocket::GetForeignIP() const>:
   20c70:	e5901018 	ldr	r1, [r0, #24]
   20c74:	e3510000 	cmp	r1, #0
   20c78:	ba000003 	blt	20c8c <CSocket::GetForeignIP() const+0x1c>
   20c7c:	e590000c 	ldr	r0, [r0, #12]
   20c80:	e3500000 	cmp	r0, #0
   20c84:	0a000002 	beq	20c94 <CSocket::GetForeignIP() const+0x24>
   20c88:	ea0003d1 	b	21bd4 <CTransportLayer::GetForeignIP(int) const>
   20c8c:	e3a00000 	mov	r0, #0
   20c90:	e12fff1e 	bx	lr
   20c94:	e3001ad4 	movw	r1, #2772	; 0xad4
   20c98:	e3401004 	movt	r1, #4
   20c9c:	e3000ae0 	movw	r0, #2784	; 0xae0
   20ca0:	e3400004 	movt	r0, #4
   20ca4:	e92d4010 	push	{r4, lr}
   20ca8:	e3002166 	movw	r2, #358	; 0x166
   20cac:	eb002f03 	bl	2c8c0 <assertion_failed>

00020cb0 <CSocket::CSocket(CNetSubSystem*, int)>:
   20cb0:	e92d4070 	push	{r4, r5, r6, lr}
   20cb4:	e1a04000 	mov	r4, r0
   20cb8:	e1a05001 	mov	r5, r1
   20cbc:	e1a06002 	mov	r6, r2
   20cc0:	eb0028de 	bl	2b040 <CNetSocket::CNetSocket(CNetSubSystem*)>
   20cc4:	e59f3080 	ldr	r3, [pc, #128]	; 20d4c <CSocket::CSocket(CNetSubSystem*, int)+0x9c>
   20cc8:	e1a00005 	mov	r0, r5
   20ccc:	e5843000 	str	r3, [r4]
   20cd0:	ebfffdeb 	bl	20484 <CNetSubSystem::GetConfig()>
   20cd4:	e1a03000 	mov	r3, r0
   20cd8:	e1a00005 	mov	r0, r5
   20cdc:	e5843008 	str	r3, [r4, #8]
   20ce0:	ebfffded 	bl	2049c <CNetSubSystem::GetTransportLayer()>
   20ce4:	e5942008 	ldr	r2, [r4, #8]
   20ce8:	e3a03000 	mov	r3, #0
   20cec:	e5846010 	str	r6, [r4, #16]
   20cf0:	e1520003 	cmp	r2, r3
   20cf4:	e1c431b4 	strh	r3, [r4, #20]
   20cf8:	e584301c 	str	r3, [r4, #28]
   20cfc:	e3e03000 	mvn	r3, #0
   20d00:	e584000c 	str	r0, [r4, #12]
   20d04:	e5843018 	str	r3, [r4, #24]
   20d08:	0a000003 	beq	20d1c <CSocket::CSocket(CNetSubSystem*, int)+0x6c>
   20d0c:	e3500000 	cmp	r0, #0
   20d10:	0a000007 	beq	20d34 <CSocket::CSocket(CNetSubSystem*, int)+0x84>
   20d14:	e1a00004 	mov	r0, r4
   20d18:	e8bd8070 	pop	{r4, r5, r6, pc}
   20d1c:	e3001ad4 	movw	r1, #2772	; 0xad4
   20d20:	e3401004 	movt	r1, #4
   20d24:	e3000b08 	movw	r0, #2824	; 0xb08
   20d28:	e3400004 	movt	r0, #4
   20d2c:	e3a02023 	mov	r2, #35	; 0x23
   20d30:	eb002ee2 	bl	2c8c0 <assertion_failed>
   20d34:	e3001ad4 	movw	r1, #2772	; 0xad4
   20d38:	e3401004 	movt	r1, #4
   20d3c:	e3000ae0 	movw	r0, #2784	; 0xae0
   20d40:	e3400004 	movt	r0, #4
   20d44:	e3a02024 	mov	r2, #36	; 0x24
   20d48:	eb002edc 	bl	2c8c0 <assertion_failed>
   20d4c:	00040bf0 	.word	0x00040bf0

00020d50 <CSocket::CSocket(CSocket&, int)>:
   20d50:	e92d4070 	push	{r4, r5, r6, lr}
   20d54:	e1a04000 	mov	r4, r0
   20d58:	e1a00001 	mov	r0, r1
   20d5c:	e1a05001 	mov	r5, r1
   20d60:	e1a06002 	mov	r6, r2
   20d64:	eb0028c9 	bl	2b090 <CNetSocket::GetNetSubSystem()>
   20d68:	e1a01000 	mov	r1, r0
   20d6c:	e1a00004 	mov	r0, r4
   20d70:	eb0028b2 	bl	2b040 <CNetSocket::CNetSocket(CNetSubSystem*)>
   20d74:	e2852008 	add	r2, r5, #8
   20d78:	e1a03004 	mov	r3, r4
   20d7c:	e59f1074 	ldr	r1, [pc, #116]	; 20df8 <CSocket::CSocket(CSocket&, int)+0xa8>
   20d80:	f422778f 	vld1.32	{d7}, [r2]
   20d84:	e4831008 	str	r1, [r3], #8
   20d88:	e3a01000 	mov	r1, #0
   20d8c:	e5952010 	ldr	r2, [r5, #16]
   20d90:	ee170a10 	vmov	r0, s14
   20d94:	f403778f 	vst1.32	{d7}, [r3]
   20d98:	e1d531b4 	ldrh	r3, [r5, #20]
   20d9c:	e584101c 	str	r1, [r4, #28]
   20da0:	e5842010 	str	r2, [r4, #16]
   20da4:	e1500001 	cmp	r0, r1
   20da8:	e1c431b4 	strh	r3, [r4, #20]
   20dac:	ee371b10 	vmov.32	r1, d7[1]
   20db0:	e5846018 	str	r6, [r4, #24]
   20db4:	0a000003 	beq	20dc8 <CSocket::CSocket(CSocket&, int)+0x78>
   20db8:	e3510000 	cmp	r1, #0
   20dbc:	0a000007 	beq	20de0 <CSocket::CSocket(CSocket&, int)+0x90>
   20dc0:	e1a00004 	mov	r0, r4
   20dc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   20dc8:	e3001ad4 	movw	r1, #2772	; 0xad4
   20dcc:	e3401004 	movt	r1, #4
   20dd0:	e3000b08 	movw	r0, #2824	; 0xb08
   20dd4:	e3400004 	movt	r0, #4
   20dd8:	e3a02030 	mov	r2, #48	; 0x30
   20ddc:	eb002eb7 	bl	2c8c0 <assertion_failed>
   20de0:	e3001ad4 	movw	r1, #2772	; 0xad4
   20de4:	e3401004 	movt	r1, #4
   20de8:	e3000ae0 	movw	r0, #2784	; 0xae0
   20dec:	e3400004 	movt	r0, #4
   20df0:	e3a02031 	mov	r2, #49	; 0x31
   20df4:	eb002eb1 	bl	2c8c0 <assertion_failed>
   20df8:	00040bf0 	.word	0x00040bf0

00020dfc <CSocket::Accept(CIPAddress*, unsigned short*)>:
   20dfc:	e590301c 	ldr	r3, [r0, #28]
   20e00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20e04:	e3530000 	cmp	r3, #0
   20e08:	0a000046 	beq	20f28 <CSocket::Accept(CIPAddress*, unsigned short*)+0x12c>
   20e0c:	e1a0a002 	mov	sl, r2
   20e10:	e1d021b4 	ldrh	r2, [r0, #20]
   20e14:	e1a05000 	mov	r5, r0
   20e18:	e3520000 	cmp	r2, #0
   20e1c:	0a000044 	beq	20f34 <CSocket::Accept(CIPAddress*, unsigned short*)+0x138>
   20e20:	e590000c 	ldr	r0, [r0, #12]
   20e24:	e3500000 	cmp	r0, #0
   20e28:	0a000044 	beq	20f40 <CSocket::Accept(CIPAddress*, unsigned short*)+0x144>
   20e2c:	e3530020 	cmp	r3, #32
   20e30:	8a000048 	bhi	20f58 <CSocket::Accept(CIPAddress*, unsigned short*)+0x15c>
   20e34:	e1a09001 	mov	r9, r1
   20e38:	e285701c 	add	r7, r5, #28
   20e3c:	e3a04000 	mov	r4, #0
   20e40:	e3a08020 	mov	r8, #32
   20e44:	e3e06102 	mvn	r6, #-2147483648	; 0x80000000
   20e48:	ea000008 	b	20e70 <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   20e4c:	e5973000 	ldr	r3, [r7]
   20e50:	e595201c 	ldr	r2, [r5, #28]
   20e54:	e1530006 	cmp	r3, r6
   20e58:	b1a08004 	movlt	r8, r4
   20e5c:	e2844001 	add	r4, r4, #1
   20e60:	b1a06003 	movlt	r6, r3
   20e64:	e1520004 	cmp	r2, r4
   20e68:	9a000007 	bls	20e8c <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   20e6c:	e595000c 	ldr	r0, [r5, #12]
   20e70:	e5b71004 	ldr	r1, [r7, #4]!
   20e74:	eb000336 	bl	21b54 <CTransportLayer::IsConnected(int) const>
   20e78:	e3500000 	cmp	r0, #0
   20e7c:	0afffff2 	beq	20e4c <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   20e80:	e2843008 	add	r3, r4, #8
   20e84:	e1a08004 	mov	r8, r4
   20e88:	e7956103 	ldr	r6, [r5, r3, lsl #2]
   20e8c:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
   20e90:	8a00001e 	bhi	20f10 <CSocket::Accept(CIPAddress*, unsigned short*)+0x114>
   20e94:	e595301c 	ldr	r3, [r5, #28]
   20e98:	e1530008 	cmp	r3, r8
   20e9c:	9a000033 	bls	20f70 <CSocket::Accept(CIPAddress*, unsigned short*)+0x174>
   20ea0:	e3590000 	cmp	r9, #0
   20ea4:	0a000037 	beq	20f88 <CSocket::Accept(CIPAddress*, unsigned short*)+0x18c>
   20ea8:	e35a0000 	cmp	sl, #0
   20eac:	0a00003b 	beq	20fa0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   20eb0:	e595000c 	ldr	r0, [r5, #12]
   20eb4:	e1a0200a 	mov	r2, sl
   20eb8:	e1a01009 	mov	r1, r9
   20ebc:	e1a03006 	mov	r3, r6
   20ec0:	eb0001cb 	bl	215f4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   20ec4:	e3500000 	cmp	r0, #0
   20ec8:	b3a04000 	movlt	r4, #0
   20ecc:	ba000005 	blt	20ee8 <CSocket::Accept(CIPAddress*, unsigned short*)+0xec>
   20ed0:	e3a000a0 	mov	r0, #160	; 0xa0
   20ed4:	eb005770 	bl	36c9c <operator new(unsigned int)>
   20ed8:	e1a02006 	mov	r2, r6
   20edc:	e1a01005 	mov	r1, r5
   20ee0:	e1a04000 	mov	r4, r0
   20ee4:	ebffff99 	bl	20d50 <CSocket::CSocket(CSocket&, int)>
   20ee8:	e2888008 	add	r8, r8, #8
   20eec:	e5952010 	ldr	r2, [r5, #16]
   20ef0:	e1d511b4 	ldrh	r1, [r5, #20]
   20ef4:	e595000c 	ldr	r0, [r5, #12]
   20ef8:	eb000161 	bl	21484 <CTransportLayer::Listen(unsigned short, int)>
   20efc:	e3500000 	cmp	r0, #0
   20f00:	e7850108 	str	r0, [r5, r8, lsl #2]
   20f04:	ba00002b 	blt	20fb8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1bc>
   20f08:	e1a00004 	mov	r0, r4
   20f0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20f10:	e3001ad4 	movw	r1, #2772	; 0xad4
   20f14:	e3401004 	movt	r1, #4
   20f18:	e3000b60 	movw	r0, #2912	; 0xb60
   20f1c:	e3400004 	movt	r0, #4
   20f20:	e3a020cb 	mov	r2, #203	; 0xcb
   20f24:	eb002e65 	bl	2c8c0 <assertion_failed>
   20f28:	e1a04003 	mov	r4, r3
   20f2c:	e1a00004 	mov	r0, r4
   20f30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20f34:	e1a04002 	mov	r4, r2
   20f38:	e1a00004 	mov	r0, r4
   20f3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20f40:	e3001ad4 	movw	r1, #2772	; 0xad4
   20f44:	e3401004 	movt	r1, #4
   20f48:	e3000ae0 	movw	r0, #2784	; 0xae0
   20f4c:	e3400004 	movt	r0, #4
   20f50:	e3a020b3 	mov	r2, #179	; 0xb3
   20f54:	eb002e59 	bl	2c8c0 <assertion_failed>
   20f58:	e3001ad4 	movw	r1, #2772	; 0xad4
   20f5c:	e3401004 	movt	r1, #4
   20f60:	e3000b38 	movw	r0, #2872	; 0xb38
   20f64:	e3400004 	movt	r0, #4
   20f68:	e3a020b4 	mov	r2, #180	; 0xb4
   20f6c:	eb002e53 	bl	2c8c0 <assertion_failed>
   20f70:	e3001ad4 	movw	r1, #2772	; 0xad4
   20f74:	e3401004 	movt	r1, #4
   20f78:	e3000b8c 	movw	r0, #2956	; 0xb8c
   20f7c:	e3400004 	movt	r0, #4
   20f80:	e3a020cc 	mov	r2, #204	; 0xcc
   20f84:	eb002e4d 	bl	2c8c0 <assertion_failed>
   20f88:	e3001ad4 	movw	r1, #2772	; 0xad4
   20f8c:	e3401004 	movt	r1, #4
   20f90:	e3000ba0 	movw	r0, #2976	; 0xba0
   20f94:	e3400004 	movt	r0, #4
   20f98:	e3a020d0 	mov	r2, #208	; 0xd0
   20f9c:	eb002e47 	bl	2c8c0 <assertion_failed>
   20fa0:	e3001ad4 	movw	r1, #2772	; 0xad4
   20fa4:	e3401004 	movt	r1, #4
   20fa8:	e3000bb0 	movw	r0, #2992	; 0xbb0
   20fac:	e3400004 	movt	r0, #4
   20fb0:	e3a020d1 	mov	r2, #209	; 0xd1
   20fb4:	eb002e41 	bl	2c8c0 <assertion_failed>
   20fb8:	e3001ad4 	movw	r1, #2772	; 0xad4
   20fbc:	e3401004 	movt	r1, #4
   20fc0:	e3000bc4 	movw	r0, #3012	; 0xbc4
   20fc4:	e3400004 	movt	r0, #4
   20fc8:	e3a020dc 	mov	r2, #220	; 0xdc
   20fcc:	eb002e3b 	bl	2c8c0 <assertion_failed>

00020fd0 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   20fd0:	e92d4070 	push	{r4, r5, r6, lr}
   20fd4:	e1a04000 	mov	r4, r0
   20fd8:	e1a06002 	mov	r6, r2
   20fdc:	e3a02064 	mov	r2, #100	; 0x64
   20fe0:	e1a05001 	mov	r5, r1
   20fe4:	e1a01002 	mov	r1, r2
   20fe8:	e8800060 	stm	r0, {r5, r6}
   20fec:	e2800008 	add	r0, r0, #8
   20ff0:	eb003cc8 	bl	30318 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   20ff4:	e3a0c000 	mov	ip, #0
   20ff8:	e1a02006 	mov	r2, r6
   20ffc:	e1a01005 	mov	r1, r5
   21000:	e2840020 	add	r0, r4, #32
   21004:	e30e3a60 	movw	r3, #60000	; 0xea60
   21008:	e34f3fff 	movt	r3, #65535	; 0xffff
   2100c:	e584c01c 	str	ip, [r4, #28]
   21010:	e1c431b8 	strh	r3, [r4, #24]
   21014:	eb001bdc 	bl	27f8c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   21018:	e5943000 	ldr	r3, [r4]
   2101c:	e3530000 	cmp	r3, #0
   21020:	0a000004 	beq	21038 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   21024:	e5943004 	ldr	r3, [r4, #4]
   21028:	e3530000 	cmp	r3, #0
   2102c:	0a000007 	beq	21050 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x80>
   21030:	e1a00004 	mov	r0, r4
   21034:	e8bd8070 	pop	{r4, r5, r6, pc}
   21038:	e3001c24 	movw	r1, #3108	; 0xc24
   2103c:	e3401004 	movt	r1, #4
   21040:	e3000b08 	movw	r0, #2824	; 0xb08
   21044:	e3400004 	movt	r0, #4
   21048:	e3a02025 	mov	r2, #37	; 0x25
   2104c:	eb002e1b 	bl	2c8c0 <assertion_failed>
   21050:	e3001c24 	movw	r1, #3108	; 0xc24
   21054:	e3401004 	movt	r1, #4
   21058:	e3000c38 	movw	r0, #3128	; 0xc38
   2105c:	e3400004 	movt	r0, #4
   21060:	e3a02026 	mov	r2, #38	; 0x26
   21064:	eb002e15 	bl	2c8c0 <assertion_failed>

00021068 <CTransportLayer::Initialize()>:
   21068:	e3a00001 	mov	r0, #1
   2106c:	e12fff1e 	bx	lr

00021070 <CTransportLayer::Bind(unsigned short, int)>:
   21070:	e3520011 	cmp	r2, #17
   21074:	1a000058 	bne	211dc <CTransportLayer::Bind(unsigned short, int)+0x16c>
   21078:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2107c:	e1a06000 	mov	r6, r0
   21080:	e590001c 	ldr	r0, [r0, #28]
   21084:	e1a07001 	mov	r7, r1
   21088:	e3500000 	cmp	r0, #0
   2108c:	1a000037 	bne	21170 <CTransportLayer::Bind(unsigned short, int)+0x100>
   21090:	e2865008 	add	r5, r6, #8
   21094:	e3a04000 	mov	r4, #0
   21098:	ea000006 	b	210b8 <CTransportLayer::Bind(unsigned short, int)+0x48>
   2109c:	e1a01004 	mov	r1, r4
   210a0:	e1a00005 	mov	r0, r5
   210a4:	eb003cc5 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   210a8:	e5902000 	ldr	r2, [r0]
   210ac:	e3520000 	cmp	r2, #0
   210b0:	0a000004 	beq	210c8 <CTransportLayer::Bind(unsigned short, int)+0x58>
   210b4:	e2844001 	add	r4, r4, #1
   210b8:	e1a00005 	mov	r0, r5
   210bc:	eb003cbd 	bl	303b8 <CPtrArray::GetCount() const>
   210c0:	e1500004 	cmp	r0, r4
   210c4:	8afffff4 	bhi	2109c <CTransportLayer::Bind(unsigned short, int)+0x2c>
   210c8:	e1a00005 	mov	r0, r5
   210cc:	eb003cb9 	bl	303b8 <CPtrArray::GetCount() const>
   210d0:	e1500004 	cmp	r0, r4
   210d4:	9a000020 	bls	2115c <CTransportLayer::Bind(unsigned short, int)+0xec>
   210d8:	e3570000 	cmp	r7, #0
   210dc:	0a000037 	beq	211c0 <CTransportLayer::Bind(unsigned short, int)+0x150>
   210e0:	e5963000 	ldr	r3, [r6]
   210e4:	e3530000 	cmp	r3, #0
   210e8:	0a000022 	beq	21178 <CTransportLayer::Bind(unsigned short, int)+0x108>
   210ec:	e5963004 	ldr	r3, [r6, #4]
   210f0:	e3530000 	cmp	r3, #0
   210f4:	0a000025 	beq	21190 <CTransportLayer::Bind(unsigned short, int)+0x120>
   210f8:	e3a00048 	mov	r0, #72	; 0x48
   210fc:	eb0056e6 	bl	36c9c <operator new(unsigned int)>
   21100:	e1a03007 	mov	r3, r7
   21104:	e8960006 	ldm	r6, {r1, r2}
   21108:	e1a07000 	mov	r7, r0
   2110c:	eb001138 	bl	255f4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   21110:	e1a01004 	mov	r1, r4
   21114:	e1a00005 	mov	r0, r5
   21118:	eb003ca8 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   2111c:	e1a03000 	mov	r3, r0
   21120:	e1a01004 	mov	r1, r4
   21124:	e1a00005 	mov	r0, r5
   21128:	e5837000 	str	r7, [r3]
   2112c:	eb003ca3 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21130:	e5903000 	ldr	r3, [r0]
   21134:	e3530000 	cmp	r3, #0
   21138:	0a00001a 	beq	211a8 <CTransportLayer::Bind(unsigned short, int)+0x138>
   2113c:	e596301c 	ldr	r3, [r6, #28]
   21140:	e3530000 	cmp	r3, #0
   21144:	1a000001 	bne	21150 <CTransportLayer::Bind(unsigned short, int)+0xe0>
   21148:	e1a00004 	mov	r0, r4
   2114c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21150:	eb005d14 	bl	385a8 <LeaveCritical>
   21154:	e1a00004 	mov	r0, r4
   21158:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2115c:	e3a01000 	mov	r1, #0
   21160:	e1a00005 	mov	r0, r5
   21164:	eb003cd1 	bl	304b0 <CPtrArray::Append(void*)>
   21168:	e1a04000 	mov	r4, r0
   2116c:	eaffffd9 	b	210d8 <CTransportLayer::Bind(unsigned short, int)+0x68>
   21170:	eb005ce1 	bl	384fc <EnterCritical>
   21174:	eaffffc5 	b	21090 <CTransportLayer::Bind(unsigned short, int)+0x20>
   21178:	e3001c24 	movw	r1, #3108	; 0xc24
   2117c:	e3401004 	movt	r1, #4
   21180:	e3000b08 	movw	r0, #2824	; 0xb08
   21184:	e3400004 	movt	r0, #4
   21188:	e3a020ad 	mov	r2, #173	; 0xad
   2118c:	eb002dcb 	bl	2c8c0 <assertion_failed>
   21190:	e3001c24 	movw	r1, #3108	; 0xc24
   21194:	e3401004 	movt	r1, #4
   21198:	e3000c38 	movw	r0, #3128	; 0xc38
   2119c:	e3400004 	movt	r0, #4
   211a0:	e3a020ae 	mov	r2, #174	; 0xae
   211a4:	eb002dc5 	bl	2c8c0 <assertion_failed>
   211a8:	e3001c24 	movw	r1, #3108	; 0xc24
   211ac:	e3401004 	movt	r1, #4
   211b0:	e3000c50 	movw	r0, #3152	; 0xc50
   211b4:	e3400004 	movt	r0, #4
   211b8:	e3a020b0 	mov	r2, #176	; 0xb0
   211bc:	eb002dbf 	bl	2c8c0 <assertion_failed>
   211c0:	e596301c 	ldr	r3, [r6, #28]
   211c4:	e3530000 	cmp	r3, #0
   211c8:	1a000001 	bne	211d4 <CTransportLayer::Bind(unsigned short, int)+0x164>
   211cc:	e3e00000 	mvn	r0, #0
   211d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   211d4:	eb005cf3 	bl	385a8 <LeaveCritical>
   211d8:	eafffffb 	b	211cc <CTransportLayer::Bind(unsigned short, int)+0x15c>
   211dc:	e3e00000 	mvn	r0, #0
   211e0:	e12fff1e 	bx	lr

000211e4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   211e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211e8:	e1a08000 	mov	r8, r0
   211ec:	e590001c 	ldr	r0, [r0, #28]
   211f0:	e24dd014 	sub	sp, sp, #20
   211f4:	e1a06003 	mov	r6, r3
   211f8:	e3500000 	cmp	r0, #0
   211fc:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   21200:	e58d1008 	str	r1, [sp, #8]
   21204:	e58d200c 	str	r2, [sp, #12]
   21208:	1a000071 	bne	213d4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f0>
   2120c:	e2885008 	add	r5, r8, #8
   21210:	e3a07000 	mov	r7, #0
   21214:	ea000006 	b	21234 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   21218:	e1a01007 	mov	r1, r7
   2121c:	e1a00005 	mov	r0, r5
   21220:	eb003c66 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21224:	e5903000 	ldr	r3, [r0]
   21228:	e3530000 	cmp	r3, #0
   2122c:	0a000004 	beq	21244 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   21230:	e2877001 	add	r7, r7, #1
   21234:	e1a00005 	mov	r0, r5
   21238:	eb003c5e 	bl	303b8 <CPtrArray::GetCount() const>
   2123c:	e1500007 	cmp	r0, r7
   21240:	8afffff4 	bhi	21218 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   21244:	e1a00005 	mov	r0, r5
   21248:	eb003c5a 	bl	303b8 <CPtrArray::GetCount() const>
   2124c:	e1500007 	cmp	r0, r7
   21250:	9a00005a 	bls	213c0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1dc>
   21254:	e3560000 	cmp	r6, #0
   21258:	1a000026 	bne	212f8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   2125c:	e30ebe47 	movw	fp, #60999	; 0xee47
   21260:	e30eaa60 	movw	sl, #60000	; 0xea60
   21264:	e1d861b8 	ldrh	r6, [r8, #24]
   21268:	e3a04000 	mov	r4, #0
   2126c:	e2863001 	add	r3, r6, #1
   21270:	e6ff3073 	uxth	r3, r3
   21274:	e153000b 	cmp	r3, fp
   21278:	81a0300a 	movhi	r3, sl
   2127c:	e1c831b8 	strh	r3, [r8, #24]
   21280:	ea000000 	b	21288 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   21284:	e2844001 	add	r4, r4, #1
   21288:	e1a00005 	mov	r0, r5
   2128c:	eb003c49 	bl	303b8 <CPtrArray::GetCount() const>
   21290:	e1500004 	cmp	r0, r4
   21294:	9a000013 	bls	212e8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   21298:	e1a01004 	mov	r1, r4
   2129c:	e1a00005 	mov	r0, r5
   212a0:	eb003c46 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   212a4:	e5903000 	ldr	r3, [r0]
   212a8:	e3530000 	cmp	r3, #0
   212ac:	0afffff4 	beq	21284 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   212b0:	e1a01004 	mov	r1, r4
   212b4:	e1a00005 	mov	r0, r5
   212b8:	eb003c40 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   212bc:	e5900000 	ldr	r0, [r0]
   212c0:	eb000e62 	bl	24c50 <CNetConnection::GetOwnPort() const>
   212c4:	e1500006 	cmp	r0, r6
   212c8:	1affffed 	bne	21284 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   212cc:	e1a01004 	mov	r1, r4
   212d0:	e1a00005 	mov	r0, r5
   212d4:	eb003c39 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   212d8:	e5900000 	ldr	r0, [r0]
   212dc:	eb000e65 	bl	24c78 <CNetConnection::GetProtocol() const>
   212e0:	e1500009 	cmp	r0, r9
   212e4:	1affffe6 	bne	21284 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   212e8:	e1a00005 	mov	r0, r5
   212ec:	eb003c31 	bl	303b8 <CPtrArray::GetCount() const>
   212f0:	e1500004 	cmp	r0, r4
   212f4:	8affffda 	bhi	21264 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   212f8:	e5983000 	ldr	r3, [r8]
   212fc:	e3530000 	cmp	r3, #0
   21300:	0a00004d 	beq	2143c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x258>
   21304:	e5983004 	ldr	r3, [r8, #4]
   21308:	e3530000 	cmp	r3, #0
   2130c:	0a000050 	beq	21454 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x270>
   21310:	e3590006 	cmp	r9, #6
   21314:	0a000030 	beq	213dc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f8>
   21318:	e3590011 	cmp	r9, #17
   2131c:	1a000022 	bne	213ac <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c8>
   21320:	e3a00048 	mov	r0, #72	; 0x48
   21324:	eb00565c 	bl	36c9c <operator new(unsigned int)>
   21328:	e59d300c 	ldr	r3, [sp, #12]
   2132c:	e58d3000 	str	r3, [sp]
   21330:	e1a04000 	mov	r4, r0
   21334:	e58d6004 	str	r6, [sp, #4]
   21338:	e59d3008 	ldr	r3, [sp, #8]
   2133c:	e8980006 	ldm	r8, {r1, r2}
   21340:	eb001091 	bl	2558c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   21344:	e1a01007 	mov	r1, r7
   21348:	e1a00005 	mov	r0, r5
   2134c:	eb003c1b 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21350:	e598301c 	ldr	r3, [r8, #28]
   21354:	e5804000 	str	r4, [r0]
   21358:	e3530000 	cmp	r3, #0
   2135c:	1a00002e 	bne	2141c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x238>
   21360:	e1a01007 	mov	r1, r7
   21364:	e1a00005 	mov	r0, r5
   21368:	eb003c14 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   2136c:	e5903000 	ldr	r3, [r0]
   21370:	e3530000 	cmp	r3, #0
   21374:	0a00003c 	beq	2146c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   21378:	e1a01007 	mov	r1, r7
   2137c:	e1a00005 	mov	r0, r5
   21380:	eb003c0e 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21384:	e5900000 	ldr	r0, [r0]
   21388:	e3013f8c 	movw	r3, #8076	; 0x1f8c
   2138c:	e3403002 	movt	r3, #2
   21390:	e5902000 	ldr	r2, [r0]
   21394:	e5922008 	ldr	r2, [r2, #8]
   21398:	e1520003 	cmp	r2, r3
   2139c:	1a000020 	bne	21424 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x240>
   213a0:	e3e00000 	mvn	r0, #0
   213a4:	e28dd014 	add	sp, sp, #20
   213a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213ac:	e598301c 	ldr	r3, [r8, #28]
   213b0:	e3530000 	cmp	r3, #0
   213b4:	0afffff9 	beq	213a0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1bc>
   213b8:	eb005c7a 	bl	385a8 <LeaveCritical>
   213bc:	eafffff7 	b	213a0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1bc>
   213c0:	e3a01000 	mov	r1, #0
   213c4:	e1a00005 	mov	r0, r5
   213c8:	eb003c38 	bl	304b0 <CPtrArray::Append(void*)>
   213cc:	e1a07000 	mov	r7, r0
   213d0:	eaffff9f 	b	21254 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   213d4:	eb005c48 	bl	384fc <EnterCritical>
   213d8:	eaffff8b 	b	2120c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   213dc:	e3a000e0 	mov	r0, #224	; 0xe0
   213e0:	eb00562d 	bl	36c9c <operator new(unsigned int)>
   213e4:	e59d300c 	ldr	r3, [sp, #12]
   213e8:	e58d3000 	str	r3, [sp]
   213ec:	e1a04000 	mov	r4, r0
   213f0:	e58d6004 	str	r6, [sp, #4]
   213f4:	e59d3008 	ldr	r3, [sp, #8]
   213f8:	e8980006 	ldm	r8, {r1, r2}
   213fc:	eb0012a1 	bl	25e88 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   21400:	e1a01007 	mov	r1, r7
   21404:	e1a00005 	mov	r0, r5
   21408:	eb003bec 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   2140c:	e598301c 	ldr	r3, [r8, #28]
   21410:	e5804000 	str	r4, [r0]
   21414:	e3530000 	cmp	r3, #0
   21418:	0affffd0 	beq	21360 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   2141c:	eb005c61 	bl	385a8 <LeaveCritical>
   21420:	eaffffce 	b	21360 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   21424:	e12fff32 	blx	r2
   21428:	e3500000 	cmp	r0, #0
   2142c:	baffffdb 	blt	213a0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1bc>
   21430:	e1a00007 	mov	r0, r7
   21434:	e28dd014 	add	sp, sp, #20
   21438:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2143c:	e3001c24 	movw	r1, #3108	; 0xc24
   21440:	e3401004 	movt	r1, #4
   21444:	e3000b08 	movw	r0, #2824	; 0xb08
   21448:	e3400004 	movt	r0, #4
   2144c:	e3a020e1 	mov	r2, #225	; 0xe1
   21450:	eb002d1a 	bl	2c8c0 <assertion_failed>
   21454:	e3001c24 	movw	r1, #3108	; 0xc24
   21458:	e3401004 	movt	r1, #4
   2145c:	e3000c38 	movw	r0, #3128	; 0xc38
   21460:	e3400004 	movt	r0, #4
   21464:	e3a020e2 	mov	r2, #226	; 0xe2
   21468:	eb002d14 	bl	2c8c0 <assertion_failed>
   2146c:	e3001c24 	movw	r1, #3108	; 0xc24
   21470:	e3401004 	movt	r1, #4
   21474:	e3000c50 	movw	r0, #3152	; 0xc50
   21478:	e3400004 	movt	r0, #4
   2147c:	e3a020f4 	mov	r2, #244	; 0xf4
   21480:	eb002d0e 	bl	2c8c0 <assertion_failed>

00021484 <CTransportLayer::Listen(unsigned short, int)>:
   21484:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21488:	e1a06000 	mov	r6, r0
   2148c:	e590001c 	ldr	r0, [r0, #28]
   21490:	e1a07001 	mov	r7, r1
   21494:	e1a08002 	mov	r8, r2
   21498:	e3500000 	cmp	r0, #0
   2149c:	1a000039 	bne	21588 <CTransportLayer::Listen(unsigned short, int)+0x104>
   214a0:	e2865008 	add	r5, r6, #8
   214a4:	e3a04000 	mov	r4, #0
   214a8:	ea000006 	b	214c8 <CTransportLayer::Listen(unsigned short, int)+0x44>
   214ac:	e1a01004 	mov	r1, r4
   214b0:	e1a00005 	mov	r0, r5
   214b4:	eb003bc1 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   214b8:	e590c000 	ldr	ip, [r0]
   214bc:	e35c0000 	cmp	ip, #0
   214c0:	0a000004 	beq	214d8 <CTransportLayer::Listen(unsigned short, int)+0x54>
   214c4:	e2844001 	add	r4, r4, #1
   214c8:	e1a00005 	mov	r0, r5
   214cc:	eb003bb9 	bl	303b8 <CPtrArray::GetCount() const>
   214d0:	e1500004 	cmp	r0, r4
   214d4:	8afffff4 	bhi	214ac <CTransportLayer::Listen(unsigned short, int)+0x28>
   214d8:	e1a00005 	mov	r0, r5
   214dc:	eb003bb5 	bl	303b8 <CPtrArray::GetCount() const>
   214e0:	e1500004 	cmp	r0, r4
   214e4:	9a000022 	bls	21574 <CTransportLayer::Listen(unsigned short, int)+0xf0>
   214e8:	e3570000 	cmp	r7, #0
   214ec:	0a000039 	beq	215d8 <CTransportLayer::Listen(unsigned short, int)+0x154>
   214f0:	e3580006 	cmp	r8, #6
   214f4:	1a000037 	bne	215d8 <CTransportLayer::Listen(unsigned short, int)+0x154>
   214f8:	e5963000 	ldr	r3, [r6]
   214fc:	e3530000 	cmp	r3, #0
   21500:	0a000022 	beq	21590 <CTransportLayer::Listen(unsigned short, int)+0x10c>
   21504:	e5963004 	ldr	r3, [r6, #4]
   21508:	e3530000 	cmp	r3, #0
   2150c:	0a000025 	beq	215a8 <CTransportLayer::Listen(unsigned short, int)+0x124>
   21510:	e3a000e0 	mov	r0, #224	; 0xe0
   21514:	eb0055e0 	bl	36c9c <operator new(unsigned int)>
   21518:	e1a03007 	mov	r3, r7
   2151c:	e8960006 	ldm	r6, {r1, r2}
   21520:	e1a07000 	mov	r7, r0
   21524:	eb0010e2 	bl	258b4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   21528:	e1a01004 	mov	r1, r4
   2152c:	e1a00005 	mov	r0, r5
   21530:	eb003ba2 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21534:	e1a03000 	mov	r3, r0
   21538:	e1a01004 	mov	r1, r4
   2153c:	e1a00005 	mov	r0, r5
   21540:	e5837000 	str	r7, [r3]
   21544:	eb003b9d 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21548:	e5903000 	ldr	r3, [r0]
   2154c:	e3530000 	cmp	r3, #0
   21550:	0a00001a 	beq	215c0 <CTransportLayer::Listen(unsigned short, int)+0x13c>
   21554:	e596301c 	ldr	r3, [r6, #28]
   21558:	e3530000 	cmp	r3, #0
   2155c:	1a000001 	bne	21568 <CTransportLayer::Listen(unsigned short, int)+0xe4>
   21560:	e1a00004 	mov	r0, r4
   21564:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21568:	eb005c0e 	bl	385a8 <LeaveCritical>
   2156c:	e1a00004 	mov	r0, r4
   21570:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21574:	e3a01000 	mov	r1, #0
   21578:	e1a00005 	mov	r0, r5
   2157c:	eb003bcb 	bl	304b0 <CPtrArray::Append(void*)>
   21580:	e1a04000 	mov	r4, r0
   21584:	eaffffd7 	b	214e8 <CTransportLayer::Listen(unsigned short, int)+0x64>
   21588:	eb005bdb 	bl	384fc <EnterCritical>
   2158c:	eaffffc3 	b	214a0 <CTransportLayer::Listen(unsigned short, int)+0x1c>
   21590:	e3001c24 	movw	r1, #3108	; 0xc24
   21594:	e3401004 	movt	r1, #4
   21598:	e3000b08 	movw	r0, #2824	; 0xb08
   2159c:	e3400004 	movt	r0, #4
   215a0:	e300211e 	movw	r2, #286	; 0x11e
   215a4:	eb002cc5 	bl	2c8c0 <assertion_failed>
   215a8:	e3001c24 	movw	r1, #3108	; 0xc24
   215ac:	e3401004 	movt	r1, #4
   215b0:	e3000c38 	movw	r0, #3128	; 0xc38
   215b4:	e3400004 	movt	r0, #4
   215b8:	e300211f 	movw	r2, #287	; 0x11f
   215bc:	eb002cbf 	bl	2c8c0 <assertion_failed>
   215c0:	e3001c24 	movw	r1, #3108	; 0xc24
   215c4:	e3401004 	movt	r1, #4
   215c8:	e3000c50 	movw	r0, #3152	; 0xc50
   215cc:	e3400004 	movt	r0, #4
   215d0:	e3002121 	movw	r2, #289	; 0x121
   215d4:	eb002cb9 	bl	2c8c0 <assertion_failed>
   215d8:	e596301c 	ldr	r3, [r6, #28]
   215dc:	e3530000 	cmp	r3, #0
   215e0:	1a000001 	bne	215ec <CTransportLayer::Listen(unsigned short, int)+0x168>
   215e4:	e3e00000 	mvn	r0, #0
   215e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   215ec:	eb005bed 	bl	385a8 <LeaveCritical>
   215f0:	eafffffb 	b	215e4 <CTransportLayer::Listen(unsigned short, int)+0x160>

000215f4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   215f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   215f8:	e2535000 	subs	r5, r3, #0
   215fc:	ba000021 	blt	21688 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x94>
   21600:	e2804008 	add	r4, r0, #8
   21604:	e1a06001 	mov	r6, r1
   21608:	e1a00004 	mov	r0, r4
   2160c:	e1a07002 	mov	r7, r2
   21610:	eb003b68 	bl	303b8 <CPtrArray::GetCount() const>
   21614:	e1500005 	cmp	r0, r5
   21618:	da000013 	ble	2166c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x78>
   2161c:	e1a01005 	mov	r1, r5
   21620:	e1a00004 	mov	r0, r4
   21624:	eb003b65 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21628:	e5903000 	ldr	r3, [r0]
   2162c:	e3530000 	cmp	r3, #0
   21630:	0a00000d 	beq	2166c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x78>
   21634:	e3560000 	cmp	r6, #0
   21638:	0a000018 	beq	216a0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xac>
   2163c:	e3570000 	cmp	r7, #0
   21640:	0a00001c 	beq	216b8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   21644:	e1a01005 	mov	r1, r5
   21648:	e1a00004 	mov	r0, r4
   2164c:	eb003b5b 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21650:	e5900000 	ldr	r0, [r0]
   21654:	e3013f94 	movw	r3, #8084	; 0x1f94
   21658:	e3403002 	movt	r3, #2
   2165c:	e5902000 	ldr	r2, [r0]
   21660:	e592e00c 	ldr	lr, [r2, #12]
   21664:	e15e0003 	cmp	lr, r3
   21668:	1a000001 	bne	21674 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x80>
   2166c:	e3e00000 	mvn	r0, #0
   21670:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21674:	e1a02007 	mov	r2, r7
   21678:	e1a01006 	mov	r1, r6
   2167c:	e1a0300e 	mov	r3, lr
   21680:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21684:	e12fff13 	bx	r3
   21688:	e3001c24 	movw	r1, #3108	; 0xc24
   2168c:	e3401004 	movt	r1, #4
   21690:	e3000c68 	movw	r0, #3176	; 0xc68
   21694:	e3400004 	movt	r0, #4
   21698:	e300212a 	movw	r2, #298	; 0x12a
   2169c:	eb002c87 	bl	2c8c0 <assertion_failed>
   216a0:	e3001c24 	movw	r1, #3108	; 0xc24
   216a4:	e3401004 	movt	r1, #4
   216a8:	e3000ba0 	movw	r0, #2976	; 0xba0
   216ac:	e3400004 	movt	r0, #4
   216b0:	e3002131 	movw	r2, #305	; 0x131
   216b4:	eb002c81 	bl	2c8c0 <assertion_failed>
   216b8:	e3001c24 	movw	r1, #3108	; 0xc24
   216bc:	e3401004 	movt	r1, #4
   216c0:	e3000bb0 	movw	r0, #2992	; 0xbb0
   216c4:	e3400004 	movt	r0, #4
   216c8:	e3002132 	movw	r2, #306	; 0x132
   216cc:	eb002c7b 	bl	2c8c0 <assertion_failed>

000216d0 <CTransportLayer::Disconnect(int)>:
   216d0:	e92d4070 	push	{r4, r5, r6, lr}
   216d4:	e2515000 	subs	r5, r1, #0
   216d8:	ba000018 	blt	21740 <CTransportLayer::Disconnect(int)+0x70>
   216dc:	e2804008 	add	r4, r0, #8
   216e0:	e1a00004 	mov	r0, r4
   216e4:	eb003b33 	bl	303b8 <CPtrArray::GetCount() const>
   216e8:	e1500005 	cmp	r0, r5
   216ec:	da00000f 	ble	21730 <CTransportLayer::Disconnect(int)+0x60>
   216f0:	e1a01005 	mov	r1, r5
   216f4:	e1a00004 	mov	r0, r4
   216f8:	eb003b30 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   216fc:	e5903000 	ldr	r3, [r0]
   21700:	e3530000 	cmp	r3, #0
   21704:	0a000009 	beq	21730 <CTransportLayer::Disconnect(int)+0x60>
   21708:	e1a01005 	mov	r1, r5
   2170c:	e1a00004 	mov	r0, r4
   21710:	eb003b2a 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21714:	e5900000 	ldr	r0, [r0]
   21718:	e3013f9c 	movw	r3, #8092	; 0x1f9c
   2171c:	e3403002 	movt	r3, #2
   21720:	e5902000 	ldr	r2, [r0]
   21724:	e5922010 	ldr	r2, [r2, #16]
   21728:	e1520003 	cmp	r2, r3
   2172c:	1a000001 	bne	21738 <CTransportLayer::Disconnect(int)+0x68>
   21730:	e3e00000 	mvn	r0, #0
   21734:	e8bd8070 	pop	{r4, r5, r6, pc}
   21738:	e8bd4070 	pop	{r4, r5, r6, lr}
   2173c:	e12fff12 	bx	r2
   21740:	e3001c24 	movw	r1, #3108	; 0xc24
   21744:	e3401004 	movt	r1, #4
   21748:	e3000c68 	movw	r0, #3176	; 0xc68
   2174c:	e3400004 	movt	r0, #4
   21750:	e3a02f4e 	mov	r2, #312	; 0x138
   21754:	eb002c59 	bl	2c8c0 <assertion_failed>

00021758 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   21758:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2175c:	e59d5018 	ldr	r5, [sp, #24]
   21760:	e3550000 	cmp	r5, #0
   21764:	ba000023 	blt	217f8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xa0>
   21768:	e2804008 	add	r4, r0, #8
   2176c:	e1a06001 	mov	r6, r1
   21770:	e1a00004 	mov	r0, r4
   21774:	e1a08002 	mov	r8, r2
   21778:	e1a07003 	mov	r7, r3
   2177c:	eb003b0d 	bl	303b8 <CPtrArray::GetCount() const>
   21780:	e1500005 	cmp	r0, r5
   21784:	da000013 	ble	217d8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x80>
   21788:	e1a01005 	mov	r1, r5
   2178c:	e1a00004 	mov	r0, r4
   21790:	eb003b0a 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21794:	e5903000 	ldr	r3, [r0]
   21798:	e3530000 	cmp	r3, #0
   2179c:	0a00000d 	beq	217d8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x80>
   217a0:	e3560000 	cmp	r6, #0
   217a4:	0a000019 	beq	21810 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb8>
   217a8:	e3580000 	cmp	r8, #0
   217ac:	0a00001d 	beq	21828 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   217b0:	e1a01005 	mov	r1, r5
   217b4:	e1a00004 	mov	r0, r4
   217b8:	eb003b00 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   217bc:	e5900000 	ldr	r0, [r0]
   217c0:	e3011fa4 	movw	r1, #8100	; 0x1fa4
   217c4:	e3401002 	movt	r1, #2
   217c8:	e5903000 	ldr	r3, [r0]
   217cc:	e593e014 	ldr	lr, [r3, #20]
   217d0:	e15e0001 	cmp	lr, r1
   217d4:	1a000001 	bne	217e0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x88>
   217d8:	e3e00000 	mvn	r0, #0
   217dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   217e0:	e1a03007 	mov	r3, r7
   217e4:	e1a02008 	mov	r2, r8
   217e8:	e1a01006 	mov	r1, r6
   217ec:	e1a0c00e 	mov	ip, lr
   217f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   217f4:	e12fff1c 	bx	ip
   217f8:	e3001c24 	movw	r1, #3108	; 0xc24
   217fc:	e3401004 	movt	r1, #4
   21800:	e3000c68 	movw	r0, #3176	; 0xc68
   21804:	e3400004 	movt	r0, #4
   21808:	e3a02f51 	mov	r2, #324	; 0x144
   2180c:	eb002c2b 	bl	2c8c0 <assertion_failed>
   21810:	e3001c24 	movw	r1, #3108	; 0xc24
   21814:	e3401004 	movt	r1, #4
   21818:	e30c0b74 	movw	r0, #52084	; 0xcb74
   2181c:	e3400003 	movt	r0, #3
   21820:	e300214b 	movw	r2, #331	; 0x14b
   21824:	eb002c25 	bl	2c8c0 <assertion_failed>
   21828:	e3001c24 	movw	r1, #3108	; 0xc24
   2182c:	e3401004 	movt	r1, #4
   21830:	e30c0b80 	movw	r0, #52096	; 0xcb80
   21834:	e3400003 	movt	r0, #3
   21838:	e3a02f53 	mov	r2, #332	; 0x14c
   2183c:	eb002c1f 	bl	2c8c0 <assertion_failed>

00021840 <CTransportLayer::Receive(void*, int, int)>:
   21840:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21844:	e2535000 	subs	r5, r3, #0
   21848:	ba00001f 	blt	218cc <CTransportLayer::Receive(void*, int, int)+0x8c>
   2184c:	e2804008 	add	r4, r0, #8
   21850:	e1a06001 	mov	r6, r1
   21854:	e1a00004 	mov	r0, r4
   21858:	e1a07002 	mov	r7, r2
   2185c:	eb003ad5 	bl	303b8 <CPtrArray::GetCount() const>
   21860:	e1500005 	cmp	r0, r5
   21864:	da000011 	ble	218b0 <CTransportLayer::Receive(void*, int, int)+0x70>
   21868:	e1a01005 	mov	r1, r5
   2186c:	e1a00004 	mov	r0, r4
   21870:	eb003ad2 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21874:	e5903000 	ldr	r3, [r0]
   21878:	e3530000 	cmp	r3, #0
   2187c:	0a00000b 	beq	218b0 <CTransportLayer::Receive(void*, int, int)+0x70>
   21880:	e3560000 	cmp	r6, #0
   21884:	0a000016 	beq	218e4 <CTransportLayer::Receive(void*, int, int)+0xa4>
   21888:	e1a01005 	mov	r1, r5
   2188c:	e1a00004 	mov	r0, r4
   21890:	eb003aca 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21894:	e5900000 	ldr	r0, [r0]
   21898:	e3013fac 	movw	r3, #8108	; 0x1fac
   2189c:	e3403002 	movt	r3, #2
   218a0:	e5902000 	ldr	r2, [r0]
   218a4:	e592e018 	ldr	lr, [r2, #24]
   218a8:	e15e0003 	cmp	lr, r3
   218ac:	1a000001 	bne	218b8 <CTransportLayer::Receive(void*, int, int)+0x78>
   218b0:	e3e00000 	mvn	r0, #0
   218b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   218b8:	e1a02007 	mov	r2, r7
   218bc:	e1a01006 	mov	r1, r6
   218c0:	e1a0300e 	mov	r3, lr
   218c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   218c8:	e12fff13 	bx	r3
   218cc:	e3001c24 	movw	r1, #3108	; 0xc24
   218d0:	e3401004 	movt	r1, #4
   218d4:	e3000c68 	movw	r0, #3176	; 0xc68
   218d8:	e3400004 	movt	r0, #4
   218dc:	e3002152 	movw	r2, #338	; 0x152
   218e0:	eb002bf6 	bl	2c8c0 <assertion_failed>
   218e4:	e3001c24 	movw	r1, #3108	; 0xc24
   218e8:	e3401004 	movt	r1, #4
   218ec:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   218f0:	e3400003 	movt	r0, #3
   218f4:	e3002159 	movw	r2, #345	; 0x159
   218f8:	eb002bf0 	bl	2c8c0 <assertion_failed>

000218fc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   218fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21900:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   21904:	e59d9020 	ldr	r9, [sp, #32]
   21908:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   2190c:	e3550000 	cmp	r5, #0
   21910:	ba000025 	blt	219ac <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xb0>
   21914:	e2804008 	add	r4, r0, #8
   21918:	e1a06001 	mov	r6, r1
   2191c:	e1a00004 	mov	r0, r4
   21920:	e1a07002 	mov	r7, r2
   21924:	e1a08003 	mov	r8, r3
   21928:	eb003aa2 	bl	303b8 <CPtrArray::GetCount() const>
   2192c:	e1500005 	cmp	r0, r5
   21930:	da000013 	ble	21984 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x88>
   21934:	e1a01005 	mov	r1, r5
   21938:	e1a00004 	mov	r0, r4
   2193c:	eb003a9f 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21940:	e5903000 	ldr	r3, [r0]
   21944:	e3530000 	cmp	r3, #0
   21948:	0a00000d 	beq	21984 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x88>
   2194c:	e3560000 	cmp	r6, #0
   21950:	0a00001b 	beq	219c4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc8>
   21954:	e3570000 	cmp	r7, #0
   21958:	0a00001f 	beq	219dc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   2195c:	e1a01005 	mov	r1, r5
   21960:	e1a00004 	mov	r0, r4
   21964:	eb003a95 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21968:	e5900000 	ldr	r0, [r0]
   2196c:	e3013fb4 	movw	r3, #8116	; 0x1fb4
   21970:	e3403002 	movt	r3, #2
   21974:	e5902000 	ldr	r2, [r0]
   21978:	e592e01c 	ldr	lr, [r2, #28]
   2197c:	e15e0003 	cmp	lr, r3
   21980:	1a000001 	bne	2198c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x90>
   21984:	e3e00000 	mvn	r0, #0
   21988:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2198c:	e1a03008 	mov	r3, r8
   21990:	e1a02007 	mov	r2, r7
   21994:	e1a01006 	mov	r1, r6
   21998:	e1a0c00e 	mov	ip, lr
   2199c:	e58da024 	str	sl, [sp, #36]	; 0x24
   219a0:	e58d9020 	str	r9, [sp, #32]
   219a4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   219a8:	e12fff1c 	bx	ip
   219ac:	e3001c24 	movw	r1, #3108	; 0xc24
   219b0:	e3401004 	movt	r1, #4
   219b4:	e3000c68 	movw	r0, #3176	; 0xc68
   219b8:	e3400004 	movt	r0, #4
   219bc:	e3a02e16 	mov	r2, #352	; 0x160
   219c0:	eb002bbe 	bl	2c8c0 <assertion_failed>
   219c4:	e3001c24 	movw	r1, #3108	; 0xc24
   219c8:	e3401004 	movt	r1, #4
   219cc:	e30c0b74 	movw	r0, #52084	; 0xcb74
   219d0:	e3400003 	movt	r0, #3
   219d4:	e3002167 	movw	r2, #359	; 0x167
   219d8:	eb002bb8 	bl	2c8c0 <assertion_failed>
   219dc:	e3001c24 	movw	r1, #3108	; 0xc24
   219e0:	e3401004 	movt	r1, #4
   219e4:	e30c0b80 	movw	r0, #52096	; 0xcb80
   219e8:	e3400003 	movt	r0, #3
   219ec:	e3a02f5a 	mov	r2, #360	; 0x168
   219f0:	eb002bb2 	bl	2c8c0 <assertion_failed>

000219f4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   219f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   219f8:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   219fc:	e59d8020 	ldr	r8, [sp, #32]
   21a00:	e3550000 	cmp	r5, #0
   21a04:	ba000022 	blt	21a94 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xa0>
   21a08:	e2804008 	add	r4, r0, #8
   21a0c:	e1a06001 	mov	r6, r1
   21a10:	e1a00004 	mov	r0, r4
   21a14:	e1a07002 	mov	r7, r2
   21a18:	e1a09003 	mov	r9, r3
   21a1c:	eb003a65 	bl	303b8 <CPtrArray::GetCount() const>
   21a20:	e1500005 	cmp	r0, r5
   21a24:	da000011 	ble	21a70 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x7c>
   21a28:	e1a01005 	mov	r1, r5
   21a2c:	e1a00004 	mov	r0, r4
   21a30:	eb003a62 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21a34:	e5903000 	ldr	r3, [r0]
   21a38:	e3530000 	cmp	r3, #0
   21a3c:	0a00000b 	beq	21a70 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x7c>
   21a40:	e3560000 	cmp	r6, #0
   21a44:	0a000018 	beq	21aac <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb8>
   21a48:	e1a01005 	mov	r1, r5
   21a4c:	e1a00004 	mov	r0, r4
   21a50:	eb003a5a 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21a54:	e5900000 	ldr	r0, [r0]
   21a58:	e3012fbc 	movw	r2, #8124	; 0x1fbc
   21a5c:	e3402002 	movt	r2, #2
   21a60:	e5903000 	ldr	r3, [r0]
   21a64:	e593e020 	ldr	lr, [r3, #32]
   21a68:	e15e0002 	cmp	lr, r2
   21a6c:	1a000001 	bne	21a78 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x84>
   21a70:	e3e00000 	mvn	r0, #0
   21a74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21a78:	e1a03009 	mov	r3, r9
   21a7c:	e1a02007 	mov	r2, r7
   21a80:	e1a01006 	mov	r1, r6
   21a84:	e1a0c00e 	mov	ip, lr
   21a88:	e58d8020 	str	r8, [sp, #32]
   21a8c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   21a90:	e12fff1c 	bx	ip
   21a94:	e3001c24 	movw	r1, #3108	; 0xc24
   21a98:	e3401004 	movt	r1, #4
   21a9c:	e3000c68 	movw	r0, #3176	; 0xc68
   21aa0:	e3400004 	movt	r0, #4
   21aa4:	e3a02e17 	mov	r2, #368	; 0x170
   21aa8:	eb002b84 	bl	2c8c0 <assertion_failed>
   21aac:	e3001c24 	movw	r1, #3108	; 0xc24
   21ab0:	e3401004 	movt	r1, #4
   21ab4:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   21ab8:	e3400003 	movt	r0, #3
   21abc:	e3002177 	movw	r2, #375	; 0x177
   21ac0:	eb002b7e 	bl	2c8c0 <assertion_failed>

00021ac4 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   21ac4:	e92d4070 	push	{r4, r5, r6, lr}
   21ac8:	e2525000 	subs	r5, r2, #0
   21acc:	ba00001a 	blt	21b3c <CTransportLayer::SetOptionBroadcast(bool, int)+0x78>
   21ad0:	e2804008 	add	r4, r0, #8
   21ad4:	e1a06001 	mov	r6, r1
   21ad8:	e1a00004 	mov	r0, r4
   21adc:	eb003a35 	bl	303b8 <CPtrArray::GetCount() const>
   21ae0:	e1500005 	cmp	r0, r5
   21ae4:	da00000f 	ble	21b28 <CTransportLayer::SetOptionBroadcast(bool, int)+0x64>
   21ae8:	e1a01005 	mov	r1, r5
   21aec:	e1a00004 	mov	r0, r4
   21af0:	eb003a32 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21af4:	e5903000 	ldr	r3, [r0]
   21af8:	e3530000 	cmp	r3, #0
   21afc:	0a000009 	beq	21b28 <CTransportLayer::SetOptionBroadcast(bool, int)+0x64>
   21b00:	e1a01005 	mov	r1, r5
   21b04:	e1a00004 	mov	r0, r4
   21b08:	eb003a2c 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21b0c:	e5900000 	ldr	r0, [r0]
   21b10:	e3013fc4 	movw	r3, #8132	; 0x1fc4
   21b14:	e3403002 	movt	r3, #2
   21b18:	e5902000 	ldr	r2, [r0]
   21b1c:	e5922024 	ldr	r2, [r2, #36]	; 0x24
   21b20:	e1520003 	cmp	r2, r3
   21b24:	1a000001 	bne	21b30 <CTransportLayer::SetOptionBroadcast(bool, int)+0x6c>
   21b28:	e3e00000 	mvn	r0, #0
   21b2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b30:	e1a01006 	mov	r1, r6
   21b34:	e8bd4070 	pop	{r4, r5, r6, lr}
   21b38:	e12fff12 	bx	r2
   21b3c:	e3001c24 	movw	r1, #3108	; 0xc24
   21b40:	e3401004 	movt	r1, #4
   21b44:	e3000c68 	movw	r0, #3176	; 0xc68
   21b48:	e3400004 	movt	r0, #4
   21b4c:	e300217e 	movw	r2, #382	; 0x17e
   21b50:	eb002b5a 	bl	2c8c0 <assertion_failed>

00021b54 <CTransportLayer::IsConnected(int) const>:
   21b54:	e92d4070 	push	{r4, r5, r6, lr}
   21b58:	e2515000 	subs	r5, r1, #0
   21b5c:	ba000016 	blt	21bbc <CTransportLayer::IsConnected(int) const+0x68>
   21b60:	e2804008 	add	r4, r0, #8
   21b64:	e1a00004 	mov	r0, r4
   21b68:	eb003a12 	bl	303b8 <CPtrArray::GetCount() const>
   21b6c:	e1500005 	cmp	r0, r5
   21b70:	ca000001 	bgt	21b7c <CTransportLayer::IsConnected(int) const+0x28>
   21b74:	e3a00000 	mov	r0, #0
   21b78:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b7c:	e1a01005 	mov	r1, r5
   21b80:	e1a00004 	mov	r0, r4
   21b84:	eb003a2b 	bl	30438 <CPtrArray::operator[](unsigned int) const>
   21b88:	e3500000 	cmp	r0, #0
   21b8c:	0afffff8 	beq	21b74 <CTransportLayer::IsConnected(int) const+0x20>
   21b90:	e1a01005 	mov	r1, r5
   21b94:	e1a00004 	mov	r0, r4
   21b98:	eb003a26 	bl	30438 <CPtrArray::operator[](unsigned int) const>
   21b9c:	e5902000 	ldr	r2, [r0]
   21ba0:	e3013fcc 	movw	r3, #8140	; 0x1fcc
   21ba4:	e3403002 	movt	r3, #2
   21ba8:	e5922028 	ldr	r2, [r2, #40]	; 0x28
   21bac:	e1520003 	cmp	r2, r3
   21bb0:	0affffef 	beq	21b74 <CTransportLayer::IsConnected(int) const+0x20>
   21bb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   21bb8:	e12fff12 	bx	r2
   21bbc:	e3001c24 	movw	r1, #3108	; 0xc24
   21bc0:	e3401004 	movt	r1, #4
   21bc4:	e3000c68 	movw	r0, #3176	; 0xc68
   21bc8:	e3400004 	movt	r0, #4
   21bcc:	e300218a 	movw	r2, #394	; 0x18a
   21bd0:	eb002b3a 	bl	2c8c0 <assertion_failed>

00021bd4 <CTransportLayer::GetForeignIP(int) const>:
   21bd4:	e92d4070 	push	{r4, r5, r6, lr}
   21bd8:	e2515000 	subs	r5, r1, #0
   21bdc:	ba000010 	blt	21c24 <CTransportLayer::GetForeignIP(int) const+0x50>
   21be0:	e2804008 	add	r4, r0, #8
   21be4:	e1a00004 	mov	r0, r4
   21be8:	eb0039f2 	bl	303b8 <CPtrArray::GetCount() const>
   21bec:	e1500005 	cmp	r0, r5
   21bf0:	da000009 	ble	21c1c <CTransportLayer::GetForeignIP(int) const+0x48>
   21bf4:	e1a01005 	mov	r1, r5
   21bf8:	e1a00004 	mov	r0, r4
   21bfc:	eb003a0d 	bl	30438 <CPtrArray::operator[](unsigned int) const>
   21c00:	e3500000 	cmp	r0, #0
   21c04:	0a000004 	beq	21c1c <CTransportLayer::GetForeignIP(int) const+0x48>
   21c08:	e1a01005 	mov	r1, r5
   21c0c:	e1a00004 	mov	r0, r4
   21c10:	eb003a08 	bl	30438 <CPtrArray::operator[](unsigned int) const>
   21c14:	e8bd4070 	pop	{r4, r5, r6, lr}
   21c18:	ea000c0a 	b	24c48 <CNetConnection::GetForeignIP() const>
   21c1c:	e3a00000 	mov	r0, #0
   21c20:	e8bd8070 	pop	{r4, r5, r6, pc}
   21c24:	e3001c24 	movw	r1, #3108	; 0xc24
   21c28:	e3401004 	movt	r1, #4
   21c2c:	e3000c68 	movw	r0, #3176	; 0xc68
   21c30:	e3400004 	movt	r0, #4
   21c34:	e3002196 	movw	r2, #406	; 0x196
   21c38:	eb002b20 	bl	2c8c0 <assertion_failed>

00021c3c <CTransportLayer::~CTransportLayer()>:
   21c3c:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   21c40:	e92d4010 	push	{r4, lr}
   21c44:	e1a04000 	mov	r4, r0
   21c48:	e2800020 	add	r0, r0, #32
   21c4c:	f444078f 	vst1.32	{d16}, [r4]
   21c50:	eb0018ba 	bl	27f40 <CTCPRejector::~CTCPRejector()>
   21c54:	e2840008 	add	r0, r4, #8
   21c58:	eb0039cb 	bl	3038c <CPtrArray::~CPtrArray()>
   21c5c:	e1a00004 	mov	r0, r4
   21c60:	e8bd8010 	pop	{r4, pc}

00021c64 <CTransportLayer::Process()>:
   21c64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c68:	e1a09000 	mov	r9, r0
   21c6c:	e24dde67 	sub	sp, sp, #1648	; 0x670
   21c70:	e24dd004 	sub	sp, sp, #4
   21c74:	e28d0020 	add	r0, sp, #32
   21c78:	e28d7028 	add	r7, sp, #40	; 0x28
   21c7c:	eb001a26 	bl	2851c <CIPAddress::CIPAddress()>
   21c80:	e1a00007 	mov	r0, r7
   21c84:	eb001a24 	bl	2851c <CIPAddress::CIPAddress()>
   21c88:	e5990004 	ldr	r0, [r9, #4]
   21c8c:	e3500000 	cmp	r0, #0
   21c90:	0a0000b7 	beq	21f74 <CTransportLayer::Process()+0x310>
   21c94:	e2894008 	add	r4, r9, #8
   21c98:	e28da01c 	add	sl, sp, #28
   21c9c:	e28d3020 	add	r3, sp, #32
   21ca0:	e28d2018 	add	r2, sp, #24
   21ca4:	e28d1030 	add	r1, sp, #48	; 0x30
   21ca8:	e88d0480 	stm	sp, {r7, sl}
   21cac:	eb00023e 	bl	225ac <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   21cb0:	e3500000 	cmp	r0, #0
   21cb4:	0a000020 	beq	21d3c <CTransportLayer::Process()+0xd8>
   21cb8:	e3a05000 	mov	r5, #0
   21cbc:	ea000014 	b	21d14 <CTransportLayer::Process()+0xb0>
   21cc0:	e1a01005 	mov	r1, r5
   21cc4:	e1a00004 	mov	r0, r4
   21cc8:	eb0039bc 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21ccc:	e5903000 	ldr	r3, [r0]
   21cd0:	e3530000 	cmp	r3, #0
   21cd4:	0a00000d 	beq	21d10 <CTransportLayer::Process()+0xac>
   21cd8:	e1a01005 	mov	r1, r5
   21cdc:	e1a00004 	mov	r0, r4
   21ce0:	eb0039b6 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21ce4:	e5900000 	ldr	r0, [r0]
   21ce8:	e59de01c 	ldr	lr, [sp, #28]
   21cec:	e28d3020 	add	r3, sp, #32
   21cf0:	e59d2018 	ldr	r2, [sp, #24]
   21cf4:	e28d1030 	add	r1, sp, #48	; 0x30
   21cf8:	e590c000 	ldr	ip, [r0]
   21cfc:	e88d4080 	stm	sp, {r7, lr}
   21d00:	e59c6034 	ldr	r6, [ip, #52]	; 0x34
   21d04:	e12fff36 	blx	r6
   21d08:	e3500000 	cmp	r0, #0
   21d0c:	1a000004 	bne	21d24 <CTransportLayer::Process()+0xc0>
   21d10:	e2855001 	add	r5, r5, #1
   21d14:	e1a00004 	mov	r0, r4
   21d18:	eb0039a6 	bl	303b8 <CPtrArray::GetCount() const>
   21d1c:	e1500005 	cmp	r0, r5
   21d20:	8affffe6 	bhi	21cc0 <CTransportLayer::Process()+0x5c>
   21d24:	e1a00004 	mov	r0, r4
   21d28:	eb0039a2 	bl	303b8 <CPtrArray::GetCount() const>
   21d2c:	e1500005 	cmp	r0, r5
   21d30:	9a00006f 	bls	21ef4 <CTransportLayer::Process()+0x290>
   21d34:	e5990004 	ldr	r0, [r9, #4]
   21d38:	eaffffd7 	b	21c9c <CTransportLayer::Process()+0x38>
   21d3c:	e3018fe0 	movw	r8, #8160	; 0x1fe0
   21d40:	e3408002 	movt	r8, #2
   21d44:	e28db016 	add	fp, sp, #22
   21d48:	e5990004 	ldr	r0, [r9, #4]
   21d4c:	e28dc014 	add	ip, sp, #20
   21d50:	e1a03007 	mov	r3, r7
   21d54:	e28d2020 	add	r2, sp, #32
   21d58:	e28d1013 	add	r1, sp, #19
   21d5c:	e58da008 	str	sl, [sp, #8]
   21d60:	e58db004 	str	fp, [sp, #4]
   21d64:	e58dc000 	str	ip, [sp]
   21d68:	eb00025b 	bl	226dc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   21d6c:	e3500000 	cmp	r0, #0
   21d70:	0a00001f 	beq	21df4 <CTransportLayer::Process()+0x190>
   21d74:	e3a05000 	mov	r5, #0
   21d78:	ea000000 	b	21d80 <CTransportLayer::Process()+0x11c>
   21d7c:	e2855001 	add	r5, r5, #1
   21d80:	e1a00004 	mov	r0, r4
   21d84:	eb00398b 	bl	303b8 <CPtrArray::GetCount() const>
   21d88:	e1500005 	cmp	r0, r5
   21d8c:	9affffed 	bls	21d48 <CTransportLayer::Process()+0xe4>
   21d90:	e1a01005 	mov	r1, r5
   21d94:	e1a00004 	mov	r0, r4
   21d98:	eb003988 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21d9c:	e5903000 	ldr	r3, [r0]
   21da0:	e3530000 	cmp	r3, #0
   21da4:	0afffff4 	beq	21d7c <CTransportLayer::Process()+0x118>
   21da8:	e1a01005 	mov	r1, r5
   21dac:	e1a00004 	mov	r0, r4
   21db0:	eb003982 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21db4:	e5900000 	ldr	r0, [r0]
   21db8:	e5dd1013 	ldrb	r1, [sp, #19]
   21dbc:	e1dd21b4 	ldrh	r2, [sp, #20]
   21dc0:	e5903000 	ldr	r3, [r0]
   21dc4:	e59dc01c 	ldr	ip, [sp, #28]
   21dc8:	e5936038 	ldr	r6, [r3, #56]	; 0x38
   21dcc:	e1dd31b6 	ldrh	r3, [sp, #22]
   21dd0:	e1560008 	cmp	r6, r8
   21dd4:	0affffe8 	beq	21d7c <CTransportLayer::Process()+0x118>
   21dd8:	e88d100c 	stm	sp, {r2, r3, ip}
   21ddc:	e1a03007 	mov	r3, r7
   21de0:	e28d2020 	add	r2, sp, #32
   21de4:	e12fff36 	blx	r6
   21de8:	e3500000 	cmp	r0, #0
   21dec:	0affffe2 	beq	21d7c <CTransportLayer::Process()+0x118>
   21df0:	eaffffd4 	b	21d48 <CTransportLayer::Process()+0xe4>
   21df4:	e3018fd4 	movw	r8, #8148	; 0x1fd4
   21df8:	e3408002 	movt	r8, #2
   21dfc:	e301afdc 	movw	sl, #8156	; 0x1fdc
   21e00:	e340a002 	movt	sl, #2
   21e04:	e1a05000 	mov	r5, r0
   21e08:	e1a06000 	mov	r6, r0
   21e0c:	ea000016 	b	21e6c <CTransportLayer::Process()+0x208>
   21e10:	e1a01005 	mov	r1, r5
   21e14:	e1a00004 	mov	r0, r4
   21e18:	eb003968 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21e1c:	e5903000 	ldr	r3, [r0]
   21e20:	e3530000 	cmp	r3, #0
   21e24:	0a00000f 	beq	21e68 <CTransportLayer::Process()+0x204>
   21e28:	e1a01005 	mov	r1, r5
   21e2c:	e1a00004 	mov	r0, r4
   21e30:	eb003962 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21e34:	e5900000 	ldr	r0, [r0]
   21e38:	e5903000 	ldr	r3, [r0]
   21e3c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21e40:	e1530008 	cmp	r3, r8
   21e44:	1a000033 	bne	21f18 <CTransportLayer::Process()+0x2b4>
   21e48:	e1a01005 	mov	r1, r5
   21e4c:	e1a00004 	mov	r0, r4
   21e50:	eb00395a 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21e54:	e5900000 	ldr	r0, [r0]
   21e58:	e5903000 	ldr	r3, [r0]
   21e5c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   21e60:	e153000a 	cmp	r3, sl
   21e64:	1a00003c 	bne	21f5c <CTransportLayer::Process()+0x2f8>
   21e68:	e2855001 	add	r5, r5, #1
   21e6c:	e1a00004 	mov	r0, r4
   21e70:	eb003950 	bl	303b8 <CPtrArray::GetCount() const>
   21e74:	e1500005 	cmp	r0, r5
   21e78:	8affffe4 	bhi	21e10 <CTransportLayer::Process()+0x1ac>
   21e7c:	e599001c 	ldr	r0, [r9, #28]
   21e80:	e3500000 	cmp	r0, #0
   21e84:	1a000038 	bne	21f6c <CTransportLayer::Process()+0x308>
   21e88:	e1a00004 	mov	r0, r4
   21e8c:	eb003949 	bl	303b8 <CPtrArray::GetCount() const>
   21e90:	e3500000 	cmp	r0, #0
   21e94:	e2405001 	sub	r5, r0, #1
   21e98:	1a000005 	bne	21eb4 <CTransportLayer::Process()+0x250>
   21e9c:	ea00000a 	b	21ecc <CTransportLayer::Process()+0x268>
   21ea0:	e1a00004 	mov	r0, r4
   21ea4:	e2455001 	sub	r5, r5, #1
   21ea8:	eb0039c1 	bl	305b4 <CPtrArray::RemoveLast()>
   21eac:	e3750001 	cmn	r5, #1
   21eb0:	0a000005 	beq	21ecc <CTransportLayer::Process()+0x268>
   21eb4:	e1a01005 	mov	r1, r5
   21eb8:	e1a00004 	mov	r0, r4
   21ebc:	eb00393f 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21ec0:	e5903000 	ldr	r3, [r0]
   21ec4:	e3530000 	cmp	r3, #0
   21ec8:	0afffff4 	beq	21ea0 <CTransportLayer::Process()+0x23c>
   21ecc:	e599301c 	ldr	r3, [r9, #28]
   21ed0:	e3530000 	cmp	r3, #0
   21ed4:	1a000022 	bne	21f64 <CTransportLayer::Process()+0x300>
   21ed8:	e1a00007 	mov	r0, r7
   21edc:	eb0019b5 	bl	285b8 <CIPAddress::~CIPAddress()>
   21ee0:	e28d0020 	add	r0, sp, #32
   21ee4:	eb0019b3 	bl	285b8 <CIPAddress::~CIPAddress()>
   21ee8:	e28dde67 	add	sp, sp, #1648	; 0x670
   21eec:	e28dd004 	add	sp, sp, #4
   21ef0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ef4:	e59d301c 	ldr	r3, [sp, #28]
   21ef8:	e28d1030 	add	r1, sp, #48	; 0x30
   21efc:	e58d3004 	str	r3, [sp, #4]
   21f00:	e2890020 	add	r0, r9, #32
   21f04:	e59d2018 	ldr	r2, [sp, #24]
   21f08:	e28d3020 	add	r3, sp, #32
   21f0c:	e58d7000 	str	r7, [sp]
   21f10:	eb00185e 	bl	28090 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   21f14:	eaffff86 	b	21d34 <CTransportLayer::Process()+0xd0>
   21f18:	e12fff33 	blx	r3
   21f1c:	e3500000 	cmp	r0, #0
   21f20:	0affffc8 	beq	21e48 <CTransportLayer::Process()+0x1e4>
   21f24:	e1a01005 	mov	r1, r5
   21f28:	e1a00004 	mov	r0, r4
   21f2c:	eb003923 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21f30:	e5900000 	ldr	r0, [r0]
   21f34:	e3500000 	cmp	r0, #0
   21f38:	0a000002 	beq	21f48 <CTransportLayer::Process()+0x2e4>
   21f3c:	e5903000 	ldr	r3, [r0]
   21f40:	e5933004 	ldr	r3, [r3, #4]
   21f44:	e12fff33 	blx	r3
   21f48:	e1a01005 	mov	r1, r5
   21f4c:	e1a00004 	mov	r0, r4
   21f50:	eb00391a 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   21f54:	e5806000 	str	r6, [r0]
   21f58:	eaffffc2 	b	21e68 <CTransportLayer::Process()+0x204>
   21f5c:	e12fff33 	blx	r3
   21f60:	eaffffc0 	b	21e68 <CTransportLayer::Process()+0x204>
   21f64:	eb00598f 	bl	385a8 <LeaveCritical>
   21f68:	eaffffda 	b	21ed8 <CTransportLayer::Process()+0x274>
   21f6c:	eb005962 	bl	384fc <EnterCritical>
   21f70:	eaffffc4 	b	21e88 <CTransportLayer::Process()+0x224>
   21f74:	e3001c24 	movw	r1, #3108	; 0xc24
   21f78:	e3401004 	movt	r1, #4
   21f7c:	e3000c38 	movw	r0, #3128	; 0xc38
   21f80:	e3400004 	movt	r0, #4
   21f84:	e3a0203a 	mov	r2, #58	; 0x3a
   21f88:	eb002a4c 	bl	2c8c0 <assertion_failed>

00021f8c <CTCPRejector::Connect()>:
   21f8c:	e3e00000 	mvn	r0, #0
   21f90:	e12fff1e 	bx	lr

00021f94 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   21f94:	e3e00000 	mvn	r0, #0
   21f98:	e12fff1e 	bx	lr

00021f9c <CTCPRejector::Close()>:
   21f9c:	e3e00000 	mvn	r0, #0
   21fa0:	e12fff1e 	bx	lr

00021fa4 <CTCPRejector::Send(void const*, unsigned int, int)>:
   21fa4:	e3e00000 	mvn	r0, #0
   21fa8:	e12fff1e 	bx	lr

00021fac <CTCPRejector::Receive(void*, int)>:
   21fac:	e3e00000 	mvn	r0, #0
   21fb0:	e12fff1e 	bx	lr

00021fb4 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   21fb4:	e3e00000 	mvn	r0, #0
   21fb8:	e12fff1e 	bx	lr

00021fbc <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   21fbc:	e3e00000 	mvn	r0, #0
   21fc0:	e12fff1e 	bx	lr

00021fc4 <CTCPRejector::SetOptionBroadcast(bool)>:
   21fc4:	e3e00000 	mvn	r0, #0
   21fc8:	e12fff1e 	bx	lr

00021fcc <CTCPRejector::IsConnected() const>:
   21fcc:	e3a00000 	mov	r0, #0
   21fd0:	e12fff1e 	bx	lr

00021fd4 <CTCPRejector::IsTerminated() const>:
   21fd4:	e3a00000 	mov	r0, #0
   21fd8:	e12fff1e 	bx	lr

00021fdc <CTCPRejector::Process()>:
   21fdc:	e12fff1e 	bx	lr

00021fe0 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   21fe0:	e3a00000 	mov	r0, #0
   21fe4:	e12fff1e 	bx	lr

00021fe8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   21fe8:	e92d4010 	push	{r4, lr}
   21fec:	e1a04000 	mov	r4, r0
   21ff0:	e3a03000 	mov	r3, #0
   21ff4:	e280000c 	add	r0, r0, #12
   21ff8:	e884000e 	stm	r4, {r1, r2, r3}
   21ffc:	eb001ab5 	bl	28ad8 <CNetQueue::CNetQueue()>
   22000:	e2840018 	add	r0, r4, #24
   22004:	eb001ab3 	bl	28ad8 <CNetQueue::CNetQueue()>
   22008:	e2840024 	add	r0, r4, #36	; 0x24
   2200c:	eb001ab1 	bl	28ad8 <CNetQueue::CNetQueue()>
   22010:	e2840030 	add	r0, r4, #48	; 0x30
   22014:	eb000a15 	bl	24870 <CRouteCache::CRouteCache()>
   22018:	e5943000 	ldr	r3, [r4]
   2201c:	e3530000 	cmp	r3, #0
   22020:	0a000004 	beq	22038 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   22024:	e5943004 	ldr	r3, [r4, #4]
   22028:	e3530000 	cmp	r3, #0
   2202c:	0a000007 	beq	22050 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x68>
   22030:	e1a00004 	mov	r0, r4
   22034:	e8bd8010 	pop	{r4, pc}
   22038:	e3001c7c 	movw	r1, #3196	; 0xc7c
   2203c:	e3401004 	movt	r1, #4
   22040:	e3000b08 	movw	r0, #2824	; 0xb08
   22044:	e3400004 	movt	r0, #4
   22048:	e3a0201f 	mov	r2, #31
   2204c:	eb002a1b 	bl	2c8c0 <assertion_failed>
   22050:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22054:	e3401004 	movt	r1, #4
   22058:	e3000c90 	movw	r0, #3216	; 0xc90
   2205c:	e3400004 	movt	r0, #4
   22060:	e3a02020 	mov	r2, #32
   22064:	eb002a15 	bl	2c8c0 <assertion_failed>

00022068 <CNetworkLayer::~CNetworkLayer()>:
   22068:	e92d4070 	push	{r4, r5, r6, lr}
   2206c:	e1a04000 	mov	r4, r0
   22070:	e5905008 	ldr	r5, [r0, #8]
   22074:	e3550000 	cmp	r5, #0
   22078:	0a000004 	beq	22090 <CNetworkLayer::~CNetworkLayer()+0x28>
   2207c:	e1a00005 	mov	r0, r5
   22080:	eb00085a 	bl	241f0 <CICMPHandler::~CICMPHandler()>
   22084:	e3a01010 	mov	r1, #16
   22088:	e1a00005 	mov	r0, r5
   2208c:	eb00531a 	bl	36cfc <operator delete(void*, unsigned int)>
   22090:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   22094:	e3a03000 	mov	r3, #0
   22098:	e2840030 	add	r0, r4, #48	; 0x30
   2209c:	e5843008 	str	r3, [r4, #8]
   220a0:	f444078f 	vst1.32	{d16}, [r4]
   220a4:	eb000a0c 	bl	248dc <CRouteCache::~CRouteCache()>
   220a8:	e2840024 	add	r0, r4, #36	; 0x24
   220ac:	eb001ac2 	bl	28bbc <CNetQueue::~CNetQueue()>
   220b0:	e2840018 	add	r0, r4, #24
   220b4:	eb001ac0 	bl	28bbc <CNetQueue::~CNetQueue()>
   220b8:	e284000c 	add	r0, r4, #12
   220bc:	eb001abe 	bl	28bbc <CNetQueue::~CNetQueue()>
   220c0:	e1a00004 	mov	r0, r4
   220c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000220c8 <CNetworkLayer::Initialize()>:
   220c8:	e5903008 	ldr	r3, [r0, #8]
   220cc:	e92d4030 	push	{r4, r5, lr}
   220d0:	e3530000 	cmp	r3, #0
   220d4:	e24dd00c 	sub	sp, sp, #12
   220d8:	1a00000d 	bne	22114 <CNetworkLayer::Initialize()+0x4c>
   220dc:	e1a04000 	mov	r4, r0
   220e0:	e3a00010 	mov	r0, #16
   220e4:	eb0052ec 	bl	36c9c <operator new(unsigned int)>
   220e8:	e1a03004 	mov	r3, r4
   220ec:	e1a02004 	mov	r2, r4
   220f0:	e1a05000 	mov	r5, r0
   220f4:	e4931024 	ldr	r1, [r3], #36	; 0x24
   220f8:	e58d3000 	str	r3, [sp]
   220fc:	e2843018 	add	r3, r4, #24
   22100:	eb000810 	bl	24148 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   22104:	e3a00001 	mov	r0, #1
   22108:	e5845008 	str	r5, [r4, #8]
   2210c:	e28dd00c 	add	sp, sp, #12
   22110:	e8bd8030 	pop	{r4, r5, pc}
   22114:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22118:	e3401004 	movt	r1, #4
   2211c:	e3000ca4 	movw	r0, #3236	; 0xca4
   22120:	e3400004 	movt	r0, #4
   22124:	e3a0202e 	mov	r2, #46	; 0x2e
   22128:	eb0029e4 	bl	2c8c0 <assertion_failed>

0002212c <CNetworkLayer::Process()>:
   2212c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22130:	e1a05000 	mov	r5, r0
   22134:	e5900000 	ldr	r0, [r0]
   22138:	e24dde65 	sub	sp, sp, #1616	; 0x650
   2213c:	e24dd004 	sub	sp, sp, #4
   22140:	e3500000 	cmp	r0, #0
   22144:	0a00006e 	beq	22304 <CNetworkLayer::Process()+0x1d8>
   22148:	eb0018d7 	bl	284ac <CNetConfig::GetIPAddress() const>
   2214c:	e2506000 	subs	r6, r0, #0
   22150:	0a000071 	beq	2231c <CNetworkLayer::Process()+0x1f0>
   22154:	e5950004 	ldr	r0, [r5, #4]
   22158:	e3500000 	cmp	r0, #0
   2215c:	1a000015 	bne	221b8 <CNetworkLayer::Process()+0x8c>
   22160:	ea000073 	b	22334 <CNetworkLayer::Process()+0x208>
   22164:	e59d3004 	ldr	r3, [sp, #4]
   22168:	e3530014 	cmp	r3, #20
   2216c:	9a000010 	bls	221b4 <CNetworkLayer::Process()+0x88>
   22170:	e5dd1010 	ldrb	r1, [sp, #16]
   22174:	e201100f 	and	r1, r1, #15
   22178:	e2412005 	sub	r2, r1, #5
   2217c:	e3520001 	cmp	r2, #1
   22180:	8a00000b 	bhi	221b4 <CNetworkLayer::Process()+0x88>
   22184:	e1a04101 	lsl	r4, r1, #2
   22188:	e1530004 	cmp	r3, r4
   2218c:	9a000008 	bls	221b4 <CNetworkLayer::Process()+0x88>
   22190:	e1a01004 	mov	r1, r4
   22194:	e28d0010 	add	r0, sp, #16
   22198:	eb001b9c 	bl	29010 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   2219c:	e3500000 	cmp	r0, #0
   221a0:	1a000003 	bne	221b4 <CNetworkLayer::Process()+0x88>
   221a4:	e5dd3010 	ldrb	r3, [sp, #16]
   221a8:	e1a03223 	lsr	r3, r3, #4
   221ac:	e3530004 	cmp	r3, #4
   221b0:	0a00000c 	beq	221e8 <CNetworkLayer::Process()+0xbc>
   221b4:	e5950004 	ldr	r0, [r5, #4]
   221b8:	e28d2004 	add	r2, sp, #4
   221bc:	e28d1010 	add	r1, sp, #16
   221c0:	eb000305 	bl	22ddc <CLinkLayer::Receive(void*, unsigned int*)>
   221c4:	e3500000 	cmp	r0, #0
   221c8:	1affffe5 	bne	22164 <CNetworkLayer::Process()+0x38>
   221cc:	e5950008 	ldr	r0, [r5, #8]
   221d0:	e3500000 	cmp	r0, #0
   221d4:	0a00005c 	beq	2234c <CNetworkLayer::Process()+0x220>
   221d8:	eb000842 	bl	242e8 <CICMPHandler::Process()>
   221dc:	e28dde65 	add	sp, sp, #1616	; 0x650
   221e0:	e28dd004 	add	sp, sp, #4
   221e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   221e8:	e28d1020 	add	r1, sp, #32
   221ec:	e28d0008 	add	r0, sp, #8
   221f0:	eb0018d0 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   221f4:	e1a00006 	mov	r0, r6
   221f8:	eb0019c9 	bl	28924 <CIPAddress::IsNull() const>
   221fc:	e3500000 	cmp	r0, #0
   22200:	1a000014 	bne	22258 <CNetworkLayer::Process()+0x12c>
   22204:	e28d1008 	add	r1, sp, #8
   22208:	e1a00006 	mov	r0, r6
   2220c:	eb001903 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   22210:	e3500000 	cmp	r0, #0
   22214:	1a00002f 	bne	222d8 <CNetworkLayer::Process()+0x1ac>
   22218:	e1dd31b6 	ldrh	r3, [sp, #22]
   2221c:	e3130020 	tst	r3, #32
   22220:	1a000009 	bne	2224c <CNetworkLayer::Process()+0x120>
   22224:	e6bf3fb3 	rev16	r3, r3
   22228:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   2222c:	e3530000 	cmp	r3, #0
   22230:	1a000005 	bne	2224c <CNetworkLayer::Process()+0x120>
   22234:	e1dd31b2 	ldrh	r3, [sp, #18]
   22238:	e59d2004 	ldr	r2, [sp, #4]
   2223c:	e6bf3fb3 	rev16	r3, r3
   22240:	e6ff3073 	uxth	r3, r3
   22244:	e1520003 	cmp	r2, r3
   22248:	2a000007 	bcs	2226c <CNetworkLayer::Process()+0x140>
   2224c:	e28d0008 	add	r0, sp, #8
   22250:	eb0018d8 	bl	285b8 <CIPAddress::~CIPAddress()>
   22254:	eaffffd6 	b	221b4 <CNetworkLayer::Process()+0x88>
   22258:	e28d0008 	add	r0, sp, #8
   2225c:	eb0019be 	bl	2895c <CIPAddress::IsBroadcast() const>
   22260:	e3500000 	cmp	r0, #0
   22264:	1affffeb 	bne	22218 <CNetworkLayer::Process()+0xec>
   22268:	eafffff7 	b	2224c <CNetworkLayer::Process()+0x120>
   2226c:	e3a00009 	mov	r0, #9
   22270:	e58d3004 	str	r3, [sp, #4]
   22274:	eb005288 	bl	36c9c <operator new(unsigned int)>
   22278:	e5dd3019 	ldrb	r3, [sp, #25]
   2227c:	e1a07000 	mov	r7, r0
   22280:	e28d101c 	add	r1, sp, #28
   22284:	e4c03001 	strb	r3, [r0], #1
   22288:	e3a02004 	mov	r2, #4
   2228c:	eb005079 	bl	36478 <memcpy>
   22290:	e28d1020 	add	r1, sp, #32
   22294:	e3a02004 	mov	r2, #4
   22298:	e2870005 	add	r0, r7, #5
   2229c:	eb005075 	bl	36478 <memcpy>
   222a0:	e5dd3019 	ldrb	r3, [sp, #25]
   222a4:	e59d2004 	ldr	r2, [sp, #4]
   222a8:	e28d1010 	add	r1, sp, #16
   222ac:	e3530001 	cmp	r3, #1
   222b0:	e0811004 	add	r1, r1, r4
   222b4:	e0422004 	sub	r2, r2, r4
   222b8:	02850018 	addeq	r0, r5, #24
   222bc:	1285000c 	addne	r0, r5, #12
   222c0:	e1a03007 	mov	r3, r7
   222c4:	e58d2004 	str	r2, [sp, #4]
   222c8:	eb001a40 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   222cc:	e28d0008 	add	r0, sp, #8
   222d0:	eb0018b8 	bl	285b8 <CIPAddress::~CIPAddress()>
   222d4:	eaffffb6 	b	221b4 <CNetworkLayer::Process()+0x88>
   222d8:	e28d0008 	add	r0, sp, #8
   222dc:	eb00199e 	bl	2895c <CIPAddress::IsBroadcast() const>
   222e0:	e3500000 	cmp	r0, #0
   222e4:	1affffcb 	bne	22218 <CNetworkLayer::Process()+0xec>
   222e8:	e5950000 	ldr	r0, [r5]
   222ec:	eb001878 	bl	284d4 <CNetConfig::GetBroadcastAddress() const>
   222f0:	e28d1008 	add	r1, sp, #8
   222f4:	eb0018c9 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   222f8:	e3500000 	cmp	r0, #0
   222fc:	0affffc5 	beq	22218 <CNetworkLayer::Process()+0xec>
   22300:	eaffffd1 	b	2224c <CNetworkLayer::Process()+0x120>
   22304:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22308:	e3401004 	movt	r1, #4
   2230c:	e3000b08 	movw	r0, #2824	; 0xb08
   22310:	e3400004 	movt	r0, #4
   22314:	e3a02037 	mov	r2, #55	; 0x37
   22318:	eb002968 	bl	2c8c0 <assertion_failed>
   2231c:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22320:	e3401004 	movt	r1, #4
   22324:	e3000cb8 	movw	r0, #3256	; 0xcb8
   22328:	e3400004 	movt	r0, #4
   2232c:	e3a02039 	mov	r2, #57	; 0x39
   22330:	eb002962 	bl	2c8c0 <assertion_failed>
   22334:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22338:	e3401004 	movt	r1, #4
   2233c:	e3000c90 	movw	r0, #3216	; 0xc90
   22340:	e3400004 	movt	r0, #4
   22344:	e3a0203d 	mov	r2, #61	; 0x3d
   22348:	eb00295c 	bl	2c8c0 <assertion_failed>
   2234c:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22350:	e3401004 	movt	r1, #4
   22354:	e3000ccc 	movw	r0, #3276	; 0xccc
   22358:	e3400004 	movt	r0, #4
   2235c:	e3a0208a 	mov	r2, #138	; 0x8a
   22360:	eb002956 	bl	2c8c0 <assertion_failed>

00022364 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   22364:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22368:	e243c001 	sub	ip, r3, #1
   2236c:	e1a04003 	mov	r4, r3
   22370:	e28db020 	add	fp, sp, #32
   22374:	e300362b 	movw	r3, #1579	; 0x62b
   22378:	e24dd014 	sub	sp, sp, #20
   2237c:	e15c0003 	cmp	ip, r3
   22380:	8a00006d 	bhi	2253c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1d8>
   22384:	e284301b 	add	r3, r4, #27
   22388:	e1a06000 	mov	r6, r0
   2238c:	e3c33007 	bic	r3, r3, #7
   22390:	e5900000 	ldr	r0, [r0]
   22394:	e04dd003 	sub	sp, sp, r3
   22398:	e2848014 	add	r8, r4, #20
   2239c:	e59b3004 	ldr	r3, [fp, #4]
   223a0:	e3a0a000 	mov	sl, #0
   223a4:	e1a07002 	mov	r7, r2
   223a8:	e3500000 	cmp	r0, #0
   223ac:	e3a02040 	mov	r2, #64	; 0x40
   223b0:	e50bd030 	str	sp, [fp, #-48]	; 0xffffffd0
   223b4:	e5cd2006 	strb	r2, [sp, #6]
   223b8:	e5cd2008 	strb	r2, [sp, #8]
   223bc:	e3a02045 	mov	r2, #69	; 0x45
   223c0:	e5cd3009 	strb	r3, [sp, #9]
   223c4:	e1cd20b0 	strh	r2, [sp]
   223c8:	e6bf2fb8 	rev16	r2, r8
   223cc:	e5cda004 	strb	sl, [sp, #4]
   223d0:	e5cda005 	strb	sl, [sp, #5]
   223d4:	e5cda007 	strb	sl, [sp, #7]
   223d8:	e1cd20b2 	strh	r2, [sp, #2]
   223dc:	0a000044 	beq	224f4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x190>
   223e0:	e1a05001 	mov	r5, r1
   223e4:	eb001830 	bl	284ac <CNetConfig::GetIPAddress() const>
   223e8:	e2509000 	subs	r9, r0, #0
   223ec:	0a000046 	beq	2250c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a8>
   223f0:	e28d100c 	add	r1, sp, #12
   223f4:	eb001932 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   223f8:	e28d1010 	add	r1, sp, #16
   223fc:	e1a00005 	mov	r0, r5
   22400:	eb00192f 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   22404:	e3a01014 	mov	r1, #20
   22408:	e1a0000d 	mov	r0, sp
   2240c:	e5cda00a 	strb	sl, [sp, #10]
   22410:	e5cda00b 	strb	sl, [sp, #11]
   22414:	eb001afd 	bl	29010 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   22418:	e3570000 	cmp	r7, #0
   2241c:	e1cd00ba 	strh	r0, [sp, #10]
   22420:	0a000022 	beq	224b0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x14c>
   22424:	e1a02004 	mov	r2, r4
   22428:	e1a01007 	mov	r1, r7
   2242c:	e28d0014 	add	r0, sp, #20
   22430:	eb005010 	bl	36478 <memcpy>
   22434:	e1a00009 	mov	r0, r9
   22438:	eb001939 	bl	28924 <CIPAddress::IsNull() const>
   2243c:	e3500000 	cmp	r0, #0
   22440:	0a000003 	beq	22454 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xf0>
   22444:	e1a00005 	mov	r0, r5
   22448:	eb001943 	bl	2895c <CIPAddress::IsBroadcast() const>
   2244c:	e2501000 	subs	r1, r0, #0
   22450:	0a000033 	beq	22524 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c0>
   22454:	e24b002c 	sub	r0, fp, #44	; 0x2c
   22458:	eb00182f 	bl	2851c <CIPAddress::CIPAddress()>
   2245c:	e5960000 	ldr	r0, [r6]
   22460:	eb001815 	bl	284bc <CNetConfig::GetNetMask() const>
   22464:	e1a01005 	mov	r1, r5
   22468:	e1a02000 	mov	r2, r0
   2246c:	e1a00009 	mov	r0, r9
   22470:	eb00196a 	bl	28a20 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   22474:	e2504000 	subs	r4, r0, #0
   22478:	0a000012 	beq	224c8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x164>
   2247c:	e5960004 	ldr	r0, [r6, #4]
   22480:	e3500000 	cmp	r0, #0
   22484:	0a00003c 	beq	2257c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x218>
   22488:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   2248c:	e1a03008 	mov	r3, r8
   22490:	e1a01005 	mov	r1, r5
   22494:	eb0001e3 	bl	22c28 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   22498:	e1a04000 	mov	r4, r0
   2249c:	e24b002c 	sub	r0, fp, #44	; 0x2c
   224a0:	eb001844 	bl	285b8 <CIPAddress::~CIPAddress()>
   224a4:	e1a00004 	mov	r0, r4
   224a8:	e24bd020 	sub	sp, fp, #32
   224ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224b0:	e3001c7c 	movw	r1, #3196	; 0xc7c
   224b4:	e3401004 	movt	r1, #4
   224b8:	e3000ce0 	movw	r0, #3296	; 0xce0
   224bc:	e3400004 	movt	r0, #4
   224c0:	e3a020ad 	mov	r2, #173	; 0xad
   224c4:	eb0028fd 	bl	2c8c0 <assertion_failed>
   224c8:	e1a00005 	mov	r0, r5
   224cc:	eb0018f0 	bl	28894 <CIPAddress::Get() const>
   224d0:	e1a01000 	mov	r1, r0
   224d4:	e2860030 	add	r0, r6, #48	; 0x30
   224d8:	eb000941 	bl	249e4 <CRouteCache::GetRoute(unsigned char const*) const>
   224dc:	e2501000 	subs	r1, r0, #0
   224e0:	0a000017 	beq	22544 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1e0>
   224e4:	e24b002c 	sub	r0, fp, #44	; 0x2c
   224e8:	e24b502c 	sub	r5, fp, #44	; 0x2c
   224ec:	eb0018b8 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   224f0:	eaffffe1 	b	2247c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x118>
   224f4:	e3001c7c 	movw	r1, #3196	; 0xc7c
   224f8:	e3401004 	movt	r1, #4
   224fc:	e3000b08 	movw	r0, #2824	; 0xb08
   22500:	e3400004 	movt	r0, #4
   22504:	e3a020a2 	mov	r2, #162	; 0xa2
   22508:	eb0028ec 	bl	2c8c0 <assertion_failed>
   2250c:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22510:	e3401004 	movt	r1, #4
   22514:	e3000cb8 	movw	r0, #3256	; 0xcb8
   22518:	e3400004 	movt	r0, #4
   2251c:	e3a020a4 	mov	r2, #164	; 0xa4
   22520:	eb0028e6 	bl	2c8c0 <assertion_failed>
   22524:	e5960008 	ldr	r0, [r6, #8]
   22528:	e3500000 	cmp	r0, #0
   2252c:	0a000018 	beq	22594 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x230>
   22530:	e1a03008 	mov	r3, r8
   22534:	e1a0200d 	mov	r2, sp
   22538:	eb000860 	bl	246c0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   2253c:	e3a04000 	mov	r4, #0
   22540:	eaffffd7 	b	224a4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x140>
   22544:	e5960000 	ldr	r0, [r6]
   22548:	eb0017dd 	bl	284c4 <CNetConfig::GetDefaultGateway() const>
   2254c:	e1a05000 	mov	r5, r0
   22550:	eb0018f3 	bl	28924 <CIPAddress::IsNull() const>
   22554:	e3500000 	cmp	r0, #0
   22558:	0affffc7 	beq	2247c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x118>
   2255c:	e5960008 	ldr	r0, [r6, #8]
   22560:	e3500000 	cmp	r0, #0
   22564:	0a00000a 	beq	22594 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x230>
   22568:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   2256c:	e1a03008 	mov	r3, r8
   22570:	e1a01004 	mov	r1, r4
   22574:	eb000851 	bl	246c0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   22578:	eaffffc7 	b	2249c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x138>
   2257c:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22580:	e3401004 	movt	r1, #4
   22584:	e3000c90 	movw	r0, #3216	; 0xc90
   22588:	e3400004 	movt	r0, #4
   2258c:	e3a020d0 	mov	r2, #208	; 0xd0
   22590:	eb0028ca 	bl	2c8c0 <assertion_failed>
   22594:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22598:	e3401004 	movt	r1, #4
   2259c:	e3000ccc 	movw	r0, #3276	; 0xccc
   225a0:	e3400004 	movt	r0, #4
   225a4:	e300212b 	movw	r2, #299	; 0x12b
   225a8:	eb0028c4 	bl	2c8c0 <assertion_failed>

000225ac <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   225ac:	e92d4030 	push	{r4, r5, lr}
   225b0:	e3510000 	cmp	r1, #0
   225b4:	e24dd00c 	sub	sp, sp, #12
   225b8:	0a000029 	beq	22664 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb8>
   225bc:	e1a04002 	mov	r4, r2
   225c0:	e3520000 	cmp	r2, #0
   225c4:	0a00002c 	beq	2267c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   225c8:	e28d2004 	add	r2, sp, #4
   225cc:	e280000c 	add	r0, r0, #12
   225d0:	e1a05003 	mov	r5, r3
   225d4:	eb0019c7 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   225d8:	e3500000 	cmp	r0, #0
   225dc:	e5840000 	str	r0, [r4]
   225e0:	0a000017 	beq	22644 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   225e4:	e59d4004 	ldr	r4, [sp, #4]
   225e8:	e3540000 	cmp	r4, #0
   225ec:	0a000016 	beq	2264c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   225f0:	e59d301c 	ldr	r3, [sp, #28]
   225f4:	e3530000 	cmp	r3, #0
   225f8:	0a000025 	beq	22694 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe8>
   225fc:	e59d201c 	ldr	r2, [sp, #28]
   22600:	e3550000 	cmp	r5, #0
   22604:	e5d43000 	ldrb	r3, [r4]
   22608:	e5823000 	str	r3, [r2]
   2260c:	0a000026 	beq	226ac <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   22610:	e2841001 	add	r1, r4, #1
   22614:	e1a00005 	mov	r0, r5
   22618:	eb00186d 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   2261c:	e59d3018 	ldr	r3, [sp, #24]
   22620:	e3530000 	cmp	r3, #0
   22624:	0a000026 	beq	226c4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   22628:	e59d0018 	ldr	r0, [sp, #24]
   2262c:	e2841005 	add	r1, r4, #5
   22630:	eb001867 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   22634:	e1a00004 	mov	r0, r4
   22638:	e3a01009 	mov	r1, #9
   2263c:	eb0051ae 	bl	36cfc <operator delete(void*, unsigned int)>
   22640:	e3a00001 	mov	r0, #1
   22644:	e28dd00c 	add	sp, sp, #12
   22648:	e8bd8030 	pop	{r4, r5, pc}
   2264c:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22650:	e3401004 	movt	r1, #4
   22654:	e30c0b74 	movw	r0, #52084	; 0xcb74
   22658:	e3400003 	movt	r0, #3
   2265c:	e3a020e2 	mov	r2, #226	; 0xe2
   22660:	eb002896 	bl	2c8c0 <assertion_failed>
   22664:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22668:	e3401004 	movt	r1, #4
   2266c:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   22670:	e3400003 	movt	r0, #3
   22674:	e3a020d9 	mov	r2, #217	; 0xd9
   22678:	eb002890 	bl	2c8c0 <assertion_failed>
   2267c:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22680:	e3401004 	movt	r1, #4
   22684:	e30d0bac 	movw	r0, #56236	; 0xdbac
   22688:	e3400003 	movt	r0, #3
   2268c:	e3a020da 	mov	r2, #218	; 0xda
   22690:	eb00288a 	bl	2c8c0 <assertion_failed>
   22694:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22698:	e3401004 	movt	r1, #4
   2269c:	e3000cf0 	movw	r0, #3312	; 0xcf0
   226a0:	e3400004 	movt	r0, #4
   226a4:	e3a020e4 	mov	r2, #228	; 0xe4
   226a8:	eb002884 	bl	2c8c0 <assertion_failed>
   226ac:	e3001c7c 	movw	r1, #3196	; 0xc7c
   226b0:	e3401004 	movt	r1, #4
   226b4:	e3000d00 	movw	r0, #3328	; 0xd00
   226b8:	e3400004 	movt	r0, #4
   226bc:	e3a020e7 	mov	r2, #231	; 0xe7
   226c0:	eb00287e 	bl	2c8c0 <assertion_failed>
   226c4:	e3001c7c 	movw	r1, #3196	; 0xc7c
   226c8:	e3401004 	movt	r1, #4
   226cc:	e3000d10 	movw	r0, #3344	; 0xd10
   226d0:	e3400004 	movt	r0, #4
   226d4:	e3a020ea 	mov	r2, #234	; 0xea
   226d8:	eb002878 	bl	2c8c0 <assertion_failed>

000226dc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   226dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   226e0:	e2800024 	add	r0, r0, #36	; 0x24
   226e4:	e1a04001 	mov	r4, r1
   226e8:	e24dd014 	sub	sp, sp, #20
   226ec:	e1a07002 	mov	r7, r2
   226f0:	e1a0100d 	mov	r1, sp
   226f4:	e3a02000 	mov	r2, #0
   226f8:	e1a05003 	mov	r5, r3
   226fc:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
   22700:	eb00197c 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   22704:	e3500000 	cmp	r0, #0
   22708:	0a000020 	beq	22790 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb4>
   2270c:	e350000e 	cmp	r0, #14
   22710:	1a000026 	bne	227b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xd4>
   22714:	e3540000 	cmp	r4, #0
   22718:	0a00002a 	beq	227c8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xec>
   2271c:	e5dd3000 	ldrb	r3, [sp]
   22720:	e3560000 	cmp	r6, #0
   22724:	e5c43000 	strb	r3, [r4]
   22728:	0a00001a 	beq	22798 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xbc>
   2272c:	e5dd3001 	ldrb	r3, [sp, #1]
   22730:	e3570000 	cmp	r7, #0
   22734:	e5863000 	str	r3, [r6]
   22738:	0a000028 	beq	227e0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x104>
   2273c:	e28d1002 	add	r1, sp, #2
   22740:	e1a00007 	mov	r0, r7
   22744:	eb001822 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   22748:	e3550000 	cmp	r5, #0
   2274c:	0a000029 	beq	227f8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x11c>
   22750:	e28d1006 	add	r1, sp, #6
   22754:	e1a00005 	mov	r0, r5
   22758:	eb00181d 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   2275c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   22760:	e3530000 	cmp	r3, #0
   22764:	0a000029 	beq	22810 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   22768:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   2276c:	e1dd30ba 	ldrh	r3, [sp, #10]
   22770:	e3520000 	cmp	r2, #0
   22774:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   22778:	e1c230b0 	strh	r3, [r2]
   2277c:	0a000029 	beq	22828 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   22780:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   22784:	e3a00001 	mov	r0, #1
   22788:	e1dd30bc 	ldrh	r3, [sp, #12]
   2278c:	e1c230b0 	strh	r3, [r2]
   22790:	e28dd014 	add	sp, sp, #20
   22794:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22798:	e3001c7c 	movw	r1, #3196	; 0xc7c
   2279c:	e3401004 	movt	r1, #4
   227a0:	e3000cf0 	movw	r0, #3312	; 0xcf0
   227a4:	e3400004 	movt	r0, #4
   227a8:	e3002103 	movw	r2, #259	; 0x103
   227ac:	eb002843 	bl	2c8c0 <assertion_failed>
   227b0:	e3001c7c 	movw	r1, #3196	; 0xc7c
   227b4:	e3401004 	movt	r1, #4
   227b8:	e3000d20 	movw	r0, #3360	; 0xd20
   227bc:	e3400004 	movt	r0, #4
   227c0:	e3a020fe 	mov	r2, #254	; 0xfe
   227c4:	eb00283d 	bl	2c8c0 <assertion_failed>
   227c8:	e3001c7c 	movw	r1, #3196	; 0xc7c
   227cc:	e3401004 	movt	r1, #4
   227d0:	e3000d40 	movw	r0, #3392	; 0xd40
   227d4:	e3400004 	movt	r0, #4
   227d8:	e3a02c01 	mov	r2, #256	; 0x100
   227dc:	eb002837 	bl	2c8c0 <assertion_failed>
   227e0:	e3001c7c 	movw	r1, #3196	; 0xc7c
   227e4:	e3401004 	movt	r1, #4
   227e8:	e3000d00 	movw	r0, #3328	; 0xd00
   227ec:	e3400004 	movt	r0, #4
   227f0:	e3002106 	movw	r2, #262	; 0x106
   227f4:	eb002831 	bl	2c8c0 <assertion_failed>
   227f8:	e3001c7c 	movw	r1, #3196	; 0xc7c
   227fc:	e3401004 	movt	r1, #4
   22800:	e3000d10 	movw	r0, #3344	; 0xd10
   22804:	e3400004 	movt	r0, #4
   22808:	e3002109 	movw	r2, #265	; 0x109
   2280c:	eb00282b 	bl	2c8c0 <assertion_failed>
   22810:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22814:	e3401004 	movt	r1, #4
   22818:	e3000d4c 	movw	r0, #3404	; 0xd4c
   2281c:	e3400004 	movt	r0, #4
   22820:	e3a02f43 	mov	r2, #268	; 0x10c
   22824:	eb002825 	bl	2c8c0 <assertion_failed>
   22828:	e3001c7c 	movw	r1, #3196	; 0xc7c
   2282c:	e3401004 	movt	r1, #4
   22830:	e3000d5c 	movw	r0, #3420	; 0xd5c
   22834:	e3400004 	movt	r0, #4
   22838:	e300210f 	movw	r2, #271	; 0x10f
   2283c:	eb00281f 	bl	2c8c0 <assertion_failed>

00022840 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   22840:	e2800030 	add	r0, r0, #48	; 0x30
   22844:	ea00082b 	b	248f8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

00022848 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   22848:	e92d4010 	push	{r4, lr}
   2284c:	e1a04000 	mov	r4, r0
   22850:	e2800030 	add	r0, r0, #48	; 0x30
   22854:	eb000862 	bl	249e4 <CRouteCache::GetRoute(unsigned char const*) const>
   22858:	e3500000 	cmp	r0, #0
   2285c:	18bd8010 	popne	{r4, pc}
   22860:	e5940000 	ldr	r0, [r4]
   22864:	e3500000 	cmp	r0, #0
   22868:	0a000004 	beq	22880 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   2286c:	eb001714 	bl	284c4 <CNetConfig::GetDefaultGateway() const>
   22870:	e3500000 	cmp	r0, #0
   22874:	0a000007 	beq	22898 <CNetworkLayer::GetGateway(unsigned char const*) const+0x50>
   22878:	e8bd4010 	pop	{r4, lr}
   2287c:	ea001804 	b	28894 <CIPAddress::Get() const>
   22880:	e3001c7c 	movw	r1, #3196	; 0xc7c
   22884:	e3401004 	movt	r1, #4
   22888:	e3000b08 	movw	r0, #2824	; 0xb08
   2288c:	e3400004 	movt	r0, #4
   22890:	e3002122 	movw	r2, #290	; 0x122
   22894:	eb002809 	bl	2c8c0 <assertion_failed>
   22898:	e3001c7c 	movw	r1, #3196	; 0xc7c
   2289c:	e3401004 	movt	r1, #4
   228a0:	e3000d70 	movw	r0, #3440	; 0xd70
   228a4:	e3400004 	movt	r0, #4
   228a8:	e3a02f49 	mov	r2, #292	; 0x124
   228ac:	eb002803 	bl	2c8c0 <assertion_failed>

000228b0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   228b0:	e5900008 	ldr	r0, [r0, #8]
   228b4:	e3500000 	cmp	r0, #0
   228b8:	0a000000 	beq	228c0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   228bc:	ea00077f 	b	246c0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   228c0:	e3001c7c 	movw	r1, #3196	; 0xc7c
   228c4:	e3401004 	movt	r1, #4
   228c8:	e3000ccc 	movw	r0, #3276	; 0xccc
   228cc:	e3400004 	movt	r0, #4
   228d0:	e92d4010 	push	{r4, lr}
   228d4:	e300212b 	movw	r2, #299	; 0x12b
   228d8:	eb0027f8 	bl	2c8c0 <assertion_failed>

000228dc <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   228dc:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   228e0:	e2803008 	add	r3, r0, #8
   228e4:	e92d4010 	push	{r4, lr}
   228e8:	e1a04000 	mov	r4, r0
   228ec:	e2800010 	add	r0, r0, #16
   228f0:	e8840006 	stm	r4, {r1, r2}
   228f4:	f443078f 	vst1.32	{d16}, [r3]
   228f8:	eb001876 	bl	28ad8 <CNetQueue::CNetQueue()>
   228fc:	e284001c 	add	r0, r4, #28
   22900:	eb001874 	bl	28ad8 <CNetQueue::CNetQueue()>
   22904:	e2840028 	add	r0, r4, #40	; 0x28
   22908:	eb001872 	bl	28ad8 <CNetQueue::CNetQueue()>
   2290c:	e5943000 	ldr	r3, [r4]
   22910:	e3a02000 	mov	r2, #0
   22914:	e1c423b4 	strh	r2, [r4, #52]	; 0x34
   22918:	e1530002 	cmp	r3, r2
   2291c:	0a000004 	beq	22934 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x58>
   22920:	e5943004 	ldr	r3, [r4, #4]
   22924:	e3530000 	cmp	r3, #0
   22928:	0a000007 	beq	2294c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   2292c:	e1a00004 	mov	r0, r4
   22930:	e8bd8010 	pop	{r4, pc}
   22934:	e3001d88 	movw	r1, #3464	; 0xd88
   22938:	e3401004 	movt	r1, #4
   2293c:	e3000b08 	movw	r0, #2824	; 0xb08
   22940:	e3400004 	movt	r0, #4
   22944:	e3a02025 	mov	r2, #37	; 0x25
   22948:	eb0027dc 	bl	2c8c0 <assertion_failed>
   2294c:	e3001d88 	movw	r1, #3464	; 0xd88
   22950:	e3401004 	movt	r1, #4
   22954:	e3000d98 	movw	r0, #3480	; 0xd98
   22958:	e3400004 	movt	r0, #4
   2295c:	e3a02026 	mov	r2, #38	; 0x26
   22960:	eb0027d6 	bl	2c8c0 <assertion_failed>

00022964 <CLinkLayer::~CLinkLayer()>:
   22964:	e92d4070 	push	{r4, r5, r6, lr}
   22968:	e1a04000 	mov	r4, r0
   2296c:	e590500c 	ldr	r5, [r0, #12]
   22970:	e3550000 	cmp	r5, #0
   22974:	0a000004 	beq	2298c <CLinkLayer::~CLinkLayer()+0x28>
   22978:	e1a00005 	mov	r0, r5
   2297c:	eb00032d 	bl	23638 <CARPHandler::~CARPHandler()>
   22980:	e3a01f93 	mov	r1, #588	; 0x24c
   22984:	e1a00005 	mov	r0, r5
   22988:	eb0050db 	bl	36cfc <operator delete(void*, unsigned int)>
   2298c:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   22990:	e2840028 	add	r0, r4, #40	; 0x28
   22994:	f4440a8f 	vst1.32	{d16-d17}, [r4]
   22998:	eb001887 	bl	28bbc <CNetQueue::~CNetQueue()>
   2299c:	e284001c 	add	r0, r4, #28
   229a0:	eb001885 	bl	28bbc <CNetQueue::~CNetQueue()>
   229a4:	e2840010 	add	r0, r4, #16
   229a8:	eb001883 	bl	28bbc <CNetQueue::~CNetQueue()>
   229ac:	e1a00004 	mov	r0, r4
   229b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000229b4 <CLinkLayer::Initialize()>:
   229b4:	e5903000 	ldr	r3, [r0]
   229b8:	e92d4030 	push	{r4, r5, lr}
   229bc:	e3530000 	cmp	r3, #0
   229c0:	e24dd00c 	sub	sp, sp, #12
   229c4:	0a00000d 	beq	22a00 <CLinkLayer::Initialize()+0x4c>
   229c8:	e1a04000 	mov	r4, r0
   229cc:	e3a00f93 	mov	r0, #588	; 0x24c
   229d0:	eb0050b1 	bl	36c9c <operator new(unsigned int)>
   229d4:	e1a03004 	mov	r3, r4
   229d8:	e1a05000 	mov	r5, r0
   229dc:	e4931010 	ldr	r1, [r3], #16
   229e0:	e58d3000 	str	r3, [sp]
   229e4:	e1a03004 	mov	r3, r4
   229e8:	e5942004 	ldr	r2, [r4, #4]
   229ec:	eb0002e0 	bl	23574 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   229f0:	e3a00001 	mov	r0, #1
   229f4:	e584500c 	str	r5, [r4, #12]
   229f8:	e28dd00c 	add	sp, sp, #12
   229fc:	e8bd8030 	pop	{r4, r5, pc}
   22a00:	e3001d88 	movw	r1, #3464	; 0xd88
   22a04:	e3401004 	movt	r1, #4
   22a08:	e3000b08 	movw	r0, #2824	; 0xb08
   22a0c:	e3400004 	movt	r0, #4
   22a10:	e3a02035 	mov	r2, #53	; 0x35
   22a14:	eb0027a9 	bl	2c8c0 <assertion_failed>

00022a18 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   22a18:	e5903008 	ldr	r3, [r0, #8]
   22a1c:	e92d4010 	push	{r4, lr}
   22a20:	e3530000 	cmp	r3, #0
   22a24:	1a000008 	bne	22a4c <CLinkLayer::AttachLayer(CNetworkLayer*)+0x34>
   22a28:	e3510000 	cmp	r1, #0
   22a2c:	e5801008 	str	r1, [r0, #8]
   22a30:	18bd8010 	popne	{r4, pc}
   22a34:	e3001d88 	movw	r1, #3464	; 0xd88
   22a38:	e3401004 	movt	r1, #4
   22a3c:	e3000c38 	movw	r0, #3128	; 0xc38
   22a40:	e3400004 	movt	r0, #4
   22a44:	e3a02040 	mov	r2, #64	; 0x40
   22a48:	eb00279c 	bl	2c8c0 <assertion_failed>
   22a4c:	e3001d88 	movw	r1, #3464	; 0xd88
   22a50:	e3401004 	movt	r1, #4
   22a54:	e3000dac 	movw	r0, #3500	; 0xdac
   22a58:	e3400004 	movt	r0, #4
   22a5c:	e3a0203e 	mov	r2, #62	; 0x3e
   22a60:	eb002796 	bl	2c8c0 <assertion_failed>

00022a64 <CLinkLayer::Process()>:
   22a64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22a68:	e1a04000 	mov	r4, r0
   22a6c:	e5900004 	ldr	r0, [r0, #4]
   22a70:	e24dde65 	sub	sp, sp, #1616	; 0x650
   22a74:	e3500000 	cmp	r0, #0
   22a78:	0a000058 	beq	22be0 <CLinkLayer::Process()+0x17c>
   22a7c:	eb000231 	bl	23348 <CNetDeviceLayer::GetMACAddress() const>
   22a80:	e2506000 	subs	r6, r0, #0
   22a84:	0a000040 	beq	22b8c <CLinkLayer::Process()+0x128>
   22a88:	e5940004 	ldr	r0, [r4, #4]
   22a8c:	e3500000 	cmp	r0, #0
   22a90:	0a000058 	beq	22bf8 <CLinkLayer::Process()+0x194>
   22a94:	e28d5008 	add	r5, sp, #8
   22a98:	e3007608 	movw	r7, #1544	; 0x608
   22a9c:	e28d2004 	add	r2, sp, #4
   22aa0:	e28d1010 	add	r1, sp, #16
   22aa4:	eb000230 	bl	2336c <CNetDeviceLayer::Receive(void*, unsigned int*)>
   22aa8:	e3500000 	cmp	r0, #0
   22aac:	0a000032 	beq	22b7c <CLinkLayer::Process()+0x118>
   22ab0:	e59d3004 	ldr	r3, [sp, #4]
   22ab4:	e3530d19 	cmp	r3, #1600	; 0x640
   22ab8:	8a000029 	bhi	22b64 <CLinkLayer::Process()+0x100>
   22abc:	e353000e 	cmp	r3, #14
   22ac0:	9a000016 	bls	22b20 <CLinkLayer::Process()+0xbc>
   22ac4:	e28d1010 	add	r1, sp, #16
   22ac8:	e1a00005 	mov	r0, r5
   22acc:	eb004f5d 	bl	36848 <CMACAddress::CMACAddress(unsigned char const*)>
   22ad0:	e1a01006 	mov	r1, r6
   22ad4:	e1a00005 	mov	r0, r5
   22ad8:	eb004f86 	bl	368f8 <CMACAddress::operator!=(CMACAddress const&) const>
   22adc:	e3500000 	cmp	r0, #0
   22ae0:	1a000010 	bne	22b28 <CLinkLayer::Process()+0xc4>
   22ae4:	e59d2004 	ldr	r2, [sp, #4]
   22ae8:	e242200e 	sub	r2, r2, #14
   22aec:	e58d2004 	str	r2, [sp, #4]
   22af0:	e3520000 	cmp	r2, #0
   22af4:	0a000033 	beq	22bc8 <CLinkLayer::Process()+0x164>
   22af8:	e1dd31bc 	ldrh	r3, [sp, #28]
   22afc:	e3530008 	cmp	r3, #8
   22b00:	0a00000d 	beq	22b3c <CLinkLayer::Process()+0xd8>
   22b04:	e1530007 	cmp	r3, r7
   22b08:	0a000010 	beq	22b50 <CLinkLayer::Process()+0xec>
   22b0c:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   22b10:	e1520003 	cmp	r2, r3
   22b14:	0a00001e 	beq	22b94 <CLinkLayer::Process()+0x130>
   22b18:	e1a00005 	mov	r0, r5
   22b1c:	eb004f5a 	bl	3688c <CMACAddress::~CMACAddress()>
   22b20:	e5940004 	ldr	r0, [r4, #4]
   22b24:	eaffffdc 	b	22a9c <CLinkLayer::Process()+0x38>
   22b28:	e1a00005 	mov	r0, r5
   22b2c:	eb004fc8 	bl	36a54 <CMACAddress::IsBroadcast() const>
   22b30:	e3500000 	cmp	r0, #0
   22b34:	1affffea 	bne	22ae4 <CLinkLayer::Process()+0x80>
   22b38:	eafffff6 	b	22b18 <CLinkLayer::Process()+0xb4>
   22b3c:	e3a03000 	mov	r3, #0
   22b40:	e28d101e 	add	r1, sp, #30
   22b44:	e284001c 	add	r0, r4, #28
   22b48:	eb001820 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   22b4c:	eafffff1 	b	22b18 <CLinkLayer::Process()+0xb4>
   22b50:	e3a03000 	mov	r3, #0
   22b54:	e28d101e 	add	r1, sp, #30
   22b58:	e2840010 	add	r0, r4, #16
   22b5c:	eb00181b 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   22b60:	eaffffec 	b	22b18 <CLinkLayer::Process()+0xb4>
   22b64:	e3001d88 	movw	r1, #3464	; 0xd88
   22b68:	e3401004 	movt	r1, #4
   22b6c:	e30d0fec 	movw	r0, #57324	; 0xdfec
   22b70:	e3400003 	movt	r0, #3
   22b74:	e3a02051 	mov	r2, #81	; 0x51
   22b78:	eb002750 	bl	2c8c0 <assertion_failed>
   22b7c:	e594000c 	ldr	r0, [r4, #12]
   22b80:	e3500000 	cmp	r0, #0
   22b84:	0a000021 	beq	22c10 <CLinkLayer::Process()+0x1ac>
   22b88:	eb000399 	bl	239f4 <CARPHandler::Process()>
   22b8c:	e28dde65 	add	sp, sp, #1616	; 0x650
   22b90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22b94:	e3a00006 	mov	r0, #6
   22b98:	eb00503f 	bl	36c9c <operator new(unsigned int)>
   22b9c:	e28d3010 	add	r3, sp, #16
   22ba0:	e3a02006 	mov	r2, #6
   22ba4:	e1a08000 	mov	r8, r0
   22ba8:	e0831002 	add	r1, r3, r2
   22bac:	eb004e31 	bl	36478 <memcpy>
   22bb0:	e59d2004 	ldr	r2, [sp, #4]
   22bb4:	e1a03008 	mov	r3, r8
   22bb8:	e28d101e 	add	r1, sp, #30
   22bbc:	e2840028 	add	r0, r4, #40	; 0x28
   22bc0:	eb001802 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   22bc4:	eaffffd3 	b	22b18 <CLinkLayer::Process()+0xb4>
   22bc8:	e3001d88 	movw	r1, #3464	; 0xd88
   22bcc:	e3401004 	movt	r1, #4
   22bd0:	e30c0b80 	movw	r0, #52096	; 0xcb80
   22bd4:	e3400003 	movt	r0, #3
   22bd8:	e3a02060 	mov	r2, #96	; 0x60
   22bdc:	eb002737 	bl	2c8c0 <assertion_failed>
   22be0:	e3001d88 	movw	r1, #3464	; 0xd88
   22be4:	e3401004 	movt	r1, #4
   22be8:	e3000d98 	movw	r0, #3480	; 0xd98
   22bec:	e3400004 	movt	r0, #4
   22bf0:	e3a02045 	mov	r2, #69	; 0x45
   22bf4:	eb002731 	bl	2c8c0 <assertion_failed>
   22bf8:	e3001d88 	movw	r1, #3464	; 0xd88
   22bfc:	e3401004 	movt	r1, #4
   22c00:	e3000d98 	movw	r0, #3480	; 0xd98
   22c04:	e3400004 	movt	r0, #4
   22c08:	e3a0204c 	mov	r2, #76	; 0x4c
   22c0c:	eb00272b 	bl	2c8c0 <assertion_failed>
   22c10:	e3001d88 	movw	r1, #3464	; 0xd88
   22c14:	e3401004 	movt	r1, #4
   22c18:	e3000dc4 	movw	r0, #3524	; 0xdc4
   22c1c:	e3400004 	movt	r0, #4
   22c20:	e3a0207a 	mov	r2, #122	; 0x7a
   22c24:	eb002725 	bl	2c8c0 <assertion_failed>

00022c28 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   22c28:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22c2c:	e243c001 	sub	ip, r3, #1
   22c30:	e1a04003 	mov	r4, r3
   22c34:	e28db01c 	add	fp, sp, #28
   22c38:	e3003631 	movw	r3, #1585	; 0x631
   22c3c:	e24dd010 	sub	sp, sp, #16
   22c40:	e15c0003 	cmp	ip, r3
   22c44:	8a000033 	bhi	22d18 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   22c48:	e2843015 	add	r3, r4, #21
   22c4c:	e1a05000 	mov	r5, r0
   22c50:	e3c33007 	bic	r3, r3, #7
   22c54:	e5900004 	ldr	r0, [r0, #4]
   22c58:	e04dd003 	sub	sp, sp, r3
   22c5c:	e284900e 	add	r9, r4, #14
   22c60:	e3500000 	cmp	r0, #0
   22c64:	e28d8008 	add	r8, sp, #8
   22c68:	0a000043 	beq	22d7c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x154>
   22c6c:	e1a07001 	mov	r7, r1
   22c70:	e1a06002 	mov	r6, r2
   22c74:	eb0001b3 	bl	23348 <CNetDeviceLayer::GetMACAddress() const>
   22c78:	e3500000 	cmp	r0, #0
   22c7c:	0a000044 	beq	22d94 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   22c80:	e28d100e 	add	r1, sp, #14
   22c84:	eb004f5a 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   22c88:	e3a03000 	mov	r3, #0
   22c8c:	e3560000 	cmp	r6, #0
   22c90:	e5c8300d 	strb	r3, [r8, #13]
   22c94:	e3a03008 	mov	r3, #8
   22c98:	e5c8300c 	strb	r3, [r8, #12]
   22c9c:	0a000030 	beq	22d64 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   22ca0:	e1a02004 	mov	r2, r4
   22ca4:	e1a01006 	mov	r1, r6
   22ca8:	e28d0016 	add	r0, sp, #22
   22cac:	eb004df1 	bl	36478 <memcpy>
   22cb0:	e5953000 	ldr	r3, [r5]
   22cb4:	e3530000 	cmp	r3, #0
   22cb8:	0a00003b 	beq	22dac <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x184>
   22cbc:	e595300c 	ldr	r3, [r5, #12]
   22cc0:	e3530000 	cmp	r3, #0
   22cc4:	0a00003e 	beq	22dc4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   22cc8:	e24b0024 	sub	r0, fp, #36	; 0x24
   22ccc:	eb004eda 	bl	3683c <CMACAddress::CMACAddress()>
   22cd0:	e1a00007 	mov	r0, r7
   22cd4:	eb001720 	bl	2895c <CIPAddress::IsBroadcast() const>
   22cd8:	e3500000 	cmp	r0, #0
   22cdc:	0a000010 	beq	22d24 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   22ce0:	e24b0024 	sub	r0, fp, #36	; 0x24
   22ce4:	eb004f2d 	bl	369a0 <CMACAddress::SetBroadcast()>
   22ce8:	e24b0024 	sub	r0, fp, #36	; 0x24
   22cec:	e1a01008 	mov	r1, r8
   22cf0:	eb004f3f 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   22cf4:	e5950004 	ldr	r0, [r5, #4]
   22cf8:	e1a02009 	mov	r2, r9
   22cfc:	e1a01008 	mov	r1, r8
   22d00:	eb000196 	bl	23360 <CNetDeviceLayer::Send(void const*, unsigned int)>
   22d04:	e24b0024 	sub	r0, fp, #36	; 0x24
   22d08:	eb004edf 	bl	3688c <CMACAddress::~CMACAddress()>
   22d0c:	e3a00001 	mov	r0, #1
   22d10:	e24bd01c 	sub	sp, fp, #28
   22d14:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22d18:	e3a00000 	mov	r0, #0
   22d1c:	e24bd01c 	sub	sp, fp, #28
   22d20:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22d24:	e5950000 	ldr	r0, [r5]
   22d28:	eb0015e9 	bl	284d4 <CNetConfig::GetBroadcastAddress() const>
   22d2c:	e1a01000 	mov	r1, r0
   22d30:	e1a00007 	mov	r0, r7
   22d34:	eb001620 	bl	285bc <CIPAddress::operator==(CIPAddress const&) const>
   22d38:	e3500000 	cmp	r0, #0
   22d3c:	1affffe7 	bne	22ce0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   22d40:	e58d9000 	str	r9, [sp]
   22d44:	e1a03008 	mov	r3, r8
   22d48:	e1a01007 	mov	r1, r7
   22d4c:	e24b2024 	sub	r2, fp, #36	; 0x24
   22d50:	e595000c 	ldr	r0, [r5, #12]
   22d54:	eb000426 	bl	23df4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   22d58:	e3500000 	cmp	r0, #0
   22d5c:	1affffe1 	bne	22ce8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   22d60:	eaffffe7 	b	22d04 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   22d64:	e3001d88 	movw	r1, #3464	; 0xd88
   22d68:	e3401004 	movt	r1, #4
   22d6c:	e3000dec 	movw	r0, #3564	; 0xdec
   22d70:	e3400004 	movt	r0, #4
   22d74:	e3a02091 	mov	r2, #145	; 0x91
   22d78:	eb0026d0 	bl	2c8c0 <assertion_failed>
   22d7c:	e3001d88 	movw	r1, #3464	; 0xd88
   22d80:	e3401004 	movt	r1, #4
   22d84:	e3000d98 	movw	r0, #3480	; 0xd98
   22d88:	e3400004 	movt	r0, #4
   22d8c:	e3a0208a 	mov	r2, #138	; 0x8a
   22d90:	eb0026ca 	bl	2c8c0 <assertion_failed>
   22d94:	e3001d88 	movw	r1, #3464	; 0xd88
   22d98:	e3401004 	movt	r1, #4
   22d9c:	e3000dd8 	movw	r0, #3544	; 0xdd8
   22da0:	e3400004 	movt	r0, #4
   22da4:	e3a0208c 	mov	r2, #140	; 0x8c
   22da8:	eb0026c4 	bl	2c8c0 <assertion_failed>
   22dac:	e3001d88 	movw	r1, #3464	; 0xd88
   22db0:	e3401004 	movt	r1, #4
   22db4:	e3000b08 	movw	r0, #2824	; 0xb08
   22db8:	e3400004 	movt	r0, #4
   22dbc:	e3a02095 	mov	r2, #149	; 0x95
   22dc0:	eb0026be 	bl	2c8c0 <assertion_failed>
   22dc4:	e3001d88 	movw	r1, #3464	; 0xd88
   22dc8:	e3401004 	movt	r1, #4
   22dcc:	e3000dc4 	movw	r0, #3524	; 0xdc4
   22dd0:	e3400004 	movt	r0, #4
   22dd4:	e3a02096 	mov	r2, #150	; 0x96
   22dd8:	eb0026b8 	bl	2c8c0 <assertion_failed>

00022ddc <CLinkLayer::Receive(void*, unsigned int*)>:
   22ddc:	e3510000 	cmp	r1, #0
   22de0:	e92d4010 	push	{r4, lr}
   22de4:	0a000009 	beq	22e10 <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   22de8:	e1a04002 	mov	r4, r2
   22dec:	e3520000 	cmp	r2, #0
   22df0:	0a00000c 	beq	22e28 <CLinkLayer::Receive(void*, unsigned int*)+0x4c>
   22df4:	e3a02000 	mov	r2, #0
   22df8:	e280001c 	add	r0, r0, #28
   22dfc:	eb0017bd 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   22e00:	e5840000 	str	r0, [r4]
   22e04:	e2500000 	subs	r0, r0, #0
   22e08:	13a00001 	movne	r0, #1
   22e0c:	e8bd8010 	pop	{r4, pc}
   22e10:	e3001d88 	movw	r1, #3464	; 0xd88
   22e14:	e3401004 	movt	r1, #4
   22e18:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   22e1c:	e3400003 	movt	r0, #3
   22e20:	e3a020ac 	mov	r2, #172	; 0xac
   22e24:	eb0026a5 	bl	2c8c0 <assertion_failed>
   22e28:	e3001d88 	movw	r1, #3464	; 0xd88
   22e2c:	e3401004 	movt	r1, #4
   22e30:	e30d0bac 	movw	r0, #56236	; 0xdbac
   22e34:	e3400003 	movt	r0, #3
   22e38:	e3a020ad 	mov	r2, #173	; 0xad
   22e3c:	eb00269f 	bl	2c8c0 <assertion_failed>

00022e40 <CLinkLayer::SendRaw(void const*, unsigned int)>:
   22e40:	e3510000 	cmp	r1, #0
   22e44:	e92d4010 	push	{r4, lr}
   22e48:	0a000007 	beq	22e6c <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   22e4c:	e3520000 	cmp	r2, #0
   22e50:	0a00000b 	beq	22e84 <CLinkLayer::SendRaw(void const*, unsigned int)+0x44>
   22e54:	e5900004 	ldr	r0, [r0, #4]
   22e58:	e3500000 	cmp	r0, #0
   22e5c:	0a00000e 	beq	22e9c <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   22e60:	eb00013e 	bl	23360 <CNetDeviceLayer::Send(void const*, unsigned int)>
   22e64:	e3a00001 	mov	r0, #1
   22e68:	e8bd8010 	pop	{r4, pc}
   22e6c:	e3001d88 	movw	r1, #3464	; 0xd88
   22e70:	e3401004 	movt	r1, #4
   22e74:	e3000dfc 	movw	r0, #3580	; 0xdfc
   22e78:	e3400004 	movt	r0, #4
   22e7c:	e3a020b5 	mov	r2, #181	; 0xb5
   22e80:	eb00268e 	bl	2c8c0 <assertion_failed>
   22e84:	e3001d88 	movw	r1, #3464	; 0xd88
   22e88:	e3401004 	movt	r1, #4
   22e8c:	e30c0b80 	movw	r0, #52096	; 0xcb80
   22e90:	e3400003 	movt	r0, #3
   22e94:	e3a020b6 	mov	r2, #182	; 0xb6
   22e98:	eb002688 	bl	2c8c0 <assertion_failed>
   22e9c:	e3001d88 	movw	r1, #3464	; 0xd88
   22ea0:	e3401004 	movt	r1, #4
   22ea4:	e3000d98 	movw	r0, #3480	; 0xd98
   22ea8:	e3400004 	movt	r0, #4
   22eac:	e3a020b7 	mov	r2, #183	; 0xb7
   22eb0:	eb002682 	bl	2c8c0 <assertion_failed>

00022eb4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   22eb4:	e92d4030 	push	{r4, r5, lr}
   22eb8:	e3510000 	cmp	r1, #0
   22ebc:	e24dd00c 	sub	sp, sp, #12
   22ec0:	0a00001a 	beq	22f30 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x7c>
   22ec4:	e1a04002 	mov	r4, r2
   22ec8:	e3520000 	cmp	r2, #0
   22ecc:	0a00001d 	beq	22f48 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x94>
   22ed0:	e28d2004 	add	r2, sp, #4
   22ed4:	e2800028 	add	r0, r0, #40	; 0x28
   22ed8:	e1a05003 	mov	r5, r3
   22edc:	eb001785 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   22ee0:	e3500000 	cmp	r0, #0
   22ee4:	e5840000 	str	r0, [r4]
   22ee8:	0a00000b 	beq	22f1c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   22eec:	e59d4004 	ldr	r4, [sp, #4]
   22ef0:	e3550000 	cmp	r5, #0
   22ef4:	0a00000a 	beq	22f24 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   22ef8:	e3540000 	cmp	r4, #0
   22efc:	0a000017 	beq	22f60 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xac>
   22f00:	e1a01004 	mov	r1, r4
   22f04:	e1a00005 	mov	r0, r5
   22f08:	eb004e94 	bl	36960 <CMACAddress::Set(unsigned char const*)>
   22f0c:	e3a01006 	mov	r1, #6
   22f10:	e1a00004 	mov	r0, r4
   22f14:	eb004f78 	bl	36cfc <operator delete(void*, unsigned int)>
   22f18:	e3a00001 	mov	r0, #1
   22f1c:	e28dd00c 	add	sp, sp, #12
   22f20:	e8bd8030 	pop	{r4, r5, pc}
   22f24:	e3540000 	cmp	r4, #0
   22f28:	0afffffa 	beq	22f18 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x64>
   22f2c:	eafffff6 	b	22f0c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   22f30:	e3001d88 	movw	r1, #3464	; 0xd88
   22f34:	e3401004 	movt	r1, #4
   22f38:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   22f3c:	e3400003 	movt	r0, #3
   22f40:	e3a020c0 	mov	r2, #192	; 0xc0
   22f44:	eb00265d 	bl	2c8c0 <assertion_failed>
   22f48:	e3001d88 	movw	r1, #3464	; 0xd88
   22f4c:	e3401004 	movt	r1, #4
   22f50:	e30d0bac 	movw	r0, #56236	; 0xdbac
   22f54:	e3400003 	movt	r0, #3
   22f58:	e3a020c1 	mov	r2, #193	; 0xc1
   22f5c:	eb002657 	bl	2c8c0 <assertion_failed>
   22f60:	e3001d88 	movw	r1, #3464	; 0xd88
   22f64:	e3401004 	movt	r1, #4
   22f68:	e30c0b74 	movw	r0, #52084	; 0xcb74
   22f6c:	e3400003 	movt	r0, #3
   22f70:	e3a020cc 	mov	r2, #204	; 0xcc
   22f74:	eb002651 	bl	2c8c0 <assertion_failed>

00022f78 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   22f78:	e1d023b4 	ldrh	r2, [r0, #52]	; 0x34
   22f7c:	e3520000 	cmp	r2, #0
   22f80:	1a000006 	bne	22fa0 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x28>
   22f84:	e3510000 	cmp	r1, #0
   22f88:	0a000006 	beq	22fa8 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x30>
   22f8c:	e1a03000 	mov	r3, r0
   22f90:	e6bf1fb1 	rev16	r1, r1
   22f94:	e3a00001 	mov	r0, #1
   22f98:	e1c313b4 	strh	r1, [r3, #52]	; 0x34
   22f9c:	e12fff1e 	bx	lr
   22fa0:	e3a00000 	mov	r0, #0
   22fa4:	e12fff1e 	bx	lr
   22fa8:	e3001d88 	movw	r1, #3464	; 0xd88
   22fac:	e3401004 	movt	r1, #4
   22fb0:	e3000e08 	movw	r0, #3592	; 0xe08
   22fb4:	e3400004 	movt	r0, #4
   22fb8:	e3a020dc 	mov	r2, #220	; 0xdc
   22fbc:	e92d4010 	push	{r4, lr}
   22fc0:	eb00263e 	bl	2c8c0 <assertion_failed>

00022fc4 <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   22fc4:	e3510000 	cmp	r1, #0
   22fc8:	e92d4010 	push	{r4, lr}
   22fcc:	0a000009 	beq	22ff8 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   22fd0:	e352000e 	cmp	r2, #14
   22fd4:	9a00000d 	bls	23010 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x4c>
   22fd8:	e5900008 	ldr	r0, [r0, #8]
   22fdc:	e3500000 	cmp	r0, #0
   22fe0:	0a000010 	beq	23028 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   22fe4:	e242300e 	sub	r3, r2, #14
   22fe8:	e281200e 	add	r2, r1, #14
   22fec:	e8bd4010 	pop	{r4, lr}
   22ff0:	e3a01001 	mov	r1, #1
   22ff4:	eafffe2d 	b	228b0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   22ff8:	e3001d88 	movw	r1, #3464	; 0xd88
   22ffc:	e3401004 	movt	r1, #4
   23000:	e3000e1c 	movw	r0, #3612	; 0xe1c
   23004:	e3400004 	movt	r0, #4
   23008:	e3a020e4 	mov	r2, #228	; 0xe4
   2300c:	eb00262b 	bl	2c8c0 <assertion_failed>
   23010:	e3001d88 	movw	r1, #3464	; 0xd88
   23014:	e3401004 	movt	r1, #4
   23018:	e3000e30 	movw	r0, #3632	; 0xe30
   2301c:	e3400004 	movt	r0, #4
   23020:	e3a020e5 	mov	r2, #229	; 0xe5
   23024:	eb002625 	bl	2c8c0 <assertion_failed>
   23028:	e3001d88 	movw	r1, #3464	; 0xd88
   2302c:	e3401004 	movt	r1, #4
   23030:	e3000c38 	movw	r0, #3128	; 0xc38
   23034:	e3400004 	movt	r0, #4
   23038:	e3a020e6 	mov	r2, #230	; 0xe6
   2303c:	eb00261f 	bl	2c8c0 <assertion_failed>

00023040 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   23040:	e92d4010 	push	{r4, lr}
   23044:	e1a04000 	mov	r4, r0
   23048:	e3a03000 	mov	r3, #0
   2304c:	e280000c 	add	r0, r0, #12
   23050:	e5c42000 	strb	r2, [r4]
   23054:	e984000a 	stmib	r4, {r1, r3}
   23058:	eb00169e 	bl	28ad8 <CNetQueue::CNetQueue()>
   2305c:	e2840018 	add	r0, r4, #24
   23060:	eb00169c 	bl	28ad8 <CNetQueue::CNetQueue()>
   23064:	e1a00004 	mov	r0, r4
   23068:	e8bd8010 	pop	{r4, pc}

0002306c <CNetDeviceLayer::~CNetDeviceLayer()>:
   2306c:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   23070:	e2803004 	add	r3, r0, #4
   23074:	e92d4010 	push	{r4, lr}
   23078:	e1a04000 	mov	r4, r0
   2307c:	e2800018 	add	r0, r0, #24
   23080:	f443078f 	vst1.32	{d16}, [r3]
   23084:	eb0016cc 	bl	28bbc <CNetQueue::~CNetQueue()>
   23088:	e284000c 	add	r0, r4, #12
   2308c:	eb0016ca 	bl	28bbc <CNetQueue::~CNetQueue()>
   23090:	e1a00004 	mov	r0, r4
   23094:	e8bd8010 	pop	{r4, pc}

00023098 <CNetDeviceLayer::Initialize(bool)>:
   23098:	e3510000 	cmp	r1, #0
   2309c:	0a000050 	beq	231e4 <CNetDeviceLayer::Initialize(bool)+0x14c>
   230a0:	e92d4070 	push	{r4, r5, r6, lr}
   230a4:	e1a04000 	mov	r4, r0
   230a8:	e5903008 	ldr	r3, [r0, #8]
   230ac:	e24dd008 	sub	sp, sp, #8
   230b0:	e3530000 	cmp	r3, #0
   230b4:	1a00004c 	bne	231ec <CNetDeviceLayer::Initialize(bool)+0x154>
   230b8:	e5d00000 	ldrb	r0, [r0]
   230bc:	eb004eb5 	bl	36b98 <CNetDevice::GetNetDevice(TNetDeviceType)>
   230c0:	e1a05000 	mov	r5, r0
   230c4:	e3500000 	cmp	r0, #0
   230c8:	e5840008 	str	r0, [r4, #8]
   230cc:	0a00003a 	beq	231bc <CNetDeviceLayer::Initialize(bool)+0x124>
   230d0:	e3a000f8 	mov	r0, #248	; 0xf8
   230d4:	e30d64e4 	movw	r6, #54500	; 0xd4e4
   230d8:	e3406001 	movt	r6, #1
   230dc:	eb004eee 	bl	36c9c <operator new(unsigned int)>
   230e0:	e5941008 	ldr	r1, [r4, #8]
   230e4:	eb0000e9 	bl	23490 <CPHYTask::CPHYTask(CNetDevice*)>
   230e8:	eb004aaa 	bl	35b98 <CTimer::Get()>
   230ec:	eb0047d7 	bl	35050 <CTimer::GetTicks() const>
   230f0:	e1a05000 	mov	r5, r0
   230f4:	eb004aa7 	bl	35b98 <CTimer::Get()>
   230f8:	eb0047d4 	bl	35050 <CTimer::GetTicks() const>
   230fc:	e0403005 	sub	r3, r0, r5
   23100:	e3530e19 	cmp	r3, #400	; 0x190
   23104:	2a000023 	bcs	23198 <CNetDeviceLayer::Initialize(bool)+0x100>
   23108:	e5940008 	ldr	r0, [r4, #8]
   2310c:	e5902000 	ldr	r2, [r0]
   23110:	e592301c 	ldr	r3, [r2, #28]
   23114:	e1530006 	cmp	r3, r6
   23118:	1a000018 	bne	23180 <CNetDeviceLayer::Initialize(bool)+0xe8>
   2311c:	e5922020 	ldr	r2, [r2, #32]
   23120:	e30d34ec 	movw	r3, #54508	; 0xd4ec
   23124:	e3403001 	movt	r3, #1
   23128:	e1520003 	cmp	r2, r3
   2312c:	0a000020 	beq	231b4 <CNetDeviceLayer::Initialize(bool)+0x11c>
   23130:	e12fff32 	blx	r2
   23134:	e1a05000 	mov	r5, r0
   23138:	e3500006 	cmp	r0, #6
   2313c:	0a00001c 	beq	231b4 <CNetDeviceLayer::Initialize(bool)+0x11c>
   23140:	eb00305b 	bl	2f2b4 <CLogger::Get()>
   23144:	e1a04000 	mov	r4, r0
   23148:	e1a00005 	mov	r0, r5
   2314c:	eb004e82 	bl	36b5c <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   23150:	e3a02003 	mov	r2, #3
   23154:	e1a03000 	mov	r3, r0
   23158:	e3001eac 	movw	r1, #3756	; 0xeac
   2315c:	e3401004 	movt	r1, #4
   23160:	e1a00004 	mov	r0, r4
   23164:	e58d3000 	str	r3, [sp]
   23168:	e3003e90 	movw	r3, #3728	; 0xe90
   2316c:	e3403004 	movt	r3, #4
   23170:	eb00321d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23174:	e3a00001 	mov	r0, #1
   23178:	e28dd008 	add	sp, sp, #8
   2317c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23180:	e12fff33 	blx	r3
   23184:	e3500000 	cmp	r0, #0
   23188:	0affffd9 	beq	230f4 <CNetDeviceLayer::Initialize(bool)+0x5c>
   2318c:	e5940008 	ldr	r0, [r4, #8]
   23190:	e5902000 	ldr	r2, [r0]
   23194:	eaffffe0 	b	2311c <CNetDeviceLayer::Initialize(bool)+0x84>
   23198:	eb003045 	bl	2f2b4 <CLogger::Get()>
   2319c:	e3003e80 	movw	r3, #3712	; 0xe80
   231a0:	e3403004 	movt	r3, #4
   231a4:	e3001eac 	movw	r1, #3756	; 0xeac
   231a8:	e3401004 	movt	r1, #4
   231ac:	e3a02002 	mov	r2, #2
   231b0:	eb00320d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   231b4:	e3a00001 	mov	r0, #1
   231b8:	eaffffee 	b	23178 <CNetDeviceLayer::Initialize(bool)+0xe0>
   231bc:	eb00303c 	bl	2f2b4 <CLogger::Get()>
   231c0:	e3a02001 	mov	r2, #1
   231c4:	e3003e64 	movw	r3, #3684	; 0xe64
   231c8:	e3403004 	movt	r3, #4
   231cc:	e3001eac 	movw	r1, #3756	; 0xeac
   231d0:	e3401004 	movt	r1, #4
   231d4:	eb003204 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   231d8:	e1a00005 	mov	r0, r5
   231dc:	e28dd008 	add	sp, sp, #8
   231e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   231e4:	e3a00001 	mov	r0, #1
   231e8:	e12fff1e 	bx	lr
   231ec:	e3001e54 	movw	r1, #3668	; 0xe54
   231f0:	e3401004 	movt	r1, #4
   231f4:	e30b02bc 	movw	r0, #45756	; 0xb2bc
   231f8:	e3400003 	movt	r0, #3
   231fc:	e3a02039 	mov	r2, #57	; 0x39
   23200:	eb0025ae 	bl	2c8c0 <assertion_failed>

00023204 <CNetDeviceLayer::Process()>:
   23204:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23208:	e1a05000 	mov	r5, r0
   2320c:	e5900008 	ldr	r0, [r0, #8]
   23210:	e24ddd1a 	sub	sp, sp, #1664	; 0x680
   23214:	e24dd004 	sub	sp, sp, #4
   23218:	e3500000 	cmp	r0, #0
   2321c:	e28d4047 	add	r4, sp, #71	; 0x47
   23220:	e3c4403f 	bic	r4, r4, #63	; 0x3f
   23224:	0a00003c 	beq	2331c <CNetDeviceLayer::Process()+0x118>
   23228:	e30b6764 	movw	r6, #46948	; 0xb764
   2322c:	e3406001 	movt	r6, #1
   23230:	e285700c 	add	r7, r5, #12
   23234:	ea00000f 	b	23278 <CNetDeviceLayer::Process()+0x74>
   23238:	e3a02000 	mov	r2, #0
   2323c:	e1a01004 	mov	r1, r4
   23240:	e1a00007 	mov	r0, r7
   23244:	eb0016ab 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   23248:	e1a02000 	mov	r2, r0
   2324c:	e3500000 	cmp	r0, #0
   23250:	e58d0004 	str	r0, [sp, #4]
   23254:	0a00000e 	beq	23294 <CNetDeviceLayer::Process()+0x90>
   23258:	e5950008 	ldr	r0, [r5, #8]
   2325c:	e1a01004 	mov	r1, r4
   23260:	e5903000 	ldr	r3, [r0]
   23264:	e5933014 	ldr	r3, [r3, #20]
   23268:	e12fff33 	blx	r3
   2326c:	e3500000 	cmp	r0, #0
   23270:	0a000021 	beq	232fc <CNetDeviceLayer::Process()+0xf8>
   23274:	e5950008 	ldr	r0, [r5, #8]
   23278:	e5903000 	ldr	r3, [r0]
   2327c:	e5933010 	ldr	r3, [r3, #16]
   23280:	e1530006 	cmp	r3, r6
   23284:	0affffeb 	beq	23238 <CNetDeviceLayer::Process()+0x34>
   23288:	e12fff33 	blx	r3
   2328c:	e3500000 	cmp	r0, #0
   23290:	1affffe8 	bne	23238 <CNetDeviceLayer::Process()+0x34>
   23294:	e2856018 	add	r6, r5, #24
   23298:	ea000003 	b	232ac <CNetDeviceLayer::Process()+0xa8>
   2329c:	e3a03000 	mov	r3, #0
   232a0:	e1a01004 	mov	r1, r4
   232a4:	e1a00006 	mov	r0, r6
   232a8:	eb001648 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   232ac:	e5950008 	ldr	r0, [r5, #8]
   232b0:	e28d2004 	add	r2, sp, #4
   232b4:	e1a01004 	mov	r1, r4
   232b8:	e5903000 	ldr	r3, [r0]
   232bc:	e5933018 	ldr	r3, [r3, #24]
   232c0:	e12fff33 	blx	r3
   232c4:	e3500000 	cmp	r0, #0
   232c8:	0a000008 	beq	232f0 <CNetDeviceLayer::Process()+0xec>
   232cc:	e59d2004 	ldr	r2, [sp, #4]
   232d0:	e3520000 	cmp	r2, #0
   232d4:	1afffff0 	bne	2329c <CNetDeviceLayer::Process()+0x98>
   232d8:	e3001e54 	movw	r1, #3668	; 0xe54
   232dc:	e3401004 	movt	r1, #4
   232e0:	e30c0b80 	movw	r0, #52096	; 0xcb80
   232e4:	e3400003 	movt	r0, #3
   232e8:	e3a02077 	mov	r2, #119	; 0x77
   232ec:	eb002573 	bl	2c8c0 <assertion_failed>
   232f0:	e28ddd1a 	add	sp, sp, #1664	; 0x680
   232f4:	e28dd004 	add	sp, sp, #4
   232f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   232fc:	eb002fec 	bl	2f2b4 <CLogger::Get()>
   23300:	e3a02002 	mov	r2, #2
   23304:	e3003e9c 	movw	r3, #3740	; 0xe9c
   23308:	e3403004 	movt	r3, #4
   2330c:	e3001eac 	movw	r1, #3756	; 0xeac
   23310:	e3401004 	movt	r1, #4
   23314:	eb0031b4 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23318:	eaffffdd 	b	23294 <CNetDeviceLayer::Process()+0x90>
   2331c:	e5d50000 	ldrb	r0, [r5]
   23320:	eb004e1c 	bl	36b98 <CNetDevice::GetNetDevice(TNetDeviceType)>
   23324:	e3500000 	cmp	r0, #0
   23328:	e5850008 	str	r0, [r5, #8]
   2332c:	0affffef 	beq	232f0 <CNetDeviceLayer::Process()+0xec>
   23330:	e3a000f8 	mov	r0, #248	; 0xf8
   23334:	eb004e58 	bl	36c9c <operator new(unsigned int)>
   23338:	e5951008 	ldr	r1, [r5, #8]
   2333c:	eb000053 	bl	23490 <CPHYTask::CPHYTask(CNetDevice*)>
   23340:	e5950008 	ldr	r0, [r5, #8]
   23344:	eaffffb7 	b	23228 <CNetDeviceLayer::Process()+0x24>

00023348 <CNetDeviceLayer::GetMACAddress() const>:
   23348:	e5900008 	ldr	r0, [r0, #8]
   2334c:	e3500000 	cmp	r0, #0
   23350:	012fff1e 	bxeq	lr
   23354:	e5903000 	ldr	r3, [r0]
   23358:	e593300c 	ldr	r3, [r3, #12]
   2335c:	e12fff13 	bx	r3

00023360 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   23360:	e3a03000 	mov	r3, #0
   23364:	e280000c 	add	r0, r0, #12
   23368:	ea001618 	b	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0002336c <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   2336c:	e92d4010 	push	{r4, lr}
   23370:	e2800018 	add	r0, r0, #24
   23374:	e1a04002 	mov	r4, r2
   23378:	e3a02000 	mov	r2, #0
   2337c:	eb00165d 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   23380:	e2503000 	subs	r3, r0, #0
   23384:	0a000004 	beq	2339c <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   23388:	e3540000 	cmp	r4, #0
   2338c:	0a000004 	beq	233a4 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x38>
   23390:	e3a00001 	mov	r0, #1
   23394:	e5843000 	str	r3, [r4]
   23398:	e8bd8010 	pop	{r4, pc}
   2339c:	e1a00003 	mov	r0, r3
   233a0:	e8bd8010 	pop	{r4, pc}
   233a4:	e3001e54 	movw	r1, #3668	; 0xe54
   233a8:	e3401004 	movt	r1, #4
   233ac:	e30d0bac 	movw	r0, #56236	; 0xdbac
   233b0:	e3400003 	movt	r0, #3
   233b4:	e3a02093 	mov	r2, #147	; 0x93
   233b8:	eb002540 	bl	2c8c0 <assertion_failed>

000233bc <CNetDeviceLayer::IsRunning() const>:
   233bc:	e5900008 	ldr	r0, [r0, #8]
   233c0:	e2500000 	subs	r0, r0, #0
   233c4:	13a00001 	movne	r0, #1
   233c8:	e12fff1e 	bx	lr

000233cc <CPHYTask::~CPHYTask()>:
   233cc:	e59f201c 	ldr	r2, [pc, #28]	; 233f0 <CPHYTask::~CPHYTask()+0x24>
   233d0:	e3a03000 	mov	r3, #0
   233d4:	e92d4010 	push	{r4, lr}
   233d8:	e1a04000 	mov	r4, r0
   233dc:	e5802000 	str	r2, [r0]
   233e0:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   233e4:	eb00216f 	bl	2b9a8 <CTask::~CTask()>
   233e8:	e1a00004 	mov	r0, r4
   233ec:	e8bd8010 	pop	{r4, pc}
   233f0:	00040ed0 	.word	0x00040ed0

000233f4 <CPHYTask::~CPHYTask()>:
   233f4:	e59f2028 	ldr	r2, [pc, #40]	; 23424 <CPHYTask::~CPHYTask()+0x30>
   233f8:	e3a03000 	mov	r3, #0
   233fc:	e92d4010 	push	{r4, lr}
   23400:	e1a04000 	mov	r4, r0
   23404:	e5802000 	str	r2, [r0]
   23408:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2340c:	eb002165 	bl	2b9a8 <CTask::~CTask()>
   23410:	e1a00004 	mov	r0, r4
   23414:	e3a010f8 	mov	r1, #248	; 0xf8
   23418:	eb004e37 	bl	36cfc <operator delete(void*, unsigned int)>
   2341c:	e1a00004 	mov	r0, r4
   23420:	e8bd8010 	pop	{r4, pc}
   23424:	00040ed0 	.word	0x00040ed0

00023428 <CPHYTask::Run()>:
   23428:	e92d4070 	push	{r4, r5, r6, lr}
   2342c:	e1a04000 	mov	r4, r0
   23430:	e59000f4 	ldr	r0, [r0, #244]	; 0xf4
   23434:	e3500000 	cmp	r0, #0
   23438:	0a00000e 	beq	23478 <CPHYTask::Run()+0x50>
   2343c:	e30b576c 	movw	r5, #46956	; 0xb76c
   23440:	e3405001 	movt	r5, #1
   23444:	e5903000 	ldr	r3, [r0]
   23448:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   2344c:	e1530005 	cmp	r3, r5
   23450:	08bd8070 	popeq	{r4, r5, r6, pc}
   23454:	e12fff33 	blx	r3
   23458:	e3500000 	cmp	r0, #0
   2345c:	08bd8070 	popeq	{r4, r5, r6, pc}
   23460:	eb0023ed 	bl	2c41c <CScheduler::Get()>
   23464:	e3a01e7d 	mov	r1, #2000	; 0x7d0
   23468:	eb0023c8 	bl	2c390 <CScheduler::MsSleep(unsigned int)>
   2346c:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
   23470:	e3500000 	cmp	r0, #0
   23474:	1afffff2 	bne	23444 <CPHYTask::Run()+0x1c>
   23478:	e3001eb4 	movw	r1, #3764	; 0xeb4
   2347c:	e3401004 	movt	r1, #4
   23480:	e30b0460 	movw	r0, #46176	; 0xb460
   23484:	e3400003 	movt	r0, #3
   23488:	e3a02027 	mov	r2, #39	; 0x27
   2348c:	eb00250b 	bl	2c8c0 <assertion_failed>

00023490 <CPHYTask::CPHYTask(CNetDevice*)>:
   23490:	e92d4070 	push	{r4, r5, r6, lr}
   23494:	e1a04000 	mov	r4, r0
   23498:	e1a05001 	mov	r5, r1
   2349c:	e3a02000 	mov	r2, #0
   234a0:	e3a01902 	mov	r1, #32768	; 0x8000
   234a4:	eb00208a 	bl	2b6d4 <CTask::CTask(unsigned int, bool)>
   234a8:	e59f301c 	ldr	r3, [pc, #28]	; 234cc <CPHYTask::CPHYTask(CNetDevice*)+0x3c>
   234ac:	e1a00004 	mov	r0, r4
   234b0:	e5843000 	str	r3, [r4]
   234b4:	e58450f4 	str	r5, [r4, #244]	; 0xf4
   234b8:	e3001ec0 	movw	r1, #3776	; 0xec0
   234bc:	e3401004 	movt	r1, #4
   234c0:	eb002112 	bl	2b910 <CTask::SetName(char const*)>
   234c4:	e1a00004 	mov	r0, r4
   234c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   234cc:	00040ed0 	.word	0x00040ed0

000234d0 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   234d0:	e92d4070 	push	{r4, r5, r6, lr}
   234d4:	e2524000 	subs	r4, r2, #0
   234d8:	0a000019 	beq	23544 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x74>
   234dc:	e5943010 	ldr	r3, [r4, #16]
   234e0:	e1a05001 	mov	r5, r1
   234e4:	e1530001 	cmp	r3, r1
   234e8:	9a00001b 	bls	2355c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x8c>
   234ec:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   234f0:	e3500000 	cmp	r0, #0
   234f4:	1a000006 	bne	23514 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   234f8:	e3a0301c 	mov	r3, #28
   234fc:	e0244391 	mla	r4, r1, r3, r4
   23500:	e5d43014 	ldrb	r3, [r4, #20]
   23504:	e3530001 	cmp	r3, #1
   23508:	03a03002 	moveq	r3, #2
   2350c:	05c43014 	strbeq	r3, [r4, #20]
   23510:	e8bd8070 	pop	{r4, r5, r6, pc}
   23514:	eb0053f8 	bl	384fc <EnterCritical>
   23518:	e3a0301c 	mov	r3, #28
   2351c:	e0234395 	mla	r3, r5, r3, r4
   23520:	e5d32014 	ldrb	r2, [r3, #20]
   23524:	e3520001 	cmp	r2, #1
   23528:	e5942244 	ldr	r2, [r4, #580]	; 0x244
   2352c:	03a01002 	moveq	r1, #2
   23530:	05c31014 	strbeq	r1, [r3, #20]
   23534:	e3520000 	cmp	r2, #0
   23538:	08bd8070 	popeq	{r4, r5, r6, pc}
   2353c:	e8bd4070 	pop	{r4, r5, r6, lr}
   23540:	ea005418 	b	385a8 <LeaveCritical>
   23544:	e3001edc 	movw	r1, #3804	; 0xedc
   23548:	e3401004 	movt	r1, #4
   2354c:	e30a0a18 	movw	r0, #43544	; 0xaa18
   23550:	e3400003 	movt	r0, #3
   23554:	e30021a9 	movw	r2, #425	; 0x1a9
   23558:	eb0024d8 	bl	2c8c0 <assertion_failed>
   2355c:	e3001edc 	movw	r1, #3804	; 0xedc
   23560:	e3401004 	movt	r1, #4
   23564:	e3000eec 	movw	r0, #3820	; 0xeec
   23568:	e3400004 	movt	r0, #4
   2356c:	e3a02f6b 	mov	r2, #428	; 0x1ac
   23570:	eb0024d2 	bl	2c8c0 <assertion_failed>

00023574 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   23574:	e92d4010 	push	{r4, lr}
   23578:	e280ef91 	add	lr, r0, #580	; 0x244
   2357c:	eddf0b2b 	vldr	d16, [pc, #172]	; 23630 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0xbc>
   23580:	e24dd010 	sub	sp, sp, #16
   23584:	e3a04000 	mov	r4, #0
   23588:	e3510000 	cmp	r1, #0
   2358c:	e1cd20f4 	strd	r2, [sp, #4]
   23590:	e59dc018 	ldr	ip, [sp, #24]
   23594:	e58d1000 	str	r1, [sp]
   23598:	e58dc00c 	str	ip, [sp, #12]
   2359c:	f46d2adf 	vld1.64	{d18-d19}, [sp :64]
   235a0:	e5804010 	str	r4, [r0, #16]
   235a4:	f4402a8f 	vst1.32	{d18-d19}, [r0]
   235a8:	f44e078f 	vst1.32	{d16}, [lr]
   235ac:	0a000007 	beq	235d0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x5c>
   235b0:	e3520000 	cmp	r2, #0
   235b4:	0a00000b 	beq	235e8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x74>
   235b8:	e3530000 	cmp	r3, #0
   235bc:	0a00000f 	beq	23600 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   235c0:	e35c0000 	cmp	ip, #0
   235c4:	0a000013 	beq	23618 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0xa4>
   235c8:	e28dd010 	add	sp, sp, #16
   235cc:	e8bd8010 	pop	{r4, pc}
   235d0:	e3001edc 	movw	r1, #3804	; 0xedc
   235d4:	e3401004 	movt	r1, #4
   235d8:	e3000b08 	movw	r0, #2824	; 0xb08
   235dc:	e3400004 	movt	r0, #4
   235e0:	e3a02042 	mov	r2, #66	; 0x42
   235e4:	eb0024b5 	bl	2c8c0 <assertion_failed>
   235e8:	e3001edc 	movw	r1, #3804	; 0xedc
   235ec:	e3401004 	movt	r1, #4
   235f0:	e3000d98 	movw	r0, #3480	; 0xd98
   235f4:	e3400004 	movt	r0, #4
   235f8:	e3a02043 	mov	r2, #67	; 0x43
   235fc:	eb0024af 	bl	2c8c0 <assertion_failed>
   23600:	e3001edc 	movw	r1, #3804	; 0xedc
   23604:	e3401004 	movt	r1, #4
   23608:	e3000c90 	movw	r0, #3216	; 0xc90
   2360c:	e3400004 	movt	r0, #4
   23610:	e3a02044 	mov	r2, #68	; 0x44
   23614:	eb0024a9 	bl	2c8c0 <assertion_failed>
   23618:	e3001edc 	movw	r1, #3804	; 0xedc
   2361c:	e3401004 	movt	r1, #4
   23620:	e3000f08 	movw	r0, #3848	; 0xf08
   23624:	e3400004 	movt	r0, #4
   23628:	e3a02045 	mov	r2, #69	; 0x45
   2362c:	eb0024a3 	bl	2c8c0 <assertion_failed>
   23630:	00000001 	.word	0x00000001
   23634:	00000000 	.word	0x00000000

00023638 <CARPHandler::~CARPHandler()>:
   23638:	e5903010 	ldr	r3, [r0, #16]
   2363c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23640:	e1a07000 	mov	r7, r0
   23644:	e3530000 	cmp	r3, #0
   23648:	0a00000f 	beq	2368c <CARPHandler::~CARPHandler()+0x54>
   2364c:	e3a06000 	mov	r6, #0
   23650:	e1a04000 	mov	r4, r0
   23654:	e1a08006 	mov	r8, r6
   23658:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
   2365c:	e2866001 	add	r6, r6, #1
   23660:	e2550000 	subs	r0, r5, #0
   23664:	0a000004 	beq	2367c <CARPHandler::~CARPHandler()+0x44>
   23668:	eb001553 	bl	28bbc <CNetQueue::~CNetQueue()>
   2366c:	e3a0100c 	mov	r1, #12
   23670:	e1a00005 	mov	r0, r5
   23674:	eb004da0 	bl	36cfc <operator delete(void*, unsigned int)>
   23678:	e5973010 	ldr	r3, [r7, #16]
   2367c:	e584802c 	str	r8, [r4, #44]	; 0x2c
   23680:	e1530006 	cmp	r3, r6
   23684:	e284401c 	add	r4, r4, #28
   23688:	8afffff2 	bhi	23658 <CARPHandler::~CARPHandler()+0x20>
   2368c:	e1a00007 	mov	r0, r7
   23690:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00023694 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   23694:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23698:	e1a06000 	mov	r6, r0
   2369c:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   236a0:	e1a08001 	mov	r8, r1
   236a4:	e1a07002 	mov	r7, r2
   236a8:	e3500000 	cmp	r0, #0
   236ac:	1a000028 	bne	23754 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc0>
   236b0:	e5962010 	ldr	r2, [r6, #16]
   236b4:	e3520000 	cmp	r2, #0
   236b8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   236bc:	e2865015 	add	r5, r6, #21
   236c0:	e3a04000 	mov	r4, #0
   236c4:	e3a0901c 	mov	r9, #28
   236c8:	e0236499 	mla	r3, r9, r4, r6
   236cc:	e1a01005 	mov	r1, r5
   236d0:	e1a00008 	mov	r0, r8
   236d4:	e5d3c014 	ldrb	ip, [r3, #20]
   236d8:	e35c0001 	cmp	ip, #1
   236dc:	0a000002 	beq	236ec <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x58>
   236e0:	e5d33014 	ldrb	r3, [r3, #20]
   236e4:	e3530002 	cmp	r3, #2
   236e8:	1a000003 	bne	236fc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x68>
   236ec:	eb0013e3 	bl	28680 <CIPAddress::operator==(unsigned char const*) const>
   236f0:	e3500000 	cmp	r0, #0
   236f4:	1a000009 	bne	23720 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   236f8:	e5962010 	ldr	r2, [r6, #16]
   236fc:	e2844001 	add	r4, r4, #1
   23700:	e285501c 	add	r5, r5, #28
   23704:	e1520004 	cmp	r2, r4
   23708:	8affffee 	bhi	236c8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x34>
   2370c:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   23710:	e3530000 	cmp	r3, #0
   23714:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23718:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2371c:	ea0053a1 	b	385a8 <LeaveCritical>
   23720:	eb00491c 	bl	35b98 <CTimer::Get()>
   23724:	e3a0301c 	mov	r3, #28
   23728:	e0040493 	mul	r4, r3, r4
   2372c:	e0865004 	add	r5, r6, r4
   23730:	e2844019 	add	r4, r4, #25
   23734:	e5951020 	ldr	r1, [r5, #32]
   23738:	eb004780 	bl	35540 <CTimer::CancelKernelTimer(unsigned int)>
   2373c:	e0861004 	add	r1, r6, r4
   23740:	e1a00007 	mov	r0, r7
   23744:	eb004caa 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   23748:	e3a03003 	mov	r3, #3
   2374c:	e5c53014 	strb	r3, [r5, #20]
   23750:	eaffffed 	b	2370c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x78>
   23754:	eb005368 	bl	384fc <EnterCritical>
   23758:	e5962010 	ldr	r2, [r6, #16]
   2375c:	e3520000 	cmp	r2, #0
   23760:	1affffd5 	bne	236bc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   23764:	eaffffe8 	b	2370c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x78>

00023768 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   23768:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2376c:	e1a07000 	mov	r7, r0
   23770:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   23774:	e1a08001 	mov	r8, r1
   23778:	e1a09002 	mov	r9, r2
   2377c:	e3500000 	cmp	r0, #0
   23780:	1a000024 	bne	23818 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb0>
   23784:	e5972010 	ldr	r2, [r7, #16]
   23788:	e2526000 	subs	r6, r2, #0
   2378c:	0a000049 	beq	238b8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x150>
   23790:	e2875015 	add	r5, r7, #21
   23794:	e3a04000 	mov	r4, #0
   23798:	e3a06014 	mov	r6, #20
   2379c:	e3a0a01c 	mov	sl, #28
   237a0:	ea000005 	b	237bc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x54>
   237a4:	e3560014 	cmp	r6, #20
   237a8:	e285501c 	add	r5, r5, #28
   237ac:	01a06004 	moveq	r6, r4
   237b0:	e2844001 	add	r4, r4, #1
   237b4:	e1520004 	cmp	r2, r4
   237b8:	9a00000d 	bls	237f4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   237bc:	e023749a 	mla	r3, sl, r4, r7
   237c0:	e5d33014 	ldrb	r3, [r3, #20]
   237c4:	e3530000 	cmp	r3, #0
   237c8:	0afffff5 	beq	237a4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x3c>
   237cc:	e1a01005 	mov	r1, r5
   237d0:	e1a00008 	mov	r0, r8
   237d4:	eb0013a9 	bl	28680 <CIPAddress::operator==(unsigned char const*) const>
   237d8:	e3500000 	cmp	r0, #0
   237dc:	1a000008 	bne	23804 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x9c>
   237e0:	e5972010 	ldr	r2, [r7, #16]
   237e4:	e2844001 	add	r4, r4, #1
   237e8:	e285501c 	add	r5, r5, #28
   237ec:	e1520004 	cmp	r2, r4
   237f0:	8afffff1 	bhi	237bc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x54>
   237f4:	e3560014 	cmp	r6, #20
   237f8:	0a000008 	beq	23820 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb8>
   237fc:	e3560013 	cmp	r6, #19
   23800:	9a00001a 	bls	23870 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x108>
   23804:	e5973244 	ldr	r3, [r7, #580]	; 0x244
   23808:	e3530000 	cmp	r3, #0
   2380c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23810:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23814:	ea005363 	b	385a8 <LeaveCritical>
   23818:	eb005337 	bl	384fc <EnterCritical>
   2381c:	eaffffd8 	b	23784 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x1c>
   23820:	e3520014 	cmp	r2, #20
   23824:	0afffff6 	beq	23804 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x9c>
   23828:	e3a0501c 	mov	r5, #28
   2382c:	e1a06002 	mov	r6, r2
   23830:	e0050295 	mul	r5, r5, r2
   23834:	e285a015 	add	sl, r5, #21
   23838:	e2855019 	add	r5, r5, #25
   2383c:	e3a0301c 	mov	r3, #28
   23840:	e3a0000c 	mov	r0, #12
   23844:	e0247293 	mla	r4, r3, r2, r7
   23848:	e3a03000 	mov	r3, #0
   2384c:	e5c43014 	strb	r3, [r4, #20]
   23850:	eb004d11 	bl	36c9c <operator new(unsigned int)>
   23854:	e1a0b000 	mov	fp, r0
   23858:	eb00149e 	bl	28ad8 <CNetQueue::CNetQueue()>
   2385c:	e5973010 	ldr	r3, [r7, #16]
   23860:	e584b02c 	str	fp, [r4, #44]	; 0x2c
   23864:	e2833001 	add	r3, r3, #1
   23868:	e5873010 	str	r3, [r7, #16]
   2386c:	ea000003 	b	23880 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x118>
   23870:	e3a0501c 	mov	r5, #28
   23874:	e0050695 	mul	r5, r5, r6
   23878:	e285a015 	add	sl, r5, #21
   2387c:	e2855019 	add	r5, r5, #25
   23880:	e087100a 	add	r1, r7, sl
   23884:	e1a00008 	mov	r0, r8
   23888:	eb00140d 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   2388c:	e0871005 	add	r1, r7, r5
   23890:	e1a00009 	mov	r0, r9
   23894:	eb004c56 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   23898:	eb0048be 	bl	35b98 <CTimer::Get()>
   2389c:	eb0045eb 	bl	35050 <CTimer::GetTicks() const>
   238a0:	e3a0201c 	mov	r2, #28
   238a4:	e3a03004 	mov	r3, #4
   238a8:	e0267692 	mla	r6, r2, r6, r7
   238ac:	e5860028 	str	r0, [r6, #40]	; 0x28
   238b0:	e5c63014 	strb	r3, [r6, #20]
   238b4:	eaffffd2 	b	23804 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x9c>
   238b8:	e3a05019 	mov	r5, #25
   238bc:	e3a0a015 	mov	sl, #21
   238c0:	eaffffdd 	b	2383c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xd4>

000238c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   238c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   238c8:	e1a04000 	mov	r4, r0
   238cc:	e5900000 	ldr	r0, [r0]
   238d0:	e24dd034 	sub	sp, sp, #52	; 0x34
   238d4:	e3500000 	cmp	r0, #0
   238d8:	0a00002d 	beq	23994 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xd0>
   238dc:	e1a08001 	mov	r8, r1
   238e0:	e1a07002 	mov	r7, r2
   238e4:	e1a05003 	mov	r5, r3
   238e8:	eb0012ef 	bl	284ac <CNetConfig::GetIPAddress() const>
   238ec:	e2509000 	subs	r9, r0, #0
   238f0:	0a00002d 	beq	239ac <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe8>
   238f4:	e5940004 	ldr	r0, [r4, #4]
   238f8:	e3500000 	cmp	r0, #0
   238fc:	0a000030 	beq	239c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x100>
   23900:	ebfffe90 	bl	23348 <CNetDeviceLayer::GetMACAddress() const>
   23904:	e2506000 	subs	r6, r0, #0
   23908:	0a000033 	beq	239dc <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x118>
   2390c:	e1a00005 	mov	r0, r5
   23910:	e28d1004 	add	r1, sp, #4
   23914:	eb004c36 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   23918:	e28d100a 	add	r1, sp, #10
   2391c:	e1a00006 	mov	r0, r6
   23920:	eb004c33 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   23924:	e3580000 	cmp	r8, #0
   23928:	e1a00006 	mov	r0, r6
   2392c:	e28d101a 	add	r1, sp, #26
   23930:	03a03c02 	moveq	r3, #512	; 0x200
   23934:	13a03c01 	movne	r3, #256	; 0x100
   23938:	e1cd31b8 	strh	r3, [sp, #24]
   2393c:	e3a03008 	mov	r3, #8
   23940:	e3403406 	movt	r3, #1030	; 0x406
   23944:	e58d3014 	str	r3, [sp, #20]
   23948:	e3003608 	movw	r3, #1544	; 0x608
   2394c:	e3403100 	movt	r3, #256	; 0x100
   23950:	e58d3010 	str	r3, [sp, #16]
   23954:	eb004c26 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   23958:	e1a00009 	mov	r0, r9
   2395c:	e28d1020 	add	r1, sp, #32
   23960:	eb0013d7 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   23964:	e28d1024 	add	r1, sp, #36	; 0x24
   23968:	e1a00005 	mov	r0, r5
   2396c:	eb004c20 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   23970:	e28d102a 	add	r1, sp, #42	; 0x2a
   23974:	e1a00007 	mov	r0, r7
   23978:	eb0013d1 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   2397c:	e5940004 	ldr	r0, [r4, #4]
   23980:	e3a0202a 	mov	r2, #42	; 0x2a
   23984:	e28d1004 	add	r1, sp, #4
   23988:	ebfffe74 	bl	23360 <CNetDeviceLayer::Send(void const*, unsigned int)>
   2398c:	e28dd034 	add	sp, sp, #52	; 0x34
   23990:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   23994:	e3001edc 	movw	r1, #3804	; 0xedc
   23998:	e3401004 	movt	r1, #4
   2399c:	e3000b08 	movw	r0, #2824	; 0xb08
   239a0:	e3400004 	movt	r0, #4
   239a4:	e300218a 	movw	r2, #394	; 0x18a
   239a8:	eb0023c4 	bl	2c8c0 <assertion_failed>
   239ac:	e3001edc 	movw	r1, #3804	; 0xedc
   239b0:	e3401004 	movt	r1, #4
   239b4:	e3000cb8 	movw	r0, #3256	; 0xcb8
   239b8:	e3400004 	movt	r0, #4
   239bc:	e3a02f63 	mov	r2, #396	; 0x18c
   239c0:	eb0023be 	bl	2c8c0 <assertion_failed>
   239c4:	e3001edc 	movw	r1, #3804	; 0xedc
   239c8:	e3401004 	movt	r1, #4
   239cc:	e3000d98 	movw	r0, #3480	; 0xd98
   239d0:	e3400004 	movt	r0, #4
   239d4:	e300218e 	movw	r2, #398	; 0x18e
   239d8:	eb0023b8 	bl	2c8c0 <assertion_failed>
   239dc:	e3001edc 	movw	r1, #3804	; 0xedc
   239e0:	e3401004 	movt	r1, #4
   239e4:	e3000dd8 	movw	r0, #3544	; 0xdd8
   239e8:	e3400004 	movt	r0, #4
   239ec:	e3a02e19 	mov	r2, #400	; 0x190
   239f0:	eb0023b2 	bl	2c8c0 <assertion_failed>

000239f4 <CARPHandler::Process()>:
   239f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239f8:	e1a04000 	mov	r4, r0
   239fc:	e5900000 	ldr	r0, [r0]
   23a00:	e24dde65 	sub	sp, sp, #1616	; 0x650
   23a04:	e24dd00c 	sub	sp, sp, #12
   23a08:	e3500000 	cmp	r0, #0
   23a0c:	0a0000c2 	beq	23d1c <CARPHandler::Process()+0x328>
   23a10:	eb0012a5 	bl	284ac <CNetConfig::GetIPAddress() const>
   23a14:	e2505000 	subs	r5, r0, #0
   23a18:	0a0000cb 	beq	23d4c <CARPHandler::Process()+0x358>
   23a1c:	e594000c 	ldr	r0, [r4, #12]
   23a20:	e3500000 	cmp	r0, #0
   23a24:	0a0000ce 	beq	23d64 <CARPHandler::Process()+0x370>
   23a28:	e3a02000 	mov	r2, #0
   23a2c:	e28d1018 	add	r1, sp, #24
   23a30:	eb0014b0 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   23a34:	e2506000 	subs	r6, r0, #0
   23a38:	0a00000f 	beq	23a7c <CARPHandler::Process()+0x88>
   23a3c:	e356001b 	cmp	r6, #27
   23a40:	9a00000b 	bls	23a74 <CARPHandler::Process()+0x80>
   23a44:	e1dd31b8 	ldrh	r3, [sp, #24]
   23a48:	e3530c01 	cmp	r3, #256	; 0x100
   23a4c:	1a000008 	bne	23a74 <CARPHandler::Process()+0x80>
   23a50:	e1dd31ba 	ldrh	r3, [sp, #26]
   23a54:	e3530008 	cmp	r3, #8
   23a58:	1a000005 	bne	23a74 <CARPHandler::Process()+0x80>
   23a5c:	e5dd301c 	ldrb	r3, [sp, #28]
   23a60:	e3530006 	cmp	r3, #6
   23a64:	1a000002 	bne	23a74 <CARPHandler::Process()+0x80>
   23a68:	e5dd301d 	ldrb	r3, [sp, #29]
   23a6c:	e3530004 	cmp	r3, #4
   23a70:	0a00008c 	beq	23ca8 <CARPHandler::Process()+0x2b4>
   23a74:	e594000c 	ldr	r0, [r4, #12]
   23a78:	eaffffea 	b	23a28 <CARPHandler::Process()+0x34>
   23a7c:	e5943008 	ldr	r3, [r4, #8]
   23a80:	e3530000 	cmp	r3, #0
   23a84:	0a0000bc 	beq	23d7c <CARPHandler::Process()+0x388>
   23a88:	e5943004 	ldr	r3, [r4, #4]
   23a8c:	e3530000 	cmp	r3, #0
   23a90:	0a0000bf 	beq	23d94 <CARPHandler::Process()+0x3a0>
   23a94:	e5942010 	ldr	r2, [r4, #16]
   23a98:	e3520000 	cmp	r2, #0
   23a9c:	0a000026 	beq	23b3c <CARPHandler::Process()+0x148>
   23aa0:	e303a4d0 	movw	sl, #13520	; 0x34d0
   23aa4:	e340a002 	movt	sl, #2
   23aa8:	e2845015 	add	r5, r4, #21
   23aac:	e1a07006 	mov	r7, r6
   23ab0:	e3a0901c 	mov	r9, #28
   23ab4:	e0284799 	mla	r8, r9, r7, r4
   23ab8:	e5d83014 	ldrb	r3, [r8, #20]
   23abc:	e3530002 	cmp	r3, #2
   23ac0:	e6ef3073 	uxtb	r3, r3
   23ac4:	0a000040 	beq	23bcc <CARPHandler::Process()+0x1d8>
   23ac8:	e3530003 	cmp	r3, #3
   23acc:	1a000016 	bne	23b2c <CARPHandler::Process()+0x138>
   23ad0:	e5950017 	ldr	r0, [r5, #23]
   23ad4:	e3500000 	cmp	r0, #0
   23ad8:	0a00006c 	beq	23c90 <CARPHandler::Process()+0x29c>
   23adc:	e2858004 	add	r8, r5, #4
   23ae0:	ea000008 	b	23b08 <CARPHandler::Process()+0x114>
   23ae4:	e3a02006 	mov	r2, #6
   23ae8:	e1a01008 	mov	r1, r8
   23aec:	e28d0018 	add	r0, sp, #24
   23af0:	eb004a60 	bl	36478 <memcpy>
   23af4:	e5940004 	ldr	r0, [r4, #4]
   23af8:	e1a0200b 	mov	r2, fp
   23afc:	e28d1018 	add	r1, sp, #24
   23b00:	ebfffe16 	bl	23360 <CNetDeviceLayer::Send(void const*, unsigned int)>
   23b04:	e5950017 	ldr	r0, [r5, #23]
   23b08:	e3a02000 	mov	r2, #0
   23b0c:	e28d1018 	add	r1, sp, #24
   23b10:	eb001478 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   23b14:	e250b000 	subs	fp, r0, #0
   23b18:	1afffff1 	bne	23ae4 <CARPHandler::Process()+0xf0>
   23b1c:	e0234799 	mla	r3, r9, r7, r4
   23b20:	e3a02004 	mov	r2, #4
   23b24:	e5c32014 	strb	r2, [r3, #20]
   23b28:	e5942010 	ldr	r2, [r4, #16]
   23b2c:	e2877001 	add	r7, r7, #1
   23b30:	e285501c 	add	r5, r5, #28
   23b34:	e1520007 	cmp	r2, r7
   23b38:	8affffdd 	bhi	23ab4 <CARPHandler::Process()+0xc0>
   23b3c:	eb004815 	bl	35b98 <CTimer::Get()>
   23b40:	eb004542 	bl	35050 <CTimer::GetTicks() const>
   23b44:	e5943248 	ldr	r3, [r4, #584]	; 0x248
   23b48:	e301276f 	movw	r2, #5999	; 0x176f
   23b4c:	e1a05000 	mov	r5, r0
   23b50:	e0403003 	sub	r3, r0, r3
   23b54:	e1530002 	cmp	r3, r2
   23b58:	9a000018 	bls	23bc0 <CARPHandler::Process()+0x1cc>
   23b5c:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   23b60:	e5845248 	str	r5, [r4, #584]	; 0x248
   23b64:	e3500000 	cmp	r0, #0
   23b68:	1a000091 	bne	23db4 <CARPHandler::Process()+0x3c0>
   23b6c:	e594c010 	ldr	ip, [r4, #16]
   23b70:	e35c0000 	cmp	ip, #0
   23b74:	0a000011 	beq	23bc0 <CARPHandler::Process()+0x1cc>
   23b78:	e1a03004 	mov	r3, r4
   23b7c:	e3a0e01c 	mov	lr, #28
   23b80:	e3a08000 	mov	r8, #0
   23b84:	e30e7a60 	movw	r7, #60000	; 0xea60
   23b88:	e022469e 	mla	r2, lr, r6, r4
   23b8c:	e5d21014 	ldrb	r1, [r2, #20]
   23b90:	e3510004 	cmp	r1, #4
   23b94:	1a000003 	bne	23ba8 <CARPHandler::Process()+0x1b4>
   23b98:	e5931028 	ldr	r1, [r3, #40]	; 0x28
   23b9c:	e0871001 	add	r1, r7, r1
   23ba0:	e1510005 	cmp	r1, r5
   23ba4:	35c28014 	strbcc	r8, [r2, #20]
   23ba8:	e2866001 	add	r6, r6, #1
   23bac:	e283301c 	add	r3, r3, #28
   23bb0:	e15c0006 	cmp	ip, r6
   23bb4:	8afffff3 	bhi	23b88 <CARPHandler::Process()+0x194>
   23bb8:	e3500000 	cmp	r0, #0
   23bbc:	1a00007a 	bne	23dac <CARPHandler::Process()+0x3b8>
   23bc0:	e28dde65 	add	sp, sp, #1616	; 0x650
   23bc4:	e28dd00c 	add	sp, sp, #12
   23bc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bcc:	e595300f 	ldr	r3, [r5, #15]
   23bd0:	e2832001 	add	r2, r3, #1
   23bd4:	e3530002 	cmp	r3, #2
   23bd8:	e585200f 	str	r2, [r5, #15]
   23bdc:	8a00001a 	bhi	23c4c <CARPHandler::Process()+0x258>
   23be0:	e1a01005 	mov	r1, r5
   23be4:	e28d0010 	add	r0, sp, #16
   23be8:	eb001252 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   23bec:	e28d0008 	add	r0, sp, #8
   23bf0:	eb004b11 	bl	3683c <CMACAddress::CMACAddress()>
   23bf4:	e28d0008 	add	r0, sp, #8
   23bf8:	eb004b68 	bl	369a0 <CMACAddress::SetBroadcast()>
   23bfc:	e28d2010 	add	r2, sp, #16
   23c00:	e3a01001 	mov	r1, #1
   23c04:	e28d3008 	add	r3, sp, #8
   23c08:	e1a00004 	mov	r0, r4
   23c0c:	ebffff2c 	bl	238c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   23c10:	e3a03001 	mov	r3, #1
   23c14:	e5c83014 	strb	r3, [r8, #20]
   23c18:	eb0047de 	bl	35b98 <CTimer::Get()>
   23c1c:	e1a0200a 	mov	r2, sl
   23c20:	e1a03007 	mov	r3, r7
   23c24:	e3a01050 	mov	r1, #80	; 0x50
   23c28:	e58d4000 	str	r4, [sp]
   23c2c:	eb0045ee 	bl	353ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   23c30:	e585000b 	str	r0, [r5, #11]
   23c34:	e28d0008 	add	r0, sp, #8
   23c38:	eb004b13 	bl	3688c <CMACAddress::~CMACAddress()>
   23c3c:	e28d0010 	add	r0, sp, #16
   23c40:	eb00125c 	bl	285b8 <CIPAddress::~CIPAddress()>
   23c44:	e5942010 	ldr	r2, [r4, #16]
   23c48:	eaffffb7 	b	23b2c <CARPHandler::Process()+0x138>
   23c4c:	e5950017 	ldr	r0, [r5, #23]
   23c50:	e3500000 	cmp	r0, #0
   23c54:	1a000004 	bne	23c6c <CARPHandler::Process()+0x278>
   23c58:	ea000035 	b	23d34 <CARPHandler::Process()+0x340>
   23c5c:	e5940008 	ldr	r0, [r4, #8]
   23c60:	e28d1018 	add	r1, sp, #24
   23c64:	ebfffcd6 	bl	22fc4 <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   23c68:	e5950017 	ldr	r0, [r5, #23]
   23c6c:	e3a02000 	mov	r2, #0
   23c70:	e28d1018 	add	r1, sp, #24
   23c74:	eb00141f 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   23c78:	e2502000 	subs	r2, r0, #0
   23c7c:	1afffff6 	bne	23c5c <CARPHandler::Process()+0x268>
   23c80:	e0234799 	mla	r3, r9, r7, r4
   23c84:	e5c32014 	strb	r2, [r3, #20]
   23c88:	e5942010 	ldr	r2, [r4, #16]
   23c8c:	eaffffa6 	b	23b2c <CARPHandler::Process()+0x138>
   23c90:	e3001edc 	movw	r1, #3804	; 0xedc
   23c94:	e3401004 	movt	r1, #4
   23c98:	e3000f18 	movw	r0, #3864	; 0xf18
   23c9c:	e3400004 	movt	r0, #4
   23ca0:	e3a020aa 	mov	r2, #170	; 0xaa
   23ca4:	eb002305 	bl	2c8c0 <assertion_failed>
   23ca8:	e1a00005 	mov	r0, r5
   23cac:	eb00131c 	bl	28924 <CIPAddress::IsNull() const>
   23cb0:	e3500000 	cmp	r0, #0
   23cb4:	1affff6e 	bne	23a74 <CARPHandler::Process()+0x80>
   23cb8:	e28d1030 	add	r1, sp, #48	; 0x30
   23cbc:	e1a00005 	mov	r0, r5
   23cc0:	eb001286 	bl	286e0 <CIPAddress::operator!=(unsigned char const*) const>
   23cc4:	e2506000 	subs	r6, r0, #0
   23cc8:	1affff69 	bne	23a74 <CARPHandler::Process()+0x80>
   23ccc:	e28d1020 	add	r1, sp, #32
   23cd0:	e28d0008 	add	r0, sp, #8
   23cd4:	eb004adb 	bl	36848 <CMACAddress::CMACAddress(unsigned char const*)>
   23cd8:	e28d1026 	add	r1, sp, #38	; 0x26
   23cdc:	e28d0010 	add	r0, sp, #16
   23ce0:	eb001214 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   23ce4:	e1dd31be 	ldrh	r3, [sp, #30]
   23ce8:	e3530c01 	cmp	r3, #256	; 0x100
   23cec:	0a000036 	beq	23dcc <CARPHandler::Process()+0x3d8>
   23cf0:	e3530c02 	cmp	r3, #512	; 0x200
   23cf4:	1a000003 	bne	23d08 <CARPHandler::Process()+0x314>
   23cf8:	e28d2008 	add	r2, sp, #8
   23cfc:	e28d1010 	add	r1, sp, #16
   23d00:	e1a00004 	mov	r0, r4
   23d04:	ebfffe62 	bl	23694 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   23d08:	e28d0010 	add	r0, sp, #16
   23d0c:	eb001229 	bl	285b8 <CIPAddress::~CIPAddress()>
   23d10:	e28d0008 	add	r0, sp, #8
   23d14:	eb004adc 	bl	3688c <CMACAddress::~CMACAddress()>
   23d18:	eaffff55 	b	23a74 <CARPHandler::Process()+0x80>
   23d1c:	e3001edc 	movw	r1, #3804	; 0xedc
   23d20:	e3401004 	movt	r1, #4
   23d24:	e3000b08 	movw	r0, #2824	; 0xb08
   23d28:	e3400004 	movt	r0, #4
   23d2c:	e3a02057 	mov	r2, #87	; 0x57
   23d30:	eb0022e2 	bl	2c8c0 <assertion_failed>
   23d34:	e3001edc 	movw	r1, #3804	; 0xedc
   23d38:	e3401004 	movt	r1, #4
   23d3c:	e3000f18 	movw	r0, #3864	; 0xf18
   23d40:	e3400004 	movt	r0, #4
   23d44:	e3a0209f 	mov	r2, #159	; 0x9f
   23d48:	eb0022dc 	bl	2c8c0 <assertion_failed>
   23d4c:	e3001edc 	movw	r1, #3804	; 0xedc
   23d50:	e3401004 	movt	r1, #4
   23d54:	e3000cb8 	movw	r0, #3256	; 0xcb8
   23d58:	e3400004 	movt	r0, #4
   23d5c:	e3a02059 	mov	r2, #89	; 0x59
   23d60:	eb0022d6 	bl	2c8c0 <assertion_failed>
   23d64:	e3001edc 	movw	r1, #3804	; 0xedc
   23d68:	e3401004 	movt	r1, #4
   23d6c:	e3000f08 	movw	r0, #3848	; 0xf08
   23d70:	e3400004 	movt	r0, #4
   23d74:	e3a0205f 	mov	r2, #95	; 0x5f
   23d78:	eb0022d0 	bl	2c8c0 <assertion_failed>
   23d7c:	e3001edc 	movw	r1, #3804	; 0xedc
   23d80:	e3401004 	movt	r1, #4
   23d84:	e3000c90 	movw	r0, #3216	; 0xc90
   23d88:	e3400004 	movt	r0, #4
   23d8c:	e3a02088 	mov	r2, #136	; 0x88
   23d90:	eb0022ca 	bl	2c8c0 <assertion_failed>
   23d94:	e3001edc 	movw	r1, #3804	; 0xedc
   23d98:	e3401004 	movt	r1, #4
   23d9c:	e3000d98 	movw	r0, #3480	; 0xd98
   23da0:	e3400004 	movt	r0, #4
   23da4:	e3a02089 	mov	r2, #137	; 0x89
   23da8:	eb0022c4 	bl	2c8c0 <assertion_failed>
   23dac:	eb0051fd 	bl	385a8 <LeaveCritical>
   23db0:	eaffff82 	b	23bc0 <CARPHandler::Process()+0x1cc>
   23db4:	eb0051d0 	bl	384fc <EnterCritical>
   23db8:	e594c010 	ldr	ip, [r4, #16]
   23dbc:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   23dc0:	e35c0000 	cmp	ip, #0
   23dc4:	1affff6b 	bne	23b78 <CARPHandler::Process()+0x184>
   23dc8:	eaffff7a 	b	23bb8 <CARPHandler::Process()+0x1c4>
   23dcc:	e1a01006 	mov	r1, r6
   23dd0:	e28d2010 	add	r2, sp, #16
   23dd4:	e1a00004 	mov	r0, r4
   23dd8:	e28d3008 	add	r3, sp, #8
   23ddc:	ebfffeb8 	bl	238c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   23de0:	e28d2008 	add	r2, sp, #8
   23de4:	e28d1010 	add	r1, sp, #16
   23de8:	e1a00004 	mov	r0, r4
   23dec:	ebfffe5d 	bl	23768 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   23df0:	eaffffc4 	b	23d08 <CARPHandler::Process()+0x314>

00023df4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   23df4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23df8:	e1a05000 	mov	r5, r0
   23dfc:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   23e00:	e24dd024 	sub	sp, sp, #36	; 0x24
   23e04:	e3500000 	cmp	r0, #0
   23e08:	e58d1008 	str	r1, [sp, #8]
   23e0c:	e58d2014 	str	r2, [sp, #20]
   23e10:	e58d3010 	str	r3, [sp, #16]
   23e14:	1a000081 	bne	24020 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x22c>
   23e18:	e5950010 	ldr	r0, [r5, #16]
   23e1c:	e3500000 	cmp	r0, #0
   23e20:	e1a07000 	mov	r7, r0
   23e24:	0a0000ad 	beq	240e0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   23e28:	e3e09000 	mvn	r9, #0
   23e2c:	e285a015 	add	sl, r5, #21
   23e30:	e3a04000 	mov	r4, #0
   23e34:	e3a07014 	mov	r7, #20
   23e38:	e3a0801c 	mov	r8, #28
   23e3c:	e1a06005 	mov	r6, r5
   23e40:	e58d900c 	str	r9, [sp, #12]
   23e44:	ea000007 	b	23e68 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x74>
   23e48:	e3530000 	cmp	r3, #0
   23e4c:	1a00004f 	bne	23f90 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x19c>
   23e50:	e3570014 	cmp	r7, #20
   23e54:	e28aa01c 	add	sl, sl, #28
   23e58:	01a07004 	moveq	r7, r4
   23e5c:	e2844001 	add	r4, r4, #1
   23e60:	e1500004 	cmp	r0, r4
   23e64:	9a000017 	bls	23ec8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xd4>
   23e68:	e00b0498 	mul	fp, r8, r4
   23e6c:	e086500b 	add	r5, r6, fp
   23e70:	e5d53014 	ldrb	r3, [r5, #20]
   23e74:	e3530003 	cmp	r3, #3
   23e78:	e6ef3073 	uxtb	r3, r3
   23e7c:	9afffff1 	bls	23e48 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x54>
   23e80:	e3530004 	cmp	r3, #4
   23e84:	1a0000a9 	bne	24130 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   23e88:	e59a3013 	ldr	r3, [sl, #19]
   23e8c:	e1a0100a 	mov	r1, sl
   23e90:	e59d0008 	ldr	r0, [sp, #8]
   23e94:	e1530009 	cmp	r3, r9
   23e98:	31a09003 	movcc	r9, r3
   23e9c:	e59d300c 	ldr	r3, [sp, #12]
   23ea0:	31a03004 	movcc	r3, r4
   23ea4:	e58d300c 	str	r3, [sp, #12]
   23ea8:	eb0011f4 	bl	28680 <CIPAddress::operator==(unsigned char const*) const>
   23eac:	e3500000 	cmp	r0, #0
   23eb0:	1a00006d 	bne	2406c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x278>
   23eb4:	e5960010 	ldr	r0, [r6, #16]
   23eb8:	e2844001 	add	r4, r4, #1
   23ebc:	e28aa01c 	add	sl, sl, #28
   23ec0:	e1500004 	cmp	r0, r4
   23ec4:	8affffe7 	bhi	23e68 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x74>
   23ec8:	e1a05006 	mov	r5, r6
   23ecc:	e3570014 	cmp	r7, #20
   23ed0:	0a000045 	beq	23fec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1f8>
   23ed4:	e3a0601c 	mov	r6, #28
   23ed8:	e0060796 	mul	r6, r6, r7
   23edc:	e2866015 	add	r6, r6, #21
   23ee0:	e3a0401c 	mov	r4, #28
   23ee4:	e59d0008 	ldr	r0, [sp, #8]
   23ee8:	e0851006 	add	r1, r5, r6
   23eec:	e3a06001 	mov	r6, #1
   23ef0:	e0245794 	mla	r4, r4, r7, r5
   23ef4:	e5c46014 	strb	r6, [r4, #20]
   23ef8:	eb001271 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   23efc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   23f00:	e3500000 	cmp	r0, #0
   23f04:	0a00006f 	beq	240c8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2d4>
   23f08:	e59d1010 	ldr	r1, [sp, #16]
   23f0c:	e3a03000 	mov	r3, #0
   23f10:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   23f14:	eb00132d 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   23f18:	eb00471e 	bl	35b98 <CTimer::Get()>
   23f1c:	eb00444b 	bl	35050 <CTimer::GetTicks() const>
   23f20:	e5846024 	str	r6, [r4, #36]	; 0x24
   23f24:	e5840028 	str	r0, [r4, #40]	; 0x28
   23f28:	eb00471a 	bl	35b98 <CTimer::Get()>
   23f2c:	e1a03007 	mov	r3, r7
   23f30:	e3a01050 	mov	r1, #80	; 0x50
   23f34:	e58d5000 	str	r5, [sp]
   23f38:	e30324d0 	movw	r2, #13520	; 0x34d0
   23f3c:	e3402002 	movt	r2, #2
   23f40:	eb004529 	bl	353ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   23f44:	e5840020 	str	r0, [r4, #32]
   23f48:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   23f4c:	e3530000 	cmp	r3, #0
   23f50:	1a00005a 	bne	240c0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2cc>
   23f54:	e28d0018 	add	r0, sp, #24
   23f58:	eb004a37 	bl	3683c <CMACAddress::CMACAddress()>
   23f5c:	e28d0018 	add	r0, sp, #24
   23f60:	eb004a8e 	bl	369a0 <CMACAddress::SetBroadcast()>
   23f64:	e1a00005 	mov	r0, r5
   23f68:	e59d2008 	ldr	r2, [sp, #8]
   23f6c:	e28d3018 	add	r3, sp, #24
   23f70:	e3a01001 	mov	r1, #1
   23f74:	ebfffe52 	bl	238c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   23f78:	e28d0018 	add	r0, sp, #24
   23f7c:	eb004a42 	bl	3688c <CMACAddress::~CMACAddress()>
   23f80:	e3a02000 	mov	r2, #0
   23f84:	e1a00002 	mov	r0, r2
   23f88:	e28dd024 	add	sp, sp, #36	; 0x24
   23f8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f90:	e59d0008 	ldr	r0, [sp, #8]
   23f94:	e1a0100a 	mov	r1, sl
   23f98:	eb0011b8 	bl	28680 <CIPAddress::operator==(unsigned char const*) const>
   23f9c:	e3500000 	cmp	r0, #0
   23fa0:	0affffc3 	beq	23eb4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xc0>
   23fa4:	e1a03005 	mov	r3, r5
   23fa8:	e1a05006 	mov	r5, r6
   23fac:	e1a06003 	mov	r6, r3
   23fb0:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
   23fb4:	e3500000 	cmp	r0, #0
   23fb8:	0a000050 	beq	24100 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   23fbc:	e3a03000 	mov	r3, #0
   23fc0:	e59d1010 	ldr	r1, [sp, #16]
   23fc4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   23fc8:	eb001300 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   23fcc:	eb0046f1 	bl	35b98 <CTimer::Get()>
   23fd0:	eb00441e 	bl	35050 <CTimer::GetTicks() const>
   23fd4:	e5860028 	str	r0, [r6, #40]	; 0x28
   23fd8:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   23fdc:	e3530000 	cmp	r3, #0
   23fe0:	0affffe6 	beq	23f80 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   23fe4:	eb00516f 	bl	385a8 <LeaveCritical>
   23fe8:	eaffffe4 	b	23f80 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   23fec:	e3500014 	cmp	r0, #20
   23ff0:	1a00000c 	bne	24028 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x234>
   23ff4:	e59d300c 	ldr	r3, [sp, #12]
   23ff8:	e3530013 	cmp	r3, #19
   23ffc:	8a000045 	bhi	24118 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   24000:	e59d700c 	ldr	r7, [sp, #12]
   24004:	e3a0601c 	mov	r6, #28
   24008:	e3a02000 	mov	r2, #0
   2400c:	e0060796 	mul	r6, r6, r7
   24010:	e0853006 	add	r3, r5, r6
   24014:	e2866015 	add	r6, r6, #21
   24018:	e5c32014 	strb	r2, [r3, #20]
   2401c:	eaffffaf 	b	23ee0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   24020:	eb005135 	bl	384fc <EnterCritical>
   24024:	eaffff7b 	b	23e18 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   24028:	e3a0601c 	mov	r6, #28
   2402c:	e1a07000 	mov	r7, r0
   24030:	e0060096 	mul	r6, r6, r0
   24034:	e2866015 	add	r6, r6, #21
   24038:	e3a0301c 	mov	r3, #28
   2403c:	e0245093 	mla	r4, r3, r0, r5
   24040:	e3a03000 	mov	r3, #0
   24044:	e3a0000c 	mov	r0, #12
   24048:	e5c43014 	strb	r3, [r4, #20]
   2404c:	eb004b12 	bl	36c9c <operator new(unsigned int)>
   24050:	e1a08000 	mov	r8, r0
   24054:	eb00129f 	bl	28ad8 <CNetQueue::CNetQueue()>
   24058:	e5953010 	ldr	r3, [r5, #16]
   2405c:	e584802c 	str	r8, [r4, #44]	; 0x2c
   24060:	e2833001 	add	r3, r3, #1
   24064:	e5853010 	str	r3, [r5, #16]
   24068:	eaffff9c 	b	23ee0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   2406c:	e1a03005 	mov	r3, r5
   24070:	e1a05006 	mov	r5, r6
   24074:	e1a06003 	mov	r6, r3
   24078:	e59d3014 	ldr	r3, [sp, #20]
   2407c:	e3530000 	cmp	r3, #0
   24080:	0a000018 	beq	240e8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2f4>
   24084:	e28b3019 	add	r3, fp, #25
   24088:	e58d0008 	str	r0, [sp, #8]
   2408c:	e0851003 	add	r1, r5, r3
   24090:	e59d0014 	ldr	r0, [sp, #20]
   24094:	eb004a31 	bl	36960 <CMACAddress::Set(unsigned char const*)>
   24098:	eb0046be 	bl	35b98 <CTimer::Get()>
   2409c:	eb0043eb 	bl	35050 <CTimer::GetTicks() const>
   240a0:	e5860028 	str	r0, [r6, #40]	; 0x28
   240a4:	e59d2008 	ldr	r2, [sp, #8]
   240a8:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   240ac:	e3530000 	cmp	r3, #0
   240b0:	0affffb3 	beq	23f84 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x190>
   240b4:	eb00513b 	bl	385a8 <LeaveCritical>
   240b8:	e59d2008 	ldr	r2, [sp, #8]
   240bc:	eaffffb0 	b	23f84 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x190>
   240c0:	eb005138 	bl	385a8 <LeaveCritical>
   240c4:	eaffffa2 	b	23f54 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x160>
   240c8:	e3001edc 	movw	r1, #3804	; 0xedc
   240cc:	e3401004 	movt	r1, #4
   240d0:	e3000f18 	movw	r0, #3864	; 0xf18
   240d4:	e3400004 	movt	r0, #4
   240d8:	e3002129 	movw	r2, #297	; 0x129
   240dc:	eb0021f7 	bl	2c8c0 <assertion_failed>
   240e0:	e3a06015 	mov	r6, #21
   240e4:	eaffffd3 	b	24038 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x244>
   240e8:	e3001edc 	movw	r1, #3804	; 0xedc
   240ec:	e3401004 	movt	r1, #4
   240f0:	e3000f50 	movw	r0, #3920	; 0xf50
   240f4:	e3400004 	movt	r0, #4
   240f8:	e3a020ff 	mov	r2, #255	; 0xff
   240fc:	eb0021ef 	bl	2c8c0 <assertion_failed>
   24100:	e3001edc 	movw	r1, #3804	; 0xedc
   24104:	e3401004 	movt	r1, #4
   24108:	e3000f30 	movw	r0, #3888	; 0xf30
   2410c:	e3400004 	movt	r0, #4
   24110:	e3a020eb 	mov	r2, #235	; 0xeb
   24114:	eb0021e9 	bl	2c8c0 <assertion_failed>
   24118:	e3001edc 	movw	r1, #3804	; 0xedc
   2411c:	e3401004 	movt	r1, #4
   24120:	e3000f64 	movw	r0, #3940	; 0xf64
   24124:	e3400004 	movt	r0, #4
   24128:	e300211d 	movw	r2, #285	; 0x11d
   2412c:	eb0021e3 	bl	2c8c0 <assertion_failed>
   24130:	e3001edc 	movw	r1, #3804	; 0xedc
   24134:	e3401004 	movt	r1, #4
   24138:	e30b0708 	movw	r0, #46856	; 0xb708
   2413c:	e3400003 	movt	r0, #3
   24140:	e300210a 	movw	r2, #266	; 0x10a
   24144:	eb0021dd 	bl	2c8c0 <assertion_failed>

00024148 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   24148:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2414c:	e3510000 	cmp	r1, #0
   24150:	e24dd014 	sub	sp, sp, #20
   24154:	e58d1000 	str	r1, [sp]
   24158:	e1cd20f4 	strd	r2, [sp, #4]
   2415c:	e59d1018 	ldr	r1, [sp, #24]
   24160:	e58d100c 	str	r1, [sp, #12]
   24164:	f46d0adf 	vld1.64	{d16-d17}, [sp :64]
   24168:	f4400a8f 	vst1.32	{d16-d17}, [r0]
   2416c:	0a000007 	beq	24190 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x48>
   24170:	e3520000 	cmp	r2, #0
   24174:	0a00000b 	beq	241a8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x60>
   24178:	e3530000 	cmp	r3, #0
   2417c:	0a00000f 	beq	241c0 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   24180:	e3510000 	cmp	r1, #0
   24184:	0a000013 	beq	241d8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x90>
   24188:	e28dd014 	add	sp, sp, #20
   2418c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   24190:	e3001f80 	movw	r1, #3968	; 0xf80
   24194:	e3401004 	movt	r1, #4
   24198:	e3000b08 	movw	r0, #2824	; 0xb08
   2419c:	e3400004 	movt	r0, #4
   241a0:	e3a0203b 	mov	r2, #59	; 0x3b
   241a4:	eb0021c5 	bl	2c8c0 <assertion_failed>
   241a8:	e3001f80 	movw	r1, #3968	; 0xf80
   241ac:	e3401004 	movt	r1, #4
   241b0:	e3000c38 	movw	r0, #3128	; 0xc38
   241b4:	e3400004 	movt	r0, #4
   241b8:	e3a0203c 	mov	r2, #60	; 0x3c
   241bc:	eb0021bf 	bl	2c8c0 <assertion_failed>
   241c0:	e3001f80 	movw	r1, #3968	; 0xf80
   241c4:	e3401004 	movt	r1, #4
   241c8:	e3000f08 	movw	r0, #3848	; 0xf08
   241cc:	e3400004 	movt	r0, #4
   241d0:	e3a0203d 	mov	r2, #61	; 0x3d
   241d4:	eb0021b9 	bl	2c8c0 <assertion_failed>
   241d8:	e3001f80 	movw	r1, #3968	; 0xf80
   241dc:	e3401004 	movt	r1, #4
   241e0:	e3000f90 	movw	r0, #3984	; 0xf90
   241e4:	e3400004 	movt	r0, #4
   241e8:	e3a0203e 	mov	r2, #62	; 0x3e
   241ec:	eb0021b3 	bl	2c8c0 <assertion_failed>

000241f0 <CICMPHandler::~CICMPHandler()>:
   241f0:	e12fff1e 	bx	lr

000241f4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   241f4:	e92d4070 	push	{r4, r5, r6, lr}
   241f8:	e3510002 	cmp	r1, #2
   241fc:	e24dd010 	sub	sp, sp, #16
   24200:	8a000020 	bhi	24288 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x94>
   24204:	e1a04002 	mov	r4, r2
   24208:	e3520000 	cmp	r2, #0
   2420c:	e5cd1000 	strb	r1, [sp]
   24210:	0a000022 	beq	242a0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xac>
   24214:	e1a05003 	mov	r5, r3
   24218:	e2841010 	add	r1, r4, #16
   2421c:	e5d23009 	ldrb	r3, [r2, #9]
   24220:	e1a06000 	mov	r6, r0
   24224:	e3a02004 	mov	r2, #4
   24228:	e28d0002 	add	r0, sp, #2
   2422c:	e5cd3001 	strb	r3, [sp, #1]
   24230:	eb004890 	bl	36478 <memcpy>
   24234:	e3a02004 	mov	r2, #4
   24238:	e284100c 	add	r1, r4, #12
   2423c:	e28d0006 	add	r0, sp, #6
   24240:	eb00488c 	bl	36478 <memcpy>
   24244:	e3550000 	cmp	r5, #0
   24248:	0a00001a 	beq	242b8 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   2424c:	e1d520b2 	ldrh	r2, [r5, #2]
   24250:	e1d530b0 	ldrh	r3, [r5]
   24254:	e596000c 	ldr	r0, [r6, #12]
   24258:	e6bf2fb2 	rev16	r2, r2
   2425c:	e6bf3fb3 	rev16	r3, r3
   24260:	e1cd20ba 	strh	r2, [sp, #10]
   24264:	e3500000 	cmp	r0, #0
   24268:	e1cd30bc 	strh	r3, [sp, #12]
   2426c:	0a000017 	beq	242d0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xdc>
   24270:	e3a03000 	mov	r3, #0
   24274:	e3a0200e 	mov	r2, #14
   24278:	e1a0100d 	mov	r1, sp
   2427c:	eb001253 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   24280:	e28dd010 	add	sp, sp, #16
   24284:	e8bd8070 	pop	{r4, r5, r6, pc}
   24288:	e3001f80 	movw	r1, #3968	; 0xf80
   2428c:	e3401004 	movt	r1, #4
   24290:	e3000fac 	movw	r0, #4012	; 0xfac
   24294:	e3400004 	movt	r0, #4
   24298:	e3a020ee 	mov	r2, #238	; 0xee
   2429c:	eb002187 	bl	2c8c0 <assertion_failed>
   242a0:	e3001f80 	movw	r1, #3968	; 0xf80
   242a4:	e3401004 	movt	r1, #4
   242a8:	e3000fcc 	movw	r0, #4044	; 0xfcc
   242ac:	e3400004 	movt	r0, #4
   242b0:	e3a020f3 	mov	r2, #243	; 0xf3
   242b4:	eb002181 	bl	2c8c0 <assertion_failed>
   242b8:	e3001f80 	movw	r1, #3968	; 0xf80
   242bc:	e3401004 	movt	r1, #4
   242c0:	e3000fdc 	movw	r0, #4060	; 0xfdc
   242c4:	e3400004 	movt	r0, #4
   242c8:	e3a020f8 	mov	r2, #248	; 0xf8
   242cc:	eb00217b 	bl	2c8c0 <assertion_failed>
   242d0:	e3001f80 	movw	r1, #3968	; 0xf80
   242d4:	e3401004 	movt	r1, #4
   242d8:	e3000f90 	movw	r0, #3984	; 0xf90
   242dc:	e3400004 	movt	r0, #4
   242e0:	e3a020fc 	mov	r2, #252	; 0xfc
   242e4:	eb002175 	bl	2c8c0 <assertion_failed>

000242e8 <CICMPHandler::Process()>:
   242e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   242ec:	e1a06000 	mov	r6, r0
   242f0:	e5900008 	ldr	r0, [r0, #8]
   242f4:	e24dde66 	sub	sp, sp, #1632	; 0x660
   242f8:	e24dd00c 	sub	sp, sp, #12
   242fc:	e3500000 	cmp	r0, #0
   24300:	0a00007c 	beq	244f8 <CICMPHandler::Process()+0x210>
   24304:	e28d7010 	add	r7, sp, #16
   24308:	e28d200c 	add	r2, sp, #12
   2430c:	e28d1028 	add	r1, sp, #40	; 0x28
   24310:	eb001278 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   24314:	e2505000 	subs	r5, r0, #0
   24318:	0a00007c 	beq	24510 <CICMPHandler::Process()+0x228>
   2431c:	e59d400c 	ldr	r4, [sp, #12]
   24320:	e3540000 	cmp	r4, #0
   24324:	0a00004f 	beq	24468 <CICMPHandler::Process()+0x180>
   24328:	e5d43000 	ldrb	r3, [r4]
   2432c:	e3530001 	cmp	r3, #1
   24330:	1a000052 	bne	24480 <CICMPHandler::Process()+0x198>
   24334:	e2841001 	add	r1, r4, #1
   24338:	e1a00007 	mov	r0, r7
   2433c:	eb00107d 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   24340:	e2841005 	add	r1, r4, #5
   24344:	e28d0018 	add	r0, sp, #24
   24348:	eb00107a 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   2434c:	e3a01009 	mov	r1, #9
   24350:	e1a00004 	mov	r0, r4
   24354:	eb004a68 	bl	36cfc <operator delete(void*, unsigned int)>
   24358:	e5963000 	ldr	r3, [r6]
   2435c:	e3530000 	cmp	r3, #0
   24360:	0a00004c 	beq	24498 <CICMPHandler::Process()+0x1b0>
   24364:	e28d0018 	add	r0, sp, #24
   24368:	eb00117b 	bl	2895c <CIPAddress::IsBroadcast() const>
   2436c:	e3500000 	cmp	r0, #0
   24370:	1a000009 	bne	2439c <CICMPHandler::Process()+0xb4>
   24374:	e5960000 	ldr	r0, [r6]
   24378:	eb001055 	bl	284d4 <CNetConfig::GetBroadcastAddress() const>
   2437c:	e1a01000 	mov	r1, r0
   24380:	e28d0018 	add	r0, sp, #24
   24384:	eb00108c 	bl	285bc <CIPAddress::operator==(CIPAddress const&) const>
   24388:	e3550007 	cmp	r5, #7
   2438c:	93800001 	orrls	r0, r0, #1
   24390:	e6ef0070 	uxtb	r0, r0
   24394:	e3500000 	cmp	r0, #0
   24398:	0a000005 	beq	243b4 <CICMPHandler::Process()+0xcc>
   2439c:	e28d0018 	add	r0, sp, #24
   243a0:	eb001084 	bl	285b8 <CIPAddress::~CIPAddress()>
   243a4:	e1a00007 	mov	r0, r7
   243a8:	eb001082 	bl	285b8 <CIPAddress::~CIPAddress()>
   243ac:	e5960008 	ldr	r0, [r6, #8]
   243b0:	eaffffd4 	b	24308 <CICMPHandler::Process()+0x20>
   243b4:	e1a01005 	mov	r1, r5
   243b8:	e28d0028 	add	r0, sp, #40	; 0x28
   243bc:	eb001313 	bl	29010 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   243c0:	e3500000 	cmp	r0, #0
   243c4:	1afffff4 	bne	2439c <CICMPHandler::Process()+0xb4>
   243c8:	e5dd3028 	ldrb	r3, [sp, #40]	; 0x28
   243cc:	e3530008 	cmp	r3, #8
   243d0:	0a000036 	beq	244b0 <CICMPHandler::Process()+0x1c8>
   243d4:	e355001c 	cmp	r5, #28
   243d8:	9affffef 	bls	2439c <CICMPHandler::Process()+0xb4>
   243dc:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   243e0:	e203400f 	and	r4, r3, #15
   243e4:	e2442005 	sub	r2, r4, #5
   243e8:	e3520001 	cmp	r2, #1
   243ec:	8affffea 	bhi	2439c <CICMPHandler::Process()+0xb4>
   243f0:	e1a03223 	lsr	r3, r3, #4
   243f4:	e3530004 	cmp	r3, #4
   243f8:	1affffe7 	bne	2439c <CICMPHandler::Process()+0xb4>
   243fc:	e5960000 	ldr	r0, [r6]
   24400:	eb001029 	bl	284ac <CNetConfig::GetIPAddress() const>
   24404:	e28d103c 	add	r1, sp, #60	; 0x3c
   24408:	eb0010b4 	bl	286e0 <CIPAddress::operator!=(unsigned char const*) const>
   2440c:	e3500000 	cmp	r0, #0
   24410:	1affffe1 	bne	2439c <CICMPHandler::Process()+0xb4>
   24414:	e1a04104 	lsl	r4, r4, #2
   24418:	e2843010 	add	r3, r4, #16
   2441c:	e1530005 	cmp	r3, r5
   24420:	8affffdd 	bhi	2439c <CICMPHandler::Process()+0xb4>
   24424:	e5dd3028 	ldrb	r3, [sp, #40]	; 0x28
   24428:	e28d2030 	add	r2, sp, #48	; 0x30
   2442c:	e0824004 	add	r4, r2, r4
   24430:	e2433003 	sub	r3, r3, #3
   24434:	e3530009 	cmp	r3, #9
   24438:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2443c:	eaffffd6 	b	2439c <CICMPHandler::Process()+0xb4>
   24440:	00024608 	.word	0x00024608
   24444:	0002439c 	.word	0x0002439c
   24448:	00024594 	.word	0x00024594
   2444c:	0002439c 	.word	0x0002439c
   24450:	0002439c 	.word	0x0002439c
   24454:	0002439c 	.word	0x0002439c
   24458:	0002439c 	.word	0x0002439c
   2445c:	0002439c 	.word	0x0002439c
   24460:	00024558 	.word	0x00024558
   24464:	0002451c 	.word	0x0002451c
   24468:	e3001f80 	movw	r1, #3968	; 0xf80
   2446c:	e3401004 	movt	r1, #4
   24470:	e30c0b74 	movw	r0, #52084	; 0xcb74
   24474:	e3400003 	movt	r0, #3
   24478:	e3a02052 	mov	r2, #82	; 0x52
   2447c:	eb00210f 	bl	2c8c0 <assertion_failed>
   24480:	e3001f80 	movw	r1, #3968	; 0xf80
   24484:	e3401004 	movt	r1, #4
   24488:	e3000ff4 	movw	r0, #4084	; 0xff4
   2448c:	e3400004 	movt	r0, #4
   24490:	e3a02053 	mov	r2, #83	; 0x53
   24494:	eb002109 	bl	2c8c0 <assertion_failed>
   24498:	e3001f80 	movw	r1, #3968	; 0xf80
   2449c:	e3401004 	movt	r1, #4
   244a0:	e3000b08 	movw	r0, #2824	; 0xb08
   244a4:	e3400004 	movt	r0, #4
   244a8:	e3a0205b 	mov	r2, #91	; 0x5b
   244ac:	eb002103 	bl	2c8c0 <assertion_failed>
   244b0:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   244b4:	e3530000 	cmp	r3, #0
   244b8:	1affffb7 	bne	2439c <CICMPHandler::Process()+0xb4>
   244bc:	e1a01005 	mov	r1, r5
   244c0:	e28d0028 	add	r0, sp, #40	; 0x28
   244c4:	e58d3028 	str	r3, [sp, #40]	; 0x28
   244c8:	eb0012d0 	bl	29010 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   244cc:	e1cd02ba 	strh	r0, [sp, #42]	; 0x2a
   244d0:	e5960004 	ldr	r0, [r6, #4]
   244d4:	e3500000 	cmp	r0, #0
   244d8:	0a000059 	beq	24644 <CICMPHandler::Process()+0x35c>
   244dc:	e3a02001 	mov	r2, #1
   244e0:	e1a03005 	mov	r3, r5
   244e4:	e58d2000 	str	r2, [sp]
   244e8:	e1a01007 	mov	r1, r7
   244ec:	e28d2028 	add	r2, sp, #40	; 0x28
   244f0:	ebfff79b 	bl	22364 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   244f4:	eaffffa8 	b	2439c <CICMPHandler::Process()+0xb4>
   244f8:	e3001f80 	movw	r1, #3968	; 0xf80
   244fc:	e3401004 	movt	r1, #4
   24500:	e3000f08 	movw	r0, #3848	; 0xf08
   24504:	e3400004 	movt	r0, #4
   24508:	e3a0204e 	mov	r2, #78	; 0x4e
   2450c:	eb0020eb 	bl	2c8c0 <assertion_failed>
   24510:	e28dde66 	add	sp, sp, #1632	; 0x660
   24514:	e28dd00c 	add	sp, sp, #12
   24518:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2451c:	eb002b64 	bl	2f2b4 <CLogger::Get()>
   24520:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   24524:	e58d3000 	str	r3, [sp]
   24528:	e3a02002 	mov	r2, #2
   2452c:	e301305c 	movw	r3, #4188	; 0x105c
   24530:	e3403004 	movt	r3, #4
   24534:	e30111e8 	movw	r1, #4584	; 0x11e8
   24538:	e3401004 	movt	r1, #4
   2453c:	eb002d2a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24540:	e1a03004 	mov	r3, r4
   24544:	e28d2030 	add	r2, sp, #48	; 0x30
   24548:	e3a01002 	mov	r1, #2
   2454c:	e1a00006 	mov	r0, r6
   24550:	ebffff27 	bl	241f4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   24554:	eaffff90 	b	2439c <CICMPHandler::Process()+0xb4>
   24558:	eb002b55 	bl	2f2b4 <CLogger::Get()>
   2455c:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   24560:	e58d3000 	str	r3, [sp]
   24564:	e3a02002 	mov	r2, #2
   24568:	e3013048 	movw	r3, #4168	; 0x1048
   2456c:	e3403004 	movt	r3, #4
   24570:	e30111e8 	movw	r1, #4584	; 0x11e8
   24574:	e3401004 	movt	r1, #4
   24578:	eb002d1b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2457c:	e1a03004 	mov	r3, r4
   24580:	e28d2030 	add	r2, sp, #48	; 0x30
   24584:	e3a01001 	mov	r1, #1
   24588:	e1a00006 	mov	r0, r6
   2458c:	ebffff18 	bl	241f4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   24590:	eaffff81 	b	2439c <CICMPHandler::Process()+0xb4>
   24594:	e28d102c 	add	r1, sp, #44	; 0x2c
   24598:	e28d0020 	add	r0, sp, #32
   2459c:	eb000fe5 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   245a0:	e5963004 	ldr	r3, [r6, #4]
   245a4:	e3530000 	cmp	r3, #0
   245a8:	0a00002b 	beq	2465c <CICMPHandler::Process()+0x374>
   245ac:	e5960000 	ldr	r0, [r6]
   245b0:	eb000fbd 	bl	284ac <CNetConfig::GetIPAddress() const>
   245b4:	e1a04000 	mov	r4, r0
   245b8:	e5960000 	ldr	r0, [r6]
   245bc:	eb000fbe 	bl	284bc <CNetConfig::GetNetMask() const>
   245c0:	e1a01004 	mov	r1, r4
   245c4:	e1a02000 	mov	r2, r0
   245c8:	e28d0020 	add	r0, sp, #32
   245cc:	eb001113 	bl	28a20 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   245d0:	e3500000 	cmp	r0, #0
   245d4:	0a000008 	beq	245fc <CICMPHandler::Process()+0x314>
   245d8:	e28d4040 	add	r4, sp, #64	; 0x40
   245dc:	e5960004 	ldr	r0, [r6, #4]
   245e0:	e1a01004 	mov	r1, r4
   245e4:	ebfff897 	bl	22848 <CNetworkLayer::GetGateway(unsigned char const*) const>
   245e8:	e1a01000 	mov	r1, r0
   245ec:	e1a00007 	mov	r0, r7
   245f0:	eb00103a 	bl	286e0 <CIPAddress::operator!=(unsigned char const*) const>
   245f4:	e3500000 	cmp	r0, #0
   245f8:	0a00001d 	beq	24674 <CICMPHandler::Process()+0x38c>
   245fc:	e28d0020 	add	r0, sp, #32
   24600:	eb000fec 	bl	285b8 <CIPAddress::~CIPAddress()>
   24604:	eaffff64 	b	2439c <CICMPHandler::Process()+0xb4>
   24608:	eb002b29 	bl	2f2b4 <CLogger::Get()>
   2460c:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   24610:	e58d3000 	str	r3, [sp]
   24614:	e3a02004 	mov	r2, #4
   24618:	e3013018 	movw	r3, #4120	; 0x1018
   2461c:	e3403004 	movt	r3, #4
   24620:	e30111e8 	movw	r1, #4584	; 0x11e8
   24624:	e3401004 	movt	r1, #4
   24628:	eb002cef 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2462c:	e1a03004 	mov	r3, r4
   24630:	e28d2030 	add	r2, sp, #48	; 0x30
   24634:	e3a01000 	mov	r1, #0
   24638:	e1a00006 	mov	r0, r6
   2463c:	ebfffeec 	bl	241f4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   24640:	eaffff55 	b	2439c <CICMPHandler::Process()+0xb4>
   24644:	e3001f80 	movw	r1, #3968	; 0xf80
   24648:	e3401004 	movt	r1, #4
   2464c:	e3000c38 	movw	r0, #3128	; 0xc38
   24650:	e3400004 	movt	r0, #4
   24654:	e3a02078 	mov	r2, #120	; 0x78
   24658:	eb002098 	bl	2c8c0 <assertion_failed>
   2465c:	e3001f80 	movw	r1, #3968	; 0xf80
   24660:	e3401004 	movt	r1, #4
   24664:	e3000c38 	movw	r0, #3128	; 0xc38
   24668:	e3400004 	movt	r0, #4
   2466c:	e3a020a7 	mov	r2, #167	; 0xa7
   24670:	eb002092 	bl	2c8c0 <assertion_failed>
   24674:	eb002b0e 	bl	2f2b4 <CLogger::Get()>
   24678:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   2467c:	e3a02004 	mov	r2, #4
   24680:	e58d3000 	str	r3, [sp]
   24684:	e30111e8 	movw	r1, #4584	; 0x11e8
   24688:	e3401004 	movt	r1, #4
   2468c:	e3013038 	movw	r3, #4152	; 0x1038
   24690:	e3403004 	movt	r3, #4
   24694:	eb002cd4 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24698:	e5965004 	ldr	r5, [r6, #4]
   2469c:	e28d0020 	add	r0, sp, #32
   246a0:	eb00107b 	bl	28894 <CIPAddress::Get() const>
   246a4:	e1a01004 	mov	r1, r4
   246a8:	e1a02000 	mov	r2, r0
   246ac:	e1a00005 	mov	r0, r5
   246b0:	ebfff862 	bl	22840 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   246b4:	e28d0020 	add	r0, sp, #32
   246b8:	eb000fbe 	bl	285b8 <CIPAddress::~CIPAddress()>
   246bc:	eaffff36 	b	2439c <CICMPHandler::Process()+0xb4>

000246c0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   246c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   246c4:	e2524000 	subs	r4, r2, #0
   246c8:	e24dd020 	sub	sp, sp, #32
   246cc:	0a000043 	beq	247e0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x120>
   246d0:	e1a05003 	mov	r5, r3
   246d4:	e3530014 	cmp	r3, #20
   246d8:	9a000046 	bls	247f8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x138>
   246dc:	e5d42000 	ldrb	r2, [r4]
   246e0:	e1a08001 	mov	r8, r1
   246e4:	e202300f 	and	r3, r2, #15
   246e8:	e2431005 	sub	r1, r3, #5
   246ec:	e3510001 	cmp	r1, #1
   246f0:	8a000046 	bhi	24810 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x150>
   246f4:	e1a02222 	lsr	r2, r2, #4
   246f8:	e1a06103 	lsl	r6, r3, #2
   246fc:	e3520004 	cmp	r2, #4
   24700:	1a000048 	bne	24828 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x168>
   24704:	e1a07000 	mov	r7, r0
   24708:	e5900000 	ldr	r0, [r0]
   2470c:	eb000f66 	bl	284ac <CNetConfig::GetIPAddress() const>
   24710:	e284100c 	add	r1, r4, #12
   24714:	eb000fd9 	bl	28680 <CIPAddress::operator==(unsigned char const*) const>
   24718:	e3500000 	cmp	r0, #0
   2471c:	0a000047 	beq	24840 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   24720:	e2863008 	add	r3, r6, #8
   24724:	e1530005 	cmp	r3, r5
   24728:	8a00004a 	bhi	24858 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   2472c:	e0846006 	add	r6, r4, r6
   24730:	e3580000 	cmp	r8, #0
   24734:	0a000026 	beq	247d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x114>
   24738:	e3580001 	cmp	r8, #1
   2473c:	e3013080 	movw	r3, #4224	; 0x1080
   24740:	e3403004 	movt	r3, #4
   24744:	e3012bc8 	movw	r2, #7112	; 0x1bc8
   24748:	e3402004 	movt	r2, #4
   2474c:	01a05003 	moveq	r5, r3
   24750:	11a05002 	movne	r5, r2
   24754:	e28d0010 	add	r0, sp, #16
   24758:	eb003b7f 	bl	3355c <CString::CString()>
   2475c:	e2841010 	add	r1, r4, #16
   24760:	e28d0008 	add	r0, sp, #8
   24764:	eb000f73 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   24768:	e28d1010 	add	r1, sp, #16
   2476c:	e28d0008 	add	r0, sp, #8
   24770:	eb00108a 	bl	289a0 <CIPAddress::Format(CString*) const>
   24774:	eb002ace 	bl	2f2b4 <CLogger::Get()>
   24778:	e1a08000 	mov	r8, r0
   2477c:	e28d0010 	add	r0, sp, #16
   24780:	eb003bad 	bl	3363c <CString::operator char const*() const>
   24784:	e3a02004 	mov	r2, #4
   24788:	e58d0004 	str	r0, [sp, #4]
   2478c:	e30131c8 	movw	r3, #4552	; 0x11c8
   24790:	e3403004 	movt	r3, #4
   24794:	e1a00008 	mov	r0, r8
   24798:	e58d5000 	str	r5, [sp]
   2479c:	e30111e8 	movw	r1, #4584	; 0x11e8
   247a0:	e3401004 	movt	r1, #4
   247a4:	eb002c90 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   247a8:	e1a03006 	mov	r3, r6
   247ac:	e1a02004 	mov	r2, r4
   247b0:	e3a01000 	mov	r1, #0
   247b4:	e1a00007 	mov	r0, r7
   247b8:	ebfffe8d 	bl	241f4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   247bc:	e28d0008 	add	r0, sp, #8
   247c0:	eb000f7c 	bl	285b8 <CIPAddress::~CIPAddress()>
   247c4:	e28d0010 	add	r0, sp, #16
   247c8:	eb003b30 	bl	33490 <CString::~CString()>
   247cc:	e28dd020 	add	sp, sp, #32
   247d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   247d4:	e3015074 	movw	r5, #4212	; 0x1074
   247d8:	e3405004 	movt	r5, #4
   247dc:	eaffffdc 	b	24754 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x94>
   247e0:	e3001f80 	movw	r1, #3968	; 0xf80
   247e4:	e3401004 	movt	r1, #4
   247e8:	e3010088 	movw	r0, #4232	; 0x1088
   247ec:	e3400004 	movt	r0, #4
   247f0:	e3a020c9 	mov	r2, #201	; 0xc9
   247f4:	eb002031 	bl	2c8c0 <assertion_failed>
   247f8:	e3001f80 	movw	r1, #3968	; 0xf80
   247fc:	e3401004 	movt	r1, #4
   24800:	e30100a0 	movw	r0, #4256	; 0x10a0
   24804:	e3400004 	movt	r0, #4
   24808:	e3a020ca 	mov	r2, #202	; 0xca
   2480c:	eb00202b 	bl	2c8c0 <assertion_failed>
   24810:	e3001f80 	movw	r1, #3968	; 0xf80
   24814:	e3401004 	movt	r1, #4
   24818:	e30100c0 	movw	r0, #4288	; 0x10c0
   2481c:	e3400004 	movt	r0, #4
   24820:	e3a020ce 	mov	r2, #206	; 0xce
   24824:	eb002025 	bl	2c8c0 <assertion_failed>
   24828:	e3001f80 	movw	r1, #3968	; 0xf80
   2482c:	e3401004 	movt	r1, #4
   24830:	e3010120 	movw	r0, #4384	; 0x1120
   24834:	e3400004 	movt	r0, #4
   24838:	e3a020d2 	mov	r2, #210	; 0xd2
   2483c:	eb00201f 	bl	2c8c0 <assertion_failed>
   24840:	e3001f80 	movw	r1, #3968	; 0xf80
   24844:	e3401004 	movt	r1, #4
   24848:	e301014c 	movw	r0, #4428	; 0x114c
   2484c:	e3400004 	movt	r0, #4
   24850:	e3a020d3 	mov	r2, #211	; 0xd3
   24854:	eb002019 	bl	2c8c0 <assertion_failed>
   24858:	e3001f80 	movw	r1, #3968	; 0xf80
   2485c:	e3401004 	movt	r1, #4
   24860:	e3010188 	movw	r0, #4488	; 0x1188
   24864:	e3400004 	movt	r0, #4
   24868:	e3a020d4 	mov	r2, #212	; 0xd4
   2486c:	eb002013 	bl	2c8c0 <assertion_failed>

00024870 <CRouteCache::CRouteCache()>:
   24870:	e3a02064 	mov	r2, #100	; 0x64
   24874:	e92d4010 	push	{r4, lr}
   24878:	e1a01002 	mov	r1, r2
   2487c:	e1a04000 	mov	r4, r0
   24880:	eb002ea4 	bl	30318 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   24884:	e1a00004 	mov	r0, r4
   24888:	e8bd8010 	pop	{r4, pc}

0002488c <CRouteCache::Flush()>:
   2488c:	e92d4070 	push	{r4, r5, r6, lr}
   24890:	e1a05000 	mov	r5, r0
   24894:	eb002ec7 	bl	303b8 <CPtrArray::GetCount() const>
   24898:	e3500000 	cmp	r0, #0
   2489c:	08bd8070 	popeq	{r4, r5, r6, pc}
   248a0:	e2404001 	sub	r4, r0, #1
   248a4:	e1a01004 	mov	r1, r4
   248a8:	e1a00005 	mov	r0, r5
   248ac:	eb002ec3 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   248b0:	e5900000 	ldr	r0, [r0]
   248b4:	e2444001 	sub	r4, r4, #1
   248b8:	e3a01008 	mov	r1, #8
   248bc:	e3500000 	cmp	r0, #0
   248c0:	0a000000 	beq	248c8 <CRouteCache::Flush()+0x3c>
   248c4:	eb00490c 	bl	36cfc <operator delete(void*, unsigned int)>
   248c8:	e1a00005 	mov	r0, r5
   248cc:	eb002f38 	bl	305b4 <CPtrArray::RemoveLast()>
   248d0:	e3740001 	cmn	r4, #1
   248d4:	1afffff2 	bne	248a4 <CRouteCache::Flush()+0x18>
   248d8:	e8bd8070 	pop	{r4, r5, r6, pc}

000248dc <CRouteCache::~CRouteCache()>:
   248dc:	e92d4010 	push	{r4, lr}
   248e0:	e1a04000 	mov	r4, r0
   248e4:	ebffffe8 	bl	2488c <CRouteCache::Flush()>
   248e8:	e1a00004 	mov	r0, r4
   248ec:	eb002ea6 	bl	3038c <CPtrArray::~CPtrArray()>
   248f0:	e1a00004 	mov	r0, r4
   248f4:	e8bd8010 	pop	{r4, pc}

000248f8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   248f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   248fc:	e2516000 	subs	r6, r1, #0
   24900:	0a00002b 	beq	249b4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xbc>
   24904:	e1a08002 	mov	r8, r2
   24908:	e3520000 	cmp	r2, #0
   2490c:	0a00002e 	beq	249cc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   24910:	e1a07000 	mov	r7, r0
   24914:	eb002ea7 	bl	303b8 <CPtrArray::GetCount() const>
   24918:	e2509000 	subs	r9, r0, #0
   2491c:	0a000016 	beq	2497c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x84>
   24920:	e3a04000 	mov	r4, #0
   24924:	ea000008 	b	2494c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x54>
   24928:	e3a02004 	mov	r2, #4
   2492c:	e1a01006 	mov	r1, r6
   24930:	e1a00005 	mov	r0, r5
   24934:	eb0044b2 	bl	35c04 <memcmp>
   24938:	e3500000 	cmp	r0, #0
   2493c:	0a000017 	beq	249a0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa8>
   24940:	e2844001 	add	r4, r4, #1
   24944:	e1590004 	cmp	r9, r4
   24948:	0a00000b 	beq	2497c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x84>
   2494c:	e1a01004 	mov	r1, r4
   24950:	e1a00007 	mov	r0, r7
   24954:	eb002e99 	bl	303c0 <CPtrArray::operator[](unsigned int)>
   24958:	e5905000 	ldr	r5, [r0]
   2495c:	e3550000 	cmp	r5, #0
   24960:	1afffff0 	bne	24928 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x30>
   24964:	e30111f0 	movw	r1, #4592	; 0x11f0
   24968:	e3401004 	movt	r1, #4
   2496c:	e30b0374 	movw	r0, #45940	; 0xb374
   24970:	e3400003 	movt	r0, #3
   24974:	e3a0203e 	mov	r2, #62	; 0x3e
   24978:	eb001fd0 	bl	2c8c0 <assertion_failed>
   2497c:	e3a00008 	mov	r0, #8
   24980:	eb0048c5 	bl	36c9c <operator new(unsigned int)>
   24984:	e1a01006 	mov	r1, r6
   24988:	e1a05000 	mov	r5, r0
   2498c:	e3a02004 	mov	r2, #4
   24990:	eb0046b8 	bl	36478 <memcpy>
   24994:	e1a01005 	mov	r1, r5
   24998:	e1a00007 	mov	r0, r7
   2499c:	eb002ec3 	bl	304b0 <CPtrArray::Append(void*)>
   249a0:	e3a02004 	mov	r2, #4
   249a4:	e1a01008 	mov	r1, r8
   249a8:	e0850002 	add	r0, r5, r2
   249ac:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   249b0:	ea0046b0 	b	36478 <memcpy>
   249b4:	e30111f0 	movw	r1, #4592	; 0x11f0
   249b8:	e3401004 	movt	r1, #4
   249bc:	e3010200 	movw	r0, #4608	; 0x1200
   249c0:	e3400004 	movt	r0, #4
   249c4:	e3a02035 	mov	r2, #53	; 0x35
   249c8:	eb001fbc 	bl	2c8c0 <assertion_failed>
   249cc:	e30111f0 	movw	r1, #4592	; 0x11f0
   249d0:	e3401004 	movt	r1, #4
   249d4:	e3010210 	movw	r0, #4624	; 0x1210
   249d8:	e3400004 	movt	r0, #4
   249dc:	e3a02036 	mov	r2, #54	; 0x36
   249e0:	eb001fb6 	bl	2c8c0 <assertion_failed>

000249e4 <CRouteCache::GetRoute(unsigned char const*) const>:
   249e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   249e8:	e2516000 	subs	r6, r1, #0
   249ec:	0a00001c 	beq	24a64 <CRouteCache::GetRoute(unsigned char const*) const+0x80>
   249f0:	e1a07000 	mov	r7, r0
   249f4:	eb002e6f 	bl	303b8 <CPtrArray::GetCount() const>
   249f8:	e2508000 	subs	r8, r0, #0
   249fc:	0a000014 	beq	24a54 <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   24a00:	e3a05000 	mov	r5, #0
   24a04:	ea000007 	b	24a28 <CRouteCache::GetRoute(unsigned char const*) const+0x44>
   24a08:	e3a02004 	mov	r2, #4
   24a0c:	e1a01006 	mov	r1, r6
   24a10:	eb00447b 	bl	35c04 <memcmp>
   24a14:	e3500000 	cmp	r0, #0
   24a18:	0a00000f 	beq	24a5c <CRouteCache::GetRoute(unsigned char const*) const+0x78>
   24a1c:	e2855001 	add	r5, r5, #1
   24a20:	e1580005 	cmp	r8, r5
   24a24:	0a00000a 	beq	24a54 <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   24a28:	e1a01005 	mov	r1, r5
   24a2c:	e1a00007 	mov	r0, r7
   24a30:	eb002e80 	bl	30438 <CPtrArray::operator[](unsigned int) const>
   24a34:	e2504000 	subs	r4, r0, #0
   24a38:	1afffff2 	bne	24a08 <CRouteCache::GetRoute(unsigned char const*) const+0x24>
   24a3c:	e30111f0 	movw	r1, #4592	; 0x11f0
   24a40:	e3401004 	movt	r1, #4
   24a44:	e30b0374 	movw	r0, #45940	; 0xb374
   24a48:	e3400003 	movt	r0, #3
   24a4c:	e3a0205d 	mov	r2, #93	; 0x5d
   24a50:	eb001f9a 	bl	2c8c0 <assertion_failed>
   24a54:	e3a00000 	mov	r0, #0
   24a58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24a5c:	e2840004 	add	r0, r4, #4
   24a60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24a64:	e30111f0 	movw	r1, #4592	; 0x11f0
   24a68:	e3401004 	movt	r1, #4
   24a6c:	e3010200 	movw	r0, #4608	; 0x1200
   24a70:	e3400004 	movt	r0, #4
   24a74:	e3a02057 	mov	r2, #87	; 0x57
   24a78:	eb001f90 	bl	2c8c0 <assertion_failed>

00024a7c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   24a7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24a80:	e1a04000 	mov	r4, r0
   24a84:	e1a05003 	mov	r5, r3
   24a88:	e59f309c 	ldr	r3, [pc, #156]	; 24b2c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   24a8c:	e1a06001 	mov	r6, r1
   24a90:	e5802008 	str	r2, [r0, #8]
   24a94:	e280000c 	add	r0, r0, #12
   24a98:	e500300c 	str	r3, [r0, #-12]
   24a9c:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   24aa0:	e5001008 	str	r1, [r0, #-8]
   24aa4:	e1a01005 	mov	r1, r5
   24aa8:	e1dd92b0 	ldrh	r9, [sp, #32]
   24aac:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   24ab0:	eb000eb1 	bl	2857c <CIPAddress::CIPAddress(CIPAddress const&)>
   24ab4:	e1a00006 	mov	r0, r6
   24ab8:	e1c491b4 	strh	r9, [r4, #20]
   24abc:	e1c481b6 	strh	r8, [r4, #22]
   24ac0:	e5847018 	str	r7, [r4, #24]
   24ac4:	eb000e78 	bl	284ac <CNetConfig::GetIPAddress() const>
   24ac8:	e1a03007 	mov	r3, r7
   24acc:	e1a01000 	mov	r1, r0
   24ad0:	e1a02005 	mov	r2, r5
   24ad4:	e284001c 	add	r0, r4, #28
   24ad8:	eb0010db 	bl	28e4c <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   24adc:	e5943004 	ldr	r3, [r4, #4]
   24ae0:	e3530000 	cmp	r3, #0
   24ae4:	0a000004 	beq	24afc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   24ae8:	e5943008 	ldr	r3, [r4, #8]
   24aec:	e3530000 	cmp	r3, #0
   24af0:	0a000007 	beq	24b14 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x98>
   24af4:	e1a00004 	mov	r0, r4
   24af8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24afc:	e3011220 	movw	r1, #4640	; 0x1220
   24b00:	e3401004 	movt	r1, #4
   24b04:	e3000b08 	movw	r0, #2824	; 0xb08
   24b08:	e3400004 	movt	r0, #4
   24b0c:	e3a02025 	mov	r2, #37	; 0x25
   24b10:	eb001f6a 	bl	2c8c0 <assertion_failed>
   24b14:	e3011220 	movw	r1, #4640	; 0x1220
   24b18:	e3401004 	movt	r1, #4
   24b1c:	e3000c38 	movw	r0, #3128	; 0xc38
   24b20:	e3400004 	movt	r0, #4
   24b24:	e3a02026 	mov	r2, #38	; 0x26
   24b28:	eb001f64 	bl	2c8c0 <assertion_failed>
   24b2c:	0004124c 	.word	0x0004124c

00024b30 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   24b30:	e92d4070 	push	{r4, r5, r6, lr}
   24b34:	e1a04000 	mov	r4, r0
   24b38:	e59f0088 	ldr	r0, [pc, #136]	; 24bc8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x98>
   24b3c:	e1a05001 	mov	r5, r1
   24b40:	e1a06003 	mov	r6, r3
   24b44:	e9840006 	stmib	r4, {r1, r2}
   24b48:	e5840000 	str	r0, [r4]
   24b4c:	e284000c 	add	r0, r4, #12
   24b50:	eb000e71 	bl	2851c <CIPAddress::CIPAddress()>
   24b54:	e3a03000 	mov	r3, #0
   24b58:	e1a00005 	mov	r0, r5
   24b5c:	e1c431b4 	strh	r3, [r4, #20]
   24b60:	e1c461b6 	strh	r6, [r4, #22]
   24b64:	eb000e50 	bl	284ac <CNetConfig::GetIPAddress() const>
   24b68:	e59d2010 	ldr	r2, [sp, #16]
   24b6c:	e1a01000 	mov	r1, r0
   24b70:	e284001c 	add	r0, r4, #28
   24b74:	eb0010a8 	bl	28e1c <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   24b78:	e5943004 	ldr	r3, [r4, #4]
   24b7c:	e3530000 	cmp	r3, #0
   24b80:	0a000004 	beq	24b98 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x68>
   24b84:	e5943008 	ldr	r3, [r4, #8]
   24b88:	e3530000 	cmp	r3, #0
   24b8c:	0a000007 	beq	24bb0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x80>
   24b90:	e1a00004 	mov	r0, r4
   24b94:	e8bd8070 	pop	{r4, r5, r6, pc}
   24b98:	e3011220 	movw	r1, #4640	; 0x1220
   24b9c:	e3401004 	movt	r1, #4
   24ba0:	e3000b08 	movw	r0, #2824	; 0xb08
   24ba4:	e3400004 	movt	r0, #4
   24ba8:	e3a02033 	mov	r2, #51	; 0x33
   24bac:	eb001f43 	bl	2c8c0 <assertion_failed>
   24bb0:	e3011220 	movw	r1, #4640	; 0x1220
   24bb4:	e3401004 	movt	r1, #4
   24bb8:	e3000c38 	movw	r0, #3128	; 0xc38
   24bbc:	e3400004 	movt	r0, #4
   24bc0:	e3a02034 	mov	r2, #52	; 0x34
   24bc4:	eb001f3d 	bl	2c8c0 <assertion_failed>
   24bc8:	0004124c 	.word	0x0004124c

00024bcc <CNetConnection::~CNetConnection()>:
   24bcc:	e92d4010 	push	{r4, lr}
   24bd0:	e1a04000 	mov	r4, r0
   24bd4:	e59f2024 	ldr	r2, [pc, #36]	; 24c00 <CNetConnection::~CNetConnection()+0x34>
   24bd8:	e3a03000 	mov	r3, #0
   24bdc:	e280001c 	add	r0, r0, #28
   24be0:	e5842000 	str	r2, [r4]
   24be4:	e5843008 	str	r3, [r4, #8]
   24be8:	e5843004 	str	r3, [r4, #4]
   24bec:	eb0010a7 	bl	28e90 <CChecksumCalculator::~CChecksumCalculator()>
   24bf0:	e284000c 	add	r0, r4, #12
   24bf4:	eb000e6f 	bl	285b8 <CIPAddress::~CIPAddress()>
   24bf8:	e1a00004 	mov	r0, r4
   24bfc:	e8bd8010 	pop	{r4, pc}
   24c00:	0004124c 	.word	0x0004124c

00024c04 <CNetConnection::~CNetConnection()>:
   24c04:	e92d4010 	push	{r4, lr}
   24c08:	e1a04000 	mov	r4, r0
   24c0c:	e59f2030 	ldr	r2, [pc, #48]	; 24c44 <CNetConnection::~CNetConnection()+0x40>
   24c10:	e3a03000 	mov	r3, #0
   24c14:	e280001c 	add	r0, r0, #28
   24c18:	e5842000 	str	r2, [r4]
   24c1c:	e5843008 	str	r3, [r4, #8]
   24c20:	e5843004 	str	r3, [r4, #4]
   24c24:	eb001099 	bl	28e90 <CChecksumCalculator::~CChecksumCalculator()>
   24c28:	e284000c 	add	r0, r4, #12
   24c2c:	eb000e61 	bl	285b8 <CIPAddress::~CIPAddress()>
   24c30:	e1a00004 	mov	r0, r4
   24c34:	e3a0102c 	mov	r1, #44	; 0x2c
   24c38:	eb00482f 	bl	36cfc <operator delete(void*, unsigned int)>
   24c3c:	e1a00004 	mov	r0, r4
   24c40:	e8bd8010 	pop	{r4, pc}
   24c44:	0004124c 	.word	0x0004124c

00024c48 <CNetConnection::GetForeignIP() const>:
   24c48:	e280000c 	add	r0, r0, #12
   24c4c:	ea000f10 	b	28894 <CIPAddress::Get() const>

00024c50 <CNetConnection::GetOwnPort() const>:
   24c50:	e1d001b6 	ldrh	r0, [r0, #22]
   24c54:	e3500000 	cmp	r0, #0
   24c58:	112fff1e 	bxne	lr
   24c5c:	e3011220 	movw	r1, #4640	; 0x1220
   24c60:	e3401004 	movt	r1, #4
   24c64:	e3010234 	movw	r0, #4660	; 0x1234
   24c68:	e3400004 	movt	r0, #4
   24c6c:	e3a02044 	mov	r2, #68	; 0x44
   24c70:	e92d4010 	push	{r4, lr}
   24c74:	eb001f11 	bl	2c8c0 <assertion_failed>

00024c78 <CNetConnection::GetProtocol() const>:
   24c78:	e5900018 	ldr	r0, [r0, #24]
   24c7c:	e12fff1e 	bx	lr

00024c80 <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   24c80:	e3e00000 	mvn	r0, #0
   24c84:	e12fff1e 	bx	lr

00024c88 <CUDPConnection::Close()>:
   24c88:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   24c8c:	e3530000 	cmp	r3, #0
   24c90:	13a03000 	movne	r3, #0
   24c94:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   24c98:	11a00003 	movne	r0, r3
   24c9c:	03e00000 	mvneq	r0, #0
   24ca0:	e12fff1e 	bx	lr

00024ca4 <CUDPConnection::SetOptionBroadcast(bool)>:
   24ca4:	e1a03000 	mov	r3, r0
   24ca8:	e3a00000 	mov	r0, #0
   24cac:	e5c31040 	strb	r1, [r3, #64]	; 0x40
   24cb0:	e12fff1e 	bx	lr

00024cb4 <CUDPConnection::IsConnected() const>:
   24cb4:	e3a00000 	mov	r0, #0
   24cb8:	e12fff1e 	bx	lr

00024cbc <CUDPConnection::IsTerminated() const>:
   24cbc:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   24cc0:	e2200001 	eor	r0, r0, #1
   24cc4:	e12fff1e 	bx	lr

00024cc8 <CUDPConnection::Process()>:
   24cc8:	e12fff1e 	bx	lr

00024ccc <CUDPConnection::Send(void const*, unsigned int, int)>:
   24ccc:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24cd0:	e1a04000 	mov	r4, r0
   24cd4:	e28db01c 	add	fp, sp, #28
   24cd8:	e24dd008 	sub	sp, sp, #8
   24cdc:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   24ce0:	e3500000 	cmp	r0, #0
   24ce4:	b3a03000 	movlt	r3, #0
   24ce8:	b5843044 	strlt	r3, [r4, #68]	; 0x44
   24cec:	ba000042 	blt	24dfc <CUDPConnection::Send(void const*, unsigned int, int)+0x130>
   24cf0:	e1a05002 	mov	r5, r2
   24cf4:	e5d4202a 	ldrb	r2, [r4, #42]	; 0x2a
   24cf8:	e3520000 	cmp	r2, #0
   24cfc:	0a00004c 	beq	24e34 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24d00:	e3d33040 	bics	r3, r3, #64	; 0x40
   24d04:	1a00004a 	bne	24e34 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24d08:	e2452001 	sub	r2, r5, #1
   24d0c:	e3003637 	movw	r3, #1591	; 0x637
   24d10:	e2858008 	add	r8, r5, #8
   24d14:	e1520003 	cmp	r2, r3
   24d18:	8a000045 	bhi	24e34 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24d1c:	e5943004 	ldr	r3, [r4, #4]
   24d20:	e3530000 	cmp	r3, #0
   24d24:	0a000044 	beq	24e3c <CUDPConnection::Send(void const*, unsigned int, int)+0x170>
   24d28:	e5d43040 	ldrb	r3, [r4, #64]	; 0x40
   24d2c:	e1a06001 	mov	r6, r1
   24d30:	e3530000 	cmp	r3, #0
   24d34:	0a000032 	beq	24e04 <CUDPConnection::Send(void const*, unsigned int, int)+0x138>
   24d38:	e2883007 	add	r3, r8, #7
   24d3c:	e1d421b6 	ldrh	r2, [r4, #22]
   24d40:	e3c33007 	bic	r3, r3, #7
   24d44:	e3560000 	cmp	r6, #0
   24d48:	e04dd003 	sub	sp, sp, r3
   24d4c:	e6bf3fb2 	rev16	r3, r2
   24d50:	e28d7008 	add	r7, sp, #8
   24d54:	e1cd30b8 	strh	r3, [sp, #8]
   24d58:	e1d431b4 	ldrh	r3, [r4, #20]
   24d5c:	e6bf3fb3 	rev16	r3, r3
   24d60:	e1cd30ba 	strh	r3, [sp, #10]
   24d64:	e6bf3fb8 	rev16	r3, r8
   24d68:	e1cd30bc 	strh	r3, [sp, #12]
   24d6c:	e3a03000 	mov	r3, #0
   24d70:	e5c73006 	strb	r3, [r7, #6]
   24d74:	e5c73007 	strb	r3, [r7, #7]
   24d78:	0a000035 	beq	24e54 <CUDPConnection::Send(void const*, unsigned int, int)+0x188>
   24d7c:	e1a02005 	mov	r2, r5
   24d80:	e1a01006 	mov	r1, r6
   24d84:	e2870008 	add	r0, r7, #8
   24d88:	e284601c 	add	r6, r4, #28
   24d8c:	eb0045b9 	bl	36478 <memcpy>
   24d90:	e5940004 	ldr	r0, [r4, #4]
   24d94:	eb000dc4 	bl	284ac <CNetConfig::GetIPAddress() const>
   24d98:	e284900c 	add	r9, r4, #12
   24d9c:	e1a01000 	mov	r1, r0
   24da0:	e1a00006 	mov	r0, r6
   24da4:	eb00103a 	bl	28e94 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   24da8:	e1a01009 	mov	r1, r9
   24dac:	e1a00006 	mov	r0, r6
   24db0:	eb00103b 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   24db4:	e1a02008 	mov	r2, r8
   24db8:	e1a01007 	mov	r1, r7
   24dbc:	e1a00006 	mov	r0, r6
   24dc0:	eb001062 	bl	28f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   24dc4:	e594c008 	ldr	ip, [r4, #8]
   24dc8:	e1c700b6 	strh	r0, [r7, #6]
   24dcc:	e35c0000 	cmp	ip, #0
   24dd0:	0a000025 	beq	24e6c <CUDPConnection::Send(void const*, unsigned int, int)+0x1a0>
   24dd4:	e3a0e011 	mov	lr, #17
   24dd8:	e1a03008 	mov	r3, r8
   24ddc:	e1a02007 	mov	r2, r7
   24de0:	e1a01009 	mov	r1, r9
   24de4:	e1a0000c 	mov	r0, ip
   24de8:	e58de000 	str	lr, [sp]
   24dec:	ebfff55c 	bl	22364 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   24df0:	e3500000 	cmp	r0, #0
   24df4:	0a00000e 	beq	24e34 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24df8:	e1a00005 	mov	r0, r5
   24dfc:	e24bd01c 	sub	sp, fp, #28
   24e00:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e04:	e284700c 	add	r7, r4, #12
   24e08:	e1a00007 	mov	r0, r7
   24e0c:	eb000ed2 	bl	2895c <CIPAddress::IsBroadcast() const>
   24e10:	e3500000 	cmp	r0, #0
   24e14:	1a000006 	bne	24e34 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24e18:	e5940004 	ldr	r0, [r4, #4]
   24e1c:	eb000dac 	bl	284d4 <CNetConfig::GetBroadcastAddress() const>
   24e20:	e1a01000 	mov	r1, r0
   24e24:	e1a00007 	mov	r0, r7
   24e28:	eb000de3 	bl	285bc <CIPAddress::operator==(CIPAddress const&) const>
   24e2c:	e3500000 	cmp	r0, #0
   24e30:	0affffc0 	beq	24d38 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   24e34:	e3e00000 	mvn	r0, #0
   24e38:	eaffffef 	b	24dfc <CUDPConnection::Send(void const*, unsigned int, int)+0x130>
   24e3c:	e3011288 	movw	r1, #4744	; 0x1288
   24e40:	e3401004 	movt	r1, #4
   24e44:	e3000b08 	movw	r0, #2824	; 0xb08
   24e48:	e3400004 	movt	r0, #4
   24e4c:	e3a0207b 	mov	r2, #123	; 0x7b
   24e50:	eb001e9a 	bl	2c8c0 <assertion_failed>
   24e54:	e3011288 	movw	r1, #4744	; 0x1288
   24e58:	e3401004 	movt	r1, #4
   24e5c:	e30c0b74 	movw	r0, #52084	; 0xcb74
   24e60:	e3400003 	movt	r0, #3
   24e64:	e3a0208b 	mov	r2, #139	; 0x8b
   24e68:	eb001e94 	bl	2c8c0 <assertion_failed>
   24e6c:	e3011288 	movw	r1, #4744	; 0x1288
   24e70:	e3401004 	movt	r1, #4
   24e74:	e3000c38 	movw	r0, #3128	; 0xc38
   24e78:	e3400004 	movt	r0, #4
   24e7c:	e3a02093 	mov	r2, #147	; 0x93
   24e80:	eb001e8e 	bl	2c8c0 <assertion_failed>

00024e84 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   24e84:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   24e88:	e1a04000 	mov	r4, r0
   24e8c:	e28db018 	add	fp, sp, #24
   24e90:	e24dd00c 	sub	sp, sp, #12
   24e94:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   24e98:	e35c0000 	cmp	ip, #0
   24e9c:	e1db70b8 	ldrh	r7, [fp, #8]
   24ea0:	b3a03000 	movlt	r3, #0
   24ea4:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   24ea8:	ba000041 	blt	24fb4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x130>
   24eac:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   24eb0:	e35c0000 	cmp	ip, #0
   24eb4:	1a000041 	bne	24fc0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x13c>
   24eb8:	e1a0e003 	mov	lr, r3
   24ebc:	e3de3040 	bics	r3, lr, #64	; 0x40
   24ec0:	1a000050 	bne	25008 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24ec4:	e1a05002 	mov	r5, r2
   24ec8:	e2422001 	sub	r2, r2, #1
   24ecc:	e3003637 	movw	r3, #1591	; 0x637
   24ed0:	e2858008 	add	r8, r5, #8
   24ed4:	e1520003 	cmp	r2, r3
   24ed8:	8a00004a 	bhi	25008 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24edc:	e5903004 	ldr	r3, [r0, #4]
   24ee0:	e3530000 	cmp	r3, #0
   24ee4:	0a000049 	beq	25010 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x18c>
   24ee8:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   24eec:	e1a06001 	mov	r6, r1
   24ef0:	e3530000 	cmp	r3, #0
   24ef4:	0a000038 	beq	24fdc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x158>
   24ef8:	e2883007 	add	r3, r8, #7
   24efc:	e6bf7fb7 	rev16	r7, r7
   24f00:	e3c33007 	bic	r3, r3, #7
   24f04:	e6bf2fb8 	rev16	r2, r8
   24f08:	e04dd003 	sub	sp, sp, r3
   24f0c:	e1d431b6 	ldrh	r3, [r4, #22]
   24f10:	e3560000 	cmp	r6, #0
   24f14:	e6bf3fb3 	rev16	r3, r3
   24f18:	e1cd70ba 	strh	r7, [sp, #10]
   24f1c:	e28d7008 	add	r7, sp, #8
   24f20:	e1cd30b8 	strh	r3, [sp, #8]
   24f24:	e3a03000 	mov	r3, #0
   24f28:	e1cd20bc 	strh	r2, [sp, #12]
   24f2c:	e5c73006 	strb	r3, [r7, #6]
   24f30:	e5c73007 	strb	r3, [r7, #7]
   24f34:	0a00003b 	beq	25028 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   24f38:	e1a02005 	mov	r2, r5
   24f3c:	e1a01006 	mov	r1, r6
   24f40:	e2870008 	add	r0, r7, #8
   24f44:	e284601c 	add	r6, r4, #28
   24f48:	eb00454a 	bl	36478 <memcpy>
   24f4c:	e5940004 	ldr	r0, [r4, #4]
   24f50:	eb000d55 	bl	284ac <CNetConfig::GetIPAddress() const>
   24f54:	e1a01000 	mov	r1, r0
   24f58:	e1a00006 	mov	r0, r6
   24f5c:	eb000fcc 	bl	28e94 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   24f60:	e59b1004 	ldr	r1, [fp, #4]
   24f64:	e1a00006 	mov	r0, r6
   24f68:	eb000fcd 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   24f6c:	e1a02008 	mov	r2, r8
   24f70:	e1a01007 	mov	r1, r7
   24f74:	e1a00006 	mov	r0, r6
   24f78:	eb000ff4 	bl	28f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   24f7c:	e594c008 	ldr	ip, [r4, #8]
   24f80:	e1c700b6 	strh	r0, [r7, #6]
   24f84:	e35c0000 	cmp	ip, #0
   24f88:	0a00002c 	beq	25040 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1bc>
   24f8c:	e59b1004 	ldr	r1, [fp, #4]
   24f90:	e3a0e011 	mov	lr, #17
   24f94:	e1a03008 	mov	r3, r8
   24f98:	e1a02007 	mov	r2, r7
   24f9c:	e1a0000c 	mov	r0, ip
   24fa0:	e58de000 	str	lr, [sp]
   24fa4:	ebfff4ee 	bl	22364 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   24fa8:	e3500000 	cmp	r0, #0
   24fac:	0a000015 	beq	25008 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24fb0:	e1a0c005 	mov	ip, r5
   24fb4:	e1a0000c 	mov	r0, ip
   24fb8:	e24bd018 	sub	sp, fp, #24
   24fbc:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   24fc0:	e590c000 	ldr	ip, [r0]
   24fc4:	e59c4014 	ldr	r4, [ip, #20]
   24fc8:	e12fff34 	blx	r4
   24fcc:	e1a0c000 	mov	ip, r0
   24fd0:	e1a0000c 	mov	r0, ip
   24fd4:	e24bd018 	sub	sp, fp, #24
   24fd8:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   24fdc:	e59b0004 	ldr	r0, [fp, #4]
   24fe0:	eb000e5d 	bl	2895c <CIPAddress::IsBroadcast() const>
   24fe4:	e3500000 	cmp	r0, #0
   24fe8:	1a000006 	bne	25008 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24fec:	e5940004 	ldr	r0, [r4, #4]
   24ff0:	eb000d37 	bl	284d4 <CNetConfig::GetBroadcastAddress() const>
   24ff4:	e1a01000 	mov	r1, r0
   24ff8:	e59b0004 	ldr	r0, [fp, #4]
   24ffc:	eb000d6e 	bl	285bc <CIPAddress::operator==(CIPAddress const&) const>
   25000:	e3500000 	cmp	r0, #0
   25004:	0affffbb 	beq	24ef8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   25008:	e3e0c000 	mvn	ip, #0
   2500c:	eaffffe8 	b	24fb4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x130>
   25010:	e3011288 	movw	r1, #4744	; 0x1288
   25014:	e3401004 	movt	r1, #4
   25018:	e3000b08 	movw	r0, #2824	; 0xb08
   2501c:	e3400004 	movt	r0, #4
   25020:	e3a020e4 	mov	r2, #228	; 0xe4
   25024:	eb001e25 	bl	2c8c0 <assertion_failed>
   25028:	e3011288 	movw	r1, #4744	; 0x1288
   2502c:	e3401004 	movt	r1, #4
   25030:	e30c0b74 	movw	r0, #52084	; 0xcb74
   25034:	e3400003 	movt	r0, #3
   25038:	e3a020f4 	mov	r2, #244	; 0xf4
   2503c:	eb001e1f 	bl	2c8c0 <assertion_failed>
   25040:	e3011288 	movw	r1, #4744	; 0x1288
   25044:	e3401004 	movt	r1, #4
   25048:	e3000c38 	movw	r0, #3128	; 0xc38
   2504c:	e3400004 	movt	r0, #4
   25050:	e3a020fc 	mov	r2, #252	; 0xfc
   25054:	eb001e19 	bl	2c8c0 <assertion_failed>

00025058 <CUDPConnection::Receive(void*, int)>:
   25058:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2505c:	e1a06000 	mov	r6, r0
   25060:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   25064:	e24dd00c 	sub	sp, sp, #12
   25068:	e3500000 	cmp	r0, #0
   2506c:	b3a03000 	movlt	r3, #0
   25070:	b5863044 	strlt	r3, [r6, #68]	; 0x44
   25074:	ba000015 	blt	250d0 <CUDPConnection::Receive(void*, int)+0x78>
   25078:	e1a05001 	mov	r5, r1
   2507c:	e3510000 	cmp	r1, #0
   25080:	0a00001c 	beq	250f8 <CUDPConnection::Receive(void*, int)+0xa0>
   25084:	e1a09002 	mov	r9, r2
   25088:	e286702c 	add	r7, r6, #44	; 0x2c
   2508c:	e2868038 	add	r8, r6, #56	; 0x38
   25090:	e28d2004 	add	r2, sp, #4
   25094:	e1a01005 	mov	r1, r5
   25098:	e1a00007 	mov	r0, r7
   2509c:	eb000f15 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   250a0:	e2504000 	subs	r4, r0, #0
   250a4:	1a00000b 	bne	250d8 <CUDPConnection::Receive(void*, int)+0x80>
   250a8:	e3590040 	cmp	r9, #64	; 0x40
   250ac:	0a000017 	beq	25110 <CUDPConnection::Receive(void*, int)+0xb8>
   250b0:	e1a00008 	mov	r0, r8
   250b4:	eb001d57 	bl	2c618 <CSynchronizationEvent::Clear()>
   250b8:	e1a00008 	mov	r0, r8
   250bc:	eb001d6b 	bl	2c670 <CSynchronizationEvent::Wait()>
   250c0:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   250c4:	e3500000 	cmp	r0, #0
   250c8:	aafffff0 	bge	25090 <CUDPConnection::Receive(void*, int)+0x38>
   250cc:	e5864044 	str	r4, [r6, #68]	; 0x44
   250d0:	e28dd00c 	add	sp, sp, #12
   250d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   250d8:	e59d0004 	ldr	r0, [sp, #4]
   250dc:	e3500000 	cmp	r0, #0
   250e0:	0a00000c 	beq	25118 <CUDPConnection::Receive(void*, int)+0xc0>
   250e4:	e3a01006 	mov	r1, #6
   250e8:	eb004703 	bl	36cfc <operator delete(void*, unsigned int)>
   250ec:	e1a00004 	mov	r0, r4
   250f0:	e28dd00c 	add	sp, sp, #12
   250f4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   250f8:	e3011288 	movw	r1, #4744	; 0x1288
   250fc:	e3401004 	movt	r1, #4
   25100:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   25104:	e3400003 	movt	r0, #3
   25108:	e3a020a7 	mov	r2, #167	; 0xa7
   2510c:	eb001deb 	bl	2c8c0 <assertion_failed>
   25110:	e1a00004 	mov	r0, r4
   25114:	eaffffed 	b	250d0 <CUDPConnection::Receive(void*, int)+0x78>
   25118:	e3011288 	movw	r1, #4744	; 0x1288
   2511c:	e3401004 	movt	r1, #4
   25120:	e30c0b74 	movw	r0, #52084	; 0xcb74
   25124:	e3400003 	movt	r0, #3
   25128:	e3a020bf 	mov	r2, #191	; 0xbf
   2512c:	eb001de3 	bl	2c8c0 <assertion_failed>

00025130 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   25130:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25134:	e1a06000 	mov	r6, r0
   25138:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   2513c:	e24dd008 	sub	sp, sp, #8
   25140:	e3500000 	cmp	r0, #0
   25144:	b3a03000 	movlt	r3, #0
   25148:	b5863044 	strlt	r3, [r6, #68]	; 0x44
   2514c:	ba000016 	blt	251ac <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x7c>
   25150:	e1a05001 	mov	r5, r1
   25154:	e3510000 	cmp	r1, #0
   25158:	0a000022 	beq	251e8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb8>
   2515c:	e1a09002 	mov	r9, r2
   25160:	e1a0a003 	mov	sl, r3
   25164:	e286702c 	add	r7, r6, #44	; 0x2c
   25168:	e2868038 	add	r8, r6, #56	; 0x38
   2516c:	e28d2004 	add	r2, sp, #4
   25170:	e1a01005 	mov	r1, r5
   25174:	e1a00007 	mov	r0, r7
   25178:	eb000ede 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   2517c:	e2504000 	subs	r4, r0, #0
   25180:	1a00000b 	bne	251b4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x84>
   25184:	e3590040 	cmp	r9, #64	; 0x40
   25188:	0a00001c 	beq	25200 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd0>
   2518c:	e1a00008 	mov	r0, r8
   25190:	eb001d20 	bl	2c618 <CSynchronizationEvent::Clear()>
   25194:	e1a00008 	mov	r0, r8
   25198:	eb001d34 	bl	2c670 <CSynchronizationEvent::Wait()>
   2519c:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   251a0:	e3500000 	cmp	r0, #0
   251a4:	aafffff0 	bge	2516c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x3c>
   251a8:	e5864044 	str	r4, [r6, #68]	; 0x44
   251ac:	e28dd008 	add	sp, sp, #8
   251b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   251b4:	e59d5004 	ldr	r5, [sp, #4]
   251b8:	e3550000 	cmp	r5, #0
   251bc:	0a000018 	beq	25224 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf4>
   251c0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   251c4:	e35a0000 	cmp	sl, #0
   251c8:	13530000 	cmpne	r3, #0
   251cc:	1a00000d 	bne	25208 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd8>
   251d0:	e1a00005 	mov	r0, r5
   251d4:	e3a01006 	mov	r1, #6
   251d8:	eb0046c7 	bl	36cfc <operator delete(void*, unsigned int)>
   251dc:	e1a00004 	mov	r0, r4
   251e0:	e28dd008 	add	sp, sp, #8
   251e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   251e8:	e3011288 	movw	r1, #4744	; 0x1288
   251ec:	e3401004 	movt	r1, #4
   251f0:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   251f4:	e3400003 	movt	r0, #3
   251f8:	e3a02e11 	mov	r2, #272	; 0x110
   251fc:	eb001daf 	bl	2c8c0 <assertion_failed>
   25200:	e1a00004 	mov	r0, r4
   25204:	eaffffe8 	b	251ac <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x7c>
   25208:	e1a01005 	mov	r1, r5
   2520c:	e1a0000a 	mov	r0, sl
   25210:	eb000d6f 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   25214:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   25218:	e1d530b4 	ldrh	r3, [r5, #4]
   2521c:	e1c230b0 	strh	r3, [r2]
   25220:	eaffffea 	b	251d0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa0>
   25224:	e3011288 	movw	r1, #4744	; 0x1288
   25228:	e3401004 	movt	r1, #4
   2522c:	e30c0b74 	movw	r0, #52084	; 0xcb74
   25230:	e3400003 	movt	r0, #3
   25234:	e3a02f4a 	mov	r2, #296	; 0x128
   25238:	eb001da0 	bl	2c8c0 <assertion_failed>

0002523c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   2523c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25240:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   25244:	e35c0011 	cmp	ip, #17
   25248:	1a000017 	bne	252ac <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   2524c:	e1a05002 	mov	r5, r2
   25250:	e3520008 	cmp	r2, #8
   25254:	9a00003c 	bls	2534c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x110>
   25258:	e1a04003 	mov	r4, r3
   2525c:	e1d130b2 	ldrh	r3, [r1, #2]
   25260:	e1d021b6 	ldrh	r2, [r0, #22]
   25264:	e1a07000 	mov	r7, r0
   25268:	e6bf3fb3 	rev16	r3, r3
   2526c:	e1a06001 	mov	r6, r1
   25270:	e6ff3073 	uxth	r3, r3
   25274:	e1520003 	cmp	r2, r3
   25278:	1a00000b 	bne	252ac <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   2527c:	e5903004 	ldr	r3, [r0, #4]
   25280:	e3530000 	cmp	r3, #0
   25284:	0a000051 	beq	253d0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   25288:	e1d180b0 	ldrh	r8, [r1]
   2528c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   25290:	e6bf8fb8 	rev16	r8, r8
   25294:	e3530000 	cmp	r3, #0
   25298:	e6ff3078 	uxth	r3, r8
   2529c:	0a000015 	beq	252f8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   252a0:	e1d021b4 	ldrh	r2, [r0, #20]
   252a4:	e1520003 	cmp	r2, r3
   252a8:	0a000001 	beq	252b4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x78>
   252ac:	e3a00000 	mov	r0, #0
   252b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   252b4:	e280900c 	add	r9, r0, #12
   252b8:	e1a01004 	mov	r1, r4
   252bc:	e1a00009 	mov	r0, r9
   252c0:	eb000cd6 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   252c4:	e3500000 	cmp	r0, #0
   252c8:	0a00000a 	beq	252f8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   252cc:	e1a00009 	mov	r0, r9
   252d0:	eb000da1 	bl	2895c <CIPAddress::IsBroadcast() const>
   252d4:	e3500000 	cmp	r0, #0
   252d8:	1a000006 	bne	252f8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   252dc:	e5970004 	ldr	r0, [r7, #4]
   252e0:	eb000c7b 	bl	284d4 <CNetConfig::GetBroadcastAddress() const>
   252e4:	e1a01000 	mov	r1, r0
   252e8:	e1a00009 	mov	r0, r9
   252ec:	eb000ccb 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   252f0:	e3500000 	cmp	r0, #0
   252f4:	1affffec 	bne	252ac <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   252f8:	e1d630b4 	ldrh	r3, [r6, #4]
   252fc:	e6bf3fb3 	rev16	r3, r3
   25300:	e6ff3073 	uxth	r3, r3
   25304:	e1530005 	cmp	r3, r5
   25308:	8a00000f 	bhi	2534c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x110>
   2530c:	e1d630b6 	ldrh	r3, [r6, #6]
   25310:	e3530000 	cmp	r3, #0
   25314:	0a00000e 	beq	25354 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x118>
   25318:	e287901c 	add	r9, r7, #28
   2531c:	e1a01004 	mov	r1, r4
   25320:	e1a00009 	mov	r0, r9
   25324:	eb000eda 	bl	28e94 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   25328:	e59d1020 	ldr	r1, [sp, #32]
   2532c:	e1a00009 	mov	r0, r9
   25330:	eb000edb 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   25334:	e1a02005 	mov	r2, r5
   25338:	e1a01006 	mov	r1, r6
   2533c:	e1a00009 	mov	r0, r9
   25340:	eb000f02 	bl	28f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   25344:	e3500000 	cmp	r0, #0
   25348:	0a000001 	beq	25354 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x118>
   2534c:	e3e00000 	mvn	r0, #0
   25350:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25354:	e5d73040 	ldrb	r3, [r7, #64]	; 0x40
   25358:	e3530000 	cmp	r3, #0
   2535c:	0a00000f 	beq	253a0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   25360:	e3a00006 	mov	r0, #6
   25364:	eb00464c 	bl	36c9c <operator new(unsigned int)>
   25368:	e1a09000 	mov	r9, r0
   2536c:	e1a01009 	mov	r1, r9
   25370:	e1a00004 	mov	r0, r4
   25374:	eb000d52 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   25378:	e287002c 	add	r0, r7, #44	; 0x2c
   2537c:	e2452008 	sub	r2, r5, #8
   25380:	e2861008 	add	r1, r6, #8
   25384:	e1a03009 	mov	r3, r9
   25388:	e1c980b4 	strh	r8, [r9, #4]
   2538c:	eb000e0f 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   25390:	e2870038 	add	r0, r7, #56	; 0x38
   25394:	eb001ca2 	bl	2c624 <CSynchronizationEvent::Set()>
   25398:	e3a00001 	mov	r0, #1
   2539c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   253a0:	e59d0020 	ldr	r0, [sp, #32]
   253a4:	eb000d6c 	bl	2895c <CIPAddress::IsBroadcast() const>
   253a8:	e3500000 	cmp	r0, #0
   253ac:	1afffff9 	bne	25398 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x15c>
   253b0:	e5970004 	ldr	r0, [r7, #4]
   253b4:	eb000c46 	bl	284d4 <CNetConfig::GetBroadcastAddress() const>
   253b8:	e1a01000 	mov	r1, r0
   253bc:	e59d0020 	ldr	r0, [sp, #32]
   253c0:	eb000c7d 	bl	285bc <CIPAddress::operator==(CIPAddress const&) const>
   253c4:	e3500000 	cmp	r0, #0
   253c8:	0affffe4 	beq	25360 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x124>
   253cc:	eafffff1 	b	25398 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x15c>
   253d0:	e3011288 	movw	r1, #4744	; 0x1288
   253d4:	e3401004 	movt	r1, #4
   253d8:	e3000b08 	movw	r0, #2824	; 0xb08
   253dc:	e3400004 	movt	r0, #4
   253e0:	e300215e 	movw	r2, #350	; 0x15e
   253e4:	eb001d35 	bl	2c8c0 <assertion_failed>

000253e8 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   253e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   253ec:	e1a05003 	mov	r5, r3
   253f0:	e59d3020 	ldr	r3, [sp, #32]
   253f4:	e1dd71b8 	ldrh	r7, [sp, #24]
   253f8:	e1dd11bc 	ldrh	r1, [sp, #28]
   253fc:	e3530011 	cmp	r3, #17
   25400:	1a000013 	bne	25454 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   25404:	e1d031b6 	ldrh	r3, [r0, #22]
   25408:	e1a04000 	mov	r4, r0
   2540c:	e1530001 	cmp	r3, r1
   25410:	1a00000f 	bne	25454 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   25414:	e5900004 	ldr	r0, [r0, #4]
   25418:	e3500000 	cmp	r0, #0
   2541c:	0a000019 	beq	25488 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   25420:	e1a06002 	mov	r6, r2
   25424:	eb000c20 	bl	284ac <CNetConfig::GetIPAddress() const>
   25428:	e1a01000 	mov	r1, r0
   2542c:	e1a00005 	mov	r0, r5
   25430:	eb000c7a 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   25434:	e3500000 	cmp	r0, #0
   25438:	1a000005 	bne	25454 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   2543c:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   25440:	e3530000 	cmp	r3, #0
   25444:	0a000009 	beq	25470 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   25448:	e1d431b4 	ldrh	r3, [r4, #20]
   2544c:	e1530007 	cmp	r3, r7
   25450:	0a000001 	beq	2545c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x74>
   25454:	e3a00000 	mov	r0, #0
   25458:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2545c:	e1a01006 	mov	r1, r6
   25460:	e284000c 	add	r0, r4, #12
   25464:	eb000c6d 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   25468:	e3500000 	cmp	r0, #0
   2546c:	1afffff8 	bne	25454 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   25470:	e2840038 	add	r0, r4, #56	; 0x38
   25474:	e3e03000 	mvn	r3, #0
   25478:	e5843044 	str	r3, [r4, #68]	; 0x44
   2547c:	eb001c68 	bl	2c624 <CSynchronizationEvent::Set()>
   25480:	e3a00001 	mov	r0, #1
   25484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25488:	e3011288 	movw	r1, #4744	; 0x1288
   2548c:	e3401004 	movt	r1, #4
   25490:	e3000b08 	movw	r0, #2824	; 0xb08
   25494:	e3400004 	movt	r0, #4
   25498:	e30021a7 	movw	r2, #423	; 0x1a7
   2549c:	eb001d07 	bl	2c8c0 <assertion_failed>

000254a0 <CUDPConnection::Connect()>:
   254a0:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   254a4:	e3530000 	cmp	r3, #0
   254a8:	0a000001 	beq	254b4 <CUDPConnection::Connect()+0x14>
   254ac:	e3a00000 	mov	r0, #0
   254b0:	e12fff1e 	bx	lr
   254b4:	e3011288 	movw	r1, #4744	; 0x1288
   254b8:	e3401004 	movt	r1, #4
   254bc:	e301029c 	movw	r0, #4764	; 0x129c
   254c0:	e3400004 	movt	r0, #4
   254c4:	e3a02049 	mov	r2, #73	; 0x49
   254c8:	e92d4010 	push	{r4, lr}
   254cc:	eb001cfb 	bl	2c8c0 <assertion_failed>

000254d0 <CUDPConnection::~CUDPConnection()>:
   254d0:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   254d4:	e59f2048 	ldr	r2, [pc, #72]	; 25524 <CUDPConnection::~CUDPConnection()+0x54>
   254d8:	e92d4010 	push	{r4, lr}
   254dc:	e3530000 	cmp	r3, #0
   254e0:	e5802000 	str	r2, [r0]
   254e4:	1a000008 	bne	2550c <CUDPConnection::~CUDPConnection()+0x3c>
   254e8:	e1a04000 	mov	r4, r0
   254ec:	e2800038 	add	r0, r0, #56	; 0x38
   254f0:	eb001c3c 	bl	2c5e8 <CSynchronizationEvent::~CSynchronizationEvent()>
   254f4:	e284002c 	add	r0, r4, #44	; 0x2c
   254f8:	eb000daf 	bl	28bbc <CNetQueue::~CNetQueue()>
   254fc:	e1a00004 	mov	r0, r4
   25500:	ebfffdb1 	bl	24bcc <CNetConnection::~CNetConnection()>
   25504:	e1a00004 	mov	r0, r4
   25508:	e8bd8010 	pop	{r4, pc}
   2550c:	e3011288 	movw	r1, #4744	; 0x1288
   25510:	e3401004 	movt	r1, #4
   25514:	e30102a4 	movw	r0, #4772	; 0x12a4
   25518:	e3400004 	movt	r0, #4
   2551c:	e3a02044 	mov	r2, #68	; 0x44
   25520:	eb001ce6 	bl	2c8c0 <assertion_failed>
   25524:	000412b8 	.word	0x000412b8

00025528 <CUDPConnection::~CUDPConnection()>:
   25528:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   2552c:	e59f2054 	ldr	r2, [pc, #84]	; 25588 <CUDPConnection::~CUDPConnection()+0x60>
   25530:	e92d4010 	push	{r4, lr}
   25534:	e3530000 	cmp	r3, #0
   25538:	e5802000 	str	r2, [r0]
   2553c:	1a00000b 	bne	25570 <CUDPConnection::~CUDPConnection()+0x48>
   25540:	e1a04000 	mov	r4, r0
   25544:	e2800038 	add	r0, r0, #56	; 0x38
   25548:	eb001c26 	bl	2c5e8 <CSynchronizationEvent::~CSynchronizationEvent()>
   2554c:	e284002c 	add	r0, r4, #44	; 0x2c
   25550:	eb000d99 	bl	28bbc <CNetQueue::~CNetQueue()>
   25554:	e1a00004 	mov	r0, r4
   25558:	ebfffd9b 	bl	24bcc <CNetConnection::~CNetConnection()>
   2555c:	e1a00004 	mov	r0, r4
   25560:	e3a01048 	mov	r1, #72	; 0x48
   25564:	eb0045e4 	bl	36cfc <operator delete(void*, unsigned int)>
   25568:	e1a00004 	mov	r0, r4
   2556c:	e8bd8010 	pop	{r4, pc}
   25570:	e3011288 	movw	r1, #4744	; 0x1288
   25574:	e3401004 	movt	r1, #4
   25578:	e30102a4 	movw	r0, #4772	; 0x12a4
   2557c:	e3400004 	movt	r0, #4
   25580:	e3a02044 	mov	r2, #68	; 0x44
   25584:	eb001ccd 	bl	2c8c0 <assertion_failed>
   25588:	000412b8 	.word	0x000412b8

0002558c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   2558c:	e92d4010 	push	{r4, lr}
   25590:	e1a04000 	mov	r4, r0
   25594:	e24dd010 	sub	sp, sp, #16
   25598:	e1ddc1b8 	ldrh	ip, [sp, #24]
   2559c:	e58dc000 	str	ip, [sp]
   255a0:	e1ddc1bc 	ldrh	ip, [sp, #28]
   255a4:	e58dc004 	str	ip, [sp, #4]
   255a8:	e3a0c011 	mov	ip, #17
   255ac:	e58dc008 	str	ip, [sp, #8]
   255b0:	ebfffd31 	bl	24a7c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   255b4:	e59f3034 	ldr	r3, [pc, #52]	; 255f0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x64>
   255b8:	e5843000 	str	r3, [r4]
   255bc:	e284002c 	add	r0, r4, #44	; 0x2c
   255c0:	e3003101 	movw	r3, #257	; 0x101
   255c4:	e1c432b9 	strh	r3, [r4, #41]	; 0x29
   255c8:	eb000d42 	bl	28ad8 <CNetQueue::CNetQueue()>
   255cc:	e3a01000 	mov	r1, #0
   255d0:	e2840038 	add	r0, r4, #56	; 0x38
   255d4:	eb001bff 	bl	2c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   255d8:	e3a03000 	mov	r3, #0
   255dc:	e1a00004 	mov	r0, r4
   255e0:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   255e4:	e5843044 	str	r3, [r4, #68]	; 0x44
   255e8:	e28dd010 	add	sp, sp, #16
   255ec:	e8bd8010 	pop	{r4, pc}
   255f0:	000412b8 	.word	0x000412b8

000255f4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   255f4:	e92d4010 	push	{r4, lr}
   255f8:	e1a04000 	mov	r4, r0
   255fc:	e3a0c011 	mov	ip, #17
   25600:	e24dd008 	sub	sp, sp, #8
   25604:	e58dc000 	str	ip, [sp]
   25608:	ebfffd48 	bl	24b30 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   2560c:	e59f2034 	ldr	r2, [pc, #52]	; 25648 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x54>
   25610:	e3a03001 	mov	r3, #1
   25614:	e5842000 	str	r2, [r4]
   25618:	e1c432b9 	strh	r3, [r4, #41]	; 0x29
   2561c:	e284002c 	add	r0, r4, #44	; 0x2c
   25620:	eb000d2c 	bl	28ad8 <CNetQueue::CNetQueue()>
   25624:	e3a01000 	mov	r1, #0
   25628:	e2840038 	add	r0, r4, #56	; 0x38
   2562c:	eb001be9 	bl	2c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25630:	e3a03000 	mov	r3, #0
   25634:	e1a00004 	mov	r0, r4
   25638:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   2563c:	e5843044 	str	r3, [r4, #68]	; 0x44
   25640:	e28dd008 	add	sp, sp, #8
   25644:	e8bd8010 	pop	{r4, pc}
   25648:	000412b8 	.word	0x000412b8
   2564c:	00000000 	.word	0x00000000

00025650 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   25650:	e590c000 	ldr	ip, [r0]
   25654:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   25658:	e59ce014 	ldr	lr, [ip, #20]
   2565c:	e1a0c00e 	mov	ip, lr
   25660:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   25664:	e12fff1c 	bx	ip

00025668 <CTCPConnection::SetOptionBroadcast(bool)>:
   25668:	e3a00000 	mov	r0, #0
   2566c:	e12fff1e 	bx	lr

00025670 <CTCPConnection::IsConnected() const>:
   25670:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   25674:	e3530002 	cmp	r3, #2
   25678:	9a000003 	bls	2568c <CTCPConnection::IsConnected() const+0x1c>
   2567c:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   25680:	e250000a 	subs	r0, r0, #10
   25684:	13a00001 	movne	r0, #1
   25688:	e12fff1e 	bx	lr
   2568c:	e3a00000 	mov	r0, #0
   25690:	e12fff1e 	bx	lr

00025694 <CTCPConnection::IsTerminated() const>:
   25694:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   25698:	e16f0f10 	clz	r0, r0
   2569c:	e1a002a0 	lsr	r0, r0, #5
   256a0:	e12fff1e 	bx	lr

000256a4 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   256a4:	e92d4070 	push	{r4, r5, r6, lr}
   256a8:	e1a05003 	mov	r5, r3
   256ac:	e5903000 	ldr	r3, [r0]
   256b0:	e1a04000 	mov	r4, r0
   256b4:	e5933018 	ldr	r3, [r3, #24]
   256b8:	e12fff33 	blx	r3
   256bc:	e3500000 	cmp	r0, #0
   256c0:	d8bd8070 	pople	{r4, r5, r6, pc}
   256c4:	e59d3010 	ldr	r3, [sp, #16]
   256c8:	e3550000 	cmp	r5, #0
   256cc:	13530000 	cmpne	r3, #0
   256d0:	1a000001 	bne	256dc <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x38>
   256d4:	e3a00000 	mov	r0, #0
   256d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   256dc:	e1a00005 	mov	r0, r5
   256e0:	e284100c 	add	r1, r4, #12
   256e4:	eb000c4a 	bl	28814 <CIPAddress::Set(CIPAddress const&)>
   256e8:	e59d2010 	ldr	r2, [sp, #16]
   256ec:	e1d431b4 	ldrh	r3, [r4, #20]
   256f0:	e3a00000 	mov	r0, #0
   256f4:	e1c230b0 	strh	r3, [r2]
   256f8:	e8bd8070 	pop	{r4, r5, r6, pc}

000256fc <CTCPConnection::Receive(void*, int)>:
   256fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25700:	e3d29040 	bics	r9, r2, #64	; 0x40
   25704:	1a000013 	bne	25758 <CTCPConnection::Receive(void*, int)+0x5c>
   25708:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   2570c:	e1a04000 	mov	r4, r0
   25710:	e3530000 	cmp	r3, #0
   25714:	ba00001d 	blt	25790 <CTCPConnection::Receive(void*, int)+0x94>
   25718:	e1a07001 	mov	r7, r1
   2571c:	e280803c 	add	r8, r0, #60	; 0x3c
   25720:	e2025040 	and	r5, r2, #64	; 0x40
   25724:	e2806068 	add	r6, r0, #104	; 0x68
   25728:	e3a02000 	mov	r2, #0
   2572c:	e1a01007 	mov	r1, r7
   25730:	e1a00008 	mov	r0, r8
   25734:	eb000d6f 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   25738:	e1a03000 	mov	r3, r0
   2573c:	e3530000 	cmp	r3, #0
   25740:	e1a00006 	mov	r0, r6
   25744:	1a000014 	bne	2579c <CTCPConnection::Receive(void*, int)+0xa0>
   25748:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   2574c:	e3530001 	cmp	r3, #1
   25750:	e6ef3073 	uxtb	r3, r3
   25754:	8a000002 	bhi	25764 <CTCPConnection::Receive(void*, int)+0x68>
   25758:	e3e09000 	mvn	r9, #0
   2575c:	e1a00009 	mov	r0, r9
   25760:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25764:	e2433005 	sub	r3, r3, #5
   25768:	e3530005 	cmp	r3, #5
   2576c:	9afffff9 	bls	25758 <CTCPConnection::Receive(void*, int)+0x5c>
   25770:	e3550000 	cmp	r5, #0
   25774:	1afffff8 	bne	2575c <CTCPConnection::Receive(void*, int)+0x60>
   25778:	eb001ba6 	bl	2c618 <CSynchronizationEvent::Clear()>
   2577c:	e1a00006 	mov	r0, r6
   25780:	eb001bba 	bl	2c670 <CSynchronizationEvent::Wait()>
   25784:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   25788:	e3530000 	cmp	r3, #0
   2578c:	aaffffe5 	bge	25728 <CTCPConnection::Receive(void*, int)+0x2c>
   25790:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
   25794:	e1a00009 	mov	r0, r9
   25798:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2579c:	e1a09003 	mov	r9, r3
   257a0:	e1a00009 	mov	r0, r9
   257a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000257a8 <CTCPConnection::Send(void const*, unsigned int, int)>:
   257a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   257ac:	e1a09003 	mov	r9, r3
   257b0:	e3d93040 	bics	r3, r9, #64	; 0x40
   257b4:	1a00000d 	bne	257f0 <CTCPConnection::Send(void const*, unsigned int, int)+0x48>
   257b8:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   257bc:	e1a07000 	mov	r7, r0
   257c0:	e3530000 	cmp	r3, #0
   257c4:	ba000029 	blt	25870 <CTCPConnection::Send(void const*, unsigned int, int)+0xc8>
   257c8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   257cc:	e1a04001 	mov	r4, r1
   257d0:	e1a06002 	mov	r6, r2
   257d4:	e353000a 	cmp	r3, #10
   257d8:	e6ef3073 	uxtb	r3, r3
   257dc:	8a000005 	bhi	257f8 <CTCPConnection::Send(void const*, unsigned int, int)+0x50>
   257e0:	e3002763 	movw	r2, #1891	; 0x763
   257e4:	e1a03332 	lsr	r3, r2, r3
   257e8:	e3130001 	tst	r3, #1
   257ec:	0a000001 	beq	257f8 <CTCPConnection::Send(void const*, unsigned int, int)+0x50>
   257f0:	e3e00000 	mvn	r0, #0
   257f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   257f8:	e3540000 	cmp	r4, #0
   257fc:	0a000023 	beq	25890 <CTCPConnection::Send(void const*, unsigned int, int)+0xe8>
   25800:	e3560d19 	cmp	r6, #1600	; 0x640
   25804:	82878030 	addhi	r8, r7, #48	; 0x30
   25808:	81a05006 	movhi	r5, r6
   2580c:	9a000019 	bls	25878 <CTCPConnection::Send(void const*, unsigned int, int)+0xd0>
   25810:	e1a01004 	mov	r1, r4
   25814:	e3a03000 	mov	r3, #0
   25818:	e3a02d19 	mov	r2, #1600	; 0x640
   2581c:	e1a00008 	mov	r0, r8
   25820:	e2455d19 	sub	r5, r5, #1600	; 0x640
   25824:	eb000ce9 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   25828:	e2844d19 	add	r4, r4, #1600	; 0x640
   2582c:	e3550d19 	cmp	r5, #1600	; 0x640
   25830:	8afffff6 	bhi	25810 <CTCPConnection::Send(void const*, unsigned int, int)+0x68>
   25834:	e1a02005 	mov	r2, r5
   25838:	e1a01004 	mov	r1, r4
   2583c:	e1a00008 	mov	r0, r8
   25840:	e3a03000 	mov	r3, #0
   25844:	eb000ce1 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   25848:	e3190040 	tst	r9, #64	; 0x40
   2584c:	1a00000d 	bne	25888 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   25850:	e2874070 	add	r4, r7, #112	; 0x70
   25854:	e1a00004 	mov	r0, r4
   25858:	eb001b6e 	bl	2c618 <CSynchronizationEvent::Clear()>
   2585c:	e1a00004 	mov	r0, r4
   25860:	eb001b82 	bl	2c670 <CSynchronizationEvent::Wait()>
   25864:	e597302c 	ldr	r3, [r7, #44]	; 0x2c
   25868:	e3530000 	cmp	r3, #0
   2586c:	aa000005 	bge	25888 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   25870:	e597002c 	ldr	r0, [r7, #44]	; 0x2c
   25874:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25878:	e3560000 	cmp	r6, #0
   2587c:	1a000009 	bne	258a8 <CTCPConnection::Send(void const*, unsigned int, int)+0x100>
   25880:	e3190040 	tst	r9, #64	; 0x40
   25884:	0afffff1 	beq	25850 <CTCPConnection::Send(void const*, unsigned int, int)+0xa8>
   25888:	e1a00006 	mov	r0, r6
   2588c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25890:	e30112f4 	movw	r1, #4852	; 0x12f4
   25894:	e3401004 	movt	r1, #4
   25898:	e30c0b74 	movw	r0, #52084	; 0xcb74
   2589c:	e3400003 	movt	r0, #3
   258a0:	e3a02d06 	mov	r2, #384	; 0x180
   258a4:	eb001c05 	bl	2c8c0 <assertion_failed>
   258a8:	e1a05006 	mov	r5, r6
   258ac:	e2878030 	add	r8, r7, #48	; 0x30
   258b0:	eaffffdf 	b	25834 <CTCPConnection::Send(void const*, unsigned int, int)+0x8c>

000258b4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   258b4:	e92d4070 	push	{r4, r5, r6, lr}
   258b8:	e1a04000 	mov	r4, r0
   258bc:	e3a0c006 	mov	ip, #6
   258c0:	e24dd008 	sub	sp, sp, #8
   258c4:	e3a05000 	mov	r5, #0
   258c8:	e3a06001 	mov	r6, #1
   258cc:	e58dc000 	str	ip, [sp]
   258d0:	ebfffc96 	bl	24b30 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   258d4:	e59f30c4 	ldr	r3, [pc, #196]	; 259a0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xec>
   258d8:	e5843000 	str	r3, [r4]
   258dc:	e2840030 	add	r0, r4, #48	; 0x30
   258e0:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   258e4:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   258e8:	e584502c 	str	r5, [r4, #44]	; 0x2c
   258ec:	eb000c79 	bl	28ad8 <CNetQueue::CNetQueue()>
   258f0:	e284003c 	add	r0, r4, #60	; 0x3c
   258f4:	eb000c77 	bl	28ad8 <CNetQueue::CNetQueue()>
   258f8:	e3a01801 	mov	r1, #65536	; 0x10000
   258fc:	e2840048 	add	r0, r4, #72	; 0x48
   25900:	eb0007ad 	bl	277bc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   25904:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   25908:	e1a01005 	mov	r1, r5
   2590c:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   25910:	e2840068 	add	r0, r4, #104	; 0x68
   25914:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   25918:	e5845060 	str	r5, [r4, #96]	; 0x60
   2591c:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   25920:	eb001b2c 	bl	2c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25924:	e1a01005 	mov	r1, r5
   25928:	e2840070 	add	r0, r4, #112	; 0x70
   2592c:	eb001b29 	bl	2c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25930:	eb004098 	bl	35b98 <CTimer::Get()>
   25934:	e28420a8 	add	r2, r4, #168	; 0xa8
   25938:	eddf0b16 	vldr	d16, [pc, #88]	; 25998 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe4>
   2593c:	e3033908 	movw	r3, #14600	; 0x3908
   25940:	e5840078 	str	r0, [r4, #120]	; 0x78
   25944:	e28400b8 	add	r0, r4, #184	; 0xb8
   25948:	e5843094 	str	r3, [r4, #148]	; 0x94
   2594c:	e3a03f86 	mov	r3, #536	; 0x218
   25950:	e5846088 	str	r6, [r4, #136]	; 0x88
   25954:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   25958:	f442078f 	vst1.32	{d16}, [r2]
   2595c:	e1c43bb4 	strh	r3, [r4, #180]	; 0xb4
   25960:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   25964:	eb0008a7 	bl	27c08 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   25968:	e3043f34 	movw	r3, #20276	; 0x4f34
   2596c:	e3403004 	movt	r3, #4
   25970:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   25974:	e284107c 	add	r1, r4, #124	; 0x7c
   25978:	e1a00004 	mov	r0, r4
   2597c:	e5932000 	ldr	r2, [r3]
   25980:	f441078f 	vst1.32	{d16}, [r1]
   25984:	e0822006 	add	r2, r2, r6
   25988:	e5845084 	str	r5, [r4, #132]	; 0x84
   2598c:	e5832000 	str	r2, [r3]
   25990:	e28dd008 	add	sp, sp, #8
   25994:	e8bd8070 	pop	{r4, r5, r6, pc}
   25998:	00000000 	.word	0x00000000
   2599c:	00003908 	.word	0x00003908
   259a0:	00041528 	.word	0x00041528

000259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   259a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   259a8:	e1a0c001 	mov	ip, r1
   259ac:	e20c7c02 	and	r7, ip, #512	; 0x200
   259b0:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   259b4:	e3570000 	cmp	r7, #0
   259b8:	e24dd008 	sub	sp, sp, #8
   259bc:	e1a04000 	mov	r4, r0
   259c0:	03a00014 	moveq	r0, #20
   259c4:	13a00018 	movne	r0, #24
   259c8:	03a08005 	moveq	r8, #5
   259cc:	13a08006 	movne	r8, #6
   259d0:	e59d5664 	ldr	r5, [sp, #1636]	; 0x664
   259d4:	e59d1660 	ldr	r1, [sp, #1632]	; 0x660
   259d8:	e0906005 	adds	r6, r0, r5
   259dc:	2a000040 	bcs	25ae4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   259e0:	e6bfef32 	rev	lr, r2
   259e4:	e1d421b6 	ldrh	r2, [r4, #22]
   259e8:	e58de00c 	str	lr, [sp, #12]
   259ec:	e6bf2fb2 	rev16	r2, r2
   259f0:	e1cd20b8 	strh	r2, [sp, #8]
   259f4:	e1d421b4 	ldrh	r2, [r4, #20]
   259f8:	e6bf2fb2 	rev16	r2, r2
   259fc:	e1cd20ba 	strh	r2, [sp, #10]
   25a00:	e21c2a01 	ands	r2, ip, #4096	; 0x1000
   25a04:	1a000028 	bne	25aac <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x108>
   25a08:	e59430ac 	ldr	r3, [r4, #172]	; 0xac
   25a0c:	e3570000 	cmp	r7, #0
   25a10:	e18cc208 	orr	ip, ip, r8, lsl #4
   25a14:	e58d2010 	str	r2, [sp, #16]
   25a18:	e6bf3fb3 	rev16	r3, r3
   25a1c:	e1cd31b6 	strh	r3, [sp, #22]
   25a20:	e1d439b8 	ldrh	r3, [r4, #152]	; 0x98
   25a24:	e1cdc1b4 	strh	ip, [sp, #20]
   25a28:	e6bf3fb3 	rev16	r3, r3
   25a2c:	e1cd31ba 	strh	r3, [sp, #26]
   25a30:	13003402 	movwne	r3, #1026	; 0x402
   25a34:	134b3405 	movtne	r3, #46085	; 0xb405
   25a38:	158d301c 	strne	r3, [sp, #28]
   25a3c:	e3550000 	cmp	r5, #0
   25a40:	0a000005 	beq	25a5c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb8>
   25a44:	e3510000 	cmp	r1, #0
   25a48:	0a00001f 	beq	25acc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x128>
   25a4c:	e28d3008 	add	r3, sp, #8
   25a50:	e1a02005 	mov	r2, r5
   25a54:	e0830000 	add	r0, r3, r0
   25a58:	eb004286 	bl	36478 <memcpy>
   25a5c:	e1a02006 	mov	r2, r6
   25a60:	e28d1008 	add	r1, sp, #8
   25a64:	e284001c 	add	r0, r4, #28
   25a68:	e3a03000 	mov	r3, #0
   25a6c:	e1cd31b8 	strh	r3, [sp, #24]
   25a70:	eb000d36 	bl	28f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   25a74:	e594c008 	ldr	ip, [r4, #8]
   25a78:	e1cd01b8 	strh	r0, [sp, #24]
   25a7c:	e35c0000 	cmp	ip, #0
   25a80:	0a00000b 	beq	25ab4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x110>
   25a84:	e3a0e006 	mov	lr, #6
   25a88:	e1a03006 	mov	r3, r6
   25a8c:	e28d2008 	add	r2, sp, #8
   25a90:	e284100c 	add	r1, r4, #12
   25a94:	e1a0000c 	mov	r0, ip
   25a98:	e58de000 	str	lr, [sp]
   25a9c:	ebfff230 	bl	22364 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   25aa0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   25aa4:	e28dd008 	add	sp, sp, #8
   25aa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25aac:	e6bf2f33 	rev	r2, r3
   25ab0:	eaffffd4 	b	25a08 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x64>
   25ab4:	e30112f4 	movw	r1, #4852	; 0x12f4
   25ab8:	e3401004 	movt	r1, #4
   25abc:	e3000c38 	movw	r0, #3128	; 0xc38
   25ac0:	e3400004 	movt	r0, #4
   25ac4:	e3002587 	movw	r2, #1415	; 0x587
   25ac8:	eb001b7c 	bl	2c8c0 <assertion_failed>
   25acc:	e30112f4 	movw	r1, #4852	; 0x12f4
   25ad0:	e3401004 	movt	r1, #4
   25ad4:	e30c0b74 	movw	r0, #52084	; 0xcb74
   25ad8:	e3400003 	movt	r0, #3
   25adc:	e3002571 	movw	r2, #1393	; 0x571
   25ae0:	eb001b76 	bl	2c8c0 <assertion_failed>
   25ae4:	e30112f4 	movw	r1, #4852	; 0x12f4
   25ae8:	e3401004 	movt	r1, #4
   25aec:	e3010308 	movw	r0, #4872	; 0x1308
   25af0:	e3400004 	movt	r0, #4
   25af4:	e3002557 	movw	r2, #1367	; 0x557
   25af8:	eb001b70 	bl	2c8c0 <assertion_failed>

00025afc <CTCPConnection::ScanOptions(TTCPHeader*)>:
   25afc:	e3510000 	cmp	r1, #0
   25b00:	e92d4010 	push	{r4, lr}
   25b04:	0a000029 	beq	25bb0 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb4>
   25b08:	e1d120bc 	ldrh	r2, [r1, #12]
   25b0c:	e281c016 	add	ip, r1, #22
   25b10:	e2813014 	add	r3, r1, #20
   25b14:	e7e32252 	ubfx	r2, r2, #4, #4
   25b18:	e0811102 	add	r1, r1, r2, lsl #2
   25b1c:	e151000c 	cmp	r1, ip
   25b20:	38bd8010 	popcc	{r4, pc}
   25b24:	e5d32000 	ldrb	r2, [r3]
   25b28:	e3520001 	cmp	r2, #1
   25b2c:	0a00000b 	beq	25b60 <CTCPConnection::ScanOptions(TTCPHeader*)+0x64>
   25b30:	e3520002 	cmp	r2, #2
   25b34:	0a00000b 	beq	25b68 <CTCPConnection::ScanOptions(TTCPHeader*)+0x6c>
   25b38:	e3520000 	cmp	r2, #0
   25b3c:	08bd8010 	popeq	{r4, pc}
   25b40:	e5d32001 	ldrb	r2, [r3, #1]
   25b44:	e0833002 	add	r3, r3, r2
   25b48:	e2832002 	add	r2, r3, #2
   25b4c:	e1510002 	cmp	r1, r2
   25b50:	38bd8010 	popcc	{r4, pc}
   25b54:	e5d32000 	ldrb	r2, [r3]
   25b58:	e3520001 	cmp	r2, #1
   25b5c:	1afffff3 	bne	25b30 <CTCPConnection::ScanOptions(TTCPHeader*)+0x34>
   25b60:	e2833001 	add	r3, r3, #1
   25b64:	eafffff7 	b	25b48 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   25b68:	e5d32001 	ldrb	r2, [r3, #1]
   25b6c:	e3520004 	cmp	r2, #4
   25b70:	1afffff3 	bne	25b44 <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   25b74:	e283c004 	add	ip, r3, #4
   25b78:	e151000c 	cmp	r1, ip
   25b7c:	3afffff0 	bcc	25b44 <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   25b80:	e1d3c0b2 	ldrh	ip, [r3, #2]
   25b84:	e300e5c8 	movw	lr, #1480	; 0x5c8
   25b88:	e6bfcfbc 	rev16	ip, ip
   25b8c:	e6ffc07c 	uxth	ip, ip
   25b90:	e28cc014 	add	ip, ip, #20
   25b94:	e15c000e 	cmp	ip, lr
   25b98:	21a0c00e 	movcs	ip, lr
   25b9c:	e24cc014 	sub	ip, ip, #20
   25ba0:	e35c0009 	cmp	ip, #9
   25ba4:	9affffe6 	bls	25b44 <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   25ba8:	e1c0cbb4 	strh	ip, [r0, #180]	; 0xb4
   25bac:	eaffffe3 	b	25b40 <CTCPConnection::ScanOptions(TTCPHeader*)+0x44>
   25bb0:	e30112f4 	movw	r1, #4852	; 0x12f4
   25bb4:	e3401004 	movt	r1, #4
   25bb8:	e3010328 	movw	r0, #4904	; 0x1328
   25bbc:	e3400004 	movt	r0, #4
   25bc0:	e300258d 	movw	r2, #1421	; 0x58d
   25bc4:	eb001b3d 	bl	2c8c0 <assertion_failed>

00025bc8 <CTCPConnection::CalculateISN()>:
   25bc8:	e92d4010 	push	{r4, lr}
   25bcc:	e1a04000 	mov	r4, r0
   25bd0:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   25bd4:	e3500000 	cmp	r0, #0
   25bd8:	0a00000e 	beq	25c18 <CTCPConnection::CalculateISN()+0x50>
   25bdc:	eb003d1f 	bl	35060 <CTimer::GetTime() const>
   25be0:	e1a03000 	mov	r3, r0
   25be4:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   25be8:	e1a04003 	mov	r4, r3
   25bec:	eb003d17 	bl	35050 <CTimer::GetTicks() const>
   25bf0:	e308351f 	movw	r3, #34079	; 0x851f
   25bf4:	e34531eb 	movt	r3, #20971	; 0x51eb
   25bf8:	e3a02064 	mov	r2, #100	; 0x64
   25bfc:	e3a01015 	mov	r1, #21
   25c00:	e083c093 	umull	ip, r3, r3, r0
   25c04:	e1a032a3 	lsr	r3, r3, #5
   25c08:	e0630392 	mls	r3, r2, r3, r0
   25c0c:	e0203492 	mla	r0, r2, r4, r3
   25c10:	e0000091 	mul	r0, r1, r0
   25c14:	e8bd8010 	pop	{r4, pc}
   25c18:	e30112f4 	movw	r1, #4852	; 0x12f4
   25c1c:	e3401004 	movt	r1, #4
   25c20:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
   25c24:	e3400003 	movt	r0, #3
   25c28:	e30025b6 	movw	r2, #1462	; 0x5b6
   25c2c:	eb001b23 	bl	2c8c0 <assertion_failed>

00025c30 <CTCPConnection::StopTimer(unsigned int)>:
   25c30:	e3510002 	cmp	r1, #2
   25c34:	e92d4070 	push	{r4, r5, r6, lr}
   25c38:	8a00001c 	bhi	25cb0 <CTCPConnection::StopTimer(unsigned int)+0x80>
   25c3c:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   25c40:	e1a05000 	mov	r5, r0
   25c44:	e3530000 	cmp	r3, #0
   25c48:	0a00001e 	beq	25cc8 <CTCPConnection::StopTimer(unsigned int)+0x98>
   25c4c:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   25c50:	e281401e 	add	r4, r1, #30
   25c54:	e3500000 	cmp	r0, #0
   25c58:	1a00000d 	bne	25c94 <CTCPConnection::StopTimer(unsigned int)+0x64>
   25c5c:	e0852104 	add	r2, r5, r4, lsl #2
   25c60:	e5921004 	ldr	r1, [r2, #4]
   25c64:	e3510000 	cmp	r1, #0
   25c68:	08bd8070 	popeq	{r4, r5, r6, pc}
   25c6c:	e1a00003 	mov	r0, r3
   25c70:	eb003e32 	bl	35540 <CTimer::CancelKernelTimer(unsigned int)>
   25c74:	e0851104 	add	r1, r5, r4, lsl #2
   25c78:	e3a03000 	mov	r3, #0
   25c7c:	e5813004 	str	r3, [r1, #4]
   25c80:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   25c84:	e3530000 	cmp	r3, #0
   25c88:	08bd8070 	popeq	{r4, r5, r6, pc}
   25c8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   25c90:	ea004a44 	b	385a8 <LeaveCritical>
   25c94:	eb004a18 	bl	384fc <EnterCritical>
   25c98:	e0853104 	add	r3, r5, r4, lsl #2
   25c9c:	e5931004 	ldr	r1, [r3, #4]
   25ca0:	e3510000 	cmp	r1, #0
   25ca4:	0afffff5 	beq	25c80 <CTCPConnection::StopTimer(unsigned int)+0x50>
   25ca8:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   25cac:	eaffffee 	b	25c6c <CTCPConnection::StopTimer(unsigned int)+0x3c>
   25cb0:	e30112f4 	movw	r1, #4852	; 0x12f4
   25cb4:	e3401004 	movt	r1, #4
   25cb8:	e3010338 	movw	r0, #4920	; 0x1338
   25cbc:	e3400004 	movt	r0, #4
   25cc0:	e30025c9 	movw	r2, #1481	; 0x5c9
   25cc4:	eb001afd 	bl	2c8c0 <assertion_failed>
   25cc8:	e30112f4 	movw	r1, #4852	; 0x12f4
   25ccc:	e3401004 	movt	r1, #4
   25cd0:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
   25cd4:	e3400003 	movt	r0, #3
   25cd8:	e30025ca 	movw	r2, #1482	; 0x5ca
   25cdc:	eb001af7 	bl	2c8c0 <assertion_failed>

00025ce0 <CTCPConnection::Close()>:
   25ce0:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   25ce4:	e92d4010 	push	{r4, lr}
   25ce8:	e1a04000 	mov	r4, r0
   25cec:	e3530000 	cmp	r3, #0
   25cf0:	ba00000e 	blt	25d30 <CTCPConnection::Close()+0x50>
   25cf4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   25cf8:	e353000a 	cmp	r3, #10
   25cfc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   25d00:	ea000012 	b	25d50 <CTCPConnection::Close()+0x70>
   25d04:	00025d38 	.word	0x00025d38
   25d08:	00025d40 	.word	0x00025d40
   25d0c:	00025d40 	.word	0x00025d40
   25d10:	00025d64 	.word	0x00025d64
   25d14:	00025d64 	.word	0x00025d64
   25d18:	00025d50 	.word	0x00025d50
   25d1c:	00025d50 	.word	0x00025d50
   25d20:	00025d88 	.word	0x00025d88
   25d24:	00025d38 	.word	0x00025d38
   25d28:	00025d38 	.word	0x00025d38
   25d2c:	00025d38 	.word	0x00025d38
   25d30:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   25d34:	e8bd8010 	pop	{r4, pc}
   25d38:	e3e00000 	mvn	r0, #0
   25d3c:	e8bd8010 	pop	{r4, pc}
   25d40:	e3a01001 	mov	r1, #1
   25d44:	ebffffb9 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   25d48:	e3a03000 	mov	r3, #0
   25d4c:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   25d50:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   25d54:	e3530000 	cmp	r3, #0
   25d58:	bafffff4 	blt	25d30 <CTCPConnection::Close()+0x50>
   25d5c:	e3a00000 	mov	r0, #0
   25d60:	e8bd8010 	pop	{r4, pc}
   25d64:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   25d68:	e3530000 	cmp	r3, #0
   25d6c:	1a00000f 	bne	25db0 <CTCPConnection::Close()+0xd0>
   25d70:	e3a03005 	mov	r3, #5
   25d74:	e3a02001 	mov	r2, #1
   25d78:	e5803060 	str	r3, [r0, #96]	; 0x60
   25d7c:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   25d80:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   25d84:	eafffff1 	b	25d50 <CTCPConnection::Close()+0x70>
   25d88:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   25d8c:	e3530000 	cmp	r3, #0
   25d90:	1a00000c 	bne	25dc8 <CTCPConnection::Close()+0xe8>
   25d94:	e3a02009 	mov	r2, #9
   25d98:	e3a01005 	mov	r1, #5
   25d9c:	e3a03001 	mov	r3, #1
   25da0:	e5801060 	str	r1, [r0, #96]	; 0x60
   25da4:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   25da8:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   25dac:	eaffffe7 	b	25d50 <CTCPConnection::Close()+0x70>
   25db0:	e30112f4 	movw	r1, #4852	; 0x12f4
   25db4:	e3401004 	movt	r1, #4
   25db8:	e3010354 	movw	r0, #4948	; 0x1354
   25dbc:	e3400004 	movt	r0, #4
   25dc0:	e3a02d05 	mov	r2, #320	; 0x140
   25dc4:	eb001abd 	bl	2c8c0 <assertion_failed>
   25dc8:	e30112f4 	movw	r1, #4852	; 0x12f4
   25dcc:	e3401004 	movt	r1, #4
   25dd0:	e3010354 	movw	r0, #4948	; 0x1354
   25dd4:	e3400004 	movt	r0, #4
   25dd8:	e300214b 	movw	r2, #331	; 0x14b
   25ddc:	eb001ab7 	bl	2c8c0 <assertion_failed>

00025de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   25de0:	e92d4070 	push	{r4, r5, r6, lr}
   25de4:	e3510002 	cmp	r1, #2
   25de8:	e24dd008 	sub	sp, sp, #8
   25dec:	8a000013 	bhi	25e40 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x60>
   25df0:	e1a06002 	mov	r6, r2
   25df4:	e3520000 	cmp	r2, #0
   25df8:	0a000016 	beq	25e58 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x78>
   25dfc:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   25e00:	e1a04000 	mov	r4, r0
   25e04:	e3530000 	cmp	r3, #0
   25e08:	0a000018 	beq	25e70 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   25e0c:	e1a05001 	mov	r5, r1
   25e10:	ebffff86 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   25e14:	e58d4000 	str	r4, [sp]
   25e18:	e1a03005 	mov	r3, r5
   25e1c:	e1a01006 	mov	r1, r6
   25e20:	e3062960 	movw	r2, #26976	; 0x6960
   25e24:	e3402002 	movt	r2, #2
   25e28:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   25e2c:	e0844105 	add	r4, r4, r5, lsl #2
   25e30:	eb003d6d 	bl	353ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   25e34:	e584007c 	str	r0, [r4, #124]	; 0x7c
   25e38:	e28dd008 	add	sp, sp, #8
   25e3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   25e40:	e30112f4 	movw	r1, #4852	; 0x12f4
   25e44:	e3401004 	movt	r1, #4
   25e48:	e3010338 	movw	r0, #4920	; 0x1338
   25e4c:	e3400004 	movt	r0, #4
   25e50:	e30025be 	movw	r2, #1470	; 0x5be
   25e54:	eb001a99 	bl	2c8c0 <assertion_failed>
   25e58:	e30112f4 	movw	r1, #4852	; 0x12f4
   25e5c:	e3401004 	movt	r1, #4
   25e60:	e3010364 	movw	r0, #4964	; 0x1364
   25e64:	e3400004 	movt	r0, #4
   25e68:	e30025bf 	movw	r2, #1471	; 0x5bf
   25e6c:	eb001a93 	bl	2c8c0 <assertion_failed>
   25e70:	e30112f4 	movw	r1, #4852	; 0x12f4
   25e74:	e3401004 	movt	r1, #4
   25e78:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
   25e7c:	e3400003 	movt	r0, #3
   25e80:	e3a02d17 	mov	r2, #1472	; 0x5c0
   25e84:	eb001a8d 	bl	2c8c0 <assertion_failed>

00025e88 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   25e88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25e8c:	e1a04000 	mov	r4, r0
   25e90:	e3a05000 	mov	r5, #0
   25e94:	e24dd010 	sub	sp, sp, #16
   25e98:	e3a06001 	mov	r6, #1
   25e9c:	e28470b8 	add	r7, r4, #184	; 0xb8
   25ea0:	e1ddc2b8 	ldrh	ip, [sp, #40]	; 0x28
   25ea4:	e58dc000 	str	ip, [sp]
   25ea8:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   25eac:	e58dc004 	str	ip, [sp, #4]
   25eb0:	e3a0c006 	mov	ip, #6
   25eb4:	e58dc008 	str	ip, [sp, #8]
   25eb8:	ebfffaef 	bl	24a7c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   25ebc:	e59f319c 	ldr	r3, [pc, #412]	; 26060 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x1d8>
   25ec0:	e5843000 	str	r3, [r4]
   25ec4:	e2840030 	add	r0, r4, #48	; 0x30
   25ec8:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   25ecc:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   25ed0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   25ed4:	eb000aff 	bl	28ad8 <CNetQueue::CNetQueue()>
   25ed8:	e284003c 	add	r0, r4, #60	; 0x3c
   25edc:	eb000afd 	bl	28ad8 <CNetQueue::CNetQueue()>
   25ee0:	e3a01801 	mov	r1, #65536	; 0x10000
   25ee4:	e2840048 	add	r0, r4, #72	; 0x48
   25ee8:	eb000633 	bl	277bc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   25eec:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   25ef0:	e1a01005 	mov	r1, r5
   25ef4:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   25ef8:	e2840068 	add	r0, r4, #104	; 0x68
   25efc:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   25f00:	e5845060 	str	r5, [r4, #96]	; 0x60
   25f04:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   25f08:	eb0019b2 	bl	2c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25f0c:	e1a01005 	mov	r1, r5
   25f10:	e2840070 	add	r0, r4, #112	; 0x70
   25f14:	eb0019af 	bl	2c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25f18:	eb003f1e 	bl	35b98 <CTimer::Get()>
   25f1c:	eddf0b4d 	vldr	d16, [pc, #308]	; 26058 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x1d0>
   25f20:	e28430a8 	add	r3, r4, #168	; 0xa8
   25f24:	e5840078 	str	r0, [r4, #120]	; 0x78
   25f28:	e3032908 	movw	r2, #14600	; 0x3908
   25f2c:	e5846088 	str	r6, [r4, #136]	; 0x88
   25f30:	e5842094 	str	r2, [r4, #148]	; 0x94
   25f34:	e1a00007 	mov	r0, r7
   25f38:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   25f3c:	f443078f 	vst1.32	{d16}, [r3]
   25f40:	e3a03f86 	mov	r3, #536	; 0x218
   25f44:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   25f48:	e1c43bb4 	strh	r3, [r4, #180]	; 0xb4
   25f4c:	eb00072d 	bl	27c08 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   25f50:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   25f54:	e284207c 	add	r2, r4, #124	; 0x7c
   25f58:	e3043f34 	movw	r3, #20276	; 0x4f34
   25f5c:	e3403004 	movt	r3, #4
   25f60:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   25f64:	f442078f 	vst1.32	{d16}, [r2]
   25f68:	e1500005 	cmp	r0, r5
   25f6c:	e5932000 	ldr	r2, [r3]
   25f70:	e5845084 	str	r5, [r4, #132]	; 0x84
   25f74:	e0822006 	add	r2, r2, r6
   25f78:	e5832000 	str	r2, [r3]
   25f7c:	0a00002f 	beq	26040 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x1b8>
   25f80:	eb003c36 	bl	35060 <CTimer::GetTime() const>
   25f84:	e1a08000 	mov	r8, r0
   25f88:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   25f8c:	eb003c2f 	bl	35050 <CTimer::GetTicks() const>
   25f90:	e308351f 	movw	r3, #34079	; 0x851f
   25f94:	e34531eb 	movt	r3, #20971	; 0x51eb
   25f98:	e0832093 	umull	r2, r3, r3, r0
   25f9c:	e3a02064 	mov	r2, #100	; 0x64
   25fa0:	e1a032a3 	lsr	r3, r3, #5
   25fa4:	e0610392 	mls	r1, r2, r3, r0
   25fa8:	e3a03015 	mov	r3, #21
   25fac:	e0211892 	mla	r1, r2, r8, r1
   25fb0:	e1a00007 	mov	r0, r7
   25fb4:	e0010193 	mul	r1, r3, r1
   25fb8:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   25fbc:	eb000730 	bl	27c84 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   25fc0:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   25fc4:	e584208c 	str	r2, [r4, #140]	; 0x8c
   25fc8:	e1a03005 	mov	r3, r5
   25fcc:	e2821001 	add	r1, r2, #1
   25fd0:	e58d5004 	str	r5, [sp, #4]
   25fd4:	e58d5000 	str	r5, [sp]
   25fd8:	e1a00004 	mov	r0, r4
   25fdc:	e5841090 	str	r1, [r4, #144]	; 0x90
   25fe0:	e3a01c02 	mov	r1, #512	; 0x200
   25fe4:	ebfffe6e 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   25fe8:	e3500000 	cmp	r0, #0
   25fec:	1a000002 	bne	25ffc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x174>
   25ff0:	e1a00004 	mov	r0, r4
   25ff4:	e28dd010 	add	sp, sp, #16
   25ff8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25ffc:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   26000:	e1a02006 	mov	r2, r6
   26004:	e1a00007 	mov	r0, r7
   26008:	eb000739 	bl	27cf4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   2600c:	e3a03005 	mov	r3, #5
   26010:	e3a02002 	mov	r2, #2
   26014:	e1a00007 	mov	r0, r7
   26018:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   2601c:	e5843060 	str	r3, [r4, #96]	; 0x60
   26020:	eb000715 	bl	27c7c <CRetransmissionTimeoutCalculator::GetRTO() const>
   26024:	e1a01006 	mov	r1, r6
   26028:	e1a02000 	mov	r2, r0
   2602c:	e1a00004 	mov	r0, r4
   26030:	ebffff6a 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   26034:	e1a00004 	mov	r0, r4
   26038:	e28dd010 	add	sp, sp, #16
   2603c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26040:	e30112f4 	movw	r1, #4852	; 0x12f4
   26044:	e3401004 	movt	r1, #4
   26048:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
   2604c:	e3400003 	movt	r0, #3
   26050:	e30025b6 	movw	r2, #1462	; 0x5b6
   26054:	eb001a19 	bl	2c8c0 <assertion_failed>
   26058:	00000000 	.word	0x00000000
   2605c:	00003908 	.word	0x00003908
   26060:	00041528 	.word	0x00041528

00026064 <CTCPConnection::Process()>:
   26064:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   26068:	e1a04000 	mov	r4, r0
   2606c:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   26070:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   26074:	e24dd00c 	sub	sp, sp, #12
   26078:	e21350ff 	ands	r5, r3, #255	; 0xff
   2607c:	1a00000d 	bne	260b8 <CTCPConnection::Process()+0x54>
   26080:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   26084:	e353000a 	cmp	r3, #10
   26088:	e6ef3073 	uxtb	r3, r3
   2608c:	8a000066 	bhi	2622c <CTCPConnection::Process()+0x1c8>
   26090:	e3a07001 	mov	r7, #1
   26094:	e1a03317 	lsl	r3, r7, r3
   26098:	e3130e3b 	tst	r3, #944	; 0x3b0
   2609c:	1a00000e 	bne	260dc <CTCPConnection::Process()+0x78>
   260a0:	e3002443 	movw	r2, #1091	; 0x443
   260a4:	e0131002 	ands	r1, r3, r2
   260a8:	0a00006f 	beq	2626c <CTCPConnection::Process()+0x208>
   260ac:	e28ddd19 	add	sp, sp, #1600	; 0x640
   260b0:	e28dd00c 	add	sp, sp, #12
   260b4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   260b8:	e3a03000 	mov	r3, #0
   260bc:	e3e02000 	mvn	r2, #0
   260c0:	e2800068 	add	r0, r0, #104	; 0x68
   260c4:	e584202c 	str	r2, [r4, #44]	; 0x2c
   260c8:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   260cc:	e28ddd19 	add	sp, sp, #1600	; 0x640
   260d0:	e28dd00c 	add	sp, sp, #12
   260d4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   260d8:	ea001951 	b	2c624 <CSynchronizationEvent::Set()>
   260dc:	e2806048 	add	r6, r0, #72	; 0x48
   260e0:	e1a00006 	mov	r0, r6
   260e4:	eb0005d3 	bl	27838 <CRetransmissionQueue::IsEmpty() const>
   260e8:	e3500000 	cmp	r0, #0
   260ec:	1a00007e 	bne	262ec <CTCPConnection::Process()+0x288>
   260f0:	e2845030 	add	r5, r4, #48	; 0x30
   260f4:	ea000008 	b	2611c <CTCPConnection::Process()+0xb8>
   260f8:	e3a02000 	mov	r2, #0
   260fc:	e28d1008 	add	r1, sp, #8
   26100:	e1a00005 	mov	r0, r5
   26104:	eb000afb 	bl	28cf8 <CNetQueue::Dequeue(void*, void**)>
   26108:	e2502000 	subs	r2, r0, #0
   2610c:	0a000006 	beq	2612c <CTCPConnection::Process()+0xc8>
   26110:	e28d1008 	add	r1, sp, #8
   26114:	e1a00006 	mov	r0, r6
   26118:	eb0005ef 	bl	278dc <CRetransmissionQueue::Write(void const*, unsigned int)>
   2611c:	e1a00006 	mov	r0, r6
   26120:	eb0005ca 	bl	27850 <CRetransmissionQueue::GetFreeSpace() const>
   26124:	e3500d19 	cmp	r0, #1600	; 0x640
   26128:	2afffff2 	bcs	260f8 <CTCPConnection::Process()+0x94>
   2612c:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   26130:	e3530004 	cmp	r3, #4
   26134:	0a00003e 	beq	26234 <CTCPConnection::Process()+0x1d0>
   26138:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   2613c:	e3530007 	cmp	r3, #7
   26140:	0a00003b 	beq	26234 <CTCPConnection::Process()+0x1d0>
   26144:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   26148:	e3530000 	cmp	r3, #0
   2614c:	1a00003f 	bne	26250 <CTCPConnection::Process()+0x1ec>
   26150:	e28d8008 	add	r8, sp, #8
   26154:	e2849030 	add	r9, r4, #48	; 0x30
   26158:	e28470b8 	add	r7, r4, #184	; 0xb8
   2615c:	ea00001b 	b	261d0 <CTCPConnection::Process()+0x16c>
   26160:	e1a01008 	mov	r1, r8
   26164:	e1a02005 	mov	r2, r5
   26168:	e1a00006 	mov	r0, r6
   2616c:	eb00063b 	bl	27a60 <CRetransmissionQueue::Read(void*, unsigned int)>
   26170:	e1a00009 	mov	r0, r9
   26174:	eb000a5c 	bl	28aec <CNetQueue::IsEmpty() const>
   26178:	e3500000 	cmp	r0, #0
   2617c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   26180:	13a01b06 	movne	r1, #6144	; 0x1800
   26184:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   26188:	03a01a01 	moveq	r1, #4096	; 0x1000
   2618c:	e1a00004 	mov	r0, r4
   26190:	e58d5004 	str	r5, [sp, #4]
   26194:	e58d8000 	str	r8, [sp]
   26198:	ebfffe01 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   2619c:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   261a0:	e1a02005 	mov	r2, r5
   261a4:	e1a00007 	mov	r0, r7
   261a8:	eb0006d1 	bl	27cf4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   261ac:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   261b0:	e1a00007 	mov	r0, r7
   261b4:	e0833005 	add	r3, r3, r5
   261b8:	e5843090 	str	r3, [r4, #144]	; 0x90
   261bc:	eb0006ae 	bl	27c7c <CRetransmissionTimeoutCalculator::GetRTO() const>
   261c0:	e3a01001 	mov	r1, #1
   261c4:	e1a02000 	mov	r2, r0
   261c8:	e1a00004 	mov	r0, r4
   261cc:	ebffff03 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   261d0:	e1a00006 	mov	r0, r6
   261d4:	eb000600 	bl	279dc <CRetransmissionQueue::GetBytesAvailable() const>
   261d8:	e3500000 	cmp	r0, #0
   261dc:	0affffb2 	beq	260ac <CTCPConnection::Process()+0x48>
   261e0:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   261e4:	e5941094 	ldr	r1, [r4, #148]	; 0x94
   261e8:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   261ec:	e0833001 	add	r3, r3, r1
   261f0:	e0533002 	subs	r3, r3, r2
   261f4:	0affffac 	beq	260ac <CTCPConnection::Process()+0x48>
   261f8:	e1d45bb4 	ldrh	r5, [r4, #180]	; 0xb4
   261fc:	e1550003 	cmp	r5, r3
   26200:	21a05003 	movcs	r5, r3
   26204:	e1550000 	cmp	r5, r0
   26208:	21a05000 	movcs	r5, r0
   2620c:	e3550d19 	cmp	r5, #1600	; 0x640
   26210:	9affffd2 	bls	26160 <CTCPConnection::Process()+0xfc>
   26214:	e30112f4 	movw	r1, #4852	; 0x12f4
   26218:	e3401004 	movt	r1, #4
   2621c:	e30d0fec 	movw	r0, #57324	; 0xdfec
   26220:	e3400003 	movt	r0, #3
   26224:	e300225b 	movw	r2, #603	; 0x25b
   26228:	eb0019a4 	bl	2c8c0 <assertion_failed>
   2622c:	e2846048 	add	r6, r4, #72	; 0x48
   26230:	eaffffae 	b	260f0 <CTCPConnection::Process()+0x8c>
   26234:	e2840030 	add	r0, r4, #48	; 0x30
   26238:	eb000a2b 	bl	28aec <CNetQueue::IsEmpty() const>
   2623c:	e3500000 	cmp	r0, #0
   26240:	0affffbf 	beq	26144 <CTCPConnection::Process()+0xe0>
   26244:	e2840070 	add	r0, r4, #112	; 0x70
   26248:	eb0018f5 	bl	2c624 <CSynchronizationEvent::Set()>
   2624c:	eaffffbc 	b	26144 <CTCPConnection::Process()+0xe0>
   26250:	e3a03000 	mov	r3, #0
   26254:	e1a00006 	mov	r0, r6
   26258:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   2625c:	eb000660 	bl	27be4 <CRetransmissionQueue::Reset()>
   26260:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   26264:	e5843090 	str	r3, [r4, #144]	; 0x90
   26268:	eaffffb8 	b	26150 <CTCPConnection::Process()+0xec>
   2626c:	e313000c 	tst	r3, #12
   26270:	0affffed 	beq	2622c <CTCPConnection::Process()+0x1c8>
   26274:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   26278:	e3530000 	cmp	r3, #0
   2627c:	0affff8a 	beq	260ac <CTCPConnection::Process()+0x48>
   26280:	e5c0105d 	strb	r1, [r0, #93]	; 0x5d
   26284:	e28450b8 	add	r5, r4, #184	; 0xb8
   26288:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   2628c:	e3530002 	cmp	r3, #2
   26290:	01a03001 	moveq	r3, r1
   26294:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   26298:	11c02ad4 	ldrdne	r2, [r0, #164]	; 0xa4
   2629c:	058d1004 	streq	r1, [sp, #4]
   262a0:	058d1000 	streq	r1, [sp]
   262a4:	03a01c02 	moveq	r1, #512	; 0x200
   262a8:	158d1004 	strne	r1, [sp, #4]
   262ac:	158d1000 	strne	r1, [sp]
   262b0:	13a01c12 	movne	r1, #4608	; 0x1200
   262b4:	ebfffdba 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   262b8:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   262bc:	e3a02001 	mov	r2, #1
   262c0:	e1a00005 	mov	r0, r5
   262c4:	eb00068a 	bl	27cf4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   262c8:	e1a00005 	mov	r0, r5
   262cc:	eb00066a 	bl	27c7c <CRetransmissionTimeoutCalculator::GetRTO() const>
   262d0:	e3a01001 	mov	r1, #1
   262d4:	e1a02000 	mov	r2, r0
   262d8:	e1a00004 	mov	r0, r4
   262dc:	e28ddd19 	add	sp, sp, #1600	; 0x640
   262e0:	e28dd00c 	add	sp, sp, #12
   262e4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   262e8:	eafffebc 	b	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   262ec:	e2840030 	add	r0, r4, #48	; 0x30
   262f0:	eb0009fd 	bl	28aec <CNetQueue::IsEmpty() const>
   262f4:	e3500000 	cmp	r0, #0
   262f8:	0affff7c 	beq	260f0 <CTCPConnection::Process()+0x8c>
   262fc:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   26300:	e3530000 	cmp	r3, #0
   26304:	0affff79 	beq	260f0 <CTCPConnection::Process()+0x8c>
   26308:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   2630c:	e28480b8 	add	r8, r4, #184	; 0xb8
   26310:	e58d5004 	str	r5, [sp, #4]
   26314:	e3a01c11 	mov	r1, #4352	; 0x1100
   26318:	e58d5000 	str	r5, [sp]
   2631c:	e1a00004 	mov	r0, r4
   26320:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   26324:	ebfffd9e 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26328:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   2632c:	e1a02007 	mov	r2, r7
   26330:	e1a00008 	mov	r0, r8
   26334:	eb00066e 	bl	27cf4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26338:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   2633c:	e1a00008 	mov	r0, r8
   26340:	e2833001 	add	r3, r3, #1
   26344:	e5843090 	str	r3, [r4, #144]	; 0x90
   26348:	e5d4305f 	ldrb	r3, [r4, #95]	; 0x5f
   2634c:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   26350:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   26354:	eb000648 	bl	27c7c <CRetransmissionTimeoutCalculator::GetRTO() const>
   26358:	e1a01007 	mov	r1, r7
   2635c:	e1a02000 	mov	r2, r0
   26360:	e1a00004 	mov	r0, r4
   26364:	ebfffe9d 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   26368:	eaffff60 	b	260f0 <CTCPConnection::Process()+0x8c>

0002636c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   2636c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26370:	e59d1020 	ldr	r1, [sp, #32]
   26374:	e1dd61b8 	ldrh	r6, [sp, #24]
   26378:	e1dd71bc 	ldrh	r7, [sp, #28]
   2637c:	e3510006 	cmp	r1, #6
   26380:	1a000018 	bne	263e8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   26384:	e1a05003 	mov	r5, r3
   26388:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   2638c:	e1a04000 	mov	r4, r0
   26390:	e3530001 	cmp	r3, #1
   26394:	9a000013 	bls	263e8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   26398:	e1a01002 	mov	r1, r2
   2639c:	e280000c 	add	r0, r0, #12
   263a0:	eb00089e 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   263a4:	e3500000 	cmp	r0, #0
   263a8:	1a00000e 	bne	263e8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   263ac:	e1d431b4 	ldrh	r3, [r4, #20]
   263b0:	e1530006 	cmp	r3, r6
   263b4:	1a00000b 	bne	263e8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   263b8:	e5940004 	ldr	r0, [r4, #4]
   263bc:	e3500000 	cmp	r0, #0
   263c0:	0a000019 	beq	2642c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   263c4:	eb000838 	bl	284ac <CNetConfig::GetIPAddress() const>
   263c8:	e1a01000 	mov	r1, r0
   263cc:	e1a00005 	mov	r0, r5
   263d0:	eb000892 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   263d4:	e3500000 	cmp	r0, #0
   263d8:	1a000002 	bne	263e8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   263dc:	e1d431b6 	ldrh	r3, [r4, #22]
   263e0:	e1530007 	cmp	r3, r7
   263e4:	0a000001 	beq	263f0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x84>
   263e8:	e3a00000 	mov	r0, #0
   263ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   263f0:	e1a00004 	mov	r0, r4
   263f4:	e3e03000 	mvn	r3, #0
   263f8:	e3a01001 	mov	r1, #1
   263fc:	e584302c 	str	r3, [r4, #44]	; 0x2c
   26400:	ebfffe0a 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   26404:	e3a0300a 	mov	r3, #10
   26408:	e3a01002 	mov	r1, #2
   2640c:	e1a00004 	mov	r0, r4
   26410:	e3012770 	movw	r2, #6000	; 0x1770
   26414:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   26418:	ebfffe70 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   2641c:	e2840068 	add	r0, r4, #104	; 0x68
   26420:	eb00187f 	bl	2c624 <CSynchronizationEvent::Set()>
   26424:	e3a00001 	mov	r0, #1
   26428:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2642c:	e30112f4 	movw	r1, #4852	; 0x12f4
   26430:	e3401004 	movt	r1, #4
   26434:	e3000b08 	movw	r0, #2824	; 0xb08
   26438:	e3400004 	movt	r0, #4
   2643c:	e3002539 	movw	r2, #1337	; 0x539
   26440:	eb00191e 	bl	2c8c0 <assertion_failed>

00026444 <CTCPConnection::~CTCPConnection()>:
   26444:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   26448:	e59f30d0 	ldr	r3, [pc, #208]	; 26520 <CTCPConnection::~CTCPConnection()+0xdc>
   2644c:	e92d4070 	push	{r4, r5, r6, lr}
   26450:	e21110ff 	ands	r1, r1, #255	; 0xff
   26454:	e5803000 	str	r3, [r0]
   26458:	1a000024 	bne	264f0 <CTCPConnection::~CTCPConnection()+0xac>
   2645c:	e1a04000 	mov	r4, r0
   26460:	e2805068 	add	r5, r0, #104	; 0x68
   26464:	ebfffdf1 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   26468:	e3a01001 	mov	r1, #1
   2646c:	e1a00004 	mov	r0, r4
   26470:	e2846070 	add	r6, r4, #112	; 0x70
   26474:	ebfffded 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   26478:	e3a01002 	mov	r1, #2
   2647c:	e1a00004 	mov	r0, r4
   26480:	ebfffdea 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   26484:	e1a00005 	mov	r0, r5
   26488:	eb001865 	bl	2c624 <CSynchronizationEvent::Set()>
   2648c:	e1a00006 	mov	r0, r6
   26490:	eb001863 	bl	2c624 <CSynchronizationEvent::Set()>
   26494:	e3043f34 	movw	r3, #20276	; 0x4f34
   26498:	e3403004 	movt	r3, #4
   2649c:	e5932000 	ldr	r2, [r3]
   264a0:	e3520000 	cmp	r2, #0
   264a4:	0a000017 	beq	26508 <CTCPConnection::~CTCPConnection()+0xc4>
   264a8:	e28400b8 	add	r0, r4, #184	; 0xb8
   264ac:	e2422001 	sub	r2, r2, #1
   264b0:	e5832000 	str	r2, [r3]
   264b4:	eb0005ef 	bl	27c78 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   264b8:	e1a00006 	mov	r0, r6
   264bc:	eb001849 	bl	2c5e8 <CSynchronizationEvent::~CSynchronizationEvent()>
   264c0:	e1a00005 	mov	r0, r5
   264c4:	eb001847 	bl	2c5e8 <CSynchronizationEvent::~CSynchronizationEvent()>
   264c8:	e2840048 	add	r0, r4, #72	; 0x48
   264cc:	eb0004d0 	bl	27814 <CRetransmissionQueue::~CRetransmissionQueue()>
   264d0:	e284003c 	add	r0, r4, #60	; 0x3c
   264d4:	eb0009b8 	bl	28bbc <CNetQueue::~CNetQueue()>
   264d8:	e2840030 	add	r0, r4, #48	; 0x30
   264dc:	eb0009b6 	bl	28bbc <CNetQueue::~CNetQueue()>
   264e0:	e1a00004 	mov	r0, r4
   264e4:	ebfff9b8 	bl	24bcc <CNetConnection::~CNetConnection()>
   264e8:	e1a00004 	mov	r0, r4
   264ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   264f0:	e30112f4 	movw	r1, #4852	; 0x12f4
   264f4:	e3401004 	movt	r1, #4
   264f8:	e301036c 	movw	r0, #4972	; 0x136c
   264fc:	e3400004 	movt	r0, #4
   26500:	e3a020d1 	mov	r2, #209	; 0xd1
   26504:	eb0018ed 	bl	2c8c0 <assertion_failed>
   26508:	e30112f4 	movw	r1, #4852	; 0x12f4
   2650c:	e3401004 	movt	r1, #4
   26510:	e3010388 	movw	r0, #5000	; 0x1388
   26514:	e3400004 	movt	r0, #4
   26518:	e3a020dc 	mov	r2, #220	; 0xdc
   2651c:	eb0018e7 	bl	2c8c0 <assertion_failed>
   26520:	00041528 	.word	0x00041528

00026524 <CTCPConnection::~CTCPConnection()>:
   26524:	e92d4010 	push	{r4, lr}
   26528:	e1a04000 	mov	r4, r0
   2652c:	ebffffc4 	bl	26444 <CTCPConnection::~CTCPConnection()>
   26530:	e1a00004 	mov	r0, r4
   26534:	e3a010e0 	mov	r1, #224	; 0xe0
   26538:	eb0041ef 	bl	36cfc <operator delete(void*, unsigned int)>
   2653c:	e1a00004 	mov	r0, r4
   26540:	e8bd8010 	pop	{r4, pc}

00026544 <CTCPConnection::DumpStatus()>:
   26544:	e92d4010 	push	{r4, lr}
   26548:	e1a04000 	mov	r4, r0
   2654c:	e24dd020 	sub	sp, sp, #32
   26550:	eb002357 	bl	2f2b4 <CLogger::Get()>
   26554:	e5d4c02a 	ldrb	ip, [r4, #42]	; 0x2a
   26558:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   2655c:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   26560:	e59420a8 	ldr	r2, [r4, #168]	; 0xa8
   26564:	e58dc000 	str	ip, [sp]
   26568:	e0422003 	sub	r2, r2, r3
   2656c:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   26570:	e594c094 	ldr	ip, [r4, #148]	; 0x94
   26574:	e58dc00c 	str	ip, [sp, #12]
   26578:	e0433001 	sub	r3, r3, r1
   2657c:	e58d2010 	str	r2, [sp, #16]
   26580:	e58d3008 	str	r3, [sp, #8]
   26584:	e301339c 	movw	r3, #5020	; 0x139c
   26588:	e3403004 	movt	r3, #4
   2658c:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   26590:	e0422001 	sub	r2, r2, r1
   26594:	e58d2004 	str	r2, [sp, #4]
   26598:	e59f101c 	ldr	r1, [pc, #28]	; 265bc <CTCPConnection::DumpStatus()+0x78>
   2659c:	e3a02004 	mov	r2, #4
   265a0:	e1d4c1b4 	ldrh	ip, [r4, #20]
   265a4:	e58dc018 	str	ip, [sp, #24]
   265a8:	e594c0ac 	ldr	ip, [r4, #172]	; 0xac
   265ac:	e58dc014 	str	ip, [sp, #20]
   265b0:	eb00250d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   265b4:	e28dd020 	add	sp, sp, #32
   265b8:	e8bd8010 	pop	{r4, pc}
   265bc:	00041564 	.word	0x00041564

000265c0 <CTCPConnection::Connect()>:
   265c0:	e92d4030 	push	{r4, r5, lr}
   265c4:	e1a04000 	mov	r4, r0
   265c8:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   265cc:	e24dd00c 	sub	sp, sp, #12
   265d0:	e3530000 	cmp	r3, #0
   265d4:	ba000013 	blt	26628 <CTCPConnection::Connect()+0x68>
   265d8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   265dc:	e353000a 	cmp	r3, #10
   265e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   265e4:	ea00000f 	b	26628 <CTCPConnection::Connect()+0x68>
   265e8:	0002665c 	.word	0x0002665c
   265ec:	00026634 	.word	0x00026634
   265f0:	00026614 	.word	0x00026614
   265f4:	00026614 	.word	0x00026614
   265f8:	00026628 	.word	0x00026628
   265fc:	00026634 	.word	0x00026634
   26600:	00026634 	.word	0x00026634
   26604:	00026634 	.word	0x00026634
   26608:	00026634 	.word	0x00026634
   2660c:	00026634 	.word	0x00026634
   26610:	00026634 	.word	0x00026634
   26614:	e2805068 	add	r5, r0, #104	; 0x68
   26618:	e1a00005 	mov	r0, r5
   2661c:	eb0017fd 	bl	2c618 <CSynchronizationEvent::Clear()>
   26620:	e1a00005 	mov	r0, r5
   26624:	eb001811 	bl	2c670 <CSynchronizationEvent::Wait()>
   26628:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   2662c:	e28dd00c 	add	sp, sp, #12
   26630:	e8bd8030 	pop	{r4, r5, pc}
   26634:	ebffffc2 	bl	26544 <CTCPConnection::DumpStatus()>
   26638:	eb00231d 	bl	2f2b4 <CLogger::Get()>
   2663c:	e5d4102a 	ldrb	r1, [r4, #42]	; 0x2a
   26640:	e3a0c0f9 	mov	ip, #249	; 0xf9
   26644:	e30133d4 	movw	r3, #5076	; 0x13d4
   26648:	e3403004 	movt	r3, #4
   2664c:	e88d1002 	stm	sp, {r1, ip}
   26650:	e3a02000 	mov	r2, #0
   26654:	e59f100c 	ldr	r1, [pc, #12]	; 26668 <CTCPConnection::Connect()+0xa8>
   26658:	eb0024e3 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2665c:	e3e00000 	mvn	r0, #0
   26660:	e28dd00c 	add	sp, sp, #12
   26664:	e8bd8030 	pop	{r4, r5, pc}
   26668:	00041564 	.word	0x00041564

0002666c <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   2666c:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   26670:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   26674:	e1a04000 	mov	r4, r0
   26678:	e3530000 	cmp	r3, #0
   2667c:	e24dd00c 	sub	sp, sp, #12
   26680:	b590002c 	ldrlt	r0, [r0, #44]	; 0x2c
   26684:	ba00001f 	blt	26708 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x9c>
   26688:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   2668c:	e1a05001 	mov	r5, r1
   26690:	e1a06002 	mov	r6, r2
   26694:	e353000a 	cmp	r3, #10
   26698:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2669c:	ea00000f 	b	266e0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x74>
   266a0:	0002673c 	.word	0x0002673c
   266a4:	000266cc 	.word	0x000266cc
   266a8:	00026710 	.word	0x00026710
   266ac:	000266e0 	.word	0x000266e0
   266b0:	000266e0 	.word	0x000266e0
   266b4:	0002673c 	.word	0x0002673c
   266b8:	0002673c 	.word	0x0002673c
   266bc:	0002673c 	.word	0x0002673c
   266c0:	0002673c 	.word	0x0002673c
   266c4:	0002673c 	.word	0x0002673c
   266c8:	0002673c 	.word	0x0002673c
   266cc:	e2847068 	add	r7, r4, #104	; 0x68
   266d0:	e1a00007 	mov	r0, r7
   266d4:	eb0017cf 	bl	2c618 <CSynchronizationEvent::Clear()>
   266d8:	e1a00007 	mov	r0, r7
   266dc:	eb0017e3 	bl	2c670 <CSynchronizationEvent::Wait()>
   266e0:	e3550000 	cmp	r5, #0
   266e4:	0a000017 	beq	26748 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   266e8:	e284100c 	add	r1, r4, #12
   266ec:	e1a00005 	mov	r0, r5
   266f0:	eb000847 	bl	28814 <CIPAddress::Set(CIPAddress const&)>
   266f4:	e3560000 	cmp	r6, #0
   266f8:	0a000018 	beq	26760 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   266fc:	e1d431b4 	ldrh	r3, [r4, #20]
   26700:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   26704:	e1c630b0 	strh	r3, [r6]
   26708:	e28dd00c 	add	sp, sp, #12
   2670c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26710:	e1a00004 	mov	r0, r4
   26714:	ebffff8a 	bl	26544 <CTCPConnection::DumpStatus()>
   26718:	eb0022e5 	bl	2f2b4 <CLogger::Get()>
   2671c:	e5d4102a 	ldrb	r1, [r4, #42]	; 0x2a
   26720:	e300c10d 	movw	ip, #269	; 0x10d
   26724:	e30133d4 	movw	r3, #5076	; 0x13d4
   26728:	e3403004 	movt	r3, #4
   2672c:	e88d1002 	stm	sp, {r1, ip}
   26730:	e3a02000 	mov	r2, #0
   26734:	e59f103c 	ldr	r1, [pc, #60]	; 26778 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x10c>
   26738:	eb0024ab 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2673c:	e3e00000 	mvn	r0, #0
   26740:	e28dd00c 	add	sp, sp, #12
   26744:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26748:	e30112f4 	movw	r1, #4852	; 0x12f4
   2674c:	e3401004 	movt	r1, #4
   26750:	e3000ba0 	movw	r0, #2976	; 0xba0
   26754:	e3400004 	movt	r0, #4
   26758:	e3002123 	movw	r2, #291	; 0x123
   2675c:	eb001857 	bl	2c8c0 <assertion_failed>
   26760:	e30112f4 	movw	r1, #4852	; 0x12f4
   26764:	e3401004 	movt	r1, #4
   26768:	e3000bb0 	movw	r0, #2992	; 0xbb0
   2676c:	e3400004 	movt	r0, #4
   26770:	e3002126 	movw	r2, #294	; 0x126
   26774:	eb001851 	bl	2c8c0 <assertion_failed>
   26778:	00041564 	.word	0x00041564

0002677c <CTCPConnection::TimerHandler(unsigned int)>:
   2677c:	e92d4030 	push	{r4, r5, lr}
   26780:	e3510002 	cmp	r1, #2
   26784:	e24dd00c 	sub	sp, sp, #12
   26788:	8a000045 	bhi	268a4 <CTCPConnection::TimerHandler(unsigned int)+0x128>
   2678c:	e1a05000 	mov	r5, r0
   26790:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   26794:	e1a04001 	mov	r4, r1
   26798:	e3500000 	cmp	r0, #0
   2679c:	1a00000d 	bne	267d8 <CTCPConnection::TimerHandler(unsigned int)+0x5c>
   267a0:	e281301e 	add	r3, r1, #30
   267a4:	e0853103 	add	r3, r5, r3, lsl #2
   267a8:	e5932004 	ldr	r2, [r3, #4]
   267ac:	e3520000 	cmp	r2, #0
   267b0:	15830004 	strne	r0, [r3, #4]
   267b4:	0a000005 	beq	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   267b8:	e3540001 	cmp	r4, #1
   267bc:	0a000013 	beq	26810 <CTCPConnection::TimerHandler(unsigned int)+0x94>
   267c0:	e3540002 	cmp	r4, #2
   267c4:	03a03000 	moveq	r3, #0
   267c8:	05c5302a 	strbeq	r3, [r5, #42]	; 0x2a
   267cc:	1a00005c 	bne	26944 <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   267d0:	e28dd00c 	add	sp, sp, #12
   267d4:	e8bd8030 	pop	{r4, r5, pc}
   267d8:	eb004747 	bl	384fc <EnterCritical>
   267dc:	e284301e 	add	r3, r4, #30
   267e0:	e0853103 	add	r3, r5, r3, lsl #2
   267e4:	e5932004 	ldr	r2, [r3, #4]
   267e8:	e3520000 	cmp	r2, #0
   267ec:	0a000026 	beq	2688c <CTCPConnection::TimerHandler(unsigned int)+0x110>
   267f0:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   267f4:	e3a01000 	mov	r1, #0
   267f8:	e5831004 	str	r1, [r3, #4]
   267fc:	e1520001 	cmp	r2, r1
   26800:	0affffec 	beq	267b8 <CTCPConnection::TimerHandler(unsigned int)+0x3c>
   26804:	eb004767 	bl	385a8 <LeaveCritical>
   26808:	e3540001 	cmp	r4, #1
   2680c:	1affffeb 	bne	267c0 <CTCPConnection::TimerHandler(unsigned int)+0x44>
   26810:	e28500b8 	add	r0, r5, #184	; 0xb8
   26814:	eb00055b 	bl	27d88 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   26818:	e5953060 	ldr	r3, [r5, #96]	; 0x60
   2681c:	e2432001 	sub	r2, r3, #1
   26820:	e3530000 	cmp	r3, #0
   26824:	e5852060 	str	r2, [r5, #96]	; 0x60
   26828:	05c54064 	strbeq	r4, [r5, #100]	; 0x64
   2682c:	0affffe7 	beq	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26830:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   26834:	e353000a 	cmp	r3, #10
   26838:	e6ef3073 	uxtb	r3, r3
   2683c:	8affffe3 	bhi	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26840:	e3530003 	cmp	r3, #3
   26844:	9a000028 	bls	268ec <CTCPConnection::TimerHandler(unsigned int)+0x170>
   26848:	e1a03314 	lsl	r3, r4, r3
   2684c:	e3130e32 	tst	r3, #800	; 0x320
   26850:	1a000031 	bne	2691c <CTCPConnection::TimerHandler(unsigned int)+0x1a0>
   26854:	e3130d11 	tst	r3, #1088	; 0x440
   26858:	1a000017 	bne	268bc <CTCPConnection::TimerHandler(unsigned int)+0x140>
   2685c:	e3130090 	tst	r3, #144	; 0x90
   26860:	0affffda 	beq	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26864:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   26868:	e3530000 	cmp	r3, #0
   2686c:	05c5405c 	strbeq	r4, [r5, #92]	; 0x5c
   26870:	0affffd6 	beq	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26874:	e30112f4 	movw	r1, #4852	; 0x12f4
   26878:	e3401004 	movt	r1, #4
   2687c:	e3010400 	movw	r0, #5120	; 0x1400
   26880:	e3400004 	movt	r0, #4
   26884:	e3002604 	movw	r2, #1540	; 0x604
   26888:	eb00180c 	bl	2c8c0 <assertion_failed>
   2688c:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   26890:	e3530000 	cmp	r3, #0
   26894:	0affffcd 	beq	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26898:	e28dd00c 	add	sp, sp, #12
   2689c:	e8bd4030 	pop	{r4, r5, lr}
   268a0:	ea004740 	b	385a8 <LeaveCritical>
   268a4:	e30112f4 	movw	r1, #4852	; 0x12f4
   268a8:	e3401004 	movt	r1, #4
   268ac:	e3010338 	movw	r0, #4920	; 0x1338
   268b0:	e3400004 	movt	r0, #4
   268b4:	e30025d9 	movw	r2, #1497	; 0x5d9
   268b8:	eb001800 	bl	2c8c0 <assertion_failed>
   268bc:	e1a00005 	mov	r0, r5
   268c0:	ebffff1f 	bl	26544 <CTCPConnection::DumpStatus()>
   268c4:	eb00227a 	bl	2f2b4 <CLogger::Get()>
   268c8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   268cc:	e300c5f9 	movw	ip, #1529	; 0x5f9
   268d0:	e59f1084 	ldr	r1, [pc, #132]	; 2695c <CTCPConnection::TimerHandler(unsigned int)+0x1e0>
   268d4:	e88d1008 	stm	sp, {r3, ip}
   268d8:	e3a02000 	mov	r2, #0
   268dc:	e30133d4 	movw	r3, #5076	; 0x13d4
   268e0:	e3403004 	movt	r3, #4
   268e4:	eb002440 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   268e8:	eaffffb8 	b	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   268ec:	e3530001 	cmp	r3, #1
   268f0:	9afffff1 	bls	268bc <CTCPConnection::TimerHandler(unsigned int)+0x140>
   268f4:	e5d5305d 	ldrb	r3, [r5, #93]	; 0x5d
   268f8:	e3530000 	cmp	r3, #0
   268fc:	05c5405d 	strbeq	r4, [r5, #93]	; 0x5d
   26900:	0affffb2 	beq	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26904:	e30112f4 	movw	r1, #4852	; 0x12f4
   26908:	e3401004 	movt	r1, #4
   2690c:	e30103f4 	movw	r0, #5108	; 0x13f4
   26910:	e3400004 	movt	r0, #4
   26914:	e30025fe 	movw	r2, #1534	; 0x5fe
   26918:	eb0017e8 	bl	2c8c0 <assertion_failed>
   2691c:	e5d5305e 	ldrb	r3, [r5, #94]	; 0x5e
   26920:	e3530000 	cmp	r3, #0
   26924:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   26928:	0affffa8 	beq	267d0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   2692c:	e30112f4 	movw	r1, #4852	; 0x12f4
   26930:	e3401004 	movt	r1, #4
   26934:	e3010354 	movw	r0, #4948	; 0x1354
   26938:	e3400004 	movt	r0, #4
   2693c:	e300260b 	movw	r2, #1547	; 0x60b
   26940:	eb0017de 	bl	2c8c0 <assertion_failed>
   26944:	e30112f4 	movw	r1, #4852	; 0x12f4
   26948:	e3401004 	movt	r1, #4
   2694c:	e30b0708 	movw	r0, #46856	; 0xb708
   26950:	e3400003 	movt	r0, #3
   26954:	e3002617 	movw	r2, #1559	; 0x617
   26958:	eb0017d8 	bl	2c8c0 <assertion_failed>
   2695c:	00041564 	.word	0x00041564

00026960 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   26960:	e2520000 	subs	r0, r2, #0
   26964:	e92d4010 	push	{r4, lr}
   26968:	0a000003 	beq	2697c <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   2696c:	e3510002 	cmp	r1, #2
   26970:	8a000007 	bhi	26994 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x34>
   26974:	e8bd4010 	pop	{r4, lr}
   26978:	eaffff7f 	b	2677c <CTCPConnection::TimerHandler(unsigned int)>
   2697c:	e30112f4 	movw	r1, #4852	; 0x12f4
   26980:	e3401004 	movt	r1, #4
   26984:	e30a0a18 	movw	r0, #43544	; 0xaa18
   26988:	e3400003 	movt	r0, #3
   2698c:	e300261f 	movw	r2, #1567	; 0x61f
   26990:	eb0017ca 	bl	2c8c0 <assertion_failed>
   26994:	e30112f4 	movw	r1, #4852	; 0x12f4
   26998:	e3401004 	movt	r1, #4
   2699c:	e3010338 	movw	r0, #4920	; 0x1338
   269a0:	e3400004 	movt	r0, #4
   269a4:	e3002622 	movw	r2, #1570	; 0x622
   269a8:	eb0017c4 	bl	2c8c0 <assertion_failed>

000269ac <CTCPConnection::NewState(TTCPState, unsigned int)>:
   269ac:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   269b0:	e92d4070 	push	{r4, r5, r6, lr}
   269b4:	e353000a 	cmp	r3, #10
   269b8:	e24dd010 	sub	sp, sp, #16
   269bc:	8a000018 	bhi	26a24 <CTCPConnection::NewState(TTCPState, unsigned int)+0x78>
   269c0:	e1a04001 	mov	r4, r1
   269c4:	e351000a 	cmp	r1, #10
   269c8:	8a00001b 	bhi	26a3c <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   269cc:	e1a05000 	mov	r5, r0
   269d0:	e1a06002 	mov	r6, r2
   269d4:	eb002236 	bl	2f2b4 <CLogger::Get()>
   269d8:	e58d6008 	str	r6, [sp, #8]
   269dc:	e3011520 	movw	r1, #5408	; 0x1520
   269e0:	e3401004 	movt	r1, #4
   269e4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   269e8:	e0812104 	add	r2, r1, r4, lsl #2
   269ec:	e0813103 	add	r3, r1, r3, lsl #2
   269f0:	e5922048 	ldr	r2, [r2, #72]	; 0x48
   269f4:	e58d2004 	str	r2, [sp, #4]
   269f8:	e2811044 	add	r1, r1, #68	; 0x44
   269fc:	e3a02004 	mov	r2, #4
   26a00:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   26a04:	e58d3000 	str	r3, [sp]
   26a08:	e3013474 	movw	r3, #5236	; 0x1474
   26a0c:	e3403004 	movt	r3, #4
   26a10:	eb0023f5 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26a14:	e1a00004 	mov	r0, r4
   26a18:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   26a1c:	e28dd010 	add	sp, sp, #16
   26a20:	e8bd8070 	pop	{r4, r5, r6, pc}
   26a24:	e30112f4 	movw	r1, #4852	; 0x12f4
   26a28:	e3401004 	movt	r1, #4
   26a2c:	e3010410 	movw	r0, #5136	; 0x1410
   26a30:	e3400004 	movt	r0, #4
   26a34:	e3002647 	movw	r2, #1607	; 0x647
   26a38:	eb0017a0 	bl	2c8c0 <assertion_failed>
   26a3c:	e30112f4 	movw	r1, #4852	; 0x12f4
   26a40:	e3401004 	movt	r1, #4
   26a44:	e3010444 	movw	r0, #5188	; 0x1444
   26a48:	e3400004 	movt	r0, #4
   26a4c:	e3002648 	movw	r2, #1608	; 0x648
   26a50:	eb00179a 	bl	2c8c0 <assertion_failed>

00026a54 <CTCPConnection::UnexpectedState(unsigned int)>:
   26a54:	e92d4030 	push	{r4, r5, lr}
   26a58:	e1a05000 	mov	r5, r0
   26a5c:	e1a04001 	mov	r4, r1
   26a60:	e24dd00c 	sub	sp, sp, #12
   26a64:	ebfffeb6 	bl	26544 <CTCPConnection::DumpStatus()>
   26a68:	eb002211 	bl	2f2b4 <CLogger::Get()>
   26a6c:	e5d5102a 	ldrb	r1, [r5, #42]	; 0x2a
   26a70:	e88d0012 	stm	sp, {r1, r4}
   26a74:	e3a02000 	mov	r2, #0
   26a78:	e59f1010 	ldr	r1, [pc, #16]	; 26a90 <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   26a7c:	e30133d4 	movw	r3, #5076	; 0x13d4
   26a80:	e3403004 	movt	r3, #4
   26a84:	eb0023d8 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26a88:	e28dd00c 	add	sp, sp, #12
   26a8c:	e8bd8030 	pop	{r4, r5, pc}
   26a90:	00041564 	.word	0x00041564

00026a94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   26a94:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a98:	ed2d8b02 	vpush	{d8}
   26a9c:	e24dd024 	sub	sp, sp, #36	; 0x24
   26aa0:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
   26aa4:	e35c0006 	cmp	ip, #6
   26aa8:	1a00000d 	bne	26ae4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26aac:	e1a06002 	mov	r6, r2
   26ab0:	e3520013 	cmp	r2, #19
   26ab4:	9a00000e 	bls	26af4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x60>
   26ab8:	e1a04001 	mov	r4, r1
   26abc:	e3510000 	cmp	r1, #0
   26ac0:	0a0000ff 	beq	26ec4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x430>
   26ac4:	e1a07003 	mov	r7, r3
   26ac8:	e1d130b2 	ldrh	r3, [r1, #2]
   26acc:	e1d021b6 	ldrh	r2, [r0, #22]
   26ad0:	e1a05000 	mov	r5, r0
   26ad4:	e6bf3fb3 	rev16	r3, r3
   26ad8:	e6ff3073 	uxth	r3, r3
   26adc:	e1520003 	cmp	r2, r3
   26ae0:	0a000007 	beq	26b04 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   26ae4:	e3a00000 	mov	r0, #0
   26ae8:	e28dd024 	add	sp, sp, #36	; 0x24
   26aec:	ecbd8b02 	vpop	{d8}
   26af0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26af4:	e3e00000 	mvn	r0, #0
   26af8:	e28dd024 	add	sp, sp, #36	; 0x24
   26afc:	ecbd8b02 	vpop	{d8}
   26b00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b04:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   26b08:	e3530001 	cmp	r3, #1
   26b0c:	0a000039 	beq	26bf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   26b10:	e1a01007 	mov	r1, r7
   26b14:	e280000c 	add	r0, r0, #12
   26b18:	eb0006c0 	bl	28620 <CIPAddress::operator!=(CIPAddress const&) const>
   26b1c:	e3500000 	cmp	r0, #0
   26b20:	1affffef 	bne	26ae4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26b24:	e1d430b0 	ldrh	r3, [r4]
   26b28:	e1d521b4 	ldrh	r2, [r5, #20]
   26b2c:	e6bf3fb3 	rev16	r3, r3
   26b30:	e6ff3073 	uxth	r3, r3
   26b34:	e1520003 	cmp	r2, r3
   26b38:	0285901c 	addeq	r9, r5, #28
   26b3c:	1affffe8 	bne	26ae4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26b40:	e1a02006 	mov	r2, r6
   26b44:	e1a01004 	mov	r1, r4
   26b48:	e1a00009 	mov	r0, r9
   26b4c:	eb0008ff 	bl	28f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   26b50:	e3500000 	cmp	r0, #0
   26b54:	1affffe2 	bne	26ae4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26b58:	e1d480bc 	ldrh	r8, [r4, #12]
   26b5c:	e1a01004 	mov	r1, r4
   26b60:	e5942004 	ldr	r2, [r4, #4]
   26b64:	e1a00005 	mov	r0, r5
   26b68:	e2183c02 	ands	r3, r8, #512	; 0x200
   26b6c:	e58d3014 	str	r3, [sp, #20]
   26b70:	e5943008 	ldr	r3, [r4, #8]
   26b74:	e7e3a258 	ubfx	sl, r8, #4, #4
   26b78:	e1a0a10a 	lsl	sl, sl, #2
   26b7c:	ec432b30 	vmov	d16, r2, r3
   26b80:	e28d300c 	add	r3, sp, #12
   26b84:	e046600a 	sub	r6, r6, sl
   26b88:	1286b001 	addne	fp, r6, #1
   26b8c:	01a0b006 	moveq	fp, r6
   26b90:	f3b080a0 	vrev32.8	d8, d16
   26b94:	f483888f 	vst1.32	{d8[1]}, [r3]
   26b98:	e2183c01 	ands	r3, r8, #256	; 0x100
   26b9c:	e58d301c 	str	r3, [sp, #28]
   26ba0:	128bb001 	addne	fp, fp, #1
   26ba4:	ed8d8a04 	vstr	s16, [sp, #16]
   26ba8:	e1d430be 	ldrh	r3, [r4, #14]
   26bac:	e6bf3fb3 	rev16	r3, r3
   26bb0:	e6ff3073 	uxth	r3, r3
   26bb4:	e58d3018 	str	r3, [sp, #24]
   26bb8:	ebfffbcf 	bl	25afc <CTCPConnection::ScanOptions(TTCPHeader*)>
   26bbc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   26bc0:	e353000a 	cmp	r3, #10
   26bc4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   26bc8:	ea000027 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26bcc:	00026d80 	.word	0x00026d80
   26bd0:	00026dd4 	.word	0x00026dd4
   26bd4:	00026c74 	.word	0x00026c74
   26bd8:	00026c18 	.word	0x00026c18
   26bdc:	00026c18 	.word	0x00026c18
   26be0:	00026c18 	.word	0x00026c18
   26be4:	00026c18 	.word	0x00026c18
   26be8:	00026c18 	.word	0x00026c18
   26bec:	00026c18 	.word	0x00026c18
   26bf0:	00026c18 	.word	0x00026c18
   26bf4:	00026c18 	.word	0x00026c18
   26bf8:	e1d130bc 	ldrh	r3, [r1, #12]
   26bfc:	e3130c02 	tst	r3, #512	; 0x200
   26c00:	0affffb7 	beq	26ae4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26c04:	e280901c 	add	r9, r0, #28
   26c08:	e1a01007 	mov	r1, r7
   26c0c:	e1a00009 	mov	r0, r9
   26c10:	eb0008a3 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26c14:	eaffffc9 	b	26b40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac>
   26c18:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   26c1c:	e3530000 	cmp	r3, #0
   26c20:	0a0000ad 	beq	26edc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x448>
   26c24:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   26c28:	e35b0000 	cmp	fp, #0
   26c2c:	e59d0010 	ldr	r0, [sp, #16]
   26c30:	e0421000 	sub	r1, r2, r0
   26c34:	1a0000ff 	bne	27038 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a4>
   26c38:	e3510000 	cmp	r1, #0
   26c3c:	da0001b3 	ble	27310 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x87c>
   26c40:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   26c44:	e3530003 	cmp	r3, #3
   26c48:	0a0000a9 	beq	26ef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   26c4c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   26c50:	e3a0c000 	mov	ip, #0
   26c54:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   26c58:	e3a01a01 	mov	r1, #4096	; 0x1000
   26c5c:	e1a00005 	mov	r0, r5
   26c60:	e58dc004 	str	ip, [sp, #4]
   26c64:	e58dc000 	str	ip, [sp]
   26c68:	ebfffb4d 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26c6c:	e3a00001 	mov	r0, #1
   26c70:	eaffff9c 	b	26ae8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   26c74:	e3180a01 	tst	r8, #4096	; 0x1000
   26c78:	0a00000d 	beq	26cb4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x220>
   26c7c:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   26c80:	e59d200c 	ldr	r2, [sp, #12]
   26c84:	e0433002 	sub	r3, r3, r2
   26c88:	e3530000 	cmp	r3, #0
   26c8c:	aa0000a9 	bge	26f38 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4a4>
   26c90:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   26c94:	e0423003 	sub	r3, r2, r3
   26c98:	e3530000 	cmp	r3, #0
   26c9c:	ca0000a5 	bgt	26f38 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4a4>
   26ca0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   26ca4:	e59d200c 	ldr	r2, [sp, #12]
   26ca8:	e0433002 	sub	r3, r3, r2
   26cac:	e3530000 	cmp	r3, #0
   26cb0:	da0001b5 	ble	2738c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8f8>
   26cb4:	e59d3014 	ldr	r3, [sp, #20]
   26cb8:	e2082b05 	and	r2, r8, #5120	; 0x1400
   26cbc:	e2533000 	subs	r3, r3, #0
   26cc0:	13a03001 	movne	r3, #1
   26cc4:	e3520000 	cmp	r2, #0
   26cc8:	13a03000 	movne	r3, #0
   26ccc:	e3530000 	cmp	r3, #0
   26cd0:	0affffe5 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26cd4:	e59d3010 	ldr	r3, [sp, #16]
   26cd8:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   26cdc:	e2833001 	add	r3, r3, #1
   26ce0:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   26ce4:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   26ce8:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   26cec:	e0423003 	sub	r3, r2, r3
   26cf0:	e3530000 	cmp	r3, #0
   26cf4:	ba000110 	blt	2713c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6a8>
   26cf8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   26cfc:	e3a07000 	mov	r7, #0
   26d00:	e3a01c12 	mov	r1, #4608	; 0x1200
   26d04:	e58d7004 	str	r7, [sp, #4]
   26d08:	e58d7000 	str	r7, [sp]
   26d0c:	e28580b8 	add	r8, r5, #184	; 0xb8
   26d10:	e3a00003 	mov	r0, #3
   26d14:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   26d18:	e1a00005 	mov	r0, r5
   26d1c:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   26d20:	ebfffb1f 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26d24:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   26d28:	e3a02001 	mov	r2, #1
   26d2c:	e1a00008 	mov	r0, r8
   26d30:	eb0003ef 	bl	27cf4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26d34:	e3a03005 	mov	r3, #5
   26d38:	e1a00008 	mov	r0, r8
   26d3c:	e5853060 	str	r3, [r5, #96]	; 0x60
   26d40:	eb0003cd 	bl	27c7c <CRetransmissionTimeoutCalculator::GetRTO() const>
   26d44:	e3a01001 	mov	r1, #1
   26d48:	e1a02000 	mov	r2, r0
   26d4c:	e1a00005 	mov	r0, r5
   26d50:	ebfffc22 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   26d54:	e59d301c 	ldr	r3, [sp, #28]
   26d58:	e1530007 	cmp	r3, r7
   26d5c:	1a0001a9 	bne	27408 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x974>
   26d60:	e1560007 	cmp	r6, r7
   26d64:	0affffc0 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26d68:	e3a03000 	mov	r3, #0
   26d6c:	e1a02006 	mov	r2, r6
   26d70:	e084100a 	add	r1, r4, sl
   26d74:	e285003c 	add	r0, r5, #60	; 0x3c
   26d78:	eb000794 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   26d7c:	eaffffba 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26d80:	e2186b01 	ands	r6, r8, #1024	; 0x400
   26d84:	1affffb8 	bne	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26d88:	e1a01007 	mov	r1, r7
   26d8c:	e285000c 	add	r0, r5, #12
   26d90:	e2188a01 	ands	r8, r8, #4096	; 0x1000
   26d94:	0a000072 	beq	26f64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4d0>
   26d98:	eb00069d 	bl	28814 <CIPAddress::Set(CIPAddress const&)>
   26d9c:	e1d430b0 	ldrh	r3, [r4]
   26da0:	e1a01007 	mov	r1, r7
   26da4:	e1a00009 	mov	r0, r9
   26da8:	e6bf3fb3 	rev16	r3, r3
   26dac:	e1c531b4 	strh	r3, [r5, #20]
   26db0:	eb00083b 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26db4:	e59d200c 	ldr	r2, [sp, #12]
   26db8:	e1a03006 	mov	r3, r6
   26dbc:	e3a01b01 	mov	r1, #1024	; 0x400
   26dc0:	e1a00005 	mov	r0, r5
   26dc4:	e58d6004 	str	r6, [sp, #4]
   26dc8:	e58d6000 	str	r6, [sp]
   26dcc:	ebfffaf4 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26dd0:	eaffffa5 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26dd4:	e2183b01 	ands	r3, r8, #1024	; 0x400
   26dd8:	1affffa3 	bne	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26ddc:	e2188a01 	ands	r8, r8, #4096	; 0x1000
   26de0:	1a0000a1 	bne	2706c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5d8>
   26de4:	e59d3014 	ldr	r3, [sp, #20]
   26de8:	e3530000 	cmp	r3, #0
   26dec:	0affff9e 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26df0:	e3043f34 	movw	r3, #20276	; 0x4f34
   26df4:	e3403004 	movt	r3, #4
   26df8:	e5933000 	ldr	r3, [r3]
   26dfc:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   26e00:	2a000055 	bcs	26f5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4c8>
   26e04:	e59d3018 	ldr	r3, [sp, #24]
   26e08:	e35b0000 	cmp	fp, #0
   26e0c:	e5853094 	str	r3, [r5, #148]	; 0x94
   26e10:	e59d3010 	ldr	r3, [sp, #16]
   26e14:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   26e18:	e2833001 	add	r3, r3, #1
   26e1c:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   26e20:	e285309c 	add	r3, r5, #156	; 0x9c
   26e24:	f403878f 	vst1.32	{d8}, [r3]
   26e28:	0a0001ac 	beq	274e0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa4c>
   26e2c:	e3560000 	cmp	r6, #0
   26e30:	1a000183 	bne	27444 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9b0>
   26e34:	e28560b8 	add	r6, r5, #184	; 0xb8
   26e38:	e1a00005 	mov	r0, r5
   26e3c:	ebfffb61 	bl	25bc8 <CTCPConnection::CalculateISN()>
   26e40:	e1a01000 	mov	r1, r0
   26e44:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   26e48:	e1a00006 	mov	r0, r6
   26e4c:	eb00038c 	bl	27c84 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   26e50:	e1a01007 	mov	r1, r7
   26e54:	e285000c 	add	r0, r5, #12
   26e58:	eb00066d 	bl	28814 <CIPAddress::Set(CIPAddress const&)>
   26e5c:	e1d430b0 	ldrh	r3, [r4]
   26e60:	e1a01007 	mov	r1, r7
   26e64:	e1a00009 	mov	r0, r9
   26e68:	e6bf3fb3 	rev16	r3, r3
   26e6c:	e1c531b4 	strh	r3, [r5, #20]
   26e70:	eb00080b 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26e74:	e3a01000 	mov	r1, #0
   26e78:	e1c52ad4 	ldrd	r2, [r5, #164]	; 0xa4
   26e7c:	e1a00005 	mov	r0, r5
   26e80:	e58d1004 	str	r1, [sp, #4]
   26e84:	e58d1000 	str	r1, [sp]
   26e88:	e3a01c12 	mov	r1, #4608	; 0x1200
   26e8c:	ebfffac4 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26e90:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   26e94:	e1a00006 	mov	r0, r6
   26e98:	e3a02001 	mov	r2, #1
   26e9c:	eb000394 	bl	27cf4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26ea0:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   26ea4:	e3a02003 	mov	r2, #3
   26ea8:	e2850068 	add	r0, r5, #104	; 0x68
   26eac:	e2831001 	add	r1, r3, #1
   26eb0:	e585308c 	str	r3, [r5, #140]	; 0x8c
   26eb4:	e5851090 	str	r1, [r5, #144]	; 0x90
   26eb8:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   26ebc:	eb0015d8 	bl	2c624 <CSynchronizationEvent::Set()>
   26ec0:	eaffff69 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26ec4:	e30112f4 	movw	r1, #4852	; 0x12f4
   26ec8:	e3401004 	movt	r1, #4
   26ecc:	e3000ce0 	movw	r0, #3296	; 0xce0
   26ed0:	e3400004 	movt	r0, #4
   26ed4:	e300227b 	movw	r2, #635	; 0x27b
   26ed8:	eb001678 	bl	2c8c0 <assertion_failed>
   26edc:	e35b0000 	cmp	fp, #0
   26ee0:	1affff56 	bne	26c40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   26ee4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   26ee8:	e59d2010 	ldr	r2, [sp, #16]
   26eec:	e1530002 	cmp	r3, r2
   26ef0:	1affff52 	bne	26c40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   26ef4:	e3180b01 	tst	r8, #1024	; 0x400
   26ef8:	0a000031 	beq	26fc4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x530>
   26efc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   26f00:	e3530007 	cmp	r3, #7
   26f04:	e6ef3073 	uxtb	r3, r3
   26f08:	8a000025 	bhi	26fa4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x510>
   26f0c:	e3530003 	cmp	r3, #3
   26f10:	8a000110 	bhi	27358 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8c4>
   26f14:	1a00010b 	bne	27348 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8b4>
   26f18:	e2850048 	add	r0, r5, #72	; 0x48
   26f1c:	eb000333 	bl	27bf0 <CRetransmissionQueue::Flush()>
   26f20:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   26f24:	e3530000 	cmp	r3, #0
   26f28:	1a000165 	bne	274c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa30>
   26f2c:	e3a03001 	mov	r3, #1
   26f30:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   26f34:	eaffff4c 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26f38:	e2183b01 	ands	r3, r8, #1024	; 0x400
   26f3c:	1affff4a 	bne	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26f40:	e59d200c 	ldr	r2, [sp, #12]
   26f44:	e3a01b01 	mov	r1, #1024	; 0x400
   26f48:	e1a00005 	mov	r0, r5
   26f4c:	e58d3004 	str	r3, [sp, #4]
   26f50:	e58d3000 	str	r3, [sp]
   26f54:	ebfffa92 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26f58:	eaffff43 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26f5c:	e1a01007 	mov	r1, r7
   26f60:	e285000c 	add	r0, r5, #12
   26f64:	eb00062a 	bl	28814 <CIPAddress::Set(CIPAddress const&)>
   26f68:	e1d430b0 	ldrh	r3, [r4]
   26f6c:	e1a01007 	mov	r1, r7
   26f70:	e1a00009 	mov	r0, r9
   26f74:	e6bf3fb3 	rev16	r3, r3
   26f78:	e1c531b4 	strh	r3, [r5, #20]
   26f7c:	eb0007c8 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26f80:	e59d3010 	ldr	r3, [sp, #16]
   26f84:	e1a02008 	mov	r2, r8
   26f88:	e3a01b05 	mov	r1, #5120	; 0x1400
   26f8c:	e08b3003 	add	r3, fp, r3
   26f90:	e1a00005 	mov	r0, r5
   26f94:	e58d8004 	str	r8, [sp, #4]
   26f98:	e58d8000 	str	r8, [sp]
   26f9c:	ebfffa80 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26fa0:	eaffff31 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26fa4:	e2433008 	sub	r3, r3, #8
   26fa8:	e3530002 	cmp	r3, #2
   26fac:	8a0000e5 	bhi	27348 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8b4>
   26fb0:	e3a03000 	mov	r3, #0
   26fb4:	e2850068 	add	r0, r5, #104	; 0x68
   26fb8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   26fbc:	eb001598 	bl	2c624 <CSynchronizationEvent::Set()>
   26fc0:	eaffff29 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26fc4:	e59d3014 	ldr	r3, [sp, #20]
   26fc8:	e3530000 	cmp	r3, #0
   26fcc:	0a000032 	beq	2709c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x608>
   26fd0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   26fd4:	e3530003 	cmp	r3, #3
   26fd8:	1a000002 	bne	26fe8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x554>
   26fdc:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   26fe0:	e3530000 	cmp	r3, #0
   26fe4:	0affffd0 	beq	26f2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x498>
   26fe8:	e3a04000 	mov	r4, #0
   26fec:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   26ff0:	e3a01b01 	mov	r1, #1024	; 0x400
   26ff4:	e1a03004 	mov	r3, r4
   26ff8:	e1a00005 	mov	r0, r5
   26ffc:	e58d4004 	str	r4, [sp, #4]
   27000:	e58d4000 	str	r4, [sp]
   27004:	ebfffa66 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   27008:	e3e03000 	mvn	r3, #0
   2700c:	e2850048 	add	r0, r5, #72	; 0x48
   27010:	e585302c 	str	r3, [r5, #44]	; 0x2c
   27014:	eb0002f5 	bl	27bf0 <CRetransmissionQueue::Flush()>
   27018:	e2850030 	add	r0, r5, #48	; 0x30
   2701c:	eb0006b6 	bl	28afc <CNetQueue::Flush()>
   27020:	e285003c 	add	r0, r5, #60	; 0x3c
   27024:	eb0006b4 	bl	28afc <CNetQueue::Flush()>
   27028:	e2850068 	add	r0, r5, #104	; 0x68
   2702c:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   27030:	eb00157b 	bl	2c624 <CSynchronizationEvent::Set()>
   27034:	eaffff0c 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27038:	e3510000 	cmp	r1, #0
   2703c:	da0000b8 	ble	27324 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x890>
   27040:	e59d1010 	ldr	r1, [sp, #16]
   27044:	e2820001 	add	r0, r2, #1
   27048:	e08b1001 	add	r1, fp, r1
   2704c:	e0400001 	sub	r0, r0, r1
   27050:	e3500000 	cmp	r0, #0
   27054:	cafffef9 	bgt	26c40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   27058:	e0833002 	add	r3, r3, r2
   2705c:	e0411003 	sub	r1, r1, r3
   27060:	e3510001 	cmp	r1, #1
   27064:	5afffef5 	bpl	26c40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   27068:	eaffffa1 	b	26ef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   2706c:	e1a01007 	mov	r1, r7
   27070:	e285000c 	add	r0, r5, #12
   27074:	e58d3010 	str	r3, [sp, #16]
   27078:	eb0005e5 	bl	28814 <CIPAddress::Set(CIPAddress const&)>
   2707c:	e1d420b0 	ldrh	r2, [r4]
   27080:	e1a01007 	mov	r1, r7
   27084:	e1a00009 	mov	r0, r9
   27088:	e6bf2fb2 	rev16	r2, r2
   2708c:	e1c521b4 	strh	r2, [r5, #20]
   27090:	eb000783 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   27094:	e59d3010 	ldr	r3, [sp, #16]
   27098:	eaffffa8 	b	26f40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4ac>
   2709c:	e3180a01 	tst	r8, #4096	; 0x1000
   270a0:	0afffef1 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   270a4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   270a8:	e2433003 	sub	r3, r3, #3
   270ac:	e3530007 	cmp	r3, #7
   270b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   270b4:	ea0001b8 	b	2779c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   270b8:	000272a4 	.word	0x000272a4
   270bc:	000270d8 	.word	0x000270d8
   270c0:	000270d8 	.word	0x000270d8
   270c4:	000270d8 	.word	0x000270d8
   270c8:	000270d8 	.word	0x000270d8
   270cc:	000270d8 	.word	0x000270d8
   270d0:	000272e8 	.word	0x000272e8
   270d4:	00027260 	.word	0x00027260
   270d8:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   270dc:	e59d100c 	ldr	r1, [sp, #12]
   270e0:	e0532001 	subs	r2, r3, r1
   270e4:	4a000103 	bmi	274f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa64>
   270e8:	e59d100c 	ldr	r1, [sp, #12]
   270ec:	e0413003 	sub	r3, r1, r3
   270f0:	e3530000 	cmp	r3, #0
   270f4:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   270f8:	da000109 	ble	27524 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa90>
   270fc:	e59d300c 	ldr	r3, [sp, #12]
   27100:	e0423003 	sub	r3, r2, r3
   27104:	e3530000 	cmp	r3, #0
   27108:	b3a0c000 	movlt	ip, #0
   2710c:	b59530a8 	ldrlt	r3, [r5, #168]	; 0xa8
   27110:	bafffed0 	blt	26c58 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c4>
   27114:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   27118:	e2433004 	sub	r3, r3, #4
   2711c:	e3530004 	cmp	r3, #4
   27120:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27124:	ea000198 	b	2778c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcf8>
   27128:	000271a4 	.word	0x000271a4
   2712c:	00027584 	.word	0x00027584
   27130:	000275cc 	.word	0x000275cc
   27134:	000271a4 	.word	0x000271a4
   27138:	000275e8 	.word	0x000275e8
   2713c:	e3a07000 	mov	r7, #0
   27140:	e3a01001 	mov	r1, #1
   27144:	e3a03004 	mov	r3, #4
   27148:	e1a00005 	mov	r0, r5
   2714c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   27150:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   27154:	ebfffab5 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   27158:	e3a03005 	mov	r3, #5
   2715c:	e2850068 	add	r0, r5, #104	; 0x68
   27160:	e5853060 	str	r3, [r5, #96]	; 0x60
   27164:	eb00152e 	bl	2c624 <CSynchronizationEvent::Set()>
   27168:	e59d3018 	ldr	r3, [sp, #24]
   2716c:	e5853094 	str	r3, [r5, #148]	; 0x94
   27170:	e285309c 	add	r3, r5, #156	; 0x9c
   27174:	e58d7004 	str	r7, [sp, #4]
   27178:	e3a01a01 	mov	r1, #4096	; 0x1000
   2717c:	e58d7000 	str	r7, [sp]
   27180:	e1a00005 	mov	r0, r5
   27184:	f403878f 	vst1.32	{d8}, [r3]
   27188:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   2718c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   27190:	ebfffa03 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   27194:	e59d301c 	ldr	r3, [sp, #28]
   27198:	e1530007 	cmp	r3, r7
   2719c:	01560007 	cmpeq	r6, r7
   271a0:	0afffeb1 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   271a4:	e35b0000 	cmp	fp, #0
   271a8:	0afffeaf 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   271ac:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   271b0:	e3530006 	cmp	r3, #6
   271b4:	e6ef3073 	uxtb	r3, r3
   271b8:	8a00005e 	bhi	27338 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8a4>
   271bc:	e3530003 	cmp	r3, #3
   271c0:	8a0000a5 	bhi	2745c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9c8>
   271c4:	0a000002 	beq	271d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x740>
   271c8:	e1a00005 	mov	r0, r5
   271cc:	e30014dc 	movw	r1, #1244	; 0x4dc
   271d0:	ebfffe1f 	bl	26a54 <CTCPConnection::UnexpectedState(unsigned int)>
   271d4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   271d8:	e3530000 	cmp	r3, #0
   271dc:	0afffea2 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   271e0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   271e4:	e3530001 	cmp	r3, #1
   271e8:	0afffe9f 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   271ec:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   271f0:	e59d201c 	ldr	r2, [sp, #28]
   271f4:	e3520000 	cmp	r2, #0
   271f8:	13530002 	cmpne	r3, #2
   271fc:	03a03001 	moveq	r3, #1
   27200:	13a03000 	movne	r3, #0
   27204:	0afffe98 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27208:	e59510a8 	ldr	r1, [r5, #168]	; 0xa8
   2720c:	e1a00005 	mov	r0, r5
   27210:	e58d3004 	str	r3, [sp, #4]
   27214:	e58d3000 	str	r3, [sp]
   27218:	e2813001 	add	r3, r1, #1
   2721c:	e3a01a01 	mov	r1, #4096	; 0x1000
   27220:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   27224:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   27228:	ebfff9dd 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   2722c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   27230:	e2433003 	sub	r3, r3, #3
   27234:	e3530007 	cmp	r3, #7
   27238:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2723c:	ea00015a 	b	277ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd18>
   27240:	000276a0 	.word	0x000276a0
   27244:	000276a0 	.word	0x000276a0
   27248:	00027668 	.word	0x00027668
   2724c:	00027634 	.word	0x00027634
   27250:	00026c6c 	.word	0x00026c6c
   27254:	00026c6c 	.word	0x00026c6c
   27258:	00026c6c 	.word	0x00026c6c
   2725c:	000276e8 	.word	0x000276e8
   27260:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   27264:	e59d200c 	ldr	r2, [sp, #12]
   27268:	e1530002 	cmp	r3, r2
   2726c:	1affffcc 	bne	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   27270:	e3a03000 	mov	r3, #0
   27274:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   27278:	e58d3004 	str	r3, [sp, #4]
   2727c:	e3a01a01 	mov	r1, #4096	; 0x1000
   27280:	e58d3000 	str	r3, [sp]
   27284:	e1a00005 	mov	r0, r5
   27288:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   2728c:	ebfff9c4 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   27290:	e3a01002 	mov	r1, #2
   27294:	e1a00005 	mov	r0, r5
   27298:	e3012770 	movw	r2, #6000	; 0x1770
   2729c:	ebfffacf 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   272a0:	eaffffbf 	b	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   272a4:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   272a8:	e59d200c 	ldr	r2, [sp, #12]
   272ac:	e0433002 	sub	r3, r3, r2
   272b0:	e3530000 	cmp	r3, #0
   272b4:	ca000003 	bgt	272c8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x834>
   272b8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   272bc:	e0423003 	sub	r3, r2, r3
   272c0:	e3530000 	cmp	r3, #0
   272c4:	da0000fa 	ble	276b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc20>
   272c8:	e3a03000 	mov	r3, #0
   272cc:	e59d200c 	ldr	r2, [sp, #12]
   272d0:	e3a01b01 	mov	r1, #1024	; 0x400
   272d4:	e1a00005 	mov	r0, r5
   272d8:	e58d3004 	str	r3, [sp, #4]
   272dc:	e58d3000 	str	r3, [sp]
   272e0:	ebfff9af 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   272e4:	eaffffae 	b	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   272e8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   272ec:	e59d200c 	ldr	r2, [sp, #12]
   272f0:	e1530002 	cmp	r3, r2
   272f4:	1affffaa 	bne	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   272f8:	e3a03000 	mov	r3, #0
   272fc:	e2850068 	add	r0, r5, #104	; 0x68
   27300:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   27304:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   27308:	eb0014c5 	bl	2c624 <CSynchronizationEvent::Set()>
   2730c:	eafffe56 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27310:	e0833002 	add	r3, r3, r2
   27314:	e0403003 	sub	r3, r0, r3
   27318:	e3530000 	cmp	r3, #0
   2731c:	aafffe47 	bge	26c40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   27320:	eafffef3 	b	26ef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   27324:	e0831002 	add	r1, r3, r2
   27328:	e0401001 	sub	r1, r0, r1
   2732c:	e3510000 	cmp	r1, #0
   27330:	aaffff42 	bge	27040 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5ac>
   27334:	eafffeee 	b	26ef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   27338:	e2433007 	sub	r3, r3, #7
   2733c:	e3530003 	cmp	r3, #3
   27340:	8affffa0 	bhi	271c8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x734>
   27344:	eaffffa2 	b	271d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x740>
   27348:	e1a00005 	mov	r0, r5
   2734c:	e30013e2 	movw	r1, #994	; 0x3e2
   27350:	ebfffdbf 	bl	26a54 <CTCPConnection::UnexpectedState(unsigned int)>
   27354:	eafffe44 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27358:	e3e03000 	mvn	r3, #0
   2735c:	e2850048 	add	r0, r5, #72	; 0x48
   27360:	e585302c 	str	r3, [r5, #44]	; 0x2c
   27364:	eb000221 	bl	27bf0 <CRetransmissionQueue::Flush()>
   27368:	e2850030 	add	r0, r5, #48	; 0x30
   2736c:	eb0005e2 	bl	28afc <CNetQueue::Flush()>
   27370:	e285003c 	add	r0, r5, #60	; 0x3c
   27374:	eb0005e0 	bl	28afc <CNetQueue::Flush()>
   27378:	e3a03000 	mov	r3, #0
   2737c:	e2850068 	add	r0, r5, #104	; 0x68
   27380:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   27384:	eb0014a6 	bl	2c624 <CSynchronizationEvent::Set()>
   27388:	eafffe37 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   2738c:	e3180b01 	tst	r8, #1024	; 0x400
   27390:	1a000014 	bne	273e8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x954>
   27394:	e59d3014 	ldr	r3, [sp, #20]
   27398:	e3530000 	cmp	r3, #0
   2739c:	0afffe32 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   273a0:	e59d3010 	ldr	r3, [sp, #16]
   273a4:	e28500b8 	add	r0, r5, #184	; 0xb8
   273a8:	e59d700c 	ldr	r7, [sp, #12]
   273ac:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   273b0:	e2833001 	add	r3, r3, #1
   273b4:	e1a01007 	mov	r1, r7
   273b8:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   273bc:	eb0002bb 	bl	27eb0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   273c0:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   273c4:	e0471001 	sub	r1, r7, r1
   273c8:	e3510001 	cmp	r1, #1
   273cc:	9a000002 	bls	273dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x948>
   273d0:	e2411001 	sub	r1, r1, #1
   273d4:	e2850048 	add	r0, r5, #72	; 0x48
   273d8:	eb0001e0 	bl	27b60 <CRetransmissionQueue::Advance(unsigned int)>
   273dc:	e59d300c 	ldr	r3, [sp, #12]
   273e0:	e585308c 	str	r3, [r5, #140]	; 0x8c
   273e4:	eafffe3e 	b	26ce4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x250>
   273e8:	e3a03000 	mov	r3, #0
   273ec:	e3e02000 	mvn	r2, #0
   273f0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   273f4:	e2850068 	add	r0, r5, #104	; 0x68
   273f8:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   273fc:	e585202c 	str	r2, [r5, #44]	; 0x2c
   27400:	eb001487 	bl	2c624 <CSynchronizationEvent::Set()>
   27404:	eafffe18 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27408:	e58d7004 	str	r7, [sp, #4]
   2740c:	e1a03007 	mov	r3, r7
   27410:	e58d7000 	str	r7, [sp]
   27414:	e3a01b01 	mov	r1, #1024	; 0x400
   27418:	e1a00005 	mov	r0, r5
   2741c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   27420:	ebfff95f 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   27424:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   27428:	e3e03000 	mvn	r3, #0
   2742c:	e2850068 	add	r0, r5, #104	; 0x68
   27430:	e585302c 	str	r3, [r5, #44]	; 0x2c
   27434:	eb00147a 	bl	2c624 <CSynchronizationEvent::Set()>
   27438:	e3560000 	cmp	r6, #0
   2743c:	0afffe0a 	beq	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27440:	eafffe48 	b	26d68 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2d4>
   27444:	e1a03008 	mov	r3, r8
   27448:	e1a02006 	mov	r2, r6
   2744c:	e084100a 	add	r1, r4, sl
   27450:	e285003c 	add	r0, r5, #60	; 0x3c
   27454:	eb0005dd 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   27458:	eafffe75 	b	26e34 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3a0>
   2745c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   27460:	e59d2010 	ldr	r2, [sp, #16]
   27464:	e1530002 	cmp	r3, r2
   27468:	1a00002b 	bne	2751c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa88>
   2746c:	e3560000 	cmp	r6, #0
   27470:	0affff57 	beq	271d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x740>
   27474:	e084100a 	add	r1, r4, sl
   27478:	e3a03000 	mov	r3, #0
   2747c:	e1a02006 	mov	r2, r6
   27480:	e285003c 	add	r0, r5, #60	; 0x3c
   27484:	eb0005d1 	bl	28bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   27488:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   2748c:	e3a02000 	mov	r2, #0
   27490:	e3a01a01 	mov	r1, #4096	; 0x1000
   27494:	e0863003 	add	r3, r6, r3
   27498:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   2749c:	e58d2004 	str	r2, [sp, #4]
   274a0:	e1a00005 	mov	r0, r5
   274a4:	e58d2000 	str	r2, [sp]
   274a8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   274ac:	ebfff93c 	bl	259a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   274b0:	e3180b02 	tst	r8, #2048	; 0x800
   274b4:	0affff46 	beq	271d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x740>
   274b8:	e2850068 	add	r0, r5, #104	; 0x68
   274bc:	eb001458 	bl	2c624 <CSynchronizationEvent::Set()>
   274c0:	eaffff43 	b	271d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x740>
   274c4:	e3a03000 	mov	r3, #0
   274c8:	e3e02000 	mvn	r2, #0
   274cc:	e2850068 	add	r0, r5, #104	; 0x68
   274d0:	e585202c 	str	r2, [r5, #44]	; 0x2c
   274d4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   274d8:	eb001451 	bl	2c624 <CSynchronizationEvent::Set()>
   274dc:	eafffde2 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   274e0:	e30112f4 	movw	r1, #4852	; 0x12f4
   274e4:	e3401004 	movt	r1, #4
   274e8:	e3010490 	movw	r0, #5264	; 0x1490
   274ec:	e3400004 	movt	r0, #4
   274f0:	e3a02c03 	mov	r2, #768	; 0x300
   274f4:	eb0014f1 	bl	2c8c0 <assertion_failed>
   274f8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   274fc:	e0411002 	sub	r1, r1, r2
   27500:	e3510000 	cmp	r1, #0
   27504:	da00007c 	ble	276fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc68>
   27508:	e59d100c 	ldr	r1, [sp, #12]
   2750c:	e0413003 	sub	r3, r1, r3
   27510:	e3530000 	cmp	r3, #0
   27514:	cafffef8 	bgt	270fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x668>
   27518:	eafffefd 	b	27114 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   2751c:	e3a0c000 	mov	ip, #0
   27520:	eafffdcb 	b	26c54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   27524:	e3520000 	cmp	r2, #0
   27528:	1afffef9 	bne	27114 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   2752c:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   27530:	e59d200c 	ldr	r2, [sp, #12]
   27534:	e0423003 	sub	r3, r2, r3
   27538:	e3530000 	cmp	r3, #0
   2753c:	cafffef4 	bgt	27114 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   27540:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   27544:	e59d1010 	ldr	r1, [sp, #16]
   27548:	e0432001 	sub	r2, r3, r1
   2754c:	e3520000 	cmp	r2, #0
   27550:	ba000006 	blt	27570 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   27554:	e1530001 	cmp	r3, r1
   27558:	1afffeed 	bne	27114 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   2755c:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   27560:	e59d200c 	ldr	r2, [sp, #12]
   27564:	e0433002 	sub	r3, r3, r2
   27568:	e3530000 	cmp	r3, #0
   2756c:	cafffee8 	bgt	27114 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   27570:	e59d3018 	ldr	r3, [sp, #24]
   27574:	e5853094 	str	r3, [r5, #148]	; 0x94
   27578:	e285309c 	add	r3, r5, #156	; 0x9c
   2757c:	f403878f 	vst1.32	{d8}, [r3]
   27580:	eafffee3 	b	27114 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   27584:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   27588:	e59d200c 	ldr	r2, [sp, #12]
   2758c:	e1530002 	cmp	r3, r2
   27590:	1affff03 	bne	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   27594:	e1a01002 	mov	r1, r2
   27598:	e28500b8 	add	r0, r5, #184	; 0xb8
   2759c:	eb000243 	bl	27eb0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   275a0:	e3a03000 	mov	r3, #0
   275a4:	e3a01001 	mov	r1, #1
   275a8:	e1a00005 	mov	r0, r5
   275ac:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   275b0:	ebfff99e 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   275b4:	e3a03006 	mov	r3, #6
   275b8:	e3a01002 	mov	r1, #2
   275bc:	e1a00005 	mov	r0, r5
   275c0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   275c4:	e3012770 	movw	r2, #6000	; 0x1770
   275c8:	ebfffa04 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   275cc:	e2850048 	add	r0, r5, #72	; 0x48
   275d0:	eb000098 	bl	27838 <CRetransmissionQueue::IsEmpty() const>
   275d4:	e3500000 	cmp	r0, #0
   275d8:	0afffef1 	beq	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   275dc:	e2850068 	add	r0, r5, #104	; 0x68
   275e0:	eb00140f 	bl	2c624 <CSynchronizationEvent::Set()>
   275e4:	eafffeee 	b	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   275e8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   275ec:	e59d200c 	ldr	r2, [sp, #12]
   275f0:	e1530002 	cmp	r3, r2
   275f4:	1afffeea 	bne	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   275f8:	e1a01002 	mov	r1, r2
   275fc:	e28500b8 	add	r0, r5, #184	; 0xb8
   27600:	eb00022a 	bl	27eb0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   27604:	e1a00005 	mov	r0, r5
   27608:	e3a03000 	mov	r3, #0
   2760c:	e3a01001 	mov	r1, #1
   27610:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   27614:	ebfff985 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   27618:	e3a0300a 	mov	r3, #10
   2761c:	e3a01002 	mov	r1, #2
   27620:	e1a00005 	mov	r0, r5
   27624:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   27628:	e3012770 	movw	r2, #6000	; 0x1770
   2762c:	ebfff9eb 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   27630:	eafffedb 	b	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   27634:	e1a00005 	mov	r0, r5
   27638:	e3a01001 	mov	r1, #1
   2763c:	ebfff97b 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   27640:	e1a00005 	mov	r0, r5
   27644:	e3a01000 	mov	r1, #0
   27648:	ebfff978 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   2764c:	e3a0300a 	mov	r3, #10
   27650:	e3a01002 	mov	r1, #2
   27654:	e1a00005 	mov	r0, r5
   27658:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   2765c:	e3012770 	movw	r2, #6000	; 0x1770
   27660:	ebfff9de 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   27664:	eafffd80 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27668:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   2766c:	e59d200c 	ldr	r2, [sp, #12]
   27670:	e1530002 	cmp	r3, r2
   27674:	13a03008 	movne	r3, #8
   27678:	15c5302a 	strbne	r3, [r5, #42]	; 0x2a
   2767c:	1afffd7a 	bne	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27680:	e3a04000 	mov	r4, #0
   27684:	e1a00005 	mov	r0, r5
   27688:	e3a01001 	mov	r1, #1
   2768c:	e5c5405e 	strb	r4, [r5, #94]	; 0x5e
   27690:	ebfff966 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   27694:	e1a01004 	mov	r1, r4
   27698:	e1a00005 	mov	r0, r5
   2769c:	eaffffe9 	b	27648 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbb4>
   276a0:	e3a03007 	mov	r3, #7
   276a4:	e2850068 	add	r0, r5, #104	; 0x68
   276a8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   276ac:	eb0013dc 	bl	2c624 <CSynchronizationEvent::Set()>
   276b0:	eafffd6d 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   276b4:	e59d3018 	ldr	r3, [sp, #24]
   276b8:	e1a01002 	mov	r1, r2
   276bc:	e5853094 	str	r3, [r5, #148]	; 0x94
   276c0:	e285309c 	add	r3, r5, #156	; 0x9c
   276c4:	e28500b8 	add	r0, r5, #184	; 0xb8
   276c8:	f403878f 	vst1.32	{d8}, [r3]
   276cc:	e585208c 	str	r2, [r5, #140]	; 0x8c
   276d0:	eb0001f6 	bl	27eb0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   276d4:	e3a03004 	mov	r3, #4
   276d8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   276dc:	e3a03005 	mov	r3, #5
   276e0:	e5853060 	str	r3, [r5, #96]	; 0x60
   276e4:	eafffeae 	b	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   276e8:	e3a01002 	mov	r1, #2
   276ec:	e1a00005 	mov	r0, r5
   276f0:	e3012770 	movw	r2, #6000	; 0x1770
   276f4:	ebfff9b9 	bl	25de0 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   276f8:	eafffd5b 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   276fc:	e59d900c 	ldr	r9, [sp, #12]
   27700:	e28500b8 	add	r0, r5, #184	; 0xb8
   27704:	e1a01009 	mov	r1, r9
   27708:	eb0001e8 	bl	27eb0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   2770c:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   27710:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   27714:	e0497007 	sub	r7, r9, r7
   27718:	e585908c 	str	r9, [r5, #140]	; 0x8c
   2771c:	e1530009 	cmp	r3, r9
   27720:	0a00000f 	beq	27764 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcd0>
   27724:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   27728:	e3530005 	cmp	r3, #5
   2772c:	0a000012 	beq	2777c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xce8>
   27730:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   27734:	e3530008 	cmp	r3, #8
   27738:	0a00000f 	beq	2777c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xce8>
   2773c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   27740:	e3530004 	cmp	r3, #4
   27744:	03570001 	cmpeq	r7, #1
   27748:	0affff7c 	beq	27540 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaac>
   2774c:	e3570000 	cmp	r7, #0
   27750:	0affff7a 	beq	27540 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaac>
   27754:	e1a01007 	mov	r1, r7
   27758:	e2850048 	add	r0, r5, #72	; 0x48
   2775c:	eb0000ff 	bl	27b60 <CRetransmissionQueue::Advance(unsigned int)>
   27760:	eaffff76 	b	27540 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaac>
   27764:	e3a01001 	mov	r1, #1
   27768:	e1a00005 	mov	r0, r5
   2776c:	ebfff92f 	bl	25c30 <CTCPConnection::StopTimer(unsigned int)>
   27770:	e3a03005 	mov	r3, #5
   27774:	e5853060 	str	r3, [r5, #96]	; 0x60
   27778:	eaffffe9 	b	27724 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc90>
   2777c:	e3a03000 	mov	r3, #0
   27780:	e2477001 	sub	r7, r7, #1
   27784:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   27788:	eaffffeb 	b	2773c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xca8>
   2778c:	e1a00005 	mov	r0, r5
   27790:	e300148f 	movw	r1, #1167	; 0x48f
   27794:	ebfffcae 	bl	26a54 <CTCPConnection::UnexpectedState(unsigned int)>
   27798:	eafffe81 	b	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   2779c:	e1a00005 	mov	r0, r5
   277a0:	e30014a8 	movw	r1, #1192	; 0x4a8
   277a4:	ebfffcaa 	bl	26a54 <CTCPConnection::UnexpectedState(unsigned int)>
   277a8:	eafffe7d 	b	271a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   277ac:	e1a00005 	mov	r0, r5
   277b0:	e3001519 	movw	r1, #1305	; 0x519
   277b4:	ebfffca6 	bl	26a54 <CTCPConnection::UnexpectedState(unsigned int)>
   277b8:	eafffd2b 	b	26c6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>

000277bc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   277bc:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   277c0:	e2802008 	add	r2, r0, #8
   277c4:	e92d4010 	push	{r4, lr}
   277c8:	e3a03000 	mov	r3, #0
   277cc:	e1a04000 	mov	r4, r0
   277d0:	e880000a 	stm	r0, {r1, r3}
   277d4:	e3510001 	cmp	r1, #1
   277d8:	f442078f 	vst1.32	{d16}, [r2]
   277dc:	e5803010 	str	r3, [r0, #16]
   277e0:	9a000005 	bls	277fc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x40>
   277e4:	e1a00001 	mov	r0, r1
   277e8:	eb003d31 	bl	36cb4 <operator new[](unsigned int)>
   277ec:	e1a03000 	mov	r3, r0
   277f0:	e1a00004 	mov	r0, r4
   277f4:	e5843004 	str	r3, [r4, #4]
   277f8:	e8bd8010 	pop	{r4, pc}
   277fc:	e3011594 	movw	r1, #5524	; 0x1594
   27800:	e3401004 	movt	r1, #4
   27804:	e30105ac 	movw	r0, #5548	; 0x15ac
   27808:	e3400004 	movt	r0, #4
   2780c:	e3a0201e 	mov	r2, #30
   27810:	eb00142a 	bl	2c8c0 <assertion_failed>

00027814 <CRetransmissionQueue::~CRetransmissionQueue()>:
   27814:	e92d4010 	push	{r4, lr}
   27818:	e1a04000 	mov	r4, r0
   2781c:	e5900004 	ldr	r0, [r0, #4]
   27820:	e3500000 	cmp	r0, #0
   27824:	0a000001 	beq	27830 <CRetransmissionQueue::~CRetransmissionQueue()+0x1c>
   27828:	e3a01001 	mov	r1, #1
   2782c:	eb003d32 	bl	36cfc <operator delete(void*, unsigned int)>
   27830:	e1a00004 	mov	r0, r4
   27834:	e8bd8010 	pop	{r4, pc}

00027838 <CRetransmissionQueue::IsEmpty() const>:
   27838:	e590200c 	ldr	r2, [r0, #12]
   2783c:	e5900008 	ldr	r0, [r0, #8]
   27840:	e0420000 	sub	r0, r2, r0
   27844:	e16f0f10 	clz	r0, r0
   27848:	e1a002a0 	lsr	r0, r0, #5
   2784c:	e12fff1e 	bx	lr

00027850 <CRetransmissionQueue::GetFreeSpace() const>:
   27850:	e5903000 	ldr	r3, [r0]
   27854:	e92d4010 	push	{r4, lr}
   27858:	e3530001 	cmp	r3, #1
   2785c:	9a00000c 	bls	27894 <CRetransmissionQueue::GetFreeSpace() const+0x44>
   27860:	e5902008 	ldr	r2, [r0, #8]
   27864:	e1530002 	cmp	r3, r2
   27868:	9a00000f 	bls	278ac <CRetransmissionQueue::GetFreeSpace() const+0x5c>
   2786c:	e590100c 	ldr	r1, [r0, #12]
   27870:	e1530001 	cmp	r3, r1
   27874:	9a000012 	bls	278c4 <CRetransmissionQueue::GetFreeSpace() const+0x74>
   27878:	e1520001 	cmp	r2, r1
   2787c:	20833001 	addcs	r3, r3, r1
   27880:	32411001 	subcc	r1, r1, #1
   27884:	22433001 	subcs	r3, r3, #1
   27888:	20430002 	subcs	r0, r3, r2
   2788c:	30410002 	subcc	r0, r1, r2
   27890:	e8bd8010 	pop	{r4, pc}
   27894:	e3011594 	movw	r1, #5524	; 0x1594
   27898:	e3401004 	movt	r1, #4
   2789c:	e30105ac 	movw	r0, #5548	; 0x15ac
   278a0:	e3400004 	movt	r0, #4
   278a4:	e3a02033 	mov	r2, #51	; 0x33
   278a8:	eb001404 	bl	2c8c0 <assertion_failed>
   278ac:	e3011594 	movw	r1, #5524	; 0x1594
   278b0:	e3401004 	movt	r1, #4
   278b4:	e30105b8 	movw	r0, #5560	; 0x15b8
   278b8:	e3400004 	movt	r0, #4
   278bc:	e3a02034 	mov	r2, #52	; 0x34
   278c0:	eb0013fe 	bl	2c8c0 <assertion_failed>
   278c4:	e3011594 	movw	r1, #5524	; 0x1594
   278c8:	e3401004 	movt	r1, #4
   278cc:	e30105cc 	movw	r0, #5580	; 0x15cc
   278d0:	e3400004 	movt	r0, #4
   278d4:	e3a02035 	mov	r2, #53	; 0x35
   278d8:	eb0013f8 	bl	2c8c0 <assertion_failed>

000278dc <CRetransmissionQueue::Write(void const*, unsigned int)>:
   278dc:	e92d4070 	push	{r4, r5, r6, lr}
   278e0:	e2526000 	subs	r6, r2, #0
   278e4:	0a000024 	beq	2797c <CRetransmissionQueue::Write(void const*, unsigned int)+0xa0>
   278e8:	e1a04000 	mov	r4, r0
   278ec:	e1a05001 	mov	r5, r1
   278f0:	ebffffd6 	bl	27850 <CRetransmissionQueue::GetFreeSpace() const>
   278f4:	e1500006 	cmp	r0, r6
   278f8:	3a000025 	bcc	27994 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   278fc:	e3550000 	cmp	r5, #0
   27900:	0a000029 	beq	279ac <CRetransmissionQueue::Write(void const*, unsigned int)+0xd0>
   27904:	e5943004 	ldr	r3, [r4, #4]
   27908:	e3530000 	cmp	r3, #0
   2790c:	0a00002c 	beq	279c4 <CRetransmissionQueue::Write(void const*, unsigned int)+0xe8>
   27910:	e5942008 	ldr	r2, [r4, #8]
   27914:	e1a00005 	mov	r0, r5
   27918:	e3560001 	cmp	r6, #1
   2791c:	e2821001 	add	r1, r2, #1
   27920:	e5841008 	str	r1, [r4, #8]
   27924:	e4d01001 	ldrb	r1, [r0], #1
   27928:	e7c31002 	strb	r1, [r3, r2]
   2792c:	e5943008 	ldr	r3, [r4, #8]
   27930:	e5942000 	ldr	r2, [r4]
   27934:	e731f213 	udiv	r1, r3, r2
   27938:	e0633192 	mls	r3, r2, r1, r3
   2793c:	e5843008 	str	r3, [r4, #8]
   27940:	08bd8070 	popeq	{r4, r5, r6, pc}
   27944:	e0851006 	add	r1, r5, r6
   27948:	e283e001 	add	lr, r3, #1
   2794c:	e594c004 	ldr	ip, [r4, #4]
   27950:	e584e008 	str	lr, [r4, #8]
   27954:	e4d0e001 	ldrb	lr, [r0], #1
   27958:	e7cce003 	strb	lr, [ip, r3]
   2795c:	e1510000 	cmp	r1, r0
   27960:	e5943008 	ldr	r3, [r4, #8]
   27964:	e594c000 	ldr	ip, [r4]
   27968:	e73efc13 	udiv	lr, r3, ip
   2796c:	e0633e9c 	mls	r3, ip, lr, r3
   27970:	e5843008 	str	r3, [r4, #8]
   27974:	1afffff3 	bne	27948 <CRetransmissionQueue::Write(void const*, unsigned int)+0x6c>
   27978:	e8bd8070 	pop	{r4, r5, r6, pc}
   2797c:	e3011594 	movw	r1, #5524	; 0x1594
   27980:	e3401004 	movt	r1, #4
   27984:	e30c0b80 	movw	r0, #52096	; 0xcb80
   27988:	e3400003 	movt	r0, #3
   2798c:	e3a02041 	mov	r2, #65	; 0x41
   27990:	eb0013ca 	bl	2c8c0 <assertion_failed>
   27994:	e3011594 	movw	r1, #5524	; 0x1594
   27998:	e3401004 	movt	r1, #4
   2799c:	e30105e0 	movw	r0, #5600	; 0x15e0
   279a0:	e3400004 	movt	r0, #4
   279a4:	e3a02042 	mov	r2, #66	; 0x42
   279a8:	eb0013c4 	bl	2c8c0 <assertion_failed>
   279ac:	e3011594 	movw	r1, #5524	; 0x1594
   279b0:	e3401004 	movt	r1, #4
   279b4:	e30105fc 	movw	r0, #5628	; 0x15fc
   279b8:	e3400004 	movt	r0, #4
   279bc:	e3a02045 	mov	r2, #69	; 0x45
   279c0:	eb0013be 	bl	2c8c0 <assertion_failed>
   279c4:	e3011594 	movw	r1, #5524	; 0x1594
   279c8:	e3401004 	movt	r1, #4
   279cc:	e30e00a8 	movw	r0, #57512	; 0xe0a8
   279d0:	e3400003 	movt	r0, #3
   279d4:	e3a02046 	mov	r2, #70	; 0x46
   279d8:	eb0013b8 	bl	2c8c0 <assertion_failed>

000279dc <CRetransmissionQueue::GetBytesAvailable() const>:
   279dc:	e5903000 	ldr	r3, [r0]
   279e0:	e92d4010 	push	{r4, lr}
   279e4:	e3530001 	cmp	r3, #1
   279e8:	9a00000a 	bls	27a18 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   279ec:	e5902008 	ldr	r2, [r0, #8]
   279f0:	e1530002 	cmp	r3, r2
   279f4:	9a00000d 	bls	27a30 <CRetransmissionQueue::GetBytesAvailable() const+0x54>
   279f8:	e5900010 	ldr	r0, [r0, #16]
   279fc:	e1530000 	cmp	r3, r0
   27a00:	9a000010 	bls	27a48 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   27a04:	e1520000 	cmp	r2, r0
   27a08:	30833002 	addcc	r3, r3, r2
   27a0c:	30430000 	subcc	r0, r3, r0
   27a10:	20420000 	subcs	r0, r2, r0
   27a14:	e8bd8010 	pop	{r4, pc}
   27a18:	e3011594 	movw	r1, #5524	; 0x1594
   27a1c:	e3401004 	movt	r1, #4
   27a20:	e30105ac 	movw	r0, #5548	; 0x15ac
   27a24:	e3400004 	movt	r0, #4
   27a28:	e3a02051 	mov	r2, #81	; 0x51
   27a2c:	eb0013a3 	bl	2c8c0 <assertion_failed>
   27a30:	e3011594 	movw	r1, #5524	; 0x1594
   27a34:	e3401004 	movt	r1, #4
   27a38:	e30105b8 	movw	r0, #5560	; 0x15b8
   27a3c:	e3400004 	movt	r0, #4
   27a40:	e3a02052 	mov	r2, #82	; 0x52
   27a44:	eb00139d 	bl	2c8c0 <assertion_failed>
   27a48:	e3011594 	movw	r1, #5524	; 0x1594
   27a4c:	e3401004 	movt	r1, #4
   27a50:	e3010604 	movw	r0, #5636	; 0x1604
   27a54:	e3400004 	movt	r0, #4
   27a58:	e3a02053 	mov	r2, #83	; 0x53
   27a5c:	eb001397 	bl	2c8c0 <assertion_failed>

00027a60 <CRetransmissionQueue::Read(void*, unsigned int)>:
   27a60:	e92d4070 	push	{r4, r5, r6, lr}
   27a64:	e2526000 	subs	r6, r2, #0
   27a68:	0a000024 	beq	27b00 <CRetransmissionQueue::Read(void*, unsigned int)+0xa0>
   27a6c:	e1a04000 	mov	r4, r0
   27a70:	e1a05001 	mov	r5, r1
   27a74:	ebffffd8 	bl	279dc <CRetransmissionQueue::GetBytesAvailable() const>
   27a78:	e1500006 	cmp	r0, r6
   27a7c:	3a000025 	bcc	27b18 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   27a80:	e3550000 	cmp	r5, #0
   27a84:	0a000029 	beq	27b30 <CRetransmissionQueue::Read(void*, unsigned int)+0xd0>
   27a88:	e5943004 	ldr	r3, [r4, #4]
   27a8c:	e3530000 	cmp	r3, #0
   27a90:	0a00002c 	beq	27b48 <CRetransmissionQueue::Read(void*, unsigned int)+0xe8>
   27a94:	e5942010 	ldr	r2, [r4, #16]
   27a98:	e1a00005 	mov	r0, r5
   27a9c:	e3560001 	cmp	r6, #1
   27aa0:	e2821001 	add	r1, r2, #1
   27aa4:	e5841010 	str	r1, [r4, #16]
   27aa8:	e7d33002 	ldrb	r3, [r3, r2]
   27aac:	e4c03001 	strb	r3, [r0], #1
   27ab0:	e5943010 	ldr	r3, [r4, #16]
   27ab4:	e5942000 	ldr	r2, [r4]
   27ab8:	e731f213 	udiv	r1, r3, r2
   27abc:	e0633192 	mls	r3, r2, r1, r3
   27ac0:	e5843010 	str	r3, [r4, #16]
   27ac4:	08bd8070 	popeq	{r4, r5, r6, pc}
   27ac8:	e0851006 	add	r1, r5, r6
   27acc:	e594c004 	ldr	ip, [r4, #4]
   27ad0:	e283e001 	add	lr, r3, #1
   27ad4:	e584e010 	str	lr, [r4, #16]
   27ad8:	e7dc3003 	ldrb	r3, [ip, r3]
   27adc:	e4c03001 	strb	r3, [r0], #1
   27ae0:	e5943010 	ldr	r3, [r4, #16]
   27ae4:	e1510000 	cmp	r1, r0
   27ae8:	e594c000 	ldr	ip, [r4]
   27aec:	e73efc13 	udiv	lr, r3, ip
   27af0:	e0633e9c 	mls	r3, ip, lr, r3
   27af4:	e5843010 	str	r3, [r4, #16]
   27af8:	1afffff3 	bne	27acc <CRetransmissionQueue::Read(void*, unsigned int)+0x6c>
   27afc:	e8bd8070 	pop	{r4, r5, r6, pc}
   27b00:	e3011594 	movw	r1, #5524	; 0x1594
   27b04:	e3401004 	movt	r1, #4
   27b08:	e30c0b80 	movw	r0, #52096	; 0xcb80
   27b0c:	e3400003 	movt	r0, #3
   27b10:	e3a0205f 	mov	r2, #95	; 0x5f
   27b14:	eb001369 	bl	2c8c0 <assertion_failed>
   27b18:	e3011594 	movw	r1, #5524	; 0x1594
   27b1c:	e3401004 	movt	r1, #4
   27b20:	e301061c 	movw	r0, #5660	; 0x161c
   27b24:	e3400004 	movt	r0, #4
   27b28:	e3a02060 	mov	r2, #96	; 0x60
   27b2c:	eb001363 	bl	2c8c0 <assertion_failed>
   27b30:	e3011594 	movw	r1, #5524	; 0x1594
   27b34:	e3401004 	movt	r1, #4
   27b38:	e30105fc 	movw	r0, #5628	; 0x15fc
   27b3c:	e3400004 	movt	r0, #4
   27b40:	e3a02063 	mov	r2, #99	; 0x63
   27b44:	eb00135d 	bl	2c8c0 <assertion_failed>
   27b48:	e3011594 	movw	r1, #5524	; 0x1594
   27b4c:	e3401004 	movt	r1, #4
   27b50:	e30e00a8 	movw	r0, #57512	; 0xe0a8
   27b54:	e3400003 	movt	r0, #3
   27b58:	e3a02064 	mov	r2, #100	; 0x64
   27b5c:	eb001357 	bl	2c8c0 <assertion_failed>

00027b60 <CRetransmissionQueue::Advance(unsigned int)>:
   27b60:	e5902000 	ldr	r2, [r0]
   27b64:	e92d4010 	push	{r4, lr}
   27b68:	e3520001 	cmp	r2, #1
   27b6c:	9a00000a 	bls	27b9c <CRetransmissionQueue::Advance(unsigned int)+0x3c>
   27b70:	e590300c 	ldr	r3, [r0, #12]
   27b74:	e1520003 	cmp	r2, r3
   27b78:	9a00000d 	bls	27bb4 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   27b7c:	e590c010 	ldr	ip, [r0, #16]
   27b80:	e152000c 	cmp	r2, ip
   27b84:	9a000010 	bls	27bcc <CRetransmissionQueue::Advance(unsigned int)+0x6c>
   27b88:	e0833001 	add	r3, r3, r1
   27b8c:	e731f213 	udiv	r1, r3, r2
   27b90:	e0633192 	mls	r3, r2, r1, r3
   27b94:	e580300c 	str	r3, [r0, #12]
   27b98:	e8bd8010 	pop	{r4, pc}
   27b9c:	e3011594 	movw	r1, #5524	; 0x1594
   27ba0:	e3401004 	movt	r1, #4
   27ba4:	e30105ac 	movw	r0, #5548	; 0x15ac
   27ba8:	e3400004 	movt	r0, #4
   27bac:	e3a0206f 	mov	r2, #111	; 0x6f
   27bb0:	eb001342 	bl	2c8c0 <assertion_failed>
   27bb4:	e3011594 	movw	r1, #5524	; 0x1594
   27bb8:	e3401004 	movt	r1, #4
   27bbc:	e30105cc 	movw	r0, #5580	; 0x15cc
   27bc0:	e3400004 	movt	r0, #4
   27bc4:	e3a02070 	mov	r2, #112	; 0x70
   27bc8:	eb00133c 	bl	2c8c0 <assertion_failed>
   27bcc:	e3011594 	movw	r1, #5524	; 0x1594
   27bd0:	e3401004 	movt	r1, #4
   27bd4:	e3010604 	movw	r0, #5636	; 0x1604
   27bd8:	e3400004 	movt	r0, #4
   27bdc:	e3a02071 	mov	r2, #113	; 0x71
   27be0:	eb001336 	bl	2c8c0 <assertion_failed>

00027be4 <CRetransmissionQueue::Reset()>:
   27be4:	e590300c 	ldr	r3, [r0, #12]
   27be8:	e5803010 	str	r3, [r0, #16]
   27bec:	e12fff1e 	bx	lr

00027bf0 <CRetransmissionQueue::Flush()>:
   27bf0:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   27bf4:	e2802008 	add	r2, r0, #8
   27bf8:	e3a03000 	mov	r3, #0
   27bfc:	f442078f 	vst1.32	{d16}, [r2]
   27c00:	e5803010 	str	r3, [r0, #16]
   27c04:	e12fff1e 	bx	lr

00027c08 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   27c08:	e92d4010 	push	{r4, lr}
   27c0c:	e1a04000 	mov	r4, r0
   27c10:	eb0037e0 	bl	35b98 <CTimer::Get()>
   27c14:	e1a03004 	mov	r3, r4
   27c18:	eddf1b12 	vldr	d17, [pc, #72]	; 27c68 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x60>
   27c1c:	eddf0b13 	vldr	d16, [pc, #76]	; 27c70 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x68>
   27c20:	e2842020 	add	r2, r4, #32
   27c24:	e3a01001 	mov	r1, #1
   27c28:	e3500000 	cmp	r0, #0
   27c2c:	e4830004 	str	r0, [r3], #4
   27c30:	f443178f 	vst1.32	{d17}, [r3]
   27c34:	e3a03000 	mov	r3, #0
   27c38:	e5c4100c 	strb	r1, [r4, #12]
   27c3c:	e5c43018 	strb	r3, [r4, #24]
   27c40:	f442078f 	vst1.32	{d16}, [r2]
   27c44:	0a000001 	beq	27c50 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x48>
   27c48:	e1a00004 	mov	r0, r4
   27c4c:	e8bd8010 	pop	{r4, pc}
   27c50:	e301163c 	movw	r1, #5692	; 0x163c
   27c54:	e3401004 	movt	r1, #4
   27c58:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
   27c5c:	e3400003 	movt	r0, #3
   27c60:	e3a02033 	mov	r2, #51	; 0x33
   27c64:	eb001315 	bl	2c8c0 <assertion_failed>
   27c68:	00000000 	.word	0x00000000
   27c6c:	0000012c 	.word	0x0000012c
   27c70:	00000000 	.word	0x00000000
   27c74:	00000001 	.word	0x00000001

00027c78 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   27c78:	e12fff1e 	bx	lr

00027c7c <CRetransmissionTimeoutCalculator::GetRTO() const>:
   27c7c:	e5900008 	ldr	r0, [r0, #8]
   27c80:	e12fff1e 	bx	lr

00027c84 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   27c84:	e92d4070 	push	{r4, r5, r6, lr}
   27c88:	e1a04000 	mov	r4, r0
   27c8c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   27c90:	e1a05001 	mov	r5, r1
   27c94:	e3500000 	cmp	r0, #0
   27c98:	1a000007 	bne	27cbc <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x38>
   27c9c:	e3a02f4b 	mov	r2, #300	; 0x12c
   27ca0:	e3a03001 	mov	r3, #1
   27ca4:	e5841004 	str	r1, [r4, #4]
   27ca8:	e5842008 	str	r2, [r4, #8]
   27cac:	e5c4300c 	strb	r3, [r4, #12]
   27cb0:	e5c40018 	strb	r0, [r4, #24]
   27cb4:	e5840020 	str	r0, [r4, #32]
   27cb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   27cbc:	eb00420e 	bl	384fc <EnterCritical>
   27cc0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   27cc4:	e3a03000 	mov	r3, #0
   27cc8:	e3a02f4b 	mov	r2, #300	; 0x12c
   27ccc:	e1510003 	cmp	r1, r3
   27cd0:	e5842008 	str	r2, [r4, #8]
   27cd4:	e5845004 	str	r5, [r4, #4]
   27cd8:	e3a02001 	mov	r2, #1
   27cdc:	e5c43018 	strb	r3, [r4, #24]
   27ce0:	e5c4200c 	strb	r2, [r4, #12]
   27ce4:	e5843020 	str	r3, [r4, #32]
   27ce8:	08bd8070 	popeq	{r4, r5, r6, pc}
   27cec:	e8bd4070 	pop	{r4, r5, r6, lr}
   27cf0:	ea00422c 	b	385a8 <LeaveCritical>

00027cf4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   27cf4:	e92d4010 	push	{r4, lr}
   27cf8:	e1a04000 	mov	r4, r0
   27cfc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   27d00:	e3500000 	cmp	r0, #0
   27d04:	1a000011 	bne	27d50 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   27d08:	e5d43018 	ldrb	r3, [r4, #24]
   27d0c:	e3530000 	cmp	r3, #0
   27d10:	18bd8010 	popne	{r4, pc}
   27d14:	e5943020 	ldr	r3, [r4, #32]
   27d18:	e3530000 	cmp	r3, #0
   27d1c:	1a000006 	bne	27d3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   27d20:	e5940000 	ldr	r0, [r4]
   27d24:	e3a03001 	mov	r3, #1
   27d28:	e5c43018 	strb	r3, [r4, #24]
   27d2c:	e3500000 	cmp	r0, #0
   27d30:	0a00000e 	beq	27d70 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x7c>
   27d34:	eb0034c5 	bl	35050 <CTimer::GetTicks() const>
   27d38:	e584001c 	str	r0, [r4, #28]
   27d3c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   27d40:	e3530000 	cmp	r3, #0
   27d44:	08bd8010 	popeq	{r4, pc}
   27d48:	e8bd4010 	pop	{r4, lr}
   27d4c:	ea004215 	b	385a8 <LeaveCritical>
   27d50:	eb0041e9 	bl	384fc <EnterCritical>
   27d54:	e5d43018 	ldrb	r3, [r4, #24]
   27d58:	e3530000 	cmp	r3, #0
   27d5c:	1afffff6 	bne	27d3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   27d60:	e5943020 	ldr	r3, [r4, #32]
   27d64:	e3530000 	cmp	r3, #0
   27d68:	1afffff3 	bne	27d3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   27d6c:	eaffffeb 	b	27d20 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   27d70:	e301163c 	movw	r1, #5692	; 0x163c
   27d74:	e3401004 	movt	r1, #4
   27d78:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
   27d7c:	e3400003 	movt	r0, #3
   27d80:	e3a0205f 	mov	r2, #95	; 0x5f
   27d84:	eb0012cd 	bl	2c8c0 <assertion_failed>

00027d88 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   27d88:	e92d4010 	push	{r4, lr}
   27d8c:	e1a04000 	mov	r4, r0
   27d90:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   27d94:	e3500000 	cmp	r0, #0
   27d98:	1a000010 	bne	27de0 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x58>
   27d9c:	e5943008 	ldr	r3, [r4, #8]
   27da0:	e3022ee0 	movw	r2, #12000	; 0x2ee0
   27da4:	e1a03083 	lsl	r3, r3, #1
   27da8:	e1530002 	cmp	r3, r2
   27dac:	21a03002 	movcs	r3, r2
   27db0:	e5942020 	ldr	r2, [r4, #32]
   27db4:	e5843008 	str	r3, [r4, #8]
   27db8:	e2823001 	add	r3, r2, #1
   27dbc:	e5843020 	str	r3, [r4, #32]
   27dc0:	e3530002 	cmp	r3, #2
   27dc4:	9a000003 	bls	27dd8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x50>
   27dc8:	e3a03001 	mov	r3, #1
   27dcc:	e5c40018 	strb	r0, [r4, #24]
   27dd0:	e5c4300c 	strb	r3, [r4, #12]
   27dd4:	e8bd8010 	pop	{r4, pc}
   27dd8:	e5c40018 	strb	r0, [r4, #24]
   27ddc:	e8bd8010 	pop	{r4, pc}
   27de0:	eb0041c5 	bl	384fc <EnterCritical>
   27de4:	e5943008 	ldr	r3, [r4, #8]
   27de8:	e5942020 	ldr	r2, [r4, #32]
   27dec:	e3021ee0 	movw	r1, #12000	; 0x2ee0
   27df0:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   27df4:	e1a03083 	lsl	r3, r3, #1
   27df8:	e2822001 	add	r2, r2, #1
   27dfc:	e1530001 	cmp	r3, r1
   27e00:	e5842020 	str	r2, [r4, #32]
   27e04:	21a03001 	movcs	r3, r1
   27e08:	e3520002 	cmp	r2, #2
   27e0c:	e5843008 	str	r3, [r4, #8]
   27e10:	83a03001 	movhi	r3, #1
   27e14:	85c4300c 	strbhi	r3, [r4, #12]
   27e18:	e3a03000 	mov	r3, #0
   27e1c:	e1500003 	cmp	r0, r3
   27e20:	e5c43018 	strb	r3, [r4, #24]
   27e24:	08bd8010 	popeq	{r4, pc}
   27e28:	e8bd4010 	pop	{r4, lr}
   27e2c:	ea0041dd 	b	385a8 <LeaveCritical>

00027e30 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   27e30:	e5d0300c 	ldrb	r3, [r0, #12]
   27e34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   27e38:	e3530000 	cmp	r3, #0
   27e3c:	0a00000f 	beq	27e80 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x50>
   27e40:	e1a020a1 	lsr	r2, r1, #1
   27e44:	e3a03000 	mov	r3, #0
   27e48:	e5c0300c 	strb	r3, [r0, #12]
   27e4c:	e1a0e102 	lsl	lr, r2, #2
   27e50:	e302cee0 	movw	ip, #12000	; 0x2ee0
   27e54:	e35e0001 	cmp	lr, #1
   27e58:	2081300e 	addcs	r3, r1, lr
   27e5c:	32813001 	addcc	r3, r1, #1
   27e60:	e5802014 	str	r2, [r0, #20]
   27e64:	e153000c 	cmp	r3, ip
   27e68:	e5801010 	str	r1, [r0, #16]
   27e6c:	21a0300c 	movcs	r3, ip
   27e70:	e3530064 	cmp	r3, #100	; 0x64
   27e74:	33a03064 	movcc	r3, #100	; 0x64
   27e78:	e5803008 	str	r3, [r0, #8]
   27e7c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   27e80:	e5903010 	ldr	r3, [r0, #16]
   27e84:	e5902014 	ldr	r2, [r0, #20]
   27e88:	e043c001 	sub	ip, r3, r1
   27e8c:	e35c0000 	cmp	ip, #0
   27e90:	e0633183 	rsb	r3, r3, r3, lsl #3
   27e94:	e0822082 	add	r2, r2, r2, lsl #1
   27e98:	b26cc000 	rsblt	ip, ip, #0
   27e9c:	e082200c 	add	r2, r2, ip
   27ea0:	e0833001 	add	r3, r3, r1
   27ea4:	e1a02122 	lsr	r2, r2, #2
   27ea8:	e1a011a3 	lsr	r1, r3, #3
   27eac:	eaffffe6 	b	27e4c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x1c>

00027eb0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   27eb0:	e92d4010 	push	{r4, lr}
   27eb4:	e1a04000 	mov	r4, r0
   27eb8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   27ebc:	e3500000 	cmp	r0, #0
   27ec0:	1a000016 	bne	27f20 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x70>
   27ec4:	e5d43018 	ldrb	r3, [r4, #24]
   27ec8:	e3530000 	cmp	r3, #0
   27ecc:	0a00000b 	beq	27f00 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   27ed0:	e5943020 	ldr	r3, [r4, #32]
   27ed4:	e3530000 	cmp	r3, #0
   27ed8:	1a000008 	bne	27f00 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   27edc:	e5940000 	ldr	r0, [r4]
   27ee0:	e3500000 	cmp	r0, #0
   27ee4:	0a00000f 	beq	27f28 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x78>
   27ee8:	eb003458 	bl	35050 <CTimer::GetTicks() const>
   27eec:	e594301c 	ldr	r3, [r4, #28]
   27ef0:	e1a01000 	mov	r1, r0
   27ef4:	e1a00004 	mov	r0, r4
   27ef8:	e0411003 	sub	r1, r1, r3
   27efc:	ebffffcb 	bl	27e30 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   27f00:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   27f04:	e3a03000 	mov	r3, #0
   27f08:	e5c43018 	strb	r3, [r4, #24]
   27f0c:	e1520003 	cmp	r2, r3
   27f10:	e5843020 	str	r3, [r4, #32]
   27f14:	08bd8010 	popeq	{r4, pc}
   27f18:	e8bd4010 	pop	{r4, lr}
   27f1c:	ea0041a1 	b	385a8 <LeaveCritical>
   27f20:	eb004175 	bl	384fc <EnterCritical>
   27f24:	eaffffe6 	b	27ec4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   27f28:	e301163c 	movw	r1, #5692	; 0x163c
   27f2c:	e3401004 	movt	r1, #4
   27f30:	e30a0a5c 	movw	r0, #43612	; 0xaa5c
   27f34:	e3400003 	movt	r0, #3
   27f38:	e3a02074 	mov	r2, #116	; 0x74
   27f3c:	eb00125f 	bl	2c8c0 <assertion_failed>

00027f40 <CTCPRejector::~CTCPRejector()>:
   27f40:	e59f3014 	ldr	r3, [pc, #20]	; 27f5c <CTCPRejector::~CTCPRejector()+0x1c>
   27f44:	e92d4010 	push	{r4, lr}
   27f48:	e1a04000 	mov	r4, r0
   27f4c:	e5803000 	str	r3, [r0]
   27f50:	ebfff31d 	bl	24bcc <CNetConnection::~CNetConnection()>
   27f54:	e1a00004 	mov	r0, r4
   27f58:	e8bd8010 	pop	{r4, pc}
   27f5c:	00041688 	.word	0x00041688

00027f60 <CTCPRejector::~CTCPRejector()>:
   27f60:	e59f3020 	ldr	r3, [pc, #32]	; 27f88 <CTCPRejector::~CTCPRejector()+0x28>
   27f64:	e92d4010 	push	{r4, lr}
   27f68:	e1a04000 	mov	r4, r0
   27f6c:	e5803000 	str	r3, [r0]
   27f70:	ebfff315 	bl	24bcc <CNetConnection::~CNetConnection()>
   27f74:	e1a00004 	mov	r0, r4
   27f78:	e3a0102c 	mov	r1, #44	; 0x2c
   27f7c:	eb003b5e 	bl	36cfc <operator delete(void*, unsigned int)>
   27f80:	e1a00004 	mov	r0, r4
   27f84:	e8bd8010 	pop	{r4, pc}
   27f88:	00041688 	.word	0x00041688

00027f8c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   27f8c:	e92d4010 	push	{r4, lr}
   27f90:	e1a04000 	mov	r4, r0
   27f94:	e3a03006 	mov	r3, #6
   27f98:	e24dd008 	sub	sp, sp, #8
   27f9c:	e58d3000 	str	r3, [sp]
   27fa0:	e3a03000 	mov	r3, #0
   27fa4:	ebfff2e1 	bl	24b30 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   27fa8:	e59f300c 	ldr	r3, [pc, #12]	; 27fbc <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   27fac:	e1a00004 	mov	r0, r4
   27fb0:	e5843000 	str	r3, [r4]
   27fb4:	e28dd008 	add	sp, sp, #8
   27fb8:	e8bd8010 	pop	{r4, pc}
   27fbc:	00041688 	.word	0x00041688

00027fc0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   27fc0:	e92d4010 	push	{r4, lr}
   27fc4:	e3110c02 	tst	r1, #512	; 0x200
   27fc8:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   27fcc:	e24dd008 	sub	sp, sp, #8
   27fd0:	1a000022 	bne	28060 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa0>
   27fd4:	e1a04000 	mov	r4, r0
   27fd8:	e1d001b6 	ldrh	r0, [r0, #22]
   27fdc:	e6bf2f32 	rev	r2, r2
   27fe0:	e58d200c 	str	r2, [sp, #12]
   27fe4:	e6bf2fb0 	rev16	r2, r0
   27fe8:	e1cd20b8 	strh	r2, [sp, #8]
   27fec:	e1d421b4 	ldrh	r2, [r4, #20]
   27ff0:	e211ca01 	ands	ip, r1, #4096	; 0x1000
   27ff4:	e284001c 	add	r0, r4, #28
   27ff8:	e3811050 	orr	r1, r1, #80	; 0x50
   27ffc:	e6bf2fb2 	rev16	r2, r2
   28000:	e1cd11b4 	strh	r1, [sp, #20]
   28004:	e1cd20ba 	strh	r2, [sp, #10]
   28008:	e28d1008 	add	r1, sp, #8
   2800c:	e3a02014 	mov	r2, #20
   28010:	16bfcf33 	revne	ip, r3
   28014:	e3a03000 	mov	r3, #0
   28018:	e58dc010 	str	ip, [sp, #16]
   2801c:	e1cd31b6 	strh	r3, [sp, #22]
   28020:	e58d3018 	str	r3, [sp, #24]
   28024:	eb0003c9 	bl	28f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   28028:	e594c008 	ldr	ip, [r4, #8]
   2802c:	e1cd01b8 	strh	r0, [sp, #24]
   28030:	e35c0000 	cmp	ip, #0
   28034:	0a00000f 	beq	28078 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb8>
   28038:	e3a0e006 	mov	lr, #6
   2803c:	e3a03014 	mov	r3, #20
   28040:	e28d2008 	add	r2, sp, #8
   28044:	e284100c 	add	r1, r4, #12
   28048:	e1a0000c 	mov	r0, ip
   2804c:	e58de000 	str	lr, [sp]
   28050:	ebffe8c3 	bl	22364 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   28054:	e28ddd19 	add	sp, sp, #1600	; 0x640
   28058:	e28dd008 	add	sp, sp, #8
   2805c:	e8bd8010 	pop	{r4, pc}
   28060:	e3011654 	movw	r1, #5716	; 0x1654
   28064:	e3401004 	movt	r1, #4
   28068:	e3010664 	movw	r0, #5732	; 0x1664
   2806c:	e3400004 	movt	r0, #4
   28070:	e3a020a1 	mov	r2, #161	; 0xa1
   28074:	eb001211 	bl	2c8c0 <assertion_failed>
   28078:	e3011654 	movw	r1, #5716	; 0x1654
   2807c:	e3401004 	movt	r1, #4
   28080:	e3000c38 	movw	r0, #3128	; 0xc38
   28084:	e3400004 	movt	r0, #4
   28088:	e3a020c7 	mov	r2, #199	; 0xc7
   2808c:	eb00120b 	bl	2c8c0 <assertion_failed>

00028090 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   28090:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28094:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   28098:	e35c0006 	cmp	ip, #6
   2809c:	1a00003e 	bne	2819c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10c>
   280a0:	e1a05002 	mov	r5, r2
   280a4:	e3520013 	cmp	r2, #19
   280a8:	9a00003d 	bls	281a4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x114>
   280ac:	e1a06001 	mov	r6, r1
   280b0:	e3510000 	cmp	r1, #0
   280b4:	0a00003c 	beq	281ac <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x11c>
   280b8:	e1a04003 	mov	r4, r3
   280bc:	e1d130b2 	ldrh	r3, [r1, #2]
   280c0:	e1a07000 	mov	r7, r0
   280c4:	e6bf2fb3 	rev16	r2, r3
   280c8:	e1c021b6 	strh	r2, [r0, #22]
   280cc:	e6ff3073 	uxth	r3, r3
   280d0:	e3530000 	cmp	r3, #0
   280d4:	0a000032 	beq	281a4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x114>
   280d8:	e5900004 	ldr	r0, [r0, #4]
   280dc:	e3500000 	cmp	r0, #0
   280e0:	0a000037 	beq	281c4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   280e4:	eb0000f0 	bl	284ac <CNetConfig::GetIPAddress() const>
   280e8:	eb00020d 	bl	28924 <CIPAddress::IsNull() const>
   280ec:	e3500000 	cmp	r0, #0
   280f0:	1a000029 	bne	2819c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10c>
   280f4:	e287801c 	add	r8, r7, #28
   280f8:	e5970004 	ldr	r0, [r7, #4]
   280fc:	eb0000ea 	bl	284ac <CNetConfig::GetIPAddress() const>
   28100:	e1a01000 	mov	r1, r0
   28104:	e1a00008 	mov	r0, r8
   28108:	eb000361 	bl	28e94 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   2810c:	e1a01004 	mov	r1, r4
   28110:	e1a00008 	mov	r0, r8
   28114:	eb000362 	bl	28ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   28118:	e1a02005 	mov	r2, r5
   2811c:	e1a01006 	mov	r1, r6
   28120:	e1a00008 	mov	r0, r8
   28124:	eb000389 	bl	28f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   28128:	e3500000 	cmp	r0, #0
   2812c:	1a00001a 	bne	2819c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10c>
   28130:	e1d680bc 	ldrh	r8, [r6, #12]
   28134:	e1a01004 	mov	r1, r4
   28138:	e287000c 	add	r0, r7, #12
   2813c:	e5969004 	ldr	r9, [r6, #4]
   28140:	e3180c02 	tst	r8, #512	; 0x200
   28144:	e596a008 	ldr	sl, [r6, #8]
   28148:	e7e33258 	ubfx	r3, r8, #4, #4
   2814c:	e0455103 	sub	r5, r5, r3, lsl #2
   28150:	12855001 	addne	r5, r5, #1
   28154:	e3180c01 	tst	r8, #256	; 0x100
   28158:	12855001 	addne	r5, r5, #1
   2815c:	eb0001ac 	bl	28814 <CIPAddress::Set(CIPAddress const&)>
   28160:	e1d630b0 	ldrh	r3, [r6]
   28164:	e6bf3fb3 	rev16	r3, r3
   28168:	e1c731b4 	strh	r3, [r7, #20]
   2816c:	e2183b01 	ands	r3, r8, #1024	; 0x400
   28170:	1a000007 	bne	28194 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x104>
   28174:	e2182a01 	ands	r2, r8, #4096	; 0x1000
   28178:	e1a00007 	mov	r0, r7
   2817c:	06bf3f39 	reveq	r3, r9
   28180:	03a01b05 	moveq	r1, #5120	; 0x1400
   28184:	00853003 	addeq	r3, r5, r3
   28188:	16bf2f3a 	revne	r2, sl
   2818c:	13a01b01 	movne	r1, #1024	; 0x400
   28190:	ebffff8a 	bl	27fc0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   28194:	e3a00001 	mov	r0, #1
   28198:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2819c:	e3a00000 	mov	r0, #0
   281a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   281a4:	e3e00000 	mvn	r0, #0
   281a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   281ac:	e3011654 	movw	r1, #5716	; 0x1654
   281b0:	e3401004 	movt	r1, #4
   281b4:	e3000ce0 	movw	r0, #3296	; 0xce0
   281b8:	e3400004 	movt	r0, #4
   281bc:	e3a02052 	mov	r2, #82	; 0x52
   281c0:	eb0011be 	bl	2c8c0 <assertion_failed>
   281c4:	e3011654 	movw	r1, #5716	; 0x1654
   281c8:	e3401004 	movt	r1, #4
   281cc:	e3000b08 	movw	r0, #2824	; 0xb08
   281d0:	e3400004 	movt	r0, #4
   281d4:	e3a0205b 	mov	r2, #91	; 0x5b
   281d8:	eb0011b8 	bl	2c8c0 <assertion_failed>

000281dc <CNetConfig::CNetConfig()>:
   281dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   281e0:	e1a06000 	mov	r6, r0
   281e4:	e3a03001 	mov	r3, #1
   281e8:	e24dd008 	sub	sp, sp, #8
   281ec:	e1a04000 	mov	r4, r0
   281f0:	e4c63004 	strb	r3, [r6], #4
   281f4:	e280700c 	add	r7, r0, #12
   281f8:	e284a014 	add	sl, r4, #20
   281fc:	e284901c 	add	r9, r4, #28
   28200:	e1a00006 	mov	r0, r6
   28204:	e2848024 	add	r8, r4, #36	; 0x24
   28208:	eb0000c3 	bl	2851c <CIPAddress::CIPAddress()>
   2820c:	e1a00007 	mov	r0, r7
   28210:	eb0000c1 	bl	2851c <CIPAddress::CIPAddress()>
   28214:	e1a0000a 	mov	r0, sl
   28218:	eb0000bf 	bl	2851c <CIPAddress::CIPAddress()>
   2821c:	e1a00009 	mov	r0, r9
   28220:	eb0000bd 	bl	2851c <CIPAddress::CIPAddress()>
   28224:	e30156c4 	movw	r5, #5828	; 0x16c4
   28228:	e3405004 	movt	r5, #4
   2822c:	e1a00008 	mov	r0, r8
   28230:	eb0000b9 	bl	2851c <CIPAddress::CIPAddress()>
   28234:	e1a01005 	mov	r1, r5
   28238:	e1a00006 	mov	r0, r6
   2823c:	eb000164 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   28240:	e1a01005 	mov	r1, r5
   28244:	e1a00007 	mov	r0, r7
   28248:	eb000161 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   2824c:	e1a01005 	mov	r1, r5
   28250:	e1a0000a 	mov	r0, sl
   28254:	eb00015e 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   28258:	e1a01005 	mov	r1, r5
   2825c:	e1a00009 	mov	r0, r9
   28260:	eb00015b 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   28264:	e1a0100d 	mov	r1, sp
   28268:	e1a00006 	mov	r0, r6
   2826c:	eb000194 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28270:	e28d1004 	add	r1, sp, #4
   28274:	e1a00007 	mov	r0, r7
   28278:	eb000191 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   2827c:	e1a00008 	mov	r0, r8
   28280:	e89d000a 	ldm	sp, {r1, r3}
   28284:	e1e03003 	mvn	r3, r3
   28288:	e1831001 	orr	r1, r3, r1
   2828c:	eb00014c 	bl	287c4 <CIPAddress::Set(unsigned int)>
   28290:	e1a00004 	mov	r0, r4
   28294:	e28dd008 	add	sp, sp, #8
   28298:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002829c <CNetConfig::~CNetConfig()>:
   2829c:	e92d4010 	push	{r4, lr}
   282a0:	e1a04000 	mov	r4, r0
   282a4:	e2800024 	add	r0, r0, #36	; 0x24
   282a8:	eb0000c2 	bl	285b8 <CIPAddress::~CIPAddress()>
   282ac:	e284001c 	add	r0, r4, #28
   282b0:	eb0000c0 	bl	285b8 <CIPAddress::~CIPAddress()>
   282b4:	e2840014 	add	r0, r4, #20
   282b8:	eb0000be 	bl	285b8 <CIPAddress::~CIPAddress()>
   282bc:	e284000c 	add	r0, r4, #12
   282c0:	eb0000bc 	bl	285b8 <CIPAddress::~CIPAddress()>
   282c4:	e2840004 	add	r0, r4, #4
   282c8:	eb0000ba 	bl	285b8 <CIPAddress::~CIPAddress()>
   282cc:	e1a00004 	mov	r0, r4
   282d0:	e8bd8010 	pop	{r4, pc}

000282d4 <CNetConfig::Reset()>:
   282d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   282d8:	e1a04000 	mov	r4, r0
   282dc:	e2807004 	add	r7, r0, #4
   282e0:	e30156c4 	movw	r5, #5828	; 0x16c4
   282e4:	e3405004 	movt	r5, #4
   282e8:	e24dd00c 	sub	sp, sp, #12
   282ec:	e1a01005 	mov	r1, r5
   282f0:	e1a00007 	mov	r0, r7
   282f4:	e284600c 	add	r6, r4, #12
   282f8:	eb000135 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   282fc:	e1a01005 	mov	r1, r5
   28300:	e1a00006 	mov	r0, r6
   28304:	eb000132 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   28308:	e1a01005 	mov	r1, r5
   2830c:	e2840014 	add	r0, r4, #20
   28310:	eb00012f 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   28314:	e1a01005 	mov	r1, r5
   28318:	e284001c 	add	r0, r4, #28
   2831c:	eb00012c 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   28320:	e1a0100d 	mov	r1, sp
   28324:	e1a00007 	mov	r0, r7
   28328:	eb000165 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   2832c:	e28d1004 	add	r1, sp, #4
   28330:	e1a00006 	mov	r0, r6
   28334:	eb000162 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28338:	e2840024 	add	r0, r4, #36	; 0x24
   2833c:	e89d000a 	ldm	sp, {r1, r3}
   28340:	e1e03003 	mvn	r3, r3
   28344:	e1831001 	orr	r1, r3, r1
   28348:	eb00011d 	bl	287c4 <CIPAddress::Set(unsigned int)>
   2834c:	e28dd00c 	add	sp, sp, #12
   28350:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00028354 <CNetConfig::SetDHCP(bool)>:
   28354:	e5c01000 	strb	r1, [r0]
   28358:	e12fff1e 	bx	lr

0002835c <CNetConfig::SetIPAddress(unsigned int)>:
   2835c:	e92d4030 	push	{r4, r5, lr}
   28360:	e2805004 	add	r5, r0, #4
   28364:	e1a04000 	mov	r4, r0
   28368:	e24dd00c 	sub	sp, sp, #12
   2836c:	e1a00005 	mov	r0, r5
   28370:	eb000113 	bl	287c4 <CIPAddress::Set(unsigned int)>
   28374:	e1a0100d 	mov	r1, sp
   28378:	e1a00005 	mov	r0, r5
   2837c:	eb000150 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28380:	e28d1004 	add	r1, sp, #4
   28384:	e284000c 	add	r0, r4, #12
   28388:	eb00014d 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   2838c:	e2840024 	add	r0, r4, #36	; 0x24
   28390:	e89d000a 	ldm	sp, {r1, r3}
   28394:	e1e03003 	mvn	r3, r3
   28398:	e1831001 	orr	r1, r3, r1
   2839c:	eb000108 	bl	287c4 <CIPAddress::Set(unsigned int)>
   283a0:	e28dd00c 	add	sp, sp, #12
   283a4:	e8bd8030 	pop	{r4, r5, pc}

000283a8 <CNetConfig::SetNetMask(unsigned int)>:
   283a8:	e92d4030 	push	{r4, r5, lr}
   283ac:	e280500c 	add	r5, r0, #12
   283b0:	e1a04000 	mov	r4, r0
   283b4:	e24dd00c 	sub	sp, sp, #12
   283b8:	e1a00005 	mov	r0, r5
   283bc:	eb000100 	bl	287c4 <CIPAddress::Set(unsigned int)>
   283c0:	e1a0100d 	mov	r1, sp
   283c4:	e2840004 	add	r0, r4, #4
   283c8:	eb00013d 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   283cc:	e28d1004 	add	r1, sp, #4
   283d0:	e1a00005 	mov	r0, r5
   283d4:	eb00013a 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   283d8:	e2840024 	add	r0, r4, #36	; 0x24
   283dc:	e89d000a 	ldm	sp, {r1, r3}
   283e0:	e1e03003 	mvn	r3, r3
   283e4:	e1831001 	orr	r1, r3, r1
   283e8:	eb0000f5 	bl	287c4 <CIPAddress::Set(unsigned int)>
   283ec:	e28dd00c 	add	sp, sp, #12
   283f0:	e8bd8030 	pop	{r4, r5, pc}

000283f4 <CNetConfig::SetDefaultGateway(unsigned int)>:
   283f4:	e2800014 	add	r0, r0, #20
   283f8:	ea0000f1 	b	287c4 <CIPAddress::Set(unsigned int)>

000283fc <CNetConfig::SetDNSServer(unsigned int)>:
   283fc:	e280001c 	add	r0, r0, #28
   28400:	ea0000ef 	b	287c4 <CIPAddress::Set(unsigned int)>

00028404 <CNetConfig::SetIPAddress(unsigned char const*)>:
   28404:	e92d4030 	push	{r4, r5, lr}
   28408:	e2805004 	add	r5, r0, #4
   2840c:	e1a04000 	mov	r4, r0
   28410:	e24dd00c 	sub	sp, sp, #12
   28414:	e1a00005 	mov	r0, r5
   28418:	eb0000ed 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   2841c:	e1a0100d 	mov	r1, sp
   28420:	e1a00005 	mov	r0, r5
   28424:	eb000126 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28428:	e28d1004 	add	r1, sp, #4
   2842c:	e284000c 	add	r0, r4, #12
   28430:	eb000123 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28434:	e2840024 	add	r0, r4, #36	; 0x24
   28438:	e89d000a 	ldm	sp, {r1, r3}
   2843c:	e1e03003 	mvn	r3, r3
   28440:	e1831001 	orr	r1, r3, r1
   28444:	eb0000de 	bl	287c4 <CIPAddress::Set(unsigned int)>
   28448:	e28dd00c 	add	sp, sp, #12
   2844c:	e8bd8030 	pop	{r4, r5, pc}

00028450 <CNetConfig::SetNetMask(unsigned char const*)>:
   28450:	e92d4030 	push	{r4, r5, lr}
   28454:	e280500c 	add	r5, r0, #12
   28458:	e1a04000 	mov	r4, r0
   2845c:	e24dd00c 	sub	sp, sp, #12
   28460:	e1a00005 	mov	r0, r5
   28464:	eb0000da 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   28468:	e1a0100d 	mov	r1, sp
   2846c:	e2840004 	add	r0, r4, #4
   28470:	eb000113 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28474:	e28d1004 	add	r1, sp, #4
   28478:	e1a00005 	mov	r0, r5
   2847c:	eb000110 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28480:	e2840024 	add	r0, r4, #36	; 0x24
   28484:	e89d000a 	ldm	sp, {r1, r3}
   28488:	e1e03003 	mvn	r3, r3
   2848c:	e1831001 	orr	r1, r3, r1
   28490:	eb0000cb 	bl	287c4 <CIPAddress::Set(unsigned int)>
   28494:	e28dd00c 	add	sp, sp, #12
   28498:	e8bd8030 	pop	{r4, r5, pc}

0002849c <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   2849c:	e2800014 	add	r0, r0, #20
   284a0:	ea0000cb 	b	287d4 <CIPAddress::Set(unsigned char const*)>

000284a4 <CNetConfig::SetDNSServer(unsigned char const*)>:
   284a4:	e280001c 	add	r0, r0, #28
   284a8:	ea0000c9 	b	287d4 <CIPAddress::Set(unsigned char const*)>

000284ac <CNetConfig::GetIPAddress() const>:
   284ac:	e2800004 	add	r0, r0, #4
   284b0:	e12fff1e 	bx	lr

000284b4 <CNetConfig::IsDHCPUsed() const>:
   284b4:	e5d00000 	ldrb	r0, [r0]
   284b8:	e12fff1e 	bx	lr

000284bc <CNetConfig::GetNetMask() const>:
   284bc:	e280000c 	add	r0, r0, #12
   284c0:	ea0000f3 	b	28894 <CIPAddress::Get() const>

000284c4 <CNetConfig::GetDefaultGateway() const>:
   284c4:	e2800014 	add	r0, r0, #20
   284c8:	e12fff1e 	bx	lr

000284cc <CNetConfig::GetDNSServer() const>:
   284cc:	e280001c 	add	r0, r0, #28
   284d0:	e12fff1e 	bx	lr

000284d4 <CNetConfig::GetBroadcastAddress() const>:
   284d4:	e2800024 	add	r0, r0, #36	; 0x24
   284d8:	e12fff1e 	bx	lr

000284dc <CNetConfig::UpdateBroadcastAddress()>:
   284dc:	e92d4010 	push	{r4, lr}
   284e0:	e1a04000 	mov	r4, r0
   284e4:	e2800004 	add	r0, r0, #4
   284e8:	e24dd008 	sub	sp, sp, #8
   284ec:	e1a0100d 	mov	r1, sp
   284f0:	eb0000f3 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   284f4:	e28d1004 	add	r1, sp, #4
   284f8:	e284000c 	add	r0, r4, #12
   284fc:	eb0000f0 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28500:	e2840024 	add	r0, r4, #36	; 0x24
   28504:	e89d000a 	ldm	sp, {r1, r3}
   28508:	e1e03003 	mvn	r3, r3
   2850c:	e1831001 	orr	r1, r3, r1
   28510:	eb0000ab 	bl	287c4 <CIPAddress::Set(unsigned int)>
   28514:	e28dd008 	add	sp, sp, #8
   28518:	e8bd8010 	pop	{r4, pc}

0002851c <CIPAddress::CIPAddress()>:
   2851c:	e3a02000 	mov	r2, #0
   28520:	e5c02000 	strb	r2, [r0]
   28524:	e12fff1e 	bx	lr

00028528 <CIPAddress::CIPAddress(unsigned int)>:
   28528:	e3a02001 	mov	r2, #1
   2852c:	e5801004 	str	r1, [r0, #4]
   28530:	e5c02000 	strb	r2, [r0]
   28534:	e12fff1e 	bx	lr

00028538 <CIPAddress::CIPAddress(unsigned char const*)>:
   28538:	e3510000 	cmp	r1, #0
   2853c:	e92d4010 	push	{r4, lr}
   28540:	0a000007 	beq	28564 <CIPAddress::CIPAddress(unsigned char const*)+0x2c>
   28544:	e1a04000 	mov	r4, r0
   28548:	e3a02004 	mov	r2, #4
   2854c:	e0800002 	add	r0, r0, r2
   28550:	eb0037c8 	bl	36478 <memcpy>
   28554:	e3a03001 	mov	r3, #1
   28558:	e1a00004 	mov	r0, r4
   2855c:	e5c43000 	strb	r3, [r4]
   28560:	e8bd8010 	pop	{r4, pc}
   28564:	e30116c8 	movw	r1, #5832	; 0x16c8
   28568:	e3401004 	movt	r1, #4
   2856c:	e30106d8 	movw	r0, #5848	; 0x16d8
   28570:	e3400004 	movt	r0, #4
   28574:	e3a02075 	mov	r2, #117	; 0x75
   28578:	eb0010d0 	bl	2c8c0 <assertion_failed>

0002857c <CIPAddress::CIPAddress(CIPAddress const&)>:
   2857c:	e5d12000 	ldrb	r2, [r1]
   28580:	e3520000 	cmp	r2, #0
   28584:	0a000004 	beq	2859c <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   28588:	e5911004 	ldr	r1, [r1, #4]
   2858c:	e3a02001 	mov	r2, #1
   28590:	e5801004 	str	r1, [r0, #4]
   28594:	e5c02000 	strb	r2, [r0]
   28598:	e12fff1e 	bx	lr
   2859c:	e30116c8 	movw	r1, #5832	; 0x16c8
   285a0:	e3401004 	movt	r1, #4
   285a4:	e30106e8 	movw	r0, #5864	; 0x16e8
   285a8:	e3400004 	movt	r0, #4
   285ac:	e3a0202e 	mov	r2, #46	; 0x2e
   285b0:	e92d4010 	push	{r4, lr}
   285b4:	eb0010c1 	bl	2c8c0 <assertion_failed>

000285b8 <CIPAddress::~CIPAddress()>:
   285b8:	e12fff1e 	bx	lr

000285bc <CIPAddress::operator==(CIPAddress const&) const>:
   285bc:	e5d03000 	ldrb	r3, [r0]
   285c0:	e92d4010 	push	{r4, lr}
   285c4:	e3530000 	cmp	r3, #0
   285c8:	0a000008 	beq	285f0 <CIPAddress::operator==(CIPAddress const&) const+0x34>
   285cc:	e5d13000 	ldrb	r3, [r1]
   285d0:	e3530000 	cmp	r3, #0
   285d4:	0a00000b 	beq	28608 <CIPAddress::operator==(CIPAddress const&) const+0x4c>
   285d8:	e5900004 	ldr	r0, [r0, #4]
   285dc:	e5913004 	ldr	r3, [r1, #4]
   285e0:	e0400003 	sub	r0, r0, r3
   285e4:	e16f0f10 	clz	r0, r0
   285e8:	e1a002a0 	lsr	r0, r0, #5
   285ec:	e8bd8010 	pop	{r4, pc}
   285f0:	e30116c8 	movw	r1, #5832	; 0x16c8
   285f4:	e3401004 	movt	r1, #4
   285f8:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   285fc:	e3400003 	movt	r0, #3
   28600:	e3a0203e 	mov	r2, #62	; 0x3e
   28604:	eb0010ad 	bl	2c8c0 <assertion_failed>
   28608:	e30116c8 	movw	r1, #5832	; 0x16c8
   2860c:	e3401004 	movt	r1, #4
   28610:	e30106fc 	movw	r0, #5884	; 0x16fc
   28614:	e3400004 	movt	r0, #4
   28618:	e3a0203f 	mov	r2, #63	; 0x3f
   2861c:	eb0010a7 	bl	2c8c0 <assertion_failed>

00028620 <CIPAddress::operator!=(CIPAddress const&) const>:
   28620:	e5d03000 	ldrb	r3, [r0]
   28624:	e92d4010 	push	{r4, lr}
   28628:	e3530000 	cmp	r3, #0
   2862c:	0a000007 	beq	28650 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   28630:	e5d13000 	ldrb	r3, [r1]
   28634:	e3530000 	cmp	r3, #0
   28638:	0a00000a 	beq	28668 <CIPAddress::operator!=(CIPAddress const&) const+0x48>
   2863c:	e5900004 	ldr	r0, [r0, #4]
   28640:	e5913004 	ldr	r3, [r1, #4]
   28644:	e0500003 	subs	r0, r0, r3
   28648:	13a00001 	movne	r0, #1
   2864c:	e8bd8010 	pop	{r4, pc}
   28650:	e30116c8 	movw	r1, #5832	; 0x16c8
   28654:	e3401004 	movt	r1, #4
   28658:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   2865c:	e3400003 	movt	r0, #3
   28660:	e3a02045 	mov	r2, #69	; 0x45
   28664:	eb001095 	bl	2c8c0 <assertion_failed>
   28668:	e30116c8 	movw	r1, #5832	; 0x16c8
   2866c:	e3401004 	movt	r1, #4
   28670:	e30106fc 	movw	r0, #5884	; 0x16fc
   28674:	e3400004 	movt	r0, #4
   28678:	e3a02046 	mov	r2, #70	; 0x46
   2867c:	eb00108f 	bl	2c8c0 <assertion_failed>

00028680 <CIPAddress::operator==(unsigned char const*) const>:
   28680:	e5d02000 	ldrb	r2, [r0]
   28684:	e92d4010 	push	{r4, lr}
   28688:	e3520000 	cmp	r2, #0
   2868c:	0a000007 	beq	286b0 <CIPAddress::operator==(unsigned char const*) const+0x30>
   28690:	e3510000 	cmp	r1, #0
   28694:	0a00000b 	beq	286c8 <CIPAddress::operator==(unsigned char const*) const+0x48>
   28698:	e3a02004 	mov	r2, #4
   2869c:	e0800002 	add	r0, r0, r2
   286a0:	eb003557 	bl	35c04 <memcmp>
   286a4:	e16f0f10 	clz	r0, r0
   286a8:	e1a002a0 	lsr	r0, r0, #5
   286ac:	e8bd8010 	pop	{r4, pc}
   286b0:	e30116c8 	movw	r1, #5832	; 0x16c8
   286b4:	e3401004 	movt	r1, #4
   286b8:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   286bc:	e3400003 	movt	r0, #3
   286c0:	e3a0204c 	mov	r2, #76	; 0x4c
   286c4:	eb00107d 	bl	2c8c0 <assertion_failed>
   286c8:	e30116c8 	movw	r1, #5832	; 0x16c8
   286cc:	e3401004 	movt	r1, #4
   286d0:	e3010710 	movw	r0, #5904	; 0x1710
   286d4:	e3400004 	movt	r0, #4
   286d8:	e3a0204d 	mov	r2, #77	; 0x4d
   286dc:	eb001077 	bl	2c8c0 <assertion_failed>

000286e0 <CIPAddress::operator!=(unsigned char const*) const>:
   286e0:	e5d02000 	ldrb	r2, [r0]
   286e4:	e92d4010 	push	{r4, lr}
   286e8:	e3520000 	cmp	r2, #0
   286ec:	0a000007 	beq	28710 <CIPAddress::operator!=(unsigned char const*) const+0x30>
   286f0:	e3510000 	cmp	r1, #0
   286f4:	0a00000b 	beq	28728 <CIPAddress::operator!=(unsigned char const*) const+0x48>
   286f8:	e3a02004 	mov	r2, #4
   286fc:	e0800002 	add	r0, r0, r2
   28700:	eb00353f 	bl	35c04 <memcmp>
   28704:	e2500000 	subs	r0, r0, #0
   28708:	13a00001 	movne	r0, #1
   2870c:	e8bd8010 	pop	{r4, pc}
   28710:	e30116c8 	movw	r1, #5832	; 0x16c8
   28714:	e3401004 	movt	r1, #4
   28718:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   2871c:	e3400003 	movt	r0, #3
   28720:	e3a0204c 	mov	r2, #76	; 0x4c
   28724:	eb001065 	bl	2c8c0 <assertion_failed>
   28728:	e30116c8 	movw	r1, #5832	; 0x16c8
   2872c:	e3401004 	movt	r1, #4
   28730:	e3010710 	movw	r0, #5904	; 0x1710
   28734:	e3400004 	movt	r0, #4
   28738:	e3a0204d 	mov	r2, #77	; 0x4d
   2873c:	eb00105f 	bl	2c8c0 <assertion_failed>

00028740 <CIPAddress::operator==(unsigned int) const>:
   28740:	e5d03000 	ldrb	r3, [r0]
   28744:	e3530000 	cmp	r3, #0
   28748:	0a000004 	beq	28760 <CIPAddress::operator==(unsigned int) const+0x20>
   2874c:	e5900004 	ldr	r0, [r0, #4]
   28750:	e0400001 	sub	r0, r0, r1
   28754:	e16f0f10 	clz	r0, r0
   28758:	e1a002a0 	lsr	r0, r0, #5
   2875c:	e12fff1e 	bx	lr
   28760:	e30116c8 	movw	r1, #5832	; 0x16c8
   28764:	e3401004 	movt	r1, #4
   28768:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   2876c:	e3400003 	movt	r0, #3
   28770:	e3a02058 	mov	r2, #88	; 0x58
   28774:	e92d4010 	push	{r4, lr}
   28778:	eb001050 	bl	2c8c0 <assertion_failed>

0002877c <CIPAddress::operator!=(unsigned int) const>:
   2877c:	e5d03000 	ldrb	r3, [r0]
   28780:	e3530000 	cmp	r3, #0
   28784:	0a000003 	beq	28798 <CIPAddress::operator!=(unsigned int) const+0x1c>
   28788:	e5900004 	ldr	r0, [r0, #4]
   2878c:	e0500001 	subs	r0, r0, r1
   28790:	13a00001 	movne	r0, #1
   28794:	e12fff1e 	bx	lr
   28798:	e30116c8 	movw	r1, #5832	; 0x16c8
   2879c:	e3401004 	movt	r1, #4
   287a0:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   287a4:	e3400003 	movt	r0, #3
   287a8:	e3a0205e 	mov	r2, #94	; 0x5e
   287ac:	e92d4010 	push	{r4, lr}
   287b0:	eb001042 	bl	2c8c0 <assertion_failed>

000287b4 <CIPAddress::operator=(unsigned int)>:
   287b4:	e3a02001 	mov	r2, #1
   287b8:	e5801004 	str	r1, [r0, #4]
   287bc:	e5c02000 	strb	r2, [r0]
   287c0:	e12fff1e 	bx	lr

000287c4 <CIPAddress::Set(unsigned int)>:
   287c4:	e3a03001 	mov	r3, #1
   287c8:	e5801004 	str	r1, [r0, #4]
   287cc:	e5c03000 	strb	r3, [r0]
   287d0:	e12fff1e 	bx	lr

000287d4 <CIPAddress::Set(unsigned char const*)>:
   287d4:	e3510000 	cmp	r1, #0
   287d8:	e92d4010 	push	{r4, lr}
   287dc:	0a000006 	beq	287fc <CIPAddress::Set(unsigned char const*)+0x28>
   287e0:	e1a04000 	mov	r4, r0
   287e4:	e3a02004 	mov	r2, #4
   287e8:	e0800002 	add	r0, r0, r2
   287ec:	eb003721 	bl	36478 <memcpy>
   287f0:	e3a03001 	mov	r3, #1
   287f4:	e5c43000 	strb	r3, [r4]
   287f8:	e8bd8010 	pop	{r4, pc}
   287fc:	e30116c8 	movw	r1, #5832	; 0x16c8
   28800:	e3401004 	movt	r1, #4
   28804:	e30106d8 	movw	r0, #5848	; 0x16d8
   28808:	e3400004 	movt	r0, #4
   2880c:	e3a02075 	mov	r2, #117	; 0x75
   28810:	eb00102a 	bl	2c8c0 <assertion_failed>

00028814 <CIPAddress::Set(CIPAddress const&)>:
   28814:	e5d13000 	ldrb	r3, [r1]
   28818:	e3530000 	cmp	r3, #0
   2881c:	0a000004 	beq	28834 <CIPAddress::Set(CIPAddress const&)+0x20>
   28820:	e5912004 	ldr	r2, [r1, #4]
   28824:	e3a03001 	mov	r3, #1
   28828:	e5802004 	str	r2, [r0, #4]
   2882c:	e5c03000 	strb	r3, [r0]
   28830:	e12fff1e 	bx	lr
   28834:	e30116c8 	movw	r1, #5832	; 0x16c8
   28838:	e3401004 	movt	r1, #4
   2883c:	e30106e8 	movw	r0, #5864	; 0x16e8
   28840:	e3400004 	movt	r0, #4
   28844:	e3a0207e 	mov	r2, #126	; 0x7e
   28848:	e92d4010 	push	{r4, lr}
   2884c:	eb00101b 	bl	2c8c0 <assertion_failed>

00028850 <CIPAddress::SetBroadcast()>:
   28850:	e3a02001 	mov	r2, #1
   28854:	e3e03000 	mvn	r3, #0
   28858:	e5c02000 	strb	r2, [r0]
   2885c:	e5803004 	str	r3, [r0, #4]
   28860:	e12fff1e 	bx	lr

00028864 <CIPAddress::operator unsigned int() const>:
   28864:	e5d03000 	ldrb	r3, [r0]
   28868:	e3530000 	cmp	r3, #0
   2886c:	0a000001 	beq	28878 <CIPAddress::operator unsigned int() const+0x14>
   28870:	e5900004 	ldr	r0, [r0, #4]
   28874:	e12fff1e 	bx	lr
   28878:	e30116c8 	movw	r1, #5832	; 0x16c8
   2887c:	e3401004 	movt	r1, #4
   28880:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   28884:	e3400003 	movt	r0, #3
   28888:	e3a0208f 	mov	r2, #143	; 0x8f
   2888c:	e92d4010 	push	{r4, lr}
   28890:	eb00100a 	bl	2c8c0 <assertion_failed>

00028894 <CIPAddress::Get() const>:
   28894:	e5d03000 	ldrb	r3, [r0]
   28898:	e3530000 	cmp	r3, #0
   2889c:	0a000001 	beq	288a8 <CIPAddress::Get() const+0x14>
   288a0:	e2800004 	add	r0, r0, #4
   288a4:	e12fff1e 	bx	lr
   288a8:	e30116c8 	movw	r1, #5832	; 0x16c8
   288ac:	e3401004 	movt	r1, #4
   288b0:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   288b4:	e3400003 	movt	r0, #3
   288b8:	e3a02095 	mov	r2, #149	; 0x95
   288bc:	e92d4010 	push	{r4, lr}
   288c0:	eb000ffe 	bl	2c8c0 <assertion_failed>

000288c4 <CIPAddress::CopyTo(unsigned char*) const>:
   288c4:	e5d02000 	ldrb	r2, [r0]
   288c8:	e1a03000 	mov	r3, r0
   288cc:	e92d4010 	push	{r4, lr}
   288d0:	e3520000 	cmp	r2, #0
   288d4:	0a000006 	beq	288f4 <CIPAddress::CopyTo(unsigned char*) const+0x30>
   288d8:	e1a00001 	mov	r0, r1
   288dc:	e3510000 	cmp	r1, #0
   288e0:	0a000009 	beq	2890c <CIPAddress::CopyTo(unsigned char*) const+0x48>
   288e4:	e3a02004 	mov	r2, #4
   288e8:	e8bd4010 	pop	{r4, lr}
   288ec:	e0831002 	add	r1, r3, r2
   288f0:	ea0036e0 	b	36478 <memcpy>
   288f4:	e30116c8 	movw	r1, #5832	; 0x16c8
   288f8:	e3401004 	movt	r1, #4
   288fc:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   28900:	e3400003 	movt	r0, #3
   28904:	e3a0209b 	mov	r2, #155	; 0x9b
   28908:	eb000fec 	bl	2c8c0 <assertion_failed>
   2890c:	e30116c8 	movw	r1, #5832	; 0x16c8
   28910:	e3401004 	movt	r1, #4
   28914:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   28918:	e3400003 	movt	r0, #3
   2891c:	e3a0209c 	mov	r2, #156	; 0x9c
   28920:	eb000fe6 	bl	2c8c0 <assertion_failed>

00028924 <CIPAddress::IsNull() const>:
   28924:	e5d03000 	ldrb	r3, [r0]
   28928:	e3530000 	cmp	r3, #0
   2892c:	0a000003 	beq	28940 <CIPAddress::IsNull() const+0x1c>
   28930:	e5900004 	ldr	r0, [r0, #4]
   28934:	e16f0f10 	clz	r0, r0
   28938:	e1a002a0 	lsr	r0, r0, #5
   2893c:	e12fff1e 	bx	lr
   28940:	e30116c8 	movw	r1, #5832	; 0x16c8
   28944:	e3401004 	movt	r1, #4
   28948:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   2894c:	e3400003 	movt	r0, #3
   28950:	e3a020a2 	mov	r2, #162	; 0xa2
   28954:	e92d4010 	push	{r4, lr}
   28958:	eb000fd8 	bl	2c8c0 <assertion_failed>

0002895c <CIPAddress::IsBroadcast() const>:
   2895c:	e5d03000 	ldrb	r3, [r0]
   28960:	e3530000 	cmp	r3, #0
   28964:	0a000004 	beq	2897c <CIPAddress::IsBroadcast() const+0x20>
   28968:	e5900004 	ldr	r0, [r0, #4]
   2896c:	e3700001 	cmn	r0, #1
   28970:	13a00000 	movne	r0, #0
   28974:	03a00001 	moveq	r0, #1
   28978:	e12fff1e 	bx	lr
   2897c:	e30116c8 	movw	r1, #5832	; 0x16c8
   28980:	e3401004 	movt	r1, #4
   28984:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   28988:	e3400003 	movt	r0, #3
   2898c:	e3a020a8 	mov	r2, #168	; 0xa8
   28990:	e92d4010 	push	{r4, lr}
   28994:	eb000fc9 	bl	2c8c0 <assertion_failed>

00028998 <CIPAddress::GetSize() const>:
   28998:	e3a00004 	mov	r0, #4
   2899c:	e12fff1e 	bx	lr

000289a0 <CIPAddress::Format(CString*) const>:
   289a0:	e5d02000 	ldrb	r2, [r0]
   289a4:	e1a03000 	mov	r3, r0
   289a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   289ac:	e3520000 	cmp	r2, #0
   289b0:	e24dd00c 	sub	sp, sp, #12
   289b4:	0a00000d 	beq	289f0 <CIPAddress::Format(CString*) const+0x50>
   289b8:	e1a00001 	mov	r0, r1
   289bc:	e3510000 	cmp	r1, #0
   289c0:	0a000010 	beq	28a08 <CIPAddress::Format(CString*) const+0x68>
   289c4:	e5932004 	ldr	r2, [r3, #4]
   289c8:	e3011730 	movw	r1, #5936	; 0x1730
   289cc:	e3401004 	movt	r1, #4
   289d0:	e1a0cc22 	lsr	ip, r2, #24
   289d4:	e7e73852 	ubfx	r3, r2, #16, #8
   289d8:	e88d1008 	stm	sp, {r3, ip}
   289dc:	e7e73452 	ubfx	r3, r2, #8, #8
   289e0:	e6ef2072 	uxtb	r2, r2
   289e4:	eb0030a7 	bl	34c88 <CString::Format(char const*, ...)>
   289e8:	e28dd00c 	add	sp, sp, #12
   289ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   289f0:	e30116c8 	movw	r1, #5832	; 0x16c8
   289f4:	e3401004 	movt	r1, #4
   289f8:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   289fc:	e3400003 	movt	r0, #3
   28a00:	e3a020b3 	mov	r2, #179	; 0xb3
   28a04:	eb000fad 	bl	2c8c0 <assertion_failed>
   28a08:	e30116c8 	movw	r1, #5832	; 0x16c8
   28a0c:	e3401004 	movt	r1, #4
   28a10:	e3010720 	movw	r0, #5920	; 0x1720
   28a14:	e3400004 	movt	r0, #4
   28a18:	e3a020b4 	mov	r2, #180	; 0xb4
   28a1c:	eb000fa7 	bl	2c8c0 <assertion_failed>

00028a20 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   28a20:	e92d4030 	push	{r4, r5, lr}
   28a24:	e1a05000 	mov	r5, r0
   28a28:	e5d10000 	ldrb	r0, [r1]
   28a2c:	e24dd00c 	sub	sp, sp, #12
   28a30:	e1a04001 	mov	r4, r1
   28a34:	e3500000 	cmp	r0, #0
   28a38:	0a000014 	beq	28a90 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x70>
   28a3c:	e5913004 	ldr	r3, [r1, #4]
   28a40:	e3730001 	cmn	r3, #1
   28a44:	0a00000f 	beq	28a88 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x68>
   28a48:	e1a01002 	mov	r1, r2
   28a4c:	e3520000 	cmp	r2, #0
   28a50:	0a000014 	beq	28aa8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   28a54:	e3a02004 	mov	r2, #4
   28a58:	e08d0002 	add	r0, sp, r2
   28a5c:	eb003685 	bl	36478 <memcpy>
   28a60:	e5d53000 	ldrb	r3, [r5]
   28a64:	e3530000 	cmp	r3, #0
   28a68:	0a000014 	beq	28ac0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa0>
   28a6c:	e5953004 	ldr	r3, [r5, #4]
   28a70:	e5941004 	ldr	r1, [r4, #4]
   28a74:	e59d2004 	ldr	r2, [sp, #4]
   28a78:	e0233001 	eor	r3, r3, r1
   28a7c:	e1130002 	tst	r3, r2
   28a80:	03a00001 	moveq	r0, #1
   28a84:	13a00000 	movne	r0, #0
   28a88:	e28dd00c 	add	sp, sp, #12
   28a8c:	e8bd8030 	pop	{r4, r5, pc}
   28a90:	e30116c8 	movw	r1, #5832	; 0x16c8
   28a94:	e3401004 	movt	r1, #4
   28a98:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   28a9c:	e3400003 	movt	r0, #3
   28aa0:	e3a020a8 	mov	r2, #168	; 0xa8
   28aa4:	eb000f85 	bl	2c8c0 <assertion_failed>
   28aa8:	e30116c8 	movw	r1, #5832	; 0x16c8
   28aac:	e3401004 	movt	r1, #4
   28ab0:	e301073c 	movw	r0, #5948	; 0x173c
   28ab4:	e3400004 	movt	r0, #4
   28ab8:	e3a020c1 	mov	r2, #193	; 0xc1
   28abc:	eb000f7f 	bl	2c8c0 <assertion_failed>
   28ac0:	e30116c8 	movw	r1, #5832	; 0x16c8
   28ac4:	e3401004 	movt	r1, #4
   28ac8:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   28acc:	e3400003 	movt	r0, #3
   28ad0:	e3a020c5 	mov	r2, #197	; 0xc5
   28ad4:	eb000f79 	bl	2c8c0 <assertion_failed>

00028ad8 <CNetQueue::CNetQueue()>:
   28ad8:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   28adc:	e3a02000 	mov	r2, #0
   28ae0:	e5802008 	str	r2, [r0, #8]
   28ae4:	f440078f 	vst1.32	{d16}, [r0]
   28ae8:	e12fff1e 	bx	lr

00028aec <CNetQueue::IsEmpty() const>:
   28aec:	e5900000 	ldr	r0, [r0]
   28af0:	e16f0f10 	clz	r0, r0
   28af4:	e1a002a0 	lsr	r0, r0, #5
   28af8:	e12fff1e 	bx	lr

00028afc <CNetQueue::Flush()>:
   28afc:	e92d4070 	push	{r4, r5, r6, lr}
   28b00:	e5904000 	ldr	r4, [r0]
   28b04:	e3540000 	cmp	r4, #0
   28b08:	08bd8070 	popeq	{r4, r5, r6, pc}
   28b0c:	e1a05000 	mov	r5, r0
   28b10:	e3a06000 	mov	r6, #0
   28b14:	ea00000f 	b	28b58 <CNetQueue::Flush()+0x5c>
   28b18:	e3540000 	cmp	r4, #0
   28b1c:	0a000014 	beq	28b74 <CNetQueue::Flush()+0x78>
   28b20:	e5943004 	ldr	r3, [r4, #4]
   28b24:	e5853000 	str	r3, [r5]
   28b28:	e3530000 	cmp	r3, #0
   28b2c:	15836000 	strne	r6, [r3]
   28b30:	0a000017 	beq	28b94 <CNetQueue::Flush()+0x98>
   28b34:	e5953008 	ldr	r3, [r5, #8]
   28b38:	e3530000 	cmp	r3, #0
   28b3c:	1a000012 	bne	28b8c <CNetQueue::Flush()+0x90>
   28b40:	e1a00004 	mov	r0, r4
   28b44:	e3a01e65 	mov	r1, #1616	; 0x650
   28b48:	eb00386b 	bl	36cfc <operator delete(void*, unsigned int)>
   28b4c:	e5954000 	ldr	r4, [r5]
   28b50:	e3540000 	cmp	r4, #0
   28b54:	08bd8070 	popeq	{r4, r5, r6, pc}
   28b58:	e5950008 	ldr	r0, [r5, #8]
   28b5c:	e3500000 	cmp	r0, #0
   28b60:	0affffec 	beq	28b18 <CNetQueue::Flush()+0x1c>
   28b64:	eb003e64 	bl	384fc <EnterCritical>
   28b68:	e5954000 	ldr	r4, [r5]
   28b6c:	e3540000 	cmp	r4, #0
   28b70:	1affffea 	bne	28b20 <CNetQueue::Flush()+0x24>
   28b74:	e301174c 	movw	r1, #5964	; 0x174c
   28b78:	e3401004 	movt	r1, #4
   28b7c:	e30b0374 	movw	r0, #45940	; 0xb374
   28b80:	e3400003 	movt	r0, #3
   28b84:	e3a0203a 	mov	r2, #58	; 0x3a
   28b88:	eb000f4c 	bl	2c8c0 <assertion_failed>
   28b8c:	eb003e85 	bl	385a8 <LeaveCritical>
   28b90:	eaffffea 	b	28b40 <CNetQueue::Flush()+0x44>
   28b94:	e5952004 	ldr	r2, [r5, #4]
   28b98:	e1520004 	cmp	r2, r4
   28b9c:	05853004 	streq	r3, [r5, #4]
   28ba0:	0affffe3 	beq	28b34 <CNetQueue::Flush()+0x38>
   28ba4:	e301174c 	movw	r1, #5964	; 0x174c
   28ba8:	e3401004 	movt	r1, #4
   28bac:	e301075c 	movw	r0, #5980	; 0x175c
   28bb0:	e3400004 	movt	r0, #4
   28bb4:	e3a02043 	mov	r2, #67	; 0x43
   28bb8:	eb000f40 	bl	2c8c0 <assertion_failed>

00028bbc <CNetQueue::~CNetQueue()>:
   28bbc:	e92d4010 	push	{r4, lr}
   28bc0:	e1a04000 	mov	r4, r0
   28bc4:	ebffffcc 	bl	28afc <CNetQueue::Flush()>
   28bc8:	e1a00004 	mov	r0, r4
   28bcc:	e8bd8010 	pop	{r4, pc}

00028bd0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   28bd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28bd4:	e1a05002 	mov	r5, r2
   28bd8:	e1a08000 	mov	r8, r0
   28bdc:	e3a00e65 	mov	r0, #1616	; 0x650
   28be0:	e1a06001 	mov	r6, r1
   28be4:	e1a07003 	mov	r7, r3
   28be8:	eb00382b 	bl	36c9c <operator new(unsigned int)>
   28bec:	e3550000 	cmp	r5, #0
   28bf0:	0a000028 	beq	28c98 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc8>
   28bf4:	e3550d19 	cmp	r5, #1600	; 0x640
   28bf8:	8a00002c 	bhi	28cb0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   28bfc:	e1a04000 	mov	r4, r0
   28c00:	e3560000 	cmp	r6, #0
   28c04:	e5805008 	str	r5, [r0, #8]
   28c08:	0a00002e 	beq	28cc8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf8>
   28c0c:	e1a02005 	mov	r2, r5
   28c10:	e1a01006 	mov	r1, r6
   28c14:	e280000c 	add	r0, r0, #12
   28c18:	eb003616 	bl	36478 <memcpy>
   28c1c:	e5980008 	ldr	r0, [r8, #8]
   28c20:	e584764c 	str	r7, [r4, #1612]	; 0x64c
   28c24:	e3500000 	cmp	r0, #0
   28c28:	1a000012 	bne	28c78 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   28c2c:	e898000a 	ldm	r8, {r1, r3}
   28c30:	e3a02000 	mov	r2, #0
   28c34:	e5843000 	str	r3, [r4]
   28c38:	e1510002 	cmp	r1, r2
   28c3c:	e5842004 	str	r2, [r4, #4]
   28c40:	05884000 	streq	r4, [r8]
   28c44:	0a000005 	beq	28c60 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   28c48:	e3530000 	cmp	r3, #0
   28c4c:	0a00000b 	beq	28c80 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   28c50:	e5932004 	ldr	r2, [r3, #4]
   28c54:	e3520000 	cmp	r2, #0
   28c58:	05834004 	streq	r4, [r3, #4]
   28c5c:	1a00001f 	bne	28ce0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   28c60:	e5983008 	ldr	r3, [r8, #8]
   28c64:	e5884004 	str	r4, [r8, #4]
   28c68:	e3530000 	cmp	r3, #0
   28c6c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   28c70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   28c74:	ea003e4b 	b	385a8 <LeaveCritical>
   28c78:	eb003e1f 	bl	384fc <EnterCritical>
   28c7c:	eaffffea 	b	28c2c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   28c80:	e301174c 	movw	r1, #5964	; 0x174c
   28c84:	e3401004 	movt	r1, #4
   28c88:	e3010770 	movw	r0, #6000	; 0x1770
   28c8c:	e3400004 	movt	r0, #4
   28c90:	e3a02066 	mov	r2, #102	; 0x66
   28c94:	eb000f09 	bl	2c8c0 <assertion_failed>
   28c98:	e301174c 	movw	r1, #5964	; 0x174c
   28c9c:	e3401004 	movt	r1, #4
   28ca0:	e30c0b80 	movw	r0, #52096	; 0xcb80
   28ca4:	e3400003 	movt	r0, #3
   28ca8:	e3a02052 	mov	r2, #82	; 0x52
   28cac:	eb000f03 	bl	2c8c0 <assertion_failed>
   28cb0:	e301174c 	movw	r1, #5964	; 0x174c
   28cb4:	e3401004 	movt	r1, #4
   28cb8:	e30d0fec 	movw	r0, #57324	; 0xdfec
   28cbc:	e3400003 	movt	r0, #3
   28cc0:	e3a02053 	mov	r2, #83	; 0x53
   28cc4:	eb000efd 	bl	2c8c0 <assertion_failed>
   28cc8:	e301174c 	movw	r1, #5964	; 0x174c
   28ccc:	e3401004 	movt	r1, #4
   28cd0:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   28cd4:	e3400003 	movt	r0, #3
   28cd8:	e3a02056 	mov	r2, #86	; 0x56
   28cdc:	eb000ef7 	bl	2c8c0 <assertion_failed>
   28ce0:	e301174c 	movw	r1, #5964	; 0x174c
   28ce4:	e3401004 	movt	r1, #4
   28ce8:	e3010780 	movw	r0, #6016	; 0x1780
   28cec:	e3400004 	movt	r0, #4
   28cf0:	e3a02067 	mov	r2, #103	; 0x67
   28cf4:	eb000ef1 	bl	2c8c0 <assertion_failed>

00028cf8 <CNetQueue::Dequeue(void*, void**)>:
   28cf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28cfc:	e5905000 	ldr	r5, [r0]
   28d00:	e3550000 	cmp	r5, #0
   28d04:	0a000029 	beq	28db0 <CNetQueue::Dequeue(void*, void**)+0xb8>
   28d08:	e1a04000 	mov	r4, r0
   28d0c:	e5900008 	ldr	r0, [r0, #8]
   28d10:	e1a07001 	mov	r7, r1
   28d14:	e1a06002 	mov	r6, r2
   28d18:	e3500000 	cmp	r0, #0
   28d1c:	1a000019 	bne	28d88 <CNetQueue::Dequeue(void*, void**)+0x90>
   28d20:	e5953004 	ldr	r3, [r5, #4]
   28d24:	e5843000 	str	r3, [r4]
   28d28:	e3530000 	cmp	r3, #0
   28d2c:	0a000024 	beq	28dc4 <CNetQueue::Dequeue(void*, void**)+0xcc>
   28d30:	e3a02000 	mov	r2, #0
   28d34:	e5832000 	str	r2, [r3]
   28d38:	e5943008 	ldr	r3, [r4, #8]
   28d3c:	e3530000 	cmp	r3, #0
   28d40:	1a00001d 	bne	28dbc <CNetQueue::Dequeue(void*, void**)+0xc4>
   28d44:	e5954008 	ldr	r4, [r5, #8]
   28d48:	e3540000 	cmp	r4, #0
   28d4c:	0a000026 	beq	28dec <CNetQueue::Dequeue(void*, void**)+0xf4>
   28d50:	e3540d19 	cmp	r4, #1600	; 0x640
   28d54:	8a00002a 	bhi	28e04 <CNetQueue::Dequeue(void*, void**)+0x10c>
   28d58:	e1a02004 	mov	r2, r4
   28d5c:	e285100c 	add	r1, r5, #12
   28d60:	e1a00007 	mov	r0, r7
   28d64:	eb0035c3 	bl	36478 <memcpy>
   28d68:	e3560000 	cmp	r6, #0
   28d6c:	e1a00005 	mov	r0, r5
   28d70:	e3a01e65 	mov	r1, #1616	; 0x650
   28d74:	1595364c 	ldrne	r3, [r5, #1612]	; 0x64c
   28d78:	15863000 	strne	r3, [r6]
   28d7c:	eb0037de 	bl	36cfc <operator delete(void*, unsigned int)>
   28d80:	e1a00004 	mov	r0, r4
   28d84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28d88:	eb003ddb 	bl	384fc <EnterCritical>
   28d8c:	e5945000 	ldr	r5, [r4]
   28d90:	e3550000 	cmp	r5, #0
   28d94:	1affffe1 	bne	28d20 <CNetQueue::Dequeue(void*, void**)+0x28>
   28d98:	e301174c 	movw	r1, #5964	; 0x174c
   28d9c:	e3401004 	movt	r1, #4
   28da0:	e30b0374 	movw	r0, #45940	; 0xb374
   28da4:	e3400003 	movt	r0, #3
   28da8:	e3a02078 	mov	r2, #120	; 0x78
   28dac:	eb000ec3 	bl	2c8c0 <assertion_failed>
   28db0:	e1a04005 	mov	r4, r5
   28db4:	e1a00004 	mov	r0, r4
   28db8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28dbc:	eb003df9 	bl	385a8 <LeaveCritical>
   28dc0:	eaffffdf 	b	28d44 <CNetQueue::Dequeue(void*, void**)+0x4c>
   28dc4:	e5942004 	ldr	r2, [r4, #4]
   28dc8:	e1520005 	cmp	r2, r5
   28dcc:	05843004 	streq	r3, [r4, #4]
   28dd0:	0affffd8 	beq	28d38 <CNetQueue::Dequeue(void*, void**)+0x40>
   28dd4:	e301174c 	movw	r1, #5964	; 0x174c
   28dd8:	e3401004 	movt	r1, #4
   28ddc:	e301075c 	movw	r0, #5980	; 0x175c
   28de0:	e3400004 	movt	r0, #4
   28de4:	e3a02081 	mov	r2, #129	; 0x81
   28de8:	eb000eb4 	bl	2c8c0 <assertion_failed>
   28dec:	e301174c 	movw	r1, #5964	; 0x174c
   28df0:	e3401004 	movt	r1, #4
   28df4:	e3010794 	movw	r0, #6036	; 0x1794
   28df8:	e3400004 	movt	r0, #4
   28dfc:	e3a02088 	mov	r2, #136	; 0x88
   28e00:	eb000eae 	bl	2c8c0 <assertion_failed>
   28e04:	e301174c 	movw	r1, #5964	; 0x174c
   28e08:	e3401004 	movt	r1, #4
   28e0c:	e30107a0 	movw	r0, #6048	; 0x17a0
   28e10:	e3400004 	movt	r0, #4
   28e14:	e3a02089 	mov	r2, #137	; 0x89
   28e18:	eb000ea8 	bl	2c8c0 <assertion_failed>

00028e1c <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   28e1c:	e92d4070 	push	{r4, r5, r6, lr}
   28e20:	e1a04000 	mov	r4, r0
   28e24:	e3a06000 	mov	r6, #0
   28e28:	e1a00001 	mov	r0, r1
   28e2c:	e1a01004 	mov	r1, r4
   28e30:	e5c4600c 	strb	r6, [r4, #12]
   28e34:	e1a05002 	mov	r5, r2
   28e38:	ebfffea1 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28e3c:	e1a00004 	mov	r0, r4
   28e40:	e5c46008 	strb	r6, [r4, #8]
   28e44:	e5c45009 	strb	r5, [r4, #9]
   28e48:	e8bd8070 	pop	{r4, r5, r6, pc}

00028e4c <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   28e4c:	e92d4070 	push	{r4, r5, r6, lr}
   28e50:	e1a04000 	mov	r4, r0
   28e54:	e1a06002 	mov	r6, r2
   28e58:	e1a00001 	mov	r0, r1
   28e5c:	e3a02001 	mov	r2, #1
   28e60:	e1a01004 	mov	r1, r4
   28e64:	e5c4200c 	strb	r2, [r4, #12]
   28e68:	e1a05003 	mov	r5, r3
   28e6c:	ebfffe94 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28e70:	e1a00006 	mov	r0, r6
   28e74:	e2841004 	add	r1, r4, #4
   28e78:	ebfffe91 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28e7c:	e3a03000 	mov	r3, #0
   28e80:	e1a00004 	mov	r0, r4
   28e84:	e5c45009 	strb	r5, [r4, #9]
   28e88:	e5c43008 	strb	r3, [r4, #8]
   28e8c:	e8bd8070 	pop	{r4, r5, r6, pc}

00028e90 <CChecksumCalculator::~CChecksumCalculator()>:
   28e90:	e12fff1e 	bx	lr

00028e94 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   28e94:	e1a03000 	mov	r3, r0
   28e98:	e1a00001 	mov	r0, r1
   28e9c:	e1a01003 	mov	r1, r3
   28ea0:	eafffe87 	b	288c4 <CIPAddress::CopyTo(unsigned char*) const>

00028ea4 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   28ea4:	e92d4010 	push	{r4, lr}
   28ea8:	e1a04000 	mov	r4, r0
   28eac:	e1a00001 	mov	r0, r1
   28eb0:	e2841004 	add	r1, r4, #4
   28eb4:	ebfffe82 	bl	288c4 <CIPAddress::CopyTo(unsigned char*) const>
   28eb8:	e3a03001 	mov	r3, #1
   28ebc:	e5c4300c 	strb	r3, [r4, #12]
   28ec0:	e8bd8010 	pop	{r4, pc}

00028ec4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   28ec4:	e2503000 	subs	r3, r0, #0
   28ec8:	e92d4010 	push	{r4, lr}
   28ecc:	0a000013 	beq	28f20 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>
   28ed0:	e3510000 	cmp	r1, #0
   28ed4:	0a000017 	beq	28f38 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   28ed8:	e3510001 	cmp	r1, #1
   28edc:	01a0c003 	moveq	ip, r3
   28ee0:	01a00002 	moveq	r0, r2
   28ee4:	0a00000a 	beq	28f14 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x50>
   28ee8:	e241c002 	sub	ip, r1, #2
   28eec:	e1a00002 	mov	r0, r2
   28ef0:	e3ccc001 	bic	ip, ip, #1
   28ef4:	e28cc002 	add	ip, ip, #2
   28ef8:	e083c00c 	add	ip, r3, ip
   28efc:	e0d320b2 	ldrh	r2, [r3], #2
   28f00:	e0800002 	add	r0, r0, r2
   28f04:	e153000c 	cmp	r3, ip
   28f08:	1afffffb 	bne	28efc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x38>
   28f0c:	e3110001 	tst	r1, #1
   28f10:	08bd8010 	popeq	{r4, pc}
   28f14:	e5dc3000 	ldrb	r3, [ip]
   28f18:	e0800003 	add	r0, r0, r3
   28f1c:	e8bd8010 	pop	{r4, pc}
   28f20:	e30117c0 	movw	r1, #6080	; 0x17c0
   28f24:	e3401004 	movt	r1, #4
   28f28:	e30107d8 	movw	r0, #6104	; 0x17d8
   28f2c:	e3400004 	movt	r0, #4
   28f30:	e3a02054 	mov	r2, #84	; 0x54
   28f34:	eb000e61 	bl	2c8c0 <assertion_failed>
   28f38:	e30117c0 	movw	r1, #6080	; 0x17c0
   28f3c:	e3401004 	movt	r1, #4
   28f40:	e30c0b80 	movw	r0, #52096	; 0xcb80
   28f44:	e3400003 	movt	r0, #3
   28f48:	e3a02055 	mov	r2, #85	; 0x55
   28f4c:	eb000e5b 	bl	2c8c0 <assertion_failed>

00028f50 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   28f50:	e5d0300c 	ldrb	r3, [r0, #12]
   28f54:	e1a0c000 	mov	ip, r0
   28f58:	e92d4010 	push	{r4, lr}
   28f5c:	e3530000 	cmp	r3, #0
   28f60:	0a000018 	beq	28fc8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x78>
   28f64:	e1a00001 	mov	r0, r1
   28f68:	e1a0300c 	mov	r3, ip
   28f6c:	e1a01002 	mov	r1, r2
   28f70:	e28ce00c 	add	lr, ip, #12
   28f74:	e6bf2fb2 	rev16	r2, r2
   28f78:	e1cc20ba 	strh	r2, [ip, #10]
   28f7c:	e3a02000 	mov	r2, #0
   28f80:	e0d3c0b2 	ldrh	ip, [r3], #2
   28f84:	e082200c 	add	r2, r2, ip
   28f88:	e15e0003 	cmp	lr, r3
   28f8c:	1afffffb 	bne	28f80 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x30>
   28f90:	e3500000 	cmp	r0, #0
   28f94:	0a000011 	beq	28fe0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x90>
   28f98:	e3510000 	cmp	r1, #0
   28f9c:	0a000015 	beq	28ff8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa8>
   28fa0:	ebffffc7 	bl	28ec4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   28fa4:	e1b03820 	lsrs	r3, r0, #16
   28fa8:	0a000003 	beq	28fbc <CChecksumCalculator::Calculate(void const*, unsigned int)+0x6c>
   28fac:	e6f30070 	uxtah	r0, r3, r0
   28fb0:	e1b03820 	lsrs	r3, r0, #16
   28fb4:	16ff0070 	uxthne	r0, r0
   28fb8:	12800001 	addne	r0, r0, #1
   28fbc:	e1e00000 	mvn	r0, r0
   28fc0:	e6ff0070 	uxth	r0, r0
   28fc4:	e8bd8010 	pop	{r4, pc}
   28fc8:	e30117c0 	movw	r1, #6080	; 0x17c0
   28fcc:	e3401004 	movt	r1, #4
   28fd0:	e30107e8 	movw	r0, #6120	; 0x17e8
   28fd4:	e3400004 	movt	r0, #4
   28fd8:	e3a0203c 	mov	r2, #60	; 0x3c
   28fdc:	eb000e37 	bl	2c8c0 <assertion_failed>
   28fe0:	e30117c0 	movw	r1, #6080	; 0x17c0
   28fe4:	e3401004 	movt	r1, #4
   28fe8:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   28fec:	e3400003 	movt	r0, #3
   28ff0:	e3a02041 	mov	r2, #65	; 0x41
   28ff4:	eb000e31 	bl	2c8c0 <assertion_failed>
   28ff8:	e30117c0 	movw	r1, #6080	; 0x17c0
   28ffc:	e3401004 	movt	r1, #4
   29000:	e30c0b80 	movw	r0, #52096	; 0xcb80
   29004:	e3400003 	movt	r0, #3
   29008:	e3a02042 	mov	r2, #66	; 0x42
   2900c:	eb000e2b 	bl	2c8c0 <assertion_failed>

00029010 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   29010:	e3500000 	cmp	r0, #0
   29014:	e92d4010 	push	{r4, lr}
   29018:	0a00000c 	beq	29050 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x40>
   2901c:	e3510000 	cmp	r1, #0
   29020:	0a000010 	beq	29068 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x58>
   29024:	e3a02000 	mov	r2, #0
   29028:	ebffffa5 	bl	28ec4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   2902c:	e1b03820 	lsrs	r3, r0, #16
   29030:	0a000003 	beq	29044 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x34>
   29034:	e6f30070 	uxtah	r0, r3, r0
   29038:	e1b03820 	lsrs	r3, r0, #16
   2903c:	16ff0070 	uxthne	r0, r0
   29040:	12800001 	addne	r0, r0, #1
   29044:	e1e00000 	mvn	r0, r0
   29048:	e6ff0070 	uxth	r0, r0
   2904c:	e8bd8010 	pop	{r4, pc}
   29050:	e30117c0 	movw	r1, #6080	; 0x17c0
   29054:	e3401004 	movt	r1, #4
   29058:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   2905c:	e3400003 	movt	r0, #3
   29060:	e3a0204a 	mov	r2, #74	; 0x4a
   29064:	eb000e15 	bl	2c8c0 <assertion_failed>
   29068:	e30117c0 	movw	r1, #6080	; 0x17c0
   2906c:	e3401004 	movt	r1, #4
   29070:	e30c0b80 	movw	r0, #52096	; 0xcb80
   29074:	e3400003 	movt	r0, #3
   29078:	e3a0204b 	mov	r2, #75	; 0x4b
   2907c:	eb000e0f 	bl	2c8c0 <assertion_failed>

00029080 <CChecksumCalculator::FoldResult(unsigned int)>:
   29080:	e1b03820 	lsrs	r3, r0, #16
   29084:	0a000003 	beq	29098 <CChecksumCalculator::FoldResult(unsigned int)+0x18>
   29088:	e6f30070 	uxtah	r0, r3, r0
   2908c:	e1b03820 	lsrs	r3, r0, #16
   29090:	16ff0070 	uxthne	r0, r0
   29094:	12800001 	addne	r0, r0, #1
   29098:	e6ff0070 	uxth	r0, r0
   2909c:	e12fff1e 	bx	lr

000290a0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   290a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   290a4:	e1a04000 	mov	r4, r0
   290a8:	e1a05001 	mov	r5, r1
   290ac:	e1a06002 	mov	r6, r2
   290b0:	e3a01902 	mov	r1, #32768	; 0x8000
   290b4:	e3a02000 	mov	r2, #0
   290b8:	e59f80cc 	ldr	r8, [pc, #204]	; 2918c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xec>
   290bc:	eb000984 	bl	2b6d4 <CTask::CTask(unsigned int, bool)>
   290c0:	e1a00005 	mov	r0, r5
   290c4:	e5848000 	str	r8, [r4]
   290c8:	e28470fc 	add	r7, r4, #252	; 0xfc
   290cc:	e58450f4 	str	r5, [r4, #244]	; 0xf4
   290d0:	ebffdceb 	bl	20484 <CNetSubSystem::GetConfig()>
   290d4:	e3560000 	cmp	r6, #0
   290d8:	e58400f8 	str	r0, [r4, #248]	; 0xf8
   290dc:	e3011bc8 	movw	r1, #7112	; 0x1bc8
   290e0:	e3401004 	movt	r1, #4
   290e4:	e1a00007 	mov	r0, r7
   290e8:	11a01006 	movne	r1, r6
   290ec:	eb002920 	bl	33574 <CString::CString(char const*)>
   290f0:	e3a02011 	mov	r2, #17
   290f4:	e1a01005 	mov	r1, r5
   290f8:	e2840f43 	add	r0, r4, #268	; 0x10c
   290fc:	ebffdeeb 	bl	20cb0 <CSocket::CSocket(CNetSubSystem*, int)>
   29100:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   29104:	e3a02000 	mov	r2, #0
   29108:	e5c421ac 	strb	r2, [r4, #428]	; 0x1ac
   2910c:	e1530002 	cmp	r3, r2
   29110:	0a00000b 	beq	29144 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa4>
   29114:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
   29118:	e3530000 	cmp	r3, #0
   2911c:	0a00000e 	beq	2915c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xbc>
   29120:	e1a00007 	mov	r0, r7
   29124:	eb002982 	bl	33734 <CString::GetLength() const>
   29128:	e350001e 	cmp	r0, #30
   2912c:	8a000010 	bhi	29174 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   29130:	e1a00004 	mov	r0, r4
   29134:	e288100c 	add	r1, r8, #12
   29138:	eb0009f4 	bl	2b910 <CTask::SetName(char const*)>
   2913c:	e1a00004 	mov	r0, r4
   29140:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29144:	e30117fc 	movw	r1, #6140	; 0x17fc
   29148:	e3401004 	movt	r1, #4
   2914c:	e3000aa4 	movw	r0, #2724	; 0xaa4
   29150:	e3400004 	movt	r0, #4
   29154:	e3a02073 	mov	r2, #115	; 0x73
   29158:	eb000dd8 	bl	2c8c0 <assertion_failed>
   2915c:	e30117fc 	movw	r1, #6140	; 0x17fc
   29160:	e3401004 	movt	r1, #4
   29164:	e3000b08 	movw	r0, #2824	; 0xb08
   29168:	e3400004 	movt	r0, #4
   2916c:	e3a02074 	mov	r2, #116	; 0x74
   29170:	eb000dd2 	bl	2c8c0 <assertion_failed>
   29174:	e30117fc 	movw	r1, #6140	; 0x17fc
   29178:	e3401004 	movt	r1, #4
   2917c:	e301080c 	movw	r0, #6156	; 0x180c
   29180:	e3400004 	movt	r0, #4
   29184:	e3a02076 	mov	r2, #118	; 0x76
   29188:	eb000dcc 	bl	2c8c0 <assertion_failed>
   2918c:	00041b40 	.word	0x00041b40

00029190 <CDHCPClient::IsBound() const>:
   29190:	e5d001ac 	ldrb	r0, [r0, #428]	; 0x1ac
   29194:	e12fff1e 	bx	lr

00029198 <CDHCPClient::HaltNetwork()>:
   29198:	e1a03000 	mov	r3, r0
   2919c:	e59000f8 	ldr	r0, [r0, #248]	; 0xf8
   291a0:	e3a02000 	mov	r2, #0
   291a4:	e1500002 	cmp	r0, r2
   291a8:	e5c321ac 	strb	r2, [r3, #428]	; 0x1ac
   291ac:	0a000000 	beq	291b4 <CDHCPClient::HaltNetwork()+0x1c>
   291b0:	eafffc47 	b	282d4 <CNetConfig::Reset()>
   291b4:	e30117fc 	movw	r1, #6140	; 0x17fc
   291b8:	e3401004 	movt	r1, #4
   291bc:	e3000b08 	movw	r0, #2824	; 0xb08
   291c0:	e3400004 	movt	r0, #4
   291c4:	e3a02e1b 	mov	r2, #432	; 0x1b0
   291c8:	e92d4010 	push	{r4, lr}
   291cc:	eb000dbb 	bl	2c8c0 <assertion_failed>

000291d0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   291d0:	e3510000 	cmp	r1, #0
   291d4:	10812002 	addne	r2, r1, r2
   291d8:	0a0000a3 	beq	2946c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x29c>
   291dc:	e2813002 	add	r3, r1, #2
   291e0:	e1520003 	cmp	r2, r3
   291e4:	312fff1e 	bxcc	lr
   291e8:	e5d13000 	ldrb	r3, [r1]
   291ec:	e353003b 	cmp	r3, #59	; 0x3b
   291f0:	8a00003e 	bhi	292f0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x120>
   291f4:	e353003b 	cmp	r3, #59	; 0x3b
   291f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   291fc:	ea00003d 	b	292f8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x128>
   29200:	00029464 	.word	0x00029464
   29204:	00029440 	.word	0x00029440
   29208:	000292f8 	.word	0x000292f8
   2920c:	00029410 	.word	0x00029410
   29210:	000292f8 	.word	0x000292f8
   29214:	000292f8 	.word	0x000292f8
   29218:	000293ec 	.word	0x000293ec
   2921c:	000292f8 	.word	0x000292f8
   29220:	000292f8 	.word	0x000292f8
   29224:	000292f8 	.word	0x000292f8
   29228:	000292f8 	.word	0x000292f8
   2922c:	000292f8 	.word	0x000292f8
   29230:	000292f8 	.word	0x000292f8
   29234:	000292f8 	.word	0x000292f8
   29238:	000292f8 	.word	0x000292f8
   2923c:	000292f8 	.word	0x000292f8
   29240:	000292f8 	.word	0x000292f8
   29244:	000292f8 	.word	0x000292f8
   29248:	000292f8 	.word	0x000292f8
   2924c:	000292f8 	.word	0x000292f8
   29250:	000292f8 	.word	0x000292f8
   29254:	000292f8 	.word	0x000292f8
   29258:	000292f8 	.word	0x000292f8
   2925c:	000292f8 	.word	0x000292f8
   29260:	000292f8 	.word	0x000292f8
   29264:	000292f8 	.word	0x000292f8
   29268:	000292f8 	.word	0x000292f8
   2926c:	000292f8 	.word	0x000292f8
   29270:	000292f8 	.word	0x000292f8
   29274:	000292f8 	.word	0x000292f8
   29278:	000292f8 	.word	0x000292f8
   2927c:	000292f8 	.word	0x000292f8
   29280:	000292f8 	.word	0x000292f8
   29284:	000292f8 	.word	0x000292f8
   29288:	000292f8 	.word	0x000292f8
   2928c:	000292f8 	.word	0x000292f8
   29290:	000292f8 	.word	0x000292f8
   29294:	000292f8 	.word	0x000292f8
   29298:	000292f8 	.word	0x000292f8
   2929c:	000292f8 	.word	0x000292f8
   292a0:	000292f8 	.word	0x000292f8
   292a4:	000292f8 	.word	0x000292f8
   292a8:	000292f8 	.word	0x000292f8
   292ac:	000292f8 	.word	0x000292f8
   292b0:	000292f8 	.word	0x000292f8
   292b4:	000292f8 	.word	0x000292f8
   292b8:	000292f8 	.word	0x000292f8
   292bc:	000292f8 	.word	0x000292f8
   292c0:	000292f8 	.word	0x000292f8
   292c4:	000292f8 	.word	0x000292f8
   292c8:	000292f8 	.word	0x000292f8
   292cc:	000293c4 	.word	0x000293c4
   292d0:	000293a0 	.word	0x000293a0
   292d4:	0002937c 	.word	0x0002937c
   292d8:	00029358 	.word	0x00029358
   292dc:	000292f8 	.word	0x000292f8
   292e0:	000292f8 	.word	0x000292f8
   292e4:	000292f8 	.word	0x000292f8
   292e8:	00029330 	.word	0x00029330
   292ec:	00029308 	.word	0x00029308
   292f0:	e35300ff 	cmp	r3, #255	; 0xff
   292f4:	012fff1e 	bxeq	lr
   292f8:	e5d13001 	ldrb	r3, [r1, #1]
   292fc:	e2833002 	add	r3, r3, #2
   29300:	e0811003 	add	r1, r1, r3
   29304:	eaffffb4 	b	291dc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xc>
   29308:	e5d13001 	ldrb	r3, [r1, #1]
   2930c:	e3530004 	cmp	r3, #4
   29310:	1afffff9 	bne	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29314:	e281c006 	add	ip, r1, #6
   29318:	e152000c 	cmp	r2, ip
   2931c:	3afffff6 	bcc	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29320:	e5913002 	ldr	r3, [r1, #2]
   29324:	e6bf3f33 	rev	r3, r3
   29328:	e58031f4 	str	r3, [r0, #500]	; 0x1f4
   2932c:	eafffff1 	b	292f8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x128>
   29330:	e5d13001 	ldrb	r3, [r1, #1]
   29334:	e3530004 	cmp	r3, #4
   29338:	1affffef 	bne	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   2933c:	e281c006 	add	ip, r1, #6
   29340:	e152000c 	cmp	r2, ip
   29344:	25913002 	ldrcs	r3, [r1, #2]
   29348:	26bf3f33 	revcs	r3, r3
   2934c:	258031f0 	strcs	r3, [r0, #496]	; 0x1f0
   29350:	25d13001 	ldrbcs	r3, [r1, #1]
   29354:	eaffffe8 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29358:	e5d13001 	ldrb	r3, [r1, #1]
   2935c:	e3530004 	cmp	r3, #4
   29360:	1affffe5 	bne	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29364:	e281c006 	add	ip, r1, #6
   29368:	e152000c 	cmp	r2, ip
   2936c:	25913002 	ldrcs	r3, [r1, #2]
   29370:	258031ec 	strcs	r3, [r0, #492]	; 0x1ec
   29374:	25d13001 	ldrbcs	r3, [r1, #1]
   29378:	eaffffdf 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   2937c:	e5d13001 	ldrb	r3, [r1, #1]
   29380:	e3530001 	cmp	r3, #1
   29384:	1affffdc 	bne	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29388:	e281c003 	add	ip, r1, #3
   2938c:	e152000c 	cmp	r2, ip
   29390:	25d13002 	ldrbcs	r3, [r1, #2]
   29394:	25c031e9 	strbcs	r3, [r0, #489]	; 0x1e9
   29398:	25d13001 	ldrbcs	r3, [r1, #1]
   2939c:	eaffffd6 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   293a0:	e5d13001 	ldrb	r3, [r1, #1]
   293a4:	e3530001 	cmp	r3, #1
   293a8:	1affffd3 	bne	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   293ac:	e281c003 	add	ip, r1, #3
   293b0:	e152000c 	cmp	r2, ip
   293b4:	25d13002 	ldrbcs	r3, [r1, #2]
   293b8:	25c031e8 	strbcs	r3, [r0, #488]	; 0x1e8
   293bc:	25d13001 	ldrbcs	r3, [r1, #1]
   293c0:	eaffffcd 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   293c4:	e5d13001 	ldrb	r3, [r1, #1]
   293c8:	e3530004 	cmp	r3, #4
   293cc:	1affffca 	bne	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   293d0:	e281c006 	add	ip, r1, #6
   293d4:	e152000c 	cmp	r2, ip
   293d8:	25913002 	ldrcs	r3, [r1, #2]
   293dc:	26bf3f33 	revcs	r3, r3
   293e0:	258031e4 	strcs	r3, [r0, #484]	; 0x1e4
   293e4:	25d13001 	ldrbcs	r3, [r1, #1]
   293e8:	eaffffc3 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   293ec:	e5d13001 	ldrb	r3, [r1, #1]
   293f0:	e3530003 	cmp	r3, #3
   293f4:	9affffc0 	bls	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   293f8:	e281c006 	add	ip, r1, #6
   293fc:	e152000c 	cmp	r2, ip
   29400:	25913002 	ldrcs	r3, [r1, #2]
   29404:	258031e0 	strcs	r3, [r0, #480]	; 0x1e0
   29408:	25d13001 	ldrbcs	r3, [r1, #1]
   2940c:	eaffffba 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29410:	e5d13001 	ldrb	r3, [r1, #1]
   29414:	e3530003 	cmp	r3, #3
   29418:	9affffb7 	bls	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   2941c:	e281c006 	add	ip, r1, #6
   29420:	e152000c 	cmp	r2, ip
   29424:	3affffb4 	bcc	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29428:	e590c1dc 	ldr	ip, [r0, #476]	; 0x1dc
   2942c:	e35c0000 	cmp	ip, #0
   29430:	05913002 	ldreq	r3, [r1, #2]
   29434:	058031dc 	streq	r3, [r0, #476]	; 0x1dc
   29438:	05d13001 	ldrbeq	r3, [r1, #1]
   2943c:	eaffffae 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29440:	e5d13001 	ldrb	r3, [r1, #1]
   29444:	e3530004 	cmp	r3, #4
   29448:	1affffab 	bne	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   2944c:	e281c006 	add	ip, r1, #6
   29450:	e152000c 	cmp	r2, ip
   29454:	25913002 	ldrcs	r3, [r1, #2]
   29458:	258031d8 	strcs	r3, [r0, #472]	; 0x1d8
   2945c:	25d13001 	ldrbcs	r3, [r1, #1]
   29460:	eaffffa5 	b	292fc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29464:	e2811001 	add	r1, r1, #1
   29468:	eaffff5b 	b	291dc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xc>
   2946c:	e30117fc 	movw	r1, #6140	; 0x17fc
   29470:	e3401004 	movt	r1, #4
   29474:	e301082c 	movw	r0, #6188	; 0x182c
   29478:	e3400004 	movt	r0, #4
   2947c:	e92d4010 	push	{r4, lr}
   29480:	e30022af 	movw	r2, #687	; 0x2af
   29484:	eb000d0d 	bl	2c8c0 <assertion_failed>

00029488 <CDHCPClient::CheckConfig()>:
   29488:	e92d4010 	push	{r4, lr}
   2948c:	e1a04000 	mov	r4, r0
   29490:	e59031d4 	ldr	r3, [r0, #468]	; 0x1d4
   29494:	e24dd010 	sub	sp, sp, #16
   29498:	e3530000 	cmp	r3, #0
   2949c:	0a00002d 	beq	29558 <CDHCPClient::CheckConfig()+0xd0>
   294a0:	e59021d8 	ldr	r2, [r0, #472]	; 0x1d8
   294a4:	e3520000 	cmp	r2, #0
   294a8:	0a00002a 	beq	29558 <CDHCPClient::CheckConfig()+0xd0>
   294ac:	e59011dc 	ldr	r1, [r0, #476]	; 0x1dc
   294b0:	e3510000 	cmp	r1, #0
   294b4:	0a000027 	beq	29558 <CDHCPClient::CheckConfig()+0xd0>
   294b8:	e59001e0 	ldr	r0, [r0, #480]	; 0x1e0
   294bc:	e3500000 	cmp	r0, #0
   294c0:	0a000024 	beq	29558 <CDHCPClient::CheckConfig()+0xd0>
   294c4:	e0233001 	eor	r3, r3, r1
   294c8:	e1130002 	tst	r3, r2
   294cc:	1a000036 	bne	295ac <CDHCPClient::CheckConfig()+0x124>
   294d0:	e59411e4 	ldr	r1, [r4, #484]	; 0x1e4
   294d4:	e3510000 	cmp	r1, #0
   294d8:	0a000040 	beq	295e0 <CDHCPClient::CheckConfig()+0x158>
   294dc:	e59431f0 	ldr	r3, [r4, #496]	; 0x1f0
   294e0:	e59421f4 	ldr	r2, [r4, #500]	; 0x1f4
   294e4:	e3530000 	cmp	r3, #0
   294e8:	1a00002a 	bne	29598 <CDHCPClient::CheckConfig()+0x110>
   294ec:	e3520000 	cmp	r2, #0
   294f0:	01a030a1 	lsreq	r3, r1, #1
   294f4:	004121a1 	subeq	r2, r1, r1, lsr #3
   294f8:	10613082 	rsbne	r3, r1, r2, lsl #1
   294fc:	058431f0 	streq	r3, [r4, #496]	; 0x1f0
   29500:	058421f4 	streq	r2, [r4, #500]	; 0x1f4
   29504:	158431f0 	strne	r3, [r4, #496]	; 0x1f0
   29508:	e1530002 	cmp	r3, r2
   2950c:	93a03000 	movls	r3, #0
   29510:	83a03001 	movhi	r3, #1
   29514:	e1510002 	cmp	r1, r2
   29518:	33833001 	orrcc	r3, r3, #1
   2951c:	e3530000 	cmp	r3, #0
   29520:	03a00001 	moveq	r0, #1
   29524:	0a000019 	beq	29590 <CDHCPClient::CheckConfig()+0x108>
   29528:	eb001761 	bl	2f2b4 <CLogger::Get()>
   2952c:	e59411f4 	ldr	r1, [r4, #500]	; 0x1f4
   29530:	e59431f0 	ldr	r3, [r4, #496]	; 0x1f0
   29534:	e3a02002 	mov	r2, #2
   29538:	e594c1e4 	ldr	ip, [r4, #484]	; 0x1e4
   2953c:	e98d1002 	stmib	sp, {r1, ip}
   29540:	e58d3000 	str	r3, [sp]
   29544:	e30138b0 	movw	r3, #6320	; 0x18b0
   29548:	e3403004 	movt	r3, #4
   2954c:	e59f10a8 	ldr	r1, [pc, #168]	; 295fc <CDHCPClient::CheckConfig()+0x174>
   29550:	eb001925 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29554:	ea00000c 	b	2958c <CDHCPClient::CheckConfig()+0x104>
   29558:	eb001755 	bl	2f2b4 <CLogger::Get()>
   2955c:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   29560:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   29564:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   29568:	e594c1d8 	ldr	ip, [r4, #472]	; 0x1d8
   2956c:	e88d1008 	stm	sp, {r3, ip}
   29570:	e301383c 	movw	r3, #6204	; 0x183c
   29574:	e3403004 	movt	r3, #4
   29578:	e58d100c 	str	r1, [sp, #12]
   2957c:	e58d2008 	str	r2, [sp, #8]
   29580:	e3a02002 	mov	r2, #2
   29584:	e59f1070 	ldr	r1, [pc, #112]	; 295fc <CDHCPClient::CheckConfig()+0x174>
   29588:	eb001917 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2958c:	e3a00000 	mov	r0, #0
   29590:	e28dd010 	add	sp, sp, #16
   29594:	e8bd8010 	pop	{r4, pc}
   29598:	e3520000 	cmp	r2, #0
   2959c:	00412003 	subeq	r2, r1, r3
   295a0:	008320a2 	addeq	r2, r3, r2, lsr #1
   295a4:	058421f4 	streq	r2, [r4, #500]	; 0x1f4
   295a8:	eaffffd6 	b	29508 <CDHCPClient::CheckConfig()+0x80>
   295ac:	eb001740 	bl	2f2b4 <CLogger::Get()>
   295b0:	e59411d8 	ldr	r1, [r4, #472]	; 0x1d8
   295b4:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   295b8:	e301386c 	movw	r3, #6252	; 0x186c
   295bc:	e3403004 	movt	r3, #4
   295c0:	e594c1d4 	ldr	ip, [r4, #468]	; 0x1d4
   295c4:	e58dc000 	str	ip, [sp]
   295c8:	e58d1008 	str	r1, [sp, #8]
   295cc:	e58d2004 	str	r2, [sp, #4]
   295d0:	e3a02002 	mov	r2, #2
   295d4:	e59f1020 	ldr	r1, [pc, #32]	; 295fc <CDHCPClient::CheckConfig()+0x174>
   295d8:	eb001903 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   295dc:	eaffffea 	b	2958c <CDHCPClient::CheckConfig()+0x104>
   295e0:	eb001733 	bl	2f2b4 <CLogger::Get()>
   295e4:	e59f1010 	ldr	r1, [pc, #16]	; 295fc <CDHCPClient::CheckConfig()+0x174>
   295e8:	e3a02002 	mov	r2, #2
   295ec:	e3013898 	movw	r3, #6296	; 0x1898
   295f0:	e3403004 	movt	r3, #4
   295f4:	eb0018fc 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   295f8:	eaffffe3 	b	2958c <CDHCPClient::CheckConfig()+0x104>
   295fc:	00041b4c 	.word	0x00041b4c

00029600 <CDHCPClient::GetXID() const>:
   29600:	e59000f4 	ldr	r0, [r0, #244]	; 0xf4
   29604:	e92d4010 	push	{r4, lr}
   29608:	e3500000 	cmp	r0, #0
   2960c:	0a000009 	beq	29638 <CDHCPClient::GetXID() const+0x38>
   29610:	ebffdb9d 	bl	2048c <CNetSubSystem::GetNetDeviceLayer()>
   29614:	ebffe74b 	bl	23348 <CNetDeviceLayer::GetMACAddress() const>
   29618:	eb0034e9 	bl	369c4 <CMACAddress::Get() const>
   2961c:	e2504000 	subs	r4, r0, #0
   29620:	0a00000a 	beq	29650 <CDHCPClient::GetXID() const+0x50>
   29624:	eb00315b 	bl	35b98 <CTimer::Get()>
   29628:	e5944002 	ldr	r4, [r4, #2]
   2962c:	eb002e84 	bl	35044 <CTimer::GetClockTicks()>
   29630:	e0800004 	add	r0, r0, r4
   29634:	e8bd8010 	pop	{r4, pc}
   29638:	e30117fc 	movw	r1, #6140	; 0x17fc
   2963c:	e3401004 	movt	r1, #4
   29640:	e3000aa4 	movw	r0, #2724	; 0xaa4
   29644:	e3400004 	movt	r0, #4
   29648:	e3a02fd6 	mov	r2, #856	; 0x358
   2964c:	eb000c9b 	bl	2c8c0 <assertion_failed>
   29650:	e30117fc 	movw	r1, #6140	; 0x17fc
   29654:	e3401004 	movt	r1, #4
   29658:	e3000f50 	movw	r0, #3920	; 0xf50
   2965c:	e3400004 	movt	r0, #4
   29660:	e300235a 	movw	r2, #858	; 0x35a
   29664:	eb000c95 	bl	2c8c0 <assertion_failed>

00029668 <CDHCPClient::GetUnaligned(void const*)>:
   29668:	e3500000 	cmp	r0, #0
   2966c:	0a000001 	beq	29678 <CDHCPClient::GetUnaligned(void const*)+0x10>
   29670:	e5900000 	ldr	r0, [r0]
   29674:	e12fff1e 	bx	lr
   29678:	e30117fc 	movw	r1, #6140	; 0x17fc
   2967c:	e3401004 	movt	r1, #4
   29680:	e30108d0 	movw	r0, #6352	; 0x18d0
   29684:	e3400004 	movt	r0, #4
   29688:	e92d4010 	push	{r4, lr}
   2968c:	e3002362 	movw	r2, #866	; 0x362
   29690:	eb000c8a 	bl	2c8c0 <assertion_failed>

00029694 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   29694:	e3500000 	cmp	r0, #0
   29698:	0a000001 	beq	296a4 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x10>
   2969c:	e5801000 	str	r1, [r0]
   296a0:	e12fff1e 	bx	lr
   296a4:	e30117fc 	movw	r1, #6140	; 0x17fc
   296a8:	e3401004 	movt	r1, #4
   296ac:	e30108d0 	movw	r0, #6352	; 0x18d0
   296b0:	e3400004 	movt	r0, #4
   296b4:	e92d4010 	push	{r4, lr}
   296b8:	e300236f 	movw	r2, #879	; 0x36f
   296bc:	eb000c7f 	bl	2c8c0 <assertion_failed>

000296c0 <CDHCPClient::~CDHCPClient()>:
   296c0:	e92d4010 	push	{r4, lr}
   296c4:	e1a04000 	mov	r4, r0
   296c8:	e59f2028 	ldr	r2, [pc, #40]	; 296f8 <CDHCPClient::~CDHCPClient()+0x38>
   296cc:	e3a03000 	mov	r3, #0
   296d0:	e2800f43 	add	r0, r0, #268	; 0x10c
   296d4:	e5842000 	str	r2, [r4]
   296d8:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   296dc:	ebffdbd6 	bl	2063c <CSocket::~CSocket()>
   296e0:	e28400fc 	add	r0, r4, #252	; 0xfc
   296e4:	eb002769 	bl	33490 <CString::~CString()>
   296e8:	e1a00004 	mov	r0, r4
   296ec:	eb0008ad 	bl	2b9a8 <CTask::~CTask()>
   296f0:	e1a00004 	mov	r0, r4
   296f4:	e8bd8010 	pop	{r4, pc}
   296f8:	00041b40 	.word	0x00041b40

000296fc <CDHCPClient::~CDHCPClient()>:
   296fc:	e92d4010 	push	{r4, lr}
   29700:	e1a04000 	mov	r4, r0
   29704:	e59f2034 	ldr	r2, [pc, #52]	; 29740 <CDHCPClient::~CDHCPClient()+0x44>
   29708:	e3a03000 	mov	r3, #0
   2970c:	e2800f43 	add	r0, r0, #268	; 0x10c
   29710:	e5842000 	str	r2, [r4]
   29714:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   29718:	ebffdbc7 	bl	2063c <CSocket::~CSocket()>
   2971c:	e28400fc 	add	r0, r4, #252	; 0xfc
   29720:	eb00275a 	bl	33490 <CString::~CString()>
   29724:	e1a00004 	mov	r0, r4
   29728:	eb00089e 	bl	2b9a8 <CTask::~CTask()>
   2972c:	e1a00004 	mov	r0, r4
   29730:	e3a01f7e 	mov	r1, #504	; 0x1f8
   29734:	eb003570 	bl	36cfc <operator delete(void*, unsigned int)>
   29738:	e1a00004 	mov	r0, r4
   2973c:	e8bd8010 	pop	{r4, pc}
   29740:	00041b40 	.word	0x00041b40

00029744 <CDHCPClient::ReceiveMessage()>:
   29744:	e92d4070 	push	{r4, r5, r6, lr}
   29748:	e3a03040 	mov	r3, #64	; 0x40
   2974c:	e1a04000 	mov	r4, r0
   29750:	e24dde23 	sub	sp, sp, #560	; 0x230
   29754:	e3a02f89 	mov	r2, #548	; 0x224
   29758:	e28d100c 	add	r1, sp, #12
   2975c:	e2800f43 	add	r0, r0, #268	; 0x10c
   29760:	ebffdc97 	bl	209c4 <CSocket::Receive(void*, unsigned int, int)>
   29764:	e35000ef 	cmp	r0, #239	; 0xef
   29768:	da000002 	ble	29778 <CDHCPClient::ReceiveMessage()+0x34>
   2976c:	e5dd300c 	ldrb	r3, [sp, #12]
   29770:	e3530002 	cmp	r3, #2
   29774:	0a000003 	beq	29788 <CDHCPClient::ReceiveMessage()+0x44>
   29778:	e3a04000 	mov	r4, #0
   2977c:	e1a00004 	mov	r0, r4
   29780:	e28dde23 	add	sp, sp, #560	; 0x230
   29784:	e8bd8070 	pop	{r4, r5, r6, pc}
   29788:	e5dd300d 	ldrb	r3, [sp, #13]
   2978c:	e3530001 	cmp	r3, #1
   29790:	1afffff8 	bne	29778 <CDHCPClient::ReceiveMessage()+0x34>
   29794:	e5dd300e 	ldrb	r3, [sp, #14]
   29798:	e3530006 	cmp	r3, #6
   2979c:	1afffff5 	bne	29778 <CDHCPClient::ReceiveMessage()+0x34>
   297a0:	e59d2010 	ldr	r2, [sp, #16]
   297a4:	e59431cc 	ldr	r3, [r4, #460]	; 0x1cc
   297a8:	e1520003 	cmp	r2, r3
   297ac:	1afffff1 	bne	29778 <CDHCPClient::ReceiveMessage()+0x34>
   297b0:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   297b4:	e3083263 	movw	r3, #33379	; 0x8263
   297b8:	e3463353 	movt	r3, #25427	; 0x6353
   297bc:	e1520003 	cmp	r2, r3
   297c0:	1affffec 	bne	29778 <CDHCPClient::ReceiveMessage()+0x34>
   297c4:	e1a05000 	mov	r5, r0
   297c8:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
   297cc:	e3500000 	cmp	r0, #0
   297d0:	0a000030 	beq	29898 <CDHCPClient::ReceiveMessage()+0x154>
   297d4:	ebffdb2c 	bl	2048c <CNetSubSystem::GetNetDeviceLayer()>
   297d8:	ebffe6da 	bl	23348 <CNetDeviceLayer::GetMACAddress() const>
   297dc:	e2506000 	subs	r6, r0, #0
   297e0:	0a000037 	beq	298c4 <CDHCPClient::ReceiveMessage()+0x180>
   297e4:	e28d1028 	add	r1, sp, #40	; 0x28
   297e8:	e28d0004 	add	r0, sp, #4
   297ec:	eb003415 	bl	36848 <CMACAddress::CMACAddress(unsigned char const*)>
   297f0:	e1a01006 	mov	r1, r6
   297f4:	e28d0004 	add	r0, sp, #4
   297f8:	eb00343e 	bl	368f8 <CMACAddress::operator!=(CMACAddress const&) const>
   297fc:	e3500000 	cmp	r0, #0
   29800:	13a04000 	movne	r4, #0
   29804:	1a000017 	bne	29868 <CDHCPClient::ReceiveMessage()+0x124>
   29808:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   2980c:	e2843f7b 	add	r3, r4, #492	; 0x1ec
   29810:	e2841f7a 	add	r1, r4, #488	; 0x1e8
   29814:	e59d201c 	ldr	r2, [sp, #28]
   29818:	e58421d4 	str	r2, [r4, #468]	; 0x1d4
   2981c:	e24520f0 	sub	r2, r5, #240	; 0xf0
   29820:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   29824:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   29828:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   2982c:	e58401e4 	str	r0, [r4, #484]	; 0x1e4
   29830:	e1c100b0 	strh	r0, [r1]
   29834:	e28d10fc 	add	r1, sp, #252	; 0xfc
   29838:	f443078f 	vst1.32	{d16}, [r3]
   2983c:	e58401f4 	str	r0, [r4, #500]	; 0x1f4
   29840:	e1a00004 	mov	r0, r4
   29844:	ebfffe61 	bl	291d0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   29848:	e5d431e8 	ldrb	r3, [r4, #488]	; 0x1e8
   2984c:	e3530002 	cmp	r3, #2
   29850:	0a00000b 	beq	29884 <CDHCPClient::ReceiveMessage()+0x140>
   29854:	e3530003 	cmp	r3, #3
   29858:	0a000005 	beq	29874 <CDHCPClient::ReceiveMessage()+0x130>
   2985c:	e3530001 	cmp	r3, #1
   29860:	0a000012 	beq	298b0 <CDHCPClient::ReceiveMessage()+0x16c>
   29864:	e3a04001 	mov	r4, #1
   29868:	e28d0004 	add	r0, sp, #4
   2986c:	eb003406 	bl	3688c <CMACAddress::~CMACAddress()>
   29870:	eaffffc1 	b	2977c <CDHCPClient::ReceiveMessage()+0x38>
   29874:	e28d1078 	add	r1, sp, #120	; 0x78
   29878:	e1a00004 	mov	r0, r4
   2987c:	e3a02080 	mov	r2, #128	; 0x80
   29880:	ebfffe52 	bl	291d0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   29884:	e3a02040 	mov	r2, #64	; 0x40
   29888:	e28d1038 	add	r1, sp, #56	; 0x38
   2988c:	e1a00004 	mov	r0, r4
   29890:	ebfffe4e 	bl	291d0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   29894:	eafffff2 	b	29864 <CDHCPClient::ReceiveMessage()+0x120>
   29898:	e30117fc 	movw	r1, #6140	; 0x17fc
   2989c:	e3401004 	movt	r1, #4
   298a0:	e3000aa4 	movw	r0, #2724	; 0xaa4
   298a4:	e3400004 	movt	r0, #4
   298a8:	e300227d 	movw	r2, #637	; 0x27d
   298ac:	eb000c03 	bl	2c8c0 <assertion_failed>
   298b0:	e3a02080 	mov	r2, #128	; 0x80
   298b4:	e28d1078 	add	r1, sp, #120	; 0x78
   298b8:	e1a00004 	mov	r0, r4
   298bc:	ebfffe43 	bl	291d0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   298c0:	eaffffe7 	b	29864 <CDHCPClient::ReceiveMessage()+0x120>
   298c4:	e30117fc 	movw	r1, #6140	; 0x17fc
   298c8:	e3401004 	movt	r1, #4
   298cc:	e3000dd8 	movw	r0, #3544	; 0xdd8
   298d0:	e3400004 	movt	r0, #4
   298d4:	e300227f 	movw	r2, #639	; 0x27f
   298d8:	eb000bf8 	bl	2c8c0 <assertion_failed>

000298dc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   298dc:	e92d4070 	push	{r4, r5, r6, lr}
   298e0:	e1a04000 	mov	r4, r0
   298e4:	e1a06002 	mov	r6, r2
   298e8:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   298ec:	e3a02f89 	mov	r2, #548	; 0x224
   298f0:	e1a05001 	mov	r5, r1
   298f4:	e28d0004 	add	r0, sp, #4
   298f8:	e3a01000 	mov	r1, #0
   298fc:	eb0032c6 	bl	3641c <memset>
   29900:	e3003101 	movw	r3, #257	; 0x101
   29904:	e1cd30b4 	strh	r3, [sp, #4]
   29908:	e3a03006 	mov	r3, #6
   2990c:	e5cd3006 	strb	r3, [sp, #6]
   29910:	e59431cc 	ldr	r3, [r4, #460]	; 0x1cc
   29914:	e58d3008 	str	r3, [sp, #8]
   29918:	e5d431c8 	ldrb	r3, [r4, #456]	; 0x1c8
   2991c:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
   29920:	e1a03383 	lsl	r3, r3, #7
   29924:	e1cd30be 	strh	r3, [sp, #14]
   29928:	e59431d0 	ldr	r3, [r4, #464]	; 0x1d0
   2992c:	e3500000 	cmp	r0, #0
   29930:	e58d3010 	str	r3, [sp, #16]
   29934:	e3083263 	movw	r3, #33379	; 0x8263
   29938:	e3463353 	movt	r3, #25427	; 0x6353
   2993c:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   29940:	0a000017 	beq	299a4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xc8>
   29944:	ebffdad0 	bl	2048c <CNetSubSystem::GetNetDeviceLayer()>
   29948:	ebffe67e 	bl	23348 <CNetDeviceLayer::GetMACAddress() const>
   2994c:	e3500000 	cmp	r0, #0
   29950:	0a000019 	beq	299bc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xe0>
   29954:	e28d1020 	add	r1, sp, #32
   29958:	eb003425 	bl	369f4 <CMACAddress::CopyTo(unsigned char*) const>
   2995c:	e3550000 	cmp	r5, #0
   29960:	0a00001b 	beq	299d4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf8>
   29964:	e3560f4d 	cmp	r6, #308	; 0x134
   29968:	8a00001f 	bhi	299ec <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   2996c:	e1a02006 	mov	r2, r6
   29970:	e1a01005 	mov	r1, r5
   29974:	e28d00f4 	add	r0, sp, #244	; 0xf4
   29978:	eb0032be 	bl	36478 <memcpy>
   2997c:	e3a03000 	mov	r3, #0
   29980:	e3a02f89 	mov	r2, #548	; 0x224
   29984:	e28d1004 	add	r1, sp, #4
   29988:	e2840f43 	add	r0, r4, #268	; 0x10c
   2998c:	ebffdbee 	bl	2094c <CSocket::Send(void const*, unsigned int, int)>
   29990:	e2400f89 	sub	r0, r0, #548	; 0x224
   29994:	e16f0f10 	clz	r0, r0
   29998:	e1a002a0 	lsr	r0, r0, #5
   2999c:	e28ddf8a 	add	sp, sp, #552	; 0x228
   299a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   299a4:	e30117fc 	movw	r1, #6140	; 0x17fc
   299a8:	e3401004 	movt	r1, #4
   299ac:	e3000aa4 	movw	r0, #2724	; 0xaa4
   299b0:	e3400004 	movt	r0, #4
   299b4:	e300225a 	movw	r2, #602	; 0x25a
   299b8:	eb000bc0 	bl	2c8c0 <assertion_failed>
   299bc:	e30117fc 	movw	r1, #6140	; 0x17fc
   299c0:	e3401004 	movt	r1, #4
   299c4:	e3000f50 	movw	r0, #3920	; 0xf50
   299c8:	e3400004 	movt	r0, #4
   299cc:	e3a02f97 	mov	r2, #604	; 0x25c
   299d0:	eb000bba 	bl	2c8c0 <assertion_failed>
   299d4:	e30117fc 	movw	r1, #6140	; 0x17fc
   299d8:	e3401004 	movt	r1, #4
   299dc:	e301082c 	movw	r0, #6188	; 0x182c
   299e0:	e3400004 	movt	r0, #4
   299e4:	e300225f 	movw	r2, #607	; 0x25f
   299e8:	eb000bb4 	bl	2c8c0 <assertion_failed>
   299ec:	e30117fc 	movw	r1, #6140	; 0x17fc
   299f0:	e3401004 	movt	r1, #4
   299f4:	e30108dc 	movw	r0, #6364	; 0x18dc
   299f8:	e3400004 	movt	r0, #4
   299fc:	e3a02e26 	mov	r2, #608	; 0x260
   29a00:	eb000bae 	bl	2c8c0 <assertion_failed>

00029a04 <CDHCPClient::SendDiscover()>:
   29a04:	e3a0c000 	mov	ip, #0
   29a08:	e59f1008 	ldr	r1, [pc, #8]	; 29a18 <CDHCPClient::SendDiscover()+0x14>
   29a0c:	e3a0200c 	mov	r2, #12
   29a10:	e580c1d0 	str	ip, [r0, #464]	; 0x1d0
   29a14:	eaffffb0 	b	298dc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29a18:	00041b54 	.word	0x00041b54

00029a1c <CDHCPClient::SendRequest(unsigned int)>:
   29a1c:	e3510000 	cmp	r1, #0
   29a20:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29a24:	e28080fc 	add	r8, r0, #252	; 0xfc
   29a28:	03043d98 	movweq	r3, #19864	; 0x4d98
   29a2c:	03403004 	movteq	r3, #4
   29a30:	059021b4 	ldreq	r2, [r0, #436]	; 0x1b4
   29a34:	e28db01c 	add	fp, sp, #28
   29a38:	e58011d0 	str	r1, [r0, #464]	; 0x1d0
   29a3c:	e1a05000 	mov	r5, r0
   29a40:	059011b8 	ldreq	r1, [r0, #440]	; 0x1b8
   29a44:	e1a00008 	mov	r0, r8
   29a48:	159f90c8 	ldrne	r9, [pc, #200]	; 29b18 <CDHCPClient::SendRequest(unsigned int)+0xfc>
   29a4c:	03a06018 	moveq	r6, #24
   29a50:	01a09003 	moveq	r9, r3
   29a54:	13a0600c 	movne	r6, #12
   29a58:	05831005 	streq	r1, [r3, #5]
   29a5c:	0583200b 	streq	r2, [r3, #11]
   29a60:	eb002733 	bl	33734 <CString::GetLength() const>
   29a64:	e2504000 	subs	r4, r0, #0
   29a68:	0a00001e 	beq	29ae8 <CDHCPClient::SendRequest(unsigned int)+0xcc>
   29a6c:	e35400ff 	cmp	r4, #255	; 0xff
   29a70:	8a000022 	bhi	29b00 <CDHCPClient::SendRequest(unsigned int)+0xe4>
   29a74:	e0867004 	add	r7, r6, r4
   29a78:	e1a01009 	mov	r1, r9
   29a7c:	e2873009 	add	r3, r7, #9
   29a80:	e1a02006 	mov	r2, r6
   29a84:	e3c33007 	bic	r3, r3, #7
   29a88:	e2877002 	add	r7, r7, #2
   29a8c:	e04dd003 	sub	sp, sp, r3
   29a90:	e1a0000d 	mov	r0, sp
   29a94:	eb003277 	bl	36478 <memcpy>
   29a98:	e2462001 	sub	r2, r6, #1
   29a9c:	e08d3002 	add	r3, sp, r2
   29aa0:	e3a0100c 	mov	r1, #12
   29aa4:	e2836002 	add	r6, r3, #2
   29aa8:	e1a00008 	mov	r0, r8
   29aac:	e7cd1002 	strb	r1, [sp, r2]
   29ab0:	e5c34001 	strb	r4, [r3, #1]
   29ab4:	eb0026e0 	bl	3363c <CString::operator char const*() const>
   29ab8:	e1a02004 	mov	r2, r4
   29abc:	e1a01000 	mov	r1, r0
   29ac0:	e1a00006 	mov	r0, r6
   29ac4:	eb00326b 	bl	36478 <memcpy>
   29ac8:	e3e03000 	mvn	r3, #0
   29acc:	e1a02007 	mov	r2, r7
   29ad0:	e1a0100d 	mov	r1, sp
   29ad4:	e1a00005 	mov	r0, r5
   29ad8:	e7c63004 	strb	r3, [r6, r4]
   29adc:	ebffff7e 	bl	298dc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29ae0:	e24bd01c 	sub	sp, fp, #28
   29ae4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29ae8:	e1a02006 	mov	r2, r6
   29aec:	e1a01009 	mov	r1, r9
   29af0:	e1a00005 	mov	r0, r5
   29af4:	ebffff78 	bl	298dc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29af8:	e24bd01c 	sub	sp, fp, #28
   29afc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29b00:	e30117fc 	movw	r1, #6140	; 0x17fc
   29b04:	e3401004 	movt	r1, #4
   29b08:	e3010904 	movw	r0, #6404	; 0x1904
   29b0c:	e3400004 	movt	r0, #4
   29b10:	e3002233 	movw	r2, #563	; 0x233
   29b14:	eb000b69 	bl	2c8c0 <assertion_failed>
   29b18:	00041b60 	.word	0x00041b60

00029b1c <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   29b1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b20:	e3018950 	movw	r8, #6480	; 0x1950
   29b24:	e3408004 	movt	r8, #4
   29b28:	e59f5184 	ldr	r5, [pc, #388]	; 29cb4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   29b2c:	e24dd014 	sub	sp, sp, #20
   29b30:	e1a04000 	mov	r4, r0
   29b34:	e1a07001 	mov	r7, r1
   29b38:	e285b010 	add	fp, r5, #16
   29b3c:	e245a024 	sub	sl, r5, #36	; 0x24
   29b40:	e58d200c 	str	r2, [sp, #12]
   29b44:	e3570000 	cmp	r7, #0
   29b48:	0a000043 	beq	29c5c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x140>
   29b4c:	e59d100c 	ldr	r1, [sp, #12]
   29b50:	e1a00004 	mov	r0, r4
   29b54:	ebffffb0 	bl	29a1c <CDHCPClient::SendRequest(unsigned int)>
   29b58:	e2203001 	eor	r3, r0, #1
   29b5c:	e6ef3073 	uxtb	r3, r3
   29b60:	e3530000 	cmp	r3, #0
   29b64:	1a000044 	bne	29c7c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x160>
   29b68:	eb00300a 	bl	35b98 <CTimer::Get()>
   29b6c:	eb002d37 	bl	35050 <CTimer::GetTicks() const>
   29b70:	e1a06000 	mov	r6, r0
   29b74:	ea000004 	b	29b8c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x70>
   29b78:	e2422005 	sub	r2, r2, #5
   29b7c:	e3520001 	cmp	r2, #1
   29b80:	9a000018 	bls	29be8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xcc>
   29b84:	eb000a24 	bl	2c41c <CScheduler::Get()>
   29b88:	eb00091f 	bl	2c00c <CScheduler::Yield()>
   29b8c:	eb003001 	bl	35b98 <CTimer::Get()>
   29b90:	eb002d2e 	bl	35050 <CTimer::GetTicks() const>
   29b94:	e5952000 	ldr	r2, [r5]
   29b98:	e1a03000 	mov	r3, r0
   29b9c:	e1a00004 	mov	r0, r4
   29ba0:	e0433006 	sub	r3, r3, r6
   29ba4:	e1530002 	cmp	r3, r2
   29ba8:	2a000011 	bcs	29bf4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xd8>
   29bac:	ebfffee4 	bl	29744 <CDHCPClient::ReceiveMessage()>
   29bb0:	e2509000 	subs	r9, r0, #0
   29bb4:	0afffff2 	beq	29b84 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29bb8:	e5d421e9 	ldrb	r2, [r4, #489]	; 0x1e9
   29bbc:	e3570000 	cmp	r7, #0
   29bc0:	1affffec 	bne	29b78 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x5c>
   29bc4:	e3520002 	cmp	r2, #2
   29bc8:	1affffed 	bne	29b84 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29bcc:	e1a00004 	mov	r0, r4
   29bd0:	ebfffe2c 	bl	29488 <CDHCPClient::CheckConfig()>
   29bd4:	e3500000 	cmp	r0, #0
   29bd8:	0affffe9 	beq	29b84 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29bdc:	e59421ec 	ldr	r2, [r4, #492]	; 0x1ec
   29be0:	e3520000 	cmp	r2, #0
   29be4:	0affffe6 	beq	29b84 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29be8:	e1a00009 	mov	r0, r9
   29bec:	e28dd014 	add	sp, sp, #20
   29bf0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bf4:	eb0015ae 	bl	2f2b4 <CLogger::Get()>
   29bf8:	e2855004 	add	r5, r5, #4
   29bfc:	e1a03008 	mov	r3, r8
   29c00:	e3a02002 	mov	r2, #2
   29c04:	e1a0100a 	mov	r1, sl
   29c08:	eb001777 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29c0c:	e155000b 	cmp	r5, fp
   29c10:	1affffcb 	bne	29b44 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x28>
   29c14:	eb0015a6 	bl	2f2b4 <CLogger::Get()>
   29c18:	e3570000 	cmp	r7, #0
   29c1c:	e3012938 	movw	r2, #6456	; 0x1938
   29c20:	e3402004 	movt	r2, #4
   29c24:	e301192c 	movw	r1, #6444	; 0x192c
   29c28:	e3401004 	movt	r1, #4
   29c2c:	01a0c002 	moveq	ip, r2
   29c30:	11a0c001 	movne	ip, r1
   29c34:	e3013974 	movw	r3, #6516	; 0x1974
   29c38:	e3403004 	movt	r3, #4
   29c3c:	e59f1074 	ldr	r1, [pc, #116]	; 29cb8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   29c40:	e3a02002 	mov	r2, #2
   29c44:	e58dc000 	str	ip, [sp]
   29c48:	eb001767 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29c4c:	e3a09000 	mov	r9, #0
   29c50:	e1a00009 	mov	r0, r9
   29c54:	e28dd014 	add	sp, sp, #20
   29c58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c5c:	e59f1058 	ldr	r1, [pc, #88]	; 29cbc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   29c60:	e3a0200c 	mov	r2, #12
   29c64:	e1a00004 	mov	r0, r4
   29c68:	e58471d0 	str	r7, [r4, #464]	; 0x1d0
   29c6c:	ebffff1a 	bl	298dc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29c70:	e2203001 	eor	r3, r0, #1
   29c74:	e6ef3073 	uxtb	r3, r3
   29c78:	eaffffb8 	b	29b60 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x44>
   29c7c:	eb00158c 	bl	2f2b4 <CLogger::Get()>
   29c80:	e3570000 	cmp	r7, #0
   29c84:	e3012918 	movw	r2, #6424	; 0x1918
   29c88:	e3402004 	movt	r2, #4
   29c8c:	e59f1024 	ldr	r1, [pc, #36]	; 29cb8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   29c90:	e3013920 	movw	r3, #6432	; 0x1920
   29c94:	e3403004 	movt	r3, #4
   29c98:	11a03002 	movne	r3, r2
   29c9c:	e3a02001 	mov	r2, #1
   29ca0:	e58d3000 	str	r3, [sp]
   29ca4:	e3013940 	movw	r3, #6464	; 0x1940
   29ca8:	e3403004 	movt	r3, #4
   29cac:	eb00174e 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29cb0:	eaffffe5 	b	29c4c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x130>
   29cb4:	00041b70 	.word	0x00041b70
   29cb8:	00041b4c 	.word	0x00041b4c
   29cbc:	00041b54 	.word	0x00041b54

00029cc0 <CDHCPClient::SelectAndRequest()>:
   29cc0:	e92d4070 	push	{r4, r5, r6, lr}
   29cc4:	e1a04000 	mov	r4, r0
   29cc8:	e3a06001 	mov	r6, #1
   29ccc:	e24dd028 	sub	sp, sp, #40	; 0x28
   29cd0:	e2845f43 	add	r5, r4, #268	; 0x10c
   29cd4:	e28d0008 	add	r0, sp, #8
   29cd8:	e5c461c8 	strb	r6, [r4, #456]	; 0x1c8
   29cdc:	ebfffa0e 	bl	2851c <CIPAddress::CIPAddress()>
   29ce0:	e28d0008 	add	r0, sp, #8
   29ce4:	ebfffad9 	bl	28850 <CIPAddress::SetBroadcast()>
   29ce8:	e3a02043 	mov	r2, #67	; 0x43
   29cec:	e28d1008 	add	r1, sp, #8
   29cf0:	e1a00005 	mov	r0, r5
   29cf4:	ebffdaa0 	bl	2077c <CSocket::Connect(CIPAddress&, unsigned short)>
   29cf8:	e3500000 	cmp	r0, #0
   29cfc:	ba00006b 	blt	29eb0 <CDHCPClient::SelectAndRequest()+0x1f0>
   29d00:	e1a00005 	mov	r0, r5
   29d04:	e1a01006 	mov	r1, r6
   29d08:	ebffdbc3 	bl	20c1c <CSocket::SetOptionBroadcast(bool)>
   29d0c:	e2505000 	subs	r5, r0, #0
   29d10:	1a00005a 	bne	29e80 <CDHCPClient::SelectAndRequest()+0x1c0>
   29d14:	e1a00004 	mov	r0, r4
   29d18:	ebfffe38 	bl	29600 <CDHCPClient::GetXID() const>
   29d1c:	e1a02005 	mov	r2, r5
   29d20:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   29d24:	e1a01005 	mov	r1, r5
   29d28:	e1a00004 	mov	r0, r4
   29d2c:	ebffff7a 	bl	29b1c <CDHCPClient::SendAndReceive(bool, unsigned int)>
   29d30:	e3500000 	cmp	r0, #0
   29d34:	0a000066 	beq	29ed4 <CDHCPClient::SelectAndRequest()+0x214>
   29d38:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   29d3c:	e58431b4 	str	r3, [r4, #436]	; 0x1b4
   29d40:	e3530000 	cmp	r3, #0
   29d44:	0a00006e 	beq	29f04 <CDHCPClient::SelectAndRequest()+0x244>
   29d48:	e59431ec 	ldr	r3, [r4, #492]	; 0x1ec
   29d4c:	e58431b8 	str	r3, [r4, #440]	; 0x1b8
   29d50:	e3530000 	cmp	r3, #0
   29d54:	0a000077 	beq	29f38 <CDHCPClient::SelectAndRequest()+0x278>
   29d58:	e1a02005 	mov	r2, r5
   29d5c:	e1a01006 	mov	r1, r6
   29d60:	e1a00004 	mov	r0, r4
   29d64:	ebffff6c 	bl	29b1c <CDHCPClient::SendAndReceive(bool, unsigned int)>
   29d68:	e3500000 	cmp	r0, #0
   29d6c:	0a000058 	beq	29ed4 <CDHCPClient::SelectAndRequest()+0x214>
   29d70:	e5d431e9 	ldrb	r3, [r4, #489]	; 0x1e9
   29d74:	e3530006 	cmp	r3, #6
   29d78:	0a000074 	beq	29f50 <CDHCPClient::SelectAndRequest()+0x290>
   29d7c:	e1a00004 	mov	r0, r4
   29d80:	ebfffdc0 	bl	29488 <CDHCPClient::CheckConfig()>
   29d84:	e3500000 	cmp	r0, #0
   29d88:	0a000053 	beq	29edc <CDHCPClient::SelectAndRequest()+0x21c>
   29d8c:	e59421b4 	ldr	r2, [r4, #436]	; 0x1b4
   29d90:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   29d94:	e1520003 	cmp	r2, r3
   29d98:	1a00005f 	bne	29f1c <CDHCPClient::SelectAndRequest()+0x25c>
   29d9c:	e59421b8 	ldr	r2, [r4, #440]	; 0x1b8
   29da0:	e59431ec 	ldr	r3, [r4, #492]	; 0x1ec
   29da4:	e1520003 	cmp	r2, r3
   29da8:	1a00004d 	bne	29ee4 <CDHCPClient::SelectAndRequest()+0x224>
   29dac:	e28d0010 	add	r0, sp, #16
   29db0:	ebfff9d9 	bl	2851c <CIPAddress::CIPAddress()>
   29db4:	e59411b4 	ldr	r1, [r4, #436]	; 0x1b4
   29db8:	e28d0010 	add	r0, sp, #16
   29dbc:	ebfffa80 	bl	287c4 <CIPAddress::Set(unsigned int)>
   29dc0:	e28d0018 	add	r0, sp, #24
   29dc4:	eb0025e4 	bl	3355c <CString::CString()>
   29dc8:	e28d1018 	add	r1, sp, #24
   29dcc:	e28d0010 	add	r0, sp, #16
   29dd0:	ebfffaf2 	bl	289a0 <CIPAddress::Format(CString*) const>
   29dd4:	eb001536 	bl	2f2b4 <CLogger::Get()>
   29dd8:	e1a05000 	mov	r5, r0
   29ddc:	e28d0018 	add	r0, sp, #24
   29de0:	eb002615 	bl	3363c <CString::operator char const*() const>
   29de4:	e59f11a4 	ldr	r1, [pc, #420]	; 29f90 <CDHCPClient::SelectAndRequest()+0x2d0>
   29de8:	e58d0000 	str	r0, [sp]
   29dec:	e3a02003 	mov	r2, #3
   29df0:	e1a00005 	mov	r0, r5
   29df4:	e3013a50 	movw	r3, #6736	; 0x1a50
   29df8:	e3403004 	movt	r3, #4
   29dfc:	eb0016fa 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29e00:	e59400f8 	ldr	r0, [r4, #248]	; 0xf8
   29e04:	e3500000 	cmp	r0, #0
   29e08:	0a000058 	beq	29f70 <CDHCPClient::SelectAndRequest()+0x2b0>
   29e0c:	e59411b4 	ldr	r1, [r4, #436]	; 0x1b4
   29e10:	ebfff951 	bl	2835c <CNetConfig::SetIPAddress(unsigned int)>
   29e14:	e59411d8 	ldr	r1, [r4, #472]	; 0x1d8
   29e18:	e59400f8 	ldr	r0, [r4, #248]	; 0xf8
   29e1c:	ebfff961 	bl	283a8 <CNetConfig::SetNetMask(unsigned int)>
   29e20:	e59411dc 	ldr	r1, [r4, #476]	; 0x1dc
   29e24:	e59400f8 	ldr	r0, [r4, #248]	; 0xf8
   29e28:	ebfff971 	bl	283f4 <CNetConfig::SetDefaultGateway(unsigned int)>
   29e2c:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   29e30:	e59400f8 	ldr	r0, [r4, #248]	; 0xf8
   29e34:	ebfff970 	bl	283fc <CNetConfig::SetDNSServer(unsigned int)>
   29e38:	e2843f79 	add	r3, r4, #484	; 0x1e4
   29e3c:	eddf2b51 	vldr	d18, [pc, #324]	; 29f88 <CDHCPClient::SelectAndRequest()+0x2c8>
   29e40:	e28d0018 	add	r0, sp, #24
   29e44:	f463078f 	vld1.32	{d16}, [r3]
   29e48:	e2843f7b 	add	r3, r4, #492	; 0x1ec
   29e4c:	f463178f 	vld1.32	{d17}, [r3]
   29e50:	e2843f6f 	add	r3, r4, #444	; 0x1bc
   29e54:	f3f009a2 	vtbl.8	d16, {d16-d17}, d18
   29e58:	f443078f 	vst1.32	{d16}, [r3]
   29e5c:	e59431f4 	ldr	r3, [r4, #500]	; 0x1f4
   29e60:	e58431c4 	str	r3, [r4, #452]	; 0x1c4
   29e64:	e3a03001 	mov	r3, #1
   29e68:	e5c431ac 	strb	r3, [r4, #428]	; 0x1ac
   29e6c:	e3a04000 	mov	r4, #0
   29e70:	eb002586 	bl	33490 <CString::~CString()>
   29e74:	e28d0010 	add	r0, sp, #16
   29e78:	ebfff9ce 	bl	285b8 <CIPAddress::~CIPAddress()>
   29e7c:	ea000006 	b	29e9c <CDHCPClient::SelectAndRequest()+0x1dc>
   29e80:	eb00150b 	bl	2f2b4 <CLogger::Get()>
   29e84:	e30139ac 	movw	r3, #6572	; 0x19ac
   29e88:	e3403004 	movt	r3, #4
   29e8c:	e59f10fc 	ldr	r1, [pc, #252]	; 29f90 <CDHCPClient::SelectAndRequest()+0x2d0>
   29e90:	e1a02006 	mov	r2, r6
   29e94:	eb0016d4 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29e98:	e3a04001 	mov	r4, #1
   29e9c:	e28d0008 	add	r0, sp, #8
   29ea0:	ebfff9c4 	bl	285b8 <CIPAddress::~CIPAddress()>
   29ea4:	e1a00004 	mov	r0, r4
   29ea8:	e28dd028 	add	sp, sp, #40	; 0x28
   29eac:	e8bd8070 	pop	{r4, r5, r6, pc}
   29eb0:	eb0014ff 	bl	2f2b4 <CLogger::Get()>
   29eb4:	e3a03043 	mov	r3, #67	; 0x43
   29eb8:	e59f10d0 	ldr	r1, [pc, #208]	; 29f90 <CDHCPClient::SelectAndRequest()+0x2d0>
   29ebc:	e1a02006 	mov	r2, r6
   29ec0:	e58d3000 	str	r3, [sp]
   29ec4:	e3013988 	movw	r3, #6536	; 0x1988
   29ec8:	e3403004 	movt	r3, #4
   29ecc:	eb0016c6 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29ed0:	eafffff0 	b	29e98 <CDHCPClient::SelectAndRequest()+0x1d8>
   29ed4:	e3a04002 	mov	r4, #2
   29ed8:	eaffffef 	b	29e9c <CDHCPClient::SelectAndRequest()+0x1dc>
   29edc:	e3a04004 	mov	r4, #4
   29ee0:	eaffffed 	b	29e9c <CDHCPClient::SelectAndRequest()+0x1dc>
   29ee4:	eb0014f2 	bl	2f2b4 <CLogger::Get()>
   29ee8:	e3013a30 	movw	r3, #6704	; 0x1a30
   29eec:	e3403004 	movt	r3, #4
   29ef0:	e59f1098 	ldr	r1, [pc, #152]	; 29f90 <CDHCPClient::SelectAndRequest()+0x2d0>
   29ef4:	e3a02002 	mov	r2, #2
   29ef8:	eb0016bb 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29efc:	e3a04005 	mov	r4, #5
   29f00:	eaffffe5 	b	29e9c <CDHCPClient::SelectAndRequest()+0x1dc>
   29f04:	e30117fc 	movw	r1, #6140	; 0x17fc
   29f08:	e3401004 	movt	r1, #4
   29f0c:	e30109c8 	movw	r0, #6600	; 0x19c8
   29f10:	e3400004 	movt	r0, #4
   29f14:	e3a020fb 	mov	r2, #251	; 0xfb
   29f18:	eb000a68 	bl	2c8c0 <assertion_failed>
   29f1c:	eb0014e4 	bl	2f2b4 <CLogger::Get()>
   29f20:	e59f1068 	ldr	r1, [pc, #104]	; 29f90 <CDHCPClient::SelectAndRequest()+0x2d0>
   29f24:	e3a02002 	mov	r2, #2
   29f28:	e3013a18 	movw	r3, #6680	; 0x1a18
   29f2c:	e3403004 	movt	r3, #4
   29f30:	eb0016ad 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29f34:	eafffff0 	b	29efc <CDHCPClient::SelectAndRequest()+0x23c>
   29f38:	e30117fc 	movw	r1, #6140	; 0x17fc
   29f3c:	e3401004 	movt	r1, #4
   29f40:	e30109e0 	movw	r0, #6624	; 0x19e0
   29f44:	e3400004 	movt	r0, #4
   29f48:	e3a020fe 	mov	r2, #254	; 0xfe
   29f4c:	eb000a5b 	bl	2c8c0 <assertion_failed>
   29f50:	eb0014d7 	bl	2f2b4 <CLogger::Get()>
   29f54:	e59f1034 	ldr	r1, [pc, #52]	; 29f90 <CDHCPClient::SelectAndRequest()+0x2d0>
   29f58:	e3a02002 	mov	r2, #2
   29f5c:	e30139fc 	movw	r3, #6652	; 0x19fc
   29f60:	e3403004 	movt	r3, #4
   29f64:	e3a04003 	mov	r4, #3
   29f68:	eb00169f 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29f6c:	eaffffca 	b	29e9c <CDHCPClient::SelectAndRequest()+0x1dc>
   29f70:	e30117fc 	movw	r1, #6140	; 0x17fc
   29f74:	e3401004 	movt	r1, #4
   29f78:	e3000b08 	movw	r0, #2824	; 0xb08
   29f7c:	e3400004 	movt	r0, #4
   29f80:	e3a02f4a 	mov	r2, #296	; 0x128
   29f84:	eb000a4d 	bl	2c8c0 <assertion_failed>
   29f88:	03020100 	.word	0x03020100
   29f8c:	0f0e0d0c 	.word	0x0f0e0d0c
   29f90:	00041b4c 	.word	0x00041b4c

00029f94 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>:
   29f94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29f98:	e1a04001 	mov	r4, r1
   29f9c:	e1a05000 	mov	r5, r0
   29fa0:	e24dd010 	sub	sp, sp, #16
   29fa4:	e1a06002 	mov	r6, r2
   29fa8:	eb0014c1 	bl	2f2b4 <CLogger::Get()>
   29fac:	e3540000 	cmp	r4, #0
   29fb0:	0a000040 	beq	2a0b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x124>
   29fb4:	e59f12fc 	ldr	r1, [pc, #764]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   29fb8:	e3a02004 	mov	r2, #4
   29fbc:	e28d8008 	add	r8, sp, #8
   29fc0:	e3017a64 	movw	r7, #6756	; 0x1a64
   29fc4:	e3407004 	movt	r7, #4
   29fc8:	e3013b00 	movw	r3, #6912	; 0x1b00
   29fcc:	e3403004 	movt	r3, #4
   29fd0:	e58d7000 	str	r7, [sp]
   29fd4:	eb001684 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29fd8:	e1a00008 	mov	r0, r8
   29fdc:	ebfff94e 	bl	2851c <CIPAddress::CIPAddress()>
   29fe0:	e3a03000 	mov	r3, #0
   29fe4:	e59511b8 	ldr	r1, [r5, #440]	; 0x1b8
   29fe8:	e1a00008 	mov	r0, r8
   29fec:	e5c531c8 	strb	r3, [r5, #456]	; 0x1c8
   29ff0:	ebfff9f3 	bl	287c4 <CIPAddress::Set(unsigned int)>
   29ff4:	e2854f43 	add	r4, r5, #268	; 0x10c
   29ff8:	e3a02043 	mov	r2, #67	; 0x43
   29ffc:	e1a01008 	mov	r1, r8
   2a000:	e1a00004 	mov	r0, r4
   2a004:	ebffd9dc 	bl	2077c <CSocket::Connect(CIPAddress&, unsigned short)>
   2a008:	e3500000 	cmp	r0, #0
   2a00c:	ba000039 	blt	2a0f8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x164>
   2a010:	e5d511c8 	ldrb	r1, [r5, #456]	; 0x1c8
   2a014:	e1a00004 	mov	r0, r4
   2a018:	ebffdaff 	bl	20c1c <CSocket::SetOptionBroadcast(bool)>
   2a01c:	e3500000 	cmp	r0, #0
   2a020:	0a000018 	beq	2a088 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0xf4>
   2a024:	ea000084 	b	2a23c <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x2a8>
   2a028:	e1a00005 	mov	r0, r5
   2a02c:	ebfffd73 	bl	29600 <CDHCPClient::GetXID() const>
   2a030:	e59521b4 	ldr	r2, [r5, #436]	; 0x1b4
   2a034:	e1a03000 	mov	r3, r0
   2a038:	e3a01001 	mov	r1, #1
   2a03c:	e1a00005 	mov	r0, r5
   2a040:	e58531cc 	str	r3, [r5, #460]	; 0x1cc
   2a044:	ebfffeb4 	bl	29b1c <CDHCPClient::SendAndReceive(bool, unsigned int)>
   2a048:	e3500000 	cmp	r0, #0
   2a04c:	1a00003a 	bne	2a13c <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x1a8>
   2a050:	eb002ed0 	bl	35b98 <CTimer::Get()>
   2a054:	eb002bff 	bl	35058 <CTimer::GetUptime() const>
   2a058:	e59511b0 	ldr	r1, [r5, #432]	; 0x1b0
   2a05c:	e0403001 	sub	r3, r0, r1
   2a060:	e1530006 	cmp	r3, r6
   2a064:	2a00000d 	bcs	2a0a0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x10c>
   2a068:	e0811006 	add	r1, r1, r6
   2a06c:	e0411000 	sub	r1, r1, r0
   2a070:	e3510077 	cmp	r1, #119	; 0x77
   2a074:	81a040a1 	lsrhi	r4, r1, #1
   2a078:	93a0403c 	movls	r4, #60	; 0x3c
   2a07c:	eb0008e6 	bl	2c41c <CScheduler::Get()>
   2a080:	e1a01004 	mov	r1, r4
   2a084:	eb000895 	bl	2c2e0 <CScheduler::Sleep(unsigned int)>
   2a088:	eb002ec2 	bl	35b98 <CTimer::Get()>
   2a08c:	eb002bf1 	bl	35058 <CTimer::GetUptime() const>
   2a090:	e59531b0 	ldr	r3, [r5, #432]	; 0x1b0
   2a094:	e0400003 	sub	r0, r0, r3
   2a098:	e1560000 	cmp	r6, r0
   2a09c:	8affffe1 	bhi	2a028 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x94>
   2a0a0:	e3a04002 	mov	r4, #2
   2a0a4:	e1a00008 	mov	r0, r8
   2a0a8:	ebfff942 	bl	285b8 <CIPAddress::~CIPAddress()>
   2a0ac:	e1a00004 	mov	r0, r4
   2a0b0:	e28dd010 	add	sp, sp, #16
   2a0b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a0b8:	e59f11f8 	ldr	r1, [pc, #504]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a0bc:	e3a02004 	mov	r2, #4
   2a0c0:	e28d8008 	add	r8, sp, #8
   2a0c4:	e3017a70 	movw	r7, #6768	; 0x1a70
   2a0c8:	e3407004 	movt	r7, #4
   2a0cc:	e3013b00 	movw	r3, #6912	; 0x1b00
   2a0d0:	e3403004 	movt	r3, #4
   2a0d4:	e58d7000 	str	r7, [sp]
   2a0d8:	eb001643 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a0dc:	e1a00008 	mov	r0, r8
   2a0e0:	ebfff90d 	bl	2851c <CIPAddress::CIPAddress()>
   2a0e4:	e3a03001 	mov	r3, #1
   2a0e8:	e1a00008 	mov	r0, r8
   2a0ec:	e5c531c8 	strb	r3, [r5, #456]	; 0x1c8
   2a0f0:	ebfff9d6 	bl	28850 <CIPAddress::SetBroadcast()>
   2a0f4:	eaffffbe 	b	29ff4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x60>
   2a0f8:	eb00146d 	bl	2f2b4 <CLogger::Get()>
   2a0fc:	e5d511c8 	ldrb	r1, [r5, #456]	; 0x1c8
   2a100:	e3012a7c 	movw	r2, #6780	; 0x1a7c
   2a104:	e3402004 	movt	r2, #4
   2a108:	e3510000 	cmp	r1, #0
   2a10c:	e3a0c043 	mov	ip, #67	; 0x43
   2a110:	e3013a84 	movw	r3, #6788	; 0x1a84
   2a114:	e3403004 	movt	r3, #4
   2a118:	e59f1198 	ldr	r1, [pc, #408]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a11c:	11a03002 	movne	r3, r2
   2a120:	e3a02001 	mov	r2, #1
   2a124:	e88d1008 	stm	sp, {r3, ip}
   2a128:	e3013a88 	movw	r3, #6792	; 0x1a88
   2a12c:	e3403004 	movt	r3, #4
   2a130:	eb00162d 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a134:	e3a04001 	mov	r4, #1
   2a138:	eaffffd9 	b	2a0a4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a13c:	e5d531e9 	ldrb	r3, [r5, #489]	; 0x1e9
   2a140:	e3530006 	cmp	r3, #6
   2a144:	0a000043 	beq	2a258 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x2c4>
   2a148:	e1a00005 	mov	r0, r5
   2a14c:	ebfffccd 	bl	29488 <CDHCPClient::CheckConfig()>
   2a150:	e3500000 	cmp	r0, #0
   2a154:	0a00004d 	beq	2a290 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x2fc>
   2a158:	e59531ec 	ldr	r3, [r5, #492]	; 0x1ec
   2a15c:	e58531b8 	str	r3, [r5, #440]	; 0x1b8
   2a160:	e3530000 	cmp	r3, #0
   2a164:	0a000043 	beq	2a278 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x2e4>
   2a168:	e59500f8 	ldr	r0, [r5, #248]	; 0xf8
   2a16c:	e3500000 	cmp	r0, #0
   2a170:	0a000048 	beq	2a298 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x304>
   2a174:	ebfff8cc 	bl	284ac <CNetConfig::GetIPAddress() const>
   2a178:	e59511d4 	ldr	r1, [r5, #468]	; 0x1d4
   2a17c:	ebfff97e 	bl	2877c <CIPAddress::operator!=(unsigned int) const>
   2a180:	e3500000 	cmp	r0, #0
   2a184:	0a000019 	beq	2a1f0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x25c>
   2a188:	e59500f8 	ldr	r0, [r5, #248]	; 0xf8
   2a18c:	ebfff8ca 	bl	284bc <CNetConfig::GetNetMask() const>
   2a190:	e59531d8 	ldr	r3, [r5, #472]	; 0x1d8
   2a194:	e5902000 	ldr	r2, [r0]
   2a198:	e1520003 	cmp	r2, r3
   2a19c:	0a000013 	beq	2a1f0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x25c>
   2a1a0:	e59500f8 	ldr	r0, [r5, #248]	; 0xf8
   2a1a4:	ebfff8c6 	bl	284c4 <CNetConfig::GetDefaultGateway() const>
   2a1a8:	e59511dc 	ldr	r1, [r5, #476]	; 0x1dc
   2a1ac:	ebfff972 	bl	2877c <CIPAddress::operator!=(unsigned int) const>
   2a1b0:	e3500000 	cmp	r0, #0
   2a1b4:	0a00000d 	beq	2a1f0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x25c>
   2a1b8:	e59500f8 	ldr	r0, [r5, #248]	; 0xf8
   2a1bc:	ebfff8c2 	bl	284cc <CNetConfig::GetDNSServer() const>
   2a1c0:	e59511e0 	ldr	r1, [r5, #480]	; 0x1e0
   2a1c4:	ebfff96c 	bl	2877c <CIPAddress::operator!=(unsigned int) const>
   2a1c8:	e3500000 	cmp	r0, #0
   2a1cc:	0a000007 	beq	2a1f0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x25c>
   2a1d0:	eb001437 	bl	2f2b4 <CLogger::Get()>
   2a1d4:	e59f10dc 	ldr	r1, [pc, #220]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a1d8:	e3a02002 	mov	r2, #2
   2a1dc:	e3013acc 	movw	r3, #6860	; 0x1acc
   2a1e0:	e3403004 	movt	r3, #4
   2a1e4:	e3a04005 	mov	r4, #5
   2a1e8:	eb0015ff 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a1ec:	eaffffac 	b	2a0a4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a1f0:	e2852f79 	add	r2, r5, #484	; 0x1e4
   2a1f4:	e2853f7b 	add	r3, r5, #492	; 0x1ec
   2a1f8:	eddf2b2c 	vldr	d18, [pc, #176]	; 2a2b0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x31c>
   2a1fc:	e3a04000 	mov	r4, #0
   2a200:	f463178f 	vld1.32	{d17}, [r3]
   2a204:	e2853f6f 	add	r3, r5, #444	; 0x1bc
   2a208:	f462078f 	vld1.32	{d16}, [r2]
   2a20c:	f3f009a2 	vtbl.8	d16, {d16-d17}, d18
   2a210:	f443078f 	vst1.32	{d16}, [r3]
   2a214:	e59531f4 	ldr	r3, [r5, #500]	; 0x1f4
   2a218:	e58531c4 	str	r3, [r5, #452]	; 0x1c4
   2a21c:	eb001424 	bl	2f2b4 <CLogger::Get()>
   2a220:	e59f1090 	ldr	r1, [pc, #144]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a224:	e3a02004 	mov	r2, #4
   2a228:	e58d7000 	str	r7, [sp]
   2a22c:	e3013af0 	movw	r3, #6896	; 0x1af0
   2a230:	e3403004 	movt	r3, #4
   2a234:	eb0015ec 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a238:	eaffff99 	b	2a0a4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a23c:	eb00141c 	bl	2f2b4 <CLogger::Get()>
   2a240:	e59f1070 	ldr	r1, [pc, #112]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a244:	e3a02001 	mov	r2, #1
   2a248:	e30139ac 	movw	r3, #6572	; 0x19ac
   2a24c:	e3403004 	movt	r3, #4
   2a250:	eb0015e5 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a254:	eaffffb6 	b	2a134 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x1a0>
   2a258:	eb001415 	bl	2f2b4 <CLogger::Get()>
   2a25c:	e59f1054 	ldr	r1, [pc, #84]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a260:	e3a02002 	mov	r2, #2
   2a264:	e30139fc 	movw	r3, #6652	; 0x19fc
   2a268:	e3403004 	movt	r3, #4
   2a26c:	e3a04003 	mov	r4, #3
   2a270:	eb0015dd 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a274:	eaffff8a 	b	2a0a4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a278:	eb00140d 	bl	2f2b4 <CLogger::Get()>
   2a27c:	e3013aac 	movw	r3, #6828	; 0x1aac
   2a280:	e3403004 	movt	r3, #4
   2a284:	e59f102c 	ldr	r1, [pc, #44]	; 2a2b8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a288:	e3a02002 	mov	r2, #2
   2a28c:	eb0015d6 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a290:	e3a04004 	mov	r4, #4
   2a294:	eaffff82 	b	2a0a4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a298:	e30117fc 	movw	r1, #6140	; 0x17fc
   2a29c:	e3401004 	movt	r1, #4
   2a2a0:	e3000b08 	movw	r0, #2824	; 0xb08
   2a2a4:	e3400004 	movt	r0, #4
   2a2a8:	e3002197 	movw	r2, #407	; 0x197
   2a2ac:	eb000983 	bl	2c8c0 <assertion_failed>
   2a2b0:	03020100 	.word	0x03020100
   2a2b4:	0f0e0d0c 	.word	0x0f0e0d0c
   2a2b8:	00041b4c 	.word	0x00041b4c

0002a2bc <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   2a2bc:	e92d4070 	push	{r4, r5, r6, lr}
   2a2c0:	e1a04000 	mov	r4, r0
   2a2c4:	e1a05002 	mov	r5, r2
   2a2c8:	e1a06001 	mov	r6, r1
   2a2cc:	eb002e31 	bl	35b98 <CTimer::Get()>
   2a2d0:	eb002b60 	bl	35058 <CTimer::GetUptime() const>
   2a2d4:	e59431b0 	ldr	r3, [r4, #432]	; 0x1b0
   2a2d8:	e0400003 	sub	r0, r0, r3
   2a2dc:	e1500005 	cmp	r0, r5
   2a2e0:	2a000004 	bcs	2a2f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x3c>
   2a2e4:	e1a02005 	mov	r2, r5
   2a2e8:	e1a01006 	mov	r1, r6
   2a2ec:	e1a00004 	mov	r0, r4
   2a2f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   2a2f4:	eaffff26 	b	29f94 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>
   2a2f8:	e3a00002 	mov	r0, #2
   2a2fc:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a300 <CDHCPClient::Run()>:
   2a300:	e92d4070 	push	{r4, r5, r6, lr}
   2a304:	e2804f43 	add	r4, r0, #268	; 0x10c
   2a308:	e3a01044 	mov	r1, #68	; 0x44
   2a30c:	e24dde23 	sub	sp, sp, #560	; 0x230
   2a310:	e1a05000 	mov	r5, r0
   2a314:	e1a00004 	mov	r0, r4
   2a318:	ebffd900 	bl	20720 <CSocket::Bind(unsigned short)>
   2a31c:	e3500000 	cmp	r0, #0
   2a320:	aa000007 	bge	2a344 <CDHCPClient::Run()+0x44>
   2a324:	ea000056 	b	2a484 <CDHCPClient::Run()+0x184>
   2a328:	e2400002 	sub	r0, r0, #2
   2a32c:	e6ef0070 	uxtb	r0, r0
   2a330:	e3500003 	cmp	r0, #3
   2a334:	8a000016 	bhi	2a394 <CDHCPClient::Run()+0x94>
   2a338:	eb000837 	bl	2c41c <CScheduler::Get()>
   2a33c:	e3a0103c 	mov	r1, #60	; 0x3c
   2a340:	eb0007e6 	bl	2c2e0 <CScheduler::Sleep(unsigned int)>
   2a344:	e1a00005 	mov	r0, r5
   2a348:	ebfffe5c 	bl	29cc0 <CDHCPClient::SelectAndRequest()>
   2a34c:	e3500001 	cmp	r0, #1
   2a350:	1afffff4 	bne	2a328 <CDHCPClient::Run()+0x28>
   2a354:	e28dde23 	add	sp, sp, #560	; 0x230
   2a358:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a35c:	e59561c4 	ldr	r6, [r5, #452]	; 0x1c4
   2a360:	eb002e0c 	bl	35b98 <CTimer::Get()>
   2a364:	eb002b3b 	bl	35058 <CTimer::GetUptime() const>
   2a368:	e59531b0 	ldr	r3, [r5, #432]	; 0x1b0
   2a36c:	e0403003 	sub	r3, r0, r3
   2a370:	e1560003 	cmp	r6, r3
   2a374:	9a000029 	bls	2a420 <CDHCPClient::Run()+0x120>
   2a378:	e1a02006 	mov	r2, r6
   2a37c:	e3a01001 	mov	r1, #1
   2a380:	e1a00005 	mov	r0, r5
   2a384:	ebffff02 	bl	29f94 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>
   2a388:	e3500001 	cmp	r0, #1
   2a38c:	0afffff0 	beq	2a354 <CDHCPClient::Run()+0x54>
   2a390:	8a000017 	bhi	2a3f4 <CDHCPClient::Run()+0xf4>
   2a394:	eb002dff 	bl	35b98 <CTimer::Get()>
   2a398:	eb002b2e 	bl	35058 <CTimer::GetUptime() const>
   2a39c:	e58501b0 	str	r0, [r5, #432]	; 0x1b0
   2a3a0:	eb002dfc 	bl	35b98 <CTimer::Get()>
   2a3a4:	eb002b2b 	bl	35058 <CTimer::GetUptime() const>
   2a3a8:	e59521b0 	ldr	r2, [r5, #432]	; 0x1b0
   2a3ac:	e59531c0 	ldr	r3, [r5, #448]	; 0x1c0
   2a3b0:	e0400002 	sub	r0, r0, r2
   2a3b4:	e1500003 	cmp	r0, r3
   2a3b8:	3a000002 	bcc	2a3c8 <CDHCPClient::Run()+0xc8>
   2a3bc:	eaffffe6 	b	2a35c <CDHCPClient::Run()+0x5c>
   2a3c0:	eb000815 	bl	2c41c <CScheduler::Get()>
   2a3c4:	eb000710 	bl	2c00c <CScheduler::Yield()>
   2a3c8:	e3a03040 	mov	r3, #64	; 0x40
   2a3cc:	e3a02f89 	mov	r2, #548	; 0x224
   2a3d0:	e28d100c 	add	r1, sp, #12
   2a3d4:	e1a00004 	mov	r0, r4
   2a3d8:	ebffd979 	bl	209c4 <CSocket::Receive(void*, unsigned int, int)>
   2a3dc:	e3500000 	cmp	r0, #0
   2a3e0:	cafffff6 	bgt	2a3c0 <CDHCPClient::Run()+0xc0>
   2a3e4:	eb00080c 	bl	2c41c <CScheduler::Get()>
   2a3e8:	e3a0100a 	mov	r1, #10
   2a3ec:	eb0007bb 	bl	2c2e0 <CScheduler::Sleep(unsigned int)>
   2a3f0:	eaffffea 	b	2a3a0 <CDHCPClient::Run()+0xa0>
   2a3f4:	e2403003 	sub	r3, r0, #3
   2a3f8:	e6ef3073 	uxtb	r3, r3
   2a3fc:	e3530002 	cmp	r3, #2
   2a400:	8a000006 	bhi	2a420 <CDHCPClient::Run()+0x120>
   2a404:	e59500f8 	ldr	r0, [r5, #248]	; 0xf8
   2a408:	e3a03000 	mov	r3, #0
   2a40c:	e5c531ac 	strb	r3, [r5, #428]	; 0x1ac
   2a410:	e1500003 	cmp	r0, r3
   2a414:	0a000024 	beq	2a4ac <CDHCPClient::Run()+0x1ac>
   2a418:	ebfff7ad 	bl	282d4 <CNetConfig::Reset()>
   2a41c:	eaffffc8 	b	2a344 <CDHCPClient::Run()+0x44>
   2a420:	e59561bc 	ldr	r6, [r5, #444]	; 0x1bc
   2a424:	eb002ddb 	bl	35b98 <CTimer::Get()>
   2a428:	eb002b0a 	bl	35058 <CTimer::GetUptime() const>
   2a42c:	e59531b0 	ldr	r3, [r5, #432]	; 0x1b0
   2a430:	e0403003 	sub	r3, r0, r3
   2a434:	e1560003 	cmp	r6, r3
   2a438:	9a00000a 	bls	2a468 <CDHCPClient::Run()+0x168>
   2a43c:	e1a02006 	mov	r2, r6
   2a440:	e3a01000 	mov	r1, #0
   2a444:	e1a00005 	mov	r0, r5
   2a448:	ebfffed1 	bl	29f94 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>
   2a44c:	e3500001 	cmp	r0, #1
   2a450:	0affffbf 	beq	2a354 <CDHCPClient::Run()+0x54>
   2a454:	9affffce 	bls	2a394 <CDHCPClient::Run()+0x94>
   2a458:	e2403003 	sub	r3, r0, #3
   2a45c:	e6ef3073 	uxtb	r3, r3
   2a460:	e3530002 	cmp	r3, #2
   2a464:	9affffe6 	bls	2a404 <CDHCPClient::Run()+0x104>
   2a468:	eb001391 	bl	2f2b4 <CLogger::Get()>
   2a46c:	e59f1050 	ldr	r1, [pc, #80]	; 2a4c4 <CDHCPClient::Run()+0x1c4>
   2a470:	e3a02001 	mov	r2, #1
   2a474:	e3013b24 	movw	r3, #6948	; 0x1b24
   2a478:	e3403004 	movt	r3, #4
   2a47c:	eb00155a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a480:	eaffffdf 	b	2a404 <CDHCPClient::Run()+0x104>
   2a484:	eb00138a 	bl	2f2b4 <CLogger::Get()>
   2a488:	e59f1034 	ldr	r1, [pc, #52]	; 2a4c4 <CDHCPClient::Run()+0x1c4>
   2a48c:	e3a03044 	mov	r3, #68	; 0x44
   2a490:	e3a02001 	mov	r2, #1
   2a494:	e58d3000 	str	r3, [sp]
   2a498:	e3013b0c 	movw	r3, #6924	; 0x1b0c
   2a49c:	e3403004 	movt	r3, #4
   2a4a0:	eb001551 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a4a4:	e28dde23 	add	sp, sp, #560	; 0x230
   2a4a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a4ac:	e30117fc 	movw	r1, #6140	; 0x17fc
   2a4b0:	e3401004 	movt	r1, #4
   2a4b4:	e3000b08 	movw	r0, #2824	; 0xb08
   2a4b8:	e3400004 	movt	r0, #4
   2a4bc:	e3a02e1b 	mov	r2, #432	; 0x1b0
   2a4c0:	eb0008fe 	bl	2c8c0 <assertion_failed>
   2a4c4:	00041b4c 	.word	0x00041b4c

0002a4c8 <CHTTPClient::CHTTPClient(CNetSubSystem*, CIPAddress&, unsigned short, char const*)>:
   2a4c8:	e92d4070 	push	{r4, r5, r6, lr}
   2a4cc:	e1a04000 	mov	r4, r0
   2a4d0:	e1a0c001 	mov	ip, r1
   2a4d4:	e1a01002 	mov	r1, r2
   2a4d8:	e480c004 	str	ip, [r0], #4
   2a4dc:	e1a05003 	mov	r5, r3
   2a4e0:	ebfff825 	bl	2857c <CIPAddress::CIPAddress(CIPAddress const&)>
   2a4e4:	e59d1010 	ldr	r1, [sp, #16]
   2a4e8:	e2840010 	add	r0, r4, #16
   2a4ec:	e1c450bc 	strh	r5, [r4, #12]
   2a4f0:	eb00241f 	bl	33574 <CString::CString(char const*)>
   2a4f4:	e3a03000 	mov	r3, #0
   2a4f8:	e1a00004 	mov	r0, r4
   2a4fc:	e5843020 	str	r3, [r4, #32]
   2a500:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a504 <CHTTPClient::~CHTTPClient()>:
   2a504:	e92d4010 	push	{r4, lr}
   2a508:	e1a04000 	mov	r4, r0
   2a50c:	e5900020 	ldr	r0, [r0, #32]
   2a510:	e3500000 	cmp	r0, #0
   2a514:	0a000002 	beq	2a524 <CHTTPClient::~CHTTPClient()+0x20>
   2a518:	e5903000 	ldr	r3, [r0]
   2a51c:	e5933004 	ldr	r3, [r3, #4]
   2a520:	e12fff33 	blx	r3
   2a524:	e1a00004 	mov	r0, r4
   2a528:	e3a03000 	mov	r3, #0
   2a52c:	e5843020 	str	r3, [r4, #32]
   2a530:	e4803010 	str	r3, [r0], #16
   2a534:	eb0023d5 	bl	33490 <CString::~CString()>
   2a538:	e2840004 	add	r0, r4, #4
   2a53c:	ebfff81d 	bl	285b8 <CIPAddress::~CIPAddress()>
   2a540:	e1a00004 	mov	r0, r4
   2a544:	e8bd8010 	pop	{r4, pc}

0002a548 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)>:
   2a548:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a54c:	e1a04003 	mov	r4, r3
   2a550:	e5903000 	ldr	r3, [r0]
   2a554:	e24ddee6 	sub	sp, sp, #3680	; 0xe60
   2a558:	e24dd00c 	sub	sp, sp, #12
   2a55c:	e3530000 	cmp	r3, #0
   2a560:	e59dae90 	ldr	sl, [sp, #3728]	; 0xe90
   2a564:	e59d9e94 	ldr	r9, [sp, #3732]	; 0xe94
   2a568:	0a0001a3 	beq	2abfc <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x6b4>
   2a56c:	e590b020 	ldr	fp, [r0, #32]
   2a570:	e1a05000 	mov	r5, r0
   2a574:	e35b0000 	cmp	fp, #0
   2a578:	1a0001a5 	bne	2ac14 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x6cc>
   2a57c:	e3a000a0 	mov	r0, #160	; 0xa0
   2a580:	e1a06001 	mov	r6, r1
   2a584:	e1a07002 	mov	r7, r2
   2a588:	eb0031c3 	bl	36c9c <operator new(unsigned int)>
   2a58c:	e5951000 	ldr	r1, [r5]
   2a590:	e1a08000 	mov	r8, r0
   2a594:	e3a02006 	mov	r2, #6
   2a598:	ebffd9c4 	bl	20cb0 <CSocket::CSocket(CNetSubSystem*, int)>
   2a59c:	e1d520bc 	ldrh	r2, [r5, #12]
   2a5a0:	e1a00008 	mov	r0, r8
   2a5a4:	e2851004 	add	r1, r5, #4
   2a5a8:	e5858020 	str	r8, [r5, #32]
   2a5ac:	ebffd872 	bl	2077c <CSocket::Connect(CIPAddress&, unsigned short)>
   2a5b0:	e3500000 	cmp	r0, #0
   2a5b4:	ba000183 	blt	2abc8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x680>
   2a5b8:	e3560000 	cmp	r6, #0
   2a5bc:	0a00006a 	beq	2a76c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x224>
   2a5c0:	e3560002 	cmp	r6, #2
   2a5c4:	03016b84 	movweq	r6, #7044	; 0x1b84
   2a5c8:	03406004 	movteq	r6, #4
   2a5cc:	1a000212 	bne	2ae1c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x8d4>
   2a5d0:	e28d0018 	add	r0, sp, #24
   2a5d4:	eb0023e0 	bl	3355c <CString::CString()>
   2a5d8:	e3570000 	cmp	r7, #0
   2a5dc:	0a000192 	beq	2ac2c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x6e4>
   2a5e0:	e1a02006 	mov	r2, r6
   2a5e4:	e1a03007 	mov	r3, r7
   2a5e8:	e28d0018 	add	r0, sp, #24
   2a5ec:	e2856010 	add	r6, r5, #16
   2a5f0:	e3011bb8 	movw	r1, #7096	; 0x1bb8
   2a5f4:	e3401004 	movt	r1, #4
   2a5f8:	eb0029a2 	bl	34c88 <CString::Format(char const*, ...)>
   2a5fc:	e1a00006 	mov	r0, r6
   2a600:	eb00244b 	bl	33734 <CString::GetLength() const>
   2a604:	e3500000 	cmp	r0, #0
   2a608:	1a00011e 	bne	2aa88 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x540>
   2a60c:	e28d0018 	add	r0, sp, #24
   2a610:	e3011bcc 	movw	r1, #7116	; 0x1bcc
   2a614:	e3401004 	movt	r1, #4
   2a618:	eb002449 	bl	33744 <CString::Append(char const*)>
   2a61c:	e28d0018 	add	r0, sp, #24
   2a620:	e3011bf4 	movw	r1, #7156	; 0x1bf4
   2a624:	e3401004 	movt	r1, #4
   2a628:	eb002445 	bl	33744 <CString::Append(char const*)>
   2a62c:	e28d0018 	add	r0, sp, #24
   2a630:	e3590000 	cmp	r9, #0
   2a634:	0a00010f 	beq	2aa78 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x530>
   2a638:	e3011c08 	movw	r1, #7176	; 0x1c08
   2a63c:	e3401004 	movt	r1, #4
   2a640:	eb00243f 	bl	33744 <CString::Append(char const*)>
   2a644:	e28d0e66 	add	r0, sp, #1632	; 0x660
   2a648:	e2800008 	add	r0, r0, #8
   2a64c:	eb0023c2 	bl	3355c <CString::CString()>
   2a650:	e1a00009 	mov	r0, r9
   2a654:	eb002d7e 	bl	35c54 <strlen>
   2a658:	e1a02000 	mov	r2, r0
   2a65c:	e28d0e66 	add	r0, sp, #1632	; 0x660
   2a660:	e3011c3c 	movw	r1, #7228	; 0x1c3c
   2a664:	e3401004 	movt	r1, #4
   2a668:	e2800008 	add	r0, r0, #8
   2a66c:	eb002985 	bl	34c88 <CString::Format(char const*, ...)>
   2a670:	e28d0e66 	add	r0, sp, #1632	; 0x660
   2a674:	e2800008 	add	r0, r0, #8
   2a678:	eb0023ef 	bl	3363c <CString::operator char const*() const>
   2a67c:	e1a01000 	mov	r1, r0
   2a680:	e28d0018 	add	r0, sp, #24
   2a684:	eb00242e 	bl	33744 <CString::Append(char const*)>
   2a688:	e28d0e66 	add	r0, sp, #1632	; 0x660
   2a68c:	e2800008 	add	r0, r0, #8
   2a690:	eb00237e 	bl	33490 <CString::~CString()>
   2a694:	e28d0018 	add	r0, sp, #24
   2a698:	e30a19ac 	movw	r1, #43436	; 0xa9ac
   2a69c:	e3401003 	movt	r1, #3
   2a6a0:	eb002427 	bl	33744 <CString::Append(char const*)>
   2a6a4:	e1a01009 	mov	r1, r9
   2a6a8:	e28d0018 	add	r0, sp, #24
   2a6ac:	eb002424 	bl	33744 <CString::Append(char const*)>
   2a6b0:	e5957020 	ldr	r7, [r5, #32]
   2a6b4:	e28d0018 	add	r0, sp, #24
   2a6b8:	e5973000 	ldr	r3, [r7]
   2a6bc:	e593801c 	ldr	r8, [r3, #28]
   2a6c0:	eb0023dd 	bl	3363c <CString::operator char const*() const>
   2a6c4:	e1a06000 	mov	r6, r0
   2a6c8:	e28d0018 	add	r0, sp, #24
   2a6cc:	eb002418 	bl	33734 <CString::GetLength() const>
   2a6d0:	e1a01006 	mov	r1, r6
   2a6d4:	e1a02000 	mov	r2, r0
   2a6d8:	e3a03000 	mov	r3, #0
   2a6dc:	e1a00007 	mov	r0, r7
   2a6e0:	e12fff38 	blx	r8
   2a6e4:	e3500000 	cmp	r0, #0
   2a6e8:	ba000121 	blt	2ab74 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x62c>
   2a6ec:	e3a09000 	mov	r9, #0
   2a6f0:	e58db00c 	str	fp, [sp, #12]
   2a6f4:	e1a06009 	mov	r6, r9
   2a6f8:	e1a07009 	mov	r7, r9
   2a6fc:	e1a08009 	mov	r8, r9
   2a700:	e58d9008 	str	r9, [sp, #8]
   2a704:	e58d9004 	str	r9, [sp, #4]
   2a708:	e5950020 	ldr	r0, [r5, #32]
   2a70c:	e3a03000 	mov	r3, #0
   2a710:	e3a02d19 	mov	r2, #1600	; 0x640
   2a714:	e28d1028 	add	r1, sp, #40	; 0x28
   2a718:	e590c000 	ldr	ip, [r0]
   2a71c:	e59cb020 	ldr	fp, [ip, #32]
   2a720:	e12fff3b 	blx	fp
   2a724:	e3500000 	cmp	r0, #0
   2a728:	da00010f 	ble	2ab6c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x624>
   2a72c:	e28d3028 	add	r3, sp, #40	; 0x28
   2a730:	e58d5000 	str	r5, [sp]
   2a734:	e083b000 	add	fp, r3, r0
   2a738:	e1a05009 	mov	r5, r9
   2a73c:	e1a09008 	mov	r9, r8
   2a740:	e1a08003 	mov	r8, r3
   2a744:	e0d830d1 	ldrsb	r3, [r8], #1
   2a748:	e6ef2073 	uxtb	r2, r3
   2a74c:	e3590004 	cmp	r9, #4
   2a750:	979ff109 	ldrls	pc, [pc, r9, lsl #2]
   2a754:	ea000048 	b	2a87c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x334>
   2a758:	0002a990 	.word	0x0002a990
   2a75c:	0002aa28 	.word	0x0002aa28
   2a760:	0002a810 	.word	0x0002a810
   2a764:	0002a7bc 	.word	0x0002a7bc
   2a768:	0002a7ec 	.word	0x0002a7ec
   2a76c:	e3016b80 	movw	r6, #7040	; 0x1b80
   2a770:	e3406004 	movt	r6, #4
   2a774:	eaffff95 	b	2a5d0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x88>
   2a778:	e28d0e66 	add	r0, sp, #1632	; 0x660
   2a77c:	e3a02010 	mov	r2, #16
   2a780:	e28d1014 	add	r1, sp, #20
   2a784:	e2800008 	add	r0, r0, #8
   2a788:	eb002e59 	bl	360f4 <strtoul>
   2a78c:	e59d3014 	ldr	r3, [sp, #20]
   2a790:	e1a05000 	mov	r5, r0
   2a794:	e3530000 	cmp	r3, #0
   2a798:	0a000002 	beq	2a7a8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x260>
   2a79c:	e1d330d0 	ldrsb	r3, [r3]
   2a7a0:	e3530000 	cmp	r3, #0
   2a7a4:	1a000139 	bne	2ac90 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x748>
   2a7a8:	e3550000 	cmp	r5, #0
   2a7ac:	0a0000cd 	beq	2aae8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x5a0>
   2a7b0:	e15b0008 	cmp	fp, r8
   2a7b4:	0a000154 	beq	2ad0c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x7c4>
   2a7b8:	e4d82001 	ldrb	r2, [r8], #1
   2a7bc:	e35a0000 	cmp	sl, #0
   2a7c0:	0a0000fa 	beq	2abb0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x668>
   2a7c4:	e59a3000 	ldr	r3, [sl]
   2a7c8:	e1530006 	cmp	r3, r6
   2a7cc:	9a00013a 	bls	2acbc <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x774>
   2a7d0:	e2866001 	add	r6, r6, #1
   2a7d4:	e2555001 	subs	r5, r5, #1
   2a7d8:	e4c42001 	strb	r2, [r4], #1
   2a7dc:	1afffff3 	bne	2a7b0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x268>
   2a7e0:	e15b0008 	cmp	fp, r8
   2a7e4:	0a00014c 	beq	2ad1c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x7d4>
   2a7e8:	e4d82001 	ldrb	r2, [r8], #1
   2a7ec:	e352000d 	cmp	r2, #13
   2a7f0:	0a0000b8 	beq	2aad8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x590>
   2a7f4:	e352000a 	cmp	r2, #10
   2a7f8:	1a000124 	bne	2ac90 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x748>
   2a7fc:	e15b0008 	cmp	fp, r8
   2a800:	0a00013c 	beq	2acf8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x7b0>
   2a804:	e0d830d1 	ldrsb	r3, [r8], #1
   2a808:	e3a07000 	mov	r7, #0
   2a80c:	e6ef2073 	uxtb	r2, r3
   2a810:	e352000d 	cmp	r2, #13
   2a814:	0a000017 	beq	2a878 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x330>
   2a818:	e352000a 	cmp	r2, #10
   2a81c:	0affffd5 	beq	2a778 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x230>
   2a820:	e30027fe 	movw	r2, #2046	; 0x7fe
   2a824:	e1570002 	cmp	r7, r2
   2a828:	8a000079 	bhi	2aa14 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x4cc>
   2a82c:	e2871ee5 	add	r1, r7, #3664	; 0xe50
   2a830:	e2872001 	add	r2, r7, #1
   2a834:	e2811008 	add	r1, r1, #8
   2a838:	e15b0008 	cmp	fp, r8
   2a83c:	e2811010 	add	r1, r1, #16
   2a840:	e08d7001 	add	r7, sp, r1
   2a844:	e3a01000 	mov	r1, #0
   2a848:	e5473800 	strb	r3, [r7, #-2048]	; 0xfffff800
   2a84c:	e2823ee5 	add	r3, r2, #3664	; 0xe50
   2a850:	e2833008 	add	r3, r3, #8
   2a854:	e2833010 	add	r3, r3, #16
   2a858:	e08d3003 	add	r3, sp, r3
   2a85c:	e5431800 	strb	r1, [r3, #-2048]	; 0xfffff800
   2a860:	0a000135 	beq	2ad3c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x7f4>
   2a864:	e0d830d1 	ldrsb	r3, [r8], #1
   2a868:	e1a07002 	mov	r7, r2
   2a86c:	e6ef2073 	uxtb	r2, r3
   2a870:	e352000d 	cmp	r2, #13
   2a874:	1affffe7 	bne	2a818 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x2d0>
   2a878:	e3a09002 	mov	r9, #2
   2a87c:	e15b0008 	cmp	fp, r8
   2a880:	1affffaf 	bne	2a744 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1fc>
   2a884:	e1a08009 	mov	r8, r9
   2a888:	e1a09005 	mov	r9, r5
   2a88c:	e3580004 	cmp	r8, #4
   2a890:	e59d5000 	ldr	r5, [sp]
   2a894:	9affff9b 	bls	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2a898:	e5950020 	ldr	r0, [r5, #32]
   2a89c:	e3500000 	cmp	r0, #0
   2a8a0:	0a000002 	beq	2a8b0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x368>
   2a8a4:	e5903000 	ldr	r3, [r0]
   2a8a8:	e5933004 	ldr	r3, [r3, #4]
   2a8ac:	e12fff33 	blx	r3
   2a8b0:	e3a03000 	mov	r3, #0
   2a8b4:	e5853020 	str	r3, [r5, #32]
   2a8b8:	e15a0003 	cmp	sl, r3
   2a8bc:	0a00014b 	beq	2adf0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x8a8>
   2a8c0:	e59a3000 	ldr	r3, [sl]
   2a8c4:	e1530006 	cmp	r3, r6
   2a8c8:	258a6000 	strcs	r6, [sl]
   2a8cc:	23a040c8 	movcs	r4, #200	; 0xc8
   2a8d0:	2a0000b0 	bcs	2ab98 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x650>
   2a8d4:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2a8d8:	e3401004 	movt	r1, #4
   2a8dc:	e3010c8c 	movw	r0, #7308	; 0x1c8c
   2a8e0:	e3400004 	movt	r0, #4
   2a8e4:	e3002142 	movw	r2, #322	; 0x142
   2a8e8:	eb0007f4 	bl	2c8c0 <assertion_failed>
   2a8ec:	e59d3004 	ldr	r3, [sp, #4]
   2a8f0:	e3530000 	cmp	r3, #0
   2a8f4:	1a00007f 	bne	2aaf8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x5b0>
   2a8f8:	e28d0e66 	add	r0, sp, #1632	; 0x660
   2a8fc:	e28d2010 	add	r2, sp, #16
   2a900:	e2800008 	add	r0, r0, #8
   2a904:	e30e1628 	movw	r1, #58920	; 0xe628
   2a908:	e3401003 	movt	r1, #3
   2a90c:	eb002dc1 	bl	36018 <strtok_r>
   2a910:	e2507000 	subs	r7, r0, #0
   2a914:	0a000112 	beq	2ad64 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x81c>
   2a918:	e3011c54 	movw	r1, #7252	; 0x1c54
   2a91c:	e3401004 	movt	r1, #4
   2a920:	eb002cd5 	bl	35c7c <strcmp>
   2a924:	e3500000 	cmp	r0, #0
   2a928:	1a000126 	bne	2adc8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x880>
   2a92c:	e28d2010 	add	r2, sp, #16
   2a930:	e3011084 	movw	r1, #4228	; 0x1084
   2a934:	e3401004 	movt	r1, #4
   2a938:	eb002db6 	bl	36018 <strtok_r>
   2a93c:	e3500000 	cmp	r0, #0
   2a940:	0a000107 	beq	2ad64 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x81c>
   2a944:	e59d0004 	ldr	r0, [sp, #4]
   2a948:	e28d2010 	add	r2, sp, #16
   2a94c:	e3011084 	movw	r1, #4228	; 0x1084
   2a950:	e3401004 	movt	r1, #4
   2a954:	eb002daf 	bl	36018 <strtok_r>
   2a958:	e2507000 	subs	r7, r0, #0
   2a95c:	0a000100 	beq	2ad64 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x81c>
   2a960:	e3011c5c 	movw	r1, #7260	; 0x1c5c
   2a964:	e3401004 	movt	r1, #4
   2a968:	eb002cc3 	bl	35c7c <strcmp>
   2a96c:	e3500000 	cmp	r0, #0
   2a970:	1a000114 	bne	2adc8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x880>
   2a974:	e15b0008 	cmp	fp, r8
   2a978:	0a000115 	beq	2add4 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x88c>
   2a97c:	e0d830d1 	ldrsb	r3, [r8], #1
   2a980:	e3a02001 	mov	r2, #1
   2a984:	e3a07000 	mov	r7, #0
   2a988:	e58d2004 	str	r2, [sp, #4]
   2a98c:	e6ef2073 	uxtb	r2, r3
   2a990:	e352000d 	cmp	r2, #13
   2a994:	0affffb8 	beq	2a87c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x334>
   2a998:	e352000a 	cmp	r2, #10
   2a99c:	0a000017 	beq	2aa00 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x4b8>
   2a9a0:	e30027fe 	movw	r2, #2046	; 0x7fe
   2a9a4:	e1570002 	cmp	r7, r2
   2a9a8:	8a000044 	bhi	2aac0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x578>
   2a9ac:	e2871ee5 	add	r1, r7, #3664	; 0xe50
   2a9b0:	e2872001 	add	r2, r7, #1
   2a9b4:	e2811008 	add	r1, r1, #8
   2a9b8:	e15b0008 	cmp	fp, r8
   2a9bc:	e2811010 	add	r1, r1, #16
   2a9c0:	e08d7001 	add	r7, sp, r1
   2a9c4:	e3a01000 	mov	r1, #0
   2a9c8:	e5473800 	strb	r3, [r7, #-2048]	; 0xfffff800
   2a9cc:	e2823ee5 	add	r3, r2, #3664	; 0xe50
   2a9d0:	e2833008 	add	r3, r3, #8
   2a9d4:	e2833010 	add	r3, r3, #16
   2a9d8:	e08d3003 	add	r3, sp, r3
   2a9dc:	e5431800 	strb	r1, [r3, #-2048]	; 0xfffff800
   2a9e0:	0a0000da 	beq	2ad50 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x808>
   2a9e4:	e1a07002 	mov	r7, r2
   2a9e8:	e0d830d1 	ldrsb	r3, [r8], #1
   2a9ec:	e6ef2073 	uxtb	r2, r3
   2a9f0:	e352000d 	cmp	r2, #13
   2a9f4:	0affffa0 	beq	2a87c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x334>
   2a9f8:	e352000a 	cmp	r2, #10
   2a9fc:	1affffe7 	bne	2a9a0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x458>
   2aa00:	e3570000 	cmp	r7, #0
   2aa04:	1affffb8 	bne	2a8ec <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x3a4>
   2aa08:	e59d3008 	ldr	r3, [sp, #8]
   2aa0c:	e3530000 	cmp	r3, #0
   2aa10:	0a00004e 	beq	2ab50 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x608>
   2aa14:	e15b0008 	cmp	fp, r8
   2aa18:	0a0000c3 	beq	2ad2c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x7e4>
   2aa1c:	e0d830d1 	ldrsb	r3, [r8], #1
   2aa20:	e6ef2073 	uxtb	r2, r3
   2aa24:	eaffff79 	b	2a810 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x2c8>
   2aa28:	e1a09005 	mov	r9, r5
   2aa2c:	e1a03008 	mov	r3, r8
   2aa30:	e59d5000 	ldr	r5, [sp]
   2aa34:	ea000007 	b	2aa58 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x510>
   2aa38:	e59a1000 	ldr	r1, [sl]
   2aa3c:	e1510006 	cmp	r1, r6
   2aa40:	9a0000a8 	bls	2ace8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x7a0>
   2aa44:	e2866001 	add	r6, r6, #1
   2aa48:	e15b0003 	cmp	fp, r3
   2aa4c:	e4c42001 	strb	r2, [r4], #1
   2aa50:	0a000043 	beq	2ab64 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x61c>
   2aa54:	e4d32001 	ldrb	r2, [r3], #1
   2aa58:	e35a0000 	cmp	sl, #0
   2aa5c:	1afffff5 	bne	2aa38 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x4f0>
   2aa60:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2aa64:	e3401004 	movt	r1, #4
   2aa68:	e3010c7c 	movw	r0, #7292	; 0x1c7c
   2aa6c:	e3400004 	movt	r0, #4
   2aa70:	e3a020df 	mov	r2, #223	; 0xdf
   2aa74:	eb000791 	bl	2c8c0 <assertion_failed>
   2aa78:	e30a19ac 	movw	r1, #43436	; 0xa9ac
   2aa7c:	e3401003 	movt	r1, #3
   2aa80:	eb00232f 	bl	33744 <CString::Append(char const*)>
   2aa84:	eaffff09 	b	2a6b0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x168>
   2aa88:	e28d0018 	add	r0, sp, #24
   2aa8c:	e30a19b0 	movw	r1, #43440	; 0xa9b0
   2aa90:	e3401003 	movt	r1, #3
   2aa94:	eb00232a 	bl	33744 <CString::Append(char const*)>
   2aa98:	e1a00006 	mov	r0, r6
   2aa9c:	eb0022e6 	bl	3363c <CString::operator char const*() const>
   2aaa0:	e1a01000 	mov	r1, r0
   2aaa4:	e28d0018 	add	r0, sp, #24
   2aaa8:	eb002325 	bl	33744 <CString::Append(char const*)>
   2aaac:	e28d0018 	add	r0, sp, #24
   2aab0:	e30a19ac 	movw	r1, #43436	; 0xa9ac
   2aab4:	e3401003 	movt	r1, #3
   2aab8:	eb002321 	bl	33744 <CString::Append(char const*)>
   2aabc:	eafffed2 	b	2a60c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0xc4>
   2aac0:	e15b0008 	cmp	fp, r8
   2aac4:	1affffc7 	bne	2a9e8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x4a0>
   2aac8:	e1a08009 	mov	r8, r9
   2aacc:	e1a09005 	mov	r9, r5
   2aad0:	e59d5000 	ldr	r5, [sp]
   2aad4:	eaffff0b 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2aad8:	e3a09004 	mov	r9, #4
   2aadc:	e15b0008 	cmp	fp, r8
   2aae0:	1affff17 	bne	2a744 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1fc>
   2aae4:	eaffff66 	b	2a884 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x33c>
   2aae8:	e3a09005 	mov	r9, #5
   2aaec:	e15b0008 	cmp	fp, r8
   2aaf0:	1affff13 	bne	2a744 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1fc>
   2aaf4:	eaffff62 	b	2a884 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x33c>
   2aaf8:	e59d3004 	ldr	r3, [sp, #4]
   2aafc:	e28d0e66 	add	r0, sp, #1632	; 0x660
   2ab00:	e28d2010 	add	r2, sp, #16
   2ab04:	e2800008 	add	r0, r0, #8
   2ab08:	e30a19b4 	movw	r1, #43444	; 0xa9b4
   2ab0c:	e3401003 	movt	r1, #3
   2ab10:	e2833001 	add	r3, r3, #1
   2ab14:	e58d3004 	str	r3, [sp, #4]
   2ab18:	eb002d3e 	bl	36018 <strtok_r>
   2ab1c:	e3500000 	cmp	r0, #0
   2ab20:	0a000004 	beq	2ab38 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x5f0>
   2ab24:	e3011c60 	movw	r1, #7264	; 0x1c60
   2ab28:	e3401004 	movt	r1, #4
   2ab2c:	eb002c6e 	bl	35cec <strcasecmp>
   2ab30:	e3500000 	cmp	r0, #0
   2ab34:	0a000042 	beq	2ac44 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x6fc>
   2ab38:	e15b0008 	cmp	fp, r8
   2ab3c:	0a0000b1 	beq	2ae08 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x8c0>
   2ab40:	e0d830d1 	ldrsb	r3, [r8], #1
   2ab44:	e1a07009 	mov	r7, r9
   2ab48:	e6ef2073 	uxtb	r2, r3
   2ab4c:	eaffff8f 	b	2a990 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x448>
   2ab50:	e1a09005 	mov	r9, r5
   2ab54:	e1a03008 	mov	r3, r8
   2ab58:	e59d5000 	ldr	r5, [sp]
   2ab5c:	e15b0008 	cmp	fp, r8
   2ab60:	1affffbb 	bne	2aa54 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x50c>
   2ab64:	e3a08001 	mov	r8, #1
   2ab68:	eafffee6 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ab6c:	e3580001 	cmp	r8, #1
   2ab70:	0affff48 	beq	2a898 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x350>
   2ab74:	e5950020 	ldr	r0, [r5, #32]
   2ab78:	e3500000 	cmp	r0, #0
   2ab7c:	0a000002 	beq	2ab8c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x644>
   2ab80:	e5903000 	ldr	r3, [r0]
   2ab84:	e5933004 	ldr	r3, [r3, #4]
   2ab88:	e12fff33 	blx	r3
   2ab8c:	e3a03000 	mov	r3, #0
   2ab90:	e3004226 	movw	r4, #550	; 0x226
   2ab94:	e5853020 	str	r3, [r5, #32]
   2ab98:	e28d0018 	add	r0, sp, #24
   2ab9c:	eb00223b 	bl	33490 <CString::~CString()>
   2aba0:	e1a00004 	mov	r0, r4
   2aba4:	e28ddee6 	add	sp, sp, #3680	; 0xe60
   2aba8:	e28dd00c 	add	sp, sp, #12
   2abac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abb0:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2abb4:	e3401004 	movt	r1, #4
   2abb8:	e3010c7c 	movw	r0, #7292	; 0x1c7c
   2abbc:	e3400004 	movt	r0, #4
   2abc0:	e300210d 	movw	r2, #269	; 0x10d
   2abc4:	eb00073d 	bl	2c8c0 <assertion_failed>
   2abc8:	e5950020 	ldr	r0, [r5, #32]
   2abcc:	e3500000 	cmp	r0, #0
   2abd0:	0a000002 	beq	2abe0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x698>
   2abd4:	e5903000 	ldr	r3, [r0]
   2abd8:	e5933004 	ldr	r3, [r3, #4]
   2abdc:	e12fff33 	blx	r3
   2abe0:	e3a04f66 	mov	r4, #408	; 0x198
   2abe4:	e3a03000 	mov	r3, #0
   2abe8:	e1a00004 	mov	r0, r4
   2abec:	e5853020 	str	r3, [r5, #32]
   2abf0:	e28ddee6 	add	sp, sp, #3680	; 0xe60
   2abf4:	e28dd00c 	add	sp, sp, #12
   2abf8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abfc:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2ac00:	e3401004 	movt	r1, #4
   2ac04:	e3000aa4 	movw	r0, #2724	; 0xaa4
   2ac08:	e3400004 	movt	r0, #4
   2ac0c:	e3a02043 	mov	r2, #67	; 0x43
   2ac10:	eb00072a 	bl	2c8c0 <assertion_failed>
   2ac14:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2ac18:	e3401004 	movt	r1, #4
   2ac1c:	e3010b9c 	movw	r0, #7068	; 0x1b9c
   2ac20:	e3400004 	movt	r0, #4
   2ac24:	e3a02044 	mov	r2, #68	; 0x44
   2ac28:	eb000724 	bl	2c8c0 <assertion_failed>
   2ac2c:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2ac30:	e3401004 	movt	r1, #4
   2ac34:	e3010bac 	movw	r0, #7084	; 0x1bac
   2ac38:	e3400004 	movt	r0, #4
   2ac3c:	e3a0205d 	mov	r2, #93	; 0x5d
   2ac40:	eb00071e 	bl	2c8c0 <assertion_failed>
   2ac44:	e28d2010 	add	r2, sp, #16
   2ac48:	e3011084 	movw	r1, #4228	; 0x1084
   2ac4c:	e3401004 	movt	r1, #4
   2ac50:	eb002cf0 	bl	36018 <strtok_r>
   2ac54:	e3500000 	cmp	r0, #0
   2ac58:	0affffb6 	beq	2ab38 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x5f0>
   2ac5c:	e3011c74 	movw	r1, #7284	; 0x1c74
   2ac60:	e3401004 	movt	r1, #4
   2ac64:	eb002c20 	bl	35cec <strcasecmp>
   2ac68:	e3500000 	cmp	r0, #0
   2ac6c:	1affffb1 	bne	2ab38 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x5f0>
   2ac70:	e15b0008 	cmp	fp, r8
   2ac74:	0a00006e 	beq	2ae34 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x8ec>
   2ac78:	e0d830d1 	ldrsb	r3, [r8], #1
   2ac7c:	e3a02001 	mov	r2, #1
   2ac80:	e1a07009 	mov	r7, r9
   2ac84:	e58d2008 	str	r2, [sp, #8]
   2ac88:	e6ef2073 	uxtb	r2, r3
   2ac8c:	eaffff3f 	b	2a990 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x448>
   2ac90:	e59d5000 	ldr	r5, [sp]
   2ac94:	e5950020 	ldr	r0, [r5, #32]
   2ac98:	e3500000 	cmp	r0, #0
   2ac9c:	0a000002 	beq	2acac <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x764>
   2aca0:	e5903000 	ldr	r3, [r0]
   2aca4:	e5933004 	ldr	r3, [r3, #4]
   2aca8:	e12fff33 	blx	r3
   2acac:	e3a03000 	mov	r3, #0
   2acb0:	e3a04f8a 	mov	r4, #552	; 0x228
   2acb4:	e5853020 	str	r3, [r5, #32]
   2acb8:	eaffffb6 	b	2ab98 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x650>
   2acbc:	e59d5000 	ldr	r5, [sp]
   2acc0:	e5950020 	ldr	r0, [r5, #32]
   2acc4:	e3500000 	cmp	r0, #0
   2acc8:	0a000002 	beq	2acd8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x790>
   2accc:	e5903000 	ldr	r3, [r0]
   2acd0:	e5933004 	ldr	r3, [r3, #4]
   2acd4:	e12fff33 	blx	r3
   2acd8:	e3a03000 	mov	r3, #0
   2acdc:	e3004229 	movw	r4, #553	; 0x229
   2ace0:	e5853020 	str	r3, [r5, #32]
   2ace4:	eaffffab 	b	2ab98 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x650>
   2ace8:	e5950020 	ldr	r0, [r5, #32]
   2acec:	e3500000 	cmp	r0, #0
   2acf0:	1afffff5 	bne	2accc <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x784>
   2acf4:	eafffff7 	b	2acd8 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x790>
   2acf8:	e1a09005 	mov	r9, r5
   2acfc:	e3a07000 	mov	r7, #0
   2ad00:	e59d5000 	ldr	r5, [sp]
   2ad04:	e3a08002 	mov	r8, #2
   2ad08:	eafffe7e 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ad0c:	e1a09005 	mov	r9, r5
   2ad10:	e3a08003 	mov	r8, #3
   2ad14:	e59d5000 	ldr	r5, [sp]
   2ad18:	eafffe7a 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ad1c:	e1a09005 	mov	r9, r5
   2ad20:	e3a08004 	mov	r8, #4
   2ad24:	e59d5000 	ldr	r5, [sp]
   2ad28:	eafffe76 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ad2c:	e1a09005 	mov	r9, r5
   2ad30:	e3a08002 	mov	r8, #2
   2ad34:	e59d5000 	ldr	r5, [sp]
   2ad38:	eafffe72 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ad3c:	e1a09005 	mov	r9, r5
   2ad40:	e1a07002 	mov	r7, r2
   2ad44:	e59d5000 	ldr	r5, [sp]
   2ad48:	e3a08002 	mov	r8, #2
   2ad4c:	eafffe6d 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ad50:	e1a08009 	mov	r8, r9
   2ad54:	e1a07002 	mov	r7, r2
   2ad58:	e1a09005 	mov	r9, r5
   2ad5c:	e59d5000 	ldr	r5, [sp]
   2ad60:	eafffe68 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ad64:	e59db00c 	ldr	fp, [sp, #12]
   2ad68:	e59d5000 	ldr	r5, [sp]
   2ad6c:	e3a0200a 	mov	r2, #10
   2ad70:	e28d1014 	add	r1, sp, #20
   2ad74:	e1a0000b 	mov	r0, fp
   2ad78:	eb002cdd 	bl	360f4 <strtoul>
   2ad7c:	e59d3014 	ldr	r3, [sp, #20]
   2ad80:	e1a04000 	mov	r4, r0
   2ad84:	e3530000 	cmp	r3, #0
   2ad88:	0a00000c 	beq	2adc0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x878>
   2ad8c:	e1d330d0 	ldrsb	r3, [r3]
   2ad90:	e3530000 	cmp	r3, #0
   2ad94:	0a000009 	beq	2adc0 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x878>
   2ad98:	e3004227 	movw	r4, #551	; 0x227
   2ad9c:	e5950020 	ldr	r0, [r5, #32]
   2ada0:	e3500000 	cmp	r0, #0
   2ada4:	0a000002 	beq	2adb4 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x86c>
   2ada8:	e5903000 	ldr	r3, [r0]
   2adac:	e5933004 	ldr	r3, [r3, #4]
   2adb0:	e12fff33 	blx	r3
   2adb4:	e3a03000 	mov	r3, #0
   2adb8:	e5853020 	str	r3, [r5, #32]
   2adbc:	eaffff75 	b	2ab98 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x650>
   2adc0:	e6ff4074 	uxth	r4, r4
   2adc4:	eafffff4 	b	2ad9c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x854>
   2adc8:	e59d5000 	ldr	r5, [sp]
   2adcc:	e1a0b007 	mov	fp, r7
   2add0:	eaffffe5 	b	2ad6c <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x824>
   2add4:	e3a07000 	mov	r7, #0
   2add8:	e1a09005 	mov	r9, r5
   2addc:	e3a03001 	mov	r3, #1
   2ade0:	e59d5000 	ldr	r5, [sp]
   2ade4:	e1a08007 	mov	r8, r7
   2ade8:	e58d3004 	str	r3, [sp, #4]
   2adec:	eafffe45 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2adf0:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2adf4:	e3401004 	movt	r1, #4
   2adf8:	e3010c7c 	movw	r0, #7292	; 0x1c7c
   2adfc:	e3400004 	movt	r0, #4
   2ae00:	e3002141 	movw	r2, #321	; 0x141
   2ae04:	eb0006ad 	bl	2c8c0 <assertion_failed>
   2ae08:	e1a08009 	mov	r8, r9
   2ae0c:	e1a09005 	mov	r9, r5
   2ae10:	e1a07008 	mov	r7, r8
   2ae14:	e59d5000 	ldr	r5, [sp]
   2ae18:	eafffe3a 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>
   2ae1c:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2ae20:	e3401004 	movt	r1, #4
   2ae24:	e30b0708 	movw	r0, #46856	; 0xb708
   2ae28:	e3400003 	movt	r0, #3
   2ae2c:	e3a02057 	mov	r2, #87	; 0x57
   2ae30:	eb0006a2 	bl	2c8c0 <assertion_failed>
   2ae34:	e1a08009 	mov	r8, r9
   2ae38:	e3a03001 	mov	r3, #1
   2ae3c:	e1a09005 	mov	r9, r5
   2ae40:	e1a07008 	mov	r7, r8
   2ae44:	e59d5000 	ldr	r5, [sp]
   2ae48:	e58d3008 	str	r3, [sp, #8]
   2ae4c:	eafffe2d 	b	2a708 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)+0x1c0>

0002ae50 <CHTTPClient::Get(char const*, unsigned char*, unsigned int*)>:
   2ae50:	e92d4010 	push	{r4, lr}
   2ae54:	e1a0e002 	mov	lr, r2
   2ae58:	e1a04001 	mov	r4, r1
   2ae5c:	e24dd008 	sub	sp, sp, #8
   2ae60:	e1a0c003 	mov	ip, r3
   2ae64:	e3a01000 	mov	r1, #0
   2ae68:	e1a02004 	mov	r2, r4
   2ae6c:	e1a0300e 	mov	r3, lr
   2ae70:	e58d1004 	str	r1, [sp, #4]
   2ae74:	e58dc000 	str	ip, [sp]
   2ae78:	ebfffdb2 	bl	2a548 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)>
   2ae7c:	e28dd008 	add	sp, sp, #8
   2ae80:	e8bd8010 	pop	{r4, pc}

0002ae84 <CHTTPClient::Post(char const*, unsigned char*, unsigned int*, char const*)>:
   2ae84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2ae88:	e24dd00c 	sub	sp, sp, #12
   2ae8c:	e59de010 	ldr	lr, [sp, #16]
   2ae90:	e35e0000 	cmp	lr, #0
   2ae94:	0a000008 	beq	2aebc <CHTTPClient::Post(char const*, unsigned char*, unsigned int*, char const*)+0x38>
   2ae98:	e1a0c003 	mov	ip, r3
   2ae9c:	e58de004 	str	lr, [sp, #4]
   2aea0:	e1a03002 	mov	r3, r2
   2aea4:	e58dc000 	str	ip, [sp]
   2aea8:	e1a02001 	mov	r2, r1
   2aeac:	e3a01002 	mov	r1, #2
   2aeb0:	ebfffda4 	bl	2a548 <CHTTPClient::Request(THTTPRequestMethod, char const*, unsigned char*, unsigned int*, char const*)>
   2aeb4:	e28dd00c 	add	sp, sp, #12
   2aeb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2aebc:	e3011b8c 	movw	r1, #7052	; 0x1b8c
   2aec0:	e3401004 	movt	r1, #4
   2aec4:	e3010ca0 	movw	r0, #7328	; 0x1ca0
   2aec8:	e3400004 	movt	r0, #4
   2aecc:	e3a02038 	mov	r2, #56	; 0x38
   2aed0:	eb00067a 	bl	2c8c0 <assertion_failed>

0002aed4 <CNetSocket::Connect(char const*, char const*)>:
   2aed4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2aed8:	e2516000 	subs	r6, r1, #0
   2aedc:	e24dd01c 	sub	sp, sp, #28
   2aee0:	0a00003a 	beq	2afd0 <CNetSocket::Connect(char const*, char const*)+0xfc>
   2aee4:	e1a07002 	mov	r7, r2
   2aee8:	e3520000 	cmp	r2, #0
   2aeec:	0a00003d 	beq	2afe8 <CNetSocket::Connect(char const*, char const*)+0x114>
   2aef0:	e1a04000 	mov	r4, r0
   2aef4:	e3a0200a 	mov	r2, #10
   2aef8:	e28d1008 	add	r1, sp, #8
   2aefc:	e1a00007 	mov	r0, r7
   2af00:	e3a03000 	mov	r3, #0
   2af04:	e58d3008 	str	r3, [sp, #8]
   2af08:	eb002c79 	bl	360f4 <strtoul>
   2af0c:	e59d3008 	ldr	r3, [sp, #8]
   2af10:	e1a05000 	mov	r5, r0
   2af14:	e3530000 	cmp	r3, #0
   2af18:	0a000002 	beq	2af28 <CNetSocket::Connect(char const*, char const*)+0x54>
   2af1c:	e1d330d0 	ldrsb	r3, [r3]
   2af20:	e3530000 	cmp	r3, #0
   2af24:	1a00003b 	bne	2b018 <CNetSocket::Connect(char const*, char const*)+0x144>
   2af28:	e2452001 	sub	r2, r5, #1
   2af2c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
   2af30:	e1520003 	cmp	r2, r3
   2af34:	8a000037 	bhi	2b018 <CNetSocket::Connect(char const*, char const*)+0x144>
   2af38:	e5943004 	ldr	r3, [r4, #4]
   2af3c:	e3530000 	cmp	r3, #0
   2af40:	0a00002e 	beq	2b000 <CNetSocket::Connect(char const*, char const*)+0x12c>
   2af44:	e28d0010 	add	r0, sp, #16
   2af48:	ebfff573 	bl	2851c <CIPAddress::CIPAddress()>
   2af4c:	e5941004 	ldr	r1, [r4, #4]
   2af50:	e28d000c 	add	r0, sp, #12
   2af54:	eb000063 	bl	2b0e8 <CDNSClient::CDNSClient(CNetSubSystem*)>
   2af58:	e28d2010 	add	r2, sp, #16
   2af5c:	e1a01006 	mov	r1, r6
   2af60:	e28d000c 	add	r0, sp, #12
   2af64:	eb0000ae 	bl	2b224 <CDNSClient::Resolve(char const*, CIPAddress*)>
   2af68:	e3500000 	cmp	r0, #0
   2af6c:	0a00000d 	beq	2afa8 <CNetSocket::Connect(char const*, char const*)+0xd4>
   2af70:	e5943000 	ldr	r3, [r4]
   2af74:	e1a00004 	mov	r0, r4
   2af78:	e6ff2075 	uxth	r2, r5
   2af7c:	e28d1010 	add	r1, sp, #16
   2af80:	e593300c 	ldr	r3, [r3, #12]
   2af84:	e12fff33 	blx	r3
   2af88:	e1a04000 	mov	r4, r0
   2af8c:	e28d000c 	add	r0, sp, #12
   2af90:	eb00005e 	bl	2b110 <CDNSClient::~CDNSClient()>
   2af94:	e28d0010 	add	r0, sp, #16
   2af98:	ebfff586 	bl	285b8 <CIPAddress::~CIPAddress()>
   2af9c:	e1a00004 	mov	r0, r4
   2afa0:	e28dd01c 	add	sp, sp, #28
   2afa4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2afa8:	eb0010c1 	bl	2f2b4 <CLogger::Get()>
   2afac:	e3a02004 	mov	r2, #4
   2afb0:	e58d6000 	str	r6, [sp]
   2afb4:	e3013ce4 	movw	r3, #7396	; 0x1ce4
   2afb8:	e3403004 	movt	r3, #4
   2afbc:	e3011cf8 	movw	r1, #7416	; 0x1cf8
   2afc0:	e3401004 	movt	r1, #4
   2afc4:	e3e04000 	mvn	r4, #0
   2afc8:	eb001287 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2afcc:	eaffffee 	b	2af8c <CNetSocket::Connect(char const*, char const*)+0xb8>
   2afd0:	e3011cb0 	movw	r1, #7344	; 0x1cb0
   2afd4:	e3401004 	movt	r1, #4
   2afd8:	e30c0d48 	movw	r0, #52552	; 0xcd48
   2afdc:	e3400003 	movt	r0, #3
   2afe0:	e3a0202a 	mov	r2, #42	; 0x2a
   2afe4:	eb000635 	bl	2c8c0 <assertion_failed>
   2afe8:	e3011cb0 	movw	r1, #7344	; 0x1cb0
   2afec:	e3401004 	movt	r1, #4
   2aff0:	e3010cc0 	movw	r0, #7360	; 0x1cc0
   2aff4:	e3400004 	movt	r0, #4
   2aff8:	e3a0202b 	mov	r2, #43	; 0x2b
   2affc:	eb00062f 	bl	2c8c0 <assertion_failed>
   2b000:	e3011cb0 	movw	r1, #7344	; 0x1cb0
   2b004:	e3401004 	movt	r1, #4
   2b008:	e3000aa4 	movw	r0, #2724	; 0xaa4
   2b00c:	e3400004 	movt	r0, #4
   2b010:	e3a02037 	mov	r2, #55	; 0x37
   2b014:	eb000629 	bl	2c8c0 <assertion_failed>
   2b018:	eb0010a5 	bl	2f2b4 <CLogger::Get()>
   2b01c:	e3a02004 	mov	r2, #4
   2b020:	e58d7000 	str	r7, [sp]
   2b024:	e3013ccc 	movw	r3, #7372	; 0x1ccc
   2b028:	e3403004 	movt	r3, #4
   2b02c:	e3011cf8 	movw	r1, #7416	; 0x1cf8
   2b030:	e3401004 	movt	r1, #4
   2b034:	e3e04000 	mvn	r4, #0
   2b038:	eb00126b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b03c:	eaffffd6 	b	2af9c <CNetSocket::Connect(char const*, char const*)+0xc8>

0002b040 <CNetSocket::CNetSocket(CNetSubSystem*)>:
   2b040:	e3510000 	cmp	r1, #0
   2b044:	e59f2024 	ldr	r2, [pc, #36]	; 2b070 <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   2b048:	e5802000 	str	r2, [r0]
   2b04c:	e5801004 	str	r1, [r0, #4]
   2b050:	112fff1e 	bxne	lr
   2b054:	e3011cb0 	movw	r1, #7344	; 0x1cb0
   2b058:	e3401004 	movt	r1, #4
   2b05c:	e3000aa4 	movw	r0, #2724	; 0xaa4
   2b060:	e3400004 	movt	r0, #4
   2b064:	e3a02020 	mov	r2, #32
   2b068:	e92d4010 	push	{r4, lr}
   2b06c:	eb000613 	bl	2c8c0 <assertion_failed>
   2b070:	00041d0c 	.word	0x00041d0c

0002b074 <CNetSocket::~CNetSocket()>:
   2b074:	e12fff1e 	bx	lr

0002b078 <CNetSocket::~CNetSocket()>:
   2b078:	e92d4010 	push	{r4, lr}
   2b07c:	e3a01008 	mov	r1, #8
   2b080:	e1a04000 	mov	r4, r0
   2b084:	eb002f1c 	bl	36cfc <operator delete(void*, unsigned int)>
   2b088:	e1a00004 	mov	r0, r4
   2b08c:	e8bd8010 	pop	{r4, pc}

0002b090 <CNetSocket::GetNetSubSystem()>:
   2b090:	e5900004 	ldr	r0, [r0, #4]
   2b094:	e3500000 	cmp	r0, #0
   2b098:	112fff1e 	bxne	lr
   2b09c:	e3011cb0 	movw	r1, #7344	; 0x1cb0
   2b0a0:	e3401004 	movt	r1, #4
   2b0a4:	e3000aa4 	movw	r0, #2724	; 0xaa4
   2b0a8:	e3400004 	movt	r0, #4
   2b0ac:	e3a02046 	mov	r2, #70	; 0x46
   2b0b0:	e92d4010 	push	{r4, lr}
   2b0b4:	eb000601 	bl	2c8c0 <assertion_failed>

0002b0b8 <CNetSocket::Bind(unsigned short)>:
   2b0b8:	e3e00000 	mvn	r0, #0
   2b0bc:	e12fff1e 	bx	lr

0002b0c0 <CNetSocket::Listen(unsigned int)>:
   2b0c0:	e3e00000 	mvn	r0, #0
   2b0c4:	e12fff1e 	bx	lr

0002b0c8 <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   2b0c8:	e3a00000 	mov	r0, #0
   2b0cc:	e12fff1e 	bx	lr

0002b0d0 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   2b0d0:	e3e00000 	mvn	r0, #0
   2b0d4:	e12fff1e 	bx	lr

0002b0d8 <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   2b0d8:	e3e00000 	mvn	r0, #0
   2b0dc:	e12fff1e 	bx	lr

0002b0e0 <CNetSocket::SetOptionBroadcast(bool)>:
   2b0e0:	e3e00000 	mvn	r0, #0
   2b0e4:	e12fff1e 	bx	lr

0002b0e8 <CDNSClient::CDNSClient(CNetSubSystem*)>:
   2b0e8:	e3510000 	cmp	r1, #0
   2b0ec:	e5801000 	str	r1, [r0]
   2b0f0:	112fff1e 	bxne	lr
   2b0f4:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b0f8:	e3401004 	movt	r1, #4
   2b0fc:	e3000aa4 	movw	r0, #2724	; 0xaa4
   2b100:	e3400004 	movt	r0, #4
   2b104:	e3a02056 	mov	r2, #86	; 0x56
   2b108:	e92d4010 	push	{r4, lr}
   2b10c:	eb0005eb 	bl	2c8c0 <assertion_failed>

0002b110 <CDNSClient::~CDNSClient()>:
   2b110:	e12fff1e 	bx	lr

0002b114 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   2b114:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b118:	e2510000 	subs	r0, r1, #0
   2b11c:	e3a04000 	mov	r4, #0
   2b120:	e24dd00c 	sub	sp, sp, #12
   2b124:	e58d4004 	str	r4, [sp, #4]
   2b128:	0a000026 	beq	2b1c8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xb4>
   2b12c:	e1a05002 	mov	r5, r2
   2b130:	e1a0600d 	mov	r6, sp
   2b134:	e1a07004 	mov	r7, r4
   2b138:	e3a0200a 	mov	r2, #10
   2b13c:	e28d1004 	add	r1, sp, #4
   2b140:	eb002beb 	bl	360f4 <strtoul>
   2b144:	e3540003 	cmp	r4, #3
   2b148:	e1a03000 	mov	r3, r0
   2b14c:	0a00000c 	beq	2b184 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x70>
   2b150:	e59d1004 	ldr	r1, [sp, #4]
   2b154:	e3510000 	cmp	r1, #0
   2b158:	0a000029 	beq	2b204 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   2b15c:	e1d120d0 	ldrsb	r2, [r1]
   2b160:	e352002e 	cmp	r2, #46	; 0x2e
   2b164:	1a000026 	bne	2b204 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   2b168:	e35000ff 	cmp	r0, #255	; 0xff
   2b16c:	8a000024 	bhi	2b204 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   2b170:	e2810001 	add	r0, r1, #1
   2b174:	e2844001 	add	r4, r4, #1
   2b178:	e4c63001 	strb	r3, [r6], #1
   2b17c:	e58d7004 	str	r7, [sp, #4]
   2b180:	eaffffec 	b	2b138 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x24>
   2b184:	e59d2004 	ldr	r2, [sp, #4]
   2b188:	e3520000 	cmp	r2, #0
   2b18c:	0a000013 	beq	2b1e0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2b190:	e1d220d0 	ldrsb	r2, [r2]
   2b194:	e3520000 	cmp	r2, #0
   2b198:	1a000019 	bne	2b204 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   2b19c:	e35000ff 	cmp	r0, #255	; 0xff
   2b1a0:	8a000017 	bhi	2b204 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   2b1a4:	e3550000 	cmp	r5, #0
   2b1a8:	e5c63000 	strb	r3, [r6]
   2b1ac:	0a000016 	beq	2b20c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf8>
   2b1b0:	e1a00005 	mov	r0, r5
   2b1b4:	e1a0100d 	mov	r1, sp
   2b1b8:	ebfff585 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   2b1bc:	e3a00001 	mov	r0, #1
   2b1c0:	e28dd00c 	add	sp, sp, #12
   2b1c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b1c8:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b1cc:	e3401004 	movt	r1, #4
   2b1d0:	e3010d50 	movw	r0, #7504	; 0x1d50
   2b1d4:	e3400004 	movt	r0, #4
   2b1d8:	e300211a 	movw	r2, #282	; 0x11a
   2b1dc:	eb0005b7 	bl	2c8c0 <assertion_failed>
   2b1e0:	e35000ff 	cmp	r0, #255	; 0xff
   2b1e4:	8a000006 	bhi	2b204 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   2b1e8:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b1ec:	e3401004 	movt	r1, #4
   2b1f0:	e3010d70 	movw	r0, #7536	; 0x1d70
   2b1f4:	e3400004 	movt	r0, #4
   2b1f8:	e3002135 	movw	r2, #309	; 0x135
   2b1fc:	e5cd3003 	strb	r3, [sp, #3]
   2b200:	eb0005ae 	bl	2c8c0 <assertion_failed>
   2b204:	e3a00000 	mov	r0, #0
   2b208:	eaffffec 	b	2b1c0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xac>
   2b20c:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b210:	e3401004 	movt	r1, #4
   2b214:	e3010d60 	movw	r0, #7520	; 0x1d60
   2b218:	e3400004 	movt	r0, #4
   2b21c:	e3002139 	movw	r2, #313	; 0x139
   2b220:	eb0005a6 	bl	2c8c0 <assertion_failed>

0002b224 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   2b224:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b228:	e2515000 	subs	r5, r1, #0
   2b22c:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   2b230:	e24dd00c 	sub	sp, sp, #12
   2b234:	0a000066 	beq	2b3d4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1b0>
   2b238:	e5d53000 	ldrb	r3, [r5]
   2b23c:	e1a04000 	mov	r4, r0
   2b240:	e1a08002 	mov	r8, r2
   2b244:	e2433031 	sub	r3, r3, #49	; 0x31
   2b248:	e3530008 	cmp	r3, #8
   2b24c:	9a000020 	bls	2b2d4 <CDNSClient::Resolve(char const*, CIPAddress*)+0xb0>
   2b250:	e5940000 	ldr	r0, [r4]
   2b254:	e3500000 	cmp	r0, #0
   2b258:	0a000063 	beq	2b3ec <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   2b25c:	ebffd488 	bl	20484 <CNetSubSystem::GetConfig()>
   2b260:	ebfff499 	bl	284cc <CNetConfig::GetDNSServer() const>
   2b264:	ebfff58a 	bl	28894 <CIPAddress::Get() const>
   2b268:	e1a01000 	mov	r1, r0
   2b26c:	e28d0010 	add	r0, sp, #16
   2b270:	ebfff4b0 	bl	28538 <CIPAddress::CIPAddress(unsigned char const*)>
   2b274:	e28d0010 	add	r0, sp, #16
   2b278:	ebfff5a9 	bl	28924 <CIPAddress::IsNull() const>
   2b27c:	e2507000 	subs	r7, r0, #0
   2b280:	13a07000 	movne	r7, #0
   2b284:	0a000005 	beq	2b2a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   2b288:	e28d0010 	add	r0, sp, #16
   2b28c:	ebfff4c9 	bl	285b8 <CIPAddress::~CIPAddress()>
   2b290:	e1a00007 	mov	r0, r7
   2b294:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   2b298:	e28dd00c 	add	sp, sp, #12
   2b29c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2a0:	e5941000 	ldr	r1, [r4]
   2b2a4:	e3a02011 	mov	r2, #17
   2b2a8:	e28d0028 	add	r0, sp, #40	; 0x28
   2b2ac:	ebffd67f 	bl	20cb0 <CSocket::CSocket(CNetSubSystem*, int)>
   2b2b0:	e3a02035 	mov	r2, #53	; 0x35
   2b2b4:	e28d1010 	add	r1, sp, #16
   2b2b8:	e28d0028 	add	r0, sp, #40	; 0x28
   2b2bc:	ebffd52e 	bl	2077c <CSocket::Connect(CIPAddress&, unsigned short)>
   2b2c0:	e3500000 	cmp	r0, #0
   2b2c4:	0a000009 	beq	2b2f0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xcc>
   2b2c8:	e28d0028 	add	r0, sp, #40	; 0x28
   2b2cc:	ebffd4da 	bl	2063c <CSocket::~CSocket()>
   2b2d0:	eaffffec 	b	2b288 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   2b2d4:	ebffff8e 	bl	2b114 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   2b2d8:	e2507000 	subs	r7, r0, #0
   2b2dc:	0affffdb 	beq	2b250 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   2b2e0:	e1a00007 	mov	r0, r7
   2b2e4:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   2b2e8:	e28dd00c 	add	sp, sp, #12
   2b2ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2f0:	e28d9f72 	add	r9, sp, #456	; 0x1c8
   2b2f4:	e3a02c02 	mov	r2, #512	; 0x200
   2b2f8:	e1a01007 	mov	r1, r7
   2b2fc:	e1a00009 	mov	r0, r9
   2b300:	eb002c45 	bl	3641c <memset>
   2b304:	e3043db0 	movw	r3, #19888	; 0x4db0
   2b308:	e3403004 	movt	r3, #4
   2b30c:	e1a01005 	mov	r1, r5
   2b310:	e3a020ff 	mov	r2, #255	; 0xff
   2b314:	e28d00c8 	add	r0, sp, #200	; 0xc8
   2b318:	e3a0e001 	mov	lr, #1
   2b31c:	e1c9e0b2 	strh	lr, [r9, #2]
   2b320:	e1d3c0b0 	ldrh	ip, [r3]
   2b324:	e3a0ec01 	mov	lr, #256	; 0x100
   2b328:	e1c9e0b4 	strh	lr, [r9, #4]
   2b32c:	e6bfbfbc 	rev16	fp, ip
   2b330:	e28cc001 	add	ip, ip, #1
   2b334:	e1c9b0b0 	strh	fp, [r9]
   2b338:	e1c3c0b0 	strh	ip, [r3]
   2b33c:	e6ff307b 	uxth	r3, fp
   2b340:	e58d3004 	str	r3, [sp, #4]
   2b344:	eb002af1 	bl	35f10 <strncpy>
   2b348:	e28d00c8 	add	r0, sp, #200	; 0xc8
   2b34c:	e28d2008 	add	r2, sp, #8
   2b350:	e30a1950 	movw	r1, #43344	; 0xa950
   2b354:	e3401003 	movt	r1, #3
   2b358:	e5cd71c7 	strb	r7, [sp, #455]	; 0x1c7
   2b35c:	eb002b2d 	bl	36018 <strtok_r>
   2b360:	e2505000 	subs	r5, r0, #0
   2b364:	0a000086 	beq	2b584 <CDNSClient::Resolve(char const*, CIPAddress*)+0x360>
   2b368:	e30aa950 	movw	sl, #43344	; 0xa950
   2b36c:	e340a003 	movt	sl, #3
   2b370:	e28dbf75 	add	fp, sp, #468	; 0x1d4
   2b374:	ea000010 	b	2b3bc <CDNSClient::Resolve(char const*, CIPAddress*)+0x198>
   2b378:	e04b2009 	sub	r2, fp, r9
   2b37c:	e2801002 	add	r1, r0, #2
   2b380:	e2622c02 	rsb	r2, r2, #512	; 0x200
   2b384:	e1510002 	cmp	r1, r2
   2b388:	aaffffce 	bge	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b38c:	e1a0600b 	mov	r6, fp
   2b390:	e1a01005 	mov	r1, r5
   2b394:	e4c60001 	strb	r0, [r6], #1
   2b398:	e1a00006 	mov	r0, r6
   2b39c:	e086b004 	add	fp, r6, r4
   2b3a0:	eb002acf 	bl	35ee4 <strcpy>
   2b3a4:	e28d2008 	add	r2, sp, #8
   2b3a8:	e1a0100a 	mov	r1, sl
   2b3ac:	e3a00000 	mov	r0, #0
   2b3b0:	eb002b18 	bl	36018 <strtok_r>
   2b3b4:	e2505000 	subs	r5, r0, #0
   2b3b8:	0a000011 	beq	2b404 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1e0>
   2b3bc:	e1a00005 	mov	r0, r5
   2b3c0:	eb002a23 	bl	35c54 <strlen>
   2b3c4:	e1a04000 	mov	r4, r0
   2b3c8:	e35000ff 	cmp	r0, #255	; 0xff
   2b3cc:	9affffe9 	bls	2b378 <CDNSClient::Resolve(char const*, CIPAddress*)+0x154>
   2b3d0:	eaffffbc 	b	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b3d4:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b3d8:	e3401004 	movt	r1, #4
   2b3dc:	e3010d7c 	movw	r0, #7548	; 0x1d7c
   2b3e0:	e3400004 	movt	r0, #4
   2b3e4:	e3a02060 	mov	r2, #96	; 0x60
   2b3e8:	eb000534 	bl	2c8c0 <assertion_failed>
   2b3ec:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b3f0:	e3401004 	movt	r1, #4
   2b3f4:	e3000aa4 	movw	r0, #2724	; 0xaa4
   2b3f8:	e3400004 	movt	r0, #4
   2b3fc:	e3a0206a 	mov	r2, #106	; 0x6a
   2b400:	eb00052e 	bl	2c8c0 <assertion_failed>
   2b404:	e28b0001 	add	r0, fp, #1
   2b408:	e7c65004 	strb	r5, [r6, r4]
   2b40c:	e0402009 	sub	r2, r0, r9
   2b410:	e2622c02 	rsb	r2, r2, #512	; 0x200
   2b414:	e3520003 	cmp	r2, #3
   2b418:	e3a02c01 	mov	r2, #256	; 0x100
   2b41c:	e3402100 	movt	r2, #256	; 0x100
   2b420:	e58d200c 	str	r2, [sp, #12]
   2b424:	daffffa7 	ble	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b428:	e3a02004 	mov	r2, #4
   2b42c:	e28d100c 	add	r1, sp, #12
   2b430:	eb002c10 	bl	36478 <memcpy>
   2b434:	e28b3005 	add	r3, fp, #5
   2b438:	e0434009 	sub	r4, r3, r9
   2b43c:	e3540c02 	cmp	r4, #512	; 0x200
   2b440:	ca00005f 	bgt	2b5c4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3a0>
   2b444:	e3a06004 	mov	r6, #4
   2b448:	e28daff2 	add	sl, sp, #968	; 0x3c8
   2b44c:	e2566001 	subs	r6, r6, #1
   2b450:	0affff9c 	beq	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b454:	e3a03000 	mov	r3, #0
   2b458:	e1a02004 	mov	r2, r4
   2b45c:	e1a01009 	mov	r1, r9
   2b460:	e28d0028 	add	r0, sp, #40	; 0x28
   2b464:	ebffd538 	bl	2094c <CSocket::Send(void const*, unsigned int, int)>
   2b468:	e1500004 	cmp	r0, r4
   2b46c:	1affff95 	bne	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b470:	eb0003e9 	bl	2c41c <CScheduler::Get()>
   2b474:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   2b478:	eb0003c4 	bl	2c390 <CScheduler::MsSleep(unsigned int)>
   2b47c:	e3a03040 	mov	r3, #64	; 0x40
   2b480:	e3a02c02 	mov	r2, #512	; 0x200
   2b484:	e1a0100a 	mov	r1, sl
   2b488:	e28d0028 	add	r0, sp, #40	; 0x28
   2b48c:	ebffd54c 	bl	209c4 <CSocket::Receive(void*, unsigned int, int)>
   2b490:	e1a05000 	mov	r5, r0
   2b494:	e3500c02 	cmp	r0, #512	; 0x200
   2b498:	aa000043 	bge	2b5ac <CDNSClient::Resolve(char const*, CIPAddress*)+0x388>
   2b49c:	e3500000 	cmp	r0, #0
   2b4a0:	baffff88 	blt	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b4a4:	e3500019 	cmp	r0, #25
   2b4a8:	daffffe7 	ble	2b44c <CDNSClient::Resolve(char const*, CIPAddress*)+0x228>
   2b4ac:	e1da30b0 	ldrh	r3, [sl]
   2b4b0:	e59d2004 	ldr	r2, [sp, #4]
   2b4b4:	e1530002 	cmp	r3, r2
   2b4b8:	1affff82 	bne	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b4bc:	e1da20b2 	ldrh	r2, [sl, #2]
   2b4c0:	e3003ffa 	movw	r3, #4090	; 0xffa
   2b4c4:	e0033002 	and	r3, r3, r2
   2b4c8:	e3530080 	cmp	r3, #128	; 0x80
   2b4cc:	1affff7d 	bne	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b4d0:	e1da30b4 	ldrh	r3, [sl, #4]
   2b4d4:	e3530c01 	cmp	r3, #256	; 0x100
   2b4d8:	1affff7a 	bne	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b4dc:	e1da30b6 	ldrh	r3, [sl, #6]
   2b4e0:	e3530000 	cmp	r3, #0
   2b4e4:	128d4ff5 	addne	r4, sp, #980	; 0x3d4
   2b4e8:	1a000005 	bne	2b504 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2e0>
   2b4ec:	eaffff75 	b	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b4f0:	e2833001 	add	r3, r3, #1
   2b4f4:	e0844003 	add	r4, r4, r3
   2b4f8:	e044300a 	sub	r3, r4, sl
   2b4fc:	e1530005 	cmp	r3, r5
   2b500:	aaffff70 	bge	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b504:	e5d43000 	ldrb	r3, [r4]
   2b508:	e3530000 	cmp	r3, #0
   2b50c:	1afffff7 	bne	2b4f0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2cc>
   2b510:	e2844005 	add	r4, r4, #5
   2b514:	e044300a 	sub	r3, r4, sl
   2b518:	e1530005 	cmp	r3, r5
   2b51c:	aaffff69 	bge	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b520:	e245600e 	sub	r6, r5, #14
   2b524:	e5d43000 	ldrb	r3, [r4]
   2b528:	e20320c0 	and	r2, r3, #192	; 0xc0
   2b52c:	e35200c0 	cmp	r2, #192	; 0xc0
   2b530:	02844002 	addeq	r4, r4, #2
   2b534:	1a000028 	bne	2b5dc <CDNSClient::Resolve(char const*, CIPAddress*)+0x3b8>
   2b538:	e044300a 	sub	r3, r4, sl
   2b53c:	e1530006 	cmp	r3, r6
   2b540:	caffff60 	bgt	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b544:	e3a0200e 	mov	r2, #14
   2b548:	e1a01004 	mov	r1, r4
   2b54c:	e28d0018 	add	r0, sp, #24
   2b550:	eb002bc8 	bl	36478 <memcpy>
   2b554:	e1dd31b8 	ldrh	r3, [sp, #24]
   2b558:	e3530c01 	cmp	r3, #256	; 0x100
   2b55c:	0a000029 	beq	2b608 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   2b560:	e1dd32b0 	ldrh	r3, [sp, #32]
   2b564:	e6bf3fb3 	rev16	r3, r3
   2b568:	e6ff3073 	uxth	r3, r3
   2b56c:	e283300a 	add	r3, r3, #10
   2b570:	e0844003 	add	r4, r4, r3
   2b574:	e044300a 	sub	r3, r4, sl
   2b578:	e1530005 	cmp	r3, r5
   2b57c:	baffffe8 	blt	2b524 <CDNSClient::Resolve(char const*, CIPAddress*)+0x300>
   2b580:	eaffff50 	b	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b584:	e3a02004 	mov	r2, #4
   2b588:	e28d100c 	add	r1, sp, #12
   2b58c:	e289000d 	add	r0, r9, #13
   2b590:	e3a03c01 	mov	r3, #256	; 0x100
   2b594:	e3403100 	movt	r3, #256	; 0x100
   2b598:	e5cd71d4 	strb	r7, [sp, #468]	; 0x1d4
   2b59c:	e58d300c 	str	r3, [sp, #12]
   2b5a0:	e3a04011 	mov	r4, #17
   2b5a4:	eb002bb3 	bl	36478 <memcpy>
   2b5a8:	eaffffa5 	b	2b444 <CDNSClient::Resolve(char const*, CIPAddress*)+0x220>
   2b5ac:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b5b0:	e3401004 	movt	r1, #4
   2b5b4:	e3010dac 	movw	r0, #7596	; 0x1dac
   2b5b8:	e3400004 	movt	r0, #4
   2b5bc:	e3a020ba 	mov	r2, #186	; 0xba
   2b5c0:	eb0004be 	bl	2c8c0 <assertion_failed>
   2b5c4:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b5c8:	e3401004 	movt	r1, #4
   2b5cc:	e3010d8c 	movw	r0, #7564	; 0x1d8c
   2b5d0:	e3400004 	movt	r0, #4
   2b5d4:	e3a020a9 	mov	r2, #169	; 0xa9
   2b5d8:	eb0004b8 	bl	2c8c0 <assertion_failed>
   2b5dc:	e2844001 	add	r4, r4, #1
   2b5e0:	ea000003 	b	2b5f4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3d0>
   2b5e4:	e1a04003 	mov	r4, r3
   2b5e8:	e4d43001 	ldrb	r3, [r4], #1
   2b5ec:	e3530000 	cmp	r3, #0
   2b5f0:	0affffd0 	beq	2b538 <CDNSClient::Resolve(char const*, CIPAddress*)+0x314>
   2b5f4:	e0843003 	add	r3, r4, r3
   2b5f8:	e043200a 	sub	r2, r3, sl
   2b5fc:	e1520005 	cmp	r2, r5
   2b600:	bafffff7 	blt	2b5e4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3c0>
   2b604:	eaffff2f 	b	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b608:	e1dd31ba 	ldrh	r3, [sp, #26]
   2b60c:	e3530c01 	cmp	r3, #256	; 0x100
   2b610:	1affffd2 	bne	2b560 <CDNSClient::Resolve(char const*, CIPAddress*)+0x33c>
   2b614:	e1dd32b0 	ldrh	r3, [sp, #32]
   2b618:	e3530b01 	cmp	r3, #1024	; 0x400
   2b61c:	1affffcf 	bne	2b560 <CDNSClient::Resolve(char const*, CIPAddress*)+0x33c>
   2b620:	e3580000 	cmp	r8, #0
   2b624:	0a000004 	beq	2b63c <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   2b628:	e28d1022 	add	r1, sp, #34	; 0x22
   2b62c:	e1a00008 	mov	r0, r8
   2b630:	e3a07001 	mov	r7, #1
   2b634:	ebfff466 	bl	287d4 <CIPAddress::Set(unsigned char const*)>
   2b638:	eaffff22 	b	2b2c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2b63c:	e3011d40 	movw	r1, #7488	; 0x1d40
   2b640:	e3401004 	movt	r1, #4
   2b644:	e3010d60 	movw	r0, #7520	; 0x1d60
   2b648:	e3400004 	movt	r0, #4
   2b64c:	e300210d 	movw	r2, #269	; 0x10d
   2b650:	eb00049a 	bl	2c8c0 <assertion_failed>
   2b654:	00000000 	andeq	r0, r0, r0

0002b658 <CTask::Run()>:
   2b658:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b65c:	e3401004 	movt	r1, #4
   2b660:	e30b0708 	movw	r0, #46856	; 0xb708
   2b664:	e3400003 	movt	r0, #3
   2b668:	e3a02057 	mov	r2, #87	; 0x57
   2b66c:	e92d4010 	push	{r4, lr}
   2b670:	eb000492 	bl	2c8c0 <assertion_failed>

0002b674 <CTask::TaskEntry(void*)>:
   2b674:	e92d4010 	push	{r4, lr}
   2b678:	e2504000 	subs	r4, r0, #0
   2b67c:	0a00000e 	beq	2b6bc <CTask::TaskEntry(void*)+0x48>
   2b680:	e5943000 	ldr	r3, [r4]
   2b684:	e5933008 	ldr	r3, [r3, #8]
   2b688:	e12fff33 	blx	r3
   2b68c:	e3a03005 	mov	r3, #5
   2b690:	e28400e8 	add	r0, r4, #232	; 0xe8
   2b694:	e5c43004 	strb	r3, [r4, #4]
   2b698:	eb0003e1 	bl	2c624 <CSynchronizationEvent::Set()>
   2b69c:	eb00035e 	bl	2c41c <CScheduler::Get()>
   2b6a0:	eb000259 	bl	2c00c <CScheduler::Yield()>
   2b6a4:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b6a8:	e3401004 	movt	r1, #4
   2b6ac:	e30b0708 	movw	r0, #46856	; 0xb708
   2b6b0:	e3400003 	movt	r0, #3
   2b6b4:	e3a020b6 	mov	r2, #182	; 0xb6
   2b6b8:	eb000480 	bl	2c8c0 <assertion_failed>
   2b6bc:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b6c0:	e3401004 	movt	r1, #4
   2b6c4:	e30a0a18 	movw	r0, #43544	; 0xaa18
   2b6c8:	e3400003 	movt	r0, #3
   2b6cc:	e3a020ae 	mov	r2, #174	; 0xae
   2b6d0:	eb00047a 	bl	2c8c0 <assertion_failed>

0002b6d4 <CTask::CTask(unsigned int, bool)>:
   2b6d4:	e92d4070 	push	{r4, r5, r6, lr}
   2b6d8:	e1a04000 	mov	r4, r0
   2b6dc:	e59f3124 	ldr	r3, [pc, #292]	; 2b808 <CTask::CTask(unsigned int, bool)+0x134>
   2b6e0:	e28060cc 	add	r6, r0, #204	; 0xcc
   2b6e4:	e3a05000 	mov	r5, #0
   2b6e8:	e5803000 	str	r3, [r0]
   2b6ec:	e2222001 	eor	r2, r2, #1
   2b6f0:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   2b6f4:	e5c02004 	strb	r2, [r0, #4]
   2b6f8:	e1a00006 	mov	r0, r6
   2b6fc:	e5c45005 	strb	r5, [r4, #5]
   2b700:	e58450c8 	str	r5, [r4, #200]	; 0xc8
   2b704:	eb001f94 	bl	3355c <CString::CString()>
   2b708:	e1a01005 	mov	r1, r5
   2b70c:	e28400e8 	add	r0, r4, #232	; 0xe8
   2b710:	eb0003b0 	bl	2c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   2b714:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   2b718:	e28430dc 	add	r3, r4, #220	; 0xdc
   2b71c:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   2b720:	e58450f0 	str	r5, [r4, #240]	; 0xf0
   2b724:	e1500005 	cmp	r0, r5
   2b728:	f443078f 	vst1.32	{d16}, [r3]
   2b72c:	e58450e4 	str	r5, [r4, #228]	; 0xe4
   2b730:	0a000016 	beq	2b790 <CTask::CTask(unsigned int, bool)+0xbc>
   2b734:	e3500b01 	cmp	r0, #1024	; 0x400
   2b738:	3a000024 	bcc	2b7d0 <CTask::CTask(unsigned int, bool)+0xfc>
   2b73c:	e2105003 	ands	r5, r0, #3
   2b740:	1a000028 	bne	2b7e8 <CTask::CTask(unsigned int, bool)+0x114>
   2b744:	eb002d5a 	bl	36cb4 <operator new[](unsigned int)>
   2b748:	e3a020b8 	mov	r2, #184	; 0xb8
   2b74c:	e58400c8 	str	r0, [r4, #200]	; 0xc8
   2b750:	e1a01005 	mov	r1, r5
   2b754:	e284000c 	add	r0, r4, #12
   2b758:	eb002b2f 	bl	3641c <memset>
   2b75c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   2b760:	e584400c 	str	r4, [r4, #12]
   2b764:	e3530000 	cmp	r3, #0
   2b768:	0a000012 	beq	2b7b8 <CTask::CTask(unsigned int, bool)+0xe4>
   2b76c:	eddf0b23 	vldr	d16, [pc, #140]	; 2b800 <CTask::CTask(unsigned int, bool)+0x12c>
   2b770:	e2842010 	add	r2, r4, #16
   2b774:	e59410c4 	ldr	r1, [r4, #196]	; 0xc4
   2b778:	e0833001 	add	r3, r3, r1
   2b77c:	e30b1674 	movw	r1, #46708	; 0xb674
   2b780:	e3401002 	movt	r1, #2
   2b784:	e584303c 	str	r3, [r4, #60]	; 0x3c
   2b788:	e5841040 	str	r1, [r4, #64]	; 0x40
   2b78c:	f442078f 	vst1.32	{d16}, [r2]
   2b790:	e1a02004 	mov	r2, r4
   2b794:	e1a00006 	mov	r0, r6
   2b798:	e3011e1c 	movw	r1, #7708	; 0x1e1c
   2b79c:	e3401004 	movt	r1, #4
   2b7a0:	eb002538 	bl	34c88 <CString::Format(char const*, ...)>
   2b7a4:	eb00031c 	bl	2c41c <CScheduler::Get()>
   2b7a8:	e1a01004 	mov	r1, r4
   2b7ac:	eb000149 	bl	2bcd8 <CScheduler::AddTask(CTask*)>
   2b7b0:	e1a00004 	mov	r0, r4
   2b7b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b7b8:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b7bc:	e3401004 	movt	r1, #4
   2b7c0:	e3010e0c 	movw	r0, #7692	; 0x1e0c
   2b7c4:	e3400004 	movt	r0, #4
   2b7c8:	e3a0208c 	mov	r2, #140	; 0x8c
   2b7cc:	eb00043b 	bl	2c8c0 <assertion_failed>
   2b7d0:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b7d4:	e3401004 	movt	r1, #4
   2b7d8:	e3010ddc 	movw	r0, #7644	; 0x1ddc
   2b7dc:	e3400004 	movt	r0, #4
   2b7e0:	e3a02027 	mov	r2, #39	; 0x27
   2b7e4:	eb000435 	bl	2c8c0 <assertion_failed>
   2b7e8:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b7ec:	e3401004 	movt	r1, #4
   2b7f0:	e3010df4 	movw	r0, #7668	; 0x1df4
   2b7f4:	e3400004 	movt	r0, #4
   2b7f8:	e3a02029 	mov	r2, #41	; 0x29
   2b7fc:	eb00042f 	bl	2c8c0 <assertion_failed>
   2b800:	40000000 	.word	0x40000000
   2b804:	02000000 	.word	0x02000000
   2b808:	00041e84 	.word	0x00041e84

0002b80c <CTask::Start()>:
   2b80c:	e5d03004 	ldrb	r3, [r0, #4]
   2b810:	e3530000 	cmp	r3, #0
   2b814:	1a000002 	bne	2b824 <CTask::Start()+0x18>
   2b818:	e3a03001 	mov	r3, #1
   2b81c:	e5c03004 	strb	r3, [r0, #4]
   2b820:	e12fff1e 	bx	lr
   2b824:	e5d03005 	ldrb	r3, [r0, #5]
   2b828:	e3530000 	cmp	r3, #0
   2b82c:	0a000002 	beq	2b83c <CTask::Start()+0x30>
   2b830:	e3a03000 	mov	r3, #0
   2b834:	e5c03005 	strb	r3, [r0, #5]
   2b838:	e12fff1e 	bx	lr
   2b83c:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b840:	e3401004 	movt	r1, #4
   2b844:	e3010e24 	movw	r0, #7716	; 0x1e24
   2b848:	e3400004 	movt	r0, #4
   2b84c:	e3a02049 	mov	r2, #73	; 0x49
   2b850:	e92d4010 	push	{r4, lr}
   2b854:	eb000419 	bl	2c8c0 <assertion_failed>

0002b858 <CTask::Suspend()>:
   2b858:	e5d03004 	ldrb	r3, [r0, #4]
   2b85c:	e92d4010 	push	{r4, lr}
   2b860:	e3530000 	cmp	r3, #0
   2b864:	0a000005 	beq	2b880 <CTask::Suspend()+0x28>
   2b868:	e5d03005 	ldrb	r3, [r0, #5]
   2b86c:	e3530000 	cmp	r3, #0
   2b870:	1a000008 	bne	2b898 <CTask::Suspend()+0x40>
   2b874:	e3a03001 	mov	r3, #1
   2b878:	e5c03005 	strb	r3, [r0, #5]
   2b87c:	e8bd8010 	pop	{r4, pc}
   2b880:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b884:	e3401004 	movt	r1, #4
   2b888:	e3010e34 	movw	r0, #7732	; 0x1e34
   2b88c:	e3400004 	movt	r0, #4
   2b890:	e3a02050 	mov	r2, #80	; 0x50
   2b894:	eb000409 	bl	2c8c0 <assertion_failed>
   2b898:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b89c:	e3401004 	movt	r1, #4
   2b8a0:	e3010e4c 	movw	r0, #7756	; 0x1e4c
   2b8a4:	e3400004 	movt	r0, #4
   2b8a8:	e3a02051 	mov	r2, #81	; 0x51
   2b8ac:	eb000403 	bl	2c8c0 <assertion_failed>

0002b8b0 <CTask::Terminate()>:
   2b8b0:	e1a03000 	mov	r3, r0
   2b8b4:	e3a02005 	mov	r2, #5
   2b8b8:	e92d4010 	push	{r4, lr}
   2b8bc:	e28000e8 	add	r0, r0, #232	; 0xe8
   2b8c0:	e5c32004 	strb	r2, [r3, #4]
   2b8c4:	eb000356 	bl	2c624 <CSynchronizationEvent::Set()>
   2b8c8:	eb0002d3 	bl	2c41c <CScheduler::Get()>
   2b8cc:	eb0001ce 	bl	2c00c <CScheduler::Yield()>
   2b8d0:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b8d4:	e3401004 	movt	r1, #4
   2b8d8:	e30b0708 	movw	r0, #46856	; 0xb708
   2b8dc:	e3400003 	movt	r0, #3
   2b8e0:	e3a02060 	mov	r2, #96	; 0x60
   2b8e4:	eb0003f5 	bl	2c8c0 <assertion_failed>

0002b8e8 <CTask::WaitForTermination()>:
   2b8e8:	e92d4010 	push	{r4, lr}
   2b8ec:	e1a04000 	mov	r4, r0
   2b8f0:	eb0002c9 	bl	2c41c <CScheduler::Get()>
   2b8f4:	e1a01004 	mov	r1, r4
   2b8f8:	eb000099 	bl	2bb64 <CScheduler::IsValidTask(CTask*)>
   2b8fc:	e3500000 	cmp	r0, #0
   2b900:	08bd8010 	popeq	{r4, pc}
   2b904:	e28400e8 	add	r0, r4, #232	; 0xe8
   2b908:	e8bd4010 	pop	{r4, lr}
   2b90c:	ea000357 	b	2c670 <CSynchronizationEvent::Wait()>

0002b910 <CTask::SetName(char const*)>:
   2b910:	e28000cc 	add	r0, r0, #204	; 0xcc
   2b914:	ea001f4e 	b	33654 <CString::operator=(char const*)>

0002b918 <CTask::GetName() const>:
   2b918:	e28000cc 	add	r0, r0, #204	; 0xcc
   2b91c:	ea001f46 	b	3363c <CString::operator char const*() const>

0002b920 <CTask::SetUserData(void*, unsigned int)>:
   2b920:	e0800102 	add	r0, r0, r2, lsl #2
   2b924:	e58010dc 	str	r1, [r0, #220]	; 0xdc
   2b928:	e12fff1e 	bx	lr

0002b92c <CTask::GetUserData(unsigned int)>:
   2b92c:	e0800101 	add	r0, r0, r1, lsl #2
   2b930:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   2b934:	e12fff1e 	bx	lr

0002b938 <CTask::InitializeRegs()>:
   2b938:	e92d4010 	push	{r4, lr}
   2b93c:	e1a04000 	mov	r4, r0
   2b940:	e3a020b8 	mov	r2, #184	; 0xb8
   2b944:	e3a01000 	mov	r1, #0
   2b948:	e280000c 	add	r0, r0, #12
   2b94c:	eb002ab2 	bl	3641c <memset>
   2b950:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   2b954:	e584400c 	str	r4, [r4, #12]
   2b958:	e3530000 	cmp	r3, #0
   2b95c:	0a000009 	beq	2b988 <CTask::InitializeRegs()+0x50>
   2b960:	eddf0b0e 	vldr	d16, [pc, #56]	; 2b9a0 <CTask::InitializeRegs()+0x68>
   2b964:	e2841010 	add	r1, r4, #16
   2b968:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   2b96c:	e30b2674 	movw	r2, #46708	; 0xb674
   2b970:	e3402002 	movt	r2, #2
   2b974:	e5842040 	str	r2, [r4, #64]	; 0x40
   2b978:	e0833000 	add	r3, r3, r0
   2b97c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   2b980:	f441078f 	vst1.32	{d16}, [r1]
   2b984:	e8bd8010 	pop	{r4, pc}
   2b988:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2b98c:	e3401004 	movt	r1, #4
   2b990:	e3010e0c 	movw	r0, #7692	; 0x1e0c
   2b994:	e3400004 	movt	r0, #4
   2b998:	e3a0208c 	mov	r2, #140	; 0x8c
   2b99c:	eb0003c7 	bl	2c8c0 <assertion_failed>
   2b9a0:	40000000 	.word	0x40000000
   2b9a4:	02000000 	.word	0x02000000

0002b9a8 <CTask::~CTask()>:
   2b9a8:	e5d03004 	ldrb	r3, [r0, #4]
   2b9ac:	e59f2060 	ldr	r2, [pc, #96]	; 2ba14 <CTask::~CTask()+0x6c>
   2b9b0:	e92d4010 	push	{r4, lr}
   2b9b4:	e3530005 	cmp	r3, #5
   2b9b8:	e5802000 	str	r2, [r0]
   2b9bc:	1a00000e 	bne	2b9fc <CTask::~CTask()+0x54>
   2b9c0:	e1a04000 	mov	r4, r0
   2b9c4:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   2b9c8:	e3a03006 	mov	r3, #6
   2b9cc:	e3500000 	cmp	r0, #0
   2b9d0:	e5c43004 	strb	r3, [r4, #4]
   2b9d4:	0a000000 	beq	2b9dc <CTask::~CTask()+0x34>
   2b9d8:	eb002cc1 	bl	36ce4 <operator delete[](void*)>
   2b9dc:	e3a03000 	mov	r3, #0
   2b9e0:	e28400e8 	add	r0, r4, #232	; 0xe8
   2b9e4:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   2b9e8:	eb0002fe 	bl	2c5e8 <CSynchronizationEvent::~CSynchronizationEvent()>
   2b9ec:	e28400cc 	add	r0, r4, #204	; 0xcc
   2b9f0:	eb001ea6 	bl	33490 <CString::~CString()>
   2b9f4:	e1a00004 	mov	r0, r4
   2b9f8:	e8bd8010 	pop	{r4, pc}
   2b9fc:	e3011dd0 	movw	r1, #7632	; 0x1dd0
   2ba00:	e3401004 	movt	r1, #4
   2ba04:	e3010e5c 	movw	r0, #7772	; 0x1e5c
   2ba08:	e3400004 	movt	r0, #4
   2ba0c:	e3a0203a 	mov	r2, #58	; 0x3a
   2ba10:	eb0003aa 	bl	2c8c0 <assertion_failed>
   2ba14:	00041e84 	.word	0x00041e84

0002ba18 <CTask::~CTask()>:
   2ba18:	e92d4010 	push	{r4, lr}
   2ba1c:	e1a04000 	mov	r4, r0
   2ba20:	ebffffe0 	bl	2b9a8 <CTask::~CTask()>
   2ba24:	e1a00004 	mov	r0, r4
   2ba28:	e3a010f4 	mov	r1, #244	; 0xf4
   2ba2c:	eb002cb2 	bl	36cfc <operator delete(void*, unsigned int)>
   2ba30:	e1a00004 	mov	r0, r4
   2ba34:	e8bd8010 	pop	{r4, pc}

0002ba38 <CScheduler::CScheduler()>:
   2ba38:	e3041f38 	movw	r1, #20280	; 0x4f38
   2ba3c:	e3401004 	movt	r1, #4
   2ba40:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   2ba44:	e92d4070 	push	{r4, r5, r6, lr}
   2ba48:	e1a04000 	mov	r4, r0
   2ba4c:	e280005c 	add	r0, r0, #92	; 0x5c
   2ba50:	e5916000 	ldr	r6, [r1]
   2ba54:	e3a03000 	mov	r3, #0
   2ba58:	e3a02001 	mov	r2, #1
   2ba5c:	e5843050 	str	r3, [r4, #80]	; 0x50
   2ba60:	e1560003 	cmp	r6, r3
   2ba64:	e5843054 	str	r3, [r4, #84]	; 0x54
   2ba68:	e5843058 	str	r3, [r4, #88]	; 0x58
   2ba6c:	f440078f 	vst1.32	{d16}, [r0]
   2ba70:	e5843064 	str	r3, [r4, #100]	; 0x64
   2ba74:	e5842068 	str	r2, [r4, #104]	; 0x68
   2ba78:	1a00000d 	bne	2bab4 <CScheduler::CScheduler()+0x7c>
   2ba7c:	e3a000f4 	mov	r0, #244	; 0xf4
   2ba80:	e5814000 	str	r4, [r1]
   2ba84:	eb002c84 	bl	36c9c <operator new(unsigned int)>
   2ba88:	e1a02006 	mov	r2, r6
   2ba8c:	e1a05000 	mov	r5, r0
   2ba90:	e1a01006 	mov	r1, r6
   2ba94:	ebffff0e 	bl	2b6d4 <CTask::CTask(unsigned int, bool)>
   2ba98:	e1a00005 	mov	r0, r5
   2ba9c:	e5845054 	str	r5, [r4, #84]	; 0x54
   2baa0:	e3011ea0 	movw	r1, #7840	; 0x1ea0
   2baa4:	e3401004 	movt	r1, #4
   2baa8:	ebffff98 	bl	2b910 <CTask::SetName(char const*)>
   2baac:	e1a00004 	mov	r0, r4
   2bab0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bab4:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bab8:	e3401004 	movt	r1, #4
   2babc:	e3000a74 	movw	r0, #2676	; 0xa74
   2bac0:	e3400004 	movt	r0, #4
   2bac4:	e3a02027 	mov	r2, #39	; 0x27
   2bac8:	eb00037c 	bl	2c8c0 <assertion_failed>

0002bacc <CScheduler::~CScheduler()>:
   2bacc:	e3043f38 	movw	r3, #20280	; 0x4f38
   2bad0:	e3403004 	movt	r3, #4
   2bad4:	e3a02000 	mov	r2, #0
   2bad8:	e5832000 	str	r2, [r3]
   2badc:	e12fff1e 	bx	lr

0002bae0 <CScheduler::GetCurrentTask()>:
   2bae0:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   2bae4:	e12fff1e 	bx	lr

0002bae8 <CScheduler::GetTask(char const*)>:
   2bae8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2baec:	e2518000 	subs	r8, r1, #0
   2baf0:	0a000015 	beq	2bb4c <CScheduler::GetTask(char const*)+0x64>
   2baf4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   2baf8:	e1a07000 	mov	r7, r0
   2bafc:	e3530000 	cmp	r3, #0
   2bb00:	12406004 	subne	r6, r0, #4
   2bb04:	13a04000 	movne	r4, #0
   2bb08:	0a00000c 	beq	2bb40 <CScheduler::GetTask(char const*)+0x58>
   2bb0c:	e5b65004 	ldr	r5, [r6, #4]!
   2bb10:	e3550000 	cmp	r5, #0
   2bb14:	0a000006 	beq	2bb34 <CScheduler::GetTask(char const*)+0x4c>
   2bb18:	e1a00005 	mov	r0, r5
   2bb1c:	ebffff7d 	bl	2b918 <CTask::GetName() const>
   2bb20:	e1a01008 	mov	r1, r8
   2bb24:	eb002854 	bl	35c7c <strcmp>
   2bb28:	e3500000 	cmp	r0, #0
   2bb2c:	0a000004 	beq	2bb44 <CScheduler::GetTask(char const*)+0x5c>
   2bb30:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   2bb34:	e2844001 	add	r4, r4, #1
   2bb38:	e1530004 	cmp	r3, r4
   2bb3c:	8afffff2 	bhi	2bb0c <CScheduler::GetTask(char const*)+0x24>
   2bb40:	e3a05000 	mov	r5, #0
   2bb44:	e1a00005 	mov	r0, r5
   2bb48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bb4c:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bb50:	e3401004 	movt	r1, #4
   2bb54:	e3010ea8 	movw	r0, #7848	; 0x1ea8
   2bb58:	e3400004 	movt	r0, #4
   2bb5c:	e3a02082 	mov	r2, #130	; 0x82
   2bb60:	eb000356 	bl	2c8c0 <assertion_failed>

0002bb64 <CScheduler::IsValidTask(CTask*)>:
   2bb64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2bb68:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   2bb6c:	e35e0000 	cmp	lr, #0
   2bb70:	0a00000c 	beq	2bba8 <CScheduler::IsValidTask(CTask*)+0x44>
   2bb74:	e240c004 	sub	ip, r0, #4
   2bb78:	e3a03000 	mov	r3, #0
   2bb7c:	e5bc2004 	ldr	r2, [ip, #4]!
   2bb80:	e2833001 	add	r3, r3, #1
   2bb84:	e2520000 	subs	r0, r2, #0
   2bb88:	13a00001 	movne	r0, #1
   2bb8c:	e1520001 	cmp	r2, r1
   2bb90:	13a00000 	movne	r0, #0
   2bb94:	e3500000 	cmp	r0, #0
   2bb98:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   2bb9c:	e153000e 	cmp	r3, lr
   2bba0:	1afffff5 	bne	2bb7c <CScheduler::IsValidTask(CTask*)+0x18>
   2bba4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2bba8:	e1a0000e 	mov	r0, lr
   2bbac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002bbb0 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   2bbb0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   2bbb4:	e92d4010 	push	{r4, lr}
   2bbb8:	e3530000 	cmp	r3, #0
   2bbbc:	1a000008 	bne	2bbe4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x34>
   2bbc0:	e3510000 	cmp	r1, #0
   2bbc4:	e580105c 	str	r1, [r0, #92]	; 0x5c
   2bbc8:	18bd8010 	popne	{r4, pc}
   2bbcc:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bbd0:	e3401004 	movt	r1, #4
   2bbd4:	e3010ed4 	movw	r0, #7892	; 0x1ed4
   2bbd8:	e3400004 	movt	r0, #4
   2bbdc:	e3a020a2 	mov	r2, #162	; 0xa2
   2bbe0:	eb000336 	bl	2c8c0 <assertion_failed>
   2bbe4:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bbe8:	e3401004 	movt	r1, #4
   2bbec:	e3010eb8 	movw	r0, #7864	; 0x1eb8
   2bbf0:	e3400004 	movt	r0, #4
   2bbf4:	e3a020a0 	mov	r2, #160	; 0xa0
   2bbf8:	eb000330 	bl	2c8c0 <assertion_failed>

0002bbfc <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   2bbfc:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   2bc00:	e92d4010 	push	{r4, lr}
   2bc04:	e3530000 	cmp	r3, #0
   2bc08:	1a000008 	bne	2bc30 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x34>
   2bc0c:	e3510000 	cmp	r1, #0
   2bc10:	e5801060 	str	r1, [r0, #96]	; 0x60
   2bc14:	18bd8010 	popne	{r4, pc}
   2bc18:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bc1c:	e3401004 	movt	r1, #4
   2bc20:	e3010f10 	movw	r0, #7952	; 0x1f10
   2bc24:	e3400004 	movt	r0, #4
   2bc28:	e3a020a9 	mov	r2, #169	; 0xa9
   2bc2c:	eb000323 	bl	2c8c0 <assertion_failed>
   2bc30:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bc34:	e3401004 	movt	r1, #4
   2bc38:	e3010ef0 	movw	r0, #7920	; 0x1ef0
   2bc3c:	e3400004 	movt	r0, #4
   2bc40:	e3a020a7 	mov	r2, #167	; 0xa7
   2bc44:	eb00031d 	bl	2c8c0 <assertion_failed>

0002bc48 <CScheduler::SuspendNewTasks()>:
   2bc48:	e5903064 	ldr	r3, [r0, #100]	; 0x64
   2bc4c:	e2833001 	add	r3, r3, #1
   2bc50:	e5803064 	str	r3, [r0, #100]	; 0x64
   2bc54:	e12fff1e 	bx	lr

0002bc58 <CScheduler::ResumeNewTasks()>:
   2bc58:	e92d4070 	push	{r4, r5, r6, lr}
   2bc5c:	e5904064 	ldr	r4, [r0, #100]	; 0x64
   2bc60:	e3540000 	cmp	r4, #0
   2bc64:	da000015 	ble	2bcc0 <CScheduler::ResumeNewTasks()+0x68>
   2bc68:	e2444001 	sub	r4, r4, #1
   2bc6c:	e1a06000 	mov	r6, r0
   2bc70:	e3540000 	cmp	r4, #0
   2bc74:	e5804064 	str	r4, [r0, #100]	; 0x64
   2bc78:	18bd8070 	popne	{r4, r5, r6, pc}
   2bc7c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   2bc80:	e3530000 	cmp	r3, #0
   2bc84:	08bd8070 	popeq	{r4, r5, r6, pc}
   2bc88:	e2405004 	sub	r5, r0, #4
   2bc8c:	ea000002 	b	2bc9c <CScheduler::ResumeNewTasks()+0x44>
   2bc90:	e2844001 	add	r4, r4, #1
   2bc94:	e1530004 	cmp	r3, r4
   2bc98:	98bd8070 	popls	{r4, r5, r6, pc}
   2bc9c:	e5b50004 	ldr	r0, [r5, #4]!
   2bca0:	e3500000 	cmp	r0, #0
   2bca4:	0afffff9 	beq	2bc90 <CScheduler::ResumeNewTasks()+0x38>
   2bca8:	e5d02004 	ldrb	r2, [r0, #4]
   2bcac:	e3520000 	cmp	r2, #0
   2bcb0:	1afffff6 	bne	2bc90 <CScheduler::ResumeNewTasks()+0x38>
   2bcb4:	ebfffed4 	bl	2b80c <CTask::Start()>
   2bcb8:	e5963050 	ldr	r3, [r6, #80]	; 0x50
   2bcbc:	eafffff3 	b	2bc90 <CScheduler::ResumeNewTasks()+0x38>
   2bcc0:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bcc4:	e3401004 	movt	r1, #4
   2bcc8:	e3010f30 	movw	r0, #7984	; 0x1f30
   2bccc:	e3400004 	movt	r0, #4
   2bcd0:	e3a020b3 	mov	r2, #179	; 0xb3
   2bcd4:	eb0002f9 	bl	2c8c0 <assertion_failed>

0002bcd8 <CScheduler::AddTask(CTask*)>:
   2bcd8:	e92d4070 	push	{r4, r5, r6, lr}
   2bcdc:	e2515000 	subs	r5, r1, #0
   2bce0:	0a000021 	beq	2bd6c <CScheduler::AddTask(CTask*)+0x94>
   2bce4:	e5903064 	ldr	r3, [r0, #100]	; 0x64
   2bce8:	e1a04000 	mov	r4, r0
   2bcec:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   2bcf0:	e3530000 	cmp	r3, #0
   2bcf4:	13a03000 	movne	r3, #0
   2bcf8:	15c53004 	strbne	r3, [r5, #4]
   2bcfc:	e35e0000 	cmp	lr, #0
   2bd00:	0a00000c 	beq	2bd38 <CScheduler::AddTask(CTask*)+0x60>
   2bd04:	e2402004 	sub	r2, r0, #4
   2bd08:	e3a03000 	mov	r3, #0
   2bd0c:	ea000002 	b	2bd1c <CScheduler::AddTask(CTask*)+0x44>
   2bd10:	e2833001 	add	r3, r3, #1
   2bd14:	e15e0003 	cmp	lr, r3
   2bd18:	0a000004 	beq	2bd30 <CScheduler::AddTask(CTask*)+0x58>
   2bd1c:	e5b2c004 	ldr	ip, [r2, #4]!
   2bd20:	e35c0000 	cmp	ip, #0
   2bd24:	1afffff9 	bne	2bd10 <CScheduler::AddTask(CTask*)+0x38>
   2bd28:	e7845103 	str	r5, [r4, r3, lsl #2]
   2bd2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bd30:	e35e0014 	cmp	lr, #20
   2bd34:	0a000003 	beq	2bd48 <CScheduler::AddTask(CTask*)+0x70>
   2bd38:	e28e3001 	add	r3, lr, #1
   2bd3c:	e5843050 	str	r3, [r4, #80]	; 0x50
   2bd40:	e784510e 	str	r5, [r4, lr, lsl #2]
   2bd44:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bd48:	eb000d59 	bl	2f2b4 <CLogger::Get()>
   2bd4c:	e3a02000 	mov	r2, #0
   2bd50:	e3013f54 	movw	r3, #8020	; 0x1f54
   2bd54:	e3403004 	movt	r3, #4
   2bd58:	e30210e8 	movw	r1, #8424	; 0x20e8
   2bd5c:	e3401004 	movt	r1, #4
   2bd60:	eb000f21 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2bd64:	e594e050 	ldr	lr, [r4, #80]	; 0x50
   2bd68:	eafffff2 	b	2bd38 <CScheduler::AddTask(CTask*)+0x60>
   2bd6c:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bd70:	e3401004 	movt	r1, #4
   2bd74:	e3010f48 	movw	r0, #8008	; 0x1f48
   2bd78:	e3400004 	movt	r0, #4
   2bd7c:	e3a020e8 	mov	r2, #232	; 0xe8
   2bd80:	eb0002ce 	bl	2c8c0 <assertion_failed>

0002bd84 <CScheduler::RemoveTask(CTask*)>:
   2bd84:	e92d4010 	push	{r4, lr}
   2bd88:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   2bd8c:	e35e0000 	cmp	lr, #0
   2bd90:	0a00000e 	beq	2bdd0 <CScheduler::RemoveTask(CTask*)+0x4c>
   2bd94:	e2402004 	sub	r2, r0, #4
   2bd98:	e3a03000 	mov	r3, #0
   2bd9c:	ea000002 	b	2bdac <CScheduler::RemoveTask(CTask*)+0x28>
   2bda0:	e2833001 	add	r3, r3, #1
   2bda4:	e15e0003 	cmp	lr, r3
   2bda8:	0a000008 	beq	2bdd0 <CScheduler::RemoveTask(CTask*)+0x4c>
   2bdac:	e5b2c004 	ldr	ip, [r2, #4]!
   2bdb0:	e15c0001 	cmp	ip, r1
   2bdb4:	1afffff9 	bne	2bda0 <CScheduler::RemoveTask(CTask*)+0x1c>
   2bdb8:	e24ee001 	sub	lr, lr, #1
   2bdbc:	e3a02000 	mov	r2, #0
   2bdc0:	e15e0003 	cmp	lr, r3
   2bdc4:	e7802103 	str	r2, [r0, r3, lsl #2]
   2bdc8:	05803050 	streq	r3, [r0, #80]	; 0x50
   2bdcc:	e8bd8010 	pop	{r4, pc}
   2bdd0:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bdd4:	e3401004 	movt	r1, #4
   2bdd8:	e30b0708 	movw	r0, #46856	; 0xb708
   2bddc:	e3400003 	movt	r0, #3
   2bde0:	e3002113 	movw	r2, #275	; 0x113
   2bde4:	eb0002b5 	bl	2c8c0 <assertion_failed>

0002bde8 <CScheduler::WakeTasks(CTask**)>:
   2bde8:	e92d4070 	push	{r4, r5, r6, lr}
   2bdec:	e2514000 	subs	r4, r1, #0
   2bdf0:	0a000023 	beq	2be84 <CScheduler::WakeTasks(CTask**)+0x9c>
   2bdf4:	e1a05000 	mov	r5, r0
   2bdf8:	e5900068 	ldr	r0, [r0, #104]	; 0x68
   2bdfc:	e3500000 	cmp	r0, #0
   2be00:	1a00001d 	bne	2be7c <CScheduler::WakeTasks(CTask**)+0x94>
   2be04:	e5943000 	ldr	r3, [r4]
   2be08:	e3a0c000 	mov	ip, #0
   2be0c:	e584c000 	str	ip, [r4]
   2be10:	e153000c 	cmp	r3, ip
   2be14:	0a000013 	beq	2be68 <CScheduler::WakeTasks(CTask**)+0x80>
   2be18:	e3a01001 	mov	r1, #1
   2be1c:	ea000005 	b	2be38 <CScheduler::WakeTasks(CTask**)+0x50>
   2be20:	e59320f0 	ldr	r2, [r3, #240]	; 0xf0
   2be24:	e5c31004 	strb	r1, [r3, #4]
   2be28:	e3520000 	cmp	r2, #0
   2be2c:	e583c0f0 	str	ip, [r3, #240]	; 0xf0
   2be30:	0a00000c 	beq	2be68 <CScheduler::WakeTasks(CTask**)+0x80>
   2be34:	e1a03002 	mov	r3, r2
   2be38:	e5d32004 	ldrb	r2, [r3, #4]
   2be3c:	e3520002 	cmp	r2, #2
   2be40:	0afffff6 	beq	2be20 <CScheduler::WakeTasks(CTask**)+0x38>
   2be44:	e5d32004 	ldrb	r2, [r3, #4]
   2be48:	e3520003 	cmp	r2, #3
   2be4c:	0afffff3 	beq	2be20 <CScheduler::WakeTasks(CTask**)+0x38>
   2be50:	e3011e90 	movw	r1, #7824	; 0x1e90
   2be54:	e3401004 	movt	r1, #4
   2be58:	e3010f88 	movw	r0, #8072	; 0x1f88
   2be5c:	e3400004 	movt	r0, #4
   2be60:	e3002163 	movw	r2, #355	; 0x163
   2be64:	eb000295 	bl	2c8c0 <assertion_failed>
   2be68:	e5953068 	ldr	r3, [r5, #104]	; 0x68
   2be6c:	e3530000 	cmp	r3, #0
   2be70:	08bd8070 	popeq	{r4, r5, r6, pc}
   2be74:	e8bd4070 	pop	{r4, r5, r6, lr}
   2be78:	ea0031ca 	b	385a8 <LeaveCritical>
   2be7c:	eb00319e 	bl	384fc <EnterCritical>
   2be80:	eaffffdf 	b	2be04 <CScheduler::WakeTasks(CTask**)+0x1c>
   2be84:	e3011e90 	movw	r1, #7824	; 0x1e90
   2be88:	e3401004 	movt	r1, #4
   2be8c:	e3010f74 	movw	r0, #8052	; 0x1f74
   2be90:	e3400004 	movt	r0, #4
   2be94:	e3002151 	movw	r2, #337	; 0x151
   2be98:	eb000288 	bl	2c8c0 <assertion_failed>

0002be9c <CScheduler::GetNextTask()>:
   2be9c:	e92d4070 	push	{r4, r5, r6, lr}
   2bea0:	e1a06000 	mov	r6, r0
   2bea4:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   2bea8:	e3540014 	cmp	r4, #20
   2beac:	23a04000 	movcs	r4, #0
   2beb0:	eb002738 	bl	35b98 <CTimer::Get()>
   2beb4:	eb002462 	bl	35044 <CTimer::GetClockTicks()>
   2beb8:	e5962050 	ldr	r2, [r6, #80]	; 0x50
   2bebc:	e3520000 	cmp	r2, #0
   2bec0:	0a00003f 	beq	2bfc4 <CScheduler::GetNextTask()+0x128>
   2bec4:	e3a03001 	mov	r3, #1
   2bec8:	e2844001 	add	r4, r4, #1
   2becc:	e1540002 	cmp	r4, r2
   2bed0:	23a04000 	movcs	r4, #0
   2bed4:	e7965104 	ldr	r5, [r6, r4, lsl #2]
   2bed8:	e3550000 	cmp	r5, #0
   2bedc:	0a000010 	beq	2bf24 <CScheduler::GetNextTask()+0x88>
   2bee0:	e5d51005 	ldrb	r1, [r5, #5]
   2bee4:	e3510000 	cmp	r1, #0
   2bee8:	1a00000d 	bne	2bf24 <CScheduler::GetNextTask()+0x88>
   2beec:	e5d51004 	ldrb	r1, [r5, #4]
   2bef0:	e3510005 	cmp	r1, #5
   2bef4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   2bef8:	ea00003d 	b	2bff4 <CScheduler::GetNextTask()+0x158>
   2befc:	0002bf24 	.word	0x0002bf24
   2bf00:	0002bf54 	.word	0x0002bf54
   2bf04:	0002bf24 	.word	0x0002bf24
   2bf08:	0002bf34 	.word	0x0002bf34
   2bf0c:	0002bf14 	.word	0x0002bf14
   2bf10:	0002bf5c 	.word	0x0002bf5c
   2bf14:	e5951008 	ldr	r1, [r5, #8]
   2bf18:	e0411000 	sub	r1, r1, r0
   2bf1c:	e3510000 	cmp	r1, #0
   2bf20:	da000029 	ble	2bfcc <CScheduler::GetNextTask()+0x130>
   2bf24:	e2833001 	add	r3, r3, #1
   2bf28:	e1520003 	cmp	r2, r3
   2bf2c:	2affffe5 	bcs	2bec8 <CScheduler::GetNextTask()+0x2c>
   2bf30:	ea000023 	b	2bfc4 <CScheduler::GetNextTask()+0x128>
   2bf34:	e5951008 	ldr	r1, [r5, #8]
   2bf38:	e0411000 	sub	r1, r1, r0
   2bf3c:	e3510000 	cmp	r1, #0
   2bf40:	cafffff7 	bgt	2bf24 <CScheduler::GetNextTask()+0x88>
   2bf44:	e3a02001 	mov	r2, #1
   2bf48:	e3a03000 	mov	r3, #0
   2bf4c:	e5c52004 	strb	r2, [r5, #4]
   2bf50:	e5853008 	str	r3, [r5, #8]
   2bf54:	e1a00004 	mov	r0, r4
   2bf58:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bf5c:	e5963060 	ldr	r3, [r6, #96]	; 0x60
   2bf60:	e3530000 	cmp	r3, #0
   2bf64:	0a000004 	beq	2bf7c <CScheduler::GetNextTask()+0xe0>
   2bf68:	e1a00005 	mov	r0, r5
   2bf6c:	e12fff33 	blx	r3
   2bf70:	e5962050 	ldr	r2, [r6, #80]	; 0x50
   2bf74:	e3520000 	cmp	r2, #0
   2bf78:	0a000017 	beq	2bfdc <CScheduler::GetNextTask()+0x140>
   2bf7c:	e2461004 	sub	r1, r6, #4
   2bf80:	e3a03000 	mov	r3, #0
   2bf84:	ea000002 	b	2bf94 <CScheduler::GetNextTask()+0xf8>
   2bf88:	e2833001 	add	r3, r3, #1
   2bf8c:	e1530002 	cmp	r3, r2
   2bf90:	0a000011 	beq	2bfdc <CScheduler::GetNextTask()+0x140>
   2bf94:	e5b1c004 	ldr	ip, [r1, #4]!
   2bf98:	e155000c 	cmp	r5, ip
   2bf9c:	1afffff9 	bne	2bf88 <CScheduler::GetNextTask()+0xec>
   2bfa0:	e2422001 	sub	r2, r2, #1
   2bfa4:	e3a01000 	mov	r1, #0
   2bfa8:	e1520003 	cmp	r2, r3
   2bfac:	e7861103 	str	r1, [r6, r3, lsl #2]
   2bfb0:	05863050 	streq	r3, [r6, #80]	; 0x50
   2bfb4:	e1a00005 	mov	r0, r5
   2bfb8:	e5953000 	ldr	r3, [r5]
   2bfbc:	e5933004 	ldr	r3, [r3, #4]
   2bfc0:	e12fff33 	blx	r3
   2bfc4:	e3a04014 	mov	r4, #20
   2bfc8:	eaffffe1 	b	2bf54 <CScheduler::GetNextTask()+0xb8>
   2bfcc:	e3a03001 	mov	r3, #1
   2bfd0:	e1a00004 	mov	r0, r4
   2bfd4:	e5c53004 	strb	r3, [r5, #4]
   2bfd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bfdc:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bfe0:	e3401004 	movt	r1, #4
   2bfe4:	e30b0708 	movw	r0, #46856	; 0xb708
   2bfe8:	e3400003 	movt	r0, #3
   2bfec:	e3002113 	movw	r2, #275	; 0x113
   2bff0:	eb000232 	bl	2c8c0 <assertion_failed>
   2bff4:	e3011e90 	movw	r1, #7824	; 0x1e90
   2bff8:	e3401004 	movt	r1, #4
   2bffc:	e30b0708 	movw	r0, #46856	; 0xb708
   2c000:	e3400003 	movt	r0, #3
   2c004:	e30021ae 	movw	r2, #430	; 0x1ae
   2c008:	eb00022c 	bl	2c8c0 <assertion_failed>

0002c00c <CScheduler::Yield()>:
   2c00c:	e92d4070 	push	{r4, r5, r6, lr}
   2c010:	e1a04000 	mov	r4, r0
   2c014:	e1a00004 	mov	r0, r4
   2c018:	ebffff9f 	bl	2be9c <CScheduler::GetNextTask()>
   2c01c:	e3500014 	cmp	r0, #20
   2c020:	e5840058 	str	r0, [r4, #88]	; 0x58
   2c024:	1a000008 	bne	2c04c <CScheduler::Yield()+0x40>
   2c028:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2c02c:	e3530000 	cmp	r3, #0
   2c030:	1afffff7 	bne	2c014 <CScheduler::Yield()+0x8>
   2c034:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c038:	e3401004 	movt	r1, #4
   2c03c:	e3010fe4 	movw	r0, #8164	; 0x1fe4
   2c040:	e3400004 	movt	r0, #4
   2c044:	e3a0203b 	mov	r2, #59	; 0x3b
   2c048:	eb00021c 	bl	2c8c0 <assertion_failed>
   2c04c:	e3500013 	cmp	r0, #19
   2c050:	8a000010 	bhi	2c098 <CScheduler::Yield()+0x8c>
   2c054:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   2c058:	e3500000 	cmp	r0, #0
   2c05c:	0a000013 	beq	2c0b0 <CScheduler::Yield()+0xa4>
   2c060:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   2c064:	e1530000 	cmp	r3, r0
   2c068:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c06c:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   2c070:	e283500c 	add	r5, r3, #12
   2c074:	e280600c 	add	r6, r0, #12
   2c078:	e5840054 	str	r0, [r4, #84]	; 0x54
   2c07c:	e3520000 	cmp	r2, #0
   2c080:	0a000000 	beq	2c088 <CScheduler::Yield()+0x7c>
   2c084:	e12fff32 	blx	r2
   2c088:	e1a01006 	mov	r1, r6
   2c08c:	e1a00005 	mov	r0, r5
   2c090:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c094:	ea000146 	b	2c5b4 <TaskSwitch>
   2c098:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c09c:	e3401004 	movt	r1, #4
   2c0a0:	e3010ff4 	movw	r0, #8180	; 0x1ff4
   2c0a4:	e3400004 	movt	r0, #4
   2c0a8:	e3a0203e 	mov	r2, #62	; 0x3e
   2c0ac:	eb000203 	bl	2c8c0 <assertion_failed>
   2c0b0:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c0b4:	e3401004 	movt	r1, #4
   2c0b8:	e302000c 	movw	r0, #8204	; 0x200c
   2c0bc:	e3400004 	movt	r0, #4
   2c0c0:	e3a02040 	mov	r2, #64	; 0x40
   2c0c4:	eb0001fd 	bl	2c8c0 <assertion_failed>

0002c0c8 <CScheduler::usSleep(unsigned int)>:
   2c0c8:	e92d4070 	push	{r4, r5, r6, lr}
   2c0cc:	e2514000 	subs	r4, r1, #0
   2c0d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c0d4:	e1a05000 	mov	r5, r0
   2c0d8:	eb0026ae 	bl	35b98 <CTimer::Get()>
   2c0dc:	eb0023d8 	bl	35044 <CTimer::GetClockTicks()>
   2c0e0:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   2c0e4:	e3530000 	cmp	r3, #0
   2c0e8:	0a000009 	beq	2c114 <CScheduler::usSleep(unsigned int)+0x4c>
   2c0ec:	e5d32004 	ldrb	r2, [r3, #4]
   2c0f0:	e3520001 	cmp	r2, #1
   2c0f4:	1a00000c 	bne	2c12c <CScheduler::usSleep(unsigned int)+0x64>
   2c0f8:	e0841000 	add	r1, r4, r0
   2c0fc:	e3a02004 	mov	r2, #4
   2c100:	e1a00005 	mov	r0, r5
   2c104:	e5831008 	str	r1, [r3, #8]
   2c108:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c10c:	e5c32004 	strb	r2, [r3, #4]
   2c110:	eaffffbd 	b	2c00c <CScheduler::Yield()>
   2c114:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c118:	e3401004 	movt	r1, #4
   2c11c:	e3020018 	movw	r0, #8216	; 0x2018
   2c120:	e3400004 	movt	r0, #4
   2c124:	e3a02072 	mov	r2, #114	; 0x72
   2c128:	eb0001e4 	bl	2c8c0 <assertion_failed>
   2c12c:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c130:	e3401004 	movt	r1, #4
   2c134:	e3020028 	movw	r0, #8232	; 0x2028
   2c138:	e3400004 	movt	r0, #4
   2c13c:	e3a02073 	mov	r2, #115	; 0x73
   2c140:	eb0001de 	bl	2c8c0 <assertion_failed>

0002c144 <CScheduler::BlockTask(CTask**, unsigned int)>:
   2c144:	e92d4070 	push	{r4, r5, r6, lr}
   2c148:	e2515000 	subs	r5, r1, #0
   2c14c:	0a000051 	beq	2c298 <CScheduler::BlockTask(CTask**, unsigned int)+0x154>
   2c150:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   2c154:	e1a06002 	mov	r6, r2
   2c158:	e1a04000 	mov	r4, r0
   2c15c:	e59320f0 	ldr	r2, [r3, #240]	; 0xf0
   2c160:	e3520000 	cmp	r2, #0
   2c164:	1a000051 	bne	2c2b0 <CScheduler::BlockTask(CTask**, unsigned int)+0x16c>
   2c168:	e5d32004 	ldrb	r2, [r3, #4]
   2c16c:	e3520001 	cmp	r2, #1
   2c170:	1a000054 	bne	2c2c8 <CScheduler::BlockTask(CTask**, unsigned int)+0x184>
   2c174:	e5900068 	ldr	r0, [r0, #104]	; 0x68
   2c178:	e3500000 	cmp	r0, #0
   2c17c:	1a00002c 	bne	2c234 <CScheduler::BlockTask(CTask**, unsigned int)+0xf0>
   2c180:	e5952000 	ldr	r2, [r5]
   2c184:	e3560000 	cmp	r6, #0
   2c188:	e58320f0 	str	r2, [r3, #240]	; 0xf0
   2c18c:	e5853000 	str	r3, [r5]
   2c190:	1a00002a 	bne	2c240 <CScheduler::BlockTask(CTask**, unsigned int)+0xfc>
   2c194:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   2c198:	e3a02002 	mov	r2, #2
   2c19c:	e5c32004 	strb	r2, [r3, #4]
   2c1a0:	e5943068 	ldr	r3, [r4, #104]	; 0x68
   2c1a4:	e3530000 	cmp	r3, #0
   2c1a8:	1a00002e 	bne	2c268 <CScheduler::BlockTask(CTask**, unsigned int)+0x124>
   2c1ac:	e1a00004 	mov	r0, r4
   2c1b0:	ebffff95 	bl	2c00c <CScheduler::Yield()>
   2c1b4:	e5940068 	ldr	r0, [r4, #104]	; 0x68
   2c1b8:	e3500000 	cmp	r0, #0
   2c1bc:	1a00002e 	bne	2c27c <CScheduler::BlockTask(CTask**, unsigned int)+0x138>
   2c1c0:	e5952000 	ldr	r2, [r5]
   2c1c4:	e3520000 	cmp	r2, #0
   2c1c8:	0594c054 	ldreq	ip, [r4, #84]	; 0x54
   2c1cc:	058c20f0 	streq	r2, [ip, #240]	; 0xf0
   2c1d0:	0a000013 	beq	2c224 <CScheduler::BlockTask(CTask**, unsigned int)+0xe0>
   2c1d4:	e594c054 	ldr	ip, [r4, #84]	; 0x54
   2c1d8:	e152000c 	cmp	r2, ip
   2c1dc:	059230f0 	ldreq	r3, [r2, #240]	; 0xf0
   2c1e0:	05853000 	streq	r3, [r5]
   2c1e4:	0594c054 	ldreq	ip, [r4, #84]	; 0x54
   2c1e8:	e59230f0 	ldr	r3, [r2, #240]	; 0xf0
   2c1ec:	e3530000 	cmp	r3, #0
   2c1f0:	0a000005 	beq	2c20c <CScheduler::BlockTask(CTask**, unsigned int)+0xc8>
   2c1f4:	e153000c 	cmp	r3, ip
   2c1f8:	0a00001c 	beq	2c270 <CScheduler::BlockTask(CTask**, unsigned int)+0x12c>
   2c1fc:	e1a02003 	mov	r2, r3
   2c200:	e59230f0 	ldr	r3, [r2, #240]	; 0xf0
   2c204:	e3530000 	cmp	r3, #0
   2c208:	1afffff9 	bne	2c1f4 <CScheduler::BlockTask(CTask**, unsigned int)+0xb0>
   2c20c:	e3a03000 	mov	r3, #0
   2c210:	e58c30f0 	str	r3, [ip, #240]	; 0xf0
   2c214:	e1500003 	cmp	r0, r3
   2c218:	0a000001 	beq	2c224 <CScheduler::BlockTask(CTask**, unsigned int)+0xe0>
   2c21c:	eb0030e1 	bl	385a8 <LeaveCritical>
   2c220:	e594c054 	ldr	ip, [r4, #84]	; 0x54
   2c224:	e59c0008 	ldr	r0, [ip, #8]
   2c228:	e16f0f10 	clz	r0, r0
   2c22c:	e1a002a0 	lsr	r0, r0, #5
   2c230:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c234:	eb0030b0 	bl	384fc <EnterCritical>
   2c238:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   2c23c:	eaffffcf 	b	2c180 <CScheduler::BlockTask(CTask**, unsigned int)+0x3c>
   2c240:	eb002654 	bl	35b98 <CTimer::Get()>
   2c244:	eb00237e 	bl	35044 <CTimer::GetClockTicks()>
   2c248:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   2c24c:	e0862000 	add	r2, r6, r0
   2c250:	e3a01003 	mov	r1, #3
   2c254:	e5832008 	str	r2, [r3, #8]
   2c258:	e5c31004 	strb	r1, [r3, #4]
   2c25c:	e5943068 	ldr	r3, [r4, #104]	; 0x68
   2c260:	e3530000 	cmp	r3, #0
   2c264:	0affffd0 	beq	2c1ac <CScheduler::BlockTask(CTask**, unsigned int)+0x68>
   2c268:	eb0030ce 	bl	385a8 <LeaveCritical>
   2c26c:	eaffffce 	b	2c1ac <CScheduler::BlockTask(CTask**, unsigned int)+0x68>
   2c270:	e59c10f0 	ldr	r1, [ip, #240]	; 0xf0
   2c274:	e58210f0 	str	r1, [r2, #240]	; 0xf0
   2c278:	eaffffdf 	b	2c1fc <CScheduler::BlockTask(CTask**, unsigned int)+0xb8>
   2c27c:	eb00309e 	bl	384fc <EnterCritical>
   2c280:	e5952000 	ldr	r2, [r5]
   2c284:	e5940068 	ldr	r0, [r4, #104]	; 0x68
   2c288:	e3520000 	cmp	r2, #0
   2c28c:	1affffd0 	bne	2c1d4 <CScheduler::BlockTask(CTask**, unsigned int)+0x90>
   2c290:	e594c054 	ldr	ip, [r4, #84]	; 0x54
   2c294:	eaffffdc 	b	2c20c <CScheduler::BlockTask(CTask**, unsigned int)+0xc8>
   2c298:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c29c:	e3401004 	movt	r1, #4
   2c2a0:	e3010f74 	movw	r0, #8052	; 0x1f74
   2c2a4:	e3400004 	movt	r0, #4
   2c2a8:	e3a02f46 	mov	r2, #280	; 0x118
   2c2ac:	eb000183 	bl	2c8c0 <assertion_failed>
   2c2b0:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c2b4:	e3401004 	movt	r1, #4
   2c2b8:	e3020054 	movw	r0, #8276	; 0x2054
   2c2bc:	e3400004 	movt	r0, #4
   2c2c0:	e3002119 	movw	r2, #281	; 0x119
   2c2c4:	eb00017d 	bl	2c8c0 <assertion_failed>
   2c2c8:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c2cc:	e3401004 	movt	r1, #4
   2c2d0:	e3020028 	movw	r0, #8232	; 0x2028
   2c2d4:	e3400004 	movt	r0, #4
   2c2d8:	e300211b 	movw	r2, #283	; 0x11b
   2c2dc:	eb000177 	bl	2c8c0 <assertion_failed>

0002c2e0 <CScheduler::Sleep(unsigned int)>:
   2c2e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c2e4:	e3006708 	movw	r6, #1800	; 0x708
   2c2e8:	e1a04001 	mov	r4, r1
   2c2ec:	e1a05000 	mov	r5, r0
   2c2f0:	e1510006 	cmp	r1, r6
   2c2f4:	9a000013 	bls	2c348 <CScheduler::Sleep(unsigned int)+0x68>
   2c2f8:	e3a07cd2 	mov	r7, #53760	; 0xd200
   2c2fc:	e3467b49 	movt	r7, #27465	; 0x6b49
   2c300:	e3a08004 	mov	r8, #4
   2c304:	eb002623 	bl	35b98 <CTimer::Get()>
   2c308:	eb00234d 	bl	35044 <CTimer::GetClockTicks()>
   2c30c:	e5952054 	ldr	r2, [r5, #84]	; 0x54
   2c310:	e3520000 	cmp	r2, #0
   2c314:	0a000011 	beq	2c360 <CScheduler::Sleep(unsigned int)+0x80>
   2c318:	e5d23004 	ldrb	r3, [r2, #4]
   2c31c:	e3530001 	cmp	r3, #1
   2c320:	1a000014 	bne	2c378 <CScheduler::Sleep(unsigned int)+0x98>
   2c324:	e2444c07 	sub	r4, r4, #1792	; 0x700
   2c328:	e0803007 	add	r3, r0, r7
   2c32c:	e2444008 	sub	r4, r4, #8
   2c330:	e1a00005 	mov	r0, r5
   2c334:	e5823008 	str	r3, [r2, #8]
   2c338:	e5c28004 	strb	r8, [r2, #4]
   2c33c:	ebffff32 	bl	2c00c <CScheduler::Yield()>
   2c340:	e1540006 	cmp	r4, r6
   2c344:	8affffee 	bhi	2c304 <CScheduler::Sleep(unsigned int)+0x24>
   2c348:	e3041240 	movw	r1, #16960	; 0x4240
   2c34c:	e340100f 	movt	r1, #15
   2c350:	e1a00005 	mov	r0, r5
   2c354:	e0010491 	mul	r1, r1, r4
   2c358:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2c35c:	eaffff59 	b	2c0c8 <CScheduler::usSleep(unsigned int)>
   2c360:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c364:	e3401004 	movt	r1, #4
   2c368:	e3020018 	movw	r0, #8216	; 0x2018
   2c36c:	e3400004 	movt	r0, #4
   2c370:	e3a02072 	mov	r2, #114	; 0x72
   2c374:	eb000151 	bl	2c8c0 <assertion_failed>
   2c378:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c37c:	e3401004 	movt	r1, #4
   2c380:	e3020028 	movw	r0, #8232	; 0x2028
   2c384:	e3400004 	movt	r0, #4
   2c388:	e3a02073 	mov	r2, #115	; 0x73
   2c38c:	eb00014b 	bl	2c8c0 <assertion_failed>

0002c390 <CScheduler::MsSleep(unsigned int)>:
   2c390:	e3510000 	cmp	r1, #0
   2c394:	012fff1e 	bxeq	lr
   2c398:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   2c39c:	e92d4070 	push	{r4, r5, r6, lr}
   2c3a0:	e0040193 	mul	r4, r3, r1
   2c3a4:	e3540000 	cmp	r4, #0
   2c3a8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c3ac:	e1a05000 	mov	r5, r0
   2c3b0:	eb0025f8 	bl	35b98 <CTimer::Get()>
   2c3b4:	eb002322 	bl	35044 <CTimer::GetClockTicks()>
   2c3b8:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   2c3bc:	e3530000 	cmp	r3, #0
   2c3c0:	0a000009 	beq	2c3ec <CScheduler::MsSleep(unsigned int)+0x5c>
   2c3c4:	e5d32004 	ldrb	r2, [r3, #4]
   2c3c8:	e3520001 	cmp	r2, #1
   2c3cc:	1a00000c 	bne	2c404 <CScheduler::MsSleep(unsigned int)+0x74>
   2c3d0:	e0841000 	add	r1, r4, r0
   2c3d4:	e3a02004 	mov	r2, #4
   2c3d8:	e1a00005 	mov	r0, r5
   2c3dc:	e5831008 	str	r1, [r3, #8]
   2c3e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c3e4:	e5c32004 	strb	r2, [r3, #4]
   2c3e8:	eaffff07 	b	2c00c <CScheduler::Yield()>
   2c3ec:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c3f0:	e3401004 	movt	r1, #4
   2c3f4:	e3020018 	movw	r0, #8216	; 0x2018
   2c3f8:	e3400004 	movt	r0, #4
   2c3fc:	e3a02072 	mov	r2, #114	; 0x72
   2c400:	eb00012e 	bl	2c8c0 <assertion_failed>
   2c404:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c408:	e3401004 	movt	r1, #4
   2c40c:	e3020028 	movw	r0, #8232	; 0x2028
   2c410:	e3400004 	movt	r0, #4
   2c414:	e3a02073 	mov	r2, #115	; 0x73
   2c418:	eb000128 	bl	2c8c0 <assertion_failed>

0002c41c <CScheduler::Get()>:
   2c41c:	e3043f38 	movw	r3, #20280	; 0x4f38
   2c420:	e3403004 	movt	r3, #4
   2c424:	e5930000 	ldr	r0, [r3]
   2c428:	e3500000 	cmp	r0, #0
   2c42c:	112fff1e 	bxne	lr
   2c430:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c434:	e3401004 	movt	r1, #4
   2c438:	e30c0730 	movw	r0, #50992	; 0xc730
   2c43c:	e3400003 	movt	r0, #3
   2c440:	e3a02f6e 	mov	r2, #440	; 0x1b8
   2c444:	e92d4010 	push	{r4, lr}
   2c448:	eb00011c 	bl	2c8c0 <assertion_failed>

0002c44c <CScheduler::ListTasks(CDevice*)>:
   2c44c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c450:	e2515000 	subs	r5, r1, #0
   2c454:	e24dd034 	sub	sp, sp, #52	; 0x34
   2c458:	0a00004e 	beq	2c598 <CScheduler::ListTasks(CDevice*)+0x14c>
   2c45c:	e5953000 	ldr	r3, [r5]
   2c460:	e1a06000 	mov	r6, r0
   2c464:	e3a0201a 	mov	r2, #26
   2c468:	e59f1140 	ldr	r1, [pc, #320]	; 2c5b0 <CScheduler::ListTasks(CDevice*)+0x164>
   2c46c:	e1a00005 	mov	r0, r5
   2c470:	e593300c 	ldr	r3, [r3, #12]
   2c474:	e12fff33 	blx	r3
   2c478:	e5962050 	ldr	r2, [r6, #80]	; 0x50
   2c47c:	e3520000 	cmp	r2, #0
   2c480:	0a000042 	beq	2c590 <CScheduler::ListTasks(CDevice*)+0x144>
   2c484:	e30230a8 	movw	r3, #8360	; 0x20a8
   2c488:	e3403004 	movt	r3, #4
   2c48c:	e2467004 	sub	r7, r6, #4
   2c490:	e58d3014 	str	r3, [sp, #20]
   2c494:	e3a04000 	mov	r4, #0
   2c498:	e3023078 	movw	r3, #8312	; 0x2078
   2c49c:	e3403004 	movt	r3, #4
   2c4a0:	e58d301c 	str	r3, [sp, #28]
   2c4a4:	e30230e8 	movw	r3, #8424	; 0x20e8
   2c4a8:	e3403004 	movt	r3, #4
   2c4ac:	e58d3018 	str	r3, [sp, #24]
   2c4b0:	ea000029 	b	2c55c <CScheduler::ListTasks(CDevice*)+0x110>
   2c4b4:	e28d0020 	add	r0, sp, #32
   2c4b8:	eb001c27 	bl	3355c <CString::CString()>
   2c4bc:	e5961054 	ldr	r1, [r6, #84]	; 0x54
   2c4c0:	e1a0000a 	mov	r0, sl
   2c4c4:	e151000a 	cmp	r1, sl
   2c4c8:	159d3018 	ldrne	r3, [sp, #24]
   2c4cc:	059d801c 	ldreq	r8, [sp, #28]
   2c4d0:	10831109 	addne	r1, r3, r9, lsl #2
   2c4d4:	15918028 	ldrne	r8, [r1, #40]	; 0x28
   2c4d8:	e5da1005 	ldrb	r1, [sl, #5]
   2c4dc:	e3510000 	cmp	r1, #0
   2c4e0:	03a0b020 	moveq	fp, #32
   2c4e4:	13a0b053 	movne	fp, #83	; 0x53
   2c4e8:	e3590003 	cmp	r9, #3
   2c4ec:	13a09020 	movne	r9, #32
   2c4f0:	03a09054 	moveq	r9, #84	; 0x54
   2c4f4:	ebfffd07 	bl	2b918 <CTask::GetName() const>
   2c4f8:	e59d1014 	ldr	r1, [sp, #20]
   2c4fc:	e1a02004 	mov	r2, r4
   2c500:	e88d0900 	stm	sp, {r8, fp}
   2c504:	e1a0300a 	mov	r3, sl
   2c508:	e58d000c 	str	r0, [sp, #12]
   2c50c:	e58d9008 	str	r9, [sp, #8]
   2c510:	e28d0020 	add	r0, sp, #32
   2c514:	eb0021db 	bl	34c88 <CString::Format(char const*, ...)>
   2c518:	e5953000 	ldr	r3, [r5]
   2c51c:	e28d0020 	add	r0, sp, #32
   2c520:	e593b00c 	ldr	fp, [r3, #12]
   2c524:	eb001c44 	bl	3363c <CString::operator char const*() const>
   2c528:	e1a08000 	mov	r8, r0
   2c52c:	e28d0020 	add	r0, sp, #32
   2c530:	eb001c7f 	bl	33734 <CString::GetLength() const>
   2c534:	e1a01008 	mov	r1, r8
   2c538:	e1a02000 	mov	r2, r0
   2c53c:	e1a00005 	mov	r0, r5
   2c540:	e12fff3b 	blx	fp
   2c544:	e28d0020 	add	r0, sp, #32
   2c548:	eb001bd0 	bl	33490 <CString::~CString()>
   2c54c:	e5962050 	ldr	r2, [r6, #80]	; 0x50
   2c550:	e2844001 	add	r4, r4, #1
   2c554:	e1520004 	cmp	r2, r4
   2c558:	9a00000c 	bls	2c590 <CScheduler::ListTasks(CDevice*)+0x144>
   2c55c:	e5b7a004 	ldr	sl, [r7, #4]!
   2c560:	e35a0000 	cmp	sl, #0
   2c564:	0afffff9 	beq	2c550 <CScheduler::ListTasks(CDevice*)+0x104>
   2c568:	e5da2004 	ldrb	r2, [sl, #4]
   2c56c:	e3520005 	cmp	r2, #5
   2c570:	e6ef9072 	uxtb	r9, r2
   2c574:	9affffce 	bls	2c4b4 <CScheduler::ListTasks(CDevice*)+0x68>
   2c578:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c57c:	e3401004 	movt	r1, #4
   2c580:	e302008c 	movw	r0, #8332	; 0x208c
   2c584:	e3400004 	movt	r0, #4
   2c588:	e3a020d4 	mov	r2, #212	; 0xd4
   2c58c:	eb0000cb 	bl	2c8c0 <assertion_failed>
   2c590:	e28dd034 	add	sp, sp, #52	; 0x34
   2c594:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c598:	e3011e90 	movw	r1, #7824	; 0x1e90
   2c59c:	e3401004 	movt	r1, #4
   2c5a0:	e302007c 	movw	r0, #8316	; 0x207c
   2c5a4:	e3400004 	movt	r0, #4
   2c5a8:	e3a020c6 	mov	r2, #198	; 0xc6
   2c5ac:	eb0000c3 	bl	2c8c0 <assertion_failed>
   2c5b0:	000420f0 	.word	0x000420f0

0002c5b4 <TaskSwitch>:
   2c5b4:	eef82a10 	vmrs	r2, fpexc
   2c5b8:	eef13a10 	vmrs	r3, fpscr
   2c5bc:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2c5c0:	ec800b20 	vstmia	r0, {d0-d15}
   2c5c4:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2c5c8:	eee82a10 	vmsr	fpexc, r2
   2c5cc:	eee13a10 	vmsr	fpscr, r3
   2c5d0:	ec910b20 	vldmia	r1, {d0-d15}
   2c5d4:	e12fff1e 	bx	lr

0002c5d8 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   2c5d8:	e3a02000 	mov	r2, #0
   2c5dc:	e5c01000 	strb	r1, [r0]
   2c5e0:	e5802004 	str	r2, [r0, #4]
   2c5e4:	e12fff1e 	bx	lr

0002c5e8 <CSynchronizationEvent::~CSynchronizationEvent()>:
   2c5e8:	e5903004 	ldr	r3, [r0, #4]
   2c5ec:	e3530000 	cmp	r3, #0
   2c5f0:	012fff1e 	bxeq	lr
   2c5f4:	e3021128 	movw	r1, #8488	; 0x2128
   2c5f8:	e3401004 	movt	r1, #4
   2c5fc:	e3020144 	movw	r0, #8516	; 0x2144
   2c600:	e3400004 	movt	r0, #4
   2c604:	e3a02023 	mov	r2, #35	; 0x23
   2c608:	e92d4010 	push	{r4, lr}
   2c60c:	eb0000ab 	bl	2c8c0 <assertion_failed>

0002c610 <CSynchronizationEvent::GetState()>:
   2c610:	e5d00000 	ldrb	r0, [r0]
   2c614:	e12fff1e 	bx	lr

0002c618 <CSynchronizationEvent::Clear()>:
   2c618:	e3a03000 	mov	r3, #0
   2c61c:	e5c03000 	strb	r3, [r0]
   2c620:	e12fff1e 	bx	lr

0002c624 <CSynchronizationEvent::Set()>:
   2c624:	e5d03000 	ldrb	r3, [r0]
   2c628:	e3530000 	cmp	r3, #0
   2c62c:	112fff1e 	bxne	lr
   2c630:	e92d4010 	push	{r4, lr}
   2c634:	e1a04000 	mov	r4, r0
   2c638:	e3a03001 	mov	r3, #1
   2c63c:	e4c43004 	strb	r3, [r4], #4
   2c640:	ebffff75 	bl	2c41c <CScheduler::Get()>
   2c644:	e1a01004 	mov	r1, r4
   2c648:	e8bd4010 	pop	{r4, lr}
   2c64c:	eafffde5 	b	2bde8 <CScheduler::WakeTasks(CTask**)>

0002c650 <CSynchronizationEvent::Pulse()>:
   2c650:	e92d4010 	push	{r4, lr}
   2c654:	e1a04000 	mov	r4, r0
   2c658:	e3a03000 	mov	r3, #0
   2c65c:	e4c43004 	strb	r3, [r4], #4
   2c660:	ebffff6d 	bl	2c41c <CScheduler::Get()>
   2c664:	e1a01004 	mov	r1, r4
   2c668:	e8bd4010 	pop	{r4, lr}
   2c66c:	eafffddd 	b	2bde8 <CScheduler::WakeTasks(CTask**)>

0002c670 <CSynchronizationEvent::Wait()>:
   2c670:	e5d02000 	ldrb	r2, [r0]
   2c674:	e92d4070 	push	{r4, r5, r6, lr}
   2c678:	e21250ff 	ands	r5, r2, #255	; 0xff
   2c67c:	18bd8070 	popne	{r4, r5, r6, pc}
   2c680:	e1a04000 	mov	r4, r0
   2c684:	ebffff64 	bl	2c41c <CScheduler::Get()>
   2c688:	e1a02005 	mov	r2, r5
   2c68c:	e2841004 	add	r1, r4, #4
   2c690:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c694:	eafffeaa 	b	2c144 <CScheduler::BlockTask(CTask**, unsigned int)>

0002c698 <CSynchronizationEvent::WaitWithTimeout(unsigned int)>:
   2c698:	e5d03000 	ldrb	r3, [r0]
   2c69c:	e92d4070 	push	{r4, r5, r6, lr}
   2c6a0:	e1a04001 	mov	r4, r1
   2c6a4:	e3530000 	cmp	r3, #0
   2c6a8:	0a000002 	beq	2c6b8 <CSynchronizationEvent::WaitWithTimeout(unsigned int)+0x20>
   2c6ac:	e16f0f11 	clz	r0, r1
   2c6b0:	e1a002a0 	lsr	r0, r0, #5
   2c6b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c6b8:	e1a05000 	mov	r5, r0
   2c6bc:	ebffff56 	bl	2c41c <CScheduler::Get()>
   2c6c0:	e1a02004 	mov	r2, r4
   2c6c4:	e2851004 	add	r1, r5, #4
   2c6c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c6cc:	eafffe9c 	b	2c144 <CScheduler::BlockTask(CTask**, unsigned int)>

0002c6d0 <CActLED::CActLED(bool)>:
   2c6d0:	e3043f3c 	movw	r3, #20284	; 0x4f3c
   2c6d4:	e3403004 	movt	r3, #4
   2c6d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c6dc:	e3a02000 	mov	r2, #0
   2c6e0:	e1a06001 	mov	r6, r1
   2c6e4:	e5802000 	str	r2, [r0]
   2c6e8:	e1a05000 	mov	r5, r0
   2c6ec:	e5802004 	str	r2, [r0, #4]
   2c6f0:	e5830000 	str	r0, [r3]
   2c6f4:	eb000efc 	bl	302ec <CMachineInfo::Get()>
   2c6f8:	eb000e0d 	bl	2ff34 <CMachineInfo::GetActLEDInfo() const>
   2c6fc:	e1a04000 	mov	r4, r0
   2c700:	e2107080 	ands	r7, r0, #128	; 0x80
   2c704:	0a000013 	beq	2c758 <CActLED::CActLED(bool)+0x88>
   2c708:	e3a00014 	mov	r0, #20
   2c70c:	eb002962 	bl	36c9c <operator new(unsigned int)>
   2c710:	e1a02006 	mov	r2, r6
   2c714:	e204103f 	and	r1, r4, #63	; 0x3f
   2c718:	e1a07000 	mov	r7, r0
   2c71c:	eb0027bd 	bl	36618 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   2c720:	e5956000 	ldr	r6, [r5]
   2c724:	e2141040 	ands	r1, r4, #64	; 0x40
   2c728:	e5857004 	str	r7, [r5, #4]
   2c72c:	03a03001 	moveq	r3, #1
   2c730:	13a03000 	movne	r3, #0
   2c734:	e3560000 	cmp	r6, #0
   2c738:	e5c53008 	strb	r3, [r5, #8]
   2c73c:	1a000011 	bne	2c788 <CActLED::CActLED(bool)+0xb8>
   2c740:	e2511000 	subs	r1, r1, #0
   2c744:	e1a00007 	mov	r0, r7
   2c748:	13a01001 	movne	r1, #1
   2c74c:	eb002767 	bl	364f0 <CVirtualGPIOPin::Write(unsigned int)>
   2c750:	e1a00005 	mov	r0, r5
   2c754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c758:	e3a00028 	mov	r0, #40	; 0x28
   2c75c:	eb00294e 	bl	36c9c <operator new(unsigned int)>
   2c760:	e1a03007 	mov	r3, r7
   2c764:	e204103f 	and	r1, r4, #63	; 0x3f
   2c768:	e3a02001 	mov	r2, #1
   2c76c:	e1a06000 	mov	r6, r0
   2c770:	eb0007fb 	bl	2e764 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   2c774:	e2141040 	ands	r1, r4, #64	; 0x40
   2c778:	e5856000 	str	r6, [r5]
   2c77c:	03a03001 	moveq	r3, #1
   2c780:	13a03000 	movne	r3, #0
   2c784:	e5c53008 	strb	r3, [r5, #8]
   2c788:	e2511000 	subs	r1, r1, #0
   2c78c:	e1a00006 	mov	r0, r6
   2c790:	13a01001 	movne	r1, #1
   2c794:	eb000581 	bl	2dda0 <CGPIOPin::Write(unsigned int)>
   2c798:	e1a00005 	mov	r0, r5
   2c79c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002c7a0 <CActLED::~CActLED()>:
   2c7a0:	e3043f3c 	movw	r3, #20284	; 0x4f3c
   2c7a4:	e3403004 	movt	r3, #4
   2c7a8:	e3a02000 	mov	r2, #0
   2c7ac:	e5832000 	str	r2, [r3]
   2c7b0:	e12fff1e 	bx	lr

0002c7b4 <CActLED::On()>:
   2c7b4:	e1a03000 	mov	r3, r0
   2c7b8:	e5900000 	ldr	r0, [r0]
   2c7bc:	e3500000 	cmp	r0, #0
   2c7c0:	0a000001 	beq	2c7cc <CActLED::On()+0x18>
   2c7c4:	e5d31008 	ldrb	r1, [r3, #8]
   2c7c8:	ea000574 	b	2dda0 <CGPIOPin::Write(unsigned int)>
   2c7cc:	e5930004 	ldr	r0, [r3, #4]
   2c7d0:	e3500000 	cmp	r0, #0
   2c7d4:	012fff1e 	bxeq	lr
   2c7d8:	e5d31008 	ldrb	r1, [r3, #8]
   2c7dc:	ea002743 	b	364f0 <CVirtualGPIOPin::Write(unsigned int)>

0002c7e0 <CActLED::Off()>:
   2c7e0:	e1a03000 	mov	r3, r0
   2c7e4:	e5900000 	ldr	r0, [r0]
   2c7e8:	e3500000 	cmp	r0, #0
   2c7ec:	0a000002 	beq	2c7fc <CActLED::Off()+0x1c>
   2c7f0:	e5d31008 	ldrb	r1, [r3, #8]
   2c7f4:	e2211001 	eor	r1, r1, #1
   2c7f8:	ea000568 	b	2dda0 <CGPIOPin::Write(unsigned int)>
   2c7fc:	e5930004 	ldr	r0, [r3, #4]
   2c800:	e3500000 	cmp	r0, #0
   2c804:	012fff1e 	bxeq	lr
   2c808:	e5d31008 	ldrb	r1, [r3, #8]
   2c80c:	e2211001 	eor	r1, r1, #1
   2c810:	ea002736 	b	364f0 <CVirtualGPIOPin::Write(unsigned int)>

0002c814 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   2c814:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c818:	e2516000 	subs	r6, r1, #0
   2c81c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2c820:	e1a04000 	mov	r4, r0
   2c824:	e1a07002 	mov	r7, r2
   2c828:	e1a08003 	mov	r8, r3
   2c82c:	e3a05001 	mov	r5, #1
   2c830:	ea00000e 	b	2c870 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x5c>
   2c834:	e5d41008 	ldrb	r1, [r4, #8]
   2c838:	eb000558 	bl	2dda0 <CGPIOPin::Write(unsigned int)>
   2c83c:	e1a00007 	mov	r0, r7
   2c840:	eb002493 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   2c844:	e5940000 	ldr	r0, [r4]
   2c848:	e3500000 	cmp	r0, #0
   2c84c:	0a000010 	beq	2c894 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x80>
   2c850:	e5d41008 	ldrb	r1, [r4, #8]
   2c854:	e2211001 	eor	r1, r1, #1
   2c858:	eb000550 	bl	2dda0 <CGPIOPin::Write(unsigned int)>
   2c85c:	e1a00008 	mov	r0, r8
   2c860:	e2855001 	add	r5, r5, #1
   2c864:	eb00248a 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   2c868:	e1560005 	cmp	r6, r5
   2c86c:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   2c870:	e5940000 	ldr	r0, [r4]
   2c874:	e3500000 	cmp	r0, #0
   2c878:	1affffed 	bne	2c834 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
   2c87c:	e5940004 	ldr	r0, [r4, #4]
   2c880:	e3500000 	cmp	r0, #0
   2c884:	0affffec 	beq	2c83c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
   2c888:	e5d41008 	ldrb	r1, [r4, #8]
   2c88c:	eb002717 	bl	364f0 <CVirtualGPIOPin::Write(unsigned int)>
   2c890:	eaffffe9 	b	2c83c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
   2c894:	e5940004 	ldr	r0, [r4, #4]
   2c898:	e3500000 	cmp	r0, #0
   2c89c:	0affffee 	beq	2c85c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>
   2c8a0:	e5d41008 	ldrb	r1, [r4, #8]
   2c8a4:	e2211001 	eor	r1, r1, #1
   2c8a8:	eb002710 	bl	364f0 <CVirtualGPIOPin::Write(unsigned int)>
   2c8ac:	eaffffea 	b	2c85c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>

0002c8b0 <CActLED::Get()>:
   2c8b0:	e3043f3c 	movw	r3, #20284	; 0x4f3c
   2c8b4:	e3403004 	movt	r3, #4
   2c8b8:	e5930000 	ldr	r0, [r3]
   2c8bc:	e12fff1e 	bx	lr

0002c8c0 <assertion_failed>:
   2c8c0:	e92d4080 	push	{r7, lr}
   2c8c4:	e1a04000 	mov	r4, r0
   2c8c8:	e1a05001 	mov	r5, r1
   2c8cc:	e24dd018 	sub	sp, sp, #24
   2c8d0:	e1a06002 	mov	r6, r2
   2c8d4:	e1a0700d 	mov	r7, sp
   2c8d8:	eb0030a6 	bl	38b78 <CInterruptSystem::DisableFIQ()>
   2c8dc:	f1080040 	cpsie	f
   2c8e0:	e28d0008 	add	r0, sp, #8
   2c8e4:	eb001b1c 	bl	3355c <CString::CString()>
   2c8e8:	e1a02005 	mov	r2, r5
   2c8ec:	e1a03006 	mov	r3, r6
   2c8f0:	e28d0008 	add	r0, sp, #8
   2c8f4:	e302115c 	movw	r1, #8540	; 0x215c
   2c8f8:	e3401004 	movt	r1, #4
   2c8fc:	eb0020e1 	bl	34c88 <CString::Format(char const*, ...)>
   2c900:	e28d0008 	add	r0, sp, #8
   2c904:	eb001b4c 	bl	3363c <CString::operator char const*() const>
   2c908:	e1a01000 	mov	r1, r0
   2c90c:	e1a00007 	mov	r0, r7
   2c910:	eb0001e8 	bl	2d0b8 <debug_stacktrace(unsigned int const*, char const*)>
   2c914:	eb000a66 	bl	2f2b4 <CLogger::Get()>
   2c918:	e1a05000 	mov	r5, r0
   2c91c:	e28d0008 	add	r0, sp, #8
   2c920:	eb001b45 	bl	3363c <CString::operator char const*() const>
   2c924:	e3023164 	movw	r3, #8548	; 0x2164
   2c928:	e3403004 	movt	r3, #4
   2c92c:	e1a01000 	mov	r1, r0
   2c930:	e3a02000 	mov	r2, #0
   2c934:	e1a00005 	mov	r0, r5
   2c938:	e58d4000 	str	r4, [sp]
   2c93c:	eb000c2a 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c940:	eafffffe 	b	2c940 <assertion_failed+0x80>

0002c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   2c944:	e1a02001 	mov	r2, r1
   2c948:	e92d4010 	push	{r4, lr}
   2c94c:	e3a01008 	mov	r1, #8
   2c950:	e1a04000 	mov	r4, r0
   2c954:	eb003285 	bl	39370 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   2c958:	e1a00004 	mov	r0, r4
   2c95c:	e8bd8010 	pop	{r4, pc}

0002c960 <CBcmPropertyTags::~CBcmPropertyTags()>:
   2c960:	e92d4010 	push	{r4, lr}
   2c964:	e1a04000 	mov	r4, r0
   2c968:	eb003283 	bl	3937c <CBcmMailBox::~CBcmMailBox()>
   2c96c:	e1a00004 	mov	r0, r4
   2c970:	e8bd8010 	pop	{r4, pc}

0002c974 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   2c974:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c978:	e2519000 	subs	r9, r1, #0
   2c97c:	0a000033 	beq	2ca50 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
   2c980:	e1a05002 	mov	r5, r2
   2c984:	e352000f 	cmp	r2, #15
   2c988:	9a000035 	bls	2ca64 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   2c98c:	e282700c 	add	r7, r2, #12
   2c990:	e2126003 	ands	r6, r2, #3
   2c994:	1a000037 	bne	2ca78 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x104>
   2c998:	e1a08000 	mov	r8, r0
   2c99c:	e1a00006 	mov	r0, r6
   2c9a0:	eb002ea6 	bl	38440 <CMemorySystem::GetCoherentPage(unsigned int)>
   2c9a4:	e280a008 	add	sl, r0, #8
   2c9a8:	e7e73457 	ubfx	r3, r7, #8, #8
   2c9ac:	e5c07000 	strb	r7, [r0]
   2c9b0:	e5c06004 	strb	r6, [r0, #4]
   2c9b4:	e1a04000 	mov	r4, r0
   2c9b8:	e5c06005 	strb	r6, [r0, #5]
   2c9bc:	e1a02005 	mov	r2, r5
   2c9c0:	e5c06006 	strb	r6, [r0, #6]
   2c9c4:	e1a01009 	mov	r1, r9
   2c9c8:	e5c06007 	strb	r6, [r0, #7]
   2c9cc:	e5c03001 	strb	r3, [r0, #1]
   2c9d0:	e7e73857 	ubfx	r3, r7, #16, #8
   2c9d4:	e1a07c27 	lsr	r7, r7, #24
   2c9d8:	e5c03002 	strb	r3, [r0, #2]
   2c9dc:	e5c07003 	strb	r7, [r0, #3]
   2c9e0:	e1a0000a 	mov	r0, sl
   2c9e4:	eb0026a3 	bl	36478 <memcpy>
   2c9e8:	e78a6005 	str	r6, [sl, r5]
   2c9ec:	f57ff04f 	dsb	sy
   2c9f0:	e3846103 	orr	r6, r4, #-1073741824	; 0xc0000000
   2c9f4:	e1a00008 	mov	r0, r8
   2c9f8:	e1a01006 	mov	r1, r6
   2c9fc:	eb00325f 	bl	39380 <CBcmMailBox::WriteRead(unsigned int)>
   2ca00:	e1500006 	cmp	r0, r6
   2ca04:	0a000001 	beq	2ca10 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   2ca08:	e3a00000 	mov	r0, #0
   2ca0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ca10:	f57ff05f 	dmb	sy
   2ca14:	e5d42005 	ldrb	r2, [r4, #5]
   2ca18:	e5d43004 	ldrb	r3, [r4, #4]
   2ca1c:	e1833402 	orr	r3, r3, r2, lsl #8
   2ca20:	e5d42006 	ldrb	r2, [r4, #6]
   2ca24:	e1833802 	orr	r3, r3, r2, lsl #16
   2ca28:	e5d42007 	ldrb	r2, [r4, #7]
   2ca2c:	e1833c02 	orr	r3, r3, r2, lsl #24
   2ca30:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   2ca34:	1afffff3 	bne	2ca08 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x94>
   2ca38:	e1a02005 	mov	r2, r5
   2ca3c:	e1a0100a 	mov	r1, sl
   2ca40:	e1a00009 	mov	r0, r9
   2ca44:	eb00268b 	bl	36478 <memcpy>
   2ca48:	e3a00001 	mov	r0, #1
   2ca4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ca50:	e302117c 	movw	r1, #8572	; 0x217c
   2ca54:	e3401004 	movt	r1, #4
   2ca58:	e3a0204b 	mov	r2, #75	; 0x4b
   2ca5c:	e2810014 	add	r0, r1, #20
   2ca60:	ebffff96 	bl	2c8c0 <assertion_failed>
   2ca64:	e302117c 	movw	r1, #8572	; 0x217c
   2ca68:	e3401004 	movt	r1, #4
   2ca6c:	e3a0204c 	mov	r2, #76	; 0x4c
   2ca70:	e2810020 	add	r0, r1, #32
   2ca74:	ebffff91 	bl	2c8c0 <assertion_failed>
   2ca78:	e302117c 	movw	r1, #8572	; 0x217c
   2ca7c:	e3401004 	movt	r1, #4
   2ca80:	e3a0204e 	mov	r2, #78	; 0x4e
   2ca84:	e281004c 	add	r0, r1, #76	; 0x4c
   2ca88:	ebffff8c 	bl	2c8c0 <assertion_failed>

0002ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   2ca8c:	e92d4010 	push	{r4, lr}
   2ca90:	e2524000 	subs	r4, r2, #0
   2ca94:	e59dc008 	ldr	ip, [sp, #8]
   2ca98:	0a00002e 	beq	2cb58 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xcc>
   2ca9c:	e353000f 	cmp	r3, #15
   2caa0:	9a000031 	bls	2cb6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   2caa4:	e243e00c 	sub	lr, r3, #12
   2caa8:	e1a02003 	mov	r2, r3
   2caac:	e5c41000 	strb	r1, [r4]
   2cab0:	e7e73451 	ubfx	r3, r1, #8, #8
   2cab4:	e5c4c008 	strb	ip, [r4, #8]
   2cab8:	e5c4e004 	strb	lr, [r4, #4]
   2cabc:	e5c43001 	strb	r3, [r4, #1]
   2cac0:	e7e73851 	ubfx	r3, r1, #16, #8
   2cac4:	e1a01c21 	lsr	r1, r1, #24
   2cac8:	e5c43002 	strb	r3, [r4, #2]
   2cacc:	e5c41003 	strb	r1, [r4, #3]
   2cad0:	e7e7345e 	ubfx	r3, lr, #8, #8
   2cad4:	e1a01004 	mov	r1, r4
   2cad8:	e5c43005 	strb	r3, [r4, #5]
   2cadc:	e7e7385e 	ubfx	r3, lr, #16, #8
   2cae0:	e1a0ec2e 	lsr	lr, lr, #24
   2cae4:	e5c43006 	strb	r3, [r4, #6]
   2cae8:	e7e7345c 	ubfx	r3, ip, #8, #8
   2caec:	e5c4e007 	strb	lr, [r4, #7]
   2caf0:	e5c43009 	strb	r3, [r4, #9]
   2caf4:	e7e7385c 	ubfx	r3, ip, #16, #8
   2caf8:	e7e6cc5c 	ubfx	ip, ip, #24, #7
   2cafc:	e5c4300a 	strb	r3, [r4, #10]
   2cb00:	e5c4c00b 	strb	ip, [r4, #11]
   2cb04:	ebffff9a 	bl	2c974 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   2cb08:	e3500000 	cmp	r0, #0
   2cb0c:	08bd8010 	popeq	{r4, pc}
   2cb10:	e5d40009 	ldrb	r0, [r4, #9]
   2cb14:	e5d43008 	ldrb	r3, [r4, #8]
   2cb18:	e5d4100a 	ldrb	r1, [r4, #10]
   2cb1c:	e5d4200b 	ldrb	r2, [r4, #11]
   2cb20:	e1833400 	orr	r3, r3, r0, lsl #8
   2cb24:	e1833801 	orr	r3, r3, r1, lsl #16
   2cb28:	e1833c02 	orr	r3, r3, r2, lsl #24
   2cb2c:	e5c43008 	strb	r3, [r4, #8]
   2cb30:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
   2cb34:	e2520000 	subs	r0, r2, #0
   2cb38:	e7e71453 	ubfx	r1, r3, #8, #8
   2cb3c:	e1a02c22 	lsr	r2, r2, #24
   2cb40:	e7e73853 	ubfx	r3, r3, #16, #8
   2cb44:	13a00001 	movne	r0, #1
   2cb48:	e5c41009 	strb	r1, [r4, #9]
   2cb4c:	e5c4300a 	strb	r3, [r4, #10]
   2cb50:	e5c4200b 	strb	r2, [r4, #11]
   2cb54:	e8bd8010 	pop	{r4, pc}
   2cb58:	e302117c 	movw	r1, #8572	; 0x217c
   2cb5c:	e3401004 	movt	r1, #4
   2cb60:	e3a02033 	mov	r2, #51	; 0x33
   2cb64:	e2810064 	add	r0, r1, #100	; 0x64
   2cb68:	ebffff54 	bl	2c8c0 <assertion_failed>
   2cb6c:	e302117c 	movw	r1, #8572	; 0x217c
   2cb70:	e3401004 	movt	r1, #4
   2cb74:	e3a02034 	mov	r2, #52	; 0x34
   2cb78:	e2810070 	add	r0, r1, #112	; 0x70
   2cb7c:	ebffff4f 	bl	2c8c0 <assertion_failed>

0002cb80 <CClassAllocator::~CClassAllocator()>:
   2cb80:	e92d4010 	push	{r4, lr}
   2cb84:	e1a04000 	mov	r4, r0
   2cb88:	e590000c 	ldr	r0, [r0, #12]
   2cb8c:	e3a03000 	mov	r3, #0
   2cb90:	e1500003 	cmp	r0, r3
   2cb94:	e5843010 	str	r3, [r4, #16]
   2cb98:	0a000000 	beq	2cba0 <CClassAllocator::~CClassAllocator()+0x20>
   2cb9c:	eb003081 	bl	38da8 <free>
   2cba0:	e1a00004 	mov	r0, r4
   2cba4:	e8bd8010 	pop	{r4, pc}

0002cba8 <CClassAllocator::Init(unsigned int, unsigned int)>:
   2cba8:	e3510001 	cmp	r1, #1
   2cbac:	e92d4010 	push	{r4, lr}
   2cbb0:	33a01001 	movcc	r1, #1
   2cbb4:	e281101f 	add	r1, r1, #31
   2cbb8:	e3520000 	cmp	r2, #0
   2cbbc:	e3c1100f 	bic	r1, r1, #15
   2cbc0:	e5801000 	str	r1, [r0]
   2cbc4:	0a00001c 	beq	2cc3c <CClassAllocator::Init(unsigned int, unsigned int)+0x94>
   2cbc8:	e1a04000 	mov	r4, r0
   2cbcc:	e0000192 	mul	r0, r2, r1
   2cbd0:	e5842004 	str	r2, [r4, #4]
   2cbd4:	eb003060 	bl	38d5c <malloc>
   2cbd8:	e3500000 	cmp	r0, #0
   2cbdc:	e584000c 	str	r0, [r4, #12]
   2cbe0:	0a000013 	beq	2cc34 <CClassAllocator::Init(unsigned int, unsigned int)+0x8c>
   2cbe4:	e210200f 	ands	r2, r0, #15
   2cbe8:	1a000019 	bne	2cc54 <CClassAllocator::Init(unsigned int, unsigned int)+0xac>
   2cbec:	e5943004 	ldr	r3, [r4, #4]
   2cbf0:	e3530000 	cmp	r3, #0
   2cbf4:	08bd8010 	popeq	{r4, pc}
   2cbf8:	e5941010 	ldr	r1, [r4, #16]
   2cbfc:	e305e350 	movw	lr, #21328	; 0x5350
   2cc00:	e344ef42 	movt	lr, #20290	; 0x4f42
   2cc04:	e5943000 	ldr	r3, [r4]
   2cc08:	e1a0c001 	mov	ip, r1
   2cc0c:	e0030293 	mul	r3, r3, r2
   2cc10:	e2822001 	add	r2, r2, #1
   2cc14:	e0801003 	add	r1, r0, r3
   2cc18:	e780e003 	str	lr, [r0, r3]
   2cc1c:	e581c00c 	str	ip, [r1, #12]
   2cc20:	e5943004 	ldr	r3, [r4, #4]
   2cc24:	e1530002 	cmp	r3, r2
   2cc28:	8afffff5 	bhi	2cc04 <CClassAllocator::Init(unsigned int, unsigned int)+0x5c>
   2cc2c:	e5841010 	str	r1, [r4, #16]
   2cc30:	e8bd8010 	pop	{r4, pc}
   2cc34:	e5840004 	str	r0, [r4, #4]
   2cc38:	e8bd8010 	pop	{r4, pc}
   2cc3c:	e3021214 	movw	r1, #8724	; 0x2214
   2cc40:	e3401004 	movt	r1, #4
   2cc44:	e3020228 	movw	r0, #8744	; 0x2228
   2cc48:	e3400004 	movt	r0, #4
   2cc4c:	e3a02057 	mov	r2, #87	; 0x57
   2cc50:	ebffff1a 	bl	2c8c0 <assertion_failed>
   2cc54:	e3021214 	movw	r1, #8724	; 0x2214
   2cc58:	e3401004 	movt	r1, #4
   2cc5c:	e3020240 	movw	r0, #8768	; 0x2240
   2cc60:	e3400004 	movt	r0, #4
   2cc64:	e3a02061 	mov	r2, #97	; 0x61
   2cc68:	ebffff14 	bl	2c8c0 <assertion_failed>

0002cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   2cc6c:	e92d4010 	push	{r4, lr}
   2cc70:	e1a04000 	mov	r4, r0
   2cc74:	e5803008 	str	r3, [r0, #8]
   2cc78:	e3a03000 	mov	r3, #0
   2cc7c:	e580300c 	str	r3, [r0, #12]
   2cc80:	e5803010 	str	r3, [r0, #16]
   2cc84:	e5c03014 	strb	r3, [r0, #20]
   2cc88:	e3a03001 	mov	r3, #1
   2cc8c:	e580301c 	str	r3, [r0, #28]
   2cc90:	ebffffc4 	bl	2cba8 <CClassAllocator::Init(unsigned int, unsigned int)>
   2cc94:	e1a00004 	mov	r0, r4
   2cc98:	e8bd8010 	pop	{r4, pc}

0002cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   2cc9c:	e92d4010 	push	{r4, lr}
   2cca0:	e1a04000 	mov	r4, r0
   2cca4:	e5803018 	str	r3, [r0, #24]
   2cca8:	e580301c 	str	r3, [r0, #28]
   2ccac:	e59d3008 	ldr	r3, [sp, #8]
   2ccb0:	e5803008 	str	r3, [r0, #8]
   2ccb4:	e3a03000 	mov	r3, #0
   2ccb8:	e580300c 	str	r3, [r0, #12]
   2ccbc:	e5803010 	str	r3, [r0, #16]
   2ccc0:	e3a03001 	mov	r3, #1
   2ccc4:	e5c03014 	strb	r3, [r0, #20]
   2ccc8:	ebffffb6 	bl	2cba8 <CClassAllocator::Init(unsigned int, unsigned int)>
   2cccc:	e1a00004 	mov	r0, r4
   2ccd0:	e8bd8010 	pop	{r4, pc}

0002ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>:
   2ccd4:	e5d03014 	ldrb	r3, [r0, #20]
   2ccd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ccdc:	e3530000 	cmp	r3, #0
   2cce0:	0a000027 	beq	2cd84 <CClassAllocator::Extend(unsigned int, unsigned int)+0xb0>
   2cce4:	e5903018 	ldr	r3, [r0, #24]
   2cce8:	e1a05000 	mov	r5, r0
   2ccec:	e1530002 	cmp	r3, r2
   2ccf0:	1a000029 	bne	2cd9c <CClassAllocator::Extend(unsigned int, unsigned int)+0xc8>
   2ccf4:	e1a07001 	mov	r7, r1
   2ccf8:	e3510000 	cmp	r1, #0
   2ccfc:	0a00002c 	beq	2cdb4 <CClassAllocator::Extend(unsigned int, unsigned int)+0xe0>
   2cd00:	e5900000 	ldr	r0, [r0]
   2cd04:	e0000190 	mul	r0, r0, r1
   2cd08:	eb003013 	bl	38d5c <malloc>
   2cd0c:	e2506000 	subs	r6, r0, #0
   2cd10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2cd14:	e216400f 	ands	r4, r6, #15
   2cd18:	1a00002b 	bne	2cdcc <CClassAllocator::Extend(unsigned int, unsigned int)+0xf8>
   2cd1c:	e595001c 	ldr	r0, [r5, #28]
   2cd20:	e3500000 	cmp	r0, #0
   2cd24:	1a000014 	bne	2cd7c <CClassAllocator::Extend(unsigned int, unsigned int)+0xa8>
   2cd28:	e5952010 	ldr	r2, [r5, #16]
   2cd2c:	e3050350 	movw	r0, #21328	; 0x5350
   2cd30:	e3440f42 	movt	r0, #20290	; 0x4f42
   2cd34:	e5953000 	ldr	r3, [r5]
   2cd38:	e1a01002 	mov	r1, r2
   2cd3c:	e0030493 	mul	r3, r3, r4
   2cd40:	e2844001 	add	r4, r4, #1
   2cd44:	e1570004 	cmp	r7, r4
   2cd48:	e0862003 	add	r2, r6, r3
   2cd4c:	e7860003 	str	r0, [r6, r3]
   2cd50:	e582100c 	str	r1, [r2, #12]
   2cd54:	1afffff6 	bne	2cd34 <CClassAllocator::Extend(unsigned int, unsigned int)+0x60>
   2cd58:	e595101c 	ldr	r1, [r5, #28]
   2cd5c:	e5953004 	ldr	r3, [r5, #4]
   2cd60:	e3510000 	cmp	r1, #0
   2cd64:	e5852010 	str	r2, [r5, #16]
   2cd68:	e0833007 	add	r3, r3, r7
   2cd6c:	e5853004 	str	r3, [r5, #4]
   2cd70:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2cd74:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2cd78:	ea002e0a 	b	385a8 <LeaveCritical>
   2cd7c:	eb002dde 	bl	384fc <EnterCritical>
   2cd80:	eaffffe8 	b	2cd28 <CClassAllocator::Extend(unsigned int, unsigned int)+0x54>
   2cd84:	e3021214 	movw	r1, #8724	; 0x2214
   2cd88:	e3401004 	movt	r1, #4
   2cd8c:	e302027c 	movw	r0, #8828	; 0x227c
   2cd90:	e3400004 	movt	r0, #4
   2cd94:	e3a02070 	mov	r2, #112	; 0x70
   2cd98:	ebfffec8 	bl	2c8c0 <assertion_failed>
   2cd9c:	e3021214 	movw	r1, #8724	; 0x2214
   2cda0:	e3401004 	movt	r1, #4
   2cda4:	e302028c 	movw	r0, #8844	; 0x228c
   2cda8:	e3400004 	movt	r0, #4
   2cdac:	e3a02071 	mov	r2, #113	; 0x71
   2cdb0:	ebfffec2 	bl	2c8c0 <assertion_failed>
   2cdb4:	e3021214 	movw	r1, #8724	; 0x2214
   2cdb8:	e3401004 	movt	r1, #4
   2cdbc:	e3020228 	movw	r0, #8744	; 0x2228
   2cdc0:	e3400004 	movt	r0, #4
   2cdc4:	e3a02072 	mov	r2, #114	; 0x72
   2cdc8:	ebfffebc 	bl	2c8c0 <assertion_failed>
   2cdcc:	e3021214 	movw	r1, #8724	; 0x2214
   2cdd0:	e3401004 	movt	r1, #4
   2cdd4:	e30202ac 	movw	r0, #8876	; 0x22ac
   2cdd8:	e3400004 	movt	r0, #4
   2cddc:	e3a0207a 	mov	r2, #122	; 0x7a
   2cde0:	ebfffeb6 	bl	2c8c0 <assertion_failed>

0002cde4 <CClassAllocator::Allocate()>:
   2cde4:	e92d4030 	push	{r4, r5, lr}
   2cde8:	e1a04000 	mov	r4, r0
   2cdec:	e5d03014 	ldrb	r3, [r0, #20]
   2cdf0:	e24dd00c 	sub	sp, sp, #12
   2cdf4:	e3530000 	cmp	r3, #0
   2cdf8:	0a000002 	beq	2ce08 <CClassAllocator::Allocate()+0x24>
   2cdfc:	e590001c 	ldr	r0, [r0, #28]
   2ce00:	e3500000 	cmp	r0, #0
   2ce04:	1a000016 	bne	2ce64 <CClassAllocator::Allocate()+0x80>
   2ce08:	e5945010 	ldr	r5, [r4, #16]
   2ce0c:	e3550000 	cmp	r5, #0
   2ce10:	0a00001e 	beq	2ce90 <CClassAllocator::Allocate()+0xac>
   2ce14:	e5952000 	ldr	r2, [r5]
   2ce18:	e3053350 	movw	r3, #21328	; 0x5350
   2ce1c:	e3443f42 	movt	r3, #20290	; 0x4f42
   2ce20:	e1520003 	cmp	r2, r3
   2ce24:	1a000023 	bne	2ceb8 <CClassAllocator::Allocate()+0xd4>
   2ce28:	e5d42014 	ldrb	r2, [r4, #20]
   2ce2c:	e3a03000 	mov	r3, #0
   2ce30:	e595100c 	ldr	r1, [r5, #12]
   2ce34:	e5841010 	str	r1, [r4, #16]
   2ce38:	e1520003 	cmp	r2, r3
   2ce3c:	e585300c 	str	r3, [r5, #12]
   2ce40:	1a000002 	bne	2ce50 <CClassAllocator::Allocate()+0x6c>
   2ce44:	e2850010 	add	r0, r5, #16
   2ce48:	e28dd00c 	add	sp, sp, #12
   2ce4c:	e8bd8030 	pop	{r4, r5, pc}
   2ce50:	e594301c 	ldr	r3, [r4, #28]
   2ce54:	e3530000 	cmp	r3, #0
   2ce58:	0afffff9 	beq	2ce44 <CClassAllocator::Allocate()+0x60>
   2ce5c:	eb002dd1 	bl	385a8 <LeaveCritical>
   2ce60:	eafffff7 	b	2ce44 <CClassAllocator::Allocate()+0x60>
   2ce64:	eb002da4 	bl	384fc <EnterCritical>
   2ce68:	e5945010 	ldr	r5, [r4, #16]
   2ce6c:	e3550000 	cmp	r5, #0
   2ce70:	1affffe7 	bne	2ce14 <CClassAllocator::Allocate()+0x30>
   2ce74:	e5d43014 	ldrb	r3, [r4, #20]
   2ce78:	e3530000 	cmp	r3, #0
   2ce7c:	0a000003 	beq	2ce90 <CClassAllocator::Allocate()+0xac>
   2ce80:	e594301c 	ldr	r3, [r4, #28]
   2ce84:	e3530000 	cmp	r3, #0
   2ce88:	0a000000 	beq	2ce90 <CClassAllocator::Allocate()+0xac>
   2ce8c:	eb002dc5 	bl	385a8 <LeaveCritical>
   2ce90:	eb000907 	bl	2f2b4 <CLogger::Get()>
   2ce94:	e5943004 	ldr	r3, [r4, #4]
   2ce98:	e5941008 	ldr	r1, [r4, #8]
   2ce9c:	e3a02000 	mov	r2, #0
   2cea0:	e58d3000 	str	r3, [sp]
   2cea4:	e30232e8 	movw	r3, #8936	; 0x22e8
   2cea8:	e3403004 	movt	r3, #4
   2ceac:	eb000ace 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ceb0:	e3a00000 	mov	r0, #0
   2ceb4:	eaffffe3 	b	2ce48 <CClassAllocator::Allocate()+0x64>
   2ceb8:	e3021214 	movw	r1, #8724	; 0x2214
   2cebc:	e3401004 	movt	r1, #4
   2cec0:	e3020314 	movw	r0, #8980	; 0x2314
   2cec4:	e3400004 	movt	r0, #4
   2cec8:	e3a020a3 	mov	r2, #163	; 0xa3
   2cecc:	ebfffe7b 	bl	2c8c0 <assertion_failed>

0002ced0 <CClassAllocator::Free(void*)>:
   2ced0:	e92d4070 	push	{r4, r5, r6, lr}
   2ced4:	e2514000 	subs	r4, r1, #0
   2ced8:	0a00001f 	beq	2cf5c <CClassAllocator::Free(void*)+0x8c>
   2cedc:	e5142010 	ldr	r2, [r4, #-16]
   2cee0:	e3053350 	movw	r3, #21328	; 0x5350
   2cee4:	e3443f42 	movt	r3, #20290	; 0x4f42
   2cee8:	e2446010 	sub	r6, r4, #16
   2ceec:	e1520003 	cmp	r2, r3
   2cef0:	1a00001f 	bne	2cf74 <CClassAllocator::Free(void*)+0xa4>
   2cef4:	e5143004 	ldr	r3, [r4, #-4]
   2cef8:	e3530000 	cmp	r3, #0
   2cefc:	1a000022 	bne	2cf8c <CClassAllocator::Free(void*)+0xbc>
   2cf00:	e5d03014 	ldrb	r3, [r0, #20]
   2cf04:	e1a05000 	mov	r5, r0
   2cf08:	e3530000 	cmp	r3, #0
   2cf0c:	0a000002 	beq	2cf1c <CClassAllocator::Free(void*)+0x4c>
   2cf10:	e590001c 	ldr	r0, [r0, #28]
   2cf14:	e3500000 	cmp	r0, #0
   2cf18:	1a000003 	bne	2cf2c <CClassAllocator::Free(void*)+0x5c>
   2cf1c:	e5953010 	ldr	r3, [r5, #16]
   2cf20:	e5043004 	str	r3, [r4, #-4]
   2cf24:	e5856010 	str	r6, [r5, #16]
   2cf28:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cf2c:	eb002d72 	bl	384fc <EnterCritical>
   2cf30:	e5d53014 	ldrb	r3, [r5, #20]
   2cf34:	e5952010 	ldr	r2, [r5, #16]
   2cf38:	e3530000 	cmp	r3, #0
   2cf3c:	e5042004 	str	r2, [r4, #-4]
   2cf40:	e5856010 	str	r6, [r5, #16]
   2cf44:	08bd8070 	popeq	{r4, r5, r6, pc}
   2cf48:	e595301c 	ldr	r3, [r5, #28]
   2cf4c:	e3530000 	cmp	r3, #0
   2cf50:	08bd8070 	popeq	{r4, r5, r6, pc}
   2cf54:	e8bd4070 	pop	{r4, r5, r6, lr}
   2cf58:	ea002d92 	b	385a8 <LeaveCritical>
   2cf5c:	e3021214 	movw	r1, #8724	; 0x2214
   2cf60:	e3401004 	movt	r1, #4
   2cf64:	e3020334 	movw	r0, #9012	; 0x2334
   2cf68:	e3400004 	movt	r0, #4
   2cf6c:	e3a020b1 	mov	r2, #177	; 0xb1
   2cf70:	ebfffe52 	bl	2c8c0 <assertion_failed>
   2cf74:	e3021214 	movw	r1, #8724	; 0x2214
   2cf78:	e3401004 	movt	r1, #4
   2cf7c:	e3020340 	movw	r0, #9024	; 0x2340
   2cf80:	e3400004 	movt	r0, #4
   2cf84:	e3a020b5 	mov	r2, #181	; 0xb5
   2cf88:	ebfffe4c 	bl	2c8c0 <assertion_failed>
   2cf8c:	e3021214 	movw	r1, #8724	; 0x2214
   2cf90:	e3401004 	movt	r1, #4
   2cf94:	e302035c 	movw	r0, #9052	; 0x235c
   2cf98:	e3400004 	movt	r0, #4
   2cf9c:	e3a020b6 	mov	r2, #182	; 0xb6
   2cfa0:	ebfffe46 	bl	2c8c0 <assertion_failed>

0002cfa4 <debug_hexdump(void const*, unsigned int, char const*)>:
   2cfa4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cfa8:	e3520000 	cmp	r2, #0
   2cfac:	e3028404 	movw	r8, #9220	; 0x2404
   2cfb0:	e3408004 	movt	r8, #4
   2cfb4:	e24dd054 	sub	sp, sp, #84	; 0x54
   2cfb8:	11a08002 	movne	r8, r2
   2cfbc:	e1a05001 	mov	r5, r1
   2cfc0:	e1a04000 	mov	r4, r0
   2cfc4:	eb0008ba 	bl	2f2b4 <CLogger::Get()>
   2cfc8:	e3a02004 	mov	r2, #4
   2cfcc:	e1a01008 	mov	r1, r8
   2cfd0:	e58d4004 	str	r4, [sp, #4]
   2cfd4:	e3023370 	movw	r3, #9072	; 0x2370
   2cfd8:	e3403004 	movt	r3, #4
   2cfdc:	e58d5000 	str	r5, [sp]
   2cfe0:	eb000a81 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2cfe4:	e3550000 	cmp	r5, #0
   2cfe8:	0a000030 	beq	2d0b0 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   2cfec:	e3023398 	movw	r3, #9112	; 0x2398
   2cff0:	e3403004 	movt	r3, #4
   2cff4:	e205900f 	and	r9, r5, #15
   2cff8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   2cffc:	ea000001 	b	2d008 <debug_hexdump(void const*, unsigned int, char const*)+0x64>
   2d000:	e2555010 	subs	r5, r5, #16
   2d004:	0a000029 	beq	2d0b0 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   2d008:	eb0008a9 	bl	2f2b4 <CLogger::Get()>
   2d00c:	e5d4200f 	ldrb	r2, [r4, #15]
   2d010:	e5d4300e 	ldrb	r3, [r4, #14]
   2d014:	e5d4a00d 	ldrb	sl, [r4, #13]
   2d018:	e5d4100c 	ldrb	r1, [r4, #12]
   2d01c:	e5d4700b 	ldrb	r7, [r4, #11]
   2d020:	e5d4600a 	ldrb	r6, [r4, #10]
   2d024:	e5d4e009 	ldrb	lr, [r4, #9]
   2d028:	e5d4c008 	ldrb	ip, [r4, #8]
   2d02c:	e58d2040 	str	r2, [sp, #64]	; 0x40
   2d030:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   2d034:	e5d42007 	ldrb	r2, [r4, #7]
   2d038:	e5d43006 	ldrb	r3, [r4, #6]
   2d03c:	e58da038 	str	sl, [sp, #56]	; 0x38
   2d040:	e58d1034 	str	r1, [sp, #52]	; 0x34
   2d044:	e5d41004 	ldrb	r1, [r4, #4]
   2d048:	e5d4b005 	ldrb	fp, [r4, #5]
   2d04c:	e58d7030 	str	r7, [sp, #48]	; 0x30
   2d050:	e58d602c 	str	r6, [sp, #44]	; 0x2c
   2d054:	e5d4a003 	ldrb	sl, [r4, #3]
   2d058:	e5d47002 	ldrb	r7, [r4, #2]
   2d05c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   2d060:	e6ffc074 	uxth	ip, r4
   2d064:	e58de028 	str	lr, [sp, #40]	; 0x28
   2d068:	e2844010 	add	r4, r4, #16
   2d06c:	e554e010 	ldrb	lr, [r4, #-16]
   2d070:	e554600f 	ldrb	r6, [r4, #-15]
   2d074:	e58d6008 	str	r6, [sp, #8]
   2d078:	e58d2020 	str	r2, [sp, #32]
   2d07c:	e3a02004 	mov	r2, #4
   2d080:	e58d301c 	str	r3, [sp, #28]
   2d084:	e58d1014 	str	r1, [sp, #20]
   2d088:	e1a01008 	mov	r1, r8
   2d08c:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
   2d090:	e58db018 	str	fp, [sp, #24]
   2d094:	e58da010 	str	sl, [sp, #16]
   2d098:	e58d700c 	str	r7, [sp, #12]
   2d09c:	e58de004 	str	lr, [sp, #4]
   2d0a0:	e58dc000 	str	ip, [sp]
   2d0a4:	eb000a50 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2d0a8:	e1590005 	cmp	r9, r5
   2d0ac:	1affffd3 	bne	2d000 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   2d0b0:	e28dd054 	add	sp, sp, #84	; 0x54
   2d0b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d0b8 <debug_stacktrace(unsigned int const*, char const*)>:
   2d0b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d0bc:	e3510000 	cmp	r1, #0
   2d0c0:	e3027404 	movw	r7, #9220	; 0x2404
   2d0c4:	e3407004 	movt	r7, #4
   2d0c8:	e30a68d8 	movw	r6, #43224	; 0xa8d8
   2d0cc:	e3406003 	movt	r6, #3
   2d0d0:	e30283f0 	movw	r8, #9200	; 0x23f0
   2d0d4:	e3408004 	movt	r8, #4
   2d0d8:	e24dd008 	sub	sp, sp, #8
   2d0dc:	11a07001 	movne	r7, r1
   2d0e0:	e2405004 	sub	r5, r0, #4
   2d0e4:	e3a04000 	mov	r4, #0
   2d0e8:	ea000002 	b	2d0f8 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   2d0ec:	e2844001 	add	r4, r4, #1
   2d0f0:	e3540040 	cmp	r4, #64	; 0x40
   2d0f4:	0a000011 	beq	2d140 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   2d0f8:	e5b53004 	ldr	r3, [r5, #4]!
   2d0fc:	e3530902 	cmp	r3, #32768	; 0x8000
   2d100:	3afffff9 	bcc	2d0ec <debug_stacktrace(unsigned int const*, char const*)+0x34>
   2d104:	e1530006 	cmp	r3, r6
   2d108:	2afffff7 	bcs	2d0ec <debug_stacktrace(unsigned int const*, char const*)+0x34>
   2d10c:	e3130003 	tst	r3, #3
   2d110:	1afffff5 	bne	2d0ec <debug_stacktrace(unsigned int const*, char const*)+0x34>
   2d114:	eb000866 	bl	2f2b4 <CLogger::Get()>
   2d118:	e595c000 	ldr	ip, [r5]
   2d11c:	e1a03008 	mov	r3, r8
   2d120:	e58d4000 	str	r4, [sp]
   2d124:	e3a02004 	mov	r2, #4
   2d128:	e1a01007 	mov	r1, r7
   2d12c:	e2844001 	add	r4, r4, #1
   2d130:	e58dc004 	str	ip, [sp, #4]
   2d134:	eb000a2c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2d138:	e3540040 	cmp	r4, #64	; 0x40
   2d13c:	1affffed 	bne	2d0f8 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   2d140:	e28dd008 	add	sp, sp, #8
   2d144:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002d148 <CDevice::Read(void*, unsigned int)>:
   2d148:	e3e00000 	mvn	r0, #0
   2d14c:	e12fff1e 	bx	lr

0002d150 <CDevice::Seek(unsigned long long)>:
   2d150:	e3e00000 	mvn	r0, #0
   2d154:	e3e01000 	mvn	r1, #0
   2d158:	e12fff1e 	bx	lr

0002d15c <CDevice::GetSize() const>:
   2d15c:	e3e00000 	mvn	r0, #0
   2d160:	e3e01000 	mvn	r1, #0
   2d164:	e12fff1e 	bx	lr

0002d168 <CDevice::IOCtl(unsigned long, void*)>:
   2d168:	e3e00000 	mvn	r0, #0
   2d16c:	e12fff1e 	bx	lr

0002d170 <CDevice::RemoveDevice()>:
   2d170:	e3a00000 	mov	r0, #0
   2d174:	e12fff1e 	bx	lr

0002d178 <CDevice::~CDevice()>:
   2d178:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d17c:	e1a06000 	mov	r6, r0
   2d180:	e59f3080 	ldr	r3, [pc, #128]	; 2d208 <CDevice::~CDevice()+0x90>
   2d184:	e1a07000 	mov	r7, r0
   2d188:	e4863004 	str	r3, [r6], #4
   2d18c:	ea000008 	b	2d1b4 <CDevice::~CDevice()+0x3c>
   2d190:	e5901004 	ldr	r1, [r0, #4]
   2d194:	e1a00007 	mov	r0, r7
   2d198:	e12fff33 	blx	r3
   2d19c:	e1a01004 	mov	r1, r4
   2d1a0:	e1a00006 	mov	r0, r6
   2d1a4:	eb000dc2 	bl	308b4 <CPtrList::Remove(TPtrListElement*)>
   2d1a8:	e3a01008 	mov	r1, #8
   2d1ac:	e1a00005 	mov	r0, r5
   2d1b0:	eb0026d1 	bl	36cfc <operator delete(void*, unsigned int)>
   2d1b4:	e1a00006 	mov	r0, r6
   2d1b8:	eb000d17 	bl	3061c <CPtrList::GetFirst()>
   2d1bc:	e2504000 	subs	r4, r0, #0
   2d1c0:	0a00000c 	beq	2d1f8 <CDevice::~CDevice()+0x80>
   2d1c4:	e1a01004 	mov	r1, r4
   2d1c8:	e1a00006 	mov	r0, r6
   2d1cc:	eb000d2a 	bl	3067c <CPtrList::GetPtr(TPtrListElement*)>
   2d1d0:	e5903000 	ldr	r3, [r0]
   2d1d4:	e1a05000 	mov	r5, r0
   2d1d8:	e3530000 	cmp	r3, #0
   2d1dc:	1affffeb 	bne	2d190 <CDevice::~CDevice()+0x18>
   2d1e0:	e302140c 	movw	r1, #9228	; 0x240c
   2d1e4:	e3401004 	movt	r1, #4
   2d1e8:	e3020418 	movw	r0, #9240	; 0x2418
   2d1ec:	e3400004 	movt	r0, #4
   2d1f0:	e3a02028 	mov	r2, #40	; 0x28
   2d1f4:	ebfffdb1 	bl	2c8c0 <assertion_failed>
   2d1f8:	e1a00006 	mov	r0, r6
   2d1fc:	eb000cfc 	bl	305f4 <CPtrList::~CPtrList()>
   2d200:	e1a00007 	mov	r0, r7
   2d204:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d208:	00042448 	.word	0x00042448

0002d20c <CDevice::~CDevice()>:
   2d20c:	e92d4010 	push	{r4, lr}
   2d210:	e1a04000 	mov	r4, r0
   2d214:	ebffffd7 	bl	2d178 <CDevice::~CDevice()>
   2d218:	e1a00004 	mov	r0, r4
   2d21c:	e3a01008 	mov	r1, #8
   2d220:	eb0026b5 	bl	36cfc <operator delete(void*, unsigned int)>
   2d224:	e1a00004 	mov	r0, r4
   2d228:	e8bd8010 	pop	{r4, pc}

0002d22c <CDevice::CDevice()>:
   2d22c:	e59f3014 	ldr	r3, [pc, #20]	; 2d248 <CDevice::CDevice()+0x1c>
   2d230:	e92d4010 	push	{r4, lr}
   2d234:	e1a04000 	mov	r4, r0
   2d238:	e4803004 	str	r3, [r0], #4
   2d23c:	eb000ce9 	bl	305e8 <CPtrList::CPtrList()>
   2d240:	e1a00004 	mov	r0, r4
   2d244:	e8bd8010 	pop	{r4, pc}
   2d248:	00042448 	.word	0x00042448

0002d24c <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   2d24c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d250:	e2516000 	subs	r6, r1, #0
   2d254:	0a000012 	beq	2d2a4 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x58>
   2d258:	e1a04000 	mov	r4, r0
   2d25c:	e3a00008 	mov	r0, #8
   2d260:	e1a07002 	mov	r7, r2
   2d264:	eb00268c 	bl	36c9c <operator new(unsigned int)>
   2d268:	e1a05000 	mov	r5, r0
   2d26c:	e2844004 	add	r4, r4, #4
   2d270:	e1a00004 	mov	r0, r4
   2d274:	e88500c0 	stm	r5, {r6, r7}
   2d278:	eb000ce7 	bl	3061c <CPtrList::GetFirst()>
   2d27c:	e1a02005 	mov	r2, r5
   2d280:	e2501000 	subs	r1, r0, #0
   2d284:	e1a00004 	mov	r0, r4
   2d288:	0a000002 	beq	2d298 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x4c>
   2d28c:	eb000d10 	bl	306d4 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   2d290:	e1a00005 	mov	r0, r5
   2d294:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d298:	eb000d49 	bl	307c4 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2d29c:	e1a00005 	mov	r0, r5
   2d2a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d2a4:	e302140c 	movw	r1, #9228	; 0x240c
   2d2a8:	e3401004 	movt	r1, #4
   2d2ac:	e303097c 	movw	r0, #14716	; 0x397c
   2d2b0:	e3400004 	movt	r0, #4
   2d2b4:	e3a02052 	mov	r2, #82	; 0x52
   2d2b8:	ebfffd80 	bl	2c8c0 <assertion_failed>

0002d2bc <CDevice::UnregisterRemovedHandler(void*)>:
   2d2bc:	e92d4070 	push	{r4, r5, r6, lr}
   2d2c0:	e2515000 	subs	r5, r1, #0
   2d2c4:	0a00000a 	beq	2d2f4 <CDevice::UnregisterRemovedHandler(void*)+0x38>
   2d2c8:	e2804004 	add	r4, r0, #4
   2d2cc:	e1a00004 	mov	r0, r4
   2d2d0:	eb000dc1 	bl	309dc <CPtrList::Find(void*)>
   2d2d4:	e2501000 	subs	r1, r0, #0
   2d2d8:	0a00000b 	beq	2d30c <CDevice::UnregisterRemovedHandler(void*)+0x50>
   2d2dc:	e1a00004 	mov	r0, r4
   2d2e0:	eb000d73 	bl	308b4 <CPtrList::Remove(TPtrListElement*)>
   2d2e4:	e1a00005 	mov	r0, r5
   2d2e8:	e3a01008 	mov	r1, #8
   2d2ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   2d2f0:	ea002681 	b	36cfc <operator delete(void*, unsigned int)>
   2d2f4:	e302140c 	movw	r1, #9228	; 0x240c
   2d2f8:	e3401004 	movt	r1, #4
   2d2fc:	e30b0374 	movw	r0, #45940	; 0xb374
   2d300:	e3400003 	movt	r0, #3
   2d304:	e3a02069 	mov	r2, #105	; 0x69
   2d308:	ebfffd6c 	bl	2c8c0 <assertion_failed>
   2d30c:	e302140c 	movw	r1, #9228	; 0x240c
   2d310:	e3401004 	movt	r1, #4
   2d314:	e3020430 	movw	r0, #9264	; 0x2430
   2d318:	e3400004 	movt	r0, #4
   2d31c:	e3a0206c 	mov	r2, #108	; 0x6c
   2d320:	ebfffd66 	bl	2c8c0 <assertion_failed>

0002d324 <CDeviceNameService::CDeviceNameService()>:
   2d324:	e3042f40 	movw	r2, #20288	; 0x4f40
   2d328:	e3402004 	movt	r2, #4
   2d32c:	e3a01000 	mov	r1, #0
   2d330:	e5801000 	str	r1, [r0]
   2d334:	e5801004 	str	r1, [r0, #4]
   2d338:	e592c000 	ldr	ip, [r2]
   2d33c:	e15c0001 	cmp	ip, r1
   2d340:	1a000001 	bne	2d34c <CDeviceNameService::CDeviceNameService()+0x28>
   2d344:	e5820000 	str	r0, [r2]
   2d348:	e12fff1e 	bx	lr
   2d34c:	e3021468 	movw	r1, #9320	; 0x2468
   2d350:	e3401004 	movt	r1, #4
   2d354:	e3020480 	movw	r0, #9344	; 0x2480
   2d358:	e3400004 	movt	r0, #4
   2d35c:	e3a0201f 	mov	r2, #31
   2d360:	e92d4010 	push	{r4, lr}
   2d364:	ebfffd55 	bl	2c8c0 <assertion_failed>

0002d368 <CDeviceNameService::~CDeviceNameService()>:
   2d368:	e92d4070 	push	{r4, r5, r6, lr}
   2d36c:	e1a05000 	mov	r5, r0
   2d370:	e5904000 	ldr	r4, [r0]
   2d374:	e3540000 	cmp	r4, #0
   2d378:	0a00000b 	beq	2d3ac <CDeviceNameService::~CDeviceNameService()+0x44>
   2d37c:	e1a03004 	mov	r3, r4
   2d380:	e5944000 	ldr	r4, [r4]
   2d384:	e5930004 	ldr	r0, [r3, #4]
   2d388:	e3500000 	cmp	r0, #0
   2d38c:	0a000000 	beq	2d394 <CDeviceNameService::~CDeviceNameService()+0x2c>
   2d390:	eb002653 	bl	36ce4 <operator delete[](void*)>
   2d394:	e5950000 	ldr	r0, [r5]
   2d398:	e3a01010 	mov	r1, #16
   2d39c:	eb002656 	bl	36cfc <operator delete(void*, unsigned int)>
   2d3a0:	e3540000 	cmp	r4, #0
   2d3a4:	e5854000 	str	r4, [r5]
   2d3a8:	1afffff3 	bne	2d37c <CDeviceNameService::~CDeviceNameService()+0x14>
   2d3ac:	e3043f40 	movw	r3, #20288	; 0x4f40
   2d3b0:	e3403004 	movt	r3, #4
   2d3b4:	e3a02000 	mov	r2, #0
   2d3b8:	e1a00005 	mov	r0, r5
   2d3bc:	e5832000 	str	r2, [r3]
   2d3c0:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d3c4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   2d3c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d3c8:	e1a05000 	mov	r5, r0
   2d3cc:	e5900004 	ldr	r0, [r0, #4]
   2d3d0:	e1a06001 	mov	r6, r1
   2d3d4:	e1a07002 	mov	r7, r2
   2d3d8:	e1a08003 	mov	r8, r3
   2d3dc:	e3500000 	cmp	r0, #0
   2d3e0:	1a000016 	bne	2d440 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x7c>
   2d3e4:	e3a00010 	mov	r0, #16
   2d3e8:	eb00262b 	bl	36c9c <operator new(unsigned int)>
   2d3ec:	e3560000 	cmp	r6, #0
   2d3f0:	e1a04000 	mov	r4, r0
   2d3f4:	0a000013 	beq	2d448 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x84>
   2d3f8:	e1a00006 	mov	r0, r6
   2d3fc:	eb002214 	bl	35c54 <strlen>
   2d400:	e2800001 	add	r0, r0, #1
   2d404:	eb00262a 	bl	36cb4 <operator new[](unsigned int)>
   2d408:	e1a01006 	mov	r1, r6
   2d40c:	e5840004 	str	r0, [r4, #4]
   2d410:	eb0022b3 	bl	35ee4 <strcpy>
   2d414:	e3570000 	cmp	r7, #0
   2d418:	0a000010 	beq	2d460 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
   2d41c:	e895000c 	ldm	r5, {r2, r3}
   2d420:	e5842000 	str	r2, [r4]
   2d424:	e5847008 	str	r7, [r4, #8]
   2d428:	e3530000 	cmp	r3, #0
   2d42c:	e5c4800c 	strb	r8, [r4, #12]
   2d430:	e5854000 	str	r4, [r5]
   2d434:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2d438:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2d43c:	ea002c59 	b	385a8 <LeaveCritical>
   2d440:	eb002c2d 	bl	384fc <EnterCritical>
   2d444:	eaffffe6 	b	2d3e4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   2d448:	e3021468 	movw	r1, #9320	; 0x2468
   2d44c:	e3401004 	movt	r1, #4
   2d450:	e30b0784 	movw	r0, #46980	; 0xb784
   2d454:	e3400003 	movt	r0, #3
   2d458:	e3a0203b 	mov	r2, #59	; 0x3b
   2d45c:	ebfffd17 	bl	2c8c0 <assertion_failed>
   2d460:	e3021468 	movw	r1, #9320	; 0x2468
   2d464:	e3401004 	movt	r1, #4
   2d468:	e302048c 	movw	r0, #9356	; 0x248c
   2d46c:	e3400004 	movt	r0, #4
   2d470:	e3a02040 	mov	r2, #64	; 0x40
   2d474:	ebfffd11 	bl	2c8c0 <assertion_failed>

0002d478 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   2d478:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d47c:	e2515000 	subs	r5, r1, #0
   2d480:	0a00003b 	beq	2d574 <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
   2d484:	e1a08000 	mov	r8, r0
   2d488:	e5900004 	ldr	r0, [r0, #4]
   2d48c:	e1a07002 	mov	r7, r2
   2d490:	e3500000 	cmp	r0, #0
   2d494:	1a000019 	bne	2d500 <CDeviceNameService::RemoveDevice(char const*, bool)+0x88>
   2d498:	e5984000 	ldr	r4, [r8]
   2d49c:	e3540000 	cmp	r4, #0
   2d4a0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2d4a4:	e3a06000 	mov	r6, #0
   2d4a8:	ea00000b 	b	2d4dc <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   2d4ac:	e1a00005 	mov	r0, r5
   2d4b0:	eb0021f1 	bl	35c7c <strcmp>
   2d4b4:	e3500000 	cmp	r0, #0
   2d4b8:	1a000002 	bne	2d4c8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   2d4bc:	e5d4300c 	ldrb	r3, [r4, #12]
   2d4c0:	e1530007 	cmp	r3, r7
   2d4c4:	0a000016 	beq	2d524 <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
   2d4c8:	e5943000 	ldr	r3, [r4]
   2d4cc:	e1a06004 	mov	r6, r4
   2d4d0:	e3530000 	cmp	r3, #0
   2d4d4:	0a00000d 	beq	2d510 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>
   2d4d8:	e1a04003 	mov	r4, r3
   2d4dc:	e5941004 	ldr	r1, [r4, #4]
   2d4e0:	e3510000 	cmp	r1, #0
   2d4e4:	1afffff0 	bne	2d4ac <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   2d4e8:	e3021468 	movw	r1, #9320	; 0x2468
   2d4ec:	e3401004 	movt	r1, #4
   2d4f0:	e302049c 	movw	r0, #9372	; 0x249c
   2d4f4:	e3400004 	movt	r0, #4
   2d4f8:	e3a0205e 	mov	r2, #94	; 0x5e
   2d4fc:	ebfffcef 	bl	2c8c0 <assertion_failed>
   2d500:	eb002bfd 	bl	384fc <EnterCritical>
   2d504:	e5984000 	ldr	r4, [r8]
   2d508:	e3540000 	cmp	r4, #0
   2d50c:	1affffe4 	bne	2d4a4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   2d510:	e5983004 	ldr	r3, [r8, #4]
   2d514:	e3530000 	cmp	r3, #0
   2d518:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2d51c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2d520:	ea002c20 	b	385a8 <LeaveCritical>
   2d524:	e3560000 	cmp	r6, #0
   2d528:	15943000 	ldrne	r3, [r4]
   2d52c:	15863000 	strne	r3, [r6]
   2d530:	0a00000c 	beq	2d568 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
   2d534:	e5983004 	ldr	r3, [r8, #4]
   2d538:	e3530000 	cmp	r3, #0
   2d53c:	1a000007 	bne	2d560 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
   2d540:	e5940004 	ldr	r0, [r4, #4]
   2d544:	e3500000 	cmp	r0, #0
   2d548:	0a000000 	beq	2d550 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd8>
   2d54c:	eb0025e4 	bl	36ce4 <operator delete[](void*)>
   2d550:	e1a00004 	mov	r0, r4
   2d554:	e3a01010 	mov	r1, #16
   2d558:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2d55c:	ea0025e6 	b	36cfc <operator delete(void*, unsigned int)>
   2d560:	eb002c10 	bl	385a8 <LeaveCritical>
   2d564:	eafffff5 	b	2d540 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
   2d568:	e5943000 	ldr	r3, [r4]
   2d56c:	e5883000 	str	r3, [r8]
   2d570:	eaffffef 	b	2d534 <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
   2d574:	e3021468 	movw	r1, #9320	; 0x2468
   2d578:	e3401004 	movt	r1, #4
   2d57c:	e30b0784 	movw	r0, #46980	; 0xb784
   2d580:	e3400003 	movt	r0, #3
   2d584:	e3a02056 	mov	r2, #86	; 0x56
   2d588:	ebfffccc 	bl	2c8c0 <assertion_failed>

0002d58c <CDeviceNameService::GetDevice(char const*, bool)>:
   2d58c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2d590:	e2515000 	subs	r5, r1, #0
   2d594:	e24dd00c 	sub	sp, sp, #12
   2d598:	0a000026 	beq	2d638 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   2d59c:	e1a07000 	mov	r7, r0
   2d5a0:	e5900004 	ldr	r0, [r0, #4]
   2d5a4:	e1a06002 	mov	r6, r2
   2d5a8:	e3500000 	cmp	r0, #0
   2d5ac:	1a000016 	bne	2d60c <CDeviceNameService::GetDevice(char const*, bool)+0x80>
   2d5b0:	e5974000 	ldr	r4, [r7]
   2d5b4:	e3540000 	cmp	r4, #0
   2d5b8:	1a00000a 	bne	2d5e8 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   2d5bc:	ea00001a 	b	2d62c <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   2d5c0:	e1a00005 	mov	r0, r5
   2d5c4:	eb0021ac 	bl	35c7c <strcmp>
   2d5c8:	e3500000 	cmp	r0, #0
   2d5cc:	1a000002 	bne	2d5dc <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   2d5d0:	e5d4300c 	ldrb	r3, [r4, #12]
   2d5d4:	e1530006 	cmp	r3, r6
   2d5d8:	0a00001c 	beq	2d650 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   2d5dc:	e5944000 	ldr	r4, [r4]
   2d5e0:	e3540000 	cmp	r4, #0
   2d5e4:	0a00000c 	beq	2d61c <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   2d5e8:	e5941004 	ldr	r1, [r4, #4]
   2d5ec:	e3510000 	cmp	r1, #0
   2d5f0:	1afffff2 	bne	2d5c0 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   2d5f4:	e3021468 	movw	r1, #9320	; 0x2468
   2d5f8:	e3401004 	movt	r1, #4
   2d5fc:	e302049c 	movw	r0, #9372	; 0x249c
   2d600:	e3400004 	movt	r0, #4
   2d604:	e3a02092 	mov	r2, #146	; 0x92
   2d608:	ebfffcac 	bl	2c8c0 <assertion_failed>
   2d60c:	eb002bba 	bl	384fc <EnterCritical>
   2d610:	e5974000 	ldr	r4, [r7]
   2d614:	e3540000 	cmp	r4, #0
   2d618:	1afffff2 	bne	2d5e8 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   2d61c:	e5973004 	ldr	r3, [r7, #4]
   2d620:	e3530000 	cmp	r3, #0
   2d624:	0a000000 	beq	2d62c <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   2d628:	eb002bde 	bl	385a8 <LeaveCritical>
   2d62c:	e3a00000 	mov	r0, #0
   2d630:	e28dd00c 	add	sp, sp, #12
   2d634:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2d638:	e3021468 	movw	r1, #9320	; 0x2468
   2d63c:	e3401004 	movt	r1, #4
   2d640:	e30b0784 	movw	r0, #46980	; 0xb784
   2d644:	e3400003 	movt	r0, #3
   2d648:	e3a0208b 	mov	r2, #139	; 0x8b
   2d64c:	ebfffc9b 	bl	2c8c0 <assertion_failed>
   2d650:	e5973004 	ldr	r3, [r7, #4]
   2d654:	e5940008 	ldr	r0, [r4, #8]
   2d658:	e3530000 	cmp	r3, #0
   2d65c:	1a000007 	bne	2d680 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
   2d660:	e3500000 	cmp	r0, #0
   2d664:	1afffff1 	bne	2d630 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   2d668:	e3021468 	movw	r1, #9320	; 0x2468
   2d66c:	e3401004 	movt	r1, #4
   2d670:	e30204b0 	movw	r0, #9392	; 0x24b0
   2d674:	e3400004 	movt	r0, #4
   2d678:	e3a0209a 	mov	r2, #154	; 0x9a
   2d67c:	ebfffc8f 	bl	2c8c0 <assertion_failed>
   2d680:	e58d0004 	str	r0, [sp, #4]
   2d684:	eb002bc7 	bl	385a8 <LeaveCritical>
   2d688:	e59d0004 	ldr	r0, [sp, #4]
   2d68c:	eafffff3 	b	2d660 <CDeviceNameService::GetDevice(char const*, bool)+0xd4>

0002d690 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
   2d690:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d694:	e1a07000 	mov	r7, r0
   2d698:	e5900004 	ldr	r0, [r0, #4]
   2d69c:	e1a05001 	mov	r5, r1
   2d6a0:	e1a06002 	mov	r6, r2
   2d6a4:	e3500000 	cmp	r0, #0
   2d6a8:	1a000013 	bne	2d6fc <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x6c>
   2d6ac:	e5974000 	ldr	r4, [r7]
   2d6b0:	e3540000 	cmp	r4, #0
   2d6b4:	1a000003 	bne	2d6c8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
   2d6b8:	ea000015 	b	2d714 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x84>
   2d6bc:	e5944000 	ldr	r4, [r4]
   2d6c0:	e3540000 	cmp	r4, #0
   2d6c4:	0a000010 	beq	2d70c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x7c>
   2d6c8:	e5d4200c 	ldrb	r2, [r4, #12]
   2d6cc:	e1a03006 	mov	r3, r6
   2d6d0:	e5941004 	ldr	r1, [r4, #4]
   2d6d4:	e5940008 	ldr	r0, [r4, #8]
   2d6d8:	e12fff35 	blx	r5
   2d6dc:	e2508000 	subs	r8, r0, #0
   2d6e0:	1afffff5 	bne	2d6bc <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x2c>
   2d6e4:	e5973004 	ldr	r3, [r7, #4]
   2d6e8:	e3530000 	cmp	r3, #0
   2d6ec:	0a000000 	beq	2d6f4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>
   2d6f0:	eb002bac 	bl	385a8 <LeaveCritical>
   2d6f4:	e1a00008 	mov	r0, r8
   2d6f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d6fc:	eb002b7e 	bl	384fc <EnterCritical>
   2d700:	e5974000 	ldr	r4, [r7]
   2d704:	e3540000 	cmp	r4, #0
   2d708:	1affffee 	bne	2d6c8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
   2d70c:	e3a08001 	mov	r8, #1
   2d710:	eafffff3 	b	2d6e4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
   2d714:	e3a08001 	mov	r8, #1
   2d718:	eafffff5 	b	2d6f4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>

0002d71c <CDeviceNameService::Get()>:
   2d71c:	e3043f40 	movw	r3, #20288	; 0x4f40
   2d720:	e3403004 	movt	r3, #4
   2d724:	e5930000 	ldr	r0, [r3]
   2d728:	e3500000 	cmp	r0, #0
   2d72c:	112fff1e 	bxne	lr
   2d730:	e3021468 	movw	r1, #9320	; 0x2468
   2d734:	e3401004 	movt	r1, #4
   2d738:	e30204c0 	movw	r0, #9408	; 0x24c0
   2d73c:	e3400004 	movt	r0, #4
   2d740:	e3a020e5 	mov	r2, #229	; 0xe5
   2d744:	e92d4010 	push	{r4, lr}
   2d748:	ebfffc5c 	bl	2c8c0 <assertion_failed>

0002d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   2d74c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d750:	e1a06001 	mov	r6, r1
   2d754:	e1a07002 	mov	r7, r2
   2d758:	e24dd010 	sub	sp, sp, #16
   2d75c:	e1a04000 	mov	r4, r0
   2d760:	e1a0000d 	mov	r0, sp
   2d764:	e1a05003 	mov	r5, r3
   2d768:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   2d76c:	eb00177a 	bl	3355c <CString::CString()>
   2d770:	e1a03007 	mov	r3, r7
   2d774:	e1a02006 	mov	r2, r6
   2d778:	e1a0000d 	mov	r0, sp
   2d77c:	e30214cc 	movw	r1, #9420	; 0x24cc
   2d780:	e3401004 	movt	r1, #4
   2d784:	eb001d3f 	bl	34c88 <CString::Format(char const*, ...)>
   2d788:	e1a0000d 	mov	r0, sp
   2d78c:	eb0017aa 	bl	3363c <CString::operator char const*() const>
   2d790:	e1a03008 	mov	r3, r8
   2d794:	e1a01000 	mov	r1, r0
   2d798:	e1a02005 	mov	r2, r5
   2d79c:	e1a00004 	mov	r0, r4
   2d7a0:	ebffff07 	bl	2d3c4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2d7a4:	e1a0000d 	mov	r0, sp
   2d7a8:	eb001738 	bl	33490 <CString::~CString()>
   2d7ac:	e28dd010 	add	sp, sp, #16
   2d7b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   2d7b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2d7b8:	e1a06001 	mov	r6, r1
   2d7bc:	e1a07002 	mov	r7, r2
   2d7c0:	e24dd014 	sub	sp, sp, #20
   2d7c4:	e1a04000 	mov	r4, r0
   2d7c8:	e1a0000d 	mov	r0, sp
   2d7cc:	e1a05003 	mov	r5, r3
   2d7d0:	eb001761 	bl	3355c <CString::CString()>
   2d7d4:	e1a03007 	mov	r3, r7
   2d7d8:	e1a02006 	mov	r2, r6
   2d7dc:	e1a0000d 	mov	r0, sp
   2d7e0:	e30214cc 	movw	r1, #9420	; 0x24cc
   2d7e4:	e3401004 	movt	r1, #4
   2d7e8:	eb001d26 	bl	34c88 <CString::Format(char const*, ...)>
   2d7ec:	e1a0000d 	mov	r0, sp
   2d7f0:	eb001791 	bl	3363c <CString::operator char const*() const>
   2d7f4:	e1a02005 	mov	r2, r5
   2d7f8:	e1a01000 	mov	r1, r0
   2d7fc:	e1a00004 	mov	r0, r4
   2d800:	ebffff1c 	bl	2d478 <CDeviceNameService::RemoveDevice(char const*, bool)>
   2d804:	e1a0000d 	mov	r0, sp
   2d808:	eb001720 	bl	33490 <CString::~CString()>
   2d80c:	e28dd014 	add	sp, sp, #20
   2d810:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002d814 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   2d814:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2d818:	e1a06001 	mov	r6, r1
   2d81c:	e1a07002 	mov	r7, r2
   2d820:	e24dd014 	sub	sp, sp, #20
   2d824:	e1a04000 	mov	r4, r0
   2d828:	e1a0000d 	mov	r0, sp
   2d82c:	e1a05003 	mov	r5, r3
   2d830:	eb001749 	bl	3355c <CString::CString()>
   2d834:	e1a03007 	mov	r3, r7
   2d838:	e1a02006 	mov	r2, r6
   2d83c:	e1a0000d 	mov	r0, sp
   2d840:	e30214cc 	movw	r1, #9420	; 0x24cc
   2d844:	e3401004 	movt	r1, #4
   2d848:	eb001d0e 	bl	34c88 <CString::Format(char const*, ...)>
   2d84c:	e1a0000d 	mov	r0, sp
   2d850:	eb001779 	bl	3363c <CString::operator char const*() const>
   2d854:	e1a02005 	mov	r2, r5
   2d858:	e1a01000 	mov	r1, r0
   2d85c:	e1a00004 	mov	r0, r4
   2d860:	ebffff49 	bl	2d58c <CDeviceNameService::GetDevice(char const*, bool)>
   2d864:	e1a04000 	mov	r4, r0
   2d868:	e1a0000d 	mov	r0, sp
   2d86c:	eb001707 	bl	33490 <CString::~CString()>
   2d870:	e1a00004 	mov	r0, r4
   2d874:	e28dd014 	add	sp, sp, #20
   2d878:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002d87c <CDeviceNameService::ListDevices(CDevice*)>:
   2d87c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d880:	e2517000 	subs	r7, r1, #0
   2d884:	e24dd018 	sub	sp, sp, #24
   2d888:	0a000038 	beq	2d970 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   2d88c:	e5904000 	ldr	r4, [r0]
   2d890:	e3540000 	cmp	r4, #0
   2d894:	0a000033 	beq	2d968 <CDeviceNameService::ListDevices(CDevice*)+0xec>
   2d898:	e30284d4 	movw	r8, #9428	; 0x24d4
   2d89c:	e3408004 	movt	r8, #4
   2d8a0:	e3a05000 	mov	r5, #0
   2d8a4:	ea000019 	b	2d910 <CDeviceNameService::ListDevices(CDevice*)+0x94>
   2d8a8:	e5d4200c 	ldrb	r2, [r4, #12]
   2d8ac:	e2855001 	add	r5, r5, #1
   2d8b0:	e2159003 	ands	r9, r5, #3
   2d8b4:	e1a01008 	mov	r1, r8
   2d8b8:	03a0c00a 	moveq	ip, #10
   2d8bc:	13a0c020 	movne	ip, #32
   2d8c0:	e2622063 	rsb	r2, r2, #99	; 0x63
   2d8c4:	e58dc000 	str	ip, [sp]
   2d8c8:	e28d0008 	add	r0, sp, #8
   2d8cc:	eb001ced 	bl	34c88 <CString::Format(char const*, ...)>
   2d8d0:	e5973000 	ldr	r3, [r7]
   2d8d4:	e28d0008 	add	r0, sp, #8
   2d8d8:	e593a00c 	ldr	sl, [r3, #12]
   2d8dc:	eb001756 	bl	3363c <CString::operator char const*() const>
   2d8e0:	e1a06000 	mov	r6, r0
   2d8e4:	e28d0008 	add	r0, sp, #8
   2d8e8:	eb001791 	bl	33734 <CString::GetLength() const>
   2d8ec:	e1a01006 	mov	r1, r6
   2d8f0:	e1a02000 	mov	r2, r0
   2d8f4:	e1a00007 	mov	r0, r7
   2d8f8:	e12fff3a 	blx	sl
   2d8fc:	e5944000 	ldr	r4, [r4]
   2d900:	e28d0008 	add	r0, sp, #8
   2d904:	eb0016e1 	bl	33490 <CString::~CString()>
   2d908:	e3540000 	cmp	r4, #0
   2d90c:	0a00000a 	beq	2d93c <CDeviceNameService::ListDevices(CDevice*)+0xc0>
   2d910:	e28d0008 	add	r0, sp, #8
   2d914:	eb001710 	bl	3355c <CString::CString()>
   2d918:	e5943004 	ldr	r3, [r4, #4]
   2d91c:	e3530000 	cmp	r3, #0
   2d920:	1affffe0 	bne	2d8a8 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
   2d924:	e3021468 	movw	r1, #9320	; 0x2468
   2d928:	e3401004 	movt	r1, #4
   2d92c:	e302049c 	movw	r0, #9372	; 0x249c
   2d930:	e3400004 	movt	r0, #4
   2d934:	e3a020d2 	mov	r2, #210	; 0xd2
   2d938:	ebfffbe0 	bl	2c8c0 <assertion_failed>
   2d93c:	e3590000 	cmp	r9, #0
   2d940:	0a000008 	beq	2d968 <CDeviceNameService::ListDevices(CDevice*)+0xec>
   2d944:	e5973000 	ldr	r3, [r7]
   2d948:	e3a02001 	mov	r2, #1
   2d94c:	e1a00007 	mov	r0, r7
   2d950:	e3011c38 	movw	r1, #7224	; 0x1c38
   2d954:	e3401004 	movt	r1, #4
   2d958:	e593300c 	ldr	r3, [r3, #12]
   2d95c:	e28dd018 	add	sp, sp, #24
   2d960:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d964:	e12fff13 	bx	r3
   2d968:	e28dd018 	add	sp, sp, #24
   2d96c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d970:	e3021468 	movw	r1, #9320	; 0x2468
   2d974:	e3401004 	movt	r1, #4
   2d978:	e302007c 	movw	r0, #8316	; 0x207c
   2d97c:	e3400004 	movt	r0, #4
   2d980:	e3a020c9 	mov	r2, #201	; 0xc9
   2d984:	ebfffbcd 	bl	2c8c0 <assertion_failed>

0002d988 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2d988:	e1a03000 	mov	r3, r0
   2d98c:	e280c0dc 	add	ip, r0, #220	; 0xdc
   2d990:	e3a02000 	mov	r2, #0
   2d994:	e5801000 	str	r1, [r0]
   2d998:	e5e32004 	strb	r2, [r3, #4]!
   2d99c:	e5a32004 	str	r2, [r3, #4]!
   2d9a0:	e153000c 	cmp	r3, ip
   2d9a4:	1afffffc 	bne	2d99c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   2d9a8:	e12fff1e 	bx	lr

0002d9ac <CGPIOManager::~CGPIOManager()>:
   2d9ac:	e92d4010 	push	{r4, lr}
   2d9b0:	e2803004 	add	r3, r0, #4
   2d9b4:	e1a04000 	mov	r4, r0
   2d9b8:	e28010dc 	add	r1, r0, #220	; 0xdc
   2d9bc:	ea000001 	b	2d9c8 <CGPIOManager::~CGPIOManager()+0x1c>
   2d9c0:	e1530001 	cmp	r3, r1
   2d9c4:	0a000008 	beq	2d9ec <CGPIOManager::~CGPIOManager()+0x40>
   2d9c8:	e5b32004 	ldr	r2, [r3, #4]!
   2d9cc:	e3520000 	cmp	r2, #0
   2d9d0:	0afffffa 	beq	2d9c0 <CGPIOManager::~CGPIOManager()+0x14>
   2d9d4:	e30214e0 	movw	r1, #9440	; 0x24e0
   2d9d8:	e3401004 	movt	r1, #4
   2d9dc:	e30204f0 	movw	r0, #9456	; 0x24f0
   2d9e0:	e3400004 	movt	r0, #4
   2d9e4:	e3a0202c 	mov	r2, #44	; 0x2c
   2d9e8:	ebfffbb4 	bl	2c8c0 <assertion_failed>
   2d9ec:	e5d43004 	ldrb	r3, [r4, #4]
   2d9f0:	e3530000 	cmp	r3, #0
   2d9f4:	0a000004 	beq	2da0c <CGPIOManager::~CGPIOManager()+0x60>
   2d9f8:	e5940000 	ldr	r0, [r4]
   2d9fc:	e3500000 	cmp	r0, #0
   2da00:	0a000003 	beq	2da14 <CGPIOManager::~CGPIOManager()+0x68>
   2da04:	e3a01034 	mov	r1, #52	; 0x34
   2da08:	eb002b78 	bl	387f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2da0c:	e1a00004 	mov	r0, r4
   2da10:	e8bd8010 	pop	{r4, pc}
   2da14:	e30214e0 	movw	r1, #9440	; 0x24e0
   2da18:	e3401004 	movt	r1, #4
   2da1c:	e3020504 	movw	r0, #9476	; 0x2504
   2da20:	e3400004 	movt	r0, #4
   2da24:	e3a02032 	mov	r2, #50	; 0x32
   2da28:	ebfffba4 	bl	2c8c0 <assertion_failed>

0002da2c <CGPIOManager::Initialize()>:
   2da2c:	e5d03004 	ldrb	r3, [r0, #4]
   2da30:	e92d4010 	push	{r4, lr}
   2da34:	e3530000 	cmp	r3, #0
   2da38:	1a00000b 	bne	2da6c <CGPIOManager::Initialize()+0x40>
   2da3c:	e1a04000 	mov	r4, r0
   2da40:	e5900000 	ldr	r0, [r0]
   2da44:	e3500000 	cmp	r0, #0
   2da48:	0a00000d 	beq	2da84 <CGPIOManager::Initialize()+0x58>
   2da4c:	e1a03004 	mov	r3, r4
   2da50:	e3a01034 	mov	r1, #52	; 0x34
   2da54:	e30d2ca0 	movw	r2, #56480	; 0xdca0
   2da58:	e3402002 	movt	r2, #2
   2da5c:	eb002b30 	bl	38724 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2da60:	e3a00001 	mov	r0, #1
   2da64:	e5c40004 	strb	r0, [r4, #4]
   2da68:	e8bd8010 	pop	{r4, pc}
   2da6c:	e30214e0 	movw	r1, #9440	; 0x24e0
   2da70:	e3401004 	movt	r1, #4
   2da74:	e3020518 	movw	r0, #9496	; 0x2518
   2da78:	e3400004 	movt	r0, #4
   2da7c:	e3a0203b 	mov	r2, #59	; 0x3b
   2da80:	ebfffb8e 	bl	2c8c0 <assertion_failed>
   2da84:	e30214e0 	movw	r1, #9440	; 0x24e0
   2da88:	e3401004 	movt	r1, #4
   2da8c:	e3020504 	movw	r0, #9476	; 0x2504
   2da90:	e3400004 	movt	r0, #4
   2da94:	e3a0203c 	mov	r2, #60	; 0x3c
   2da98:	ebfffb88 	bl	2c8c0 <assertion_failed>

0002da9c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2da9c:	e5d03004 	ldrb	r3, [r0, #4]
   2daa0:	e92d4010 	push	{r4, lr}
   2daa4:	e3530000 	cmp	r3, #0
   2daa8:	0a00000a 	beq	2dad8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2daac:	e3510000 	cmp	r1, #0
   2dab0:	0a00000e 	beq	2daf0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   2dab4:	e5913004 	ldr	r3, [r1, #4]
   2dab8:	e3530035 	cmp	r3, #53	; 0x35
   2dabc:	8a000011 	bhi	2db08 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2dac0:	e0800103 	add	r0, r0, r3, lsl #2
   2dac4:	e5903008 	ldr	r3, [r0, #8]
   2dac8:	e3530000 	cmp	r3, #0
   2dacc:	1a000013 	bne	2db20 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2dad0:	e5801008 	str	r1, [r0, #8]
   2dad4:	e8bd8010 	pop	{r4, pc}
   2dad8:	e30214e0 	movw	r1, #9440	; 0x24e0
   2dadc:	e3401004 	movt	r1, #4
   2dae0:	e302052c 	movw	r0, #9516	; 0x252c
   2dae4:	e3400004 	movt	r0, #4
   2dae8:	e3a02045 	mov	r2, #69	; 0x45
   2daec:	ebfffb73 	bl	2c8c0 <assertion_failed>
   2daf0:	e30214e0 	movw	r1, #9440	; 0x24e0
   2daf4:	e3401004 	movt	r1, #4
   2daf8:	e302053c 	movw	r0, #9532	; 0x253c
   2dafc:	e3400004 	movt	r0, #4
   2db00:	e3a02047 	mov	r2, #71	; 0x47
   2db04:	ebfffb6d 	bl	2c8c0 <assertion_failed>
   2db08:	e30214e0 	movw	r1, #9440	; 0x24e0
   2db0c:	e3401004 	movt	r1, #4
   2db10:	e3020548 	movw	r0, #9544	; 0x2548
   2db14:	e3400004 	movt	r0, #4
   2db18:	e3a02049 	mov	r2, #73	; 0x49
   2db1c:	ebfffb67 	bl	2c8c0 <assertion_failed>
   2db20:	e30214e0 	movw	r1, #9440	; 0x24e0
   2db24:	e3401004 	movt	r1, #4
   2db28:	e30204f0 	movw	r0, #9456	; 0x24f0
   2db2c:	e3400004 	movt	r0, #4
   2db30:	e3a0204b 	mov	r2, #75	; 0x4b
   2db34:	ebfffb61 	bl	2c8c0 <assertion_failed>

0002db38 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2db38:	e5d03004 	ldrb	r3, [r0, #4]
   2db3c:	e92d4010 	push	{r4, lr}
   2db40:	e3530000 	cmp	r3, #0
   2db44:	0a00000b 	beq	2db78 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2db48:	e3510000 	cmp	r1, #0
   2db4c:	0a00000f 	beq	2db90 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   2db50:	e5913004 	ldr	r3, [r1, #4]
   2db54:	e3530035 	cmp	r3, #53	; 0x35
   2db58:	8a000012 	bhi	2dba8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2db5c:	e0800103 	add	r0, r0, r3, lsl #2
   2db60:	e5903008 	ldr	r3, [r0, #8]
   2db64:	e3530000 	cmp	r3, #0
   2db68:	0a000014 	beq	2dbc0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2db6c:	e3a03000 	mov	r3, #0
   2db70:	e5803008 	str	r3, [r0, #8]
   2db74:	e8bd8010 	pop	{r4, pc}
   2db78:	e30214e0 	movw	r1, #9440	; 0x24e0
   2db7c:	e3401004 	movt	r1, #4
   2db80:	e302052c 	movw	r0, #9516	; 0x252c
   2db84:	e3400004 	movt	r0, #4
   2db88:	e3a02052 	mov	r2, #82	; 0x52
   2db8c:	ebfffb4b 	bl	2c8c0 <assertion_failed>
   2db90:	e30214e0 	movw	r1, #9440	; 0x24e0
   2db94:	e3401004 	movt	r1, #4
   2db98:	e302053c 	movw	r0, #9532	; 0x253c
   2db9c:	e3400004 	movt	r0, #4
   2dba0:	e3a02054 	mov	r2, #84	; 0x54
   2dba4:	ebfffb45 	bl	2c8c0 <assertion_failed>
   2dba8:	e30214e0 	movw	r1, #9440	; 0x24e0
   2dbac:	e3401004 	movt	r1, #4
   2dbb0:	e3020548 	movw	r0, #9544	; 0x2548
   2dbb4:	e3400004 	movt	r0, #4
   2dbb8:	e3a02056 	mov	r2, #86	; 0x56
   2dbbc:	ebfffb3f 	bl	2c8c0 <assertion_failed>
   2dbc0:	e30214e0 	movw	r1, #9440	; 0x24e0
   2dbc4:	e3401004 	movt	r1, #4
   2dbc8:	e302055c 	movw	r0, #9564	; 0x255c
   2dbcc:	e3400004 	movt	r0, #4
   2dbd0:	e3a02058 	mov	r2, #88	; 0x58
   2dbd4:	ebfffb39 	bl	2c8c0 <assertion_failed>

0002dbd8 <CGPIOManager::InterruptHandler()>:
   2dbd8:	e5d03004 	ldrb	r3, [r0, #4]
   2dbdc:	e92d4070 	push	{r4, r5, r6, lr}
   2dbe0:	e3530000 	cmp	r3, #0
   2dbe4:	0a000025 	beq	2dc80 <CGPIOManager::InterruptHandler()+0xa8>
   2dbe8:	e3a02000 	mov	r2, #0
   2dbec:	e3432f20 	movt	r2, #16160	; 0x3f20
   2dbf0:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2dbf4:	e2134001 	ands	r4, r3, #1
   2dbf8:	1a000026 	bne	2dc98 <CGPIOManager::InterruptHandler()+0xc0>
   2dbfc:	e2844001 	add	r4, r4, #1
   2dc00:	e314001f 	tst	r4, #31
   2dc04:	11a030a3 	lsrne	r3, r3, #1
   2dc08:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2dc0c:	e3540036 	cmp	r4, #54	; 0x36
   2dc10:	08bd8070 	popeq	{r4, r5, r6, pc}
   2dc14:	e3130001 	tst	r3, #1
   2dc18:	0afffff7 	beq	2dbfc <CGPIOManager::InterruptHandler()+0x24>
   2dc1c:	e2843002 	add	r3, r4, #2
   2dc20:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2dc24:	e3550000 	cmp	r5, #0
   2dc28:	0a000009 	beq	2dc54 <CGPIOManager::InterruptHandler()+0x7c>
   2dc2c:	e1a00005 	mov	r0, r5
   2dc30:	eb0002f4 	bl	2e808 <CGPIOPin::InterruptHandler()>
   2dc34:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2dc38:	e3530000 	cmp	r3, #0
   2dc3c:	13a03040 	movne	r3, #64	; 0x40
   2dc40:	13433f20 	movtne	r3, #16160	; 0x3f20
   2dc44:	15952008 	ldrne	r2, [r5, #8]
   2dc48:	1595100c 	ldrne	r1, [r5, #12]
   2dc4c:	17821003 	strne	r1, [r2, r3]
   2dc50:	e8bd8070 	pop	{r4, r5, r6, pc}
   2dc54:	e1a00004 	mov	r0, r4
   2dc58:	eb000309 	bl	2e884 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2dc5c:	e3a03010 	mov	r3, #16
   2dc60:	e3403fc8 	movt	r3, #4040	; 0xfc8
   2dc64:	e204101f 	and	r1, r4, #31
   2dc68:	e08332a4 	add	r3, r3, r4, lsr #5
   2dc6c:	e3a02001 	mov	r2, #1
   2dc70:	e1a03103 	lsl	r3, r3, #2
   2dc74:	e1a02112 	lsl	r2, r2, r1
   2dc78:	e5832000 	str	r2, [r3]
   2dc7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2dc80:	e30214e0 	movw	r1, #9440	; 0x24e0
   2dc84:	e3401004 	movt	r1, #4
   2dc88:	e302052c 	movw	r0, #9516	; 0x252c
   2dc8c:	e3400004 	movt	r0, #4
   2dc90:	e3a0205e 	mov	r2, #94	; 0x5e
   2dc94:	ebfffb09 	bl	2c8c0 <assertion_failed>
   2dc98:	e3a04000 	mov	r4, #0
   2dc9c:	eaffffde 	b	2dc1c <CGPIOManager::InterruptHandler()+0x44>

0002dca0 <CGPIOManager::InterruptStub(void*)>:
   2dca0:	e3500000 	cmp	r0, #0
   2dca4:	0a000000 	beq	2dcac <CGPIOManager::InterruptStub(void*)+0xc>
   2dca8:	eaffffca 	b	2dbd8 <CGPIOManager::InterruptHandler()>
   2dcac:	e30214e0 	movw	r1, #9440	; 0x24e0
   2dcb0:	e3401004 	movt	r1, #4
   2dcb4:	e3020570 	movw	r0, #9584	; 0x2570
   2dcb8:	e3400004 	movt	r0, #4
   2dcbc:	e3a0208e 	mov	r2, #142	; 0x8e
   2dcc0:	e92d4010 	push	{r4, lr}
   2dcc4:	ebfffafd 	bl	2c8c0 <assertion_failed>

0002dcc8 <CGPIOPin::~CGPIOPin()>:
   2dcc8:	e12fff1e 	bx	lr

0002dccc <CGPIOPin::~CGPIOPin()>:
   2dccc:	e92d4010 	push	{r4, lr}
   2dcd0:	e3a01028 	mov	r1, #40	; 0x28
   2dcd4:	e1a04000 	mov	r4, r0
   2dcd8:	eb002407 	bl	36cfc <operator delete(void*, unsigned int)>
   2dcdc:	e1a00004 	mov	r0, r4
   2dce0:	e8bd8010 	pop	{r4, pc}

0002dce4 <CGPIOPin::CGPIOPin()>:
   2dce4:	e59fc02c 	ldr	ip, [pc, #44]	; 2dd18 <CGPIOPin::CGPIOPin()+0x34>
   2dce8:	e3a01000 	mov	r1, #0
   2dcec:	e3a02006 	mov	r2, #6
   2dcf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2dcf4:	e3a0e036 	mov	lr, #54	; 0x36
   2dcf8:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   2dcfc:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   2dd00:	e3a0200a 	mov	r2, #10
   2dd04:	e8805000 	stm	r0, {ip, lr}
   2dd08:	e5801018 	str	r1, [r0, #24]
   2dd0c:	e580101c 	str	r1, [r0, #28]
   2dd10:	e5c02010 	strb	r2, [r0, #16]
   2dd14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2dd18:	00042588 	.word	0x00042588

0002dd1c <CGPIOPin::AssignPin(unsigned int)>:
   2dd1c:	e5903004 	ldr	r3, [r0, #4]
   2dd20:	e92d4070 	push	{r4, r5, r6, lr}
   2dd24:	e3530036 	cmp	r3, #54	; 0x36
   2dd28:	1a000017 	bne	2dd8c <CGPIOPin::AssignPin(unsigned int)+0x70>
   2dd2c:	e1a05000 	mov	r5, r0
   2dd30:	e1a04001 	mov	r4, r1
   2dd34:	e3510035 	cmp	r1, #53	; 0x35
   2dd38:	e5801004 	str	r1, [r0, #4]
   2dd3c:	8a000007 	bhi	2dd60 <CGPIOPin::AssignPin(unsigned int)+0x44>
   2dd40:	e1a022a4 	lsr	r2, r4, #5
   2dd44:	e3a03001 	mov	r3, #1
   2dd48:	e204401f 	and	r4, r4, #31
   2dd4c:	e1a02102 	lsl	r2, r2, #2
   2dd50:	e5852008 	str	r2, [r5, #8]
   2dd54:	e1a03413 	lsl	r3, r3, r4
   2dd58:	e585300c 	str	r3, [r5, #12]
   2dd5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2dd60:	eb000961 	bl	302ec <CMachineInfo::Get()>
   2dd64:	e6ef1074 	uxtb	r1, r4
   2dd68:	eb0008c6 	bl	30088 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   2dd6c:	e1a04000 	mov	r4, r0
   2dd70:	e3500035 	cmp	r0, #53	; 0x35
   2dd74:	e5850004 	str	r0, [r5, #4]
   2dd78:	9afffff0 	bls	2dd40 <CGPIOPin::AssignPin(unsigned int)+0x24>
   2dd7c:	e59f1018 	ldr	r1, [pc, #24]	; 2dd9c <CGPIOPin::AssignPin(unsigned int)+0x80>
   2dd80:	e3a02047 	mov	r2, #71	; 0x47
   2dd84:	e2810020 	add	r0, r1, #32
   2dd88:	ebfffacc 	bl	2c8c0 <assertion_failed>
   2dd8c:	e59f1008 	ldr	r1, [pc, #8]	; 2dd9c <CGPIOPin::AssignPin(unsigned int)+0x80>
   2dd90:	e3a02040 	mov	r2, #64	; 0x40
   2dd94:	e281000c 	add	r0, r1, #12
   2dd98:	ebfffac8 	bl	2c8c0 <assertion_failed>
   2dd9c:	00042590 	.word	0x00042590

0002dda0 <CGPIOPin::Write(unsigned int)>:
   2dda0:	e5903004 	ldr	r3, [r0, #4]
   2dda4:	e92d4010 	push	{r4, lr}
   2dda8:	e3530035 	cmp	r3, #53	; 0x35
   2ddac:	8a00000f 	bhi	2ddf0 <CGPIOPin::Write(unsigned int)+0x50>
   2ddb0:	e5d03010 	ldrb	r3, [r0, #16]
   2ddb4:	e3530003 	cmp	r3, #3
   2ddb8:	8a000010 	bhi	2de00 <CGPIOPin::Write(unsigned int)+0x60>
   2ddbc:	e3510001 	cmp	r1, #1
   2ddc0:	8a000012 	bhi	2de10 <CGPIOPin::Write(unsigned int)+0x70>
   2ddc4:	e3a0201c 	mov	r2, #28
   2ddc8:	e3432f20 	movt	r2, #16160	; 0x3f20
   2ddcc:	e3510000 	cmp	r1, #0
   2ddd0:	e590c008 	ldr	ip, [r0, #8]
   2ddd4:	e3a03028 	mov	r3, #40	; 0x28
   2ddd8:	e3433f20 	movt	r3, #16160	; 0x3f20
   2dddc:	11a03002 	movne	r3, r2
   2dde0:	e590200c 	ldr	r2, [r0, #12]
   2dde4:	e5801014 	str	r1, [r0, #20]
   2dde8:	e783200c 	str	r2, [r3, ip]
   2ddec:	e8bd8010 	pop	{r4, pc}
   2ddf0:	e59f1028 	ldr	r1, [pc, #40]	; 2de20 <CGPIOPin::Write(unsigned int)+0x80>
   2ddf4:	e3a02091 	mov	r2, #145	; 0x91
   2ddf8:	e2810020 	add	r0, r1, #32
   2ddfc:	ebfffaaf 	bl	2c8c0 <assertion_failed>
   2de00:	e59f1018 	ldr	r1, [pc, #24]	; 2de20 <CGPIOPin::Write(unsigned int)+0x80>
   2de04:	e3a02094 	mov	r2, #148	; 0x94
   2de08:	e2810034 	add	r0, r1, #52	; 0x34
   2de0c:	ebfffaab 	bl	2c8c0 <assertion_failed>
   2de10:	e59f1008 	ldr	r1, [pc, #8]	; 2de20 <CGPIOPin::Write(unsigned int)+0x80>
   2de14:	e3a02098 	mov	r2, #152	; 0x98
   2de18:	e2810058 	add	r0, r1, #88	; 0x58
   2de1c:	ebfffaa7 	bl	2c8c0 <assertion_failed>
   2de20:	00042590 	.word	0x00042590

0002de24 <CGPIOPin::Read() const>:
   2de24:	e5903004 	ldr	r3, [r0, #4]
   2de28:	e92d4010 	push	{r4, lr}
   2de2c:	e3530035 	cmp	r3, #53	; 0x35
   2de30:	8a00000d 	bhi	2de6c <CGPIOPin::Read() const+0x48>
   2de34:	e5d03010 	ldrb	r3, [r0, #16]
   2de38:	e2432002 	sub	r2, r3, #2
   2de3c:	e3530000 	cmp	r3, #0
   2de40:	13520001 	cmpne	r2, #1
   2de44:	8a00000c 	bhi	2de7c <CGPIOPin::Read() const+0x58>
   2de48:	e5901008 	ldr	r1, [r0, #8]
   2de4c:	e3a03034 	mov	r3, #52	; 0x34
   2de50:	e3433f20 	movt	r3, #16160	; 0x3f20
   2de54:	e590200c 	ldr	r2, [r0, #12]
   2de58:	e7913003 	ldr	r3, [r1, r3]
   2de5c:	e1130002 	tst	r3, r2
   2de60:	13a00001 	movne	r0, #1
   2de64:	03a00000 	moveq	r0, #0
   2de68:	e8bd8010 	pop	{r4, pc}
   2de6c:	e59f1018 	ldr	r1, [pc, #24]	; 2de8c <CGPIOPin::Read() const+0x68>
   2de70:	e3a020a4 	mov	r2, #164	; 0xa4
   2de74:	e2810020 	add	r0, r1, #32
   2de78:	ebfffa90 	bl	2c8c0 <assertion_failed>
   2de7c:	e59f1008 	ldr	r1, [pc, #8]	; 2de8c <CGPIOPin::Read() const+0x68>
   2de80:	e3a020a6 	mov	r2, #166	; 0xa6
   2de84:	e2810078 	add	r0, r1, #120	; 0x78
   2de88:	ebfffa8c 	bl	2c8c0 <assertion_failed>
   2de8c:	00042590 	.word	0x00042590

0002de90 <CGPIOPin::Invert()>:
   2de90:	e5d03010 	ldrb	r3, [r0, #16]
   2de94:	e92d4010 	push	{r4, lr}
   2de98:	e3530001 	cmp	r3, #1
   2de9c:	1a000011 	bne	2dee8 <CGPIOPin::Invert()+0x58>
   2dea0:	e5902014 	ldr	r2, [r0, #20]
   2dea4:	e5903004 	ldr	r3, [r0, #4]
   2dea8:	e2221001 	eor	r1, r2, #1
   2deac:	e3530035 	cmp	r3, #53	; 0x35
   2deb0:	8a000010 	bhi	2def8 <CGPIOPin::Invert()+0x68>
   2deb4:	e3510001 	cmp	r1, #1
   2deb8:	8a000012 	bhi	2df08 <CGPIOPin::Invert()+0x78>
   2debc:	e3520001 	cmp	r2, #1
   2dec0:	e3a0c01c 	mov	ip, #28
   2dec4:	e343cf20 	movt	ip, #16160	; 0x3f20
   2dec8:	e5902008 	ldr	r2, [r0, #8]
   2decc:	e3a03028 	mov	r3, #40	; 0x28
   2ded0:	e3433f20 	movt	r3, #16160	; 0x3f20
   2ded4:	11a0300c 	movne	r3, ip
   2ded8:	e590c00c 	ldr	ip, [r0, #12]
   2dedc:	e5801014 	str	r1, [r0, #20]
   2dee0:	e783c002 	str	ip, [r3, r2]
   2dee4:	e8bd8010 	pop	{r4, pc}
   2dee8:	e59f1028 	ldr	r1, [pc, #40]	; 2df18 <CGPIOPin::Invert()+0x88>
   2deec:	e3a020b5 	mov	r2, #181	; 0xb5
   2def0:	e28100d4 	add	r0, r1, #212	; 0xd4
   2def4:	ebfffa71 	bl	2c8c0 <assertion_failed>
   2def8:	e59f1018 	ldr	r1, [pc, #24]	; 2df18 <CGPIOPin::Invert()+0x88>
   2defc:	e3a02091 	mov	r2, #145	; 0x91
   2df00:	e2810020 	add	r0, r1, #32
   2df04:	ebfffa6d 	bl	2c8c0 <assertion_failed>
   2df08:	e59f1008 	ldr	r1, [pc, #8]	; 2df18 <CGPIOPin::Invert()+0x88>
   2df0c:	e3a02098 	mov	r2, #152	; 0x98
   2df10:	e2810058 	add	r0, r1, #88	; 0x58
   2df14:	ebfffa69 	bl	2c8c0 <assertion_failed>
   2df18:	00042590 	.word	0x00042590

0002df1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   2df1c:	e1a0c000 	mov	ip, r0
   2df20:	e5d00010 	ldrb	r0, [r0, #16]
   2df24:	e92d4010 	push	{r4, lr}
   2df28:	e240e002 	sub	lr, r0, #2
   2df2c:	e3500000 	cmp	r0, #0
   2df30:	135e0001 	cmpne	lr, #1
   2df34:	8a000027 	bhi	2dfd8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   2df38:	e5dc0025 	ldrb	r0, [ip, #37]	; 0x25
   2df3c:	e3500006 	cmp	r0, #6
   2df40:	1a000010 	bne	2df88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   2df44:	e5dc0026 	ldrb	r0, [ip, #38]	; 0x26
   2df48:	e3500006 	cmp	r0, #6
   2df4c:	1a000011 	bne	2df98 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   2df50:	e3510000 	cmp	r1, #0
   2df54:	0a000013 	beq	2dfa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   2df58:	e59c001c 	ldr	r0, [ip, #28]
   2df5c:	e3500000 	cmp	r0, #0
   2df60:	1a000014 	bne	2dfb8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   2df64:	e59c0018 	ldr	r0, [ip, #24]
   2df68:	e58c101c 	str	r1, [ip, #28]
   2df6c:	e3500000 	cmp	r0, #0
   2df70:	e58c2020 	str	r2, [ip, #32]
   2df74:	e5cc3024 	strb	r3, [ip, #36]	; 0x24
   2df78:	0a000012 	beq	2dfc8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   2df7c:	e8bd4010 	pop	{r4, lr}
   2df80:	e1a0100c 	mov	r1, ip
   2df84:	eafffec4 	b	2da9c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   2df88:	e59f1058 	ldr	r1, [pc, #88]	; 2dfe8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2df8c:	e3a020c0 	mov	r2, #192	; 0xc0
   2df90:	e28100f0 	add	r0, r1, #240	; 0xf0
   2df94:	ebfffa49 	bl	2c8c0 <assertion_failed>
   2df98:	e59f1048 	ldr	r1, [pc, #72]	; 2dfe8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2df9c:	e3a020c1 	mov	r2, #193	; 0xc1
   2dfa0:	e2810f45 	add	r0, r1, #276	; 0x114
   2dfa4:	ebfffa45 	bl	2c8c0 <assertion_failed>
   2dfa8:	e59f1038 	ldr	r1, [pc, #56]	; 2dfe8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2dfac:	e3a020c3 	mov	r2, #195	; 0xc3
   2dfb0:	e2810f4f 	add	r0, r1, #316	; 0x13c
   2dfb4:	ebfffa41 	bl	2c8c0 <assertion_failed>
   2dfb8:	e59f1028 	ldr	r1, [pc, #40]	; 2dfe8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2dfbc:	e3a020c4 	mov	r2, #196	; 0xc4
   2dfc0:	e2810f53 	add	r0, r1, #332	; 0x14c
   2dfc4:	ebfffa3d 	bl	2c8c0 <assertion_failed>
   2dfc8:	e59f1018 	ldr	r1, [pc, #24]	; 2dfe8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2dfcc:	e3a020cb 	mov	r2, #203	; 0xcb
   2dfd0:	e2810f57 	add	r0, r1, #348	; 0x15c
   2dfd4:	ebfffa39 	bl	2c8c0 <assertion_failed>
   2dfd8:	e59f1008 	ldr	r1, [pc, #8]	; 2dfe8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2dfdc:	e3a020bc 	mov	r2, #188	; 0xbc
   2dfe0:	e2810078 	add	r0, r1, #120	; 0x78
   2dfe4:	ebfffa35 	bl	2c8c0 <assertion_failed>
   2dfe8:	00042590 	.word	0x00042590

0002dfec <CGPIOPin::DisconnectInterrupt()>:
   2dfec:	e5d03010 	ldrb	r3, [r0, #16]
   2dff0:	e92d4010 	push	{r4, lr}
   2dff4:	e2432002 	sub	r2, r3, #2
   2dff8:	e3530000 	cmp	r3, #0
   2dffc:	13520001 	cmpne	r2, #1
   2e000:	8a000020 	bhi	2e088 <CGPIOPin::DisconnectInterrupt()+0x9c>
   2e004:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2e008:	e1a01000 	mov	r1, r0
   2e00c:	e3530006 	cmp	r3, #6
   2e010:	1a00000c 	bne	2e048 <CGPIOPin::DisconnectInterrupt()+0x5c>
   2e014:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2e018:	e3530006 	cmp	r3, #6
   2e01c:	1a00000d 	bne	2e058 <CGPIOPin::DisconnectInterrupt()+0x6c>
   2e020:	e590301c 	ldr	r3, [r0, #28]
   2e024:	e3530000 	cmp	r3, #0
   2e028:	0a00000e 	beq	2e068 <CGPIOPin::DisconnectInterrupt()+0x7c>
   2e02c:	e5900018 	ldr	r0, [r0, #24]
   2e030:	e3a03000 	mov	r3, #0
   2e034:	e581301c 	str	r3, [r1, #28]
   2e038:	e1500003 	cmp	r0, r3
   2e03c:	0a00000d 	beq	2e078 <CGPIOPin::DisconnectInterrupt()+0x8c>
   2e040:	e8bd4010 	pop	{r4, lr}
   2e044:	eafffebb 	b	2db38 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   2e048:	e59f1048 	ldr	r1, [pc, #72]	; 2e098 <CGPIOPin::DisconnectInterrupt()+0xac>
   2e04c:	e3a020d5 	mov	r2, #213	; 0xd5
   2e050:	e28100f0 	add	r0, r1, #240	; 0xf0
   2e054:	ebfffa19 	bl	2c8c0 <assertion_failed>
   2e058:	e59f1038 	ldr	r1, [pc, #56]	; 2e098 <CGPIOPin::DisconnectInterrupt()+0xac>
   2e05c:	e3a020d6 	mov	r2, #214	; 0xd6
   2e060:	e2810f45 	add	r0, r1, #276	; 0x114
   2e064:	ebfffa15 	bl	2c8c0 <assertion_failed>
   2e068:	e59f1028 	ldr	r1, [pc, #40]	; 2e098 <CGPIOPin::DisconnectInterrupt()+0xac>
   2e06c:	e3a020d8 	mov	r2, #216	; 0xd8
   2e070:	e2810f5b 	add	r0, r1, #364	; 0x16c
   2e074:	ebfffa11 	bl	2c8c0 <assertion_failed>
   2e078:	e59f1018 	ldr	r1, [pc, #24]	; 2e098 <CGPIOPin::DisconnectInterrupt()+0xac>
   2e07c:	e3a020db 	mov	r2, #219	; 0xdb
   2e080:	e2810f57 	add	r0, r1, #348	; 0x15c
   2e084:	ebfffa0d 	bl	2c8c0 <assertion_failed>
   2e088:	e59f1008 	ldr	r1, [pc, #8]	; 2e098 <CGPIOPin::DisconnectInterrupt()+0xac>
   2e08c:	e3a020d1 	mov	r2, #209	; 0xd1
   2e090:	e2810078 	add	r0, r1, #120	; 0x78
   2e094:	ebfffa09 	bl	2c8c0 <assertion_failed>
   2e098:	00042590 	.word	0x00042590

0002e09c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   2e09c:	e5d03010 	ldrb	r3, [r0, #16]
   2e0a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e0a4:	e2432002 	sub	r2, r3, #2
   2e0a8:	e3530000 	cmp	r3, #0
   2e0ac:	13520001 	cmpne	r2, #1
   2e0b0:	8a000032 	bhi	2e180 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
   2e0b4:	e590301c 	ldr	r3, [r0, #28]
   2e0b8:	e1a04000 	mov	r4, r0
   2e0bc:	e3530000 	cmp	r3, #0
   2e0c0:	0a00001e 	beq	2e140 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
   2e0c4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2e0c8:	e3530006 	cmp	r3, #6
   2e0cc:	1a00001f 	bne	2e150 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
   2e0d0:	e3510005 	cmp	r1, #5
   2e0d4:	8a000021 	bhi	2e160 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
   2e0d8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2e0dc:	e1530001 	cmp	r3, r1
   2e0e0:	0a000022 	beq	2e170 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
   2e0e4:	e3047f44 	movw	r7, #20292	; 0x4f44
   2e0e8:	e3407004 	movt	r7, #4
   2e0ec:	e3a0200c 	mov	r2, #12
   2e0f0:	e5903008 	ldr	r3, [r0, #8]
   2e0f4:	e5c01025 	strb	r1, [r0, #37]	; 0x25
   2e0f8:	e3a0604c 	mov	r6, #76	; 0x4c
   2e0fc:	e3436f20 	movt	r6, #16160	; 0x3f20
   2e100:	e5970000 	ldr	r0, [r7]
   2e104:	e0050192 	mul	r5, r2, r1
   2e108:	e0836006 	add	r6, r3, r6
   2e10c:	e3500000 	cmp	r0, #0
   2e110:	1a000008 	bne	2e138 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   2e114:	e7963005 	ldr	r3, [r6, r5]
   2e118:	e594200c 	ldr	r2, [r4, #12]
   2e11c:	e1833002 	orr	r3, r3, r2
   2e120:	e7863005 	str	r3, [r6, r5]
   2e124:	e5973000 	ldr	r3, [r7]
   2e128:	e3530000 	cmp	r3, #0
   2e12c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2e130:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e134:	ea00291b 	b	385a8 <LeaveCritical>
   2e138:	eb0028ef 	bl	384fc <EnterCritical>
   2e13c:	eafffff4 	b	2e114 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
   2e140:	e59f1048 	ldr	r1, [pc, #72]	; 2e190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2e144:	e3a020e4 	mov	r2, #228	; 0xe4
   2e148:	e2810f5b 	add	r0, r1, #364	; 0x16c
   2e14c:	ebfff9db 	bl	2c8c0 <assertion_failed>
   2e150:	e59f1038 	ldr	r1, [pc, #56]	; 2e190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2e154:	e3a020e6 	mov	r2, #230	; 0xe6
   2e158:	e28100f0 	add	r0, r1, #240	; 0xf0
   2e15c:	ebfff9d7 	bl	2c8c0 <assertion_failed>
   2e160:	e59f1028 	ldr	r1, [pc, #40]	; 2e190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2e164:	e3a020e7 	mov	r2, #231	; 0xe7
   2e168:	e2810f5f 	add	r0, r1, #380	; 0x17c
   2e16c:	ebfff9d3 	bl	2c8c0 <assertion_failed>
   2e170:	e59f1018 	ldr	r1, [pc, #24]	; 2e190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2e174:	e3a020e8 	mov	r2, #232	; 0xe8
   2e178:	e2810e1a 	add	r0, r1, #416	; 0x1a0
   2e17c:	ebfff9cf 	bl	2c8c0 <assertion_failed>
   2e180:	e59f1008 	ldr	r1, [pc, #8]	; 2e190 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2e184:	e3a020e1 	mov	r2, #225	; 0xe1
   2e188:	e2810078 	add	r0, r1, #120	; 0x78
   2e18c:	ebfff9cb 	bl	2c8c0 <assertion_failed>
   2e190:	00042590 	.word	0x00042590

0002e194 <CGPIOPin::DisableInterrupt()>:
   2e194:	e5d03010 	ldrb	r3, [r0, #16]
   2e198:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e19c:	e2432002 	sub	r2, r3, #2
   2e1a0:	e3530000 	cmp	r3, #0
   2e1a4:	13520001 	cmpne	r2, #1
   2e1a8:	8a000020 	bhi	2e230 <CGPIOPin::DisableInterrupt()+0x9c>
   2e1ac:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2e1b0:	e1a04000 	mov	r4, r0
   2e1b4:	e3530005 	cmp	r3, #5
   2e1b8:	8a000018 	bhi	2e220 <CGPIOPin::DisableInterrupt()+0x8c>
   2e1bc:	e3047f44 	movw	r7, #20292	; 0x4f44
   2e1c0:	e3407004 	movt	r7, #4
   2e1c4:	e3a0100c 	mov	r1, #12
   2e1c8:	e5902008 	ldr	r2, [r0, #8]
   2e1cc:	e3a0604c 	mov	r6, #76	; 0x4c
   2e1d0:	e3436f20 	movt	r6, #16160	; 0x3f20
   2e1d4:	e5970000 	ldr	r0, [r7]
   2e1d8:	e0826006 	add	r6, r2, r6
   2e1dc:	e0050391 	mul	r5, r1, r3
   2e1e0:	e3500000 	cmp	r0, #0
   2e1e4:	1a000009 	bne	2e210 <CGPIOPin::DisableInterrupt()+0x7c>
   2e1e8:	e7963005 	ldr	r3, [r6, r5]
   2e1ec:	e594200c 	ldr	r2, [r4, #12]
   2e1f0:	e1c33002 	bic	r3, r3, r2
   2e1f4:	e7863005 	str	r3, [r6, r5]
   2e1f8:	e5973000 	ldr	r3, [r7]
   2e1fc:	e3530000 	cmp	r3, #0
   2e200:	1a000004 	bne	2e218 <CGPIOPin::DisableInterrupt()+0x84>
   2e204:	e3a03006 	mov	r3, #6
   2e208:	e5c43025 	strb	r3, [r4, #37]	; 0x25
   2e20c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e210:	eb0028b9 	bl	384fc <EnterCritical>
   2e214:	eafffff3 	b	2e1e8 <CGPIOPin::DisableInterrupt()+0x54>
   2e218:	eb0028e2 	bl	385a8 <LeaveCritical>
   2e21c:	eafffff8 	b	2e204 <CGPIOPin::DisableInterrupt()+0x70>
   2e220:	e59f1018 	ldr	r1, [pc, #24]	; 2e240 <CGPIOPin::DisableInterrupt()+0xac>
   2e224:	e3a020fb 	mov	r2, #251	; 0xfb
   2e228:	e2810f6f 	add	r0, r1, #444	; 0x1bc
   2e22c:	ebfff9a3 	bl	2c8c0 <assertion_failed>
   2e230:	e59f1008 	ldr	r1, [pc, #8]	; 2e240 <CGPIOPin::DisableInterrupt()+0xac>
   2e234:	e3a020f7 	mov	r2, #247	; 0xf7
   2e238:	e2810078 	add	r0, r1, #120	; 0x78
   2e23c:	ebfff99f 	bl	2c8c0 <assertion_failed>
   2e240:	00042590 	.word	0x00042590

0002e244 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   2e244:	e5d03010 	ldrb	r3, [r0, #16]
   2e248:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e24c:	e2432002 	sub	r2, r3, #2
   2e250:	e3530000 	cmp	r3, #0
   2e254:	13520001 	cmpne	r2, #1
   2e258:	8a000032 	bhi	2e328 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
   2e25c:	e590301c 	ldr	r3, [r0, #28]
   2e260:	e1a04000 	mov	r4, r0
   2e264:	e3530000 	cmp	r3, #0
   2e268:	0a00001e 	beq	2e2e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
   2e26c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2e270:	e3530006 	cmp	r3, #6
   2e274:	1a00001f 	bne	2e2f8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
   2e278:	e3510005 	cmp	r1, #5
   2e27c:	8a000021 	bhi	2e308 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
   2e280:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2e284:	e1530001 	cmp	r3, r1
   2e288:	0a000022 	beq	2e318 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
   2e28c:	e3047f44 	movw	r7, #20292	; 0x4f44
   2e290:	e3407004 	movt	r7, #4
   2e294:	e3a0200c 	mov	r2, #12
   2e298:	e5903008 	ldr	r3, [r0, #8]
   2e29c:	e5c01026 	strb	r1, [r0, #38]	; 0x26
   2e2a0:	e3a0604c 	mov	r6, #76	; 0x4c
   2e2a4:	e3436f20 	movt	r6, #16160	; 0x3f20
   2e2a8:	e5970000 	ldr	r0, [r7]
   2e2ac:	e0050192 	mul	r5, r2, r1
   2e2b0:	e0836006 	add	r6, r3, r6
   2e2b4:	e3500000 	cmp	r0, #0
   2e2b8:	1a000008 	bne	2e2e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   2e2bc:	e7963005 	ldr	r3, [r6, r5]
   2e2c0:	e594200c 	ldr	r2, [r4, #12]
   2e2c4:	e1833002 	orr	r3, r3, r2
   2e2c8:	e7863005 	str	r3, [r6, r5]
   2e2cc:	e5973000 	ldr	r3, [r7]
   2e2d0:	e3530000 	cmp	r3, #0
   2e2d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2e2d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e2dc:	ea0028b1 	b	385a8 <LeaveCritical>
   2e2e0:	eb002885 	bl	384fc <EnterCritical>
   2e2e4:	eafffff4 	b	2e2bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
   2e2e8:	e59f1048 	ldr	r1, [pc, #72]	; 2e338 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2e2ec:	e300210d 	movw	r2, #269	; 0x10d
   2e2f0:	e2810f5b 	add	r0, r1, #364	; 0x16c
   2e2f4:	ebfff971 	bl	2c8c0 <assertion_failed>
   2e2f8:	e59f1038 	ldr	r1, [pc, #56]	; 2e338 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2e2fc:	e300210f 	movw	r2, #271	; 0x10f
   2e300:	e2810f45 	add	r0, r1, #276	; 0x114
   2e304:	ebfff96d 	bl	2c8c0 <assertion_failed>
   2e308:	e59f1028 	ldr	r1, [pc, #40]	; 2e338 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2e30c:	e3a02e11 	mov	r2, #272	; 0x110
   2e310:	e2810f5f 	add	r0, r1, #380	; 0x17c
   2e314:	ebfff969 	bl	2c8c0 <assertion_failed>
   2e318:	e59f1018 	ldr	r1, [pc, #24]	; 2e338 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2e31c:	e3002111 	movw	r2, #273	; 0x111
   2e320:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   2e324:	ebfff965 	bl	2c8c0 <assertion_failed>
   2e328:	e59f1008 	ldr	r1, [pc, #8]	; 2e338 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2e32c:	e300210a 	movw	r2, #266	; 0x10a
   2e330:	e2810078 	add	r0, r1, #120	; 0x78
   2e334:	ebfff961 	bl	2c8c0 <assertion_failed>
   2e338:	00042590 	.word	0x00042590

0002e33c <CGPIOPin::DisableInterrupt2()>:
   2e33c:	e5d03010 	ldrb	r3, [r0, #16]
   2e340:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e344:	e2432002 	sub	r2, r3, #2
   2e348:	e3530000 	cmp	r3, #0
   2e34c:	13520001 	cmpne	r2, #1
   2e350:	8a000020 	bhi	2e3d8 <CGPIOPin::DisableInterrupt2()+0x9c>
   2e354:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2e358:	e1a04000 	mov	r4, r0
   2e35c:	e3530005 	cmp	r3, #5
   2e360:	8a000018 	bhi	2e3c8 <CGPIOPin::DisableInterrupt2()+0x8c>
   2e364:	e3047f44 	movw	r7, #20292	; 0x4f44
   2e368:	e3407004 	movt	r7, #4
   2e36c:	e3a0100c 	mov	r1, #12
   2e370:	e5902008 	ldr	r2, [r0, #8]
   2e374:	e3a0604c 	mov	r6, #76	; 0x4c
   2e378:	e3436f20 	movt	r6, #16160	; 0x3f20
   2e37c:	e5970000 	ldr	r0, [r7]
   2e380:	e0826006 	add	r6, r2, r6
   2e384:	e0050391 	mul	r5, r1, r3
   2e388:	e3500000 	cmp	r0, #0
   2e38c:	1a000009 	bne	2e3b8 <CGPIOPin::DisableInterrupt2()+0x7c>
   2e390:	e7963005 	ldr	r3, [r6, r5]
   2e394:	e594200c 	ldr	r2, [r4, #12]
   2e398:	e1c33002 	bic	r3, r3, r2
   2e39c:	e7863005 	str	r3, [r6, r5]
   2e3a0:	e5973000 	ldr	r3, [r7]
   2e3a4:	e3530000 	cmp	r3, #0
   2e3a8:	1a000004 	bne	2e3c0 <CGPIOPin::DisableInterrupt2()+0x84>
   2e3ac:	e3a03006 	mov	r3, #6
   2e3b0:	e5c43026 	strb	r3, [r4, #38]	; 0x26
   2e3b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e3b8:	eb00284f 	bl	384fc <EnterCritical>
   2e3bc:	eafffff3 	b	2e390 <CGPIOPin::DisableInterrupt2()+0x54>
   2e3c0:	eb002878 	bl	385a8 <LeaveCritical>
   2e3c4:	eafffff8 	b	2e3ac <CGPIOPin::DisableInterrupt2()+0x70>
   2e3c8:	e59f1018 	ldr	r1, [pc, #24]	; 2e3e8 <CGPIOPin::DisableInterrupt2()+0xac>
   2e3cc:	e3a02f49 	mov	r2, #292	; 0x124
   2e3d0:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   2e3d4:	ebfff939 	bl	2c8c0 <assertion_failed>
   2e3d8:	e59f1008 	ldr	r1, [pc, #8]	; 2e3e8 <CGPIOPin::DisableInterrupt2()+0xac>
   2e3dc:	e3a02e12 	mov	r2, #288	; 0x120
   2e3e0:	e2810078 	add	r0, r1, #120	; 0x78
   2e3e4:	ebfff935 	bl	2c8c0 <assertion_failed>
   2e3e8:	00042590 	.word	0x00042590

0002e3ec <CGPIOPin::AcknowledgeInterrupt()>:
   2e3ec:	e590301c 	ldr	r3, [r0, #28]
   2e3f0:	e92d4010 	push	{r4, lr}
   2e3f4:	e3530000 	cmp	r3, #0
   2e3f8:	0a000008 	beq	2e420 <CGPIOPin::AcknowledgeInterrupt()+0x34>
   2e3fc:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   2e400:	e3530000 	cmp	r3, #0
   2e404:	1a000009 	bne	2e430 <CGPIOPin::AcknowledgeInterrupt()+0x44>
   2e408:	e5902008 	ldr	r2, [r0, #8]
   2e40c:	e3a03040 	mov	r3, #64	; 0x40
   2e410:	e3433f20 	movt	r3, #16160	; 0x3f20
   2e414:	e590100c 	ldr	r1, [r0, #12]
   2e418:	e7821003 	str	r1, [r2, r3]
   2e41c:	e8bd8010 	pop	{r4, pc}
   2e420:	e59f1018 	ldr	r1, [pc, #24]	; 2e440 <CGPIOPin::AcknowledgeInterrupt()+0x54>
   2e424:	e3002133 	movw	r2, #307	; 0x133
   2e428:	e2810f5b 	add	r0, r1, #364	; 0x16c
   2e42c:	ebfff923 	bl	2c8c0 <assertion_failed>
   2e430:	e59f1008 	ldr	r1, [pc, #8]	; 2e440 <CGPIOPin::AcknowledgeInterrupt()+0x54>
   2e434:	e3a02f4d 	mov	r2, #308	; 0x134
   2e438:	e2810e22 	add	r0, r1, #544	; 0x220
   2e43c:	ebfff91f 	bl	2c8c0 <assertion_failed>
   2e440:	00042590 	.word	0x00042590

0002e444 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   2e444:	e1d12000 	bics	r2, r1, r0
   2e448:	13a03000 	movne	r3, #0
   2e44c:	13433f20 	movtne	r3, #16160	; 0x3f20
   2e450:	15832028 	strne	r2, [r3, #40]	; 0x28
   2e454:	e0100001 	ands	r0, r0, r1
   2e458:	13a03000 	movne	r3, #0
   2e45c:	13433f20 	movtne	r3, #16160	; 0x3f20
   2e460:	1583001c 	strne	r0, [r3, #28]
   2e464:	e12fff1e 	bx	lr

0002e468 <CGPIOPin::ReadAll()>:
   2e468:	e3a03000 	mov	r3, #0
   2e46c:	e3433f20 	movt	r3, #16160	; 0x3f20
   2e470:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   2e474:	e12fff1e 	bx	lr

0002e478 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   2e478:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e47c:	e3044f44 	movw	r4, #20292	; 0x4f44
   2e480:	e3404004 	movt	r4, #4
   2e484:	e1a05000 	mov	r5, r0
   2e488:	e1a06001 	mov	r6, r1
   2e48c:	e5940000 	ldr	r0, [r4]
   2e490:	e3500000 	cmp	r0, #0
   2e494:	1a000015 	bne	2e4f0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
   2e498:	e3a07098 	mov	r7, #152	; 0x98
   2e49c:	e3437f20 	movt	r7, #16160	; 0x3f20
   2e4a0:	e5959008 	ldr	r9, [r5, #8]
   2e4a4:	e3560002 	cmp	r6, #2
   2e4a8:	8a000012 	bhi	2e4f8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
   2e4ac:	e3a08000 	mov	r8, #0
   2e4b0:	e3438f20 	movt	r8, #16160	; 0x3f20
   2e4b4:	e3a00005 	mov	r0, #5
   2e4b8:	e5886094 	str	r6, [r8, #148]	; 0x94
   2e4bc:	eb001d83 	bl	35ad0 <CTimer::SimpleusDelay(unsigned int)>
   2e4c0:	e595300c 	ldr	r3, [r5, #12]
   2e4c4:	e7893007 	str	r3, [r9, r7]
   2e4c8:	e3a00005 	mov	r0, #5
   2e4cc:	eb001d7f 	bl	35ad0 <CTimer::SimpleusDelay(unsigned int)>
   2e4d0:	e3a03000 	mov	r3, #0
   2e4d4:	e5883094 	str	r3, [r8, #148]	; 0x94
   2e4d8:	e7893007 	str	r3, [r9, r7]
   2e4dc:	e5943000 	ldr	r3, [r4]
   2e4e0:	e3530000 	cmp	r3, #0
   2e4e4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e4e8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e4ec:	ea00282d 	b	385a8 <LeaveCritical>
   2e4f0:	eb002801 	bl	384fc <EnterCritical>
   2e4f4:	eaffffe7 	b	2e498 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
   2e4f8:	e59f1008 	ldr	r1, [pc, #8]	; 2e508 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   2e4fc:	e3002165 	movw	r2, #357	; 0x165
   2e500:	e2810f8b 	add	r0, r1, #556	; 0x22c
   2e504:	ebfff8ed 	bl	2c8c0 <assertion_failed>
   2e508:	00042590 	.word	0x00042590

0002e50c <CGPIOPin::SetAlternateFunction(unsigned int)>:
   2e50c:	e5903004 	ldr	r3, [r0, #4]
   2e510:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e514:	e3530035 	cmp	r3, #53	; 0x35
   2e518:	8a000021 	bhi	2e5a4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
   2e51c:	e30c2ccd 	movw	r2, #52429	; 0xcccd
   2e520:	e34c2ccc 	movt	r2, #52428	; 0xcccc
   2e524:	e1a06001 	mov	r6, r1
   2e528:	e3a0100a 	mov	r1, #10
   2e52c:	e3560005 	cmp	r6, #5
   2e530:	e0820392 	umull	r0, r2, r2, r3
   2e534:	e1a021a2 	lsr	r2, r2, #3
   2e538:	e282053f 	add	r0, r2, #264241152	; 0xfc00000
   2e53c:	e2800702 	add	r0, r0, #524288	; 0x80000
   2e540:	e0633291 	mls	r3, r1, r2, r3
   2e544:	e1a07100 	lsl	r7, r0, #2
   2e548:	e0834083 	add	r4, r3, r3, lsl #1
   2e54c:	8a000018 	bhi	2e5b4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   2e550:	e3045f44 	movw	r5, #20292	; 0x4f44
   2e554:	e3405004 	movt	r5, #4
   2e558:	e5950000 	ldr	r0, [r5]
   2e55c:	e3500000 	cmp	r0, #0
   2e560:	1a00000d 	bne	2e59c <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
   2e564:	e3022580 	movw	r2, #9600	; 0x2580
   2e568:	e3402004 	movt	r2, #4
   2e56c:	e0822106 	add	r2, r2, r6, lsl #2
   2e570:	e5973000 	ldr	r3, [r7]
   2e574:	e3a01007 	mov	r1, #7
   2e578:	e5922258 	ldr	r2, [r2, #600]	; 0x258
   2e57c:	e1c33411 	bic	r3, r3, r1, lsl r4
   2e580:	e1833412 	orr	r3, r3, r2, lsl r4
   2e584:	e5873000 	str	r3, [r7]
   2e588:	e5953000 	ldr	r3, [r5]
   2e58c:	e3530000 	cmp	r3, #0
   2e590:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2e594:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e598:	ea002802 	b	385a8 <LeaveCritical>
   2e59c:	eb0027d6 	bl	384fc <EnterCritical>
   2e5a0:	eaffffef 	b	2e564 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
   2e5a4:	e59f1018 	ldr	r1, [pc, #24]	; 2e5c4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   2e5a8:	e3002181 	movw	r2, #385	; 0x181
   2e5ac:	e2810020 	add	r0, r1, #32
   2e5b0:	ebfff8c2 	bl	2c8c0 <assertion_failed>
   2e5b4:	e59f1008 	ldr	r1, [pc, #8]	; 2e5c4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   2e5b8:	e3002185 	movw	r2, #389	; 0x185
   2e5bc:	e2810f8e 	add	r0, r1, #568	; 0x238
   2e5c0:	ebfff8be 	bl	2c8c0 <assertion_failed>
   2e5c4:	00042590 	.word	0x00042590

0002e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   2e5c8:	e3510009 	cmp	r1, #9
   2e5cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e5d0:	8a000057 	bhi	2e734 <CGPIOPin::SetMode(TGPIOMode, bool)+0x16c>
   2e5d4:	e1a03001 	mov	r3, r1
   2e5d8:	e2411004 	sub	r1, r1, #4
   2e5dc:	e1a06002 	mov	r6, r2
   2e5e0:	e1a04000 	mov	r4, r0
   2e5e4:	e6ef2071 	uxtb	r2, r1
   2e5e8:	e5c03010 	strb	r3, [r0, #16]
   2e5ec:	e3520005 	cmp	r2, #5
   2e5f0:	9a00002d 	bls	2e6ac <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
   2e5f4:	e3530001 	cmp	r3, #1
   2e5f8:	13a02000 	movne	r2, #0
   2e5fc:	02062001 	andeq	r2, r6, #1
   2e600:	e3520000 	cmp	r2, #0
   2e604:	1a00004e 	bne	2e744 <CGPIOPin::SetMode(TGPIOMode, bool)+0x17c>
   2e608:	e5943004 	ldr	r3, [r4, #4]
   2e60c:	e3530035 	cmp	r3, #53	; 0x35
   2e610:	8a00004e 	bhi	2e750 <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>
   2e614:	e30c2ccd 	movw	r2, #52429	; 0xcccd
   2e618:	e34c2ccc 	movt	r2, #52428	; 0xcccc
   2e61c:	e3048f44 	movw	r8, #20292	; 0x4f44
   2e620:	e3408004 	movt	r8, #4
   2e624:	e0821392 	umull	r1, r2, r2, r3
   2e628:	e3a0100a 	mov	r1, #10
   2e62c:	e5980000 	ldr	r0, [r8]
   2e630:	e1a021a2 	lsr	r2, r2, #3
   2e634:	e3500000 	cmp	r0, #0
   2e638:	e282753f 	add	r7, r2, #264241152	; 0xfc00000
   2e63c:	e2877702 	add	r7, r7, #524288	; 0x80000
   2e640:	e0653291 	mls	r5, r1, r2, r3
   2e644:	e1a07107 	lsl	r7, r7, #2
   2e648:	e0855085 	add	r5, r5, r5, lsl #1
   2e64c:	1a00001f 	bne	2e6d0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
   2e650:	e5d42010 	ldrb	r2, [r4, #16]
   2e654:	e3a01007 	mov	r1, #7
   2e658:	e5973000 	ldr	r3, [r7]
   2e65c:	e2422001 	sub	r2, r2, #1
   2e660:	e16f2f12 	clz	r2, r2
   2e664:	e1c33511 	bic	r3, r3, r1, lsl r5
   2e668:	e1a022a2 	lsr	r2, r2, #5
   2e66c:	e1833512 	orr	r3, r3, r2, lsl r5
   2e670:	e5873000 	str	r3, [r7]
   2e674:	e5983000 	ldr	r3, [r8]
   2e678:	e3530000 	cmp	r3, #0
   2e67c:	1a00000f 	bne	2e6c0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
   2e680:	e3560000 	cmp	r6, #0
   2e684:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2e688:	e5d43010 	ldrb	r3, [r4, #16]
   2e68c:	e3530003 	cmp	r3, #3
   2e690:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2e694:	ea000003 	b	2e6a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
   2e698:	0002e708 	.word	0x0002e708
   2e69c:	0002e6f8 	.word	0x0002e6f8
   2e6a0:	0002e6e8 	.word	0x0002e6e8
   2e6a4:	0002e6d8 	.word	0x0002e6d8
   2e6a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e6ac:	e3560000 	cmp	r6, #0
   2e6b0:	1a000018 	bne	2e718 <CGPIOPin::SetMode(TGPIOMode, bool)+0x150>
   2e6b4:	e1a00004 	mov	r0, r4
   2e6b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e6bc:	eaffff92 	b	2e50c <CGPIOPin::SetAlternateFunction(unsigned int)>
   2e6c0:	eb0027b8 	bl	385a8 <LeaveCritical>
   2e6c4:	e3560000 	cmp	r6, #0
   2e6c8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2e6cc:	eaffffed 	b	2e688 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
   2e6d0:	eb002789 	bl	384fc <EnterCritical>
   2e6d4:	eaffffdd 	b	2e650 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
   2e6d8:	e1a00004 	mov	r0, r4
   2e6dc:	e3a01001 	mov	r1, #1
   2e6e0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e6e4:	eaffff63 	b	2e478 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e6e8:	e1a00004 	mov	r0, r4
   2e6ec:	e3a01002 	mov	r1, #2
   2e6f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e6f4:	eaffff5f 	b	2e478 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e6f8:	e1a00004 	mov	r0, r4
   2e6fc:	e3a01000 	mov	r1, #0
   2e700:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e704:	eafffda5 	b	2dda0 <CGPIOPin::Write(unsigned int)>
   2e708:	e1a00004 	mov	r0, r4
   2e70c:	e3a01000 	mov	r1, #0
   2e710:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e714:	eaffff57 	b	2e478 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e718:	e3a01000 	mov	r1, #0
   2e71c:	ebffff55 	bl	2e478 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e720:	e5d43010 	ldrb	r3, [r4, #16]
   2e724:	e1a00004 	mov	r0, r4
   2e728:	e2431004 	sub	r1, r3, #4
   2e72c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e730:	eaffff75 	b	2e50c <CGPIOPin::SetAlternateFunction(unsigned int)>
   2e734:	e59f1024 	ldr	r1, [pc, #36]	; 2e760 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   2e738:	e3a0204f 	mov	r2, #79	; 0x4f
   2e73c:	e2810e26 	add	r0, r1, #608	; 0x260
   2e740:	ebfff85e 	bl	2c8c0 <assertion_failed>
   2e744:	e3a01000 	mov	r1, #0
   2e748:	ebffff4a 	bl	2e478 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e74c:	eaffffad 	b	2e608 <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
   2e750:	e59f1008 	ldr	r1, [pc, #8]	; 2e760 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   2e754:	e3a02068 	mov	r2, #104	; 0x68
   2e758:	e2810020 	add	r0, r1, #32
   2e75c:	ebfff857 	bl	2c8c0 <assertion_failed>
   2e760:	00042590 	.word	0x00042590

0002e764 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   2e764:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e768:	e3510035 	cmp	r1, #53	; 0x35
   2e76c:	e59f7090 	ldr	r7, [pc, #144]	; 2e804 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
   2e770:	e5803018 	str	r3, [r0, #24]
   2e774:	e1a04000 	mov	r4, r0
   2e778:	e3a03000 	mov	r3, #0
   2e77c:	e1a05001 	mov	r5, r1
   2e780:	e580301c 	str	r3, [r0, #28]
   2e784:	e1a06002 	mov	r6, r2
   2e788:	e3a03006 	mov	r3, #6
   2e78c:	e5807000 	str	r7, [r0]
   2e790:	e5c03025 	strb	r3, [r0, #37]	; 0x25
   2e794:	e5c03026 	strb	r3, [r0, #38]	; 0x26
   2e798:	e3a0300a 	mov	r3, #10
   2e79c:	e5801004 	str	r1, [r0, #4]
   2e7a0:	e5c03010 	strb	r3, [r0, #16]
   2e7a4:	8a00000b 	bhi	2e7d8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
   2e7a8:	e3a02001 	mov	r2, #1
   2e7ac:	e1a032a5 	lsr	r3, r5, #5
   2e7b0:	e205501f 	and	r5, r5, #31
   2e7b4:	e1a00004 	mov	r0, r4
   2e7b8:	e1a03103 	lsl	r3, r3, #2
   2e7bc:	e1a01006 	mov	r1, r6
   2e7c0:	e1a05512 	lsl	r5, r2, r5
   2e7c4:	e5843008 	str	r3, [r4, #8]
   2e7c8:	e584500c 	str	r5, [r4, #12]
   2e7cc:	ebffff7d 	bl	2e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2e7d0:	e1a00004 	mov	r0, r4
   2e7d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e7d8:	eb0006c3 	bl	302ec <CMachineInfo::Get()>
   2e7dc:	e6ef1075 	uxtb	r1, r5
   2e7e0:	eb000628 	bl	30088 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   2e7e4:	e1a05000 	mov	r5, r0
   2e7e8:	e3500035 	cmp	r0, #53	; 0x35
   2e7ec:	e5840004 	str	r0, [r4, #4]
   2e7f0:	9affffec 	bls	2e7a8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   2e7f4:	e3a02047 	mov	r2, #71	; 0x47
   2e7f8:	e2871008 	add	r1, r7, #8
   2e7fc:	e2870028 	add	r0, r7, #40	; 0x28
   2e800:	ebfff82e 	bl	2c8c0 <assertion_failed>
   2e804:	00042588 	.word	0x00042588

0002e808 <CGPIOPin::InterruptHandler()>:
   2e808:	e5d03010 	ldrb	r3, [r0, #16]
   2e80c:	e92d4010 	push	{r4, lr}
   2e810:	e2432002 	sub	r2, r3, #2
   2e814:	e3530000 	cmp	r3, #0
   2e818:	13520001 	cmpne	r2, #1
   2e81c:	8a000013 	bhi	2e870 <CGPIOPin::InterruptHandler()+0x68>
   2e820:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2e824:	e3530005 	cmp	r3, #5
   2e828:	8a000005 	bhi	2e844 <CGPIOPin::InterruptHandler()+0x3c>
   2e82c:	e590301c 	ldr	r3, [r0, #28]
   2e830:	e3530000 	cmp	r3, #0
   2e834:	0a000009 	beq	2e860 <CGPIOPin::InterruptHandler()+0x58>
   2e838:	e8bd4010 	pop	{r4, lr}
   2e83c:	e5900020 	ldr	r0, [r0, #32]
   2e840:	e12fff13 	bx	r3
   2e844:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2e848:	e3530005 	cmp	r3, #5
   2e84c:	9afffff6 	bls	2e82c <CGPIOPin::InterruptHandler()+0x24>
   2e850:	e59f1028 	ldr	r1, [pc, #40]	; 2e880 <CGPIOPin::InterruptHandler()+0x78>
   2e854:	e3002195 	movw	r2, #405	; 0x195
   2e858:	e2810f9e 	add	r0, r1, #632	; 0x278
   2e85c:	ebfff817 	bl	2c8c0 <assertion_failed>
   2e860:	e59f1018 	ldr	r1, [pc, #24]	; 2e880 <CGPIOPin::InterruptHandler()+0x78>
   2e864:	e3a02f66 	mov	r2, #408	; 0x198
   2e868:	e2810f5b 	add	r0, r1, #364	; 0x16c
   2e86c:	ebfff813 	bl	2c8c0 <assertion_failed>
   2e870:	e59f1008 	ldr	r1, [pc, #8]	; 2e880 <CGPIOPin::InterruptHandler()+0x78>
   2e874:	e3002192 	movw	r2, #402	; 0x192
   2e878:	e2810078 	add	r0, r1, #120	; 0x78
   2e87c:	ebfff80f 	bl	2c8c0 <assertion_failed>
   2e880:	00042590 	.word	0x00042590

0002e884 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   2e884:	e3500035 	cmp	r0, #53	; 0x35
   2e888:	e92d4070 	push	{r4, r5, r6, lr}
   2e88c:	8a00001a 	bhi	2e8fc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
   2e890:	e3046f44 	movw	r6, #20292	; 0x4f44
   2e894:	e3406004 	movt	r6, #4
   2e898:	e3a04013 	mov	r4, #19
   2e89c:	e3404fc8 	movt	r4, #4040	; 0xfc8
   2e8a0:	e08442a0 	add	r4, r4, r0, lsr #5
   2e8a4:	e200301f 	and	r3, r0, #31
   2e8a8:	e3a02001 	mov	r2, #1
   2e8ac:	e5960000 	ldr	r0, [r6]
   2e8b0:	e1a04104 	lsl	r4, r4, #2
   2e8b4:	e1a05312 	lsl	r5, r2, r3
   2e8b8:	e3500000 	cmp	r0, #0
   2e8bc:	1a00000c 	bne	2e8f4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   2e8c0:	e3a0108b 	mov	r1, #139	; 0x8b
   2e8c4:	e3431f20 	movt	r1, #16160	; 0x3f20
   2e8c8:	e1e02005 	mvn	r2, r5
   2e8cc:	e5943000 	ldr	r3, [r4]
   2e8d0:	e0033002 	and	r3, r3, r2
   2e8d4:	e484300c 	str	r3, [r4], #12
   2e8d8:	e1540001 	cmp	r4, r1
   2e8dc:	9afffffa 	bls	2e8cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
   2e8e0:	e5963000 	ldr	r3, [r6]
   2e8e4:	e3530000 	cmp	r3, #0
   2e8e8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2e8ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   2e8f0:	ea00272c 	b	385a8 <LeaveCritical>
   2e8f4:	eb002700 	bl	384fc <EnterCritical>
   2e8f8:	eafffff0 	b	2e8c0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   2e8fc:	e59f1008 	ldr	r1, [pc, #8]	; 2e90c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   2e900:	e300219e 	movw	r2, #414	; 0x19e
   2e904:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   2e908:	ebfff7ec 	bl	2c8c0 <assertion_failed>
   2e90c:	00042590 	.word	0x00042590

0002e910 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   2e910:	e3043f44 	movw	r3, #20292	; 0x4f44
   2e914:	e3403004 	movt	r3, #4
   2e918:	e3a02001 	mov	r2, #1
   2e91c:	e5832000 	str	r2, [r3]
   2e920:	e12fff1e 	bx	lr

0002e924 <CKernelOptions::~CKernelOptions()>:
   2e924:	e92d4070 	push	{r4, r5, r6, lr}
   2e928:	e1a05000 	mov	r5, r0
   2e92c:	e5904890 	ldr	r4, [r0, #2192]	; 0x890
   2e930:	e3540000 	cmp	r4, #0
   2e934:	0a00000f 	beq	2e978 <CKernelOptions::~CKernelOptions()+0x54>
   2e938:	e5940008 	ldr	r0, [r4, #8]
   2e93c:	e5943000 	ldr	r3, [r4]
   2e940:	e3500000 	cmp	r0, #0
   2e944:	e5853890 	str	r3, [r5, #2192]	; 0x890
   2e948:	0a000000 	beq	2e950 <CKernelOptions::~CKernelOptions()+0x2c>
   2e94c:	eb0020e4 	bl	36ce4 <operator delete[](void*)>
   2e950:	e5940004 	ldr	r0, [r4, #4]
   2e954:	e3500000 	cmp	r0, #0
   2e958:	0a000000 	beq	2e960 <CKernelOptions::~CKernelOptions()+0x3c>
   2e95c:	eb0020e0 	bl	36ce4 <operator delete[](void*)>
   2e960:	e1a00004 	mov	r0, r4
   2e964:	e3a0100c 	mov	r1, #12
   2e968:	eb0020e3 	bl	36cfc <operator delete(void*, unsigned int)>
   2e96c:	e5954890 	ldr	r4, [r5, #2192]	; 0x890
   2e970:	e3540000 	cmp	r4, #0
   2e974:	1affffef 	bne	2e938 <CKernelOptions::~CKernelOptions()+0x14>
   2e978:	e3043f48 	movw	r3, #20296	; 0x4f48
   2e97c:	e3403004 	movt	r3, #4
   2e980:	e3a02000 	mov	r2, #0
   2e984:	e1a00005 	mov	r0, r5
   2e988:	e5832000 	str	r2, [r3]
   2e98c:	e8bd8070 	pop	{r4, r5, r6, pc}

0002e990 <CKernelOptions::GetWidth() const>:
   2e990:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   2e994:	e12fff1e 	bx	lr

0002e998 <CKernelOptions::GetHeight() const>:
   2e998:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   2e99c:	e12fff1e 	bx	lr

0002e9a0 <CKernelOptions::GetLogDevice() const>:
   2e9a0:	e2800e81 	add	r0, r0, #2064	; 0x810
   2e9a4:	e2800008 	add	r0, r0, #8
   2e9a8:	e12fff1e 	bx	lr

0002e9ac <CKernelOptions::GetLogLevel() const>:
   2e9ac:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   2e9b0:	e12fff1e 	bx	lr

0002e9b4 <CKernelOptions::GetKeyMap() const>:
   2e9b4:	e2800e83 	add	r0, r0, #2096	; 0x830
   2e9b8:	e12fff1e 	bx	lr

0002e9bc <CKernelOptions::GetUSBPowerDelay() const>:
   2e9bc:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   2e9c0:	e12fff1e 	bx	lr

0002e9c4 <CKernelOptions::GetUSBFullSpeed() const>:
   2e9c4:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   2e9c8:	e12fff1e 	bx	lr

0002e9cc <CKernelOptions::GetUSBBoost() const>:
   2e9cc:	e5d00839 	ldrb	r0, [r0, #2105]	; 0x839
   2e9d0:	e12fff1e 	bx	lr

0002e9d4 <CKernelOptions::GetUSBIgnore() const>:
   2e9d4:	e2800e83 	add	r0, r0, #2096	; 0x830
   2e9d8:	e280000a 	add	r0, r0, #10
   2e9dc:	e12fff1e 	bx	lr

0002e9e0 <CKernelOptions::GetUSBSoundChannels() const>:
   2e9e0:	e2800e85 	add	r0, r0, #2128	; 0x850
   2e9e4:	e12fff1e 	bx	lr

0002e9e8 <CKernelOptions::GetSoundDevice() const>:
   2e9e8:	e2800e85 	add	r0, r0, #2128	; 0x850
   2e9ec:	e2800008 	add	r0, r0, #8
   2e9f0:	e12fff1e 	bx	lr

0002e9f4 <CKernelOptions::GetSoundOption() const>:
   2e9f4:	e590086c 	ldr	r0, [r0, #2156]	; 0x86c
   2e9f8:	e12fff1e 	bx	lr

0002e9fc <CKernelOptions::GetCPUSpeed() const>:
   2e9fc:	e5d00870 	ldrb	r0, [r0, #2160]	; 0x870
   2ea00:	e12fff1e 	bx	lr

0002ea04 <CKernelOptions::GetSoCMaxTemp() const>:
   2ea04:	e5900874 	ldr	r0, [r0, #2164]	; 0x874
   2ea08:	e12fff1e 	bx	lr

0002ea0c <CKernelOptions::GetGPIOFanPin() const>:
   2ea0c:	e5900878 	ldr	r0, [r0, #2168]	; 0x878
   2ea10:	e12fff1e 	bx	lr

0002ea14 <CKernelOptions::GetTouchScreen() const>:
   2ea14:	e5d0387c 	ldrb	r3, [r0, #2172]	; 0x87c
   2ea18:	e3530000 	cmp	r3, #0
   2ea1c:	12800d22 	addne	r0, r0, #2176	; 0x880
   2ea20:	01a00003 	moveq	r0, r3
   2ea24:	e12fff1e 	bx	lr

0002ea28 <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
   2ea28:	e92d4070 	push	{r4, r5, r6, lr}
   2ea2c:	e1a06002 	mov	r6, r2
   2ea30:	e5904890 	ldr	r4, [r0, #2192]	; 0x890
   2ea34:	e3540000 	cmp	r4, #0
   2ea38:	0a00000b 	beq	2ea6c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
   2ea3c:	e1a05001 	mov	r5, r1
   2ea40:	ea000002 	b	2ea50 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x28>
   2ea44:	e5944000 	ldr	r4, [r4]
   2ea48:	e3540000 	cmp	r4, #0
   2ea4c:	0a000006 	beq	2ea6c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
   2ea50:	e5940004 	ldr	r0, [r4, #4]
   2ea54:	e1a01005 	mov	r1, r5
   2ea58:	eb001c87 	bl	35c7c <strcmp>
   2ea5c:	e3500000 	cmp	r0, #0
   2ea60:	1afffff7 	bne	2ea44 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x1c>
   2ea64:	e5940008 	ldr	r0, [r4, #8]
   2ea68:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ea6c:	e1a00006 	mov	r0, r6
   2ea70:	e8bd8070 	pop	{r4, r5, r6, pc}

0002ea74 <CKernelOptions::Get()>:
   2ea74:	e3043f48 	movw	r3, #20296	; 0x4f48
   2ea78:	e3403004 	movt	r3, #4
   2ea7c:	e5930000 	ldr	r0, [r3]
   2ea80:	e12fff1e 	bx	lr

0002ea84 <CKernelOptions::GetToken()>:
   2ea84:	e1a01000 	mov	r1, r0
   2ea88:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   2ea8c:	e1d030d0 	ldrsb	r3, [r0]
   2ea90:	e3530000 	cmp	r3, #0
   2ea94:	1a000005 	bne	2eab0 <CKernelOptions::GetToken()+0x2c>
   2ea98:	ea000017 	b	2eafc <CKernelOptions::GetToken()+0x78>
   2ea9c:	e2800001 	add	r0, r0, #1
   2eaa0:	e581080c 	str	r0, [r1, #2060]	; 0x80c
   2eaa4:	e1d030d0 	ldrsb	r3, [r0]
   2eaa8:	e3530000 	cmp	r3, #0
   2eaac:	0a000012 	beq	2eafc <CKernelOptions::GetToken()+0x78>
   2eab0:	e3530020 	cmp	r3, #32
   2eab4:	0afffff8 	beq	2ea9c <CKernelOptions::GetToken()+0x18>
   2eab8:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
   2eabc:	e1d320d0 	ldrsb	r2, [r3]
   2eac0:	e3520000 	cmp	r2, #0
   2eac4:	1a000005 	bne	2eae0 <CKernelOptions::GetToken()+0x5c>
   2eac8:	e12fff1e 	bx	lr
   2eacc:	e2833001 	add	r3, r3, #1
   2ead0:	e581380c 	str	r3, [r1, #2060]	; 0x80c
   2ead4:	e1d320d0 	ldrsb	r2, [r3]
   2ead8:	e3520000 	cmp	r2, #0
   2eadc:	012fff1e 	bxeq	lr
   2eae0:	e3520020 	cmp	r2, #32
   2eae4:	1afffff8 	bne	2eacc <CKernelOptions::GetToken()+0x48>
   2eae8:	e283c001 	add	ip, r3, #1
   2eaec:	e3a02000 	mov	r2, #0
   2eaf0:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
   2eaf4:	e5c32000 	strb	r2, [r3]
   2eaf8:	e12fff1e 	bx	lr
   2eafc:	e3a00000 	mov	r0, #0
   2eb00:	e12fff1e 	bx	lr

0002eb04 <CKernelOptions::GetOptionValue(char*)>:
   2eb04:	e1d030d0 	ldrsb	r3, [r0]
   2eb08:	e3530000 	cmp	r3, #0
   2eb0c:	1a000003 	bne	2eb20 <CKernelOptions::GetOptionValue(char*)+0x1c>
   2eb10:	ea000007 	b	2eb34 <CKernelOptions::GetOptionValue(char*)+0x30>
   2eb14:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2eb18:	e3530000 	cmp	r3, #0
   2eb1c:	0a000004 	beq	2eb34 <CKernelOptions::GetOptionValue(char*)+0x30>
   2eb20:	e353003d 	cmp	r3, #61	; 0x3d
   2eb24:	1afffffa 	bne	2eb14 <CKernelOptions::GetOptionValue(char*)+0x10>
   2eb28:	e3a03000 	mov	r3, #0
   2eb2c:	e4c03001 	strb	r3, [r0], #1
   2eb30:	e12fff1e 	bx	lr
   2eb34:	e1a00003 	mov	r0, r3
   2eb38:	e12fff1e 	bx	lr

0002eb3c <CKernelOptions::GetDecimal(char const*)>:
   2eb3c:	e2501000 	subs	r1, r0, #0
   2eb40:	0a000015 	beq	2eb9c <CKernelOptions::GetDecimal(char const*)+0x60>
   2eb44:	e1d130d0 	ldrsb	r3, [r1]
   2eb48:	e3530000 	cmp	r3, #0
   2eb4c:	0a000012 	beq	2eb9c <CKernelOptions::GetDecimal(char const*)+0x60>
   2eb50:	e3a00000 	mov	r0, #0
   2eb54:	e3a0c00a 	mov	ip, #10
   2eb58:	ea000007 	b	2eb7c <CKernelOptions::GetDecimal(char const*)+0x40>
   2eb5c:	e3730001 	cmn	r3, #1
   2eb60:	13a02000 	movne	r2, #0
   2eb64:	03a02001 	moveq	r2, #1
   2eb68:	e1500003 	cmp	r0, r3
   2eb6c:	83822001 	orrhi	r2, r2, #1
   2eb70:	e1a00003 	mov	r0, r3
   2eb74:	e3520000 	cmp	r2, #0
   2eb78:	1a000007 	bne	2eb9c <CKernelOptions::GetDecimal(char const*)+0x60>
   2eb7c:	e0d120d1 	ldrsb	r2, [r1], #1
   2eb80:	e3520000 	cmp	r2, #0
   2eb84:	e2423030 	sub	r3, r2, #48	; 0x30
   2eb88:	012fff1e 	bxeq	lr
   2eb8c:	e6ef2073 	uxtb	r2, r3
   2eb90:	e023309c 	mla	r3, ip, r0, r3
   2eb94:	e3520009 	cmp	r2, #9
   2eb98:	9affffef 	bls	2eb5c <CKernelOptions::GetDecimal(char const*)+0x20>
   2eb9c:	e3e00000 	mvn	r0, #0
   2eba0:	e12fff1e 	bx	lr

0002eba4 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
   2eba4:	e92d4070 	push	{r4, r5, r6, lr}
   2eba8:	e1a06002 	mov	r6, r2
   2ebac:	e5904890 	ldr	r4, [r0, #2192]	; 0x890
   2ebb0:	e3540000 	cmp	r4, #0
   2ebb4:	0a00000f 	beq	2ebf8 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   2ebb8:	e1a05001 	mov	r5, r1
   2ebbc:	ea000002 	b	2ebcc <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x28>
   2ebc0:	e5944000 	ldr	r4, [r4]
   2ebc4:	e3540000 	cmp	r4, #0
   2ebc8:	0a00000a 	beq	2ebf8 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   2ebcc:	e5940004 	ldr	r0, [r4, #4]
   2ebd0:	e1a01005 	mov	r1, r5
   2ebd4:	eb001c28 	bl	35c7c <strcmp>
   2ebd8:	e3500000 	cmp	r0, #0
   2ebdc:	1afffff7 	bne	2ebc0 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x1c>
   2ebe0:	e5940008 	ldr	r0, [r4, #8]
   2ebe4:	e3500000 	cmp	r0, #0
   2ebe8:	0a000002 	beq	2ebf8 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   2ebec:	ebffffd2 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2ebf0:	e3700001 	cmn	r0, #1
   2ebf4:	18bd8070 	popne	{r4, r5, r6, pc}
   2ebf8:	e1a00006 	mov	r0, r6
   2ebfc:	e8bd8070 	pop	{r4, r5, r6, pc}

0002ec00 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
   2ec00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ec04:	e3520000 	cmp	r2, #0
   2ec08:	e24dd008 	sub	sp, sp, #8
   2ec0c:	028d7004 	addeq	r7, sp, #4
   2ec10:	0a000023 	beq	2eca4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa4>
   2ec14:	e3026938 	movw	r6, #10552	; 0x2938
   2ec18:	e3406004 	movt	r6, #4
   2ec1c:	e1a05001 	mov	r5, r1
   2ec20:	e2428001 	sub	r8, r2, #1
   2ec24:	e28d7004 	add	r7, sp, #4
   2ec28:	e3a0400a 	mov	r4, #10
   2ec2c:	e1a02007 	mov	r2, r7
   2ec30:	e1a01006 	mov	r1, r6
   2ec34:	eb001cf7 	bl	36018 <strtok_r>
   2ec38:	e250c000 	subs	ip, r0, #0
   2ec3c:	0a000021 	beq	2ecc8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   2ec40:	e1dc00d0 	ldrsb	r0, [ip]
   2ec44:	e3500000 	cmp	r0, #0
   2ec48:	0a00001f 	beq	2eccc <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
   2ec4c:	e3a01000 	mov	r1, #0
   2ec50:	ea00000b 	b	2ec84 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x84>
   2ec54:	e6ef2073 	uxtb	r2, r3
   2ec58:	e0233194 	mla	r3, r4, r1, r3
   2ec5c:	e3520009 	cmp	r2, #9
   2ec60:	8a000018 	bhi	2ecc8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   2ec64:	e3730001 	cmn	r3, #1
   2ec68:	13a02000 	movne	r2, #0
   2ec6c:	03a02001 	moveq	r2, #1
   2ec70:	e1510003 	cmp	r1, r3
   2ec74:	83822001 	orrhi	r2, r2, #1
   2ec78:	e1a01003 	mov	r1, r3
   2ec7c:	e3520000 	cmp	r2, #0
   2ec80:	1a000010 	bne	2ecc8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   2ec84:	e0dc00d1 	ldrsb	r0, [ip], #1
   2ec88:	e2403030 	sub	r3, r0, #48	; 0x30
   2ec8c:	e3500000 	cmp	r0, #0
   2ec90:	1affffef 	bne	2ec54 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x54>
   2ec94:	e2488001 	sub	r8, r8, #1
   2ec98:	e4851004 	str	r1, [r5], #4
   2ec9c:	e3780001 	cmn	r8, #1
   2eca0:	1affffe1 	bne	2ec2c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x2c>
   2eca4:	e1a02007 	mov	r2, r7
   2eca8:	e3a00000 	mov	r0, #0
   2ecac:	e3021938 	movw	r1, #10552	; 0x2938
   2ecb0:	e3401004 	movt	r1, #4
   2ecb4:	eb001cd7 	bl	36018 <strtok_r>
   2ecb8:	e16f0f10 	clz	r0, r0
   2ecbc:	e1a002a0 	lsr	r0, r0, #5
   2ecc0:	e28dd008 	add	sp, sp, #8
   2ecc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ecc8:	e3a00000 	mov	r0, #0
   2eccc:	e28dd008 	add	sp, sp, #8
   2ecd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002ecd4 <CKernelOptions::CKernelOptions()>:
   2ecd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ecd8:	e1a04000 	mov	r4, r0
   2ecdc:	e3002838 	movw	r2, #2104	; 0x838
   2ece0:	e2807e81 	add	r7, r0, #2064	; 0x810
   2ece4:	e3a05000 	mov	r5, #0
   2ece8:	e2877008 	add	r7, r7, #8
   2ecec:	e24dd01c 	sub	sp, sp, #28
   2ecf0:	e5805810 	str	r5, [r0, #2064]	; 0x810
   2ecf4:	e3a03004 	mov	r3, #4
   2ecf8:	e5805814 	str	r5, [r0, #2068]	; 0x814
   2ecfc:	e2849e83 	add	r9, r4, #2096	; 0x830
   2ed00:	e580382c 	str	r3, [r0, #2092]	; 0x82c
   2ed04:	e3021868 	movw	r1, #10344	; 0x2868
   2ed08:	e3401004 	movt	r1, #4
   2ed0c:	e5805834 	str	r5, [r0, #2100]	; 0x834
   2ed10:	e3a0303c 	mov	r3, #60	; 0x3c
   2ed14:	e18050b2 	strh	r5, [r0, r2]
   2ed18:	e5803874 	str	r3, [r0, #2164]	; 0x874
   2ed1c:	e5805850 	str	r5, [r0, #2128]	; 0x850
   2ed20:	e5805854 	str	r5, [r0, #2132]	; 0x854
   2ed24:	e580586c 	str	r5, [r0, #2156]	; 0x86c
   2ed28:	e5c05870 	strb	r5, [r0, #2160]	; 0x870
   2ed2c:	e1a00007 	mov	r0, r7
   2ed30:	e5845878 	str	r5, [r4, #2168]	; 0x878
   2ed34:	e5c4587c 	strb	r5, [r4, #2172]	; 0x87c
   2ed38:	e5845890 	str	r5, [r4, #2192]	; 0x890
   2ed3c:	eb001c68 	bl	35ee4 <strcpy>
   2ed40:	e1a00009 	mov	r0, r9
   2ed44:	e30e152c 	movw	r1, #58668	; 0xe52c
   2ed48:	e3401003 	movt	r1, #3
   2ed4c:	eb001c64 	bl	35ee4 <strcpy>
   2ed50:	e3043f48 	movw	r3, #20296	; 0x4f48
   2ed54:	e3403004 	movt	r3, #4
   2ed58:	e1a01005 	mov	r1, r5
   2ed5c:	e28d0010 	add	r0, sp, #16
   2ed60:	e5c4583a 	strb	r5, [r4, #2106]	; 0x83a
   2ed64:	e5c45858 	strb	r5, [r4, #2136]	; 0x858
   2ed68:	e5834000 	str	r4, [r3]
   2ed6c:	ebfff6f4 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2ed70:	e1a02004 	mov	r2, r4
   2ed74:	e3a01001 	mov	r1, #1
   2ed78:	e3401005 	movt	r1, #5
   2ed7c:	e28d0010 	add	r0, sp, #16
   2ed80:	e58d5000 	str	r5, [sp]
   2ed84:	e300380c 	movw	r3, #2060	; 0x80c
   2ed88:	ebfff73f 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2ed8c:	e1500005 	cmp	r0, r5
   2ed90:	0a000027 	beq	2ee34 <CKernelOptions::CKernelOptions()+0x160>
   2ed94:	e5943008 	ldr	r3, [r4, #8]
   2ed98:	e3530b02 	cmp	r3, #2048	; 0x800
   2ed9c:	2a000024 	bcs	2ee34 <CKernelOptions::CKernelOptions()+0x160>
   2eda0:	e0843003 	add	r3, r4, r3
   2eda4:	e3026870 	movw	r6, #10352	; 0x2870
   2eda8:	e3406004 	movt	r6, #4
   2edac:	e3028878 	movw	r8, #10360	; 0x2878
   2edb0:	e3408004 	movt	r8, #4
   2edb4:	e5c3500c 	strb	r5, [r3, #12]
   2edb8:	e284300c 	add	r3, r4, #12
   2edbc:	e584380c 	str	r3, [r4, #2060]	; 0x80c
   2edc0:	e1a00004 	mov	r0, r4
   2edc4:	ebffff2e 	bl	2ea84 <CKernelOptions::GetToken()>
   2edc8:	e250a000 	subs	sl, r0, #0
   2edcc:	0a000018 	beq	2ee34 <CKernelOptions::CKernelOptions()+0x160>
   2edd0:	e1da30d0 	ldrsb	r3, [sl]
   2edd4:	e3530000 	cmp	r3, #0
   2edd8:	11a0100a 	movne	r1, sl
   2eddc:	1a000003 	bne	2edf0 <CKernelOptions::CKernelOptions()+0x11c>
   2ede0:	ea000018 	b	2ee48 <CKernelOptions::CKernelOptions()+0x174>
   2ede4:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2ede8:	e3530000 	cmp	r3, #0
   2edec:	0a000015 	beq	2ee48 <CKernelOptions::CKernelOptions()+0x174>
   2edf0:	e353003d 	cmp	r3, #61	; 0x3d
   2edf4:	1afffffa 	bne	2ede4 <CKernelOptions::CKernelOptions()+0x110>
   2edf8:	e1a0b001 	mov	fp, r1
   2edfc:	e4cb5001 	strb	r5, [fp], #1
   2ee00:	e1a01006 	mov	r1, r6
   2ee04:	e1a0000a 	mov	r0, sl
   2ee08:	eb001b9b 	bl	35c7c <strcmp>
   2ee0c:	e3500000 	cmp	r0, #0
   2ee10:	1a00000e 	bne	2ee50 <CKernelOptions::CKernelOptions()+0x17c>
   2ee14:	e1a0000b 	mov	r0, fp
   2ee18:	ebffff47 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2ee1c:	e3700001 	cmn	r0, #1
   2ee20:	15840810 	strne	r0, [r4, #2064]	; 0x810
   2ee24:	e1a00004 	mov	r0, r4
   2ee28:	ebffff15 	bl	2ea84 <CKernelOptions::GetToken()>
   2ee2c:	e250a000 	subs	sl, r0, #0
   2ee30:	1affffe6 	bne	2edd0 <CKernelOptions::CKernelOptions()+0xfc>
   2ee34:	e28d0010 	add	r0, sp, #16
   2ee38:	ebfff6c8 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   2ee3c:	e1a00004 	mov	r0, r4
   2ee40:	e28dd01c 	add	sp, sp, #28
   2ee44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee48:	e1a0b003 	mov	fp, r3
   2ee4c:	eaffffeb 	b	2ee00 <CKernelOptions::CKernelOptions()+0x12c>
   2ee50:	e1a01008 	mov	r1, r8
   2ee54:	e1a0000a 	mov	r0, sl
   2ee58:	eb001b87 	bl	35c7c <strcmp>
   2ee5c:	e3500000 	cmp	r0, #0
   2ee60:	1a000004 	bne	2ee78 <CKernelOptions::CKernelOptions()+0x1a4>
   2ee64:	e1a0000b 	mov	r0, fp
   2ee68:	ebffff33 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2ee6c:	e3700001 	cmn	r0, #1
   2ee70:	15840814 	strne	r0, [r4, #2068]	; 0x814
   2ee74:	eaffffd1 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2ee78:	e1a0000a 	mov	r0, sl
   2ee7c:	e3021880 	movw	r1, #10368	; 0x2880
   2ee80:	e3401004 	movt	r1, #4
   2ee84:	eb001b7c 	bl	35c7c <strcmp>
   2ee88:	e2503000 	subs	r3, r0, #0
   2ee8c:	e58d300c 	str	r3, [sp, #12]
   2ee90:	0a00000a 	beq	2eec0 <CKernelOptions::CKernelOptions()+0x1ec>
   2ee94:	e1a0000a 	mov	r0, sl
   2ee98:	e3021888 	movw	r1, #10376	; 0x2888
   2ee9c:	e3401004 	movt	r1, #4
   2eea0:	eb001b75 	bl	35c7c <strcmp>
   2eea4:	e3500000 	cmp	r0, #0
   2eea8:	1a00000b 	bne	2eedc <CKernelOptions::CKernelOptions()+0x208>
   2eeac:	e1a0000b 	mov	r0, fp
   2eeb0:	ebffff21 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2eeb4:	e3500004 	cmp	r0, #4
   2eeb8:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   2eebc:	eaffffbf 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2eec0:	e1a0100b 	mov	r1, fp
   2eec4:	e3a02013 	mov	r2, #19
   2eec8:	e1a00007 	mov	r0, r7
   2eecc:	eb001c0f 	bl	35f10 <strncpy>
   2eed0:	e59d300c 	ldr	r3, [sp, #12]
   2eed4:	e5c4382b 	strb	r3, [r4, #2091]	; 0x82b
   2eed8:	eaffffb8 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2eedc:	e1a0000a 	mov	r0, sl
   2eee0:	e3021894 	movw	r1, #10388	; 0x2894
   2eee4:	e3401004 	movt	r1, #4
   2eee8:	eb001b63 	bl	35c7c <strcmp>
   2eeec:	e2503000 	subs	r3, r0, #0
   2eef0:	e58d300c 	str	r3, [sp, #12]
   2eef4:	0a00000c 	beq	2ef2c <CKernelOptions::CKernelOptions()+0x258>
   2eef8:	e1a0000a 	mov	r0, sl
   2eefc:	e302189c 	movw	r1, #10396	; 0x289c
   2ef00:	e3401004 	movt	r1, #4
   2ef04:	eb001b5c 	bl	35c7c <strcmp>
   2ef08:	e3500000 	cmp	r0, #0
   2ef0c:	1a00000d 	bne	2ef48 <CKernelOptions::CKernelOptions()+0x274>
   2ef10:	e1a0000b 	mov	r0, fp
   2ef14:	ebffff08 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2ef18:	e24010c8 	sub	r1, r0, #200	; 0xc8
   2ef1c:	e3012e78 	movw	r2, #7800	; 0x1e78
   2ef20:	e1510002 	cmp	r1, r2
   2ef24:	95840834 	strls	r0, [r4, #2100]	; 0x834
   2ef28:	eaffffa4 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2ef2c:	e1a0100b 	mov	r1, fp
   2ef30:	e3a02002 	mov	r2, #2
   2ef34:	e1a00009 	mov	r0, r9
   2ef38:	eb001bf4 	bl	35f10 <strncpy>
   2ef3c:	e59d300c 	ldr	r3, [sp, #12]
   2ef40:	e5c43832 	strb	r3, [r4, #2098]	; 0x832
   2ef44:	eaffff9d 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2ef48:	e1a0000a 	mov	r0, sl
   2ef4c:	e30218ac 	movw	r1, #10412	; 0x28ac
   2ef50:	e3401004 	movt	r1, #4
   2ef54:	eb001b48 	bl	35c7c <strcmp>
   2ef58:	e3500000 	cmp	r0, #0
   2ef5c:	1a000007 	bne	2ef80 <CKernelOptions::CKernelOptions()+0x2ac>
   2ef60:	e1a0000b 	mov	r0, fp
   2ef64:	e30218b8 	movw	r1, #10424	; 0x28b8
   2ef68:	e3401004 	movt	r1, #4
   2ef6c:	eb001b42 	bl	35c7c <strcmp>
   2ef70:	e3500000 	cmp	r0, #0
   2ef74:	03a03001 	moveq	r3, #1
   2ef78:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
   2ef7c:	eaffff8f 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2ef80:	e1a0000a 	mov	r0, sl
   2ef84:	e30218c0 	movw	r1, #10432	; 0x28c0
   2ef88:	e3401004 	movt	r1, #4
   2ef8c:	eb001b3a 	bl	35c7c <strcmp>
   2ef90:	e3500000 	cmp	r0, #0
   2ef94:	1a000007 	bne	2efb8 <CKernelOptions::CKernelOptions()+0x2e4>
   2ef98:	e1a0000b 	mov	r0, fp
   2ef9c:	e30218cc 	movw	r1, #10444	; 0x28cc
   2efa0:	e3401004 	movt	r1, #4
   2efa4:	eb001b34 	bl	35c7c <strcmp>
   2efa8:	e3500000 	cmp	r0, #0
   2efac:	03a03001 	moveq	r3, #1
   2efb0:	05c43839 	strbeq	r3, [r4, #2105]	; 0x839
   2efb4:	eaffff81 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2efb8:	e1a0000a 	mov	r0, sl
   2efbc:	e30218d4 	movw	r1, #10452	; 0x28d4
   2efc0:	e3401004 	movt	r1, #4
   2efc4:	eb001b2c 	bl	35c7c <strcmp>
   2efc8:	e2503000 	subs	r3, r0, #0
   2efcc:	e58d300c 	str	r3, [sp, #12]
   2efd0:	1a000007 	bne	2eff4 <CKernelOptions::CKernelOptions()+0x320>
   2efd4:	e2840e83 	add	r0, r4, #2096	; 0x830
   2efd8:	e1a0100b 	mov	r1, fp
   2efdc:	e280000a 	add	r0, r0, #10
   2efe0:	e3a02013 	mov	r2, #19
   2efe4:	eb001bc9 	bl	35f10 <strncpy>
   2efe8:	e59d300c 	ldr	r3, [sp, #12]
   2efec:	e5c4384d 	strb	r3, [r4, #2125]	; 0x84d
   2eff0:	eaffff72 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2eff4:	e1a0000a 	mov	r0, sl
   2eff8:	e30218e0 	movw	r1, #10464	; 0x28e0
   2effc:	e3401004 	movt	r1, #4
   2f000:	eb001b1d 	bl	35c7c <strcmp>
   2f004:	e3500000 	cmp	r0, #0
   2f008:	1a000007 	bne	2f02c <CKernelOptions::CKernelOptions()+0x358>
   2f00c:	e1a0000b 	mov	r0, fp
   2f010:	e3a02002 	mov	r2, #2
   2f014:	e2841e85 	add	r1, r4, #2128	; 0x850
   2f018:	ebfffef8 	bl	2ec00 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   2f01c:	e2503000 	subs	r3, r0, #0
   2f020:	05843850 	streq	r3, [r4, #2128]	; 0x850
   2f024:	05843854 	streq	r3, [r4, #2132]	; 0x854
   2f028:	eaffff64 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f02c:	e1a0000a 	mov	r0, sl
   2f030:	e30218f4 	movw	r1, #10484	; 0x28f4
   2f034:	e3401004 	movt	r1, #4
   2f038:	eb001b0f 	bl	35c7c <strcmp>
   2f03c:	e2503000 	subs	r3, r0, #0
   2f040:	e58d300c 	str	r3, [sp, #12]
   2f044:	1a000007 	bne	2f068 <CKernelOptions::CKernelOptions()+0x394>
   2f048:	e2840e85 	add	r0, r4, #2128	; 0x850
   2f04c:	e1a0100b 	mov	r1, fp
   2f050:	e2800008 	add	r0, r0, #8
   2f054:	e3a02013 	mov	r2, #19
   2f058:	eb001bac 	bl	35f10 <strncpy>
   2f05c:	e59d300c 	ldr	r3, [sp, #12]
   2f060:	e5c4386b 	strb	r3, [r4, #2155]	; 0x86b
   2f064:	eaffff55 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f068:	e1a0000a 	mov	r0, sl
   2f06c:	e3021900 	movw	r1, #10496	; 0x2900
   2f070:	e3401004 	movt	r1, #4
   2f074:	eb001b00 	bl	35c7c <strcmp>
   2f078:	e3500000 	cmp	r0, #0
   2f07c:	1a00000b 	bne	2f0b0 <CKernelOptions::CKernelOptions()+0x3dc>
   2f080:	e1a0000b 	mov	r0, fp
   2f084:	ebfffeac 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2f088:	e3700001 	cmn	r0, #1
   2f08c:	0affff4b 	beq	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f090:	e3500018 	cmp	r0, #24
   2f094:	8affff49 	bhi	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f098:	e3a02007 	mov	r2, #7
   2f09c:	e3402101 	movt	r2, #257	; 0x101
   2f0a0:	e1a02032 	lsr	r2, r2, r0
   2f0a4:	e3120001 	tst	r2, #1
   2f0a8:	1584086c 	strne	r0, [r4, #2156]	; 0x86c
   2f0ac:	eaffff43 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f0b0:	e1a0000a 	mov	r0, sl
   2f0b4:	e302190c 	movw	r1, #10508	; 0x290c
   2f0b8:	e3401004 	movt	r1, #4
   2f0bc:	eb001aee 	bl	35c7c <strcmp>
   2f0c0:	e3500000 	cmp	r0, #0
   2f0c4:	1a000007 	bne	2f0e8 <CKernelOptions::CKernelOptions()+0x414>
   2f0c8:	e1a0000b 	mov	r0, fp
   2f0cc:	e30218cc 	movw	r1, #10444	; 0x28cc
   2f0d0:	e3401004 	movt	r1, #4
   2f0d4:	eb001ae8 	bl	35c7c <strcmp>
   2f0d8:	e3500000 	cmp	r0, #0
   2f0dc:	03a03001 	moveq	r3, #1
   2f0e0:	05c43870 	strbeq	r3, [r4, #2160]	; 0x870
   2f0e4:	eaffff35 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f0e8:	e1a0000a 	mov	r0, sl
   2f0ec:	e3021914 	movw	r1, #10516	; 0x2914
   2f0f0:	e3401004 	movt	r1, #4
   2f0f4:	eb001ae0 	bl	35c7c <strcmp>
   2f0f8:	e3500000 	cmp	r0, #0
   2f0fc:	1a000005 	bne	2f118 <CKernelOptions::CKernelOptions()+0x444>
   2f100:	e1a0000b 	mov	r0, fp
   2f104:	ebfffe8c 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2f108:	e2402028 	sub	r2, r0, #40	; 0x28
   2f10c:	e3520026 	cmp	r2, #38	; 0x26
   2f110:	95840874 	strls	r0, [r4, #2164]	; 0x874
   2f114:	eaffff29 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f118:	e1a0000a 	mov	r0, sl
   2f11c:	e3021920 	movw	r1, #10528	; 0x2920
   2f120:	e3401004 	movt	r1, #4
   2f124:	eb001ad4 	bl	35c7c <strcmp>
   2f128:	e3500000 	cmp	r0, #0
   2f12c:	1a000005 	bne	2f148 <CKernelOptions::CKernelOptions()+0x474>
   2f130:	e1a0000b 	mov	r0, fp
   2f134:	ebfffe80 	bl	2eb3c <CKernelOptions::GetDecimal(char const*)>
   2f138:	e2402002 	sub	r2, r0, #2
   2f13c:	e3520019 	cmp	r2, #25
   2f140:	95840878 	strls	r0, [r4, #2168]	; 0x878
   2f144:	eaffff1d 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f148:	e1a0000a 	mov	r0, sl
   2f14c:	e302192c 	movw	r1, #10540	; 0x292c
   2f150:	e3401004 	movt	r1, #4
   2f154:	eb001ac8 	bl	35c7c <strcmp>
   2f158:	e3500000 	cmp	r0, #0
   2f15c:	1a000005 	bne	2f178 <CKernelOptions::CKernelOptions()+0x4a4>
   2f160:	e1a0000b 	mov	r0, fp
   2f164:	e3a02004 	mov	r2, #4
   2f168:	e2841d22 	add	r1, r4, #2176	; 0x880
   2f16c:	ebfffea3 	bl	2ec00 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   2f170:	e5c4087c 	strb	r0, [r4, #2172]	; 0x87c
   2f174:	eaffff11 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>
   2f178:	e3a0000c 	mov	r0, #12
   2f17c:	eb001ec6 	bl	36c9c <operator new(unsigned int)>
   2f180:	e58d000c 	str	r0, [sp, #12]
   2f184:	e1a0000a 	mov	r0, sl
   2f188:	eb001ab1 	bl	35c54 <strlen>
   2f18c:	e2800001 	add	r0, r0, #1
   2f190:	eb001ec7 	bl	36cb4 <operator new[](unsigned int)>
   2f194:	e59d300c 	ldr	r3, [sp, #12]
   2f198:	e1a0100a 	mov	r1, sl
   2f19c:	e5830004 	str	r0, [r3, #4]
   2f1a0:	eb001b4f 	bl	35ee4 <strcpy>
   2f1a4:	e1a0000b 	mov	r0, fp
   2f1a8:	eb001aa9 	bl	35c54 <strlen>
   2f1ac:	e2800001 	add	r0, r0, #1
   2f1b0:	eb001ebf 	bl	36cb4 <operator new[](unsigned int)>
   2f1b4:	e59da00c 	ldr	sl, [sp, #12]
   2f1b8:	e1a0100b 	mov	r1, fp
   2f1bc:	e58a0008 	str	r0, [sl, #8]
   2f1c0:	eb001b47 	bl	35ee4 <strcpy>
   2f1c4:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
   2f1c8:	e58a3000 	str	r3, [sl]
   2f1cc:	e584a890 	str	sl, [r4, #2192]	; 0x890
   2f1d0:	eafffefa 	b	2edc0 <CKernelOptions::CKernelOptions()+0xec>

0002f1d4 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   2f1d4:	e92d4010 	push	{r4, lr}
   2f1d8:	e1a04000 	mov	r4, r0
   2f1dc:	e3a0c000 	mov	ip, #0
   2f1e0:	e8800006 	stm	r0, {r1, r2}
   2f1e4:	e3a02001 	mov	r2, #1
   2f1e8:	e5c43008 	strb	r3, [r4, #8]
   2f1ec:	e3a00901 	mov	r0, #16384	; 0x4000
   2f1f0:	e584c00c 	str	ip, [r4, #12]
   2f1f4:	e584c010 	str	ip, [r4, #16]
   2f1f8:	e584c014 	str	ip, [r4, #20]
   2f1fc:	e584c018 	str	ip, [r4, #24]
   2f200:	e584201c 	str	r2, [r4, #28]
   2f204:	e584c0e8 	str	ip, [r4, #232]	; 0xe8
   2f208:	e584c0ec 	str	ip, [r4, #236]	; 0xec
   2f20c:	e58420f0 	str	r2, [r4, #240]	; 0xf0
   2f210:	e584c0f4 	str	ip, [r4, #244]	; 0xf4
   2f214:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
   2f218:	eb001ea5 	bl	36cb4 <operator new[](unsigned int)>
   2f21c:	e3043f4c 	movw	r3, #20300	; 0x4f4c
   2f220:	e3403004 	movt	r3, #4
   2f224:	e5840010 	str	r0, [r4, #16]
   2f228:	e1a00004 	mov	r0, r4
   2f22c:	e5834000 	str	r4, [r3]
   2f230:	e8bd8010 	pop	{r4, pc}

0002f234 <CLogger::~CLogger()>:
   2f234:	e3042f4c 	movw	r2, #20300	; 0x4f4c
   2f238:	e3402004 	movt	r2, #4
   2f23c:	e92d4010 	push	{r4, lr}
   2f240:	e3a01000 	mov	r1, #0
   2f244:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
   2f248:	e590c0e8 	ldr	ip, [r0, #232]	; 0xe8
   2f24c:	e1a04000 	mov	r4, r0
   2f250:	e5821000 	str	r1, [r2]
   2f254:	ea00000a 	b	2f284 <CLogger::~CLogger()+0x50>
   2f258:	e7940102 	ldr	r0, [r4, r2, lsl #2]
   2f25c:	e3500000 	cmp	r0, #0
   2f260:	0a000002 	beq	2f270 <CLogger::~CLogger()+0x3c>
   2f264:	eb001ea4 	bl	36cfc <operator delete(void*, unsigned int)>
   2f268:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   2f26c:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   2f270:	e2833001 	add	r3, r3, #1
   2f274:	e58430ec 	str	r3, [r4, #236]	; 0xec
   2f278:	e3530032 	cmp	r3, #50	; 0x32
   2f27c:	03a03000 	moveq	r3, #0
   2f280:	058430ec 	streq	r3, [r4, #236]	; 0xec
   2f284:	e2832008 	add	r2, r3, #8
   2f288:	e3a01f42 	mov	r1, #264	; 0x108
   2f28c:	e153000c 	cmp	r3, ip
   2f290:	1afffff0 	bne	2f258 <CLogger::~CLogger()+0x24>
   2f294:	e5940010 	ldr	r0, [r4, #16]
   2f298:	e3500000 	cmp	r0, #0
   2f29c:	0a000000 	beq	2f2a4 <CLogger::~CLogger()+0x70>
   2f2a0:	eb001e8f 	bl	36ce4 <operator delete[](void*)>
   2f2a4:	e1a00004 	mov	r0, r4
   2f2a8:	e8bd8010 	pop	{r4, pc}

0002f2ac <CLogger::SetNewTarget(CDevice*)>:
   2f2ac:	e580100c 	str	r1, [r0, #12]
   2f2b0:	e12fff1e 	bx	lr

0002f2b4 <CLogger::Get()>:
   2f2b4:	e92d4070 	push	{r4, r5, r6, lr}
   2f2b8:	e3045f4c 	movw	r5, #20300	; 0x4f4c
   2f2bc:	e3405004 	movt	r5, #4
   2f2c0:	e5954000 	ldr	r4, [r5]
   2f2c4:	e3540000 	cmp	r4, #0
   2f2c8:	0a000001 	beq	2f2d4 <CLogger::Get()+0x20>
   2f2cc:	e1a00004 	mov	r0, r4
   2f2d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f2d4:	e3a000fc 	mov	r0, #252	; 0xfc
   2f2d8:	eb001e6f 	bl	36c9c <operator new(unsigned int)>
   2f2dc:	e1a04000 	mov	r4, r0
   2f2e0:	e3a03000 	mov	r3, #0
   2f2e4:	e3a02001 	mov	r2, #1
   2f2e8:	e3a00901 	mov	r0, #16384	; 0x4000
   2f2ec:	e5843000 	str	r3, [r4]
   2f2f0:	e5843004 	str	r3, [r4, #4]
   2f2f4:	e5c42008 	strb	r2, [r4, #8]
   2f2f8:	e584300c 	str	r3, [r4, #12]
   2f2fc:	e5843010 	str	r3, [r4, #16]
   2f300:	e5843014 	str	r3, [r4, #20]
   2f304:	e5843018 	str	r3, [r4, #24]
   2f308:	e584201c 	str	r2, [r4, #28]
   2f30c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   2f310:	e58430ec 	str	r3, [r4, #236]	; 0xec
   2f314:	e58420f0 	str	r2, [r4, #240]	; 0xf0
   2f318:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   2f31c:	e58430f8 	str	r3, [r4, #248]	; 0xf8
   2f320:	eb001e63 	bl	36cb4 <operator new[](unsigned int)>
   2f324:	e5854000 	str	r4, [r5]
   2f328:	e5840010 	str	r0, [r4, #16]
   2f32c:	e1a00004 	mov	r0, r4
   2f330:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f334 <CLogger::Write(char const*)>:
   2f334:	e92d4070 	push	{r4, r5, r6, lr}
   2f338:	e1a04000 	mov	r4, r0
   2f33c:	e1a00001 	mov	r0, r1
   2f340:	e1a05001 	mov	r5, r1
   2f344:	eb001a42 	bl	35c54 <strlen>
   2f348:	e1a06000 	mov	r6, r0
   2f34c:	e594000c 	ldr	r0, [r4, #12]
   2f350:	e3500000 	cmp	r0, #0
   2f354:	0a000004 	beq	2f36c <CLogger::Write(char const*)+0x38>
   2f358:	e5903000 	ldr	r3, [r0]
   2f35c:	e1a02006 	mov	r2, r6
   2f360:	e1a01005 	mov	r1, r5
   2f364:	e593300c 	ldr	r3, [r3, #12]
   2f368:	e12fff33 	blx	r3
   2f36c:	e594001c 	ldr	r0, [r4, #28]
   2f370:	e3500000 	cmp	r0, #0
   2f374:	1a000024 	bne	2f40c <CLogger::Write(char const*)+0xd8>
   2f378:	e3560000 	cmp	r6, #0
   2f37c:	e246c001 	sub	ip, r6, #1
   2f380:	08bd8070 	popeq	{r4, r5, r6, pc}
   2f384:	e1a02005 	mov	r2, r5
   2f388:	ea000003 	b	2f39c <CLogger::Write(char const*)+0x68>
   2f38c:	e2623001 	rsb	r3, r2, #1
   2f390:	e0853003 	add	r3, r5, r3
   2f394:	e173000c 	cmn	r3, ip
   2f398:	0a000016 	beq	2f3f8 <CLogger::Write(char const*)+0xc4>
   2f39c:	e0d230d1 	ldrsb	r3, [r2], #1
   2f3a0:	e353000d 	cmp	r3, #13
   2f3a4:	0afffff8 	beq	2f38c <CLogger::Write(char const*)+0x58>
   2f3a8:	e5941014 	ldr	r1, [r4, #20]
   2f3ac:	e5940010 	ldr	r0, [r4, #16]
   2f3b0:	e7c03001 	strb	r3, [r0, r1]
   2f3b4:	e5943014 	ldr	r3, [r4, #20]
   2f3b8:	e5940018 	ldr	r0, [r4, #24]
   2f3bc:	e2833001 	add	r3, r3, #1
   2f3c0:	e7ed3053 	ubfx	r3, r3, #0, #14
   2f3c4:	e5843014 	str	r3, [r4, #20]
   2f3c8:	e1530000 	cmp	r3, r0
   2f3cc:	1affffee 	bne	2f38c <CLogger::Write(char const*)+0x58>
   2f3d0:	e5d40008 	ldrb	r0, [r4, #8]
   2f3d4:	e2831001 	add	r1, r3, #1
   2f3d8:	e3500000 	cmp	r0, #0
   2f3dc:	0a00000f 	beq	2f420 <CLogger::Write(char const*)+0xec>
   2f3e0:	e2623001 	rsb	r3, r2, #1
   2f3e4:	e7ed1051 	ubfx	r1, r1, #0, #14
   2f3e8:	e0853003 	add	r3, r5, r3
   2f3ec:	e5841018 	str	r1, [r4, #24]
   2f3f0:	e173000c 	cmn	r3, ip
   2f3f4:	1affffe8 	bne	2f39c <CLogger::Write(char const*)+0x68>
   2f3f8:	e594301c 	ldr	r3, [r4, #28]
   2f3fc:	e3530000 	cmp	r3, #0
   2f400:	08bd8070 	popeq	{r4, r5, r6, pc}
   2f404:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f408:	ea002466 	b	385a8 <LeaveCritical>
   2f40c:	eb00243a 	bl	384fc <EnterCritical>
   2f410:	e246c001 	sub	ip, r6, #1
   2f414:	e3560000 	cmp	r6, #0
   2f418:	1affffd9 	bne	2f384 <CLogger::Write(char const*)+0x50>
   2f41c:	eafffff5 	b	2f3f8 <CLogger::Write(char const*)+0xc4>
   2f420:	e2433001 	sub	r3, r3, #1
   2f424:	e7ed3053 	ubfx	r3, r3, #0, #14
   2f428:	e5843014 	str	r3, [r4, #20]
   2f42c:	eafffff1 	b	2f3f8 <CLogger::Write(char const*)+0xc4>

0002f430 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   2f430:	e92d4070 	push	{r4, r5, r6, lr}
   2f434:	e1a05003 	mov	r5, r3
   2f438:	e5903000 	ldr	r3, [r0]
   2f43c:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   2f440:	e1520003 	cmp	r2, r3
   2f444:	8a000012 	bhi	2f494 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   2f448:	e3a03000 	mov	r3, #0
   2f44c:	e1a04000 	mov	r4, r0
   2f450:	e3520000 	cmp	r2, #0
   2f454:	e5cd3000 	strb	r3, [sp]
   2f458:	0a00000f 	beq	2f49c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   2f45c:	e1a0000d 	mov	r0, sp
   2f460:	eb001ab7 	bl	35f44 <strcat>
   2f464:	e59f1098 	ldr	r1, [pc, #152]	; 2f504 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   2f468:	e1a0000d 	mov	r0, sp
   2f46c:	eb001ab4 	bl	35f44 <strcat>
   2f470:	e1a01005 	mov	r1, r5
   2f474:	e1a0000d 	mov	r0, sp
   2f478:	eb001ab1 	bl	35f44 <strcat>
   2f47c:	e59f1084 	ldr	r1, [pc, #132]	; 2f508 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   2f480:	e1a0000d 	mov	r0, sp
   2f484:	eb001aae 	bl	35f44 <strcat>
   2f488:	e1a0100d 	mov	r1, sp
   2f48c:	e1a00004 	mov	r0, r4
   2f490:	ebffffa7 	bl	2f334 <CLogger::Write(char const*)>
   2f494:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   2f498:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f49c:	e1a06001 	mov	r6, r1
   2f4a0:	e1a0000d 	mov	r0, sp
   2f4a4:	e302193c 	movw	r1, #10556	; 0x293c
   2f4a8:	e3401004 	movt	r1, #4
   2f4ac:	eb001a8c 	bl	35ee4 <strcpy>
   2f4b0:	e1a01006 	mov	r1, r6
   2f4b4:	e1a0000d 	mov	r0, sp
   2f4b8:	eb001aa1 	bl	35f44 <strcat>
   2f4bc:	e59f1040 	ldr	r1, [pc, #64]	; 2f504 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   2f4c0:	e1a0000d 	mov	r0, sp
   2f4c4:	eb001a9e 	bl	35f44 <strcat>
   2f4c8:	e1a01005 	mov	r1, r5
   2f4cc:	e1a0000d 	mov	r0, sp
   2f4d0:	eb001a9b 	bl	35f44 <strcat>
   2f4d4:	e59f1030 	ldr	r1, [pc, #48]	; 2f50c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   2f4d8:	e1a0000d 	mov	r0, sp
   2f4dc:	eb001a98 	bl	35f44 <strcat>
   2f4e0:	e59f1020 	ldr	r1, [pc, #32]	; 2f508 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   2f4e4:	e1a0000d 	mov	r0, sp
   2f4e8:	eb001a95 	bl	35f44 <strcat>
   2f4ec:	e1a0100d 	mov	r1, sp
   2f4f0:	e1a00004 	mov	r0, r4
   2f4f4:	ebffff8e 	bl	2f334 <CLogger::Write(char const*)>
   2f4f8:	e3a000ff 	mov	r0, #255	; 0xff
   2f4fc:	eb0015f0 	bl	34cc4 <set_qemu_exit_status>
   2f500:	eb0015f0 	bl	34cc8 <halt>
   2f504:	00042944 	.word	0x00042944
   2f508:	00042950 	.word	0x00042950
   2f50c:	00042948 	.word	0x00042948

0002f510 <CLogger::Read(void*, unsigned int, bool)>:
   2f510:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f514:	e1a04000 	mov	r4, r0
   2f518:	e590001c 	ldr	r0, [r0, #28]
   2f51c:	e1a05001 	mov	r5, r1
   2f520:	e1a07002 	mov	r7, r2
   2f524:	e1a08003 	mov	r8, r3
   2f528:	e3500000 	cmp	r0, #0
   2f52c:	1a00001a 	bne	2f59c <CLogger::Read(void*, unsigned int, bool)+0x8c>
   2f530:	e594c018 	ldr	ip, [r4, #24]
   2f534:	e5943014 	ldr	r3, [r4, #20]
   2f538:	e153000c 	cmp	r3, ip
   2f53c:	0a00001f 	beq	2f5c0 <CLogger::Read(void*, unsigned int, bool)+0xb0>
   2f540:	e1a09007 	mov	r9, r7
   2f544:	e3a0e000 	mov	lr, #0
   2f548:	ea000007 	b	2f56c <CLogger::Read(void*, unsigned int, bool)+0x5c>
   2f54c:	e5946010 	ldr	r6, [r4, #16]
   2f550:	e28ee001 	add	lr, lr, #1
   2f554:	e19660dc 	ldrsb	r6, [r6, ip]
   2f558:	e7edc051 	ubfx	ip, r1, #0, #14
   2f55c:	e4c56001 	strb	r6, [r5], #1
   2f560:	e5941014 	ldr	r1, [r4, #20]
   2f564:	e151000c 	cmp	r1, ip
   2f568:	0a000009 	beq	2f594 <CLogger::Read(void*, unsigned int, bool)+0x84>
   2f56c:	e28c1001 	add	r1, ip, #1
   2f570:	e15e0007 	cmp	lr, r7
   2f574:	1afffff4 	bne	2f54c <CLogger::Read(void*, unsigned int, bool)+0x3c>
   2f578:	e594301c 	ldr	r3, [r4, #28]
   2f57c:	e3580000 	cmp	r8, #0
   2f580:	1584c018 	strne	ip, [r4, #24]
   2f584:	e3530000 	cmp	r3, #0
   2f588:	1a00000e 	bne	2f5c8 <CLogger::Read(void*, unsigned int, bool)+0xb8>
   2f58c:	e1a00009 	mov	r0, r9
   2f590:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f594:	e1a0900e 	mov	r9, lr
   2f598:	eafffff6 	b	2f578 <CLogger::Read(void*, unsigned int, bool)+0x68>
   2f59c:	eb0023d6 	bl	384fc <EnterCritical>
   2f5a0:	e594c018 	ldr	ip, [r4, #24]
   2f5a4:	e5943014 	ldr	r3, [r4, #20]
   2f5a8:	e153000c 	cmp	r3, ip
   2f5ac:	1affffe3 	bne	2f540 <CLogger::Read(void*, unsigned int, bool)+0x30>
   2f5b0:	e594301c 	ldr	r3, [r4, #28]
   2f5b4:	e3530000 	cmp	r3, #0
   2f5b8:	0a000000 	beq	2f5c0 <CLogger::Read(void*, unsigned int, bool)+0xb0>
   2f5bc:	eb0023f9 	bl	385a8 <LeaveCritical>
   2f5c0:	e3e09000 	mvn	r9, #0
   2f5c4:	eafffff0 	b	2f58c <CLogger::Read(void*, unsigned int, bool)+0x7c>
   2f5c8:	eb0023f6 	bl	385a8 <LeaveCritical>
   2f5cc:	e1a00009 	mov	r0, r9
   2f5d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002f5d4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   2f5d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f5d8:	e1a05000 	mov	r5, r0
   2f5dc:	e3a00f42 	mov	r0, #264	; 0x108
   2f5e0:	e24dd008 	sub	sp, sp, #8
   2f5e4:	e1a06003 	mov	r6, r3
   2f5e8:	e1a07002 	mov	r7, r2
   2f5ec:	e1a08001 	mov	r8, r1
   2f5f0:	eb001da9 	bl	36c9c <operator new(unsigned int)>
   2f5f4:	e1a04000 	mov	r4, r0
   2f5f8:	e1a01008 	mov	r1, r8
   2f5fc:	e3a02032 	mov	r2, #50	; 0x32
   2f600:	e4c07001 	strb	r7, [r0], #1
   2f604:	eb001a41 	bl	35f10 <strncpy>
   2f608:	e1a01006 	mov	r1, r6
   2f60c:	e3a020c8 	mov	r2, #200	; 0xc8
   2f610:	e3a06000 	mov	r6, #0
   2f614:	e2840033 	add	r0, r4, #51	; 0x33
   2f618:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   2f61c:	eb001a3b 	bl	35f10 <strncpy>
   2f620:	e5950004 	ldr	r0, [r5, #4]
   2f624:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   2f628:	e1500006 	cmp	r0, r6
   2f62c:	0a000004 	beq	2f644 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   2f630:	e28d2004 	add	r2, sp, #4
   2f634:	e1a0100d 	mov	r1, sp
   2f638:	eb00168a 	bl	35068 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   2f63c:	e1500006 	cmp	r0, r6
   2f640:	1a000038 	bne	2f728 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   2f644:	e3a03000 	mov	r3, #0
   2f648:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   2f64c:	e1a00003 	mov	r0, r3
   2f650:	e5843100 	str	r3, [r4, #256]	; 0x100
   2f654:	e59520f0 	ldr	r2, [r5, #240]	; 0xf0
   2f658:	e5840104 	str	r0, [r4, #260]	; 0x104
   2f65c:	e3520000 	cmp	r2, #0
   2f660:	1a00002c 	bne	2f718 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x144>
   2f664:	e59530e8 	ldr	r3, [r5, #232]	; 0xe8
   2f668:	e3530031 	cmp	r3, #49	; 0x31
   2f66c:	e2831001 	add	r1, r3, #1
   2f670:	e0850103 	add	r0, r5, r3, lsl #2
   2f674:	e5804020 	str	r4, [r0, #32]
   2f678:	0a00001a 	beq	2f6e8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
   2f67c:	e595c0ec 	ldr	ip, [r5, #236]	; 0xec
   2f680:	e58510e8 	str	r1, [r5, #232]	; 0xe8
   2f684:	e151000c 	cmp	r1, ip
   2f688:	0a000007 	beq	2f6ac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
   2f68c:	e3520000 	cmp	r2, #0
   2f690:	1a000012 	bne	2f6e0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
   2f694:	e59530f4 	ldr	r3, [r5, #244]	; 0xf4
   2f698:	e3530000 	cmp	r3, #0
   2f69c:	0a000000 	beq	2f6a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   2f6a0:	e12fff33 	blx	r3
   2f6a4:	e28dd008 	add	sp, sp, #8
   2f6a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2f6ac:	e3530030 	cmp	r3, #48	; 0x30
   2f6b0:	e5904024 	ldr	r4, [r0, #36]	; 0x24
   2f6b4:	12833002 	addne	r3, r3, #2
   2f6b8:	03a03000 	moveq	r3, #0
   2f6bc:	e3520000 	cmp	r2, #0
   2f6c0:	e58530ec 	str	r3, [r5, #236]	; 0xec
   2f6c4:	1a000011 	bne	2f710 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x13c>
   2f6c8:	e3540000 	cmp	r4, #0
   2f6cc:	0afffff0 	beq	2f694 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   2f6d0:	e3a01f42 	mov	r1, #264	; 0x108
   2f6d4:	e1a00004 	mov	r0, r4
   2f6d8:	eb001d87 	bl	36cfc <operator delete(void*, unsigned int)>
   2f6dc:	eaffffec 	b	2f694 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   2f6e0:	eb0023b0 	bl	385a8 <LeaveCritical>
   2f6e4:	eaffffea 	b	2f694 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   2f6e8:	e59530ec 	ldr	r3, [r5, #236]	; 0xec
   2f6ec:	e3a01000 	mov	r1, #0
   2f6f0:	e58510e8 	str	r1, [r5, #232]	; 0xe8
   2f6f4:	e1530001 	cmp	r3, r1
   2f6f8:	1affffe3 	bne	2f68c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb8>
   2f6fc:	e3a03001 	mov	r3, #1
   2f700:	e5954020 	ldr	r4, [r5, #32]
   2f704:	e3520000 	cmp	r2, #0
   2f708:	e58530ec 	str	r3, [r5, #236]	; 0xec
   2f70c:	0affffed 	beq	2f6c8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   2f710:	eb0023a4 	bl	385a8 <LeaveCritical>
   2f714:	eaffffeb 	b	2f6c8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   2f718:	e1a00002 	mov	r0, r2
   2f71c:	eb002376 	bl	384fc <EnterCritical>
   2f720:	e59520f0 	ldr	r2, [r5, #240]	; 0xf0
   2f724:	eaffffce 	b	2f664 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x90>
   2f728:	e59d3004 	ldr	r3, [sp, #4]
   2f72c:	e3012759 	movw	r2, #5977	; 0x1759
   2f730:	e34d21b7 	movt	r2, #53687	; 0xd1b7
   2f734:	e59d1000 	ldr	r1, [sp]
   2f738:	e5950004 	ldr	r0, [r5, #4]
   2f73c:	e58410fc 	str	r1, [r4, #252]	; 0xfc
   2f740:	e0832392 	umull	r2, r3, r2, r3
   2f744:	e1a036a3 	lsr	r3, r3, #13
   2f748:	e5843100 	str	r3, [r4, #256]	; 0x100
   2f74c:	eb001613 	bl	34fa0 <CTimer::GetTimeZone() const>
   2f750:	eaffffbf 	b	2f654 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0002f754 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   2f754:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f758:	e1a04000 	mov	r4, r0
   2f75c:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
   2f760:	e1a08001 	mov	r8, r1
   2f764:	e1a06002 	mov	r6, r2
   2f768:	e1a07003 	mov	r7, r3
   2f76c:	e3500000 	cmp	r0, #0
   2f770:	1a00001f 	bne	2f7f4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa0>
   2f774:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
   2f778:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   2f77c:	e153000c 	cmp	r3, ip
   2f780:	0a00002f 	beq	2f844 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf0>
   2f784:	e28c3008 	add	r3, ip, #8
   2f788:	e35c0031 	cmp	ip, #49	; 0x31
   2f78c:	128cc001 	addne	ip, ip, #1
   2f790:	03a0c000 	moveq	ip, #0
   2f794:	e7945103 	ldr	r5, [r4, r3, lsl #2]
   2f798:	e584c0ec 	str	ip, [r4, #236]	; 0xec
   2f79c:	e1a01005 	mov	r1, r5
   2f7a0:	e1a00006 	mov	r0, r6
   2f7a4:	e4d13001 	ldrb	r3, [r1], #1
   2f7a8:	e5c83000 	strb	r3, [r8]
   2f7ac:	eb0019cc 	bl	35ee4 <strcpy>
   2f7b0:	e2851033 	add	r1, r5, #51	; 0x33
   2f7b4:	e1a00007 	mov	r0, r7
   2f7b8:	eb0019c9 	bl	35ee4 <strcpy>
   2f7bc:	e59d1018 	ldr	r1, [sp, #24]
   2f7c0:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   2f7c4:	e1a00005 	mov	r0, r5
   2f7c8:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   2f7cc:	e5812000 	str	r2, [r1]
   2f7d0:	e3a01f42 	mov	r1, #264	; 0x108
   2f7d4:	e59d201c 	ldr	r2, [sp, #28]
   2f7d8:	e5823000 	str	r3, [r2]
   2f7dc:	e59d2020 	ldr	r2, [sp, #32]
   2f7e0:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   2f7e4:	e5823000 	str	r3, [r2]
   2f7e8:	eb001d43 	bl	36cfc <operator delete(void*, unsigned int)>
   2f7ec:	e3a00001 	mov	r0, #1
   2f7f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2f7f4:	eb002340 	bl	384fc <EnterCritical>
   2f7f8:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   2f7fc:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   2f800:	e1520003 	cmp	r2, r3
   2f804:	0a00000a 	beq	2f834 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe0>
   2f808:	e2832008 	add	r2, r3, #8
   2f80c:	e3530031 	cmp	r3, #49	; 0x31
   2f810:	12833001 	addne	r3, r3, #1
   2f814:	03a03000 	moveq	r3, #0
   2f818:	e7945102 	ldr	r5, [r4, r2, lsl #2]
   2f81c:	e58430ec 	str	r3, [r4, #236]	; 0xec
   2f820:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   2f824:	e3530000 	cmp	r3, #0
   2f828:	0affffdb 	beq	2f79c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x48>
   2f82c:	eb00235d 	bl	385a8 <LeaveCritical>
   2f830:	eaffffd9 	b	2f79c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x48>
   2f834:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   2f838:	e3530000 	cmp	r3, #0
   2f83c:	0a000000 	beq	2f844 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf0>
   2f840:	eb002358 	bl	385a8 <LeaveCritical>
   2f844:	e3a00000 	mov	r0, #0
   2f848:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002f84c <CLogger::RegisterEventNotificationHandler(void (*)())>:
   2f84c:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   2f850:	e12fff1e 	bx	lr

0002f854 <CLogger::RegisterPanicHandler(void (*)())>:
   2f854:	e58010f8 	str	r1, [r0, #248]	; 0xf8
   2f858:	e12fff1e 	bx	lr

0002f85c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   2f85c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f860:	e1a07003 	mov	r7, r3
   2f864:	e1a04000 	mov	r4, r0
   2f868:	e24dd024 	sub	sp, sp, #36	; 0x24
   2f86c:	e1a05002 	mov	r5, r2
   2f870:	e1a0000d 	mov	r0, sp
   2f874:	e1a06001 	mov	r6, r1
   2f878:	eb000f37 	bl	3355c <CString::CString()>
   2f87c:	e1a01007 	mov	r1, r7
   2f880:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   2f884:	e1a0000d 	mov	r0, sp
   2f888:	eb001186 	bl	33ea8 <CString::FormatV(char const*, std::__va_list)>
   2f88c:	e1a0000d 	mov	r0, sp
   2f890:	eb000f69 	bl	3363c <CString::operator char const*() const>
   2f894:	e1a02005 	mov	r2, r5
   2f898:	e1a03000 	mov	r3, r0
   2f89c:	e1a01006 	mov	r1, r6
   2f8a0:	e1a00004 	mov	r0, r4
   2f8a4:	ebffff4a 	bl	2f5d4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   2f8a8:	e5943000 	ldr	r3, [r4]
   2f8ac:	e1550003 	cmp	r5, r3
   2f8b0:	8a00002b 	bhi	2f964 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x108>
   2f8b4:	e28d0010 	add	r0, sp, #16
   2f8b8:	eb000f27 	bl	3355c <CString::CString()>
   2f8bc:	e3550000 	cmp	r5, #0
   2f8c0:	0a00002b 	beq	2f974 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x118>
   2f8c4:	e5940004 	ldr	r0, [r4, #4]
   2f8c8:	e3500000 	cmp	r0, #0
   2f8cc:	0a00000d 	beq	2f908 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   2f8d0:	eb00164f 	bl	35214 <CTimer::GetTimeString()>
   2f8d4:	e2507000 	subs	r7, r0, #0
   2f8d8:	0a00000a 	beq	2f908 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   2f8dc:	eb000f56 	bl	3363c <CString::operator char const*() const>
   2f8e0:	e1a01000 	mov	r1, r0
   2f8e4:	e28d0010 	add	r0, sp, #16
   2f8e8:	eb000f95 	bl	33744 <CString::Append(char const*)>
   2f8ec:	e28d0010 	add	r0, sp, #16
   2f8f0:	e59f10e4 	ldr	r1, [pc, #228]	; 2f9dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x180>
   2f8f4:	eb000f92 	bl	33744 <CString::Append(char const*)>
   2f8f8:	e5973000 	ldr	r3, [r7]
   2f8fc:	e1a00007 	mov	r0, r7
   2f900:	e5933004 	ldr	r3, [r3, #4]
   2f904:	e12fff33 	blx	r3
   2f908:	e1a01006 	mov	r1, r6
   2f90c:	e28d0010 	add	r0, sp, #16
   2f910:	eb000f8b 	bl	33744 <CString::Append(char const*)>
   2f914:	e59f10c4 	ldr	r1, [pc, #196]	; 2f9e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x184>
   2f918:	e28d0010 	add	r0, sp, #16
   2f91c:	eb000f88 	bl	33744 <CString::Append(char const*)>
   2f920:	e1a0000d 	mov	r0, sp
   2f924:	eb000f44 	bl	3363c <CString::operator char const*() const>
   2f928:	e1a01000 	mov	r1, r0
   2f92c:	e28d0010 	add	r0, sp, #16
   2f930:	eb000f83 	bl	33744 <CString::Append(char const*)>
   2f934:	e3550000 	cmp	r5, #0
   2f938:	0a000015 	beq	2f994 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x138>
   2f93c:	e59f10a0 	ldr	r1, [pc, #160]	; 2f9e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   2f940:	e28d0010 	add	r0, sp, #16
   2f944:	eb000f7e 	bl	33744 <CString::Append(char const*)>
   2f948:	e28d0010 	add	r0, sp, #16
   2f94c:	eb000f3a 	bl	3363c <CString::operator char const*() const>
   2f950:	e1a01000 	mov	r1, r0
   2f954:	e1a00004 	mov	r0, r4
   2f958:	ebfffe75 	bl	2f334 <CLogger::Write(char const*)>
   2f95c:	e28d0010 	add	r0, sp, #16
   2f960:	eb000eca 	bl	33490 <CString::~CString()>
   2f964:	e1a0000d 	mov	r0, sp
   2f968:	eb000ec8 	bl	33490 <CString::~CString()>
   2f96c:	e28dd024 	add	sp, sp, #36	; 0x24
   2f970:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f974:	e28d0010 	add	r0, sp, #16
   2f978:	e302193c 	movw	r1, #10556	; 0x293c
   2f97c:	e3401004 	movt	r1, #4
   2f980:	eb000f33 	bl	33654 <CString::operator=(char const*)>
   2f984:	e5940004 	ldr	r0, [r4, #4]
   2f988:	e3500000 	cmp	r0, #0
   2f98c:	1affffcf 	bne	2f8d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   2f990:	eaffffdc 	b	2f908 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   2f994:	e59f104c 	ldr	r1, [pc, #76]	; 2f9e8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x18c>
   2f998:	e28d0010 	add	r0, sp, #16
   2f99c:	eb000f68 	bl	33744 <CString::Append(char const*)>
   2f9a0:	e59f103c 	ldr	r1, [pc, #60]	; 2f9e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   2f9a4:	e28d0010 	add	r0, sp, #16
   2f9a8:	eb000f65 	bl	33744 <CString::Append(char const*)>
   2f9ac:	e28d0010 	add	r0, sp, #16
   2f9b0:	eb000f21 	bl	3363c <CString::operator char const*() const>
   2f9b4:	e1a01000 	mov	r1, r0
   2f9b8:	e1a00004 	mov	r0, r4
   2f9bc:	ebfffe5c 	bl	2f334 <CLogger::Write(char const*)>
   2f9c0:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
   2f9c4:	e3530000 	cmp	r3, #0
   2f9c8:	0a000000 	beq	2f9d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
   2f9cc:	e12fff33 	blx	r3
   2f9d0:	e3a000ff 	mov	r0, #255	; 0xff
   2f9d4:	eb0014ba 	bl	34cc4 <set_qemu_exit_status>
   2f9d8:	eb0014ba 	bl	34cc8 <halt>
   2f9dc:	00042954 	.word	0x00042954
   2f9e0:	00042944 	.word	0x00042944
   2f9e4:	00042950 	.word	0x00042950
   2f9e8:	00042948 	.word	0x00042948

0002f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   2f9ec:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   2f9f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f9f4:	e24dd010 	sub	sp, sp, #16
   2f9f8:	e28dc018 	add	ip, sp, #24
   2f9fc:	e59d3014 	ldr	r3, [sp, #20]
   2fa00:	e58dc000 	str	ip, [sp]
   2fa04:	e58dc00c 	str	ip, [sp, #12]
   2fa08:	ebffff93 	bl	2f85c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   2fa0c:	e28dd010 	add	sp, sp, #16
   2fa10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   2fa14:	e28dd004 	add	sp, sp, #4
   2fa18:	e12fff1e 	bx	lr

0002fa1c <CLogger::Initialize(CDevice*)>:
   2fa1c:	e92d4010 	push	{r4, lr}
   2fa20:	e1a04000 	mov	r4, r0
   2fa24:	e24dd008 	sub	sp, sp, #8
   2fa28:	e580100c 	str	r1, [r0, #12]
   2fa2c:	eb00022e 	bl	302ec <CMachineInfo::Get()>
   2fa30:	eb00012a 	bl	2fee0 <CMachineInfo::GetMachineName() const>
   2fa34:	e302193c 	movw	r1, #10556	; 0x293c
   2fa38:	e3401004 	movt	r1, #4
   2fa3c:	e1a0c000 	mov	ip, r0
   2fa40:	e281301c 	add	r3, r1, #28
   2fa44:	e1a00004 	mov	r0, r4
   2fa48:	e58dc004 	str	ip, [sp, #4]
   2fa4c:	e3a02003 	mov	r2, #3
   2fa50:	e2811034 	add	r1, r1, #52	; 0x34
   2fa54:	e304cf6c 	movw	ip, #20332	; 0x4f6c
   2fa58:	e340c004 	movt	ip, #4
   2fa5c:	e58dc000 	str	ip, [sp]
   2fa60:	ebffffe1 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fa64:	e3a00001 	mov	r0, #1
   2fa68:	e28dd008 	add	sp, sp, #8
   2fa6c:	e8bd8010 	pop	{r4, pc}

0002fa70 <CMachineInfo::CMachineInfo()>:
   2fa70:	e92d4810 	push	{r4, fp, lr}
   2fa74:	e28db008 	add	fp, sp, #8
   2fa78:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   2fa7c:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   2fa80:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fa84:	e3a02000 	mov	r2, #0
   2fa88:	e5832000 	str	r2, [r3]
   2fa8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fa90:	e3a02014 	mov	r2, #20
   2fa94:	e5c32008 	strb	r2, [r3, #8]
   2fa98:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fa9c:	e3a02000 	mov	r2, #0
   2faa0:	e5832010 	str	r2, [r3, #16]
   2faa4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2faa8:	e3a02000 	mov	r2, #0
   2faac:	e5832018 	str	r2, [r3, #24]
   2fab0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fab4:	e3a02004 	mov	r2, #4
   2fab8:	e5c32020 	strb	r2, [r3, #32]
   2fabc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fac0:	e3a02000 	mov	r2, #0
   2fac4:	e5832028 	str	r2, [r3, #40]	; 0x28
   2fac8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2facc:	e3012f35 	movw	r2, #7989	; 0x1f35
   2fad0:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
   2fad4:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fad8:	e3403004 	movt	r3, #4
   2fadc:	e5933000 	ldr	r3, [r3]
   2fae0:	e3530000 	cmp	r3, #0
   2fae4:	0a000024 	beq	2fb7c <CMachineInfo::CMachineInfo()+0x10c>
   2fae8:	e3043f50 	movw	r3, #20304	; 0x4f50
   2faec:	e3403004 	movt	r3, #4
   2faf0:	e5933000 	ldr	r3, [r3]
   2faf4:	e5932000 	ldr	r2, [r3]
   2faf8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fafc:	e5832000 	str	r2, [r3]
   2fb00:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fb04:	e3403004 	movt	r3, #4
   2fb08:	e5933000 	ldr	r3, [r3]
   2fb0c:	e5d32008 	ldrb	r2, [r3, #8]
   2fb10:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fb14:	e5c32008 	strb	r2, [r3, #8]
   2fb18:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fb1c:	e3403004 	movt	r3, #4
   2fb20:	e5933000 	ldr	r3, [r3]
   2fb24:	e5932010 	ldr	r2, [r3, #16]
   2fb28:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fb2c:	e5832010 	str	r2, [r3, #16]
   2fb30:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fb34:	e3403004 	movt	r3, #4
   2fb38:	e5933000 	ldr	r3, [r3]
   2fb3c:	e5932018 	ldr	r2, [r3, #24]
   2fb40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fb44:	e5832018 	str	r2, [r3, #24]
   2fb48:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fb4c:	e3403004 	movt	r3, #4
   2fb50:	e5933000 	ldr	r3, [r3]
   2fb54:	e5d32020 	ldrb	r2, [r3, #32]
   2fb58:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fb5c:	e5c32020 	strb	r2, [r3, #32]
   2fb60:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fb64:	e3403004 	movt	r3, #4
   2fb68:	e5933000 	ldr	r3, [r3]
   2fb6c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   2fb70:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fb74:	e5832028 	str	r2, [r3, #40]	; 0x28
   2fb78:	ea0000cb 	b	2feac <CMachineInfo::CMachineInfo()+0x43c>
   2fb7c:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fb80:	e3403004 	movt	r3, #4
   2fb84:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
   2fb88:	e5832000 	str	r2, [r3]
   2fb8c:	e24b3020 	sub	r3, fp, #32
   2fb90:	e3a01001 	mov	r1, #1
   2fb94:	e1a00003 	mov	r0, r3
   2fb98:	ebfff369 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2fb9c:	e24b2030 	sub	r2, fp, #48	; 0x30
   2fba0:	e24b0020 	sub	r0, fp, #32
   2fba4:	e3a03000 	mov	r3, #0
   2fba8:	e58d3000 	str	r3, [sp]
   2fbac:	e3a03010 	mov	r3, #16
   2fbb0:	e3a01001 	mov	r1, #1
   2fbb4:	e3401006 	movt	r1, #6
   2fbb8:	ebfff3b3 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2fbbc:	e1a03000 	mov	r3, r0
   2fbc0:	e3530000 	cmp	r3, #0
   2fbc4:	0a000003 	beq	2fbd8 <CMachineInfo::CMachineInfo()+0x168>
   2fbc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2fbcc:	e6ff2073 	uxth	r2, r3
   2fbd0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fbd4:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
   2fbd8:	e24b2040 	sub	r2, fp, #64	; 0x40
   2fbdc:	e24b0020 	sub	r0, fp, #32
   2fbe0:	e3a03000 	mov	r3, #0
   2fbe4:	e58d3000 	str	r3, [sp]
   2fbe8:	e3a03010 	mov	r3, #16
   2fbec:	e3a01002 	mov	r1, #2
   2fbf0:	e3401001 	movt	r1, #1
   2fbf4:	ebfff3a4 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2fbf8:	e1a03000 	mov	r3, r0
   2fbfc:	e2233001 	eor	r3, r3, #1
   2fc00:	e6ef3073 	uxtb	r3, r3
   2fc04:	e3530000 	cmp	r3, #0
   2fc08:	0a000001 	beq	2fc14 <CMachineInfo::CMachineInfo()+0x1a4>
   2fc0c:	e3a04000 	mov	r4, #0
   2fc10:	ea0000a1 	b	2fe9c <CMachineInfo::CMachineInfo()+0x42c>
   2fc14:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   2fc18:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fc1c:	e5832000 	str	r2, [r3]
   2fc20:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fc24:	e5933000 	ldr	r3, [r3]
   2fc28:	e2033502 	and	r3, r3, #8388608	; 0x800000
   2fc2c:	e3530000 	cmp	r3, #0
   2fc30:	0a000062 	beq	2fdc0 <CMachineInfo::CMachineInfo()+0x350>
   2fc34:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fc38:	e5933000 	ldr	r3, [r3]
   2fc3c:	e1a03223 	lsr	r3, r3, #4
   2fc40:	e6ef3073 	uxtb	r3, r3
   2fc44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2fc48:	e3a03000 	mov	r3, #0
   2fc4c:	e50b3010 	str	r3, [fp, #-16]
   2fc50:	ea00000c 	b	2fc88 <CMachineInfo::CMachineInfo()+0x218>
   2fc54:	e3023978 	movw	r3, #10616	; 0x2978
   2fc58:	e3403004 	movt	r3, #4
   2fc5c:	e51b2010 	ldr	r2, [fp, #-16]
   2fc60:	e3a0100c 	mov	r1, #12
   2fc64:	e0020291 	mul	r2, r1, r2
   2fc68:	e0833002 	add	r3, r3, r2
   2fc6c:	e5933000 	ldr	r3, [r3]
   2fc70:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2fc74:	e1520003 	cmp	r2, r3
   2fc78:	0a000006 	beq	2fc98 <CMachineInfo::CMachineInfo()+0x228>
   2fc7c:	e51b3010 	ldr	r3, [fp, #-16]
   2fc80:	e2833001 	add	r3, r3, #1
   2fc84:	e50b3010 	str	r3, [fp, #-16]
   2fc88:	e51b3010 	ldr	r3, [fp, #-16]
   2fc8c:	e3530011 	cmp	r3, #17
   2fc90:	9affffef 	bls	2fc54 <CMachineInfo::CMachineInfo()+0x1e4>
   2fc94:	ea000000 	b	2fc9c <CMachineInfo::CMachineInfo()+0x22c>
   2fc98:	e320f000 	nop	{0}
   2fc9c:	e51b3010 	ldr	r3, [fp, #-16]
   2fca0:	e3530011 	cmp	r3, #17
   2fca4:	9a000001 	bls	2fcb0 <CMachineInfo::CMachineInfo()+0x240>
   2fca8:	e3a04000 	mov	r4, #0
   2fcac:	ea00007a 	b	2fe9c <CMachineInfo::CMachineInfo()+0x42c>
   2fcb0:	e3023978 	movw	r3, #10616	; 0x2978
   2fcb4:	e3403004 	movt	r3, #4
   2fcb8:	e51b2010 	ldr	r2, [fp, #-16]
   2fcbc:	e3a0100c 	mov	r1, #12
   2fcc0:	e0020291 	mul	r2, r1, r2
   2fcc4:	e0833002 	add	r3, r3, r2
   2fcc8:	e2833004 	add	r3, r3, #4
   2fccc:	e5d32000 	ldrb	r2, [r3]
   2fcd0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fcd4:	e5c32008 	strb	r2, [r3, #8]
   2fcd8:	e3023978 	movw	r3, #10616	; 0x2978
   2fcdc:	e3403004 	movt	r3, #4
   2fce0:	e51b2010 	ldr	r2, [fp, #-16]
   2fce4:	e3a0100c 	mov	r1, #12
   2fce8:	e0020291 	mul	r2, r1, r2
   2fcec:	e0833002 	add	r3, r3, r2
   2fcf0:	e2833008 	add	r3, r3, #8
   2fcf4:	e5932000 	ldr	r2, [r3]
   2fcf8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fcfc:	e5832010 	str	r2, [r3, #16]
   2fd00:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd04:	e5933000 	ldr	r3, [r3]
   2fd08:	e203300f 	and	r3, r3, #15
   2fd0c:	e2832001 	add	r2, r3, #1
   2fd10:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd14:	e5832018 	str	r2, [r3, #24]
   2fd18:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd1c:	e5933000 	ldr	r3, [r3]
   2fd20:	e1a03623 	lsr	r3, r3, #12
   2fd24:	e6ef3073 	uxtb	r3, r3
   2fd28:	e203300f 	and	r3, r3, #15
   2fd2c:	e6ef2073 	uxtb	r2, r3
   2fd30:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd34:	e5c32020 	strb	r2, [r3, #32]
   2fd38:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd3c:	e5933000 	ldr	r3, [r3]
   2fd40:	e1a03a23 	lsr	r3, r3, #20
   2fd44:	e2033007 	and	r3, r3, #7
   2fd48:	e3a02c01 	mov	r2, #256	; 0x100
   2fd4c:	e1a03312 	lsl	r3, r2, r3
   2fd50:	e1a02003 	mov	r2, r3
   2fd54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd58:	e5832028 	str	r2, [r3, #40]	; 0x28
   2fd5c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd60:	e5d33020 	ldrb	r3, [r3, #32]
   2fd64:	e3530003 	cmp	r3, #3
   2fd68:	9a000002 	bls	2fd78 <CMachineInfo::CMachineInfo()+0x308>
   2fd6c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd70:	e3a02004 	mov	r2, #4
   2fd74:	e5c32020 	strb	r2, [r3, #32]
   2fd78:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd7c:	e5d33008 	ldrb	r3, [r3, #8]
   2fd80:	e3530003 	cmp	r3, #3
   2fd84:	1a000043 	bne	2fe98 <CMachineInfo::CMachineInfo()+0x428>
   2fd88:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd8c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2fd90:	e3530c01 	cmp	r3, #256	; 0x100
   2fd94:	1a00003f 	bne	2fe98 <CMachineInfo::CMachineInfo()+0x428>
   2fd98:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fd9c:	e5933018 	ldr	r3, [r3, #24]
   2fda0:	e3530001 	cmp	r3, #1
   2fda4:	1a000001 	bne	2fdb0 <CMachineInfo::CMachineInfo()+0x340>
   2fda8:	e3a02001 	mov	r2, #1
   2fdac:	ea000000 	b	2fdb4 <CMachineInfo::CMachineInfo()+0x344>
   2fdb0:	e3a02002 	mov	r2, #2
   2fdb4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fdb8:	e5c32008 	strb	r2, [r3, #8]
   2fdbc:	ea000035 	b	2fe98 <CMachineInfo::CMachineInfo()+0x428>
   2fdc0:	e3a03000 	mov	r3, #0
   2fdc4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2fdc8:	ea00000a 	b	2fdf8 <CMachineInfo::CMachineInfo()+0x388>
   2fdcc:	e3023a50 	movw	r3, #10832	; 0x2a50
   2fdd0:	e3403004 	movt	r3, #4
   2fdd4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2fdd8:	e7932202 	ldr	r2, [r3, r2, lsl #4]
   2fddc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fde0:	e5933000 	ldr	r3, [r3]
   2fde4:	e1520003 	cmp	r2, r3
   2fde8:	0a000006 	beq	2fe08 <CMachineInfo::CMachineInfo()+0x398>
   2fdec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2fdf0:	e2833001 	add	r3, r3, #1
   2fdf4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2fdf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2fdfc:	e3530010 	cmp	r3, #16
   2fe00:	9afffff1 	bls	2fdcc <CMachineInfo::CMachineInfo()+0x35c>
   2fe04:	ea000000 	b	2fe0c <CMachineInfo::CMachineInfo()+0x39c>
   2fe08:	e320f000 	nop	{0}
   2fe0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2fe10:	e3530010 	cmp	r3, #16
   2fe14:	9a000001 	bls	2fe20 <CMachineInfo::CMachineInfo()+0x3b0>
   2fe18:	e3a04000 	mov	r4, #0
   2fe1c:	ea00001e 	b	2fe9c <CMachineInfo::CMachineInfo()+0x42c>
   2fe20:	e3022a50 	movw	r2, #10832	; 0x2a50
   2fe24:	e3402004 	movt	r2, #4
   2fe28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2fe2c:	e1a03203 	lsl	r3, r3, #4
   2fe30:	e0823003 	add	r3, r2, r3
   2fe34:	e5d32004 	ldrb	r2, [r3, #4]
   2fe38:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fe3c:	e5c32008 	strb	r2, [r3, #8]
   2fe40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fe44:	e3a02001 	mov	r2, #1
   2fe48:	e5832010 	str	r2, [r3, #16]
   2fe4c:	e3022a50 	movw	r2, #10832	; 0x2a50
   2fe50:	e3402004 	movt	r2, #4
   2fe54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2fe58:	e1a03203 	lsl	r3, r3, #4
   2fe5c:	e0823003 	add	r3, r2, r3
   2fe60:	e5932008 	ldr	r2, [r3, #8]
   2fe64:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fe68:	e5832018 	str	r2, [r3, #24]
   2fe6c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fe70:	e3a02000 	mov	r2, #0
   2fe74:	e5c32020 	strb	r2, [r3, #32]
   2fe78:	e3022a50 	movw	r2, #10832	; 0x2a50
   2fe7c:	e3402004 	movt	r2, #4
   2fe80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2fe84:	e1a03203 	lsl	r3, r3, #4
   2fe88:	e0823003 	add	r3, r2, r3
   2fe8c:	e593200c 	ldr	r2, [r3, #12]
   2fe90:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2fe94:	e5832028 	str	r2, [r3, #40]	; 0x28
   2fe98:	e3a04001 	mov	r4, #1
   2fe9c:	e24b3020 	sub	r3, fp, #32
   2fea0:	e1a00003 	mov	r0, r3
   2fea4:	ebfff2ad 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   2fea8:	e3540001 	cmp	r4, #1
   2feac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2feb0:	e1a00003 	mov	r0, r3
   2feb4:	e24bd008 	sub	sp, fp, #8
   2feb8:	e8bd8810 	pop	{r4, fp, pc}

0002febc <CMachineInfo::~CMachineInfo()>:
   2febc:	e3043f50 	movw	r3, #20304	; 0x4f50
   2fec0:	e3403004 	movt	r3, #4
   2fec4:	e5932000 	ldr	r2, [r3]
   2fec8:	e1520000 	cmp	r2, r0
   2fecc:	03a02000 	moveq	r2, #0
   2fed0:	05832000 	streq	r2, [r3]
   2fed4:	e12fff1e 	bx	lr

0002fed8 <CMachineInfo::GetMachineModel() const>:
   2fed8:	e5d00008 	ldrb	r0, [r0, #8]
   2fedc:	e12fff1e 	bx	lr

0002fee0 <CMachineInfo::GetMachineName() const>:
   2fee0:	e5d02008 	ldrb	r2, [r0, #8]
   2fee4:	e3023b60 	movw	r3, #11104	; 0x2b60
   2fee8:	e3403004 	movt	r3, #4
   2feec:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   2fef0:	e12fff1e 	bx	lr

0002fef4 <CMachineInfo::GetModelMajor() const>:
   2fef4:	e5900010 	ldr	r0, [r0, #16]
   2fef8:	e12fff1e 	bx	lr

0002fefc <CMachineInfo::GetModelRevision() const>:
   2fefc:	e5900018 	ldr	r0, [r0, #24]
   2ff00:	e12fff1e 	bx	lr

0002ff04 <CMachineInfo::GetSoCType() const>:
   2ff04:	e5d00020 	ldrb	r0, [r0, #32]
   2ff08:	e12fff1e 	bx	lr

0002ff0c <CMachineInfo::GetRAMSize() const>:
   2ff0c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   2ff10:	e12fff1e 	bx	lr

0002ff14 <CMachineInfo::GetSoCName() const>:
   2ff14:	e5d02020 	ldrb	r2, [r0, #32]
   2ff18:	e3023b60 	movw	r3, #11104	; 0x2b60
   2ff1c:	e3403004 	movt	r3, #4
   2ff20:	e0833102 	add	r3, r3, r2, lsl #2
   2ff24:	e5930058 	ldr	r0, [r3, #88]	; 0x58
   2ff28:	e12fff1e 	bx	lr

0002ff2c <CMachineInfo::GetRevisionRaw() const>:
   2ff2c:	e5900000 	ldr	r0, [r0]
   2ff30:	e12fff1e 	bx	lr

0002ff34 <CMachineInfo::GetActLEDInfo() const>:
   2ff34:	e5d02008 	ldrb	r2, [r0, #8]
   2ff38:	e3023b60 	movw	r3, #11104	; 0x2b60
   2ff3c:	e3403004 	movt	r3, #4
   2ff40:	e0833102 	add	r3, r3, r2, lsl #2
   2ff44:	e5930070 	ldr	r0, [r3, #112]	; 0x70
   2ff48:	e12fff1e 	bx	lr

0002ff4c <CMachineInfo::GetClockRate(unsigned int) const>:
   2ff4c:	e92d4070 	push	{r4, r5, r6, lr}
   2ff50:	e1a04001 	mov	r4, r1
   2ff54:	e1a06000 	mov	r6, r0
   2ff58:	e24dd028 	sub	sp, sp, #40	; 0x28
   2ff5c:	e3a01000 	mov	r1, #0
   2ff60:	e28d000c 	add	r0, sp, #12
   2ff64:	ebfff276 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2ff68:	e3a03014 	mov	r3, #20
   2ff6c:	e3a02004 	mov	r2, #4
   2ff70:	e3a01002 	mov	r1, #2
   2ff74:	e3401003 	movt	r1, #3
   2ff78:	e58d2000 	str	r2, [sp]
   2ff7c:	e28d000c 	add	r0, sp, #12
   2ff80:	e08d2003 	add	r2, sp, r3
   2ff84:	e58d4020 	str	r4, [sp, #32]
   2ff88:	ebfff2bf 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2ff8c:	e3500000 	cmp	r0, #0
   2ff90:	0a000002 	beq	2ffa0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
   2ff94:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   2ff98:	e3550000 	cmp	r5, #0
   2ff9c:	1a000026 	bne	3003c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   2ffa0:	e3a03014 	mov	r3, #20
   2ffa4:	e3a01004 	mov	r1, #4
   2ffa8:	e08d2003 	add	r2, sp, r3
   2ffac:	e58d1000 	str	r1, [sp]
   2ffb0:	e28d000c 	add	r0, sp, #12
   2ffb4:	e3a01047 	mov	r1, #71	; 0x47
   2ffb8:	e3401003 	movt	r1, #3
   2ffbc:	e58d4020 	str	r4, [sp, #32]
   2ffc0:	ebfff2b1 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2ffc4:	e3500000 	cmp	r0, #0
   2ffc8:	0a000002 	beq	2ffd8 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   2ffcc:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   2ffd0:	e3550000 	cmp	r5, #0
   2ffd4:	1a000018 	bne	3003c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   2ffd8:	e2444001 	sub	r4, r4, #1
   2ffdc:	e354000d 	cmp	r4, #13
   2ffe0:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   2ffe4:	ea000022 	b	30074 <CMachineInfo::GetClockRate(unsigned int) const+0x128>
   2ffe8:	00030050 	.word	0x00030050
   2ffec:	00030068 	.word	0x00030068
   2fff0:	00030074 	.word	0x00030074
   2fff4:	00030020 	.word	0x00030020
   2fff8:	00030074 	.word	0x00030074
   2fffc:	00030074 	.word	0x00030074
   30000:	00030074 	.word	0x00030074
   30004:	00030074 	.word	0x00030074
   30008:	00030074 	.word	0x00030074
   3000c:	00030074 	.word	0x00030074
   30010:	00030074 	.word	0x00030074
   30014:	00030050 	.word	0x00030050
   30018:	00030074 	.word	0x00030074
   3001c:	0003005c 	.word	0x0003005c
   30020:	e5962010 	ldr	r2, [r6, #16]
   30024:	e30b3280 	movw	r3, #45696	; 0xb280
   30028:	e3403ee6 	movt	r3, #3814	; 0xee6
   3002c:	e3a05ca3 	mov	r5, #41728	; 0xa300
   30030:	e34151e1 	movt	r5, #4577	; 0x11e1
   30034:	e3520002 	cmp	r2, #2
   30038:	91a05003 	movls	r5, r3
   3003c:	e28d000c 	add	r0, sp, #12
   30040:	ebfff246 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   30044:	e1a00005 	mov	r0, r5
   30048:	e28dd028 	add	sp, sp, #40	; 0x28
   3004c:	e8bd8070 	pop	{r4, r5, r6, pc}
   30050:	e3a05ce1 	mov	r5, #57600	; 0xe100
   30054:	e34055f5 	movt	r5, #1525	; 0x5f5
   30058:	eafffff7 	b	3003c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   3005c:	e30658c0 	movw	r5, #26816	; 0x68c0
   30060:	e3405478 	movt	r5, #1144	; 0x478
   30064:	eafffff4 	b	3003c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   30068:	e3a05b1b 	mov	r5, #27648	; 0x6c00
   3006c:	e34052dc 	movt	r5, #732	; 0x2dc
   30070:	eafffff1 	b	3003c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   30074:	e59f1008 	ldr	r1, [pc, #8]	; 30084 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
   30078:	e3002161 	movw	r2, #353	; 0x161
   3007c:	e2810010 	add	r0, r1, #16
   30080:	ebfff20e 	bl	2c8c0 <assertion_failed>
   30084:	00042c24 	.word	0x00042c24

00030088 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   30088:	e3510036 	cmp	r1, #54	; 0x36
   3008c:	0a000006 	beq	300ac <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   30090:	e3510037 	cmp	r1, #55	; 0x37
   30094:	1a00000e 	bne	300d4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
   30098:	e5d03008 	ldrb	r3, [r0, #8]
   3009c:	e3530003 	cmp	r3, #3
   300a0:	83a00028 	movhi	r0, #40	; 0x28
   300a4:	93a0002d 	movls	r0, #45	; 0x2d
   300a8:	e12fff1e 	bx	lr
   300ac:	e5d03008 	ldrb	r3, [r0, #8]
   300b0:	e3530003 	cmp	r3, #3
   300b4:	9a000004 	bls	300cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
   300b8:	e5903010 	ldr	r3, [r0, #16]
   300bc:	e3530002 	cmp	r3, #2
   300c0:	83a00029 	movhi	r0, #41	; 0x29
   300c4:	93a0002d 	movls	r0, #45	; 0x2d
   300c8:	e12fff1e 	bx	lr
   300cc:	e3a00028 	mov	r0, #40	; 0x28
   300d0:	e12fff1e 	bx	lr
   300d4:	e59f100c 	ldr	r1, [pc, #12]	; 300e8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   300d8:	e3a02f69 	mov	r2, #420	; 0x1a4
   300dc:	e92d4010 	push	{r4, lr}
   300e0:	e2810010 	add	r0, r1, #16
   300e4:	ebfff1f5 	bl	2c8c0 <assertion_failed>
   300e8:	00042c24 	.word	0x00042c24

000300ec <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   300ec:	e5903010 	ldr	r3, [r0, #16]
   300f0:	e3530003 	cmp	r3, #3
   300f4:	8a000006 	bhi	30114 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
   300f8:	e3510001 	cmp	r1, #1
   300fc:	0a00000b 	beq	30130 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   30100:	e3510006 	cmp	r1, #6
   30104:	e3a00c65 	mov	r0, #25856	; 0x6500
   30108:	e3410dcd 	movt	r0, #7629	; 0x1dcd
   3010c:	13a00000 	movne	r0, #0
   30110:	e12fff1e 	bx	lr
   30114:	e3510001 	cmp	r1, #1
   30118:	0a000007 	beq	3013c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   3011c:	e3510006 	cmp	r1, #6
   30120:	e3a00d5e 	mov	r0, #6016	; 0x1780
   30124:	e3420cb4 	movt	r0, #11444	; 0x2cb4
   30128:	13a00000 	movne	r0, #0
   3012c:	e12fff1e 	bx	lr
   30130:	e3a00b3e 	mov	r0, #63488	; 0xf800
   30134:	e3400124 	movt	r0, #292	; 0x124
   30138:	e12fff1e 	bx	lr
   3013c:	e30f0980 	movw	r0, #63872	; 0xf980
   30140:	e3400337 	movt	r0, #823	; 0x337
   30144:	e12fff1e 	bx	lr

00030148 <CMachineInfo::GetDevice(TDeviceId) const>:
   30148:	e3510000 	cmp	r1, #0
   3014c:	1a000003 	bne	30160 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   30150:	e5d00008 	ldrb	r0, [r0, #8]
   30154:	e2500001 	subs	r0, r0, #1
   30158:	13a00001 	movne	r0, #1
   3015c:	e12fff1e 	bx	lr
   30160:	e59f100c 	ldr	r1, [pc, #12]	; 30174 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   30164:	e30021df 	movw	r2, #479	; 0x1df
   30168:	e92d4010 	push	{r4, lr}
   3016c:	e2810010 	add	r0, r1, #16
   30170:	ebfff1d2 	bl	2c8c0 <assertion_failed>
   30174:	00042c24 	.word	0x00042c24

00030178 <CMachineInfo::ArePWMChannelsSwapped() const>:
   30178:	e5d03008 	ldrb	r3, [r0, #8]
   3017c:	e2430006 	sub	r0, r3, #6
   30180:	e3500002 	cmp	r0, #2
   30184:	83530003 	cmphi	r3, #3
   30188:	83a00001 	movhi	r0, #1
   3018c:	93a00000 	movls	r0, #0
   30190:	e12fff1e 	bx	lr

00030194 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   30194:	e3042f50 	movw	r2, #20304	; 0x4f50
   30198:	e3402004 	movt	r2, #4
   3019c:	e92d4010 	push	{r4, lr}
   301a0:	e5922000 	ldr	r2, [r2]
   301a4:	e3520000 	cmp	r2, #0
   301a8:	11a03000 	movne	r3, r0
   301ac:	1a000001 	bne	301b8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
   301b0:	ea00000f 	b	301f4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x60>
   301b4:	e1a03002 	mov	r3, r2
   301b8:	e1520003 	cmp	r2, r3
   301bc:	1afffffc 	bne	301b4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
   301c0:	e351000f 	cmp	r1, #15
   301c4:	8a00000e 	bhi	30204 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
   301c8:	e351000b 	cmp	r1, #11
   301cc:	8a000020 	bhi	30254 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   301d0:	e1d233b0 	ldrh	r3, [r2, #48]	; 0x30
   301d4:	e1a00153 	asr	r0, r3, r1
   301d8:	e3100001 	tst	r0, #1
   301dc:	0a000015 	beq	30238 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa4>
   301e0:	e3a0c001 	mov	ip, #1
   301e4:	e1a00001 	mov	r0, r1
   301e8:	e1c3311c 	bic	r3, r3, ip, lsl r1
   301ec:	e1c233b0 	strh	r3, [r2, #48]	; 0x30
   301f0:	e8bd8010 	pop	{r4, pc}
   301f4:	e59f1068 	ldr	r1, [pc, #104]	; 30264 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
   301f8:	e3a02e1f 	mov	r2, #496	; 0x1f0
   301fc:	e2810014 	add	r0, r1, #20
   30200:	ebfff1ae 	bl	2c8c0 <assertion_failed>
   30204:	e3510081 	cmp	r1, #129	; 0x81
   30208:	e1d3c3b0 	ldrh	ip, [r3, #48]	; 0x30
   3020c:	13a0200b 	movne	r2, #11
   30210:	03a02006 	moveq	r2, #6
   30214:	e1a0125c 	asr	r1, ip, r2
   30218:	e3110001 	tst	r1, #1
   3021c:	0a000003 	beq	30230 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>
   30220:	ea000006 	b	30240 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   30224:	e1a0125c 	asr	r1, ip, r2
   30228:	e3110001 	tst	r1, #1
   3022c:	1a000003 	bne	30240 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   30230:	e2522001 	subs	r2, r2, #1
   30234:	2afffffa 	bcs	30224 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x90>
   30238:	e3a00080 	mov	r0, #128	; 0x80
   3023c:	e8bd8010 	pop	{r4, pc}
   30240:	e3a01001 	mov	r1, #1
   30244:	e1a00002 	mov	r0, r2
   30248:	e1ccc211 	bic	ip, ip, r1, lsl r2
   3024c:	e1c3c3b0 	strh	ip, [r3, #48]	; 0x30
   30250:	e8bd8010 	pop	{r4, pc}
   30254:	e59f1008 	ldr	r1, [pc, #8]	; 30264 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
   30258:	e30021f9 	movw	r2, #505	; 0x1f9
   3025c:	e2810024 	add	r0, r1, #36	; 0x24
   30260:	ebfff196 	bl	2c8c0 <assertion_failed>
   30264:	00042c24 	.word	0x00042c24

00030268 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   30268:	e3043f50 	movw	r3, #20304	; 0x4f50
   3026c:	e3403004 	movt	r3, #4
   30270:	e92d4010 	push	{r4, lr}
   30274:	e5933000 	ldr	r3, [r3]
   30278:	e3530000 	cmp	r3, #0
   3027c:	1a000001 	bne	30288 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
   30280:	ea00000c 	b	302b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x50>
   30284:	e1a00003 	mov	r0, r3
   30288:	e1530000 	cmp	r3, r0
   3028c:	1afffffc 	bne	30284 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   30290:	e351000b 	cmp	r1, #11
   30294:	8a00000b 	bhi	302c8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
   30298:	e1d323b0 	ldrh	r2, [r3, #48]	; 0x30
   3029c:	e1e00152 	mvn	r0, r2, asr r1
   302a0:	e3100001 	tst	r0, #1
   302a4:	0a00000b 	beq	302d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
   302a8:	e3a00001 	mov	r0, #1
   302ac:	e1822110 	orr	r2, r2, r0, lsl r1
   302b0:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
   302b4:	e8bd8010 	pop	{r4, pc}
   302b8:	e59f1028 	ldr	r1, [pc, #40]	; 302e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   302bc:	e300221d 	movw	r2, #541	; 0x21d
   302c0:	e2810014 	add	r0, r1, #20
   302c4:	ebfff17d 	bl	2c8c0 <assertion_failed>
   302c8:	e59f1018 	ldr	r1, [pc, #24]	; 302e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   302cc:	e3002225 	movw	r2, #549	; 0x225
   302d0:	e2810024 	add	r0, r1, #36	; 0x24
   302d4:	ebfff179 	bl	2c8c0 <assertion_failed>
   302d8:	e59f1008 	ldr	r1, [pc, #8]	; 302e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   302dc:	e3002226 	movw	r2, #550	; 0x226
   302e0:	e2810040 	add	r0, r1, #64	; 0x40
   302e4:	ebfff175 	bl	2c8c0 <assertion_failed>
   302e8:	00042c24 	.word	0x00042c24

000302ec <CMachineInfo::Get()>:
   302ec:	e3043f50 	movw	r3, #20304	; 0x4f50
   302f0:	e3403004 	movt	r3, #4
   302f4:	e5930000 	ldr	r0, [r3]
   302f8:	e3500000 	cmp	r0, #0
   302fc:	112fff1e 	bxne	lr
   30300:	e59f100c 	ldr	r1, [pc, #12]	; 30314 <CMachineInfo::Get()+0x28>
   30304:	e300226f 	movw	r2, #623	; 0x26f
   30308:	e92d4010 	push	{r4, lr}
   3030c:	e2810014 	add	r0, r1, #20
   30310:	ebfff16a 	bl	2c8c0 <assertion_failed>
   30314:	00042c24 	.word	0x00042c24

00030318 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   30318:	e3a03000 	mov	r3, #0
   3031c:	e92d4010 	push	{r4, lr}
   30320:	e1510003 	cmp	r1, r3
   30324:	e880000e 	stm	r0, {r1, r2, r3}
   30328:	e580300c 	str	r3, [r0, #12]
   3032c:	0a00000a 	beq	3035c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x44>
   30330:	e3520000 	cmp	r2, #0
   30334:	0a00000e 	beq	30374 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x5c>
   30338:	e1a04000 	mov	r4, r0
   3033c:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   30340:	91a00101 	lslls	r0, r1, #2
   30344:	83e00000 	mvnhi	r0, #0
   30348:	eb001a59 	bl	36cb4 <operator new[](unsigned int)>
   3034c:	e1a03000 	mov	r3, r0
   30350:	e1a00004 	mov	r0, r4
   30354:	e584300c 	str	r3, [r4, #12]
   30358:	e8bd8010 	pop	{r4, pc}
   3035c:	e3021e58 	movw	r1, #11864	; 0x2e58
   30360:	e3401004 	movt	r1, #4
   30364:	e3020e68 	movw	r0, #11880	; 0x2e68
   30368:	e3400004 	movt	r0, #4
   3036c:	e3a0201e 	mov	r2, #30
   30370:	ebfff152 	bl	2c8c0 <assertion_failed>
   30374:	e3021e58 	movw	r1, #11864	; 0x2e58
   30378:	e3401004 	movt	r1, #4
   3037c:	e3020e7c 	movw	r0, #11900	; 0x2e7c
   30380:	e3400004 	movt	r0, #4
   30384:	e3a0201f 	mov	r2, #31
   30388:	ebfff14c 	bl	2c8c0 <assertion_failed>

0003038c <CPtrArray::~CPtrArray()>:
   3038c:	e92d4010 	push	{r4, lr}
   30390:	e1a04000 	mov	r4, r0
   30394:	e590000c 	ldr	r0, [r0, #12]
   30398:	e3a03000 	mov	r3, #0
   3039c:	e1500003 	cmp	r0, r3
   303a0:	e5843000 	str	r3, [r4]
   303a4:	e5843004 	str	r3, [r4, #4]
   303a8:	0a000000 	beq	303b0 <CPtrArray::~CPtrArray()+0x24>
   303ac:	eb001a4c 	bl	36ce4 <operator delete[](void*)>
   303b0:	e1a00004 	mov	r0, r4
   303b4:	e8bd8010 	pop	{r4, pc}

000303b8 <CPtrArray::GetCount() const>:
   303b8:	e5900008 	ldr	r0, [r0, #8]
   303bc:	e12fff1e 	bx	lr

000303c0 <CPtrArray::operator[](unsigned int)>:
   303c0:	e5903008 	ldr	r3, [r0, #8]
   303c4:	e92d4010 	push	{r4, lr}
   303c8:	e1530001 	cmp	r3, r1
   303cc:	9a000007 	bls	303f0 <CPtrArray::operator[](unsigned int)+0x30>
   303d0:	e5902000 	ldr	r2, [r0]
   303d4:	e1530002 	cmp	r3, r2
   303d8:	8a00000a 	bhi	30408 <CPtrArray::operator[](unsigned int)+0x48>
   303dc:	e590000c 	ldr	r0, [r0, #12]
   303e0:	e3500000 	cmp	r0, #0
   303e4:	0a00000d 	beq	30420 <CPtrArray::operator[](unsigned int)+0x60>
   303e8:	e0800101 	add	r0, r0, r1, lsl #2
   303ec:	e8bd8010 	pop	{r4, pc}
   303f0:	e3021e58 	movw	r1, #11864	; 0x2e58
   303f4:	e3401004 	movt	r1, #4
   303f8:	e3020e94 	movw	r0, #11924	; 0x2e94
   303fc:	e3400004 	movt	r0, #4
   30400:	e3a02035 	mov	r2, #53	; 0x35
   30404:	ebfff12d 	bl	2c8c0 <assertion_failed>
   30408:	e3021e58 	movw	r1, #11864	; 0x2e58
   3040c:	e3401004 	movt	r1, #4
   30410:	e3020eac 	movw	r0, #11948	; 0x2eac
   30414:	e3400004 	movt	r0, #4
   30418:	e3a02036 	mov	r2, #54	; 0x36
   3041c:	ebfff127 	bl	2c8c0 <assertion_failed>
   30420:	e3021e58 	movw	r1, #11864	; 0x2e58
   30424:	e3401004 	movt	r1, #4
   30428:	e3020ecc 	movw	r0, #11980	; 0x2ecc
   3042c:	e3400004 	movt	r0, #4
   30430:	e3a02037 	mov	r2, #55	; 0x37
   30434:	ebfff121 	bl	2c8c0 <assertion_failed>

00030438 <CPtrArray::operator[](unsigned int) const>:
   30438:	e5903008 	ldr	r3, [r0, #8]
   3043c:	e92d4010 	push	{r4, lr}
   30440:	e1530001 	cmp	r3, r1
   30444:	9a000007 	bls	30468 <CPtrArray::operator[](unsigned int) const+0x30>
   30448:	e5902000 	ldr	r2, [r0]
   3044c:	e1530002 	cmp	r3, r2
   30450:	8a00000a 	bhi	30480 <CPtrArray::operator[](unsigned int) const+0x48>
   30454:	e590300c 	ldr	r3, [r0, #12]
   30458:	e3530000 	cmp	r3, #0
   3045c:	0a00000d 	beq	30498 <CPtrArray::operator[](unsigned int) const+0x60>
   30460:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   30464:	e8bd8010 	pop	{r4, pc}
   30468:	e3021e58 	movw	r1, #11864	; 0x2e58
   3046c:	e3401004 	movt	r1, #4
   30470:	e3020e94 	movw	r0, #11924	; 0x2e94
   30474:	e3400004 	movt	r0, #4
   30478:	e3a0203e 	mov	r2, #62	; 0x3e
   3047c:	ebfff10f 	bl	2c8c0 <assertion_failed>
   30480:	e3021e58 	movw	r1, #11864	; 0x2e58
   30484:	e3401004 	movt	r1, #4
   30488:	e3020eac 	movw	r0, #11948	; 0x2eac
   3048c:	e3400004 	movt	r0, #4
   30490:	e3a0203f 	mov	r2, #63	; 0x3f
   30494:	ebfff109 	bl	2c8c0 <assertion_failed>
   30498:	e3021e58 	movw	r1, #11864	; 0x2e58
   3049c:	e3401004 	movt	r1, #4
   304a0:	e3020ecc 	movw	r0, #11980	; 0x2ecc
   304a4:	e3400004 	movt	r0, #4
   304a8:	e3a02040 	mov	r2, #64	; 0x40
   304ac:	ebfff103 	bl	2c8c0 <assertion_failed>

000304b0 <CPtrArray::Append(void*)>:
   304b0:	e5903000 	ldr	r3, [r0]
   304b4:	e92d4070 	push	{r4, r5, r6, lr}
   304b8:	e3530000 	cmp	r3, #0
   304bc:	0a000024 	beq	30554 <CPtrArray::Append(void*)+0xa4>
   304c0:	e590500c 	ldr	r5, [r0, #12]
   304c4:	e1a04000 	mov	r4, r0
   304c8:	e3550000 	cmp	r5, #0
   304cc:	0a000026 	beq	3056c <CPtrArray::Append(void*)+0xbc>
   304d0:	e5900008 	ldr	r0, [r0, #8]
   304d4:	e1530000 	cmp	r3, r0
   304d8:	3a000029 	bcc	30584 <CPtrArray::Append(void*)+0xd4>
   304dc:	e1a06001 	mov	r6, r1
   304e0:	0a000003 	beq	304f4 <CPtrArray::Append(void*)+0x44>
   304e4:	e2803001 	add	r3, r0, #1
   304e8:	e7856100 	str	r6, [r5, r0, lsl #2]
   304ec:	e5843008 	str	r3, [r4, #8]
   304f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   304f4:	e5942004 	ldr	r2, [r4, #4]
   304f8:	e3520000 	cmp	r2, #0
   304fc:	0a000026 	beq	3059c <CPtrArray::Append(void*)+0xec>
   30500:	e0833002 	add	r3, r3, r2
   30504:	e373022e 	cmn	r3, #-536870910	; 0xe0000002
   30508:	91a00103 	lslls	r0, r3, #2
   3050c:	83e00000 	mvnhi	r0, #0
   30510:	eb0019e7 	bl	36cb4 <operator new[](unsigned int)>
   30514:	e5942000 	ldr	r2, [r4]
   30518:	e594100c 	ldr	r1, [r4, #12]
   3051c:	e1a05000 	mov	r5, r0
   30520:	e1a02102 	lsl	r2, r2, #2
   30524:	eb0017d3 	bl	36478 <memcpy>
   30528:	e594000c 	ldr	r0, [r4, #12]
   3052c:	e3500000 	cmp	r0, #0
   30530:	0a000000 	beq	30538 <CPtrArray::Append(void*)+0x88>
   30534:	eb0019ea 	bl	36ce4 <operator delete[](void*)>
   30538:	e5943000 	ldr	r3, [r4]
   3053c:	e5942004 	ldr	r2, [r4, #4]
   30540:	e5940008 	ldr	r0, [r4, #8]
   30544:	e0833002 	add	r3, r3, r2
   30548:	e584500c 	str	r5, [r4, #12]
   3054c:	e5843000 	str	r3, [r4]
   30550:	eaffffe3 	b	304e4 <CPtrArray::Append(void*)+0x34>
   30554:	e3021e58 	movw	r1, #11864	; 0x2e58
   30558:	e3401004 	movt	r1, #4
   3055c:	e3020e68 	movw	r0, #11880	; 0x2e68
   30560:	e3400004 	movt	r0, #4
   30564:	e3a02047 	mov	r2, #71	; 0x47
   30568:	ebfff0d4 	bl	2c8c0 <assertion_failed>
   3056c:	e3021e58 	movw	r1, #11864	; 0x2e58
   30570:	e3401004 	movt	r1, #4
   30574:	e3020ecc 	movw	r0, #11980	; 0x2ecc
   30578:	e3400004 	movt	r0, #4
   3057c:	e3a02048 	mov	r2, #72	; 0x48
   30580:	ebfff0ce 	bl	2c8c0 <assertion_failed>
   30584:	e3021e58 	movw	r1, #11864	; 0x2e58
   30588:	e3401004 	movt	r1, #4
   3058c:	e3020eac 	movw	r0, #11948	; 0x2eac
   30590:	e3400004 	movt	r0, #4
   30594:	e3a0204a 	mov	r2, #74	; 0x4a
   30598:	ebfff0c8 	bl	2c8c0 <assertion_failed>
   3059c:	e3021e58 	movw	r1, #11864	; 0x2e58
   305a0:	e3401004 	movt	r1, #4
   305a4:	e3020e7c 	movw	r0, #11900	; 0x2e7c
   305a8:	e3400004 	movt	r0, #4
   305ac:	e3a0204d 	mov	r2, #77	; 0x4d
   305b0:	ebfff0c2 	bl	2c8c0 <assertion_failed>

000305b4 <CPtrArray::RemoveLast()>:
   305b4:	e5903008 	ldr	r3, [r0, #8]
   305b8:	e3530000 	cmp	r3, #0
   305bc:	0a000002 	beq	305cc <CPtrArray::RemoveLast()+0x18>
   305c0:	e2433001 	sub	r3, r3, #1
   305c4:	e5803008 	str	r3, [r0, #8]
   305c8:	e12fff1e 	bx	lr
   305cc:	e3021e58 	movw	r1, #11864	; 0x2e58
   305d0:	e3401004 	movt	r1, #4
   305d4:	e3020edc 	movw	r0, #11996	; 0x2edc
   305d8:	e3400004 	movt	r0, #4
   305dc:	e3a02060 	mov	r2, #96	; 0x60
   305e0:	e92d4010 	push	{r4, lr}
   305e4:	ebfff0b5 	bl	2c8c0 <assertion_failed>

000305e8 <CPtrList::CPtrList()>:
   305e8:	e3a02000 	mov	r2, #0
   305ec:	e5802000 	str	r2, [r0]
   305f0:	e12fff1e 	bx	lr

000305f4 <CPtrList::~CPtrList()>:
   305f4:	e5903000 	ldr	r3, [r0]
   305f8:	e3530000 	cmp	r3, #0
   305fc:	012fff1e 	bxeq	lr
   30600:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30604:	e3401004 	movt	r1, #4
   30608:	e3020efc 	movw	r0, #12028	; 0x2efc
   3060c:	e3400004 	movt	r0, #4
   30610:	e3a0202a 	mov	r2, #42	; 0x2a
   30614:	e92d4010 	push	{r4, lr}
   30618:	ebfff0a8 	bl	2c8c0 <assertion_failed>

0003061c <CPtrList::GetFirst()>:
   3061c:	e5900000 	ldr	r0, [r0]
   30620:	e12fff1e 	bx	lr

00030624 <CPtrList::GetNext(TPtrListElement*)>:
   30624:	e3510000 	cmp	r1, #0
   30628:	e92d4010 	push	{r4, lr}
   3062c:	0a000006 	beq	3064c <CPtrList::GetNext(TPtrListElement*)+0x28>
   30630:	e5912000 	ldr	r2, [r1]
   30634:	e3043d43 	movw	r3, #19779	; 0x4d43
   30638:	e345304c 	movt	r3, #20556	; 0x504c
   3063c:	e1520003 	cmp	r2, r3
   30640:	1a000007 	bne	30664 <CPtrList::GetNext(TPtrListElement*)+0x40>
   30644:	e5910008 	ldr	r0, [r1, #8]
   30648:	e8bd8010 	pop	{r4, pc}
   3064c:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30650:	e3401004 	movt	r1, #4
   30654:	e3020430 	movw	r0, #9264	; 0x2430
   30658:	e3400004 	movt	r0, #4
   3065c:	e3a02034 	mov	r2, #52	; 0x34
   30660:	ebfff096 	bl	2c8c0 <assertion_failed>
   30664:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30668:	e3401004 	movt	r1, #4
   3066c:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   30670:	e3400004 	movt	r0, #4
   30674:	e3a02035 	mov	r2, #53	; 0x35
   30678:	ebfff090 	bl	2c8c0 <assertion_failed>

0003067c <CPtrList::GetPtr(TPtrListElement*)>:
   3067c:	e3510000 	cmp	r1, #0
   30680:	e92d4010 	push	{r4, lr}
   30684:	0a000006 	beq	306a4 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   30688:	e5912000 	ldr	r2, [r1]
   3068c:	e3043d43 	movw	r3, #19779	; 0x4d43
   30690:	e345304c 	movt	r3, #20556	; 0x504c
   30694:	e1520003 	cmp	r2, r3
   30698:	1a000007 	bne	306bc <CPtrList::GetPtr(TPtrListElement*)+0x40>
   3069c:	e591000c 	ldr	r0, [r1, #12]
   306a0:	e8bd8010 	pop	{r4, pc}
   306a4:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   306a8:	e3401004 	movt	r1, #4
   306ac:	e3020430 	movw	r0, #9264	; 0x2430
   306b0:	e3400004 	movt	r0, #4
   306b4:	e3a0203c 	mov	r2, #60	; 0x3c
   306b8:	ebfff080 	bl	2c8c0 <assertion_failed>
   306bc:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   306c0:	e3401004 	movt	r1, #4
   306c4:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   306c8:	e3400004 	movt	r0, #4
   306cc:	e3a0203d 	mov	r2, #61	; 0x3d
   306d0:	ebfff07a 	bl	2c8c0 <assertion_failed>

000306d4 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   306d4:	e92d4070 	push	{r4, r5, r6, lr}
   306d8:	e1a05000 	mov	r5, r0
   306dc:	e3a00010 	mov	r0, #16
   306e0:	e1a06002 	mov	r6, r2
   306e4:	e1a04001 	mov	r4, r1
   306e8:	eb00196b 	bl	36c9c <operator new(unsigned int)>
   306ec:	e5952000 	ldr	r2, [r5]
   306f0:	e3043d43 	movw	r3, #19779	; 0x4d43
   306f4:	e345304c 	movt	r3, #20556	; 0x504c
   306f8:	e3520000 	cmp	r2, #0
   306fc:	e5803000 	str	r3, [r0]
   30700:	e580600c 	str	r6, [r0, #12]
   30704:	0a000016 	beq	30764 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   30708:	e3540000 	cmp	r4, #0
   3070c:	0a00001a 	beq	3077c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   30710:	e5941000 	ldr	r1, [r4]
   30714:	e1510003 	cmp	r1, r3
   30718:	1a00001d 	bne	30794 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   3071c:	e1520004 	cmp	r2, r4
   30720:	0a000009 	beq	3074c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   30724:	e5943004 	ldr	r3, [r4, #4]
   30728:	e9800018 	stmib	r0, {r3, r4}
   3072c:	e3530000 	cmp	r3, #0
   30730:	0a000003 	beq	30744 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   30734:	e5932000 	ldr	r2, [r3]
   30738:	e1520001 	cmp	r2, r1
   3073c:	05830008 	streq	r0, [r3, #8]
   30740:	1a000019 	bne	307ac <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   30744:	e5840004 	str	r0, [r4, #4]
   30748:	e8bd8070 	pop	{r4, r5, r6, pc}
   3074c:	e3a03000 	mov	r3, #0
   30750:	e5820004 	str	r0, [r2, #4]
   30754:	e5803004 	str	r3, [r0, #4]
   30758:	e5802008 	str	r2, [r0, #8]
   3075c:	e5850000 	str	r0, [r5]
   30760:	e8bd8070 	pop	{r4, r5, r6, pc}
   30764:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30768:	e3401004 	movt	r1, #4
   3076c:	e3020f30 	movw	r0, #12080	; 0x2f30
   30770:	e3400004 	movt	r0, #4
   30774:	e3a0204c 	mov	r2, #76	; 0x4c
   30778:	ebfff050 	bl	2c8c0 <assertion_failed>
   3077c:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30780:	e3401004 	movt	r1, #4
   30784:	e3020f40 	movw	r0, #12096	; 0x2f40
   30788:	e3400004 	movt	r0, #4
   3078c:	e3a0204d 	mov	r2, #77	; 0x4d
   30790:	ebfff04a 	bl	2c8c0 <assertion_failed>
   30794:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30798:	e3401004 	movt	r1, #4
   3079c:	e3020f4c 	movw	r0, #12108	; 0x2f4c
   307a0:	e3400004 	movt	r0, #4
   307a4:	e3a0204e 	mov	r2, #78	; 0x4e
   307a8:	ebfff044 	bl	2c8c0 <assertion_failed>
   307ac:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   307b0:	e3401004 	movt	r1, #4
   307b4:	e3020f70 	movw	r0, #12144	; 0x2f70
   307b8:	e3400004 	movt	r0, #4
   307bc:	e3a02060 	mov	r2, #96	; 0x60
   307c0:	ebfff03e 	bl	2c8c0 <assertion_failed>

000307c4 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   307c4:	e92d4070 	push	{r4, r5, r6, lr}
   307c8:	e1a04001 	mov	r4, r1
   307cc:	e1a05000 	mov	r5, r0
   307d0:	e3a00010 	mov	r0, #16
   307d4:	e1a06002 	mov	r6, r2
   307d8:	eb00192f 	bl	36c9c <operator new(unsigned int)>
   307dc:	e3043d43 	movw	r3, #19779	; 0x4d43
   307e0:	e345304c 	movt	r3, #20556	; 0x504c
   307e4:	e3540000 	cmp	r4, #0
   307e8:	e5803000 	str	r3, [r0]
   307ec:	e580600c 	str	r6, [r0, #12]
   307f0:	0a000010 	beq	30838 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   307f4:	e5952000 	ldr	r2, [r5]
   307f8:	e3520000 	cmp	r2, #0
   307fc:	0a000014 	beq	30854 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   30800:	e5942000 	ldr	r2, [r4]
   30804:	e1520003 	cmp	r2, r3
   30808:	1a000017 	bne	3086c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   3080c:	e5943008 	ldr	r3, [r4, #8]
   30810:	e5804004 	str	r4, [r0, #4]
   30814:	e3530000 	cmp	r3, #0
   30818:	e5803008 	str	r3, [r0, #8]
   3081c:	0a000003 	beq	30830 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   30820:	e5931000 	ldr	r1, [r3]
   30824:	e1510002 	cmp	r1, r2
   30828:	05830004 	streq	r0, [r3, #4]
   3082c:	1a000014 	bne	30884 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   30830:	e5840008 	str	r0, [r4, #8]
   30834:	e8bd8070 	pop	{r4, r5, r6, pc}
   30838:	e5953000 	ldr	r3, [r5]
   3083c:	e3530000 	cmp	r3, #0
   30840:	1a000015 	bne	3089c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   30844:	e5803004 	str	r3, [r0, #4]
   30848:	e5803008 	str	r3, [r0, #8]
   3084c:	e5850000 	str	r0, [r5]
   30850:	e8bd8070 	pop	{r4, r5, r6, pc}
   30854:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30858:	e3401004 	movt	r1, #4
   3085c:	e3020f30 	movw	r0, #12080	; 0x2f30
   30860:	e3400004 	movt	r0, #4
   30864:	e3a0207d 	mov	r2, #125	; 0x7d
   30868:	ebfff014 	bl	2c8c0 <assertion_failed>
   3086c:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30870:	e3401004 	movt	r1, #4
   30874:	e3020f98 	movw	r0, #12184	; 0x2f98
   30878:	e3400004 	movt	r0, #4
   3087c:	e3a0207e 	mov	r2, #126	; 0x7e
   30880:	ebfff00e 	bl	2c8c0 <assertion_failed>
   30884:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30888:	e3401004 	movt	r1, #4
   3088c:	e3020fbc 	movw	r0, #12220	; 0x2fbc
   30890:	e3400004 	movt	r0, #4
   30894:	e3a02085 	mov	r2, #133	; 0x85
   30898:	ebfff008 	bl	2c8c0 <assertion_failed>
   3089c:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   308a0:	e3401004 	movt	r1, #4
   308a4:	e3020efc 	movw	r0, #12028	; 0x2efc
   308a8:	e3400004 	movt	r0, #4
   308ac:	e3a02074 	mov	r2, #116	; 0x74
   308b0:	ebfff002 	bl	2c8c0 <assertion_failed>

000308b4 <CPtrList::Remove(TPtrListElement*)>:
   308b4:	e1a03000 	mov	r3, r0
   308b8:	e92d4010 	push	{r4, lr}
   308bc:	e2510000 	subs	r0, r1, #0
   308c0:	0a00002d 	beq	3097c <CPtrList::Remove(TPtrListElement*)+0xc8>
   308c4:	e5901000 	ldr	r1, [r0]
   308c8:	e3042d43 	movw	r2, #19779	; 0x4d43
   308cc:	e345204c 	movt	r2, #20556	; 0x504c
   308d0:	e1510002 	cmp	r1, r2
   308d4:	1a00002e 	bne	30994 <CPtrList::Remove(TPtrListElement*)+0xe0>
   308d8:	e5932000 	ldr	r2, [r3]
   308dc:	e1520000 	cmp	r2, r0
   308e0:	0a000010 	beq	30928 <CPtrList::Remove(TPtrListElement*)+0x74>
   308e4:	e5903004 	ldr	r3, [r0, #4]
   308e8:	e3530000 	cmp	r3, #0
   308ec:	0a00002e 	beq	309ac <CPtrList::Remove(TPtrListElement*)+0xf8>
   308f0:	e593c000 	ldr	ip, [r3]
   308f4:	e15c0001 	cmp	ip, r1
   308f8:	1a000019 	bne	30964 <CPtrList::Remove(TPtrListElement*)+0xb0>
   308fc:	e5902008 	ldr	r2, [r0, #8]
   30900:	e5832008 	str	r2, [r3, #8]
   30904:	e3520000 	cmp	r2, #0
   30908:	0a000003 	beq	3091c <CPtrList::Remove(TPtrListElement*)+0x68>
   3090c:	e5921000 	ldr	r1, [r2]
   30910:	e151000c 	cmp	r1, ip
   30914:	05823004 	streq	r3, [r2, #4]
   30918:	1a000029 	bne	309c4 <CPtrList::Remove(TPtrListElement*)+0x110>
   3091c:	e8bd4010 	pop	{r4, lr}
   30920:	e3a01010 	mov	r1, #16
   30924:	ea0018f4 	b	36cfc <operator delete(void*, unsigned int)>
   30928:	e5922008 	ldr	r2, [r2, #8]
   3092c:	e5832000 	str	r2, [r3]
   30930:	e3520000 	cmp	r2, #0
   30934:	0afffff8 	beq	3091c <CPtrList::Remove(TPtrListElement*)+0x68>
   30938:	e5923000 	ldr	r3, [r2]
   3093c:	e1530001 	cmp	r3, r1
   30940:	03a03000 	moveq	r3, #0
   30944:	05823004 	streq	r3, [r2, #4]
   30948:	0afffff3 	beq	3091c <CPtrList::Remove(TPtrListElement*)+0x68>
   3094c:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30950:	e3401004 	movt	r1, #4
   30954:	e3020fe8 	movw	r0, #12264	; 0x2fe8
   30958:	e3400004 	movt	r0, #4
   3095c:	e3a02098 	mov	r2, #152	; 0x98
   30960:	ebffefd6 	bl	2c8c0 <assertion_failed>
   30964:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30968:	e3401004 	movt	r1, #4
   3096c:	e303002c 	movw	r0, #12332	; 0x302c
   30970:	e3400004 	movt	r0, #4
   30974:	e3a0209f 	mov	r2, #159	; 0x9f
   30978:	ebffefd0 	bl	2c8c0 <assertion_failed>
   3097c:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30980:	e3401004 	movt	r1, #4
   30984:	e3020430 	movw	r0, #9264	; 0x2430
   30988:	e3400004 	movt	r0, #4
   3098c:	e3a0208f 	mov	r2, #143	; 0x8f
   30990:	ebffefca 	bl	2c8c0 <assertion_failed>
   30994:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30998:	e3401004 	movt	r1, #4
   3099c:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   309a0:	e3400004 	movt	r0, #4
   309a4:	e3a02090 	mov	r2, #144	; 0x90
   309a8:	ebffefc4 	bl	2c8c0 <assertion_failed>
   309ac:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   309b0:	e3401004 	movt	r1, #4
   309b4:	e3030014 	movw	r0, #12308	; 0x3014
   309b8:	e3400004 	movt	r0, #4
   309bc:	e3a0209e 	mov	r2, #158	; 0x9e
   309c0:	ebffefbe 	bl	2c8c0 <assertion_failed>
   309c4:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   309c8:	e3401004 	movt	r1, #4
   309cc:	e3020fe8 	movw	r0, #12264	; 0x2fe8
   309d0:	e3400004 	movt	r0, #4
   309d4:	e3a020a4 	mov	r2, #164	; 0xa4
   309d8:	ebffefb8 	bl	2c8c0 <assertion_failed>

000309dc <CPtrList::Find(void*)>:
   309dc:	e5900000 	ldr	r0, [r0]
   309e0:	e3500000 	cmp	r0, #0
   309e4:	012fff1e 	bxeq	lr
   309e8:	e3042d43 	movw	r2, #19779	; 0x4d43
   309ec:	e345204c 	movt	r2, #20556	; 0x504c
   309f0:	ea000005 	b	30a0c <CPtrList::Find(void*)+0x30>
   309f4:	e590300c 	ldr	r3, [r0, #12]
   309f8:	e1530001 	cmp	r3, r1
   309fc:	012fff1e 	bxeq	lr
   30a00:	e5900008 	ldr	r0, [r0, #8]
   30a04:	e3500000 	cmp	r0, #0
   30a08:	012fff1e 	bxeq	lr
   30a0c:	e5903000 	ldr	r3, [r0]
   30a10:	e1530002 	cmp	r3, r2
   30a14:	0afffff6 	beq	309f4 <CPtrList::Find(void*)+0x18>
   30a18:	e3021ef0 	movw	r1, #12016	; 0x2ef0
   30a1c:	e3401004 	movt	r1, #4
   30a20:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   30a24:	e3400004 	movt	r0, #4
   30a28:	e3a020b3 	mov	r2, #179	; 0xb3
   30a2c:	e92d4010 	push	{r4, lr}
   30a30:	ebffefa2 	bl	2c8c0 <assertion_failed>

00030a34 <CScreenDevice::~CScreenDevice()>:
   30a34:	e92d4070 	push	{r4, r5, r6, lr}
   30a38:	e1a04000 	mov	r4, r0
   30a3c:	e59f509c 	ldr	r5, [pc, #156]	; 30ae0 <CScreenDevice::~CScreenDevice()+0xac>
   30a40:	e5805000 	str	r5, [r0]
   30a44:	ebfff334 	bl	2d71c <CDeviceNameService::Get()>
   30a48:	e5942014 	ldr	r2, [r4, #20]
   30a4c:	e3a03000 	mov	r3, #0
   30a50:	e2851020 	add	r1, r5, #32
   30a54:	e2822001 	add	r2, r2, #1
   30a58:	ebfff355 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   30a5c:	e5d43010 	ldrb	r3, [r4, #16]
   30a60:	e3530000 	cmp	r3, #0
   30a64:	0a000003 	beq	30a78 <CScreenDevice::~CScreenDevice()+0x44>
   30a68:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   30a6c:	e3500000 	cmp	r0, #0
   30a70:	0a000000 	beq	30a78 <CScreenDevice::~CScreenDevice()+0x44>
   30a74:	eb00189a 	bl	36ce4 <operator delete[](void*)>
   30a78:	e5945018 	ldr	r5, [r4, #24]
   30a7c:	e3a03000 	mov	r3, #0
   30a80:	e5843024 	str	r3, [r4, #36]	; 0x24
   30a84:	e1550003 	cmp	r5, r3
   30a88:	0a000004 	beq	30aa0 <CScreenDevice::~CScreenDevice()+0x6c>
   30a8c:	e1a00005 	mov	r0, r5
   30a90:	eb00214b 	bl	38fc4 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   30a94:	e3a01098 	mov	r1, #152	; 0x98
   30a98:	e1a00005 	mov	r0, r5
   30a9c:	eb001896 	bl	36cfc <operator delete(void*, unsigned int)>
   30aa0:	e5940020 	ldr	r0, [r4, #32]
   30aa4:	e3a03000 	mov	r3, #0
   30aa8:	e5843018 	str	r3, [r4, #24]
   30aac:	e1500003 	cmp	r0, r3
   30ab0:	0a000000 	beq	30ab8 <CScreenDevice::~CScreenDevice()+0x84>
   30ab4:	eb00188a 	bl	36ce4 <operator delete[](void*)>
   30ab8:	e3a03000 	mov	r3, #0
   30abc:	e2840064 	add	r0, r4, #100	; 0x64
   30ac0:	e5843020 	str	r3, [r4, #32]
   30ac4:	eb002302 	bl	396d4 <CDMAChannel::~CDMAChannel()>
   30ac8:	e284001c 	add	r0, r4, #28
   30acc:	eb0022a1 	bl	39558 <CCharGenerator::~CCharGenerator()>
   30ad0:	e1a00004 	mov	r0, r4
   30ad4:	ebfff1a7 	bl	2d178 <CDevice::~CDevice()>
   30ad8:	e1a00004 	mov	r0, r4
   30adc:	e8bd8070 	pop	{r4, r5, r6, pc}
   30ae0:	00043060 	.word	0x00043060

00030ae4 <CScreenDevice::~CScreenDevice()>:
   30ae4:	e92d4010 	push	{r4, lr}
   30ae8:	e1a04000 	mov	r4, r0
   30aec:	ebffffd0 	bl	30a34 <CScreenDevice::~CScreenDevice()>
   30af0:	e1a00004 	mov	r0, r4
   30af4:	e3a01090 	mov	r1, #144	; 0x90
   30af8:	eb00187f 	bl	36cfc <operator delete(void*, unsigned int)>
   30afc:	e1a00004 	mov	r0, r4
   30b00:	e8bd8010 	pop	{r4, pc}

00030b04 <CScreenDevice::InvertCursor() [clone .part.0]>:
   30b04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30b08:	e1a04000 	mov	r4, r0
   30b0c:	e280701c 	add	r7, r0, #28
   30b10:	e1a00007 	mov	r0, r7
   30b14:	e5949020 	ldr	r9, [r4, #32]
   30b18:	eb002293 	bl	3956c <CCharGenerator::GetUnderline() const>
   30b1c:	e1a08000 	mov	r8, r0
   30b20:	e1a00007 	mov	r0, r7
   30b24:	eb00228e 	bl	39564 <CCharGenerator::GetCharHeight() const>
   30b28:	e1580000 	cmp	r8, r0
   30b2c:	2a000036 	bcs	30c0c <CScreenDevice::InvertCursor() [clone .part.0]+0x108>
   30b30:	e1a06009 	mov	r6, r9
   30b34:	e3a05000 	mov	r5, #0
   30b38:	ea00000c 	b	30b70 <CScreenDevice::InvertCursor() [clone .part.0]+0x6c>
   30b3c:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   30b40:	e0853003 	add	r3, r5, r3
   30b44:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   30b48:	e1530001 	cmp	r3, r1
   30b4c:	2a000003 	bcs	30b60 <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
   30b50:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   30b54:	e0822008 	add	r2, r2, r8
   30b58:	e1520001 	cmp	r2, r1
   30b5c:	3a00001c 	bcc	30bd4 <CScreenDevice::InvertCursor() [clone .part.0]+0xd0>
   30b60:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
   30b64:	e1c630b0 	strh	r3, [r6]
   30b68:	e2855001 	add	r5, r5, #1
   30b6c:	e2866002 	add	r6, r6, #2
   30b70:	e1a00007 	mov	r0, r7
   30b74:	e1a09006 	mov	r9, r6
   30b78:	eb002277 	bl	3955c <CCharGenerator::GetCharWidth() const>
   30b7c:	e1550000 	cmp	r5, r0
   30b80:	2a00001c 	bcs	30bf8 <CScreenDevice::InvertCursor() [clone .part.0]+0xf4>
   30b84:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
   30b88:	e3530000 	cmp	r3, #0
   30b8c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   30b90:	0affffe9 	beq	30b3c <CScreenDevice::InvertCursor() [clone .part.0]+0x38>
   30b94:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   30b98:	e0853003 	add	r3, r5, r3
   30b9c:	e1530002 	cmp	r3, r2
   30ba0:	2afffff0 	bcs	30b68 <CScreenDevice::InvertCursor() [clone .part.0]+0x64>
   30ba4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   30ba8:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   30bac:	e0882002 	add	r2, r8, r2
   30bb0:	e1520001 	cmp	r2, r1
   30bb4:	2affffeb 	bcs	30b68 <CScreenDevice::InvertCursor() [clone .part.0]+0x64>
   30bb8:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
   30bbc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   30bc0:	e1d600b0 	ldrh	r0, [r6]
   30bc4:	e023329c 	mla	r3, ip, r2, r3
   30bc8:	e1a03083 	lsl	r3, r3, #1
   30bcc:	e18100b3 	strh	r0, [r1, r3]
   30bd0:	eaffffe4 	b	30b68 <CScreenDevice::InvertCursor() [clone .part.0]+0x64>
   30bd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   30bd8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   30bdc:	e0233290 	mla	r3, r0, r2, r3
   30be0:	e1a03083 	lsl	r3, r3, #1
   30be4:	e19120b3 	ldrh	r2, [r1, r3]
   30be8:	e1c620b0 	strh	r2, [r6]
   30bec:	e1d425b2 	ldrh	r2, [r4, #82]	; 0x52
   30bf0:	e18120b3 	strh	r2, [r1, r3]
   30bf4:	eaffffdb 	b	30b68 <CScreenDevice::InvertCursor() [clone .part.0]+0x64>
   30bf8:	e2888001 	add	r8, r8, #1
   30bfc:	e1a00007 	mov	r0, r7
   30c00:	eb002257 	bl	39564 <CCharGenerator::GetCharHeight() const>
   30c04:	e1580000 	cmp	r8, r0
   30c08:	3affffc8 	bcc	30b30 <CScreenDevice::InvertCursor() [clone .part.0]+0x2c>
   30c0c:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
   30c10:	e2233001 	eor	r3, r3, #1
   30c14:	e5c43051 	strb	r3, [r4, #81]	; 0x51
   30c18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00030c1c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
   30c1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30c20:	e1a04000 	mov	r4, r0
   30c24:	e1a05001 	mov	r5, r1
   30c28:	e1a07002 	mov	r7, r2
   30c2c:	e1a06003 	mov	r6, r3
   30c30:	ebfff17d 	bl	2d22c <CDevice::CDevice()>
   30c34:	e59d3018 	ldr	r3, [sp, #24]
   30c38:	e5843014 	str	r3, [r4, #20]
   30c3c:	e284001c 	add	r0, r4, #28
   30c40:	e59f3064 	ldr	r3, [pc, #100]	; 30cac <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x90>
   30c44:	e5845008 	str	r5, [r4, #8]
   30c48:	e3a05000 	mov	r5, #0
   30c4c:	e5843000 	str	r3, [r4]
   30c50:	e584700c 	str	r7, [r4, #12]
   30c54:	e5c46010 	strb	r6, [r4, #16]
   30c58:	e5845018 	str	r5, [r4, #24]
   30c5c:	eb00223a 	bl	3954c <CCharGenerator::CCharGenerator()>
   30c60:	e1a02005 	mov	r2, r5
   30c64:	e3a01081 	mov	r1, #129	; 0x81
   30c68:	e2840064 	add	r0, r4, #100	; 0x64
   30c6c:	e5845020 	str	r5, [r4, #32]
   30c70:	e3a03001 	mov	r3, #1
   30c74:	e34f3fdf 	movt	r3, #65503	; 0xffdf
   30c78:	e5845024 	str	r5, [r4, #36]	; 0x24
   30c7c:	e5843050 	str	r3, [r4, #80]	; 0x50
   30c80:	e584503c 	str	r5, [r4, #60]	; 0x3c
   30c84:	e5845040 	str	r5, [r4, #64]	; 0x40
   30c88:	e5845048 	str	r5, [r4, #72]	; 0x48
   30c8c:	e584504c 	str	r5, [r4, #76]	; 0x4c
   30c90:	e5845054 	str	r5, [r4, #84]	; 0x54
   30c94:	e5c45060 	strb	r5, [r4, #96]	; 0x60
   30c98:	eb002255 	bl	395f4 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   30c9c:	e3a03001 	mov	r3, #1
   30ca0:	e1a00004 	mov	r0, r4
   30ca4:	e584308c 	str	r3, [r4, #140]	; 0x8c
   30ca8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30cac:	00043060 	.word	0x00043060

00030cb0 <CScreenDevice::GetWidth() const>:
   30cb0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   30cb4:	e12fff1e 	bx	lr

00030cb8 <CScreenDevice::GetHeight() const>:
   30cb8:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   30cbc:	e12fff1e 	bx	lr

00030cc0 <CScreenDevice::GetColumns() const>:
   30cc0:	e1a03000 	mov	r3, r0
   30cc4:	e92d4010 	push	{r4, lr}
   30cc8:	e280001c 	add	r0, r0, #28
   30ccc:	e5934030 	ldr	r4, [r3, #48]	; 0x30
   30cd0:	eb002221 	bl	3955c <CCharGenerator::GetCharWidth() const>
   30cd4:	e730f014 	udiv	r0, r4, r0
   30cd8:	e8bd8010 	pop	{r4, pc}

00030cdc <CScreenDevice::GetRows() const>:
   30cdc:	e1a03000 	mov	r3, r0
   30ce0:	e92d4010 	push	{r4, lr}
   30ce4:	e280001c 	add	r0, r0, #28
   30ce8:	e5934038 	ldr	r4, [r3, #56]	; 0x38
   30cec:	eb00221c 	bl	39564 <CCharGenerator::GetCharHeight() const>
   30cf0:	e730f014 	udiv	r0, r4, r0
   30cf4:	e8bd8010 	pop	{r4, pc}

00030cf8 <CScreenDevice::GetFrameBuffer()>:
   30cf8:	e5900018 	ldr	r0, [r0, #24]
   30cfc:	e12fff1e 	bx	lr

00030d00 <CScreenDevice::GetStatus()>:
   30d00:	e5912028 	ldr	r2, [r1, #40]	; 0x28
   30d04:	e5802004 	str	r2, [r0, #4]
   30d08:	e5912040 	ldr	r2, [r1, #64]	; 0x40
   30d0c:	e591c024 	ldr	ip, [r1, #36]	; 0x24
   30d10:	e580200c 	str	r2, [r0, #12]
   30d14:	e5912048 	ldr	r2, [r1, #72]	; 0x48
   30d18:	e580c000 	str	ip, [r0]
   30d1c:	e5802014 	str	r2, [r0, #20]
   30d20:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
   30d24:	e5d12050 	ldrb	r2, [r1, #80]	; 0x50
   30d28:	e580c008 	str	ip, [r0, #8]
   30d2c:	e5c0201c 	strb	r2, [r0, #28]
   30d30:	e591c044 	ldr	ip, [r1, #68]	; 0x44
   30d34:	e5912058 	ldr	r2, [r1, #88]	; 0x58
   30d38:	e580c010 	str	ip, [r0, #16]
   30d3c:	e5802024 	str	r2, [r0, #36]	; 0x24
   30d40:	e591c04c 	ldr	ip, [r1, #76]	; 0x4c
   30d44:	e591205c 	ldr	r2, [r1, #92]	; 0x5c
   30d48:	e580c018 	str	ip, [r0, #24]
   30d4c:	e5802028 	str	r2, [r0, #40]	; 0x28
   30d50:	e1d1c5b2 	ldrh	ip, [r1, #82]	; 0x52
   30d54:	e5d12060 	ldrb	r2, [r1, #96]	; 0x60
   30d58:	e5911054 	ldr	r1, [r1, #84]	; 0x54
   30d5c:	e1c0c1be 	strh	ip, [r0, #30]
   30d60:	e5801020 	str	r1, [r0, #32]
   30d64:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   30d68:	e12fff1e 	bx	lr

00030d6c <CScreenDevice::SetStatus(TScreenStatus const&)>:
   30d6c:	e5902028 	ldr	r2, [r0, #40]	; 0x28
   30d70:	e5913004 	ldr	r3, [r1, #4]
   30d74:	e1520003 	cmp	r2, r3
   30d78:	0a000001 	beq	30d84 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   30d7c:	e3a00000 	mov	r0, #0
   30d80:	e12fff1e 	bx	lr
   30d84:	e92d4070 	push	{r4, r5, r6, lr}
   30d88:	e1a05001 	mov	r5, r1
   30d8c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   30d90:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   30d94:	e1a04000 	mov	r4, r0
   30d98:	e1510003 	cmp	r1, r3
   30d9c:	0a000001 	beq	30da8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x3c>
   30da0:	e3a00000 	mov	r0, #0
   30da4:	e8bd8070 	pop	{r4, r5, r6, pc}
   30da8:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
   30dac:	e3500000 	cmp	r0, #0
   30db0:	1a000024 	bne	30e48 <CScreenDevice::SetStatus(TScreenStatus const&)+0xdc>
   30db4:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
   30db8:	e3530000 	cmp	r3, #0
   30dbc:	1afffff7 	bne	30da0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   30dc0:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   30dc4:	e3530000 	cmp	r3, #0
   30dc8:	1afffff4 	bne	30da0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   30dcc:	e5951000 	ldr	r1, [r5]
   30dd0:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   30dd4:	eb0015a7 	bl	36478 <memcpy>
   30dd8:	e5951008 	ldr	r1, [r5, #8]
   30ddc:	e595200c 	ldr	r2, [r5, #12]
   30de0:	e5d5301c 	ldrb	r3, [r5, #28]
   30de4:	e584103c 	str	r1, [r4, #60]	; 0x3c
   30de8:	e5842040 	str	r2, [r4, #64]	; 0x40
   30dec:	e5951010 	ldr	r1, [r5, #16]
   30df0:	e5952014 	ldr	r2, [r5, #20]
   30df4:	e5842048 	str	r2, [r4, #72]	; 0x48
   30df8:	e5841044 	str	r1, [r4, #68]	; 0x44
   30dfc:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   30e00:	e5951018 	ldr	r1, [r5, #24]
   30e04:	e5c43050 	strb	r3, [r4, #80]	; 0x50
   30e08:	e3520000 	cmp	r2, #0
   30e0c:	e1d531be 	ldrh	r3, [r5, #30]
   30e10:	e1c435b2 	strh	r3, [r4, #82]	; 0x52
   30e14:	e1d532b0 	ldrh	r3, [r5, #32]
   30e18:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   30e1c:	e584104c 	str	r1, [r4, #76]	; 0x4c
   30e20:	e1d512b2 	ldrh	r1, [r5, #34]	; 0x22
   30e24:	e1c435b4 	strh	r3, [r4, #84]	; 0x54
   30e28:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   30e2c:	e584305c 	str	r3, [r4, #92]	; 0x5c
   30e30:	e1c415b6 	strh	r1, [r4, #86]	; 0x56
   30e34:	e5842058 	str	r2, [r4, #88]	; 0x58
   30e38:	1a00000f 	bne	30e7c <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
   30e3c:	f57ff05f 	dmb	sy
   30e40:	e3a00001 	mov	r0, #1
   30e44:	e8bd8070 	pop	{r4, r5, r6, pc}
   30e48:	eb001dab 	bl	384fc <EnterCritical>
   30e4c:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
   30e50:	e3530000 	cmp	r3, #0
   30e54:	1a000003 	bne	30e68 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
   30e58:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   30e5c:	e3530000 	cmp	r3, #0
   30e60:	05942028 	ldreq	r2, [r4, #40]	; 0x28
   30e64:	0affffd8 	beq	30dcc <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   30e68:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   30e6c:	e3530000 	cmp	r3, #0
   30e70:	0affffca 	beq	30da0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   30e74:	eb001dcb 	bl	385a8 <LeaveCritical>
   30e78:	eaffffc8 	b	30da0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   30e7c:	eb001dc9 	bl	385a8 <LeaveCritical>
   30e80:	eaffffed 	b	30e3c <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>

00030e84 <CScreenDevice::CarriageReturn()>:
   30e84:	e3a03000 	mov	r3, #0
   30e88:	e5803048 	str	r3, [r0, #72]	; 0x48
   30e8c:	e12fff1e 	bx	lr

00030e90 <CScreenDevice::CursorHome()>:
   30e90:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   30e94:	e3a02000 	mov	r2, #0
   30e98:	e580304c 	str	r3, [r0, #76]	; 0x4c
   30e9c:	e5802048 	str	r2, [r0, #72]	; 0x48
   30ea0:	e12fff1e 	bx	lr

00030ea4 <CScreenDevice::CursorLeft()>:
   30ea4:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   30ea8:	e92d4070 	push	{r4, r5, r6, lr}
   30eac:	e1a04000 	mov	r4, r0
   30eb0:	e3530000 	cmp	r3, #0
   30eb4:	1a00000f 	bne	30ef8 <CScreenDevice::CursorLeft()+0x54>
   30eb8:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   30ebc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   30ec0:	e1520003 	cmp	r2, r3
   30ec4:	98bd8070 	popls	{r4, r5, r6, pc}
   30ec8:	e5905030 	ldr	r5, [r0, #48]	; 0x30
   30ecc:	e280601c 	add	r6, r0, #28
   30ed0:	e1a00006 	mov	r0, r6
   30ed4:	eb0021a0 	bl	3955c <CCharGenerator::GetCharWidth() const>
   30ed8:	e0455000 	sub	r5, r5, r0
   30edc:	e1a00006 	mov	r0, r6
   30ee0:	e5845048 	str	r5, [r4, #72]	; 0x48
   30ee4:	eb00219e 	bl	39564 <CCharGenerator::GetCharHeight() const>
   30ee8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   30eec:	e0433000 	sub	r3, r3, r0
   30ef0:	e584304c 	str	r3, [r4, #76]	; 0x4c
   30ef4:	e8bd8070 	pop	{r4, r5, r6, pc}
   30ef8:	e280001c 	add	r0, r0, #28
   30efc:	eb002196 	bl	3955c <CCharGenerator::GetCharWidth() const>
   30f00:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   30f04:	e0433000 	sub	r3, r3, r0
   30f08:	e5843048 	str	r3, [r4, #72]	; 0x48
   30f0c:	e8bd8070 	pop	{r4, r5, r6, pc}

00030f10 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   30f10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30f14:	e280701c 	add	r7, r0, #28
   30f18:	e1a04002 	mov	r4, r2
   30f1c:	e1a05000 	mov	r5, r0
   30f20:	e1a00007 	mov	r0, r7
   30f24:	e1a06001 	mov	r6, r1
   30f28:	e2444001 	sub	r4, r4, #1
   30f2c:	eb00218a 	bl	3955c <CCharGenerator::GetCharWidth() const>
   30f30:	e1a03000 	mov	r3, r0
   30f34:	e1a00007 	mov	r0, r7
   30f38:	e0040493 	mul	r4, r3, r4
   30f3c:	eb002188 	bl	39564 <CCharGenerator::GetCharHeight() const>
   30f40:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   30f44:	e1530004 	cmp	r3, r4
   30f48:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   30f4c:	e2466001 	sub	r6, r6, #1
   30f50:	e5953040 	ldr	r3, [r5, #64]	; 0x40
   30f54:	e0000690 	mul	r0, r0, r6
   30f58:	e1530000 	cmp	r3, r0
   30f5c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   30f60:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   30f64:	e1530000 	cmp	r3, r0
   30f68:	85854048 	strhi	r4, [r5, #72]	; 0x48
   30f6c:	8585004c 	strhi	r0, [r5, #76]	; 0x4c
   30f70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00030f74 <CScreenDevice::CursorUp()>:
   30f74:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   30f78:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   30f7c:	e1520003 	cmp	r2, r3
   30f80:	912fff1e 	bxls	lr
   30f84:	e92d4010 	push	{r4, lr}
   30f88:	e1a04000 	mov	r4, r0
   30f8c:	e280001c 	add	r0, r0, #28
   30f90:	eb002173 	bl	39564 <CCharGenerator::GetCharHeight() const>
   30f94:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   30f98:	e0433000 	sub	r3, r3, r0
   30f9c:	e584304c 	str	r3, [r4, #76]	; 0x4c
   30fa0:	e8bd8010 	pop	{r4, pc}

00030fa4 <CScreenDevice::DeleteChars(unsigned int)>:
   30fa4:	e12fff1e 	bx	lr

00030fa8 <CScreenDevice::DeleteLines(unsigned int)>:
   30fa8:	e12fff1e 	bx	lr

00030fac <CScreenDevice::GetTextBackgroundColor()>:
   30fac:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
   30fb0:	e3530000 	cmp	r3, #0
   30fb4:	11d005b2 	ldrhne	r0, [r0, #82]	; 0x52
   30fb8:	01d005b4 	ldrheq	r0, [r0, #84]	; 0x54
   30fbc:	e12fff1e 	bx	lr

00030fc0 <CScreenDevice::GetTextColor()>:
   30fc0:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
   30fc4:	e3530000 	cmp	r3, #0
   30fc8:	11d005b4 	ldrhne	r0, [r0, #84]	; 0x54
   30fcc:	01d005b2 	ldrheq	r0, [r0, #82]	; 0x52
   30fd0:	e12fff1e 	bx	lr

00030fd4 <CScreenDevice::InsertLines(unsigned int)>:
   30fd4:	e12fff1e 	bx	lr

00030fd8 <CScreenDevice::InsertMode(bool)>:
   30fd8:	e5c01057 	strb	r1, [r0, #87]	; 0x57
   30fdc:	e12fff1e 	bx	lr

00030fe0 <CScreenDevice::ReverseScroll()>:
   30fe0:	e12fff1e 	bx	lr

00030fe4 <CScreenDevice::SetCursorMode(bool)>:
   30fe4:	e5c01050 	strb	r1, [r0, #80]	; 0x50
   30fe8:	e12fff1e 	bx	lr

00030fec <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   30fec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30ff0:	e280701c 	add	r7, r0, #28
   30ff4:	e1a05000 	mov	r5, r0
   30ff8:	e1a04001 	mov	r4, r1
   30ffc:	e1a00007 	mov	r0, r7
   31000:	e1a06002 	mov	r6, r2
   31004:	e2444001 	sub	r4, r4, #1
   31008:	eb002155 	bl	39564 <CCharGenerator::GetCharHeight() const>
   3100c:	e1a03000 	mov	r3, r0
   31010:	e1a00007 	mov	r0, r7
   31014:	e0040493 	mul	r4, r3, r4
   31018:	eb002151 	bl	39564 <CCharGenerator::GetCharHeight() const>
   3101c:	e5951038 	ldr	r1, [r5, #56]	; 0x38
   31020:	e0020096 	mul	r2, r6, r0
   31024:	e1510002 	cmp	r1, r2
   31028:	31a03001 	movcc	r3, r1
   3102c:	21a03002 	movcs	r3, r2
   31030:	e1540003 	cmp	r4, r3
   31034:	33a03001 	movcc	r3, #1
   31038:	23a03000 	movcs	r3, #0
   3103c:	e1510002 	cmp	r1, r2
   31040:	33a03000 	movcc	r3, #0
   31044:	e3530000 	cmp	r3, #0
   31048:	e3a03000 	mov	r3, #0
   3104c:	15854040 	strne	r4, [r5, #64]	; 0x40
   31050:	15852044 	strne	r2, [r5, #68]	; 0x44
   31054:	05954040 	ldreq	r4, [r5, #64]	; 0x40
   31058:	e585404c 	str	r4, [r5, #76]	; 0x4c
   3105c:	e5853048 	str	r3, [r5, #72]	; 0x48
   31060:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00031064 <CScreenDevice::SetStandoutMode(unsigned int)>:
   31064:	e351006b 	cmp	r1, #107	; 0x6b
   31068:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   3106c:	ea00006d 	b	31228 <CScreenDevice::SetStandoutMode(unsigned int)+0x1c4>
   31070:	00031248 	.word	0x00031248
   31074:	0003122c 	.word	0x0003122c
   31078:	0003123c 	.word	0x0003123c
   3107c:	00031228 	.word	0x00031228
   31080:	00031228 	.word	0x00031228
   31084:	00031228 	.word	0x00031228
   31088:	00031228 	.word	0x00031228
   3108c:	000313d4 	.word	0x000313d4
   31090:	00031228 	.word	0x00031228
   31094:	00031228 	.word	0x00031228
   31098:	00031228 	.word	0x00031228
   3109c:	00031228 	.word	0x00031228
   310a0:	00031228 	.word	0x00031228
   310a4:	00031228 	.word	0x00031228
   310a8:	00031228 	.word	0x00031228
   310ac:	00031228 	.word	0x00031228
   310b0:	00031228 	.word	0x00031228
   310b4:	00031228 	.word	0x00031228
   310b8:	00031228 	.word	0x00031228
   310bc:	00031228 	.word	0x00031228
   310c0:	00031228 	.word	0x00031228
   310c4:	00031228 	.word	0x00031228
   310c8:	00031228 	.word	0x00031228
   310cc:	00031228 	.word	0x00031228
   310d0:	00031228 	.word	0x00031228
   310d4:	00031228 	.word	0x00031228
   310d8:	00031228 	.word	0x00031228
   310dc:	00031248 	.word	0x00031248
   310e0:	00031228 	.word	0x00031228
   310e4:	00031228 	.word	0x00031228
   310e8:	00031328 	.word	0x00031328
   310ec:	0003131c 	.word	0x0003131c
   310f0:	00031310 	.word	0x00031310
   310f4:	00031300 	.word	0x00031300
   310f8:	0003123c 	.word	0x0003123c
   310fc:	000312f0 	.word	0x000312f0
   31100:	000312e4 	.word	0x000312e4
   31104:	000312d4 	.word	0x000312d4
   31108:	00031228 	.word	0x00031228
   3110c:	00031228 	.word	0x00031228
   31110:	000312c8 	.word	0x000312c8
   31114:	000312bc 	.word	0x000312bc
   31118:	000312b0 	.word	0x000312b0
   3111c:	000312a0 	.word	0x000312a0
   31120:	00031294 	.word	0x00031294
   31124:	00031284 	.word	0x00031284
   31128:	00031278 	.word	0x00031278
   3112c:	00031268 	.word	0x00031268
   31130:	00031228 	.word	0x00031228
   31134:	00031228 	.word	0x00031228
   31138:	00031228 	.word	0x00031228
   3113c:	00031228 	.word	0x00031228
   31140:	00031228 	.word	0x00031228
   31144:	00031228 	.word	0x00031228
   31148:	00031228 	.word	0x00031228
   3114c:	00031228 	.word	0x00031228
   31150:	00031228 	.word	0x00031228
   31154:	00031228 	.word	0x00031228
   31158:	00031228 	.word	0x00031228
   3115c:	00031228 	.word	0x00031228
   31160:	00031228 	.word	0x00031228
   31164:	00031228 	.word	0x00031228
   31168:	00031228 	.word	0x00031228
   3116c:	00031228 	.word	0x00031228
   31170:	00031228 	.word	0x00031228
   31174:	00031228 	.word	0x00031228
   31178:	00031228 	.word	0x00031228
   3117c:	00031228 	.word	0x00031228
   31180:	00031228 	.word	0x00031228
   31184:	00031228 	.word	0x00031228
   31188:	00031228 	.word	0x00031228
   3118c:	00031228 	.word	0x00031228
   31190:	00031228 	.word	0x00031228
   31194:	00031228 	.word	0x00031228
   31198:	00031228 	.word	0x00031228
   3119c:	00031228 	.word	0x00031228
   311a0:	00031228 	.word	0x00031228
   311a4:	00031228 	.word	0x00031228
   311a8:	00031228 	.word	0x00031228
   311ac:	00031228 	.word	0x00031228
   311b0:	00031228 	.word	0x00031228
   311b4:	00031228 	.word	0x00031228
   311b8:	00031228 	.word	0x00031228
   311bc:	00031228 	.word	0x00031228
   311c0:	00031228 	.word	0x00031228
   311c4:	00031228 	.word	0x00031228
   311c8:	00031228 	.word	0x00031228
   311cc:	00031228 	.word	0x00031228
   311d0:	00031228 	.word	0x00031228
   311d4:	00031228 	.word	0x00031228
   311d8:	000313c8 	.word	0x000313c8
   311dc:	0003122c 	.word	0x0003122c
   311e0:	0003125c 	.word	0x0003125c
   311e4:	0003138c 	.word	0x0003138c
   311e8:	00031380 	.word	0x00031380
   311ec:	00031374 	.word	0x00031374
   311f0:	00031368 	.word	0x00031368
   311f4:	0003135c 	.word	0x0003135c
   311f8:	00031228 	.word	0x00031228
   311fc:	00031228 	.word	0x00031228
   31200:	00031350 	.word	0x00031350
   31204:	00031340 	.word	0x00031340
   31208:	00031334 	.word	0x00031334
   3120c:	000313b0 	.word	0x000313b0
   31210:	000313a4 	.word	0x000313a4
   31214:	00031398 	.word	0x00031398
   31218:	000313bc 	.word	0x000313bc
   3121c:	00031220 	.word	0x00031220
   31220:	e3e03020 	mvn	r3, #32
   31224:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   31228:	e12fff1e 	bx	lr
   3122c:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
   31230:	e34f3fff 	movt	r3, #65535	; 0xffff
   31234:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31238:	e12fff1e 	bx	lr
   3123c:	e3a03015 	mov	r3, #21
   31240:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31244:	e12fff1e 	bx	lr
   31248:	e3a02000 	mov	r2, #0
   3124c:	e3e03020 	mvn	r3, #32
   31250:	e5c02056 	strb	r2, [r0, #86]	; 0x56
   31254:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31258:	e12fff1e 	bx	lr
   3125c:	e30537ca 	movw	r3, #22474	; 0x57ca
   31260:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31264:	e12fff1e 	bx	lr
   31268:	e30a3d55 	movw	r3, #44373	; 0xad55
   3126c:	e34f3fff 	movt	r3, #65535	; 0xffff
   31270:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   31274:	e12fff1e 	bx	lr
   31278:	e3003555 	movw	r3, #1365	; 0x555
   3127c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   31280:	e12fff1e 	bx	lr
   31284:	e30a3815 	movw	r3, #43029	; 0xa815
   31288:	e34f3fff 	movt	r3, #65535	; 0xffff
   3128c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   31290:	e12fff1e 	bx	lr
   31294:	e3a03015 	mov	r3, #21
   31298:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   3129c:	e12fff1e 	bx	lr
   312a0:	e30a3a80 	movw	r3, #43648	; 0xaa80
   312a4:	e34f3fff 	movt	r3, #65535	; 0xffff
   312a8:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   312ac:	e12fff1e 	bx	lr
   312b0:	e3a03d15 	mov	r3, #1344	; 0x540
   312b4:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   312b8:	e12fff1e 	bx	lr
   312bc:	e3a03b2a 	mov	r3, #43008	; 0xa800
   312c0:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   312c4:	e12fff1e 	bx	lr
   312c8:	e3a03000 	mov	r3, #0
   312cc:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   312d0:	e12fff1e 	bx	lr
   312d4:	e30a3d55 	movw	r3, #44373	; 0xad55
   312d8:	e34f3fff 	movt	r3, #65535	; 0xffff
   312dc:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   312e0:	e12fff1e 	bx	lr
   312e4:	e3003555 	movw	r3, #1365	; 0x555
   312e8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   312ec:	e12fff1e 	bx	lr
   312f0:	e30a3815 	movw	r3, #43029	; 0xa815
   312f4:	e34f3fff 	movt	r3, #65535	; 0xffff
   312f8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   312fc:	e12fff1e 	bx	lr
   31300:	e30a3a80 	movw	r3, #43648	; 0xaa80
   31304:	e34f3fff 	movt	r3, #65535	; 0xffff
   31308:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   3130c:	e12fff1e 	bx	lr
   31310:	e3a03d15 	mov	r3, #1344	; 0x540
   31314:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31318:	e12fff1e 	bx	lr
   3131c:	e3a03b2a 	mov	r3, #43008	; 0xa800
   31320:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31324:	e12fff1e 	bx	lr
   31328:	e3a03000 	mov	r3, #0
   3132c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31330:	e12fff1e 	bx	lr
   31334:	e30537ca 	movw	r3, #22474	; 0x57ca
   31338:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   3133c:	e12fff1e 	bx	lr
   31340:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
   31344:	e34f3fff 	movt	r3, #65535	; 0xffff
   31348:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   3134c:	e12fff1e 	bx	lr
   31350:	e305328a 	movw	r3, #21130	; 0x528a
   31354:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   31358:	e12fff1e 	bx	lr
   3135c:	e3e03020 	mvn	r3, #32
   31360:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31364:	e12fff1e 	bx	lr
   31368:	e30537df 	movw	r3, #22495	; 0x57df
   3136c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31370:	e12fff1e 	bx	lr
   31374:	e3e03e56 	mvn	r3, #1376	; 0x560
   31378:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   3137c:	e12fff1e 	bx	lr
   31380:	e305329f 	movw	r3, #21151	; 0x529f
   31384:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31388:	e12fff1e 	bx	lr
   3138c:	e3e03035 	mvn	r3, #53	; 0x35
   31390:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   31394:	e12fff1e 	bx	lr
   31398:	e3e03e56 	mvn	r3, #1376	; 0x560
   3139c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   313a0:	e12fff1e 	bx	lr
   313a4:	e305329f 	movw	r3, #21151	; 0x529f
   313a8:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   313ac:	e12fff1e 	bx	lr
   313b0:	e3e03035 	mvn	r3, #53	; 0x35
   313b4:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   313b8:	e12fff1e 	bx	lr
   313bc:	e30537df 	movw	r3, #22495	; 0x57df
   313c0:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
   313c4:	e12fff1e 	bx	lr
   313c8:	e305328a 	movw	r3, #21130	; 0x528a
   313cc:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   313d0:	e12fff1e 	bx	lr
   313d4:	e3a03001 	mov	r3, #1
   313d8:	e5c03056 	strb	r3, [r0, #86]	; 0x56
   313dc:	e12fff1e 	bx	lr

000313e0 <CScreenDevice::Scroll()>:
   313e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   313e4:	e1a06000 	mov	r6, r0
   313e8:	e280001c 	add	r0, r0, #28
   313ec:	e24dd008 	sub	sp, sp, #8
   313f0:	eb00205b 	bl	39564 <CCharGenerator::GetCharHeight() const>
   313f4:	e5961040 	ldr	r1, [r6, #64]	; 0x40
   313f8:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
   313fc:	e1a04000 	mov	r4, r0
   31400:	e5967044 	ldr	r7, [r6, #68]	; 0x44
   31404:	e5962024 	ldr	r2, [r6, #36]	; 0x24
   31408:	e0477001 	sub	r7, r7, r1
   3140c:	e0477000 	sub	r7, r7, r0
   31410:	e1a00083 	lsl	r0, r3, #1
   31414:	e0050193 	mul	r5, r3, r1
   31418:	e0070790 	mul	r7, r0, r7
   3141c:	e0825085 	add	r5, r2, r5, lsl #1
   31420:	e3570000 	cmp	r7, #0
   31424:	1a00002a 	bne	314d4 <CScreenDevice::Scroll()+0xf4>
   31428:	e0020493 	mul	r2, r3, r4
   3142c:	e7fd20d2 	ubfx	r2, r2, #1, #30
   31430:	e2420001 	sub	r0, r2, #1
   31434:	e3520000 	cmp	r2, #0
   31438:	0a000023 	beq	314cc <CScreenDevice::Scroll()+0xec>
   3143c:	e1d6c5b4 	ldrh	ip, [r6, #84]	; 0x54
   31440:	e7e03155 	ubfx	r3, r5, #2, #1
   31444:	e3500005 	cmp	r0, #5
   31448:	9a000010 	bls	31490 <CScreenDevice::Scroll()+0xb0>
   3144c:	e3530000 	cmp	r3, #0
   31450:	e1a0e005 	mov	lr, r5
   31454:	12420002 	subne	r0, r2, #2
   31458:	e0422003 	sub	r2, r2, r3
   3145c:	eea0cb90 	vdup.32	q8, ip
   31460:	e0853103 	add	r3, r5, r3, lsl #2
   31464:	e1a01122 	lsr	r1, r2, #2
   31468:	148ec004 	strne	ip, [lr], #4
   3146c:	e0831201 	add	r1, r3, r1, lsl #4
   31470:	f4430add 	vst1.64	{d16-d17}, [r3 :64]!
   31474:	e1510003 	cmp	r1, r3
   31478:	1afffffc 	bne	31470 <CScreenDevice::Scroll()+0x90>
   3147c:	e3120003 	tst	r2, #3
   31480:	0a000011 	beq	314cc <CScreenDevice::Scroll()+0xec>
   31484:	e3c22003 	bic	r2, r2, #3
   31488:	e0400002 	sub	r0, r0, r2
   3148c:	e08e5102 	add	r5, lr, r2, lsl #2
   31490:	e3500000 	cmp	r0, #0
   31494:	e585c000 	str	ip, [r5]
   31498:	0a00000b 	beq	314cc <CScreenDevice::Scroll()+0xec>
   3149c:	e3500001 	cmp	r0, #1
   314a0:	e585c004 	str	ip, [r5, #4]
   314a4:	0a000008 	beq	314cc <CScreenDevice::Scroll()+0xec>
   314a8:	e3500002 	cmp	r0, #2
   314ac:	e585c008 	str	ip, [r5, #8]
   314b0:	0a000005 	beq	314cc <CScreenDevice::Scroll()+0xec>
   314b4:	e3500003 	cmp	r0, #3
   314b8:	e585c00c 	str	ip, [r5, #12]
   314bc:	0a000002 	beq	314cc <CScreenDevice::Scroll()+0xec>
   314c0:	e3500004 	cmp	r0, #4
   314c4:	e585c010 	str	ip, [r5, #16]
   314c8:	1585c014 	strne	ip, [r5, #20]
   314cc:	e28dd008 	add	sp, sp, #8
   314d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   314d4:	e0811004 	add	r1, r1, r4
   314d8:	e2868064 	add	r8, r6, #100	; 0x64
   314dc:	e1a03007 	mov	r3, r7
   314e0:	e3a0c000 	mov	ip, #0
   314e4:	e3c77003 	bic	r7, r7, #3
   314e8:	e0222190 	mla	r2, r0, r1, r2
   314ec:	e1a01005 	mov	r1, r5
   314f0:	e3a00002 	mov	r0, #2
   314f4:	e88d1001 	stm	sp, {r0, ip}
   314f8:	e1a00008 	mov	r0, r8
   314fc:	e0855007 	add	r5, r5, r7
   31500:	eb0020ae 	bl	397c0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
   31504:	e1a00008 	mov	r0, r8
   31508:	eb002292 	bl	39f58 <CDMAChannel::Start()>
   3150c:	e1a00008 	mov	r0, r8
   31510:	eb0022e6 	bl	3a0b0 <CDMAChannel::Wait()>
   31514:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
   31518:	eaffffc2 	b	31428 <CScreenDevice::Scroll()+0x48>

0003151c <CScreenDevice::CursorDown()>:
   3151c:	e92d4070 	push	{r4, r5, r6, lr}
   31520:	e1a04000 	mov	r4, r0
   31524:	e280501c 	add	r5, r0, #28
   31528:	e1a00005 	mov	r0, r5
   3152c:	eb00200c 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31530:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   31534:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   31538:	e0800002 	add	r0, r0, r2
   3153c:	e584004c 	str	r0, [r4, #76]	; 0x4c
   31540:	e1500003 	cmp	r0, r3
   31544:	38bd8070 	popcc	{r4, r5, r6, pc}
   31548:	e1a00004 	mov	r0, r4
   3154c:	ebffffa3 	bl	313e0 <CScreenDevice::Scroll()>
   31550:	e1a00005 	mov	r0, r5
   31554:	eb002002 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31558:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   3155c:	e0433000 	sub	r3, r3, r0
   31560:	e584304c 	str	r3, [r4, #76]	; 0x4c
   31564:	e8bd8070 	pop	{r4, r5, r6, pc}

00031568 <CScreenDevice::NewLine()>:
   31568:	e92d4070 	push	{r4, r5, r6, lr}
   3156c:	e1a04000 	mov	r4, r0
   31570:	e280501c 	add	r5, r0, #28
   31574:	e3a03000 	mov	r3, #0
   31578:	e1a00005 	mov	r0, r5
   3157c:	e5843048 	str	r3, [r4, #72]	; 0x48
   31580:	eb001ff7 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31584:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   31588:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3158c:	e0800002 	add	r0, r0, r2
   31590:	e584004c 	str	r0, [r4, #76]	; 0x4c
   31594:	e1500003 	cmp	r0, r3
   31598:	38bd8070 	popcc	{r4, r5, r6, pc}
   3159c:	e1a00004 	mov	r0, r4
   315a0:	ebffff8e 	bl	313e0 <CScreenDevice::Scroll()>
   315a4:	e1a00005 	mov	r0, r5
   315a8:	eb001fed 	bl	39564 <CCharGenerator::GetCharHeight() const>
   315ac:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   315b0:	e0433000 	sub	r3, r3, r0
   315b4:	e584304c 	str	r3, [r4, #76]	; 0x4c
   315b8:	e8bd8070 	pop	{r4, r5, r6, pc}

000315bc <CScreenDevice::CursorRight()>:
   315bc:	e92d4070 	push	{r4, r5, r6, lr}
   315c0:	e1a04000 	mov	r4, r0
   315c4:	e280501c 	add	r5, r0, #28
   315c8:	e1a00005 	mov	r0, r5
   315cc:	eb001fe2 	bl	3955c <CCharGenerator::GetCharWidth() const>
   315d0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   315d4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   315d8:	e0800002 	add	r0, r0, r2
   315dc:	e5840048 	str	r0, [r4, #72]	; 0x48
   315e0:	e1500003 	cmp	r0, r3
   315e4:	38bd8070 	popcc	{r4, r5, r6, pc}
   315e8:	e3a03000 	mov	r3, #0
   315ec:	e1a00005 	mov	r0, r5
   315f0:	e5843048 	str	r3, [r4, #72]	; 0x48
   315f4:	eb001fda 	bl	39564 <CCharGenerator::GetCharHeight() const>
   315f8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   315fc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   31600:	e0800002 	add	r0, r0, r2
   31604:	e584004c 	str	r0, [r4, #76]	; 0x4c
   31608:	e1500003 	cmp	r0, r3
   3160c:	38bd8070 	popcc	{r4, r5, r6, pc}
   31610:	e1a00004 	mov	r0, r4
   31614:	ebffff71 	bl	313e0 <CScreenDevice::Scroll()>
   31618:	e1a00005 	mov	r0, r5
   3161c:	eb001fd0 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31620:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   31624:	e0433000 	sub	r3, r3, r0
   31628:	e584304c 	str	r3, [r4, #76]	; 0x4c
   3162c:	e8bd8070 	pop	{r4, r5, r6, pc}

00031630 <CScreenDevice::Tabulator()>:
   31630:	e92d4070 	push	{r4, r5, r6, lr}
   31634:	e1a04000 	mov	r4, r0
   31638:	e280501c 	add	r5, r0, #28
   3163c:	e1a00005 	mov	r0, r5
   31640:	eb001fc5 	bl	3955c <CCharGenerator::GetCharWidth() const>
   31644:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   31648:	e1a00180 	lsl	r0, r0, #3
   3164c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   31650:	e0803003 	add	r3, r0, r3
   31654:	e733f013 	udiv	r3, r3, r0
   31658:	e0030390 	mul	r3, r0, r3
   3165c:	e5843048 	str	r3, [r4, #72]	; 0x48
   31660:	e1530002 	cmp	r3, r2
   31664:	38bd8070 	popcc	{r4, r5, r6, pc}
   31668:	e3a03000 	mov	r3, #0
   3166c:	e1a00005 	mov	r0, r5
   31670:	e5843048 	str	r3, [r4, #72]	; 0x48
   31674:	eb001fba 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31678:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   3167c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   31680:	e0800002 	add	r0, r0, r2
   31684:	e584004c 	str	r0, [r4, #76]	; 0x4c
   31688:	e1500003 	cmp	r0, r3
   3168c:	38bd8070 	popcc	{r4, r5, r6, pc}
   31690:	e1a00004 	mov	r0, r4
   31694:	ebffff51 	bl	313e0 <CScreenDevice::Scroll()>
   31698:	e1a00005 	mov	r0, r5
   3169c:	eb001fb0 	bl	39564 <CCharGenerator::GetCharHeight() const>
   316a0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   316a4:	e0433000 	sub	r3, r3, r0
   316a8:	e584304c 	str	r3, [r4, #76]	; 0x4c
   316ac:	e8bd8070 	pop	{r4, r5, r6, pc}

000316b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   316b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   316b4:	e280701c 	add	r7, r0, #28
   316b8:	e1a06000 	mov	r6, r0
   316bc:	e24dd00c 	sub	sp, sp, #12
   316c0:	e3a08000 	mov	r8, #0
   316c4:	e1a00007 	mov	r0, r7
   316c8:	e1a09001 	mov	r9, r1
   316cc:	e1a0a003 	mov	sl, r3
   316d0:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
   316d4:	e58d2004 	str	r2, [sp, #4]
   316d8:	eb001fa1 	bl	39564 <CCharGenerator::GetCharHeight() const>
   316dc:	e1500008 	cmp	r0, r8
   316e0:	9a000025 	bls	3177c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
   316e4:	e59d5004 	ldr	r5, [sp, #4]
   316e8:	e3a04000 	mov	r4, #0
   316ec:	ea000013 	b	31740 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>
   316f0:	eb001f9f 	bl	39574 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   316f4:	e1a0200b 	mov	r2, fp
   316f8:	e3500000 	cmp	r0, #0
   316fc:	1a000003 	bne	31710 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x60>
   31700:	e5d63056 	ldrb	r3, [r6, #86]	; 0x56
   31704:	e3530000 	cmp	r3, #0
   31708:	11d625b2 	ldrhne	r2, [r6, #82]	; 0x52
   3170c:	01d625b4 	ldrheq	r2, [r6, #84]	; 0x54
   31710:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   31714:	e2844001 	add	r4, r4, #1
   31718:	e1530005 	cmp	r3, r5
   3171c:	9a000006 	bls	3173c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
   31720:	e5963034 	ldr	r3, [r6, #52]	; 0x34
   31724:	e153000a 	cmp	r3, sl
   31728:	8596302c 	ldrhi	r3, [r6, #44]	; 0x2c
   3172c:	85961024 	ldrhi	r1, [r6, #36]	; 0x24
   31730:	80235a93 	mlahi	r3, r3, sl, r5
   31734:	81a03083 	lslhi	r3, r3, #1
   31738:	818120b3 	strhhi	r2, [r1, r3]
   3173c:	e2855001 	add	r5, r5, #1
   31740:	e1a00007 	mov	r0, r7
   31744:	eb001f84 	bl	3955c <CCharGenerator::GetCharWidth() const>
   31748:	e1a0c000 	mov	ip, r0
   3174c:	e1a02004 	mov	r2, r4
   31750:	e1a03008 	mov	r3, r8
   31754:	e1a01009 	mov	r1, r9
   31758:	e1a00007 	mov	r0, r7
   3175c:	e15c0004 	cmp	ip, r4
   31760:	8affffe2 	bhi	316f0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>
   31764:	e2888001 	add	r8, r8, #1
   31768:	e1a00007 	mov	r0, r7
   3176c:	eb001f7c 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31770:	e28aa001 	add	sl, sl, #1
   31774:	e1500008 	cmp	r0, r8
   31778:	8affffd9 	bhi	316e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   3177c:	e28dd00c 	add	sp, sp, #12
   31780:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031784 <CScreenDevice::DisplayChar(char)>:
   31784:	e6ef3071 	uxtb	r3, r1
   31788:	e353001f 	cmp	r3, #31
   3178c:	912fff1e 	bxls	lr
   31790:	e92d4030 	push	{r4, r5, lr}
   31794:	e1a04000 	mov	r4, r0
   31798:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
   3179c:	e24dd00c 	sub	sp, sp, #12
   317a0:	e284501c 	add	r5, r4, #28
   317a4:	e3500000 	cmp	r0, #0
   317a8:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   317ac:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   317b0:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
   317b4:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
   317b8:	e58d0000 	str	r0, [sp]
   317bc:	e1a00004 	mov	r0, r4
   317c0:	ebffffba 	bl	316b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   317c4:	e1a00005 	mov	r0, r5
   317c8:	eb001f63 	bl	3955c <CCharGenerator::GetCharWidth() const>
   317cc:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   317d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   317d4:	e0800002 	add	r0, r0, r2
   317d8:	e5840048 	str	r0, [r4, #72]	; 0x48
   317dc:	e1500003 	cmp	r0, r3
   317e0:	2a000001 	bcs	317ec <CScreenDevice::DisplayChar(char)+0x68>
   317e4:	e28dd00c 	add	sp, sp, #12
   317e8:	e8bd8030 	pop	{r4, r5, pc}
   317ec:	e3a03000 	mov	r3, #0
   317f0:	e1a00005 	mov	r0, r5
   317f4:	e5843048 	str	r3, [r4, #72]	; 0x48
   317f8:	eb001f59 	bl	39564 <CCharGenerator::GetCharHeight() const>
   317fc:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   31800:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   31804:	e0800002 	add	r0, r0, r2
   31808:	e584004c 	str	r0, [r4, #76]	; 0x4c
   3180c:	e1500003 	cmp	r0, r3
   31810:	3afffff3 	bcc	317e4 <CScreenDevice::DisplayChar(char)+0x60>
   31814:	e1a00004 	mov	r0, r4
   31818:	ebfffef0 	bl	313e0 <CScreenDevice::Scroll()>
   3181c:	e1a00005 	mov	r0, r5
   31820:	eb001f4f 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31824:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   31828:	e0433000 	sub	r3, r3, r0
   3182c:	e584304c 	str	r3, [r4, #76]	; 0x4c
   31830:	eaffffeb 	b	317e4 <CScreenDevice::DisplayChar(char)+0x60>

00031834 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   31834:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31838:	e1a06000 	mov	r6, r0
   3183c:	e1a0a001 	mov	sl, r1
   31840:	e1a08002 	mov	r8, r2
   31844:	e280701c 	add	r7, r0, #28
   31848:	e3a09000 	mov	r9, #0
   3184c:	e1a00007 	mov	r0, r7
   31850:	eb001f43 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31854:	e1500009 	cmp	r0, r9
   31858:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3185c:	e1a0400a 	mov	r4, sl
   31860:	e3a05000 	mov	r5, #0
   31864:	ea00000d 	b	318a0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x6c>
   31868:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   3186c:	e2855001 	add	r5, r5, #1
   31870:	e1530004 	cmp	r3, r4
   31874:	9a000008 	bls	3189c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
   31878:	e5963034 	ldr	r3, [r6, #52]	; 0x34
   3187c:	e1530008 	cmp	r3, r8
   31880:	9a000005 	bls	3189c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
   31884:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
   31888:	e5962024 	ldr	r2, [r6, #36]	; 0x24
   3188c:	e1d615b4 	ldrh	r1, [r6, #84]	; 0x54
   31890:	e0234893 	mla	r3, r3, r8, r4
   31894:	e1a03083 	lsl	r3, r3, #1
   31898:	e18210b3 	strh	r1, [r2, r3]
   3189c:	e2844001 	add	r4, r4, #1
   318a0:	e1a00007 	mov	r0, r7
   318a4:	eb001f2c 	bl	3955c <CCharGenerator::GetCharWidth() const>
   318a8:	e1500005 	cmp	r0, r5
   318ac:	8affffed 	bhi	31868 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   318b0:	e2899001 	add	r9, r9, #1
   318b4:	e2888001 	add	r8, r8, #1
   318b8:	eaffffe3 	b	3184c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

000318bc <CScreenDevice::ClearLineEnd()>:
   318bc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   318c0:	e92d4070 	push	{r4, r5, r6, lr}
   318c4:	e5904048 	ldr	r4, [r0, #72]	; 0x48
   318c8:	e1540003 	cmp	r4, r3
   318cc:	28bd8070 	popcs	{r4, r5, r6, pc}
   318d0:	e1a05000 	mov	r5, r0
   318d4:	e280601c 	add	r6, r0, #28
   318d8:	e1a01004 	mov	r1, r4
   318dc:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   318e0:	e1a00005 	mov	r0, r5
   318e4:	ebffffd2 	bl	31834 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   318e8:	e1a00006 	mov	r0, r6
   318ec:	eb001f1a 	bl	3955c <CCharGenerator::GetCharWidth() const>
   318f0:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   318f4:	e0844000 	add	r4, r4, r0
   318f8:	e1530004 	cmp	r3, r4
   318fc:	8afffff5 	bhi	318d8 <CScreenDevice::ClearLineEnd()+0x1c>
   31900:	e8bd8070 	pop	{r4, r5, r6, pc}

00031904 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
   31904:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31908:	e1a05000 	mov	r5, r0
   3190c:	e1a04001 	mov	r4, r1
   31910:	e280701c 	add	r7, r0, #28
   31914:	e5956048 	ldr	r6, [r5, #72]	; 0x48
   31918:	e1a00007 	mov	r0, r7
   3191c:	eb001f0e 	bl	3955c <CCharGenerator::GetCharWidth() const>
   31920:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   31924:	e0266094 	mla	r6, r4, r0, r6
   31928:	e5954048 	ldr	r4, [r5, #72]	; 0x48
   3192c:	e1560003 	cmp	r6, r3
   31930:	21a06003 	movcs	r6, r3
   31934:	e1560004 	cmp	r6, r4
   31938:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   3193c:	e1a01004 	mov	r1, r4
   31940:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   31944:	e1a00005 	mov	r0, r5
   31948:	ebffffb9 	bl	31834 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   3194c:	e1a00007 	mov	r0, r7
   31950:	eb001f01 	bl	3955c <CCharGenerator::GetCharWidth() const>
   31954:	e0844000 	add	r4, r4, r0
   31958:	e1560004 	cmp	r6, r4
   3195c:	8afffff6 	bhi	3193c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
   31960:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00031964 <CScreenDevice::EraseChars(unsigned int)>:
   31964:	e3510000 	cmp	r1, #0
   31968:	012fff1e 	bxeq	lr
   3196c:	eaffffe4 	b	31904 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

00031970 <CScreenDevice::ClearDisplayEnd()>:
   31970:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31974:	e1a04000 	mov	r4, r0
   31978:	e5905048 	ldr	r5, [r0, #72]	; 0x48
   3197c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   31980:	e280601c 	add	r6, r0, #28
   31984:	e1550003 	cmp	r5, r3
   31988:	2a000009 	bcs	319b4 <CScreenDevice::ClearDisplayEnd()+0x44>
   3198c:	e1a01005 	mov	r1, r5
   31990:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   31994:	e1a00004 	mov	r0, r4
   31998:	ebffffa5 	bl	31834 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   3199c:	e1a00006 	mov	r0, r6
   319a0:	eb001eed 	bl	3955c <CCharGenerator::GetCharWidth() const>
   319a4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   319a8:	e0855000 	add	r5, r5, r0
   319ac:	e1550003 	cmp	r5, r3
   319b0:	3afffff5 	bcc	3198c <CScreenDevice::ClearDisplayEnd()+0x1c>
   319b4:	e594504c 	ldr	r5, [r4, #76]	; 0x4c
   319b8:	e1a00006 	mov	r0, r6
   319bc:	eb001ee8 	bl	39564 <CCharGenerator::GetCharHeight() const>
   319c0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   319c4:	e0850000 	add	r0, r5, r0
   319c8:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   319cc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   319d0:	e0000093 	mul	r0, r3, r0
   319d4:	e1a0c0ac 	lsr	ip, ip, #1
   319d8:	e04ce000 	sub	lr, ip, r0
   319dc:	e35e0000 	cmp	lr, #0
   319e0:	e1a06080 	lsl	r6, r0, #1
   319e4:	e0812006 	add	r2, r1, r6
   319e8:	e24e3001 	sub	r3, lr, #1
   319ec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   319f0:	e353000d 	cmp	r3, #13
   319f4:	9a000005 	bls	31a10 <CScreenDevice::ClearDisplayEnd()+0xa0>
   319f8:	e081c08c 	add	ip, r1, ip, lsl #1
   319fc:	e2845054 	add	r5, r4, #84	; 0x54
   31a00:	e2847056 	add	r7, r4, #86	; 0x56
   31a04:	e1520007 	cmp	r2, r7
   31a08:	3155000c 	cmpcc	r5, ip
   31a0c:	2a000005 	bcs	31a28 <CScreenDevice::ClearDisplayEnd()+0xb8>
   31a10:	e1d415b4 	ldrh	r1, [r4, #84]	; 0x54
   31a14:	e2433001 	sub	r3, r3, #1
   31a18:	e3730001 	cmn	r3, #1
   31a1c:	e0c210b2 	strh	r1, [r2], #2
   31a20:	1afffffa 	bne	31a10 <CScreenDevice::ClearDisplayEnd()+0xa0>
   31a24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31a28:	e1a050a2 	lsr	r5, r2, #1
   31a2c:	e265c000 	rsb	ip, r5, #0
   31a30:	e21c7003 	ands	r7, ip, #3
   31a34:	0a00000e 	beq	31a74 <CScreenDevice::ClearDisplayEnd()+0x104>
   31a38:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
   31a3c:	e31c0002 	tst	ip, #2
   31a40:	e18130b6 	strh	r3, [r1, r6]
   31a44:	02822002 	addeq	r2, r2, #2
   31a48:	024e3002 	subeq	r3, lr, #2
   31a4c:	0a000008 	beq	31a74 <CScreenDevice::ClearDisplayEnd()+0x104>
   31a50:	e2455001 	sub	r5, r5, #1
   31a54:	e1c230b2 	strh	r3, [r2, #2]
   31a58:	e3150003 	tst	r5, #3
   31a5c:	12822004 	addne	r2, r2, #4
   31a60:	124e3003 	subne	r3, lr, #3
   31a64:	01d435b4 	ldrheq	r3, [r4, #84]	; 0x54
   31a68:	01c230b4 	strheq	r3, [r2, #4]
   31a6c:	02822006 	addeq	r2, r2, #6
   31a70:	024e3004 	subeq	r3, lr, #4
   31a74:	e0800007 	add	r0, r0, r7
   31a78:	e04ee007 	sub	lr, lr, r7
   31a7c:	e0811080 	add	r1, r1, r0, lsl #1
   31a80:	e1d405b4 	ldrh	r0, [r4, #84]	; 0x54
   31a84:	e1a0c1ae 	lsr	ip, lr, #3
   31a88:	eea00bb0 	vdup.16	q8, r0
   31a8c:	e3a00000 	mov	r0, #0
   31a90:	e2800001 	add	r0, r0, #1
   31a94:	f4410add 	vst1.64	{d16-d17}, [r1 :64]!
   31a98:	e150000c 	cmp	r0, ip
   31a9c:	1afffffb 	bne	31a90 <CScreenDevice::ClearDisplayEnd()+0x120>
   31aa0:	e3ce1007 	bic	r1, lr, #7
   31aa4:	e31e0007 	tst	lr, #7
   31aa8:	e0433001 	sub	r3, r3, r1
   31aac:	e1a01081 	lsl	r1, r1, #1
   31ab0:	e0820001 	add	r0, r2, r1
   31ab4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31ab8:	e3530000 	cmp	r3, #0
   31abc:	e1d4c5b4 	ldrh	ip, [r4, #84]	; 0x54
   31ac0:	e182c0b1 	strh	ip, [r2, r1]
   31ac4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31ac8:	e3530001 	cmp	r3, #1
   31acc:	e1c0c0b2 	strh	ip, [r0, #2]
   31ad0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31ad4:	e3530002 	cmp	r3, #2
   31ad8:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
   31adc:	e1c020b4 	strh	r2, [r0, #4]
   31ae0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31ae4:	e3530003 	cmp	r3, #3
   31ae8:	e1c020b6 	strh	r2, [r0, #6]
   31aec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31af0:	e3530004 	cmp	r3, #4
   31af4:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
   31af8:	e1c020b8 	strh	r2, [r0, #8]
   31afc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31b00:	e3530005 	cmp	r3, #5
   31b04:	e1c020ba 	strh	r2, [r0, #10]
   31b08:	11d435b4 	ldrhne	r3, [r4, #84]	; 0x54
   31b0c:	11c030bc 	strhne	r3, [r0, #12]
   31b10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00031b14 <CScreenDevice::Initialize()>:
   31b14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31b18:	e1a04000 	mov	r4, r0
   31b1c:	e5d05010 	ldrb	r5, [r0, #16]
   31b20:	e24dd010 	sub	sp, sp, #16
   31b24:	e3550000 	cmp	r5, #0
   31b28:	0a00002f 	beq	31bec <CScreenDevice::Initialize()+0xd8>
   31b2c:	e5900008 	ldr	r0, [r0, #8]
   31b30:	e284601c 	add	r6, r4, #28
   31b34:	e594300c 	ldr	r3, [r4, #12]
   31b38:	e5840030 	str	r0, [r4, #48]	; 0x30
   31b3c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   31b40:	e5843034 	str	r3, [r4, #52]	; 0x34
   31b44:	e0000093 	mul	r0, r3, r0
   31b48:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   31b4c:	e1a00080 	lsl	r0, r0, #1
   31b50:	e5840028 	str	r0, [r4, #40]	; 0x28
   31b54:	23e00000 	mvncs	r0, #0
   31b58:	eb001455 	bl	36cb4 <operator new[](unsigned int)>
   31b5c:	e5840024 	str	r0, [r4, #36]	; 0x24
   31b60:	e5945034 	ldr	r5, [r4, #52]	; 0x34
   31b64:	e1a00006 	mov	r0, r6
   31b68:	eb001e7d 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31b6c:	e1a03000 	mov	r3, r0
   31b70:	e1a00006 	mov	r0, r6
   31b74:	e735f315 	udiv	r5, r5, r3
   31b78:	eb001e79 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31b7c:	e1a03000 	mov	r3, r0
   31b80:	e5941040 	ldr	r1, [r4, #64]	; 0x40
   31b84:	e3a02000 	mov	r2, #0
   31b88:	e1a00004 	mov	r0, r4
   31b8c:	e584104c 	str	r1, [r4, #76]	; 0x4c
   31b90:	e0030593 	mul	r3, r3, r5
   31b94:	e5842048 	str	r2, [r4, #72]	; 0x48
   31b98:	e5843038 	str	r3, [r4, #56]	; 0x38
   31b9c:	e5843044 	str	r3, [r4, #68]	; 0x44
   31ba0:	ebffff72 	bl	31970 <CScreenDevice::ClearDisplayEnd()>
   31ba4:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
   31ba8:	e3530000 	cmp	r3, #0
   31bac:	1a00000b 	bne	31be0 <CScreenDevice::Initialize()+0xcc>
   31bb0:	ebffeed9 	bl	2d71c <CDeviceNameService::Get()>
   31bb4:	e5942014 	ldr	r2, [r4, #20]
   31bb8:	e59f1140 	ldr	r1, [pc, #320]	; 31d00 <CScreenDevice::Initialize()+0x1ec>
   31bbc:	e3a03000 	mov	r3, #0
   31bc0:	e2822001 	add	r2, r2, #1
   31bc4:	ebffef12 	bl	2d814 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>
   31bc8:	e2505000 	subs	r5, r0, #0
   31bcc:	0a000043 	beq	31ce0 <CScreenDevice::Initialize()+0x1cc>
   31bd0:	e3a05001 	mov	r5, #1
   31bd4:	e1a00005 	mov	r0, r5
   31bd8:	e28dd010 	add	sp, sp, #16
   31bdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31be0:	e1a00004 	mov	r0, r4
   31be4:	ebfffbc6 	bl	30b04 <CScreenDevice::InvertCursor() [clone .part.0]>
   31be8:	eafffff0 	b	31bb0 <CScreenDevice::Initialize()+0x9c>
   31bec:	e3a00098 	mov	r0, #152	; 0x98
   31bf0:	eb001429 	bl	36c9c <operator new(unsigned int)>
   31bf4:	e5943014 	ldr	r3, [r4, #20]
   31bf8:	e58d3008 	str	r3, [sp, #8]
   31bfc:	e1a06000 	mov	r6, r0
   31c00:	e58d500c 	str	r5, [sp, #12]
   31c04:	e3a03010 	mov	r3, #16
   31c08:	e58d5004 	str	r5, [sp, #4]
   31c0c:	e58d5000 	str	r5, [sp]
   31c10:	e594200c 	ldr	r2, [r4, #12]
   31c14:	e5941008 	ldr	r1, [r4, #8]
   31c18:	eb001c92 	bl	38e68 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
   31c1c:	e1a00006 	mov	r0, r6
   31c20:	e5846018 	str	r6, [r4, #24]
   31c24:	eb001d55 	bl	39180 <CBcmFrameBuffer::Initialize()>
   31c28:	e3500000 	cmp	r0, #0
   31c2c:	0affffe8 	beq	31bd4 <CScreenDevice::Initialize()+0xc0>
   31c30:	e5940018 	ldr	r0, [r4, #24]
   31c34:	eb001d19 	bl	390a0 <CBcmFrameBuffer::GetDepth() const>
   31c38:	e3500010 	cmp	r0, #16
   31c3c:	1affffe4 	bne	31bd4 <CScreenDevice::Initialize()+0xc0>
   31c40:	e5940018 	ldr	r0, [r4, #24]
   31c44:	e284601c 	add	r6, r4, #28
   31c48:	eb001d16 	bl	390a8 <CBcmFrameBuffer::GetBuffer() const>
   31c4c:	e1a03000 	mov	r3, r0
   31c50:	e5940018 	ldr	r0, [r4, #24]
   31c54:	e5843024 	str	r3, [r4, #36]	; 0x24
   31c58:	eb001d14 	bl	390b0 <CBcmFrameBuffer::GetSize() const>
   31c5c:	e1a03000 	mov	r3, r0
   31c60:	e5940018 	ldr	r0, [r4, #24]
   31c64:	e5843028 	str	r3, [r4, #40]	; 0x28
   31c68:	eb001d0a 	bl	39098 <CBcmFrameBuffer::GetPitch() const>
   31c6c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   31c70:	e5940018 	ldr	r0, [r4, #24]
   31c74:	eb001cff 	bl	39078 <CBcmFrameBuffer::GetWidth() const>
   31c78:	e1a03000 	mov	r3, r0
   31c7c:	e5940018 	ldr	r0, [r4, #24]
   31c80:	e5843030 	str	r3, [r4, #48]	; 0x30
   31c84:	eb001cfd 	bl	39080 <CBcmFrameBuffer::GetHeight() const>
   31c88:	e5840034 	str	r0, [r4, #52]	; 0x34
   31c8c:	e1a00006 	mov	r0, r6
   31c90:	eb001e31 	bl	3955c <CCharGenerator::GetCharWidth() const>
   31c94:	e1a08000 	mov	r8, r0
   31c98:	e1a00006 	mov	r0, r6
   31c9c:	eb001e30 	bl	39564 <CCharGenerator::GetCharHeight() const>
   31ca0:	e1a07000 	mov	r7, r0
   31ca4:	e1a00006 	mov	r0, r6
   31ca8:	eb001e2f 	bl	3956c <CCharGenerator::GetUnderline() const>
   31cac:	e0477000 	sub	r7, r7, r0
   31cb0:	e0000798 	mul	r0, r8, r7
   31cb4:	e3700113 	cmn	r0, #-1073741820	; 0xc0000004
   31cb8:	91a00080 	lslls	r0, r0, #1
   31cbc:	83e00000 	mvnhi	r0, #0
   31cc0:	eb0013fb 	bl	36cb4 <operator new[](unsigned int)>
   31cc4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   31cc8:	e5840020 	str	r0, [r4, #32]
   31ccc:	e3130003 	tst	r3, #3
   31cd0:	1affffbf 	bne	31bd4 <CScreenDevice::Initialize()+0xc0>
   31cd4:	e1a030a3 	lsr	r3, r3, #1
   31cd8:	e584302c 	str	r3, [r4, #44]	; 0x2c
   31cdc:	eaffff9f 	b	31b60 <CScreenDevice::Initialize()+0x4c>
   31ce0:	ebffee8d 	bl	2d71c <CDeviceNameService::Get()>
   31ce4:	e5942014 	ldr	r2, [r4, #20]
   31ce8:	e59f1010 	ldr	r1, [pc, #16]	; 31d00 <CScreenDevice::Initialize()+0x1ec>
   31cec:	e1a03004 	mov	r3, r4
   31cf0:	e2822001 	add	r2, r2, #1
   31cf4:	e58d5000 	str	r5, [sp]
   31cf8:	ebffee93 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   31cfc:	eaffffb3 	b	31bd0 <CScreenDevice::Initialize()+0xbc>
   31d00:	00043080 	.word	0x00043080

00031d04 <CScreenDevice::Resize(unsigned int, unsigned int)>:
   31d04:	e5d03010 	ldrb	r3, [r0, #16]
   31d08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31d0c:	e1a04000 	mov	r4, r0
   31d10:	e1a06001 	mov	r6, r1
   31d14:	e1a05002 	mov	r5, r2
   31d18:	e3530000 	cmp	r3, #0
   31d1c:	0a000003 	beq	31d30 <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
   31d20:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   31d24:	e3500000 	cmp	r0, #0
   31d28:	0a000000 	beq	31d30 <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
   31d2c:	eb0013ec 	bl	36ce4 <operator delete[](void*)>
   31d30:	e5947018 	ldr	r7, [r4, #24]
   31d34:	e3a03000 	mov	r3, #0
   31d38:	e5843024 	str	r3, [r4, #36]	; 0x24
   31d3c:	e1570003 	cmp	r7, r3
   31d40:	0a000004 	beq	31d58 <CScreenDevice::Resize(unsigned int, unsigned int)+0x54>
   31d44:	e1a00007 	mov	r0, r7
   31d48:	eb001c9d 	bl	38fc4 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   31d4c:	e3a01098 	mov	r1, #152	; 0x98
   31d50:	e1a00007 	mov	r0, r7
   31d54:	eb0013e8 	bl	36cfc <operator delete(void*, unsigned int)>
   31d58:	e5940020 	ldr	r0, [r4, #32]
   31d5c:	e3a03000 	mov	r3, #0
   31d60:	e5843018 	str	r3, [r4, #24]
   31d64:	e1500003 	cmp	r0, r3
   31d68:	0a000000 	beq	31d70 <CScreenDevice::Resize(unsigned int, unsigned int)+0x6c>
   31d6c:	eb0013dc 	bl	36ce4 <operator delete[](void*)>
   31d70:	e3a03000 	mov	r3, #0
   31d74:	e3a02001 	mov	r2, #1
   31d78:	e34f2fdf 	movt	r2, #65503	; 0xffdf
   31d7c:	e5843054 	str	r3, [r4, #84]	; 0x54
   31d80:	e5842050 	str	r2, [r4, #80]	; 0x50
   31d84:	e1a00004 	mov	r0, r4
   31d88:	e5843020 	str	r3, [r4, #32]
   31d8c:	e5846008 	str	r6, [r4, #8]
   31d90:	e584500c 	str	r5, [r4, #12]
   31d94:	e584303c 	str	r3, [r4, #60]	; 0x3c
   31d98:	e5843040 	str	r3, [r4, #64]	; 0x40
   31d9c:	e5843048 	str	r3, [r4, #72]	; 0x48
   31da0:	e584304c 	str	r3, [r4, #76]	; 0x4c
   31da4:	e5c43060 	strb	r3, [r4, #96]	; 0x60
   31da8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   31dac:	eaffff58 	b	31b14 <CScreenDevice::Initialize()>

00031db0 <CScreenDevice::Write(char)>:
   31db0:	e92d4070 	push	{r4, r5, r6, lr}
   31db4:	e1a04000 	mov	r4, r0
   31db8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   31dbc:	e24dd008 	sub	sp, sp, #8
   31dc0:	e3530007 	cmp	r3, #7
   31dc4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   31dc8:	ea000009 	b	31df4 <CScreenDevice::Write(char)+0x44>
   31dcc:	00031e3c 	.word	0x00031e3c
   31dd0:	00031dec 	.word	0x00031dec
   31dd4:	00031e9c 	.word	0x00031e9c
   31dd8:	00031ef4 	.word	0x00031ef4
   31ddc:	00031fd0 	.word	0x00031fd0
   31de0:	00031ff4 	.word	0x00031ff4
   31de4:	00032018 	.word	0x00032018
   31de8:	00031e04 	.word	0x00031e04
   31dec:	e351005b 	cmp	r1, #91	; 0x5b
   31df0:	0a0000d0 	beq	32138 <CScreenDevice::Write(char)+0x388>
   31df4:	e3a03000 	mov	r3, #0
   31df8:	e584303c 	str	r3, [r4, #60]	; 0x3c
   31dfc:	e28dd008 	add	sp, sp, #8
   31e00:	e8bd8070 	pop	{r4, r5, r6, pc}
   31e04:	e3c13004 	bic	r3, r1, #4
   31e08:	e3530068 	cmp	r3, #104	; 0x68
   31e0c:	0a000090 	beq	32054 <CScreenDevice::Write(char)+0x2a4>
   31e10:	e2411030 	sub	r1, r1, #48	; 0x30
   31e14:	e6ef3071 	uxtb	r3, r1
   31e18:	e3530009 	cmp	r3, #9
   31e1c:	8afffff4 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   31e20:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   31e24:	e3a0200a 	mov	r2, #10
   31e28:	e0211392 	mla	r1, r2, r3, r1
   31e2c:	e5801058 	str	r1, [r0, #88]	; 0x58
   31e30:	e3510063 	cmp	r1, #99	; 0x63
   31e34:	8affffee 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   31e38:	eaffffef 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   31e3c:	e2413008 	sub	r3, r1, #8
   31e40:	e3530013 	cmp	r3, #19
   31e44:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   31e48:	ea000093 	b	3209c <CScreenDevice::Write(char)+0x2ec>
   31e4c:	0003217c 	.word	0x0003217c
   31e50:	00032170 	.word	0x00032170
   31e54:	00032194 	.word	0x00032194
   31e58:	0003209c 	.word	0x0003209c
   31e5c:	0003209c 	.word	0x0003209c
   31e60:	00032188 	.word	0x00032188
   31e64:	0003209c 	.word	0x0003209c
   31e68:	0003209c 	.word	0x0003209c
   31e6c:	0003209c 	.word	0x0003209c
   31e70:	0003209c 	.word	0x0003209c
   31e74:	0003209c 	.word	0x0003209c
   31e78:	0003209c 	.word	0x0003209c
   31e7c:	0003209c 	.word	0x0003209c
   31e80:	0003209c 	.word	0x0003209c
   31e84:	0003209c 	.word	0x0003209c
   31e88:	0003209c 	.word	0x0003209c
   31e8c:	0003209c 	.word	0x0003209c
   31e90:	0003209c 	.word	0x0003209c
   31e94:	0003209c 	.word	0x0003209c
   31e98:	00032164 	.word	0x00032164
   31e9c:	e241303f 	sub	r3, r1, #63	; 0x3f
   31ea0:	e3530011 	cmp	r3, #17
   31ea4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   31ea8:	ea0000a5 	b	32144 <CScreenDevice::Write(char)+0x394>
   31eac:	00032278 	.word	0x00032278
   31eb0:	00032144 	.word	0x00032144
   31eb4:	00032208 	.word	0x00032208
   31eb8:	000321c4 	.word	0x000321c4
   31ebc:	00032268 	.word	0x00032268
   31ec0:	00032258 	.word	0x00032258
   31ec4:	00032144 	.word	0x00032144
   31ec8:	00032144 	.word	0x00032144
   31ecc:	00032144 	.word	0x00032144
   31ed0:	00032240 	.word	0x00032240
   31ed4:	00032144 	.word	0x00032144
   31ed8:	00032230 	.word	0x00032230
   31edc:	00032284 	.word	0x00032284
   31ee0:	00031df4 	.word	0x00031df4
   31ee4:	00031df4 	.word	0x00031df4
   31ee8:	00032144 	.word	0x00032144
   31eec:	00032144 	.word	0x00032144
   31ef0:	00031df4 	.word	0x00031df4
   31ef4:	e241303b 	sub	r3, r1, #59	; 0x3b
   31ef8:	e3530032 	cmp	r3, #50	; 0x32
   31efc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   31f00:	ea00005a 	b	32070 <CScreenDevice::Write(char)+0x2c0>
   31f04:	00032308 	.word	0x00032308
   31f08:	00032070 	.word	0x00032070
   31f0c:	00032070 	.word	0x00032070
   31f10:	00032070 	.word	0x00032070
   31f14:	00032070 	.word	0x00032070
   31f18:	00032070 	.word	0x00032070
   31f1c:	00032070 	.word	0x00032070
   31f20:	00032070 	.word	0x00032070
   31f24:	00032070 	.word	0x00032070
   31f28:	00032070 	.word	0x00032070
   31f2c:	00032070 	.word	0x00032070
   31f30:	00032070 	.word	0x00032070
   31f34:	00032070 	.word	0x00032070
   31f38:	00032070 	.word	0x00032070
   31f3c:	00032070 	.word	0x00032070
   31f40:	00032070 	.word	0x00032070
   31f44:	00032070 	.word	0x00032070
   31f48:	00031df4 	.word	0x00031df4
   31f4c:	00031df4 	.word	0x00031df4
   31f50:	00032070 	.word	0x00032070
   31f54:	00032070 	.word	0x00032070
   31f58:	00031df4 	.word	0x00031df4
   31f5c:	00032070 	.word	0x00032070
   31f60:	00032070 	.word	0x00032070
   31f64:	00032070 	.word	0x00032070
   31f68:	00032070 	.word	0x00032070
   31f6c:	00032070 	.word	0x00032070
   31f70:	00032070 	.word	0x00032070
   31f74:	00032070 	.word	0x00032070
   31f78:	000322f4 	.word	0x000322f4
   31f7c:	00032070 	.word	0x00032070
   31f80:	00032070 	.word	0x00032070
   31f84:	00032070 	.word	0x00032070
   31f88:	00032070 	.word	0x00032070
   31f8c:	00032070 	.word	0x00032070
   31f90:	00032070 	.word	0x00032070
   31f94:	00032070 	.word	0x00032070
   31f98:	00032070 	.word	0x00032070
   31f9c:	00032070 	.word	0x00032070
   31fa0:	00032070 	.word	0x00032070
   31fa4:	00032070 	.word	0x00032070
   31fa8:	00032070 	.word	0x00032070
   31fac:	00032070 	.word	0x00032070
   31fb0:	00032070 	.word	0x00032070
   31fb4:	00032070 	.word	0x00032070
   31fb8:	000322c4 	.word	0x000322c4
   31fbc:	00032070 	.word	0x00032070
   31fc0:	00032070 	.word	0x00032070
   31fc4:	00032070 	.word	0x00032070
   31fc8:	000322c4 	.word	0x000322c4
   31fcc:	000322e0 	.word	0x000322e0
   31fd0:	e2411030 	sub	r1, r1, #48	; 0x30
   31fd4:	e6ef3071 	uxtb	r3, r1
   31fd8:	e3530009 	cmp	r3, #9
   31fdc:	8affff84 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   31fe0:	e6af1071 	sxtb	r1, r1
   31fe4:	e3a03007 	mov	r3, #7
   31fe8:	e5801058 	str	r1, [r0, #88]	; 0x58
   31fec:	e580303c 	str	r3, [r0, #60]	; 0x3c
   31ff0:	eaffff81 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   31ff4:	e2411030 	sub	r1, r1, #48	; 0x30
   31ff8:	e6ef3071 	uxtb	r3, r1
   31ffc:	e3530009 	cmp	r3, #9
   32000:	8affff7b 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   32004:	e6af1071 	sxtb	r1, r1
   32008:	e3a03006 	mov	r3, #6
   3200c:	e580105c 	str	r1, [r0, #92]	; 0x5c
   32010:	e580303c 	str	r3, [r0, #60]	; 0x3c
   32014:	eaffff78 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32018:	e3510048 	cmp	r1, #72	; 0x48
   3201c:	0a0000c0 	beq	32324 <CScreenDevice::Write(char)+0x574>
   32020:	e3510072 	cmp	r1, #114	; 0x72
   32024:	0a0000ba 	beq	32314 <CScreenDevice::Write(char)+0x564>
   32028:	e2411030 	sub	r1, r1, #48	; 0x30
   3202c:	e6ef3071 	uxtb	r3, r1
   32030:	e3530009 	cmp	r3, #9
   32034:	8affff6e 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   32038:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   3203c:	e3a0200a 	mov	r2, #10
   32040:	e0231392 	mla	r3, r2, r3, r1
   32044:	e580305c 	str	r3, [r0, #92]	; 0x5c
   32048:	e35300c7 	cmp	r3, #199	; 0xc7
   3204c:	8affff68 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   32050:	eaffff69 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32054:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   32058:	e3530019 	cmp	r3, #25
   3205c:	02411068 	subeq	r1, r1, #104	; 0x68
   32060:	016f1f11 	clzeq	r1, r1
   32064:	01a012a1 	lsreq	r1, r1, #5
   32068:	05c01050 	strbeq	r1, [r0, #80]	; 0x50
   3206c:	eaffff60 	b	31df4 <CScreenDevice::Write(char)+0x44>
   32070:	e2411030 	sub	r1, r1, #48	; 0x30
   32074:	e6ef3071 	uxtb	r3, r1
   32078:	e3530009 	cmp	r3, #9
   3207c:	8affff5c 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   32080:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   32084:	e3a0200a 	mov	r2, #10
   32088:	e0231392 	mla	r3, r2, r3, r1
   3208c:	e5803058 	str	r3, [r0, #88]	; 0x58
   32090:	e35300c7 	cmp	r3, #199	; 0xc7
   32094:	8affff56 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   32098:	eaffff57 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   3209c:	e6ef3071 	uxtb	r3, r1
   320a0:	e353001f 	cmp	r3, #31
   320a4:	9affff54 	bls	31dfc <CScreenDevice::Write(char)+0x4c>
   320a8:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
   320ac:	e284501c 	add	r5, r4, #28
   320b0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   320b4:	e3500000 	cmp	r0, #0
   320b8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   320bc:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
   320c0:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
   320c4:	e58d0000 	str	r0, [sp]
   320c8:	e1a00004 	mov	r0, r4
   320cc:	ebfffd77 	bl	316b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   320d0:	e1a00005 	mov	r0, r5
   320d4:	eb001d20 	bl	3955c <CCharGenerator::GetCharWidth() const>
   320d8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   320dc:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   320e0:	e0803003 	add	r3, r0, r3
   320e4:	e5843048 	str	r3, [r4, #72]	; 0x48
   320e8:	e1530002 	cmp	r3, r2
   320ec:	3affff42 	bcc	31dfc <CScreenDevice::Write(char)+0x4c>
   320f0:	e3a03000 	mov	r3, #0
   320f4:	e1a00005 	mov	r0, r5
   320f8:	e5843048 	str	r3, [r4, #72]	; 0x48
   320fc:	eb001d18 	bl	39564 <CCharGenerator::GetCharHeight() const>
   32100:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   32104:	e5942044 	ldr	r2, [r4, #68]	; 0x44
   32108:	e0803003 	add	r3, r0, r3
   3210c:	e584304c 	str	r3, [r4, #76]	; 0x4c
   32110:	e1530002 	cmp	r3, r2
   32114:	3affff38 	bcc	31dfc <CScreenDevice::Write(char)+0x4c>
   32118:	e1a00004 	mov	r0, r4
   3211c:	ebfffcaf 	bl	313e0 <CScreenDevice::Scroll()>
   32120:	e1a00005 	mov	r0, r5
   32124:	eb001d0e 	bl	39564 <CCharGenerator::GetCharHeight() const>
   32128:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   3212c:	e0433000 	sub	r3, r3, r0
   32130:	e584304c 	str	r3, [r4, #76]	; 0x4c
   32134:	eaffff30 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32138:	e3a03002 	mov	r3, #2
   3213c:	e580303c 	str	r3, [r0, #60]	; 0x3c
   32140:	eaffff2d 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32144:	e2411030 	sub	r1, r1, #48	; 0x30
   32148:	e6ef3071 	uxtb	r3, r1
   3214c:	e3530009 	cmp	r3, #9
   32150:	8affff27 	bhi	31df4 <CScreenDevice::Write(char)+0x44>
   32154:	e3a03003 	mov	r3, #3
   32158:	e5801058 	str	r1, [r0, #88]	; 0x58
   3215c:	e580303c 	str	r3, [r0, #60]	; 0x3c
   32160:	eaffff25 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32164:	e3a03001 	mov	r3, #1
   32168:	e580303c 	str	r3, [r0, #60]	; 0x3c
   3216c:	eaffff22 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32170:	e28dd008 	add	sp, sp, #8
   32174:	e8bd4070 	pop	{r4, r5, r6, lr}
   32178:	eafffd2c 	b	31630 <CScreenDevice::Tabulator()>
   3217c:	e28dd008 	add	sp, sp, #8
   32180:	e8bd4070 	pop	{r4, r5, r6, lr}
   32184:	eafffb46 	b	30ea4 <CScreenDevice::CursorLeft()>
   32188:	e3a03000 	mov	r3, #0
   3218c:	e5803048 	str	r3, [r0, #72]	; 0x48
   32190:	eaffff19 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32194:	e280501c 	add	r5, r0, #28
   32198:	e3a03000 	mov	r3, #0
   3219c:	e1a00005 	mov	r0, r5
   321a0:	e5843048 	str	r3, [r4, #72]	; 0x48
   321a4:	eb001cee 	bl	39564 <CCharGenerator::GetCharHeight() const>
   321a8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   321ac:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   321b0:	e0800002 	add	r0, r0, r2
   321b4:	e584004c 	str	r0, [r4, #76]	; 0x4c
   321b8:	e1500003 	cmp	r0, r3
   321bc:	3affff0e 	bcc	31dfc <CScreenDevice::Write(char)+0x4c>
   321c0:	eaffffd4 	b	32118 <CScreenDevice::Write(char)+0x368>
   321c4:	e280501c 	add	r5, r0, #28
   321c8:	e1a00005 	mov	r0, r5
   321cc:	eb001ce4 	bl	39564 <CCharGenerator::GetCharHeight() const>
   321d0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   321d4:	e5942044 	ldr	r2, [r4, #68]	; 0x44
   321d8:	e0803003 	add	r3, r0, r3
   321dc:	e584304c 	str	r3, [r4, #76]	; 0x4c
   321e0:	e1530002 	cmp	r3, r2
   321e4:	3affff02 	bcc	31df4 <CScreenDevice::Write(char)+0x44>
   321e8:	e1a00004 	mov	r0, r4
   321ec:	ebfffc7b 	bl	313e0 <CScreenDevice::Scroll()>
   321f0:	e1a00005 	mov	r0, r5
   321f4:	eb001cda 	bl	39564 <CCharGenerator::GetCharHeight() const>
   321f8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   321fc:	e0433000 	sub	r3, r3, r0
   32200:	e584304c 	str	r3, [r4, #76]	; 0x4c
   32204:	eafffefa 	b	31df4 <CScreenDevice::Write(char)+0x44>
   32208:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   3220c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   32210:	e1520003 	cmp	r2, r3
   32214:	9afffef6 	bls	31df4 <CScreenDevice::Write(char)+0x44>
   32218:	e280001c 	add	r0, r0, #28
   3221c:	eb001cd0 	bl	39564 <CCharGenerator::GetCharHeight() const>
   32220:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   32224:	e0433000 	sub	r3, r3, r0
   32228:	e584304c 	str	r3, [r4, #76]	; 0x4c
   3222c:	eafffef0 	b	31df4 <CScreenDevice::Write(char)+0x44>
   32230:	ebfffdce 	bl	31970 <CScreenDevice::ClearDisplayEnd()>
   32234:	e3a03000 	mov	r3, #0
   32238:	e584303c 	str	r3, [r4, #60]	; 0x3c
   3223c:	eafffeee 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32240:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   32244:	e3a03000 	mov	r3, #0
   32248:	e580204c 	str	r2, [r0, #76]	; 0x4c
   3224c:	e5803048 	str	r3, [r0, #72]	; 0x48
   32250:	e580303c 	str	r3, [r0, #60]	; 0x3c
   32254:	eafffee8 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32258:	ebfffb11 	bl	30ea4 <CScreenDevice::CursorLeft()>
   3225c:	e3a03000 	mov	r3, #0
   32260:	e584303c 	str	r3, [r4, #60]	; 0x3c
   32264:	eafffee4 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32268:	ebfffcd3 	bl	315bc <CScreenDevice::CursorRight()>
   3226c:	e3a03000 	mov	r3, #0
   32270:	e584303c 	str	r3, [r4, #60]	; 0x3c
   32274:	eafffee0 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32278:	e3a03004 	mov	r3, #4
   3227c:	e580303c 	str	r3, [r0, #60]	; 0x3c
   32280:	eafffedd 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32284:	e5905048 	ldr	r5, [r0, #72]	; 0x48
   32288:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3228c:	e1530005 	cmp	r3, r5
   32290:	9afffed7 	bls	31df4 <CScreenDevice::Write(char)+0x44>
   32294:	e280601c 	add	r6, r0, #28
   32298:	e1a01005 	mov	r1, r5
   3229c:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   322a0:	e1a00004 	mov	r0, r4
   322a4:	ebfffd62 	bl	31834 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   322a8:	e1a00006 	mov	r0, r6
   322ac:	eb001caa 	bl	3955c <CCharGenerator::GetCharWidth() const>
   322b0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   322b4:	e0855000 	add	r5, r5, r0
   322b8:	e1550003 	cmp	r5, r3
   322bc:	3afffff5 	bcc	32298 <CScreenDevice::Write(char)+0x4e8>
   322c0:	eafffecb 	b	31df4 <CScreenDevice::Write(char)+0x44>
   322c4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   322c8:	e3530004 	cmp	r3, #4
   322cc:	02411068 	subeq	r1, r1, #104	; 0x68
   322d0:	016f1f11 	clzeq	r1, r1
   322d4:	01a012a1 	lsreq	r1, r1, #5
   322d8:	05c01057 	strbeq	r1, [r0, #87]	; 0x57
   322dc:	eafffec4 	b	31df4 <CScreenDevice::Write(char)+0x44>
   322e0:	e5901058 	ldr	r1, [r0, #88]	; 0x58
   322e4:	ebfffb5e 	bl	31064 <CScreenDevice::SetStandoutMode(unsigned int)>
   322e8:	e3a03000 	mov	r3, #0
   322ec:	e580303c 	str	r3, [r0, #60]	; 0x3c
   322f0:	eafffec1 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   322f4:	e5901058 	ldr	r1, [r0, #88]	; 0x58
   322f8:	e3510000 	cmp	r1, #0
   322fc:	0afffebc 	beq	31df4 <CScreenDevice::Write(char)+0x44>
   32300:	ebfffd7f 	bl	31904 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   32304:	eafffeba 	b	31df4 <CScreenDevice::Write(char)+0x44>
   32308:	e3a03005 	mov	r3, #5
   3230c:	e580303c 	str	r3, [r0, #60]	; 0x3c
   32310:	eafffeb9 	b	31dfc <CScreenDevice::Write(char)+0x4c>
   32314:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
   32318:	e5901058 	ldr	r1, [r0, #88]	; 0x58
   3231c:	ebfffb32 	bl	30fec <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   32320:	eafffeb3 	b	31df4 <CScreenDevice::Write(char)+0x44>
   32324:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
   32328:	e5901058 	ldr	r1, [r0, #88]	; 0x58
   3232c:	ebfffaf7 	bl	30f10 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   32330:	e3a03000 	mov	r3, #0
   32334:	e584303c 	str	r3, [r4, #60]	; 0x3c
   32338:	eafffeaf 	b	31dfc <CScreenDevice::Write(char)+0x4c>

0003233c <CScreenDevice::Write(void const*, unsigned int)>:
   3233c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32340:	e1a05000 	mov	r5, r0
   32344:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
   32348:	e1a06001 	mov	r6, r1
   3234c:	e1a04002 	mov	r4, r2
   32350:	e3500000 	cmp	r0, #0
   32354:	1a000025 	bne	323f0 <CScreenDevice::Write(void const*, unsigned int)+0xb4>
   32358:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
   3235c:	e3a02001 	mov	r2, #1
   32360:	e5c52060 	strb	r2, [r5, #96]	; 0x60
   32364:	e3530000 	cmp	r3, #0
   32368:	1a000019 	bne	323d4 <CScreenDevice::Write(void const*, unsigned int)+0x98>
   3236c:	e3540000 	cmp	r4, #0
   32370:	e2447001 	sub	r7, r4, #1
   32374:	01a07004 	moveq	r7, r4
   32378:	0a00000d 	beq	323b4 <CScreenDevice::Write(void const*, unsigned int)+0x78>
   3237c:	e1a04006 	mov	r4, r6
   32380:	e0d410d1 	ldrsb	r1, [r4], #1
   32384:	e1a00005 	mov	r0, r5
   32388:	ebfffe88 	bl	31db0 <CScreenDevice::Write(char)>
   3238c:	e2643001 	rsb	r3, r4, #1
   32390:	e0863003 	add	r3, r6, r3
   32394:	e1730007 	cmn	r3, r7
   32398:	1afffff8 	bne	32380 <CScreenDevice::Write(void const*, unsigned int)+0x44>
   3239c:	e2877001 	add	r7, r7, #1
   323a0:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
   323a4:	e3530000 	cmp	r3, #0
   323a8:	0a000001 	beq	323b4 <CScreenDevice::Write(void const*, unsigned int)+0x78>
   323ac:	e1a00005 	mov	r0, r5
   323b0:	ebfff9d3 	bl	30b04 <CScreenDevice::InvertCursor() [clone .part.0]>
   323b4:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   323b8:	e3a02000 	mov	r2, #0
   323bc:	e5c52060 	strb	r2, [r5, #96]	; 0x60
   323c0:	e1530002 	cmp	r3, r2
   323c4:	1a00000b 	bne	323f8 <CScreenDevice::Write(void const*, unsigned int)+0xbc>
   323c8:	f57ff05f 	dmb	sy
   323cc:	e1a00007 	mov	r0, r7
   323d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   323d4:	e1a00005 	mov	r0, r5
   323d8:	e2447001 	sub	r7, r4, #1
   323dc:	ebfff9c8 	bl	30b04 <CScreenDevice::InvertCursor() [clone .part.0]>
   323e0:	e3540000 	cmp	r4, #0
   323e4:	1affffe4 	bne	3237c <CScreenDevice::Write(void const*, unsigned int)+0x40>
   323e8:	e1a07004 	mov	r7, r4
   323ec:	eaffffeb 	b	323a0 <CScreenDevice::Write(void const*, unsigned int)+0x64>
   323f0:	eb001841 	bl	384fc <EnterCritical>
   323f4:	eaffffd7 	b	32358 <CScreenDevice::Write(void const*, unsigned int)+0x1c>
   323f8:	eb00186a 	bl	385a8 <LeaveCritical>
   323fc:	eafffff1 	b	323c8 <CScreenDevice::Write(void const*, unsigned int)+0x8c>

00032400 <CScreenDevice::InvertCursor()>:
   32400:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
   32404:	e3530000 	cmp	r3, #0
   32408:	012fff1e 	bxeq	lr
   3240c:	eafff9bc 	b	30b04 <CScreenDevice::InvertCursor() [clone .part.0]>

00032410 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   32410:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   32414:	e15c0001 	cmp	ip, r1
   32418:	912fff1e 	bxls	lr
   3241c:	e590c034 	ldr	ip, [r0, #52]	; 0x34
   32420:	e15c0002 	cmp	ip, r2
   32424:	8590c02c 	ldrhi	ip, [r0, #44]	; 0x2c
   32428:	85900024 	ldrhi	r0, [r0, #36]	; 0x24
   3242c:	8021129c 	mlahi	r1, ip, r2, r1
   32430:	81a01081 	lslhi	r1, r1, #1
   32434:	818030b1 	strhhi	r3, [r0, r1]
   32438:	e12fff1e 	bx	lr

0003243c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   3243c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   32440:	e1530001 	cmp	r3, r1
   32444:	9a000002 	bls	32454 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
   32448:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   3244c:	e1530002 	cmp	r3, r2
   32450:	8a000001 	bhi	3245c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
   32454:	e1d005b4 	ldrh	r0, [r0, #84]	; 0x54
   32458:	e12fff1e 	bx	lr
   3245c:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
   32460:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   32464:	e022129c 	mla	r2, ip, r2, r1
   32468:	e1a01082 	lsl	r1, r2, #1
   3246c:	e19300b1 	ldrh	r0, [r3, r1]
   32470:	e12fff1e 	bx	lr

00032474 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   32474:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   32478:	e1a06000 	mov	r6, r0
   3247c:	e1a05001 	mov	r5, r1
   32480:	e24dd00c 	sub	sp, sp, #12
   32484:	e280001c 	add	r0, r0, #28
   32488:	e5967030 	ldr	r7, [r6, #48]	; 0x30
   3248c:	e1a04002 	mov	r4, r2
   32490:	e2055003 	and	r5, r5, #3
   32494:	eb001c30 	bl	3955c <CCharGenerator::GetCharWidth() const>
   32498:	e1a02000 	mov	r2, r0
   3249c:	e2044003 	and	r4, r4, #3
   324a0:	e3033058 	movw	r3, #12376	; 0x3058
   324a4:	e3403004 	movt	r3, #4
   324a8:	e0831004 	add	r1, r3, r4
   324ac:	e1a00006 	mov	r0, r6
   324b0:	e0222295 	mla	r2, r5, r2, r2
   324b4:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
   324b8:	e58d3000 	str	r3, [sp]
   324bc:	e3a03000 	mov	r3, #0
   324c0:	e1d112dc 	ldrsb	r1, [r1, #44]	; 0x2c
   324c4:	e0472002 	sub	r2, r7, r2
   324c8:	ebfffc78 	bl	316b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   324cc:	e28dd00c 	add	sp, sp, #12
   324d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000324d4 <CSerialDevice::Read(void*, unsigned int)>:
   324d4:	e5d03018 	ldrb	r3, [r0, #24]
   324d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   324dc:	e3530000 	cmp	r3, #0
   324e0:	0a00004d 	beq	3261c <CSerialDevice::Read(void*, unsigned int)+0x148>
   324e4:	e1a06001 	mov	r6, r1
   324e8:	e3510000 	cmp	r1, #0
   324ec:	0a00004f 	beq	32630 <CSerialDevice::Read(void*, unsigned int)+0x15c>
   324f0:	e5905008 	ldr	r5, [r0, #8]
   324f4:	e1a04000 	mov	r4, r0
   324f8:	e1a07002 	mov	r7, r2
   324fc:	e3550000 	cmp	r5, #0
   32500:	0a000029 	beq	325ac <CSerialDevice::Read(void*, unsigned int)+0xd8>
   32504:	e2808a01 	add	r8, r0, #4096	; 0x1000
   32508:	e59800e0 	ldr	r0, [r8, #224]	; 0xe0
   3250c:	e3500000 	cmp	r0, #0
   32510:	1a00003c 	bne	32608 <CSerialDevice::Read(void*, unsigned int)+0x134>
   32514:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   32518:	e3530000 	cmp	r3, #0
   3251c:	ba00001a 	blt	3258c <CSerialDevice::Read(void*, unsigned int)+0xb8>
   32520:	e3570000 	cmp	r7, #0
   32524:	01a05007 	moveq	r5, r7
   32528:	0a00001a 	beq	32598 <CSerialDevice::Read(void*, unsigned int)+0xc4>
   3252c:	e3a05000 	mov	r5, #0
   32530:	ea00000b 	b	32564 <CSerialDevice::Read(void*, unsigned int)+0x90>
   32534:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   32538:	e2855001 	add	r5, r5, #1
   3253c:	e1570005 	cmp	r7, r5
   32540:	e0842003 	add	r2, r4, r3
   32544:	e2833001 	add	r3, r3, #1
   32548:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
   3254c:	e5d230bc 	ldrb	r3, [r2, #188]	; 0xbc
   32550:	e4c63001 	strb	r3, [r6], #1
   32554:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   32558:	e7ea3053 	ubfx	r3, r3, #0, #11
   3255c:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
   32560:	0a00000c 	beq	32598 <CSerialDevice::Read(void*, unsigned int)+0xc4>
   32564:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
   32568:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   3256c:	e1520003 	cmp	r2, r3
   32570:	1affffef 	bne	32534 <CSerialDevice::Read(void*, unsigned int)+0x60>
   32574:	e59830e0 	ldr	r3, [r8, #224]	; 0xe0
   32578:	e3530000 	cmp	r3, #0
   3257c:	0a000008 	beq	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   32580:	eb001808 	bl	385a8 <LeaveCritical>
   32584:	e1a00005 	mov	r0, r5
   32588:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3258c:	e59458c4 	ldr	r5, [r4, #2244]	; 0x8c4
   32590:	e3a03000 	mov	r3, #0
   32594:	e58438c4 	str	r3, [r4, #2244]	; 0x8c4
   32598:	e59830e0 	ldr	r3, [r8, #224]	; 0xe0
   3259c:	e3530000 	cmp	r3, #0
   325a0:	1afffff6 	bne	32580 <CSerialDevice::Read(void*, unsigned int)+0xac>
   325a4:	e1a00005 	mov	r0, r5
   325a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   325ac:	e3520000 	cmp	r2, #0
   325b0:	01a05002 	moveq	r5, r2
   325b4:	1a00000a 	bne	325e4 <CSerialDevice::Read(void*, unsigned int)+0x110>
   325b8:	eafffff9 	b	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   325bc:	e3130b02 	tst	r3, #2048	; 0x800
   325c0:	1a00001f 	bne	32644 <CSerialDevice::Read(void*, unsigned int)+0x170>
   325c4:	e3130c01 	tst	r3, #256	; 0x100
   325c8:	1a00001f 	bne	3264c <CSerialDevice::Read(void*, unsigned int)+0x178>
   325cc:	e3130c02 	tst	r3, #512	; 0x200
   325d0:	1a00001f 	bne	32654 <CSerialDevice::Read(void*, unsigned int)+0x180>
   325d4:	e2855001 	add	r5, r5, #1
   325d8:	e4c63001 	strb	r3, [r6], #1
   325dc:	e1570005 	cmp	r7, r5
   325e0:	0affffef 	beq	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   325e4:	e5943014 	ldr	r3, [r4, #20]
   325e8:	e5932018 	ldr	r2, [r3, #24]
   325ec:	e3120010 	tst	r2, #16
   325f0:	1affffeb 	bne	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   325f4:	e5933000 	ldr	r3, [r3]
   325f8:	e3130b01 	tst	r3, #1024	; 0x400
   325fc:	0affffee 	beq	325bc <CSerialDevice::Read(void*, unsigned int)+0xe8>
   32600:	e3e05000 	mvn	r5, #0
   32604:	eaffffe6 	b	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   32608:	eb0017bb 	bl	384fc <EnterCritical>
   3260c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   32610:	e3530000 	cmp	r3, #0
   32614:	aaffffc1 	bge	32520 <CSerialDevice::Read(void*, unsigned int)+0x4c>
   32618:	eaffffdb 	b	3258c <CSerialDevice::Read(void*, unsigned int)+0xb8>
   3261c:	e3031090 	movw	r1, #12432	; 0x3090
   32620:	e3401004 	movt	r1, #4
   32624:	e3a02d07 	mov	r2, #448	; 0x1c0
   32628:	e281000c 	add	r0, r1, #12
   3262c:	ebffe8a3 	bl	2c8c0 <assertion_failed>
   32630:	e3031090 	movw	r1, #12432	; 0x3090
   32634:	e3401004 	movt	r1, #4
   32638:	e2810018 	add	r0, r1, #24
   3263c:	e30021c3 	movw	r2, #451	; 0x1c3
   32640:	ebffe89e 	bl	2c8c0 <assertion_failed>
   32644:	e3e05001 	mvn	r5, #1
   32648:	eaffffd5 	b	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   3264c:	e3e05002 	mvn	r5, #2
   32650:	eaffffd3 	b	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   32654:	e3e05003 	mvn	r5, #3
   32658:	eaffffd1 	b	325a4 <CSerialDevice::Read(void*, unsigned int)+0xd0>

0003265c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   3265c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32660:	e1a04000 	mov	r4, r0
   32664:	e284b01c 	add	fp, r4, #28
   32668:	e24dd00c 	sub	sp, sp, #12
   3266c:	e303a090 	movw	sl, #12432	; 0x3090
   32670:	e340a004 	movt	sl, #4
   32674:	e1a05001 	mov	r5, r1
   32678:	e1a06002 	mov	r6, r2
   3267c:	e1a07003 	mov	r7, r3
   32680:	ebffeae9 	bl	2d22c <CDevice::CDevice()>
   32684:	e28a202c 	add	r2, sl, #44	; 0x2c
   32688:	e5845008 	str	r5, [r4, #8]
   3268c:	e1a0000b 	mov	r0, fp
   32690:	e3a05000 	mov	r5, #0
   32694:	e5842000 	str	r2, [r4]
   32698:	e5c4600c 	strb	r6, [r4, #12]
   3269c:	e284906c 	add	r9, r4, #108	; 0x6c
   326a0:	e5847010 	str	r7, [r4, #16]
   326a4:	e2848094 	add	r8, r4, #148	; 0x94
   326a8:	e5845014 	str	r5, [r4, #20]
   326ac:	e2866001 	add	r6, r6, #1
   326b0:	e5c45018 	strb	r5, [r4, #24]
   326b4:	ebffed8a 	bl	2dce4 <CGPIOPin::CGPIOPin()>
   326b8:	e2843044 	add	r3, r4, #68	; 0x44
   326bc:	e1a00003 	mov	r0, r3
   326c0:	e58d3004 	str	r3, [sp, #4]
   326c4:	ebffed86 	bl	2dce4 <CGPIOPin::CGPIOPin()>
   326c8:	e1a00009 	mov	r0, r9
   326cc:	ebffed84 	bl	2dce4 <CGPIOPin::CGPIOPin()>
   326d0:	e1a00008 	mov	r0, r8
   326d4:	ebffed82 	bl	2dce4 <CGPIOPin::CGPIOPin()>
   326d8:	e2841a01 	add	r1, r4, #4096	; 0x1000
   326dc:	e58458bc 	str	r5, [r4, #2236]	; 0x8bc
   326e0:	e3a02001 	mov	r2, #1
   326e4:	e58458c0 	str	r5, [r4, #2240]	; 0x8c0
   326e8:	e58458c4 	str	r5, [r4, #2244]	; 0x8c4
   326ec:	e58150c8 	str	r5, [r1, #200]	; 0xc8
   326f0:	e58160e0 	str	r6, [r1, #224]	; 0xe0
   326f4:	e58150cc 	str	r5, [r1, #204]	; 0xcc
   326f8:	e58120d0 	str	r2, [r1, #208]	; 0xd0
   326fc:	e58120e4 	str	r2, [r1, #228]	; 0xe4
   32700:	e58150d4 	str	r5, [r1, #212]	; 0xd4
   32704:	e5941010 	ldr	r1, [r4, #16]
   32708:	e1510005 	cmp	r1, r5
   3270c:	1a000025 	bne	327a8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x14c>
   32710:	e1a06207 	lsl	r6, r7, #4
   32714:	e08a1006 	add	r1, sl, r6
   32718:	e5915050 	ldr	r5, [r1, #80]	; 0x50
   3271c:	e3550035 	cmp	r5, #53	; 0x35
   32720:	8a000020 	bhi	327a8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x14c>
   32724:	e3041f54 	movw	r1, #20308	; 0x4f54
   32728:	e3401004 	movt	r1, #4
   3272c:	e5910000 	ldr	r0, [r1]
   32730:	e3500000 	cmp	r0, #0
   32734:	1a00002e 	bne	327f4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x198>
   32738:	e5814000 	str	r4, [r1]
   3273c:	e3570000 	cmp	r7, #0
   32740:	e3a01a01 	mov	r1, #4096	; 0x1000
   32744:	e3431f20 	movt	r1, #16160	; 0x3f20
   32748:	e5841014 	str	r1, [r4, #20]
   3274c:	0a000018 	beq	327b4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x158>
   32750:	e08a6006 	add	r6, sl, r6
   32754:	e1a01005 	mov	r1, r5
   32758:	e1a00009 	mov	r0, r9
   3275c:	ebffed6e 	bl	2dd1c <CGPIOPin::AssignPin(unsigned int)>
   32760:	e3a02001 	mov	r2, #1
   32764:	e5961054 	ldr	r1, [r6, #84]	; 0x54
   32768:	e1a00009 	mov	r0, r9
   3276c:	e2811004 	add	r1, r1, #4
   32770:	e6ef1071 	uxtb	r1, r1
   32774:	ebffef93 	bl	2e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   32778:	e5961058 	ldr	r1, [r6, #88]	; 0x58
   3277c:	e1a00008 	mov	r0, r8
   32780:	ebffed65 	bl	2dd1c <CGPIOPin::AssignPin(unsigned int)>
   32784:	e3a02001 	mov	r2, #1
   32788:	e3a01004 	mov	r1, #4
   3278c:	e1a00008 	mov	r0, r8
   32790:	ebffef8c 	bl	2e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   32794:	e3a01002 	mov	r1, #2
   32798:	e1a00008 	mov	r0, r8
   3279c:	ebffef35 	bl	2e478 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   327a0:	e3a03001 	mov	r3, #1
   327a4:	e5c43018 	strb	r3, [r4, #24]
   327a8:	e1a00004 	mov	r0, r4
   327ac:	e28dd00c 	add	sp, sp, #12
   327b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327b4:	e1a0000b 	mov	r0, fp
   327b8:	e3a01020 	mov	r1, #32
   327bc:	ebffed56 	bl	2dd1c <CGPIOPin::AssignPin(unsigned int)>
   327c0:	e3a02001 	mov	r2, #1
   327c4:	e1a01007 	mov	r1, r7
   327c8:	e1a0000b 	mov	r0, fp
   327cc:	ebffef7d 	bl	2e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   327d0:	e59db004 	ldr	fp, [sp, #4]
   327d4:	e3a01021 	mov	r1, #33	; 0x21
   327d8:	e1a0000b 	mov	r0, fp
   327dc:	ebffed4e 	bl	2dd1c <CGPIOPin::AssignPin(unsigned int)>
   327e0:	e3a02001 	mov	r2, #1
   327e4:	e1a01007 	mov	r1, r7
   327e8:	e1a0000b 	mov	r0, fp
   327ec:	ebffef75 	bl	2e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   327f0:	eaffffd6 	b	32750 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xf4>
   327f4:	e3a020b0 	mov	r2, #176	; 0xb0
   327f8:	e1a0100a 	mov	r1, sl
   327fc:	e28a0060 	add	r0, sl, #96	; 0x60
   32800:	ebffe82e 	bl	2c8c0 <assertion_failed>

00032804 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
   32804:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32808:	e5d07018 	ldrb	r7, [r0, #24]
   3280c:	e24dd00c 	sub	sp, sp, #12
   32810:	e3570000 	cmp	r7, #0
   32814:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
   32818:	1a000003 	bne	3282c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28>
   3281c:	e3a07000 	mov	r7, #0
   32820:	e1a00007 	mov	r0, r7
   32824:	e28dd00c 	add	sp, sp, #12
   32828:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3282c:	e1a0a001 	mov	sl, r1
   32830:	e1a05002 	mov	r5, r2
   32834:	e1a06003 	mov	r6, r3
   32838:	e1a04000 	mov	r4, r0
   3283c:	ebfff6aa 	bl	302ec <CMachineInfo::Get()>
   32840:	e3a01002 	mov	r1, #2
   32844:	ebfff5c0 	bl	2ff4c <CMachineInfo::GetClockRate(unsigned int) const>
   32848:	e3500000 	cmp	r0, #0
   3284c:	0a000087 	beq	32a70 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x26c>
   32850:	e24a2f4b 	sub	r2, sl, #300	; 0x12c
   32854:	e30037d4 	movw	r3, #2004	; 0x7d4
   32858:	e340303d 	movt	r3, #61	; 0x3d
   3285c:	e1520003 	cmp	r2, r3
   32860:	8a000087 	bhi	32a84 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x280>
   32864:	e1a0320a 	lsl	r3, sl, #4
   32868:	e30f2ffe 	movw	r2, #65534	; 0xfffe
   3286c:	e739f310 	udiv	r9, r0, r3
   32870:	e2491001 	sub	r1, r9, #1
   32874:	e1510002 	cmp	r1, r2
   32878:	8a000086 	bhi	32a98 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x294>
   3287c:	e0600993 	mls	r0, r3, r9, r0
   32880:	e1a00180 	lsl	r0, r0, #3
   32884:	e731fa10 	udiv	r1, r0, sl
   32888:	e201a001 	and	sl, r1, #1
   3288c:	e08aa0a1 	add	sl, sl, r1, lsr #1
   32890:	e35a003f 	cmp	sl, #63	; 0x3f
   32894:	8a000084 	bhi	32aac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a8>
   32898:	e5940008 	ldr	r0, [r4, #8]
   3289c:	e3500000 	cmp	r0, #0
   328a0:	0a000013 	beq	328f4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xf0>
   328a4:	e304bf54 	movw	fp, #20308	; 0x4f54
   328a8:	e340b004 	movt	fp, #4
   328ac:	e59b3004 	ldr	r3, [fp, #4]
   328b0:	e3530000 	cmp	r3, #0
   328b4:	1a000049 	bne	329e0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1dc>
   328b8:	e5d4200c 	ldrb	r2, [r4, #12]
   328bc:	e58b0008 	str	r0, [fp, #8]
   328c0:	e3520000 	cmp	r2, #0
   328c4:	e5cb200c 	strb	r2, [fp, #12]
   328c8:	1a000055 	bne	32a24 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x220>
   328cc:	e1a03002 	mov	r3, r2
   328d0:	e3a01039 	mov	r1, #57	; 0x39
   328d4:	e30322e4 	movw	r2, #13028	; 0x32e4
   328d8:	e3402003 	movt	r2, #3
   328dc:	eb001790 	bl	38724 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   328e0:	e59b3004 	ldr	r3, [fp, #4]
   328e4:	e3530000 	cmp	r3, #0
   328e8:	1a000056 	bne	32a48 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x244>
   328ec:	e3a03001 	mov	r3, #1
   328f0:	e58b3004 	str	r3, [fp, #4]
   328f4:	e5943014 	ldr	r3, [r4, #20]
   328f8:	e3a02000 	mov	r2, #0
   328fc:	e5832038 	str	r2, [r3, #56]	; 0x38
   32900:	e2453005 	sub	r3, r5, #5
   32904:	e3530003 	cmp	r3, #3
   32908:	e30027ff 	movw	r2, #2047	; 0x7ff
   3290c:	e5943014 	ldr	r3, [r4, #20]
   32910:	e5832044 	str	r2, [r3, #68]	; 0x44
   32914:	e5943014 	ldr	r3, [r4, #20]
   32918:	e5839024 	str	r9, [r3, #36]	; 0x24
   3291c:	e5943014 	ldr	r3, [r4, #20]
   32920:	e583a028 	str	sl, [r3, #40]	; 0x28
   32924:	8a000065 	bhi	32ac0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2bc>
   32928:	e1a05285 	lsl	r5, r5, #5
   3292c:	e2463001 	sub	r3, r6, #1
   32930:	e2455090 	sub	r5, r5, #144	; 0x90
   32934:	e3530001 	cmp	r3, #1
   32938:	8a000047 	bhi	32a5c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x258>
   3293c:	e3560002 	cmp	r6, #2
   32940:	03855008 	orreq	r5, r5, #8
   32944:	e3580001 	cmp	r8, #1
   32948:	0a000033 	beq	32a1c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x218>
   3294c:	e3580002 	cmp	r8, #2
   32950:	1a00002a 	bne	32a00 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1fc>
   32954:	e3855006 	orr	r5, r5, #6
   32958:	e5943008 	ldr	r3, [r4, #8]
   3295c:	e3530000 	cmp	r3, #0
   32960:	e5943014 	ldr	r3, [r4, #20]
   32964:	0583502c 	streq	r5, [r3, #44]	; 0x2c
   32968:	0a00000e 	beq	329a8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1a4>
   3296c:	e3a02009 	mov	r2, #9
   32970:	e5832034 	str	r2, [r3, #52]	; 0x34
   32974:	e3043f54 	movw	r3, #20308	; 0x4f54
   32978:	e3403004 	movt	r3, #4
   3297c:	e5942014 	ldr	r2, [r4, #20]
   32980:	e3a01e45 	mov	r1, #1104	; 0x450
   32984:	e3a00001 	mov	r0, #1
   32988:	e582502c 	str	r5, [r2, #44]	; 0x2c
   3298c:	e5942014 	ldr	r2, [r4, #20]
   32990:	e5821038 	str	r1, [r2, #56]	; 0x38
   32994:	e5932010 	ldr	r2, [r3, #16]
   32998:	e5941010 	ldr	r1, [r4, #16]
   3299c:	e1822110 	orr	r2, r2, r0, lsl r1
   329a0:	e5832010 	str	r2, [r3, #16]
   329a4:	f57ff04f 	dsb	sy
   329a8:	e5943014 	ldr	r3, [r4, #20]
   329ac:	e3002301 	movw	r2, #769	; 0x301
   329b0:	e5832030 	str	r2, [r3, #48]	; 0x30
   329b4:	ebffeb58 	bl	2d71c <CDeviceNameService::Get()>
   329b8:	e5942010 	ldr	r2, [r4, #16]
   329bc:	e3a01000 	mov	r1, #0
   329c0:	e1a03004 	mov	r3, r4
   329c4:	e58d1000 	str	r1, [sp]
   329c8:	e2822001 	add	r2, r2, #1
   329cc:	e59f1100 	ldr	r1, [pc, #256]	; 32ad4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d0>
   329d0:	ebffeb5d 	bl	2d74c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   329d4:	e1a00007 	mov	r0, r7
   329d8:	e28dd00c 	add	sp, sp, #12
   329dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   329e0:	e59b3008 	ldr	r3, [fp, #8]
   329e4:	e1500003 	cmp	r0, r3
   329e8:	0a000012 	beq	32a38 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
   329ec:	e5942010 	ldr	r2, [r4, #16]
   329f0:	e3a03000 	mov	r3, #0
   329f4:	e5c43018 	strb	r3, [r4, #24]
   329f8:	e78b3102 	str	r3, [fp, r2, lsl #2]
   329fc:	eaffff86 	b	3281c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
   32a00:	e3580000 	cmp	r8, #0
   32a04:	0affffd3 	beq	32958 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x154>
   32a08:	e3031090 	movw	r1, #12432	; 0x3090
   32a0c:	e3401004 	movt	r1, #4
   32a10:	e2810f45 	add	r0, r1, #276	; 0x114
   32a14:	e3002157 	movw	r2, #343	; 0x157
   32a18:	ebffe7a8 	bl	2c8c0 <assertion_failed>
   32a1c:	e3855002 	orr	r5, r5, #2
   32a20:	eaffffcc 	b	32958 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x154>
   32a24:	e3a01039 	mov	r1, #57	; 0x39
   32a28:	e30322e4 	movw	r2, #13028	; 0x32e4
   32a2c:	e3402003 	movt	r2, #3
   32a30:	eb0017a2 	bl	388c0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   32a34:	eaffffa9 	b	328e0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xdc>
   32a38:	e5d4200c 	ldrb	r2, [r4, #12]
   32a3c:	e5db300c 	ldrb	r3, [fp, #12]
   32a40:	e1520003 	cmp	r2, r3
   32a44:	1affffe8 	bne	329ec <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e8>
   32a48:	e3031090 	movw	r1, #12432	; 0x3090
   32a4c:	e3401004 	movt	r1, #4
   32a50:	e28100ec 	add	r0, r1, #236	; 0xec
   32a54:	e300212a 	movw	r2, #298	; 0x12a
   32a58:	ebffe798 	bl	2c8c0 <assertion_failed>
   32a5c:	e3031090 	movw	r1, #12432	; 0x3090
   32a60:	e3401004 	movt	r1, #4
   32a64:	e2810f46 	add	r0, r1, #280	; 0x118
   32a68:	e3002143 	movw	r2, #323	; 0x143
   32a6c:	ebffe793 	bl	2c8c0 <assertion_failed>
   32a70:	e3031090 	movw	r1, #12432	; 0x3090
   32a74:	e3401004 	movt	r1, #4
   32a78:	e3a02c01 	mov	r2, #256	; 0x100
   32a7c:	e2810078 	add	r0, r1, #120	; 0x78
   32a80:	ebffe78e 	bl	2c8c0 <assertion_failed>
   32a84:	e3031090 	movw	r1, #12432	; 0x3090
   32a88:	e3401004 	movt	r1, #4
   32a8c:	e2810088 	add	r0, r1, #136	; 0x88
   32a90:	e3002102 	movw	r2, #258	; 0x102
   32a94:	ebffe789 	bl	2c8c0 <assertion_failed>
   32a98:	e3031090 	movw	r1, #12432	; 0x3090
   32a9c:	e3401004 	movt	r1, #4
   32aa0:	e28100b4 	add	r0, r1, #180	; 0xb4
   32aa4:	e3002105 	movw	r2, #261	; 0x105
   32aa8:	ebffe784 	bl	2c8c0 <assertion_failed>
   32aac:	e3031090 	movw	r1, #12432	; 0x3090
   32ab0:	e3401004 	movt	r1, #4
   32ab4:	e3a02f42 	mov	r2, #264	; 0x108
   32ab8:	e28100d8 	add	r0, r1, #216	; 0xd8
   32abc:	ebffe77f 	bl	2c8c0 <assertion_failed>
   32ac0:	e3031090 	movw	r1, #12432	; 0x3090
   32ac4:	e3401004 	movt	r1, #4
   32ac8:	e2810f45 	add	r0, r1, #276	; 0x114
   32acc:	e300213f 	movw	r2, #319	; 0x13f
   32ad0:	ebffe77a 	bl	2c8c0 <assertion_failed>
   32ad4:	000431cc 	.word	0x000431cc

00032ad8 <CSerialDevice::GetOptions() const>:
   32ad8:	e2800a01 	add	r0, r0, #4096	; 0x1000
   32adc:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   32ae0:	e12fff1e 	bx	lr

00032ae4 <CSerialDevice::SetOptions(unsigned int)>:
   32ae4:	e2800a01 	add	r0, r0, #4096	; 0x1000
   32ae8:	e58010d0 	str	r1, [r0, #208]	; 0xd0
   32aec:	e12fff1e 	bx	lr

00032af0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   32af0:	e5903008 	ldr	r3, [r0, #8]
   32af4:	e92d4010 	push	{r4, lr}
   32af8:	e3530000 	cmp	r3, #0
   32afc:	0a00000e 	beq	32b3c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   32b00:	e2800a01 	add	r0, r0, #4096	; 0x1000
   32b04:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   32b08:	e3530000 	cmp	r3, #0
   32b0c:	1a00000f 	bne	32b50 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x60>
   32b10:	e3510000 	cmp	r1, #0
   32b14:	0a000012 	beq	32b64 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x74>
   32b18:	e1d130d0 	ldrsb	r3, [r1]
   32b1c:	e3530000 	cmp	r3, #0
   32b20:	0a000014 	beq	32b78 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x88>
   32b24:	e3520000 	cmp	r2, #0
   32b28:	0a000017 	beq	32b8c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   32b2c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   32b30:	e58010d8 	str	r1, [r0, #216]	; 0xd8
   32b34:	e58010d4 	str	r1, [r0, #212]	; 0xd4
   32b38:	e8bd8010 	pop	{r4, pc}
   32b3c:	e3031090 	movw	r1, #12432	; 0x3090
   32b40:	e3401004 	movt	r1, #4
   32b44:	e3a02e22 	mov	r2, #544	; 0x220
   32b48:	e2810f51 	add	r0, r1, #324	; 0x144
   32b4c:	ebffe75b 	bl	2c8c0 <assertion_failed>
   32b50:	e3031090 	movw	r1, #12432	; 0x3090
   32b54:	e3401004 	movt	r1, #4
   32b58:	e2810f57 	add	r0, r1, #348	; 0x15c
   32b5c:	e3002221 	movw	r2, #545	; 0x221
   32b60:	ebffe756 	bl	2c8c0 <assertion_failed>
   32b64:	e3031090 	movw	r1, #12432	; 0x3090
   32b68:	e3401004 	movt	r1, #4
   32b6c:	e2810f5b 	add	r0, r1, #364	; 0x16c
   32b70:	e3002223 	movw	r2, #547	; 0x223
   32b74:	ebffe751 	bl	2c8c0 <assertion_failed>
   32b78:	e3031090 	movw	r1, #12432	; 0x3090
   32b7c:	e3401004 	movt	r1, #4
   32b80:	e3a02f89 	mov	r2, #548	; 0x224
   32b84:	e2810f5e 	add	r0, r1, #376	; 0x178
   32b88:	ebffe74c 	bl	2c8c0 <assertion_failed>
   32b8c:	e3031090 	movw	r1, #12432	; 0x3090
   32b90:	e3401004 	movt	r1, #4
   32b94:	e2810f62 	add	r0, r1, #392	; 0x188
   32b98:	e3002225 	movw	r2, #549	; 0x225
   32b9c:	ebffe747 	bl	2c8c0 <assertion_failed>

00032ba0 <CSerialDevice::AvailableForWrite()>:
   32ba0:	e5d03018 	ldrb	r3, [r0, #24]
   32ba4:	e92d4010 	push	{r4, lr}
   32ba8:	e3530000 	cmp	r3, #0
   32bac:	0a000019 	beq	32c18 <CSerialDevice::AvailableForWrite()+0x78>
   32bb0:	e5903008 	ldr	r3, [r0, #8]
   32bb4:	e3530000 	cmp	r3, #0
   32bb8:	0a00001b 	beq	32c2c <CSerialDevice::AvailableForWrite()+0x8c>
   32bbc:	e2804a01 	add	r4, r0, #4096	; 0x1000
   32bc0:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   32bc4:	e3500000 	cmp	r0, #0
   32bc8:	1a00000c 	bne	32c00 <CSerialDevice::AvailableForWrite()+0x60>
   32bcc:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
   32bd0:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   32bd4:	e1520003 	cmp	r2, r3
   32bd8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   32bdc:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
   32be0:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
   32be4:	82434001 	subhi	r4, r3, #1
   32be8:	9284400f 	addls	r4, r4, #15
   32bec:	e3500000 	cmp	r0, #0
   32bf0:	e0444002 	sub	r4, r4, r2
   32bf4:	1a000004 	bne	32c0c <CSerialDevice::AvailableForWrite()+0x6c>
   32bf8:	e1a00004 	mov	r0, r4
   32bfc:	e8bd8010 	pop	{r4, pc}
   32c00:	eb00163d 	bl	384fc <EnterCritical>
   32c04:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   32c08:	eaffffef 	b	32bcc <CSerialDevice::AvailableForWrite()+0x2c>
   32c0c:	eb001665 	bl	385a8 <LeaveCritical>
   32c10:	e1a00004 	mov	r0, r4
   32c14:	e8bd8010 	pop	{r4, pc}
   32c18:	e3031090 	movw	r1, #12432	; 0x3090
   32c1c:	e3401004 	movt	r1, #4
   32c20:	e281000c 	add	r0, r1, #12
   32c24:	e300222f 	movw	r2, #559	; 0x22f
   32c28:	ebffe724 	bl	2c8c0 <assertion_failed>
   32c2c:	e3031090 	movw	r1, #12432	; 0x3090
   32c30:	e3401004 	movt	r1, #4
   32c34:	e3a02e23 	mov	r2, #560	; 0x230
   32c38:	e2810f51 	add	r0, r1, #324	; 0x144
   32c3c:	ebffe71f 	bl	2c8c0 <assertion_failed>

00032c40 <CSerialDevice::AvailableForRead()>:
   32c40:	e5d03018 	ldrb	r3, [r0, #24]
   32c44:	e92d4070 	push	{r4, r5, r6, lr}
   32c48:	e3530000 	cmp	r3, #0
   32c4c:	0a000019 	beq	32cb8 <CSerialDevice::AvailableForRead()+0x78>
   32c50:	e5903008 	ldr	r3, [r0, #8]
   32c54:	e1a04000 	mov	r4, r0
   32c58:	e3530000 	cmp	r3, #0
   32c5c:	0a00001a 	beq	32ccc <CSerialDevice::AvailableForRead()+0x8c>
   32c60:	e2805a01 	add	r5, r0, #4096	; 0x1000
   32c64:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   32c68:	e3500000 	cmp	r0, #0
   32c6c:	1a00000b 	bne	32ca0 <CSerialDevice::AvailableForRead()+0x60>
   32c70:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
   32c74:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   32c78:	e1520003 	cmp	r2, r3
   32c7c:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   32c80:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
   32c84:	32834b02 	addcc	r4, r3, #2048	; 0x800
   32c88:	30444002 	subcc	r4, r4, r2
   32c8c:	20434002 	subcs	r4, r3, r2
   32c90:	e3500000 	cmp	r0, #0
   32c94:	1a000004 	bne	32cac <CSerialDevice::AvailableForRead()+0x6c>
   32c98:	e1a00004 	mov	r0, r4
   32c9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32ca0:	eb001615 	bl	384fc <EnterCritical>
   32ca4:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   32ca8:	eafffff0 	b	32c70 <CSerialDevice::AvailableForRead()+0x30>
   32cac:	eb00163d 	bl	385a8 <LeaveCritical>
   32cb0:	e1a00004 	mov	r0, r4
   32cb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   32cb8:	e3031090 	movw	r1, #12432	; 0x3090
   32cbc:	e3401004 	movt	r1, #4
   32cc0:	e281000c 	add	r0, r1, #12
   32cc4:	e3002245 	movw	r2, #581	; 0x245
   32cc8:	ebffe6fc 	bl	2c8c0 <assertion_failed>
   32ccc:	e3031090 	movw	r1, #12432	; 0x3090
   32cd0:	e3401004 	movt	r1, #4
   32cd4:	e2810f51 	add	r0, r1, #324	; 0x144
   32cd8:	e3002246 	movw	r2, #582	; 0x246
   32cdc:	ebffe6f7 	bl	2c8c0 <assertion_failed>

00032ce0 <CSerialDevice::Peek()>:
   32ce0:	e5d03018 	ldrb	r3, [r0, #24]
   32ce4:	e92d4070 	push	{r4, r5, r6, lr}
   32ce8:	e3530000 	cmp	r3, #0
   32cec:	0a00001f 	beq	32d70 <CSerialDevice::Peek()+0x90>
   32cf0:	e5903008 	ldr	r3, [r0, #8]
   32cf4:	e1a04000 	mov	r4, r0
   32cf8:	e3530000 	cmp	r3, #0
   32cfc:	0a000020 	beq	32d84 <CSerialDevice::Peek()+0xa4>
   32d00:	e2805a01 	add	r5, r0, #4096	; 0x1000
   32d04:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   32d08:	e3500000 	cmp	r0, #0
   32d0c:	1a000008 	bne	32d34 <CSerialDevice::Peek()+0x54>
   32d10:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
   32d14:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   32d18:	e1520003 	cmp	r2, r3
   32d1c:	0a00001d 	beq	32d98 <CSerialDevice::Peek()+0xb8>
   32d20:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   32d24:	e0844003 	add	r4, r4, r3
   32d28:	e5d440bc 	ldrb	r4, [r4, #188]	; 0xbc
   32d2c:	e1a00004 	mov	r0, r4
   32d30:	e8bd8070 	pop	{r4, r5, r6, pc}
   32d34:	eb0015f0 	bl	384fc <EnterCritical>
   32d38:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
   32d3c:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   32d40:	e1520003 	cmp	r2, r3
   32d44:	03e04000 	mvneq	r4, #0
   32d48:	159438c0 	ldrne	r3, [r4, #2240]	; 0x8c0
   32d4c:	059520e0 	ldreq	r2, [r5, #224]	; 0xe0
   32d50:	10843003 	addne	r3, r4, r3
   32d54:	159520e0 	ldrne	r2, [r5, #224]	; 0xe0
   32d58:	15d340bc 	ldrbne	r4, [r3, #188]	; 0xbc
   32d5c:	e3520000 	cmp	r2, #0
   32d60:	0afffff1 	beq	32d2c <CSerialDevice::Peek()+0x4c>
   32d64:	eb00160f 	bl	385a8 <LeaveCritical>
   32d68:	e1a00004 	mov	r0, r4
   32d6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32d70:	e3031090 	movw	r1, #12432	; 0x3090
   32d74:	e3401004 	movt	r1, #4
   32d78:	e281000c 	add	r0, r1, #12
   32d7c:	e300225b 	movw	r2, #603	; 0x25b
   32d80:	ebffe6ce 	bl	2c8c0 <assertion_failed>
   32d84:	e3031090 	movw	r1, #12432	; 0x3090
   32d88:	e3401004 	movt	r1, #4
   32d8c:	e3a02f97 	mov	r2, #604	; 0x25c
   32d90:	e2810f51 	add	r0, r1, #324	; 0x144
   32d94:	ebffe6c9 	bl	2c8c0 <assertion_failed>
   32d98:	e3e04000 	mvn	r4, #0
   32d9c:	eaffffe2 	b	32d2c <CSerialDevice::Peek()+0x4c>

00032da0 <CSerialDevice::Flush()>:
   32da0:	e5902014 	ldr	r2, [r0, #20]
   32da4:	e2822018 	add	r2, r2, #24
   32da8:	e5923000 	ldr	r3, [r2]
   32dac:	e3130008 	tst	r3, #8
   32db0:	1afffffc 	bne	32da8 <CSerialDevice::Flush()+0x8>
   32db4:	e12fff1e 	bx	lr

00032db8 <CSerialDevice::Write(unsigned char)>:
   32db8:	e5903008 	ldr	r3, [r0, #8]
   32dbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32dc0:	e1a04000 	mov	r4, r0
   32dc4:	e1a05001 	mov	r5, r1
   32dc8:	e3530000 	cmp	r3, #0
   32dcc:	0a000021 	beq	32e58 <CSerialDevice::Write(unsigned char)+0xa0>
   32dd0:	e2806a01 	add	r6, r0, #4096	; 0x1000
   32dd4:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   32dd8:	e3500000 	cmp	r0, #0
   32ddc:	1a000013 	bne	32e30 <CSerialDevice::Write(unsigned char)+0x78>
   32de0:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   32de4:	e59610cc 	ldr	r1, [r6, #204]	; 0xcc
   32de8:	e2833001 	add	r3, r3, #1
   32dec:	e7ea3053 	ubfx	r3, r3, #0, #11
   32df0:	e1530001 	cmp	r3, r1
   32df4:	0a000020 	beq	32e7c <CSerialDevice::Write(unsigned char)+0xc4>
   32df8:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   32dfc:	e3a07001 	mov	r7, #1
   32e00:	e0844003 	add	r4, r4, r3
   32e04:	e2833001 	add	r3, r3, #1
   32e08:	e58630c8 	str	r3, [r6, #200]	; 0xc8
   32e0c:	e5c458c8 	strb	r5, [r4, #2248]	; 0x8c8
   32e10:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   32e14:	e7ea3053 	ubfx	r3, r3, #0, #11
   32e18:	e58630c8 	str	r3, [r6, #200]	; 0xc8
   32e1c:	e3500000 	cmp	r0, #0
   32e20:	0a000000 	beq	32e28 <CSerialDevice::Write(unsigned char)+0x70>
   32e24:	eb0015df 	bl	385a8 <LeaveCritical>
   32e28:	e1a00007 	mov	r0, r7
   32e2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32e30:	eb0015b1 	bl	384fc <EnterCritical>
   32e34:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   32e38:	e59620cc 	ldr	r2, [r6, #204]	; 0xcc
   32e3c:	e2833001 	add	r3, r3, #1
   32e40:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   32e44:	e7ea3053 	ubfx	r3, r3, #0, #11
   32e48:	e1530002 	cmp	r3, r2
   32e4c:	03a07000 	moveq	r7, #0
   32e50:	1affffe8 	bne	32df8 <CSerialDevice::Write(unsigned char)+0x40>
   32e54:	eafffff0 	b	32e1c <CSerialDevice::Write(unsigned char)+0x64>
   32e58:	e5901014 	ldr	r1, [r0, #20]
   32e5c:	e2812018 	add	r2, r1, #24
   32e60:	e5923000 	ldr	r3, [r2]
   32e64:	e3130020 	tst	r3, #32
   32e68:	1afffffc 	bne	32e60 <CSerialDevice::Write(unsigned char)+0xa8>
   32e6c:	e3a07001 	mov	r7, #1
   32e70:	e5815000 	str	r5, [r1]
   32e74:	e1a00007 	mov	r0, r7
   32e78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32e7c:	e1a07000 	mov	r7, r0
   32e80:	e1a00007 	mov	r0, r7
   32e84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00032e88 <CSerialDevice::Write(void const*, unsigned int)>:
   32e88:	e5d03018 	ldrb	r3, [r0, #24]
   32e8c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32e90:	e3530000 	cmp	r3, #0
   32e94:	0a00008a 	beq	330c4 <CSerialDevice::Write(void const*, unsigned int)+0x23c>
   32e98:	e2804a01 	add	r4, r0, #4096	; 0x1000
   32e9c:	e1a06000 	mov	r6, r0
   32ea0:	e1a05001 	mov	r5, r1
   32ea4:	e1a08002 	mov	r8, r2
   32ea8:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
   32eac:	e3500000 	cmp	r0, #0
   32eb0:	1a000078 	bne	33098 <CSerialDevice::Write(void const*, unsigned int)+0x210>
   32eb4:	e3550000 	cmp	r5, #0
   32eb8:	0a000086 	beq	330d8 <CSerialDevice::Write(void const*, unsigned int)+0x250>
   32ebc:	e3580000 	cmp	r8, #0
   32ec0:	01a07008 	moveq	r7, r8
   32ec4:	0a000025 	beq	32f60 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   32ec8:	e2455001 	sub	r5, r5, #1
   32ecc:	e3a07000 	mov	r7, #0
   32ed0:	ea000002 	b	32ee0 <CSerialDevice::Write(void const*, unsigned int)+0x58>
   32ed4:	e2877001 	add	r7, r7, #1
   32ed8:	e1570008 	cmp	r7, r8
   32edc:	0a00001f 	beq	32f60 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   32ee0:	e5963008 	ldr	r3, [r6, #8]
   32ee4:	e5f59001 	ldrb	r9, [r5, #1]!
   32ee8:	e3530000 	cmp	r3, #0
   32eec:	0a000046 	beq	3300c <CSerialDevice::Write(void const*, unsigned int)+0x184>
   32ef0:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   32ef4:	e3500000 	cmp	r0, #0
   32ef8:	1a00004a 	bne	33028 <CSerialDevice::Write(void const*, unsigned int)+0x1a0>
   32efc:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   32f00:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
   32f04:	e2833001 	add	r3, r3, #1
   32f08:	e7ea3053 	ubfx	r3, r3, #0, #11
   32f0c:	e1530002 	cmp	r3, r2
   32f10:	0a000012 	beq	32f60 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   32f14:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   32f18:	e0862003 	add	r2, r6, r3
   32f1c:	e2833001 	add	r3, r3, #1
   32f20:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   32f24:	e5c298c8 	strb	r9, [r2, #2248]	; 0x8c8
   32f28:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   32f2c:	e7ea3053 	ubfx	r3, r3, #0, #11
   32f30:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   32f34:	e5d53000 	ldrb	r3, [r5]
   32f38:	e353000a 	cmp	r3, #10
   32f3c:	1affffe4 	bne	32ed4 <CSerialDevice::Write(void const*, unsigned int)+0x4c>
   32f40:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   32f44:	e3130001 	tst	r3, #1
   32f48:	0affffe1 	beq	32ed4 <CSerialDevice::Write(void const*, unsigned int)+0x4c>
   32f4c:	e3a0100d 	mov	r1, #13
   32f50:	e1a00006 	mov	r0, r6
   32f54:	ebffff97 	bl	32db8 <CSerialDevice::Write(unsigned char)>
   32f58:	e3500000 	cmp	r0, #0
   32f5c:	1affffdc 	bne	32ed4 <CSerialDevice::Write(void const*, unsigned int)+0x4c>
   32f60:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   32f64:	e3530000 	cmp	r3, #0
   32f68:	1a000048 	bne	33090 <CSerialDevice::Write(void const*, unsigned int)+0x208>
   32f6c:	e5963008 	ldr	r3, [r6, #8]
   32f70:	e3530000 	cmp	r3, #0
   32f74:	0a000022 	beq	33004 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
   32f78:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   32f7c:	e3500000 	cmp	r0, #0
   32f80:	1a000049 	bne	330ac <CSerialDevice::Write(void const*, unsigned int)+0x224>
   32f84:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   32f88:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
   32f8c:	e1520003 	cmp	r2, r3
   32f90:	0a00001b 	beq	33004 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
   32f94:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   32f98:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
   32f9c:	e1520003 	cmp	r2, r3
   32fa0:	1a00000d 	bne	32fdc <CSerialDevice::Write(void const*, unsigned int)+0x154>
   32fa4:	ea000013 	b	32ff8 <CSerialDevice::Write(void const*, unsigned int)+0x170>
   32fa8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   32fac:	e0861003 	add	r1, r6, r3
   32fb0:	e2833001 	add	r3, r3, #1
   32fb4:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   32fb8:	e5d138c8 	ldrb	r3, [r1, #2248]	; 0x8c8
   32fbc:	e5823000 	str	r3, [r2]
   32fc0:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   32fc4:	e7ea3053 	ubfx	r3, r3, #0, #11
   32fc8:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   32fcc:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
   32fd0:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   32fd4:	e1520003 	cmp	r2, r3
   32fd8:	0a000006 	beq	32ff8 <CSerialDevice::Write(void const*, unsigned int)+0x170>
   32fdc:	e5962014 	ldr	r2, [r6, #20]
   32fe0:	e5923018 	ldr	r3, [r2, #24]
   32fe4:	e3130020 	tst	r3, #32
   32fe8:	0affffee 	beq	32fa8 <CSerialDevice::Write(void const*, unsigned int)+0x120>
   32fec:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   32ff0:	e3833020 	orr	r3, r3, #32
   32ff4:	e5823038 	str	r3, [r2, #56]	; 0x38
   32ff8:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   32ffc:	e3530000 	cmp	r3, #0
   33000:	1a000026 	bne	330a0 <CSerialDevice::Write(void const*, unsigned int)+0x218>
   33004:	e1a00007 	mov	r0, r7
   33008:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3300c:	e5962014 	ldr	r2, [r6, #20]
   33010:	e2821018 	add	r1, r2, #24
   33014:	e5913000 	ldr	r3, [r1]
   33018:	e3130020 	tst	r3, #32
   3301c:	1afffffc 	bne	33014 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
   33020:	e5829000 	str	r9, [r2]
   33024:	eaffffc2 	b	32f34 <CSerialDevice::Write(void const*, unsigned int)+0xac>
   33028:	eb001533 	bl	384fc <EnterCritical>
   3302c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   33030:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
   33034:	e2833001 	add	r3, r3, #1
   33038:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   3303c:	e7ea3053 	ubfx	r3, r3, #0, #11
   33040:	e1530002 	cmp	r3, r2
   33044:	0a00000b 	beq	33078 <CSerialDevice::Write(void const*, unsigned int)+0x1f0>
   33048:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   3304c:	e3500000 	cmp	r0, #0
   33050:	e2832001 	add	r2, r3, #1
   33054:	e0863003 	add	r3, r6, r3
   33058:	e58420c8 	str	r2, [r4, #200]	; 0xc8
   3305c:	e5c398c8 	strb	r9, [r3, #2248]	; 0x8c8
   33060:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   33064:	e7ea3053 	ubfx	r3, r3, #0, #11
   33068:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   3306c:	0affffb0 	beq	32f34 <CSerialDevice::Write(void const*, unsigned int)+0xac>
   33070:	eb00154c 	bl	385a8 <LeaveCritical>
   33074:	eaffffae 	b	32f34 <CSerialDevice::Write(void const*, unsigned int)+0xac>
   33078:	e3500000 	cmp	r0, #0
   3307c:	0affffb7 	beq	32f60 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   33080:	eb001548 	bl	385a8 <LeaveCritical>
   33084:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   33088:	e3530000 	cmp	r3, #0
   3308c:	0affffb6 	beq	32f6c <CSerialDevice::Write(void const*, unsigned int)+0xe4>
   33090:	eb001544 	bl	385a8 <LeaveCritical>
   33094:	eaffffb4 	b	32f6c <CSerialDevice::Write(void const*, unsigned int)+0xe4>
   33098:	eb001517 	bl	384fc <EnterCritical>
   3309c:	eaffff84 	b	32eb4 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
   330a0:	eb001540 	bl	385a8 <LeaveCritical>
   330a4:	e1a00007 	mov	r0, r7
   330a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   330ac:	eb001512 	bl	384fc <EnterCritical>
   330b0:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
   330b4:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   330b8:	e1520003 	cmp	r2, r3
   330bc:	1affffb4 	bne	32f94 <CSerialDevice::Write(void const*, unsigned int)+0x10c>
   330c0:	eaffffcc 	b	32ff8 <CSerialDevice::Write(void const*, unsigned int)+0x170>
   330c4:	e3031090 	movw	r1, #12432	; 0x3090
   330c8:	e3401004 	movt	r1, #4
   330cc:	e281000c 	add	r0, r1, #12
   330d0:	e3002176 	movw	r2, #374	; 0x176
   330d4:	ebffe5f9 	bl	2c8c0 <assertion_failed>
   330d8:	e3031090 	movw	r1, #12432	; 0x3090
   330dc:	e3401004 	movt	r1, #4
   330e0:	e2810018 	add	r0, r1, #24
   330e4:	e3002183 	movw	r2, #387	; 0x183
   330e8:	ebffe5f4 	bl	2c8c0 <assertion_failed>

000330ec <CSerialDevice::InterruptHandler()>:
   330ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   330f0:	e2805a01 	add	r5, r0, #4096	; 0x1000
   330f4:	e1a04000 	mov	r4, r0
   330f8:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   330fc:	e3500000 	cmp	r0, #0
   33100:	1a000069 	bne	332ac <CSerialDevice::InterruptHandler()+0x1c0>
   33104:	e5943014 	ldr	r3, [r4, #20]
   33108:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   3310c:	e5832044 	str	r2, [r3, #68]	; 0x44
   33110:	e5942014 	ldr	r2, [r4, #20]
   33114:	e282c018 	add	ip, r2, #24
   33118:	e5926018 	ldr	r6, [r2, #24]
   3311c:	e2166010 	ands	r6, r6, #16
   33120:	1a000067 	bne	332c4 <CSerialDevice::InterruptHandler()+0x1d8>
   33124:	e59500d4 	ldr	r0, [r5, #212]	; 0xd4
   33128:	e3e0e001 	mvn	lr, #1
   3312c:	e3e07000 	mvn	r7, #0
   33130:	ea000020 	b	331b8 <CSerialDevice::InterruptHandler()+0xcc>
   33134:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   33138:	e3530000 	cmp	r3, #0
   3313c:	058478c4 	streq	r7, [r4, #2244]	; 0x8c4
   33140:	e3500000 	cmp	r0, #0
   33144:	0a00000a 	beq	33174 <CSerialDevice::InterruptHandler()+0x88>
   33148:	e59580d8 	ldr	r8, [r5, #216]	; 0xd8
   3314c:	e6af3071 	sxtb	r3, r1
   33150:	e1d890d0 	ldrsb	r9, [r8]
   33154:	e1590003 	cmp	r9, r3
   33158:	158500d8 	strne	r0, [r5, #216]	; 0xd8
   3315c:	1a000004 	bne	33174 <CSerialDevice::InterruptHandler()+0x88>
   33160:	e2883001 	add	r3, r8, #1
   33164:	e58530d8 	str	r3, [r5, #216]	; 0xd8
   33168:	e1d830d1 	ldrsb	r3, [r8, #1]
   3316c:	e3530000 	cmp	r3, #0
   33170:	03a06001 	moveq	r6, #1
   33174:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   33178:	e59488c0 	ldr	r8, [r4, #2240]	; 0x8c0
   3317c:	e2833001 	add	r3, r3, #1
   33180:	e7ea3053 	ubfx	r3, r3, #0, #11
   33184:	e1530008 	cmp	r3, r8
   33188:	0a000013 	beq	331dc <CSerialDevice::InterruptHandler()+0xf0>
   3318c:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   33190:	e0848003 	add	r8, r4, r3
   33194:	e2833001 	add	r3, r3, #1
   33198:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
   3319c:	e5c810bc 	strb	r1, [r8, #188]	; 0xbc
   331a0:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   331a4:	e7ea3053 	ubfx	r3, r3, #0, #11
   331a8:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
   331ac:	e59c3000 	ldr	r3, [ip]
   331b0:	e3130010 	tst	r3, #16
   331b4:	1a00000e 	bne	331f4 <CSerialDevice::InterruptHandler()+0x108>
   331b8:	e5921000 	ldr	r1, [r2]
   331bc:	e3110b01 	tst	r1, #1024	; 0x400
   331c0:	1affffdb 	bne	33134 <CSerialDevice::InterruptHandler()+0x48>
   331c4:	e3110b02 	tst	r1, #2048	; 0x800
   331c8:	0a000029 	beq	33274 <CSerialDevice::InterruptHandler()+0x188>
   331cc:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   331d0:	e3530000 	cmp	r3, #0
   331d4:	0584e8c4 	streq	lr, [r4, #2244]	; 0x8c4
   331d8:	eaffffd8 	b	33140 <CSerialDevice::InterruptHandler()+0x54>
   331dc:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   331e0:	e3530000 	cmp	r3, #0
   331e4:	0584e8c4 	streq	lr, [r4, #2244]	; 0x8c4
   331e8:	e59c3000 	ldr	r3, [ip]
   331ec:	e3130010 	tst	r3, #16
   331f0:	0afffff0 	beq	331b8 <CSerialDevice::InterruptHandler()+0xcc>
   331f4:	e59c3000 	ldr	r3, [ip]
   331f8:	e3130020 	tst	r3, #32
   331fc:	0a00000d 	beq	33238 <CSerialDevice::InterruptHandler()+0x14c>
   33200:	ea000013 	b	33254 <CSerialDevice::InterruptHandler()+0x168>
   33204:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
   33208:	e0841003 	add	r1, r4, r3
   3320c:	e2833001 	add	r3, r3, #1
   33210:	e58530cc 	str	r3, [r5, #204]	; 0xcc
   33214:	e5d138c8 	ldrb	r3, [r1, #2248]	; 0x8c8
   33218:	e5823000 	str	r3, [r2]
   3321c:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
   33220:	e7ea3053 	ubfx	r3, r3, #0, #11
   33224:	e58530cc 	str	r3, [r5, #204]	; 0xcc
   33228:	e5942014 	ldr	r2, [r4, #20]
   3322c:	e5923018 	ldr	r3, [r2, #24]
   33230:	e3130020 	tst	r3, #32
   33234:	1a000006 	bne	33254 <CSerialDevice::InterruptHandler()+0x168>
   33238:	e59510c8 	ldr	r1, [r5, #200]	; 0xc8
   3323c:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
   33240:	e1510003 	cmp	r1, r3
   33244:	1affffee 	bne	33204 <CSerialDevice::InterruptHandler()+0x118>
   33248:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   3324c:	e3c33020 	bic	r3, r3, #32
   33250:	e5823038 	str	r3, [r2, #56]	; 0x38
   33254:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
   33258:	e3530000 	cmp	r3, #0
   3325c:	1a000014 	bne	332b4 <CSerialDevice::InterruptHandler()+0x1c8>
   33260:	e3560000 	cmp	r6, #0
   33264:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33268:	e59530dc 	ldr	r3, [r5, #220]	; 0xdc
   3326c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   33270:	e12fff13 	bx	r3
   33274:	e3110c01 	tst	r1, #256	; 0x100
   33278:	0a000004 	beq	33290 <CSerialDevice::InterruptHandler()+0x1a4>
   3327c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   33280:	e3530000 	cmp	r3, #0
   33284:	03e03002 	mvneq	r3, #2
   33288:	058438c4 	streq	r3, [r4, #2244]	; 0x8c4
   3328c:	eaffffab 	b	33140 <CSerialDevice::InterruptHandler()+0x54>
   33290:	e3110c02 	tst	r1, #512	; 0x200
   33294:	0affffa9 	beq	33140 <CSerialDevice::InterruptHandler()+0x54>
   33298:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   3329c:	e3530000 	cmp	r3, #0
   332a0:	03e03003 	mvneq	r3, #3
   332a4:	058438c4 	streq	r3, [r4, #2244]	; 0x8c4
   332a8:	eaffffa4 	b	33140 <CSerialDevice::InterruptHandler()+0x54>
   332ac:	eb001492 	bl	384fc <EnterCritical>
   332b0:	eaffff93 	b	33104 <CSerialDevice::InterruptHandler()+0x18>
   332b4:	eb0014bb 	bl	385a8 <LeaveCritical>
   332b8:	e3560000 	cmp	r6, #0
   332bc:	1affffe9 	bne	33268 <CSerialDevice::InterruptHandler()+0x17c>
   332c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   332c4:	e5923018 	ldr	r3, [r2, #24]
   332c8:	e2136020 	ands	r6, r3, #32
   332cc:	0affffd9 	beq	33238 <CSerialDevice::InterruptHandler()+0x14c>
   332d0:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
   332d4:	e3530000 	cmp	r3, #0
   332d8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   332dc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   332e0:	ea0014b0 	b	385a8 <LeaveCritical>

000332e4 <CSerialDevice::InterruptStub(void*)>:
   332e4:	f57ff05f 	dmb	sy
   332e8:	e3043f54 	movw	r3, #20308	; 0x4f54
   332ec:	e3403004 	movt	r3, #4
   332f0:	e5932010 	ldr	r2, [r3, #16]
   332f4:	e3120001 	tst	r2, #1
   332f8:	012fff1e 	bxeq	lr
   332fc:	e5930000 	ldr	r0, [r3]
   33300:	e3500000 	cmp	r0, #0
   33304:	0a000000 	beq	3330c <CSerialDevice::InterruptStub(void*)+0x28>
   33308:	eaffff77 	b	330ec <CSerialDevice::InterruptHandler()>
   3330c:	e3031090 	movw	r1, #12432	; 0x3090
   33310:	e3401004 	movt	r1, #4
   33314:	e2810f66 	add	r0, r1, #408	; 0x198
   33318:	e92d4010 	push	{r4, lr}
   3331c:	e300230f 	movw	r2, #783	; 0x30f
   33320:	ebffe566 	bl	2c8c0 <assertion_failed>

00033324 <CSerialDevice::~CSerialDevice()>:
   33324:	e5d03018 	ldrb	r3, [r0, #24]
   33328:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3332c:	e1a04000 	mov	r4, r0
   33330:	e59f6130 	ldr	r6, [pc, #304]	; 33468 <CSerialDevice::~CSerialDevice()+0x144>
   33334:	e3530000 	cmp	r3, #0
   33338:	e5806000 	str	r6, [r0]
   3333c:	0a00003e 	beq	3343c <CSerialDevice::~CSerialDevice()+0x118>
   33340:	ebffe8f5 	bl	2d71c <CDeviceNameService::Get()>
   33344:	e3045f54 	movw	r5, #20308	; 0x4f54
   33348:	e3405004 	movt	r5, #4
   3334c:	e5942010 	ldr	r2, [r4, #16]
   33350:	e2861e11 	add	r1, r6, #272	; 0x110
   33354:	e3a03000 	mov	r3, #0
   33358:	e2822001 	add	r2, r2, #1
   3335c:	ebffe914 	bl	2d7b4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   33360:	e5953010 	ldr	r3, [r5, #16]
   33364:	e5942010 	ldr	r2, [r4, #16]
   33368:	e3a01001 	mov	r1, #1
   3336c:	e1c33211 	bic	r3, r3, r1, lsl r2
   33370:	e5853010 	str	r3, [r5, #16]
   33374:	f57ff04f 	dsb	sy
   33378:	e5942014 	ldr	r2, [r4, #20]
   3337c:	e3a03000 	mov	r3, #0
   33380:	e5823038 	str	r3, [r2, #56]	; 0x38
   33384:	e5942014 	ldr	r2, [r4, #20]
   33388:	e5823030 	str	r3, [r2, #48]	; 0x30
   3338c:	e5943008 	ldr	r3, [r4, #8]
   33390:	e3530000 	cmp	r3, #0
   33394:	0a00000e 	beq	333d4 <CSerialDevice::~CSerialDevice()+0xb0>
   33398:	e5953004 	ldr	r3, [r5, #4]
   3339c:	e2433001 	sub	r3, r3, #1
   333a0:	e5853004 	str	r3, [r5, #4]
   333a4:	e3530000 	cmp	r3, #0
   333a8:	1a000009 	bne	333d4 <CSerialDevice::~CSerialDevice()+0xb0>
   333ac:	e5950008 	ldr	r0, [r5, #8]
   333b0:	e3500000 	cmp	r0, #0
   333b4:	0a000027 	beq	33458 <CSerialDevice::~CSerialDevice()+0x134>
   333b8:	e5d5300c 	ldrb	r3, [r5, #12]
   333bc:	e3530000 	cmp	r3, #0
   333c0:	0a000021 	beq	3344c <CSerialDevice::~CSerialDevice()+0x128>
   333c4:	eb001571 	bl	38990 <CInterruptSystem::DisconnectFIQ()>
   333c8:	e3a03000 	mov	r3, #0
   333cc:	e5853008 	str	r3, [r5, #8]
   333d0:	e5c5300c 	strb	r3, [r5, #12]
   333d4:	e284606c 	add	r6, r4, #108	; 0x6c
   333d8:	e3a02001 	mov	r2, #1
   333dc:	e3a01000 	mov	r1, #0
   333e0:	e1a00006 	mov	r0, r6
   333e4:	e2847094 	add	r7, r4, #148	; 0x94
   333e8:	ebffec76 	bl	2e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   333ec:	e3a02001 	mov	r2, #1
   333f0:	e3a01000 	mov	r1, #0
   333f4:	e1a00007 	mov	r0, r7
   333f8:	ebffec72 	bl	2e5c8 <CGPIOPin::SetMode(TGPIOMode, bool)>
   333fc:	e5942010 	ldr	r2, [r4, #16]
   33400:	e3a03000 	mov	r3, #0
   33404:	e1a00007 	mov	r0, r7
   33408:	e5c43018 	strb	r3, [r4, #24]
   3340c:	e7853102 	str	r3, [r5, r2, lsl #2]
   33410:	ebffea2c 	bl	2dcc8 <CGPIOPin::~CGPIOPin()>
   33414:	e1a00006 	mov	r0, r6
   33418:	ebffea2a 	bl	2dcc8 <CGPIOPin::~CGPIOPin()>
   3341c:	e2840044 	add	r0, r4, #68	; 0x44
   33420:	ebffea28 	bl	2dcc8 <CGPIOPin::~CGPIOPin()>
   33424:	e284001c 	add	r0, r4, #28
   33428:	ebffea26 	bl	2dcc8 <CGPIOPin::~CGPIOPin()>
   3342c:	e1a00004 	mov	r0, r4
   33430:	ebffe750 	bl	2d178 <CDevice::~CDevice()>
   33434:	e1a00004 	mov	r0, r4
   33438:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3343c:	e2800094 	add	r0, r0, #148	; 0x94
   33440:	ebffea20 	bl	2dcc8 <CGPIOPin::~CGPIOPin()>
   33444:	e284006c 	add	r0, r4, #108	; 0x6c
   33448:	eafffff2 	b	33418 <CSerialDevice::~CSerialDevice()+0xf4>
   3344c:	e3a01039 	mov	r1, #57	; 0x39
   33450:	eb0014e6 	bl	387f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   33454:	eaffffdb 	b	333c8 <CSerialDevice::~CSerialDevice()+0xa4>
   33458:	e3a020e2 	mov	r2, #226	; 0xe2
   3345c:	e246102c 	sub	r1, r6, #44	; 0x2c
   33460:	e2860f5f 	add	r0, r6, #380	; 0x17c
   33464:	ebffe515 	bl	2c8c0 <assertion_failed>
   33468:	000430bc 	.word	0x000430bc

0003346c <CSerialDevice::~CSerialDevice()>:
   3346c:	e92d4010 	push	{r4, lr}
   33470:	e1a04000 	mov	r4, r0
   33474:	ebffffaa 	bl	33324 <CSerialDevice::~CSerialDevice()>
   33478:	e1a00004 	mov	r0, r4
   3347c:	e30110e8 	movw	r1, #4328	; 0x10e8
   33480:	eb000e1d 	bl	36cfc <operator delete(void*, unsigned int)>
   33484:	e1a00004 	mov	r0, r4
   33488:	e8bd8010 	pop	{r4, pc}
   3348c:	00000000 	andeq	r0, r0, r0

00033490 <CString::~CString()>:
   33490:	e92d4010 	push	{r4, lr}
   33494:	e1a04000 	mov	r4, r0
   33498:	e5900004 	ldr	r0, [r0, #4]
   3349c:	e59f3014 	ldr	r3, [pc, #20]	; 334b8 <CString::~CString()+0x28>
   334a0:	e3500000 	cmp	r0, #0
   334a4:	e5843000 	str	r3, [r4]
   334a8:	0a000000 	beq	334b0 <CString::~CString()+0x20>
   334ac:	eb000e0c 	bl	36ce4 <operator delete[](void*)>
   334b0:	e1a00004 	mov	r0, r4
   334b4:	e8bd8010 	pop	{r4, pc}
   334b8:	0004326c 	.word	0x0004326c

000334bc <CString::~CString()>:
   334bc:	e92d4010 	push	{r4, lr}
   334c0:	e1a04000 	mov	r4, r0
   334c4:	e5900004 	ldr	r0, [r0, #4]
   334c8:	e59f3020 	ldr	r3, [pc, #32]	; 334f0 <CString::~CString()+0x34>
   334cc:	e3500000 	cmp	r0, #0
   334d0:	e5843000 	str	r3, [r4]
   334d4:	0a000000 	beq	334dc <CString::~CString()+0x20>
   334d8:	eb000e01 	bl	36ce4 <operator delete[](void*)>
   334dc:	e1a00004 	mov	r0, r4
   334e0:	e3a01010 	mov	r1, #16
   334e4:	eb000e04 	bl	36cfc <operator delete(void*, unsigned int)>
   334e8:	e1a00004 	mov	r0, r4
   334ec:	e8bd8010 	pop	{r4, pc}
   334f0:	0004326c 	.word	0x0004326c

000334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   334f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   334f8:	e990004c 	ldmib	r0, {r2, r3, r6}
   334fc:	e0466002 	sub	r6, r6, r2
   33500:	e0861001 	add	r1, r6, r1
   33504:	e2812001 	add	r2, r1, #1
   33508:	e1520003 	cmp	r2, r3
   3350c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   33510:	e1a04000 	mov	r4, r0
   33514:	e2815041 	add	r5, r1, #65	; 0x41
   33518:	e1a00005 	mov	r0, r5
   3351c:	eb000de4 	bl	36cb4 <operator new[](unsigned int)>
   33520:	e3a02000 	mov	r2, #0
   33524:	e594300c 	ldr	r3, [r4, #12]
   33528:	e1a07000 	mov	r7, r0
   3352c:	e5c32000 	strb	r2, [r3]
   33530:	e5941004 	ldr	r1, [r4, #4]
   33534:	eb000a6a 	bl	35ee4 <strcpy>
   33538:	e5940004 	ldr	r0, [r4, #4]
   3353c:	e3500000 	cmp	r0, #0
   33540:	0a000000 	beq	33548 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   33544:	eb000de6 	bl	36ce4 <operator delete[](void*)>
   33548:	e0876006 	add	r6, r7, r6
   3354c:	e5847004 	str	r7, [r4, #4]
   33550:	e5845008 	str	r5, [r4, #8]
   33554:	e584600c 	str	r6, [r4, #12]
   33558:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003355c <CString::CString()>:
   3355c:	e59f100c 	ldr	r1, [pc, #12]	; 33570 <CString::CString()+0x14>
   33560:	e3a02000 	mov	r2, #0
   33564:	e8800006 	stm	r0, {r1, r2}
   33568:	e5802008 	str	r2, [r0, #8]
   3356c:	e12fff1e 	bx	lr
   33570:	0004326c 	.word	0x0004326c

00033574 <CString::CString(char const*)>:
   33574:	e92d4070 	push	{r4, r5, r6, lr}
   33578:	e1a04000 	mov	r4, r0
   3357c:	e59f302c 	ldr	r3, [pc, #44]	; 335b0 <CString::CString(char const*)+0x3c>
   33580:	e1a00001 	mov	r0, r1
   33584:	e1a05001 	mov	r5, r1
   33588:	e5843000 	str	r3, [r4]
   3358c:	eb0009b0 	bl	35c54 <strlen>
   33590:	e2800001 	add	r0, r0, #1
   33594:	e5840008 	str	r0, [r4, #8]
   33598:	eb000dc5 	bl	36cb4 <operator new[](unsigned int)>
   3359c:	e1a01005 	mov	r1, r5
   335a0:	e5840004 	str	r0, [r4, #4]
   335a4:	eb000a4e 	bl	35ee4 <strcpy>
   335a8:	e1a00004 	mov	r0, r4
   335ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   335b0:	0004326c 	.word	0x0004326c

000335b4 <CString::CString(CString const&)>:
   335b4:	e92d4070 	push	{r4, r5, r6, lr}
   335b8:	e1a04000 	mov	r4, r0
   335bc:	e5910004 	ldr	r0, [r1, #4]
   335c0:	e59f3040 	ldr	r3, [pc, #64]	; 33608 <CString::CString(CString const&)+0x54>
   335c4:	e1a06001 	mov	r6, r1
   335c8:	e3500000 	cmp	r0, #0
   335cc:	e3015bc8 	movw	r5, #7112	; 0x1bc8
   335d0:	e3405004 	movt	r5, #4
   335d4:	e5843000 	str	r3, [r4]
   335d8:	01a00005 	moveq	r0, r5
   335dc:	eb00099c 	bl	35c54 <strlen>
   335e0:	e2800001 	add	r0, r0, #1
   335e4:	e5840008 	str	r0, [r4, #8]
   335e8:	eb000db1 	bl	36cb4 <operator new[](unsigned int)>
   335ec:	e5961004 	ldr	r1, [r6, #4]
   335f0:	e5840004 	str	r0, [r4, #4]
   335f4:	e3510000 	cmp	r1, #0
   335f8:	01a01005 	moveq	r1, r5
   335fc:	eb000a38 	bl	35ee4 <strcpy>
   33600:	e1a00004 	mov	r0, r4
   33604:	e8bd8070 	pop	{r4, r5, r6, pc}
   33608:	0004326c 	.word	0x0004326c

0003360c <CString::CString(CString&&)>:
   3360c:	e59fc024 	ldr	ip, [pc, #36]	; 33638 <CString::CString(CString&&)+0x2c>
   33610:	e3a02000 	mov	r2, #0
   33614:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33618:	e591e008 	ldr	lr, [r1, #8]
   3361c:	e580c000 	str	ip, [r0]
   33620:	e591c004 	ldr	ip, [r1, #4]
   33624:	e580e008 	str	lr, [r0, #8]
   33628:	e5812008 	str	r2, [r1, #8]
   3362c:	e580c004 	str	ip, [r0, #4]
   33630:	e5812004 	str	r2, [r1, #4]
   33634:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   33638:	0004326c 	.word	0x0004326c

0003363c <CString::operator char const*() const>:
   3363c:	e5900004 	ldr	r0, [r0, #4]
   33640:	e3013bc8 	movw	r3, #7112	; 0x1bc8
   33644:	e3403004 	movt	r3, #4
   33648:	e3500000 	cmp	r0, #0
   3364c:	01a00003 	moveq	r0, r3
   33650:	e12fff1e 	bx	lr

00033654 <CString::operator=(char const*)>:
   33654:	e92d4070 	push	{r4, r5, r6, lr}
   33658:	e1a04000 	mov	r4, r0
   3365c:	e5900004 	ldr	r0, [r0, #4]
   33660:	e1a05001 	mov	r5, r1
   33664:	e3500000 	cmp	r0, #0
   33668:	0a000000 	beq	33670 <CString::operator=(char const*)+0x1c>
   3366c:	eb000d9c 	bl	36ce4 <operator delete[](void*)>
   33670:	e1a00005 	mov	r0, r5
   33674:	eb000976 	bl	35c54 <strlen>
   33678:	e2800001 	add	r0, r0, #1
   3367c:	e5840008 	str	r0, [r4, #8]
   33680:	eb000d8b 	bl	36cb4 <operator new[](unsigned int)>
   33684:	e1a01005 	mov	r1, r5
   33688:	e5840004 	str	r0, [r4, #4]
   3368c:	eb000a14 	bl	35ee4 <strcpy>
   33690:	e5940004 	ldr	r0, [r4, #4]
   33694:	e8bd8070 	pop	{r4, r5, r6, pc}

00033698 <CString::operator=(CString const&)>:
   33698:	e92d4070 	push	{r4, r5, r6, lr}
   3369c:	e1a04000 	mov	r4, r0
   336a0:	e5900004 	ldr	r0, [r0, #4]
   336a4:	e1a06001 	mov	r6, r1
   336a8:	e3500000 	cmp	r0, #0
   336ac:	0a000000 	beq	336b4 <CString::operator=(CString const&)+0x1c>
   336b0:	eb000d8b 	bl	36ce4 <operator delete[](void*)>
   336b4:	e5960004 	ldr	r0, [r6, #4]
   336b8:	e3015bc8 	movw	r5, #7112	; 0x1bc8
   336bc:	e3405004 	movt	r5, #4
   336c0:	e3500000 	cmp	r0, #0
   336c4:	01a00005 	moveq	r0, r5
   336c8:	eb000961 	bl	35c54 <strlen>
   336cc:	e2800001 	add	r0, r0, #1
   336d0:	e5840008 	str	r0, [r4, #8]
   336d4:	eb000d76 	bl	36cb4 <operator new[](unsigned int)>
   336d8:	e5840004 	str	r0, [r4, #4]
   336dc:	e5961004 	ldr	r1, [r6, #4]
   336e0:	e3510000 	cmp	r1, #0
   336e4:	01a01005 	moveq	r1, r5
   336e8:	eb0009fd 	bl	35ee4 <strcpy>
   336ec:	e1a00004 	mov	r0, r4
   336f0:	e8bd8070 	pop	{r4, r5, r6, pc}

000336f4 <CString::operator=(CString&&)>:
   336f4:	e92d4070 	push	{r4, r5, r6, lr}
   336f8:	e1a05000 	mov	r5, r0
   336fc:	e5900004 	ldr	r0, [r0, #4]
   33700:	e1a04001 	mov	r4, r1
   33704:	e3500000 	cmp	r0, #0
   33708:	0a000000 	beq	33710 <CString::operator=(CString&&)+0x1c>
   3370c:	eb000d74 	bl	36ce4 <operator delete[](void*)>
   33710:	e5941008 	ldr	r1, [r4, #8]
   33714:	e3a03000 	mov	r3, #0
   33718:	e5942004 	ldr	r2, [r4, #4]
   3371c:	e1a00005 	mov	r0, r5
   33720:	e5851008 	str	r1, [r5, #8]
   33724:	e5852004 	str	r2, [r5, #4]
   33728:	e5843008 	str	r3, [r4, #8]
   3372c:	e5843004 	str	r3, [r4, #4]
   33730:	e8bd8070 	pop	{r4, r5, r6, pc}

00033734 <CString::GetLength() const>:
   33734:	e5900004 	ldr	r0, [r0, #4]
   33738:	e3500000 	cmp	r0, #0
   3373c:	012fff1e 	bxeq	lr
   33740:	ea000943 	b	35c54 <strlen>

00033744 <CString::Append(char const*)>:
   33744:	e92d4070 	push	{r4, r5, r6, lr}
   33748:	e1a04000 	mov	r4, r0
   3374c:	e5900004 	ldr	r0, [r0, #4]
   33750:	e3a03001 	mov	r3, #1
   33754:	e1a06001 	mov	r6, r1
   33758:	e3500000 	cmp	r0, #0
   3375c:	e5843008 	str	r3, [r4, #8]
   33760:	0a000003 	beq	33774 <CString::Append(char const*)+0x30>
   33764:	eb00093a 	bl	35c54 <strlen>
   33768:	e5943008 	ldr	r3, [r4, #8]
   3376c:	e0833000 	add	r3, r3, r0
   33770:	e5843008 	str	r3, [r4, #8]
   33774:	e1a00006 	mov	r0, r6
   33778:	eb000935 	bl	35c54 <strlen>
   3377c:	e5943008 	ldr	r3, [r4, #8]
   33780:	e0800003 	add	r0, r0, r3
   33784:	e5840008 	str	r0, [r4, #8]
   33788:	eb000d49 	bl	36cb4 <operator new[](unsigned int)>
   3378c:	e5941004 	ldr	r1, [r4, #4]
   33790:	e1a05000 	mov	r5, r0
   33794:	e3510000 	cmp	r1, #0
   33798:	05c01000 	strbeq	r1, [r0]
   3379c:	0a000004 	beq	337b4 <CString::Append(char const*)+0x70>
   337a0:	eb0009cf 	bl	35ee4 <strcpy>
   337a4:	e5940004 	ldr	r0, [r4, #4]
   337a8:	e3500000 	cmp	r0, #0
   337ac:	0a000000 	beq	337b4 <CString::Append(char const*)+0x70>
   337b0:	eb000d4b 	bl	36ce4 <operator delete[](void*)>
   337b4:	e1a01006 	mov	r1, r6
   337b8:	e1a00005 	mov	r0, r5
   337bc:	eb0009e0 	bl	35f44 <strcat>
   337c0:	e5845004 	str	r5, [r4, #4]
   337c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000337c8 <CString::Compare(char const*) const>:
   337c8:	e5900004 	ldr	r0, [r0, #4]
   337cc:	ea00092a 	b	35c7c <strcmp>

000337d0 <CString::Find(char) const>:
   337d0:	e5902004 	ldr	r2, [r0, #4]
   337d4:	e1d230d0 	ldrsb	r3, [r2]
   337d8:	e3530000 	cmp	r3, #0
   337dc:	0a000006 	beq	337fc <CString::Find(char) const+0x2c>
   337e0:	e3a00000 	mov	r0, #0
   337e4:	e1510003 	cmp	r1, r3
   337e8:	012fff1e 	bxeq	lr
   337ec:	e1f230d1 	ldrsb	r3, [r2, #1]!
   337f0:	e2800001 	add	r0, r0, #1
   337f4:	e3530000 	cmp	r3, #0
   337f8:	1afffff9 	bne	337e4 <CString::Find(char) const+0x14>
   337fc:	e3e00000 	mvn	r0, #0
   33800:	e12fff1e 	bx	lr

00033804 <CString::Replace(char const*, char const*)>:
   33804:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33808:	e1d160d0 	ldrsb	r6, [r1]
   3380c:	e3560000 	cmp	r6, #0
   33810:	1a000001 	bne	3381c <CString::Replace(char const*, char const*)+0x18>
   33814:	e1a00006 	mov	r0, r6
   33818:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3381c:	e5904004 	ldr	r4, [r0, #4]
   33820:	e1a0a000 	mov	sl, r0
   33824:	e1a05001 	mov	r5, r1
   33828:	e1a07002 	mov	r7, r2
   3382c:	e1a00004 	mov	r0, r4
   33830:	eb000907 	bl	35c54 <strlen>
   33834:	e2800001 	add	r0, r0, #1
   33838:	eb000d1d 	bl	36cb4 <operator new[](unsigned int)>
   3383c:	e1a01004 	mov	r1, r4
   33840:	e1a08000 	mov	r8, r0
   33844:	eb0009a6 	bl	35ee4 <strcpy>
   33848:	e59a0004 	ldr	r0, [sl, #4]
   3384c:	e3500000 	cmp	r0, #0
   33850:	0a000000 	beq	33858 <CString::Replace(char const*, char const*)+0x54>
   33854:	eb000d22 	bl	36ce4 <operator delete[](void*)>
   33858:	e3a00040 	mov	r0, #64	; 0x40
   3385c:	e1a04008 	mov	r4, r8
   33860:	e58a0008 	str	r0, [sl, #8]
   33864:	e3a06000 	mov	r6, #0
   33868:	eb000d11 	bl	36cb4 <operator new[](unsigned int)>
   3386c:	e58a0004 	str	r0, [sl, #4]
   33870:	e58a000c 	str	r0, [sl, #12]
   33874:	e1d510d0 	ldrsb	r1, [r5]
   33878:	e1a00004 	mov	r0, r4
   3387c:	eb0009c1 	bl	35f88 <strchr>
   33880:	e2509000 	subs	r9, r0, #0
   33884:	0a000032 	beq	33954 <CString::Replace(char const*, char const*)+0x150>
   33888:	e1540009 	cmp	r4, r9
   3388c:	21a00004 	movcs	r0, r4
   33890:	2a00000a 	bcs	338c0 <CString::Replace(char const*, char const*)+0xbc>
   33894:	e3a01001 	mov	r1, #1
   33898:	e1a0000a 	mov	r0, sl
   3389c:	e0d4b0d1 	ldrsb	fp, [r4], #1
   338a0:	ebffff13 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   338a4:	e59a300c 	ldr	r3, [sl, #12]
   338a8:	e1590004 	cmp	r9, r4
   338ac:	e2832001 	add	r2, r3, #1
   338b0:	e58a200c 	str	r2, [sl, #12]
   338b4:	e5c3b000 	strb	fp, [r3]
   338b8:	1afffff5 	bne	33894 <CString::Replace(char const*, char const*)+0x90>
   338bc:	e1a00009 	mov	r0, r9
   338c0:	e1d530d1 	ldrsb	r3, [r5, #1]
   338c4:	e2851001 	add	r1, r5, #1
   338c8:	e2894001 	add	r4, r9, #1
   338cc:	e3530000 	cmp	r3, #0
   338d0:	1a000003 	bne	338e4 <CString::Replace(char const*, char const*)+0xe0>
   338d4:	ea00000f 	b	33918 <CString::Replace(char const*, char const*)+0x114>
   338d8:	e1f130d1 	ldrsb	r3, [r1, #1]!
   338dc:	e3530000 	cmp	r3, #0
   338e0:	0a00000c 	beq	33918 <CString::Replace(char const*, char const*)+0x114>
   338e4:	e0d420d1 	ldrsb	r2, [r4], #1
   338e8:	e1520003 	cmp	r2, r3
   338ec:	0afffff9 	beq	338d8 <CString::Replace(char const*, char const*)+0xd4>
   338f0:	e1a04000 	mov	r4, r0
   338f4:	e3a01001 	mov	r1, #1
   338f8:	e1a0000a 	mov	r0, sl
   338fc:	e0d490d1 	ldrsb	r9, [r4], #1
   33900:	ebfffefb 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33904:	e59a300c 	ldr	r3, [sl, #12]
   33908:	e2832001 	add	r2, r3, #1
   3390c:	e58a200c 	str	r2, [sl, #12]
   33910:	e5c39000 	strb	r9, [r3]
   33914:	eaffffd6 	b	33874 <CString::Replace(char const*, char const*)+0x70>
   33918:	e1a00007 	mov	r0, r7
   3391c:	eb0008cc 	bl	35c54 <strlen>
   33920:	e2509000 	subs	r9, r0, #0
   33924:	0a000002 	beq	33934 <CString::Replace(char const*, char const*)+0x130>
   33928:	e1a01009 	mov	r1, r9
   3392c:	e1a0000a 	mov	r0, sl
   33930:	ebfffeef 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33934:	e59a000c 	ldr	r0, [sl, #12]
   33938:	e1a01007 	mov	r1, r7
   3393c:	eb000968 	bl	35ee4 <strcpy>
   33940:	e59a300c 	ldr	r3, [sl, #12]
   33944:	e2866001 	add	r6, r6, #1
   33948:	e0833009 	add	r3, r3, r9
   3394c:	e58a300c 	str	r3, [sl, #12]
   33950:	eaffffc7 	b	33874 <CString::Replace(char const*, char const*)+0x70>
   33954:	e1a00004 	mov	r0, r4
   33958:	eb0008bd 	bl	35c54 <strlen>
   3395c:	e2505000 	subs	r5, r0, #0
   33960:	0a000002 	beq	33970 <CString::Replace(char const*, char const*)+0x16c>
   33964:	e1a01005 	mov	r1, r5
   33968:	e1a0000a 	mov	r0, sl
   3396c:	ebfffee0 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33970:	e1a01004 	mov	r1, r4
   33974:	e59a000c 	ldr	r0, [sl, #12]
   33978:	eb000959 	bl	35ee4 <strcpy>
   3397c:	e59a300c 	ldr	r3, [sl, #12]
   33980:	e1a00008 	mov	r0, r8
   33984:	e3a02000 	mov	r2, #0
   33988:	e0831005 	add	r1, r3, r5
   3398c:	e58a100c 	str	r1, [sl, #12]
   33990:	e7c32005 	strb	r2, [r3, r5]
   33994:	eb000cd2 	bl	36ce4 <operator delete[](void*)>
   33998:	e1a00006 	mov	r0, r6
   3399c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000339a0 <CString::PutChar(char, unsigned int)>:
   339a0:	e92d4070 	push	{r4, r5, r6, lr}
   339a4:	e2524000 	subs	r4, r2, #0
   339a8:	08bd8070 	popeq	{r4, r5, r6, pc}
   339ac:	e1a06001 	mov	r6, r1
   339b0:	e1a01004 	mov	r1, r4
   339b4:	e1a05000 	mov	r5, r0
   339b8:	ebfffecd 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   339bc:	e2442001 	sub	r2, r4, #1
   339c0:	e595300c 	ldr	r3, [r5, #12]
   339c4:	e2422001 	sub	r2, r2, #1
   339c8:	e3720001 	cmn	r2, #1
   339cc:	e2830001 	add	r0, r3, #1
   339d0:	e585000c 	str	r0, [r5, #12]
   339d4:	e5c36000 	strb	r6, [r3]
   339d8:	1afffff8 	bne	339c0 <CString::PutChar(char, unsigned int)+0x20>
   339dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000339e0 <CString::PutString(char const*)>:
   339e0:	e92d4070 	push	{r4, r5, r6, lr}
   339e4:	e1a04000 	mov	r4, r0
   339e8:	e1a00001 	mov	r0, r1
   339ec:	e1a06001 	mov	r6, r1
   339f0:	eb000897 	bl	35c54 <strlen>
   339f4:	e2505000 	subs	r5, r0, #0
   339f8:	0a000002 	beq	33a08 <CString::PutString(char const*)+0x28>
   339fc:	e1a01005 	mov	r1, r5
   33a00:	e1a00004 	mov	r0, r4
   33a04:	ebfffeba 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33a08:	e594000c 	ldr	r0, [r4, #12]
   33a0c:	e1a01006 	mov	r1, r6
   33a10:	eb000933 	bl	35ee4 <strcpy>
   33a14:	e594300c 	ldr	r3, [r4, #12]
   33a18:	e0833005 	add	r3, r3, r5
   33a1c:	e584300c 	str	r3, [r4, #12]
   33a20:	e8bd8070 	pop	{r4, r5, r6, pc}

00033a24 <CString::ReserveSpace(unsigned int)>:
   33a24:	e3510000 	cmp	r1, #0
   33a28:	012fff1e 	bxeq	lr
   33a2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33a30:	e1a05000 	mov	r5, r0
   33a34:	e990004c 	ldmib	r0, {r2, r3, r6}
   33a38:	e0466002 	sub	r6, r6, r2
   33a3c:	e0811006 	add	r1, r1, r6
   33a40:	e2812001 	add	r2, r1, #1
   33a44:	e1520003 	cmp	r2, r3
   33a48:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   33a4c:	e2814041 	add	r4, r1, #65	; 0x41
   33a50:	e1a00004 	mov	r0, r4
   33a54:	eb000c96 	bl	36cb4 <operator new[](unsigned int)>
   33a58:	e595300c 	ldr	r3, [r5, #12]
   33a5c:	e3a02000 	mov	r2, #0
   33a60:	e1a07000 	mov	r7, r0
   33a64:	e5c32000 	strb	r2, [r3]
   33a68:	e5951004 	ldr	r1, [r5, #4]
   33a6c:	eb00091c 	bl	35ee4 <strcpy>
   33a70:	e5950004 	ldr	r0, [r5, #4]
   33a74:	e3500000 	cmp	r0, #0
   33a78:	0a000000 	beq	33a80 <CString::ReserveSpace(unsigned int)+0x5c>
   33a7c:	eb000c98 	bl	36ce4 <operator delete[](void*)>
   33a80:	e0876006 	add	r6, r7, r6
   33a84:	e5857004 	str	r7, [r5, #4]
   33a88:	e5854008 	str	r4, [r5, #8]
   33a8c:	e585600c 	str	r6, [r5, #12]
   33a90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00033a94 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   33a94:	e1510002 	cmp	r1, r2
   33a98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   33a9c:	23a0c001 	movcs	ip, #1
   33aa0:	3a00001a 	bcc	33b10 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x7c>
   33aa4:	e00c0c92 	mul	ip, r2, ip
   33aa8:	e734fc11 	udiv	r4, r1, ip
   33aac:	e1a0e004 	mov	lr, r4
   33ab0:	e1540002 	cmp	r4, r2
   33ab4:	2afffffa 	bcs	33aa4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
   33ab8:	e2233001 	eor	r3, r3, #1
   33abc:	e1a05000 	mov	r5, r0
   33ac0:	e1a06283 	lsl	r6, r3, #5
   33ac4:	e2866037 	add	r6, r6, #55	; 0x37
   33ac8:	e6ef6076 	uxtb	r6, r6
   33acc:	ea000002 	b	33adc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
   33ad0:	e73ef411 	udiv	lr, r1, r4
   33ad4:	e1a0c004 	mov	ip, r4
   33ad8:	e1a0400e 	mov	r4, lr
   33adc:	e086300e 	add	r3, r6, lr
   33ae0:	e28e7030 	add	r7, lr, #48	; 0x30
   33ae4:	e35e0009 	cmp	lr, #9
   33ae8:	e061149c 	mls	r1, ip, r4, r1
   33aec:	e734f21c 	udiv	r4, ip, r2
   33af0:	e6af3073 	sxtb	r3, r3
   33af4:	96af3077 	sxtbls	r3, r7
   33af8:	e15c0002 	cmp	ip, r2
   33afc:	e4c53001 	strb	r3, [r5], #1
   33b00:	2afffff2 	bcs	33ad0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>
   33b04:	e3a03000 	mov	r3, #0
   33b08:	e5c53000 	strb	r3, [r5]
   33b0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   33b10:	e1a0e001 	mov	lr, r1
   33b14:	e3a0c001 	mov	ip, #1
   33b18:	e1a04001 	mov	r4, r1
   33b1c:	eaffffe5 	b	33ab8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

00033b20 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   33b20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b24:	e1a0b002 	mov	fp, r2
   33b28:	e1a0a000 	mov	sl, r0
   33b2c:	e24dd014 	sub	sp, sp, #20
   33b30:	e3a07000 	mov	r7, #0
   33b34:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   33b38:	e58d3004 	str	r3, [sp, #4]
   33b3c:	e1520008 	cmp	r2, r8
   33b40:	e5dd903c 	ldrb	r9, [sp, #60]	; 0x3c
   33b44:	e2d33000 	sbcs	r3, r3, #0
   33b48:	23a05001 	movcs	r5, #1
   33b4c:	259d4004 	ldrcs	r4, [sp, #4]
   33b50:	3a00003f 	bcc	33c54 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x134>
   33b54:	e0030798 	mul	r3, r8, r7
   33b58:	e1a0000b 	mov	r0, fp
   33b5c:	e0875895 	umull	r5, r7, r5, r8
   33b60:	e1a01004 	mov	r1, r4
   33b64:	e0837007 	add	r7, r3, r7
   33b68:	e1a02005 	mov	r2, r5
   33b6c:	e1a03007 	mov	r3, r7
   33b70:	fa001a6e 	blx	3a530 <__aeabi_uldivmod>
   33b74:	e1500008 	cmp	r0, r8
   33b78:	e2d13000 	sbcs	r3, r1, #0
   33b7c:	2afffff4 	bcs	33b54 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x34>
   33b80:	e1a04000 	mov	r4, r0
   33b84:	e1a06001 	mov	r6, r1
   33b88:	e2299001 	eor	r9, r9, #1
   33b8c:	e58da00c 	str	sl, [sp, #12]
   33b90:	e58d8038 	str	r8, [sp, #56]	; 0x38
   33b94:	e1a09289 	lsl	r9, r9, #5
   33b98:	e2899037 	add	r9, r9, #55	; 0x37
   33b9c:	e6ef3079 	uxtb	r3, r9
   33ba0:	e58d3008 	str	r3, [sp, #8]
   33ba4:	ea000003 	b	33bb8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
   33ba8:	fa001a60 	blx	3a530 <__aeabi_uldivmod>
   33bac:	e1a07008 	mov	r7, r8
   33bb0:	e1a04000 	mov	r4, r0
   33bb4:	e1a06001 	mov	r6, r1
   33bb8:	e59d1004 	ldr	r1, [sp, #4]
   33bbc:	e1a02005 	mov	r2, r5
   33bc0:	e1a03007 	mov	r3, r7
   33bc4:	e1a0000b 	mov	r0, fp
   33bc8:	fa001a58 	blx	3a530 <__aeabi_uldivmod>
   33bcc:	e59d1008 	ldr	r1, [sp, #8]
   33bd0:	e2840030 	add	r0, r4, #48	; 0x30
   33bd4:	e354000a 	cmp	r4, #10
   33bd8:	e0811004 	add	r1, r1, r4
   33bdc:	e2d66000 	sbcs	r6, r6, #0
   33be0:	e1a08003 	mov	r8, r3
   33be4:	e1a09002 	mov	r9, r2
   33be8:	e6af1071 	sxtb	r1, r1
   33bec:	e58d3004 	str	r3, [sp, #4]
   33bf0:	36af1070 	sxtbcc	r1, r0
   33bf4:	e3a03000 	mov	r3, #0
   33bf8:	e1a00005 	mov	r0, r5
   33bfc:	e4ca1001 	strb	r1, [sl], #1
   33c00:	e1a0b002 	mov	fp, r2
   33c04:	e1a01007 	mov	r1, r7
   33c08:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   33c0c:	fa001a47 	blx	3a530 <__aeabi_uldivmod>
   33c10:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   33c14:	e1a02000 	mov	r2, r0
   33c18:	e1a03001 	mov	r3, r1
   33c1c:	e155000c 	cmp	r5, ip
   33c20:	e1a01008 	mov	r1, r8
   33c24:	e1a00009 	mov	r0, r9
   33c28:	e1a05002 	mov	r5, r2
   33c2c:	e1a08003 	mov	r8, r3
   33c30:	e2d77000 	sbcs	r7, r7, #0
   33c34:	2affffdb 	bcs	33ba8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x88>
   33c38:	e1a0c00a 	mov	ip, sl
   33c3c:	e59da00c 	ldr	sl, [sp, #12]
   33c40:	e3a03000 	mov	r3, #0
   33c44:	e1a0000a 	mov	r0, sl
   33c48:	e5cc3000 	strb	r3, [ip]
   33c4c:	e28dd014 	add	sp, sp, #20
   33c50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c54:	e59d6004 	ldr	r6, [sp, #4]
   33c58:	e1a04002 	mov	r4, r2
   33c5c:	e3a05001 	mov	r5, #1
   33c60:	eaffffc8 	b	33b88 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x68>

00033c64 <CString::ftoa(char*, double, unsigned int)>:
   33c64:	eeb50bc0 	vcmpe.f64	d0, #0.0
   33c68:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   33c6c:	eddf0b8b 	vldr	d16, [pc, #556]	; 33ea0 <CString::ftoa(char*, double, unsigned int)+0x23c>
   33c70:	ed2d8b02 	vpush	{d8}
   33c74:	eeb08b40 	vmov.f64	d8, d0
   33c78:	e1a07000 	mov	r7, r0
   33c7c:	e24dd014 	sub	sp, sp, #20
   33c80:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   33c84:	e1a04000 	mov	r4, r0
   33c88:	e1a06001 	mov	r6, r1
   33c8c:	4eb18b40 	vnegmi.f64	d8, d0
   33c90:	43a0302d 	movmi	r3, #45	; 0x2d
   33c94:	44c73001 	strbmi	r3, [r7], #1
   33c98:	eeb48be0 	vcmpe.f64	d8, d16
   33c9c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   33ca0:	ca00006b 	bgt	33e54 <CString::ftoa(char*, double, unsigned int)+0x1f0>
   33ca4:	eefc7bc8 	vcvt.u32.f64	s15, d8
   33ca8:	ee175a90 	vmov	r5, s15
   33cac:	e3550009 	cmp	r5, #9
   33cb0:	83a02001 	movhi	r2, #1
   33cb4:	83a0100a 	movhi	r1, #10
   33cb8:	9a00006d 	bls	33e74 <CString::ftoa(char*, double, unsigned int)+0x210>
   33cbc:	e0020291 	mul	r2, r1, r2
   33cc0:	e733f215 	udiv	r3, r5, r2
   33cc4:	e3530009 	cmp	r3, #9
   33cc8:	8afffffb 	bhi	33cbc <CString::ftoa(char*, double, unsigned int)+0x58>
   33ccc:	e30c8ccd 	movw	r8, #52429	; 0xcccd
   33cd0:	e34c8ccc 	movt	r8, #52428	; 0xcccc
   33cd4:	e1a01007 	mov	r1, r7
   33cd8:	e1a00005 	mov	r0, r5
   33cdc:	ea000001 	b	33ce8 <CString::ftoa(char*, double, unsigned int)+0x84>
   33ce0:	e1a02003 	mov	r2, r3
   33ce4:	e733f310 	udiv	r3, r0, r3
   33ce8:	e3530009 	cmp	r3, #9
   33cec:	e283c057 	add	ip, r3, #87	; 0x57
   33cf0:	e73ef210 	udiv	lr, r0, r2
   33cf4:	e2839030 	add	r9, r3, #48	; 0x30
   33cf8:	e6afc07c 	sxtb	ip, ip
   33cfc:	96afc079 	sxtbls	ip, r9
   33d00:	e3520009 	cmp	r2, #9
   33d04:	e4c1c001 	strb	ip, [r1], #1
   33d08:	e0600e92 	mls	r0, r2, lr, r0
   33d0c:	e083e298 	umull	lr, r3, r8, r2
   33d10:	e1a031a3 	lsr	r3, r3, #3
   33d14:	8afffff1 	bhi	33ce0 <CString::ftoa(char*, double, unsigned int)+0x7c>
   33d18:	e3a03000 	mov	r3, #0
   33d1c:	e3560000 	cmp	r6, #0
   33d20:	e5c13000 	strb	r3, [r1]
   33d24:	1a000003 	bne	33d38 <CString::ftoa(char*, double, unsigned int)+0xd4>
   33d28:	e1a00004 	mov	r0, r4
   33d2c:	e28dd014 	add	sp, sp, #20
   33d30:	ecbd8b02 	vpop	{d8}
   33d34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   33d38:	e1a00007 	mov	r0, r7
   33d3c:	eb0007c4 	bl	35c54 <strlen>
   33d40:	e3560009 	cmp	r6, #9
   33d44:	e0878000 	add	r8, r7, r0
   33d48:	e3a0302e 	mov	r3, #46	; 0x2e
   33d4c:	e7c73000 	strb	r3, [r7, r0]
   33d50:	31a07006 	movcc	r7, r6
   33d54:	23a07009 	movcs	r7, #9
   33d58:	e3560001 	cmp	r6, #1
   33d5c:	e2886001 	add	r6, r8, #1
   33d60:	0a000048 	beq	33e88 <CString::ftoa(char*, double, unsigned int)+0x224>
   33d64:	e3a0200a 	mov	r2, #10
   33d68:	e3a03002 	mov	r3, #2
   33d6c:	e1a01002 	mov	r1, r2
   33d70:	e2833001 	add	r3, r3, #1
   33d74:	e0020291 	mul	r2, r1, r2
   33d78:	e1570003 	cmp	r7, r3
   33d7c:	2afffffb 	bcs	33d70 <CString::ftoa(char*, double, unsigned int)+0x10c>
   33d80:	ee072a90 	vmov	s15, r2
   33d84:	eef81b67 	vcvt.f64.u32	d17, s15
   33d88:	ee075a90 	vmov	s15, r5
   33d8c:	eef80b67 	vcvt.f64.u32	d16, s15
   33d90:	ee388b60 	vsub.f64	d8, d8, d16
   33d94:	ee288b21 	vmul.f64	d8, d8, d17
   33d98:	eefc7bc8 	vcvt.u32.f64	s15, d8
   33d9c:	ee17ca90 	vmov	ip, s15
   33da0:	e35c0009 	cmp	ip, #9
   33da4:	83a02001 	movhi	r2, #1
   33da8:	83a0000a 	movhi	r0, #10
   33dac:	9a000037 	bls	33e90 <CString::ftoa(char*, double, unsigned int)+0x22c>
   33db0:	e0020290 	mul	r2, r0, r2
   33db4:	e731f21c 	udiv	r1, ip, r2
   33db8:	e1a03001 	mov	r3, r1
   33dbc:	e3510009 	cmp	r1, #9
   33dc0:	8afffffa 	bhi	33db0 <CString::ftoa(char*, double, unsigned int)+0x14c>
   33dc4:	e30c5ccd 	movw	r5, #52429	; 0xcccd
   33dc8:	e34c5ccc 	movt	r5, #52428	; 0xcccc
   33dcc:	e28de004 	add	lr, sp, #4
   33dd0:	ea000002 	b	33de0 <CString::ftoa(char*, double, unsigned int)+0x17c>
   33dd4:	e1a02003 	mov	r2, r3
   33dd8:	e733f31c 	udiv	r3, ip, r3
   33ddc:	e1a01003 	mov	r1, r3
   33de0:	e2830057 	add	r0, r3, #87	; 0x57
   33de4:	e3530009 	cmp	r3, #9
   33de8:	e2839030 	add	r9, r3, #48	; 0x30
   33dec:	e06cc192 	mls	ip, r2, r1, ip
   33df0:	e6af1070 	sxtb	r1, r0
   33df4:	e0830295 	umull	r0, r3, r5, r2
   33df8:	96af1079 	sxtbls	r1, r9
   33dfc:	e3520009 	cmp	r2, #9
   33e00:	e4ce1001 	strb	r1, [lr], #1
   33e04:	e1a031a3 	lsr	r3, r3, #3
   33e08:	8afffff1 	bhi	33dd4 <CString::ftoa(char*, double, unsigned int)+0x170>
   33e0c:	e3a03000 	mov	r3, #0
   33e10:	e28d0004 	add	r0, sp, #4
   33e14:	e5ce3000 	strb	r3, [lr]
   33e18:	eb00078d 	bl	35c54 <strlen>
   33e1c:	e0577000 	subs	r7, r7, r0
   33e20:	0a000016 	beq	33e80 <CString::ftoa(char*, double, unsigned int)+0x21c>
   33e24:	e2877001 	add	r7, r7, #1
   33e28:	e3a03030 	mov	r3, #48	; 0x30
   33e2c:	e0880007 	add	r0, r8, r7
   33e30:	e4c63001 	strb	r3, [r6], #1
   33e34:	e1500006 	cmp	r0, r6
   33e38:	1afffffc 	bne	33e30 <CString::ftoa(char*, double, unsigned int)+0x1cc>
   33e3c:	e28d1004 	add	r1, sp, #4
   33e40:	eb000827 	bl	35ee4 <strcpy>
   33e44:	e1a00004 	mov	r0, r4
   33e48:	e28dd014 	add	sp, sp, #20
   33e4c:	ecbd8b02 	vpop	{d8}
   33e50:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   33e54:	e1a00007 	mov	r0, r7
   33e58:	e3031250 	movw	r1, #12880	; 0x3250
   33e5c:	e3401004 	movt	r1, #4
   33e60:	eb00081f 	bl	35ee4 <strcpy>
   33e64:	e1a00004 	mov	r0, r4
   33e68:	e28dd014 	add	sp, sp, #20
   33e6c:	ecbd8b02 	vpop	{d8}
   33e70:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   33e74:	e1a03005 	mov	r3, r5
   33e78:	e3a02001 	mov	r2, #1
   33e7c:	eaffff92 	b	33ccc <CString::ftoa(char*, double, unsigned int)+0x68>
   33e80:	e1a00006 	mov	r0, r6
   33e84:	eaffffec 	b	33e3c <CString::ftoa(char*, double, unsigned int)+0x1d8>
   33e88:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
   33e8c:	eaffffbd 	b	33d88 <CString::ftoa(char*, double, unsigned int)+0x124>
   33e90:	e1a0300c 	mov	r3, ip
   33e94:	e3a02001 	mov	r2, #1
   33e98:	e1a0100c 	mov	r1, ip
   33e9c:	eaffffc8 	b	33dc4 <CString::ftoa(char*, double, unsigned int)+0x160>
   33ea0:	ffe00000 	.word	0xffe00000
   33ea4:	41efffff 	.word	0x41efffff

00033ea8 <CString::FormatV(char const*, std::__va_list)>:
   33ea8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33eac:	e1a04001 	mov	r4, r1
   33eb0:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   33eb4:	e58d0018 	str	r0, [sp, #24]
   33eb8:	e5900004 	ldr	r0, [r0, #4]
   33ebc:	e58d2004 	str	r2, [sp, #4]
   33ec0:	e3500000 	cmp	r0, #0
   33ec4:	0a000000 	beq	33ecc <CString::FormatV(char const*, std::__va_list)+0x24>
   33ec8:	eb000b85 	bl	36ce4 <operator delete[](void*)>
   33ecc:	e59db018 	ldr	fp, [sp, #24]
   33ed0:	e3a00040 	mov	r0, #64	; 0x40
   33ed4:	e1a05004 	mov	r5, r4
   33ed8:	e58b0008 	str	r0, [fp, #8]
   33edc:	eb000b74 	bl	36cb4 <operator new[](unsigned int)>
   33ee0:	e58b0004 	str	r0, [fp, #4]
   33ee4:	e58b000c 	str	r0, [fp, #12]
   33ee8:	e1d440d0 	ldrsb	r4, [r4]
   33eec:	e3540000 	cmp	r4, #0
   33ef0:	0a000064 	beq	34088 <CString::FormatV(char const*, std::__va_list)+0x1e0>
   33ef4:	e3540025 	cmp	r4, #37	; 0x25
   33ef8:	1a000055 	bne	34054 <CString::FormatV(char const*, std::__va_list)+0x1ac>
   33efc:	e1d530d1 	ldrsb	r3, [r5, #1]
   33f00:	e3530025 	cmp	r3, #37	; 0x25
   33f04:	0a000063 	beq	34098 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   33f08:	e3530023 	cmp	r3, #35	; 0x23
   33f0c:	e3a04000 	mov	r4, #0
   33f10:	12855001 	addne	r5, r5, #1
   33f14:	13a00000 	movne	r0, #0
   33f18:	03a00001 	moveq	r0, #1
   33f1c:	01d530d2 	ldrsbeq	r3, [r5, #2]
   33f20:	02855002 	addeq	r5, r5, #2
   33f24:	e353002d 	cmp	r3, #45	; 0x2d
   33f28:	03a02001 	moveq	r2, #1
   33f2c:	13a02000 	movne	r2, #0
   33f30:	058d2010 	streq	r2, [sp, #16]
   33f34:	01d530d1 	ldrsbeq	r3, [r5, #1]
   33f38:	00855002 	addeq	r5, r5, r2
   33f3c:	158d2010 	strne	r2, [sp, #16]
   33f40:	e3530030 	cmp	r3, #48	; 0x30
   33f44:	03a02001 	moveq	r2, #1
   33f48:	13a02000 	movne	r2, #0
   33f4c:	e58d2014 	str	r2, [sp, #20]
   33f50:	01d530d1 	ldrsbeq	r3, [r5, #1]
   33f54:	02855001 	addeq	r5, r5, #1
   33f58:	e2432030 	sub	r2, r3, #48	; 0x30
   33f5c:	e6ef2072 	uxtb	r2, r2
   33f60:	e3520009 	cmp	r2, #9
   33f64:	8a000007 	bhi	33f88 <CString::FormatV(char const*, std::__va_list)+0xe0>
   33f68:	e3a0100a 	mov	r1, #10
   33f6c:	e0243491 	mla	r4, r1, r4, r3
   33f70:	e1f530d1 	ldrsb	r3, [r5, #1]!
   33f74:	e2432030 	sub	r2, r3, #48	; 0x30
   33f78:	e2444030 	sub	r4, r4, #48	; 0x30
   33f7c:	e6ef2072 	uxtb	r2, r2
   33f80:	e3520009 	cmp	r2, #9
   33f84:	9afffff8 	bls	33f6c <CString::FormatV(char const*, std::__va_list)+0xc4>
   33f88:	e353002e 	cmp	r3, #46	; 0x2e
   33f8c:	13a01006 	movne	r1, #6
   33f90:	11d5a0d0 	ldrsbne	sl, [r5]
   33f94:	0a0001c4 	beq	346ac <CString::FormatV(char const*, std::__va_list)+0x804>
   33f98:	e35a006c 	cmp	sl, #108	; 0x6c
   33f9c:	13a02000 	movne	r2, #0
   33fa0:	1a000006 	bne	33fc0 <CString::FormatV(char const*, std::__va_list)+0x118>
   33fa4:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   33fa8:	e35a006c 	cmp	sl, #108	; 0x6c
   33fac:	03a02001 	moveq	r2, #1
   33fb0:	13a02000 	movne	r2, #0
   33fb4:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
   33fb8:	02855001 	addeq	r5, r5, #1
   33fbc:	e2855001 	add	r5, r5, #1
   33fc0:	e24a3058 	sub	r3, sl, #88	; 0x58
   33fc4:	e3530020 	cmp	r3, #32
   33fc8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   33fcc:	ea00003a 	b	340bc <CString::FormatV(char const*, std::__va_list)+0x214>
   33fd0:	000340ec 	.word	0x000340ec
   33fd4:	000340bc 	.word	0x000340bc
   33fd8:	000340bc 	.word	0x000340bc
   33fdc:	000340bc 	.word	0x000340bc
   33fe0:	000340bc 	.word	0x000340bc
   33fe4:	000340bc 	.word	0x000340bc
   33fe8:	000340bc 	.word	0x000340bc
   33fec:	000340bc 	.word	0x000340bc
   33ff0:	000340bc 	.word	0x000340bc
   33ff4:	000340bc 	.word	0x000340bc
   33ff8:	000340bc 	.word	0x000340bc
   33ffc:	000344bc 	.word	0x000344bc
   34000:	0003430c 	.word	0x0003430c
   34004:	000340bc 	.word	0x000340bc
   34008:	00034504 	.word	0x00034504
   3400c:	000340bc 	.word	0x000340bc
   34010:	000340bc 	.word	0x000340bc
   34014:	0003430c 	.word	0x0003430c
   34018:	000340bc 	.word	0x000340bc
   3401c:	000340bc 	.word	0x000340bc
   34020:	000340bc 	.word	0x000340bc
   34024:	000340bc 	.word	0x000340bc
   34028:	000340bc 	.word	0x000340bc
   3402c:	000345e0 	.word	0x000345e0
   34030:	000340ec 	.word	0x000340ec
   34034:	000340bc 	.word	0x000340bc
   34038:	000340bc 	.word	0x000340bc
   3403c:	00034580 	.word	0x00034580
   34040:	000340bc 	.word	0x000340bc
   34044:	000348dc 	.word	0x000348dc
   34048:	000340bc 	.word	0x000340bc
   3404c:	000340bc 	.word	0x000340bc
   34050:	000340ec 	.word	0x000340ec
   34054:	e3a01001 	mov	r1, #1
   34058:	e1a0000b 	mov	r0, fp
   3405c:	ebfffd24 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34060:	e59b300c 	ldr	r3, [fp, #12]
   34064:	e2832001 	add	r2, r3, #1
   34068:	e58b200c 	str	r2, [fp, #12]
   3406c:	e5c34000 	strb	r4, [r3]
   34070:	e2855001 	add	r5, r5, #1
   34074:	e1d540d0 	ldrsb	r4, [r5]
   34078:	e3540000 	cmp	r4, #0
   3407c:	1affff9c 	bne	33ef4 <CString::FormatV(char const*, std::__va_list)+0x4c>
   34080:	e59d3018 	ldr	r3, [sp, #24]
   34084:	e593000c 	ldr	r0, [r3, #12]
   34088:	e3a03000 	mov	r3, #0
   3408c:	e5c03000 	strb	r3, [r0]
   34090:	e28dd05c 	add	sp, sp, #92	; 0x5c
   34094:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34098:	e3a01001 	mov	r1, #1
   3409c:	e1a0000b 	mov	r0, fp
   340a0:	ebfffd13 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   340a4:	e59b300c 	ldr	r3, [fp, #12]
   340a8:	e2855002 	add	r5, r5, #2
   340ac:	e2832001 	add	r2, r3, #1
   340b0:	e58b200c 	str	r2, [fp, #12]
   340b4:	e5c34000 	strb	r4, [r3]
   340b8:	eaffffed 	b	34074 <CString::FormatV(char const*, std::__va_list)+0x1cc>
   340bc:	e3a01001 	mov	r1, #1
   340c0:	e1a0000b 	mov	r0, fp
   340c4:	ebfffd0a 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   340c8:	e59b300c 	ldr	r3, [fp, #12]
   340cc:	e3a01001 	mov	r1, #1
   340d0:	e1a0000b 	mov	r0, fp
   340d4:	e2832001 	add	r2, r3, #1
   340d8:	e58b200c 	str	r2, [fp, #12]
   340dc:	e3a02025 	mov	r2, #37	; 0x25
   340e0:	e5c32000 	strb	r2, [r3]
   340e4:	e1d540d0 	ldrsb	r4, [r5]
   340e8:	eaffffdb 	b	3405c <CString::FormatV(char const*, std::__va_list)+0x1b4>
   340ec:	e3500000 	cmp	r0, #0
   340f0:	03a0c010 	moveq	ip, #16
   340f4:	1a0001dd 	bne	34870 <CString::FormatV(char const*, std::__va_list)+0x9c8>
   340f8:	e59d3004 	ldr	r3, [sp, #4]
   340fc:	e3520000 	cmp	r2, #0
   34100:	0a000148 	beq	34628 <CString::FormatV(char const*, std::__va_list)+0x780>
   34104:	e2833007 	add	r3, r3, #7
   34108:	e3a09000 	mov	r9, #0
   3410c:	e3c33007 	bic	r3, r3, #7
   34110:	e5932004 	ldr	r2, [r3, #4]
   34114:	e4938008 	ldr	r8, [r3], #8
   34118:	e58d301c 	str	r3, [sp, #28]
   3411c:	e158000c 	cmp	r8, ip
   34120:	e58d2008 	str	r2, [sp, #8]
   34124:	e2d23000 	sbcs	r3, r2, #0
   34128:	e58d8004 	str	r8, [sp, #4]
   3412c:	3a00029b 	bcc	34ba0 <CString::FormatV(char const*, std::__va_list)+0xcf8>
   34130:	e3a07001 	mov	r7, #1
   34134:	e58d400c 	str	r4, [sp, #12]
   34138:	e1a03007 	mov	r3, r7
   3413c:	e1a0600c 	mov	r6, ip
   34140:	e1a07005 	mov	r7, r5
   34144:	e1a04002 	mov	r4, r2
   34148:	e1a05003 	mov	r5, r3
   3414c:	e0030996 	mul	r3, r6, r9
   34150:	e1a00008 	mov	r0, r8
   34154:	e0895695 	umull	r5, r9, r5, r6
   34158:	e1a01004 	mov	r1, r4
   3415c:	e0839009 	add	r9, r3, r9
   34160:	e1a02005 	mov	r2, r5
   34164:	e1a03009 	mov	r3, r9
   34168:	fa0018f0 	blx	3a530 <__aeabi_uldivmod>
   3416c:	e1500006 	cmp	r0, r6
   34170:	e2d13000 	sbcs	r3, r1, #0
   34174:	2afffff4 	bcs	3414c <CString::FormatV(char const*, std::__va_list)+0x2a4>
   34178:	e1a03005 	mov	r3, r5
   3417c:	e59d400c 	ldr	r4, [sp, #12]
   34180:	e1a0c006 	mov	ip, r6
   34184:	e1a05007 	mov	r5, r7
   34188:	e1a06000 	mov	r6, r0
   3418c:	e1a08001 	mov	r8, r1
   34190:	e1a07003 	mov	r7, r3
   34194:	e25aa058 	subs	sl, sl, #88	; 0x58
   34198:	e58db024 	str	fp, [sp, #36]	; 0x24
   3419c:	13a0a001 	movne	sl, #1
   341a0:	e58d4020 	str	r4, [sp, #32]
   341a4:	e58d5028 	str	r5, [sp, #40]	; 0x28
   341a8:	e1a0a28a 	lsl	sl, sl, #5
   341ac:	e28a3037 	add	r3, sl, #55	; 0x37
   341b0:	e28da034 	add	sl, sp, #52	; 0x34
   341b4:	e1a0b00a 	mov	fp, sl
   341b8:	e58da02c 	str	sl, [sp, #44]	; 0x2c
   341bc:	e58d300c 	str	r3, [sp, #12]
   341c0:	e1a0a00c 	mov	sl, ip
   341c4:	ea000003 	b	341d8 <CString::FormatV(char const*, std::__va_list)+0x330>
   341c8:	fa0018d8 	blx	3a530 <__aeabi_uldivmod>
   341cc:	e1a09004 	mov	r9, r4
   341d0:	e1a06000 	mov	r6, r0
   341d4:	e1a08001 	mov	r8, r1
   341d8:	e99d0003 	ldmib	sp, {r0, r1}
   341dc:	e1a02007 	mov	r2, r7
   341e0:	e1a03009 	mov	r3, r9
   341e4:	fa0018d1 	blx	3a530 <__aeabi_uldivmod>
   341e8:	e59d100c 	ldr	r1, [sp, #12]
   341ec:	e2860030 	add	r0, r6, #48	; 0x30
   341f0:	e356000a 	cmp	r6, #10
   341f4:	e0811006 	add	r1, r1, r6
   341f8:	e2d88000 	sbcs	r8, r8, #0
   341fc:	e1a04003 	mov	r4, r3
   34200:	e1a05002 	mov	r5, r2
   34204:	e6af1071 	sxtb	r1, r1
   34208:	e58d2004 	str	r2, [sp, #4]
   3420c:	36af1070 	sxtbcc	r1, r0
   34210:	e1a0200a 	mov	r2, sl
   34214:	e1a00007 	mov	r0, r7
   34218:	e58d3008 	str	r3, [sp, #8]
   3421c:	e4cb1001 	strb	r1, [fp], #1
   34220:	e3a03000 	mov	r3, #0
   34224:	e1a01009 	mov	r1, r9
   34228:	fa0018c0 	blx	3a530 <__aeabi_uldivmod>
   3422c:	e157000a 	cmp	r7, sl
   34230:	e1a02000 	mov	r2, r0
   34234:	e1a03001 	mov	r3, r1
   34238:	e1a00005 	mov	r0, r5
   3423c:	e1a01004 	mov	r1, r4
   34240:	e1a07002 	mov	r7, r2
   34244:	e1a04003 	mov	r4, r3
   34248:	e2d99000 	sbcs	r9, r9, #0
   3424c:	2affffdd 	bcs	341c8 <CString::FormatV(char const*, std::__va_list)+0x320>
   34250:	e1a0e00b 	mov	lr, fp
   34254:	e59d4020 	ldr	r4, [sp, #32]
   34258:	e59db024 	ldr	fp, [sp, #36]	; 0x24
   3425c:	e3a03000 	mov	r3, #0
   34260:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   34264:	e59da02c 	ldr	sl, [sp, #44]	; 0x2c
   34268:	e5ce3000 	strb	r3, [lr]
   3426c:	e1a0000a 	mov	r0, sl
   34270:	eb000677 	bl	35c54 <strlen>
   34274:	e59d3010 	ldr	r3, [sp, #16]
   34278:	e1a06000 	mov	r6, r0
   3427c:	e3530000 	cmp	r3, #0
   34280:	1a000119 	bne	346ec <CString::FormatV(char const*, std::__va_list)+0x844>
   34284:	e1500004 	cmp	r0, r4
   34288:	2a00000f 	bcs	342cc <CString::FormatV(char const*, std::__va_list)+0x424>
   3428c:	e59d3014 	ldr	r3, [sp, #20]
   34290:	e0444000 	sub	r4, r4, r0
   34294:	e1a01004 	mov	r1, r4
   34298:	e1a0000b 	mov	r0, fp
   3429c:	e3530000 	cmp	r3, #0
   342a0:	1a00012e 	bne	34760 <CString::FormatV(char const*, std::__va_list)+0x8b8>
   342a4:	ebfffc92 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   342a8:	e2443001 	sub	r3, r4, #1
   342ac:	e3a00020 	mov	r0, #32
   342b0:	e59b200c 	ldr	r2, [fp, #12]
   342b4:	e2433001 	sub	r3, r3, #1
   342b8:	e3730001 	cmn	r3, #1
   342bc:	e2821001 	add	r1, r2, #1
   342c0:	e58b100c 	str	r1, [fp, #12]
   342c4:	e5c20000 	strb	r0, [r2]
   342c8:	1afffff8 	bne	342b0 <CString::FormatV(char const*, std::__va_list)+0x408>
   342cc:	e1a0000a 	mov	r0, sl
   342d0:	eb00065f 	bl	35c54 <strlen>
   342d4:	e2504000 	subs	r4, r0, #0
   342d8:	0a000002 	beq	342e8 <CString::FormatV(char const*, std::__va_list)+0x440>
   342dc:	e1a01004 	mov	r1, r4
   342e0:	e1a0000b 	mov	r0, fp
   342e4:	ebfffc82 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   342e8:	e59b000c 	ldr	r0, [fp, #12]
   342ec:	e1a0100a 	mov	r1, sl
   342f0:	eb0006fb 	bl	35ee4 <strcpy>
   342f4:	e59b300c 	ldr	r3, [fp, #12]
   342f8:	e0833004 	add	r3, r3, r4
   342fc:	e58b300c 	str	r3, [fp, #12]
   34300:	e59d301c 	ldr	r3, [sp, #28]
   34304:	e58d3004 	str	r3, [sp, #4]
   34308:	eaffff58 	b	34070 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   3430c:	e59d3004 	ldr	r3, [sp, #4]
   34310:	e3520000 	cmp	r2, #0
   34314:	0a000115 	beq	34770 <CString::FormatV(char const*, std::__va_list)+0x8c8>
   34318:	e2833007 	add	r3, r3, #7
   3431c:	e3c33007 	bic	r3, r3, #7
   34320:	e593e004 	ldr	lr, [r3, #4]
   34324:	e493a008 	ldr	sl, [r3], #8
   34328:	e35e0000 	cmp	lr, #0
   3432c:	e58d3004 	str	r3, [sp, #4]
   34330:	a3a02000 	movge	r2, #0
   34334:	aa000001 	bge	34340 <CString::FormatV(char const*, std::__va_list)+0x498>
   34338:	e27aa000 	rsbs	sl, sl, #0
   3433c:	e2eee000 	rsc	lr, lr, #0
   34340:	e35a000a 	cmp	sl, #10
   34344:	e1a0300e 	mov	r3, lr
   34348:	e2d33000 	sbcs	r3, r3, #0
   3434c:	e58da00c 	str	sl, [sp, #12]
   34350:	a3a06001 	movge	r6, #1
   34354:	a3a07000 	movge	r7, #0
   34358:	a1a09002 	movge	r9, r2
   3435c:	a1a0800e 	movge	r8, lr
   34360:	e58de01c 	str	lr, [sp, #28]
   34364:	ba000242 	blt	34c74 <CString::FormatV(char const*, std::__va_list)+0xdcc>
   34368:	e0961006 	adds	r1, r6, r6
   3436c:	e1a0000a 	mov	r0, sl
   34370:	e0a73007 	adc	r3, r7, r7
   34374:	e0911001 	adds	r1, r1, r1
   34378:	e0a33003 	adc	r3, r3, r3
   3437c:	e0911006 	adds	r1, r1, r6
   34380:	e0a73003 	adc	r3, r7, r3
   34384:	e0911001 	adds	r1, r1, r1
   34388:	e0a33003 	adc	r3, r3, r3
   3438c:	e1a02001 	mov	r2, r1
   34390:	e1a06001 	mov	r6, r1
   34394:	e1a01008 	mov	r1, r8
   34398:	e1a07003 	mov	r7, r3
   3439c:	fa001863 	blx	3a530 <__aeabi_uldivmod>
   343a0:	e350000a 	cmp	r0, #10
   343a4:	e2d13000 	sbcs	r3, r1, #0
   343a8:	2affffee 	bcs	34368 <CString::FormatV(char const*, std::__va_list)+0x4c0>
   343ac:	e1a02009 	mov	r2, r9
   343b0:	e1a08000 	mov	r8, r0
   343b4:	e1a09001 	mov	r9, r1
   343b8:	e28da034 	add	sl, sp, #52	; 0x34
   343bc:	e30ceccd 	movw	lr, #52429	; 0xcccd
   343c0:	e34ceccc 	movt	lr, #52428	; 0xcccc
   343c4:	e30c3ccc 	movw	r3, #52428	; 0xcccc
   343c8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   343cc:	e58d4024 	str	r4, [sp, #36]	; 0x24
   343d0:	e58db028 	str	fp, [sp, #40]	; 0x28
   343d4:	e1a0400e 	mov	r4, lr
   343d8:	e59db01c 	ldr	fp, [sp, #28]
   343dc:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   343e0:	e1a0500a 	mov	r5, sl
   343e4:	e58da01c 	str	sl, [sp, #28]
   343e8:	e58d3008 	str	r3, [sp, #8]
   343ec:	e59da00c 	ldr	sl, [sp, #12]
   343f0:	e58d2020 	str	r2, [sp, #32]
   343f4:	ea000003 	b	34408 <CString::FormatV(char const*, std::__va_list)+0x560>
   343f8:	e1a03007 	mov	r3, r7
   343fc:	fa00184b 	blx	3a530 <__aeabi_uldivmod>
   34400:	e1a08000 	mov	r8, r0
   34404:	e1a09001 	mov	r9, r1
   34408:	e1a03007 	mov	r3, r7
   3440c:	e1a02006 	mov	r2, r6
   34410:	e1a0000a 	mov	r0, sl
   34414:	e1a0100b 	mov	r1, fp
   34418:	fa001844 	blx	3a530 <__aeabi_uldivmod>
   3441c:	e288c057 	add	ip, r8, #87	; 0x57
   34420:	e358000a 	cmp	r8, #10
   34424:	e2888030 	add	r8, r8, #48	; 0x30
   34428:	e2d99000 	sbcs	r9, r9, #0
   3442c:	e6afc07c 	sxtb	ip, ip
   34430:	e1a01003 	mov	r1, r3
   34434:	36afc078 	sxtbcc	ip, r8
   34438:	e1a0b003 	mov	fp, r3
   3443c:	e0963007 	adds	r3, r6, r7
   34440:	e2a33000 	adc	r3, r3, #0
   34444:	e1a00002 	mov	r0, r2
   34448:	e1a0a002 	mov	sl, r2
   3444c:	e4c5c001 	strb	ip, [r5], #1
   34450:	e08c2394 	umull	r2, ip, r4, r3
   34454:	e3cc2003 	bic	r2, ip, #3
   34458:	e082212c 	add	r2, r2, ip, lsr #2
   3445c:	e59dc008 	ldr	ip, [sp, #8]
   34460:	e0433002 	sub	r3, r3, r2
   34464:	e0563003 	subs	r3, r6, r3
   34468:	e2c72000 	sbc	r2, r7, #0
   3446c:	e356000a 	cmp	r6, #10
   34470:	e2d77000 	sbcs	r7, r7, #0
   34474:	e007039c 	mul	r7, ip, r3
   34478:	e0277294 	mla	r7, r4, r2, r7
   3447c:	e0823493 	umull	r3, r2, r3, r4
   34480:	e0877002 	add	r7, r7, r2
   34484:	e1a060a3 	lsr	r6, r3, #1
   34488:	e1866f87 	orr	r6, r6, r7, lsl #31
   3448c:	e1a070a7 	lsr	r7, r7, #1
   34490:	e1a02006 	mov	r2, r6
   34494:	2affffd7 	bcs	343f8 <CString::FormatV(char const*, std::__va_list)+0x550>
   34498:	e1a03005 	mov	r3, r5
   3449c:	e3a01000 	mov	r1, #0
   344a0:	e59d2020 	ldr	r2, [sp, #32]
   344a4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   344a8:	e59db028 	ldr	fp, [sp, #40]	; 0x28
   344ac:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   344b0:	e59da01c 	ldr	sl, [sp, #28]
   344b4:	e5c31000 	strb	r1, [r3]
   344b8:	ea0000cf 	b	347fc <CString::FormatV(char const*, std::__va_list)+0x954>
   344bc:	e59d3010 	ldr	r3, [sp, #16]
   344c0:	e3530000 	cmp	r3, #0
   344c4:	e59d3004 	ldr	r3, [sp, #4]
   344c8:	e1d360d0 	ldrsb	r6, [r3]
   344cc:	1a000172 	bne	34a9c <CString::FormatV(char const*, std::__va_list)+0xbf4>
   344d0:	e3540001 	cmp	r4, #1
   344d4:	8a000102 	bhi	348e4 <CString::FormatV(char const*, std::__va_list)+0xa3c>
   344d8:	e3a01001 	mov	r1, #1
   344dc:	e1a0000b 	mov	r0, fp
   344e0:	ebfffc03 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   344e4:	e59b300c 	ldr	r3, [fp, #12]
   344e8:	e2832001 	add	r2, r3, #1
   344ec:	e58b200c 	str	r2, [fp, #12]
   344f0:	e5c36000 	strb	r6, [r3]
   344f4:	e59d3004 	ldr	r3, [sp, #4]
   344f8:	e2833004 	add	r3, r3, #4
   344fc:	e58d3004 	str	r3, [sp, #4]
   34500:	eafffeda 	b	34070 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   34504:	e59d3004 	ldr	r3, [sp, #4]
   34508:	e28da034 	add	sl, sp, #52	; 0x34
   3450c:	e1a0000a 	mov	r0, sl
   34510:	e2836007 	add	r6, r3, #7
   34514:	e3c66007 	bic	r6, r6, #7
   34518:	ed960b00 	vldr	d0, [r6]
   3451c:	ebfffdd0 	bl	33c64 <CString::ftoa(char*, double, unsigned int)>
   34520:	e1a0000a 	mov	r0, sl
   34524:	eb0005ca 	bl	35c54 <strlen>
   34528:	e59d3010 	ldr	r3, [sp, #16]
   3452c:	e1a07000 	mov	r7, r0
   34530:	e3530000 	cmp	r3, #0
   34534:	1a00016e 	bne	34af4 <CString::FormatV(char const*, std::__va_list)+0xc4c>
   34538:	e1500004 	cmp	r0, r4
   3453c:	3a000103 	bcc	34950 <CString::FormatV(char const*, std::__va_list)+0xaa8>
   34540:	e1a0000a 	mov	r0, sl
   34544:	eb0005c2 	bl	35c54 <strlen>
   34548:	e2504000 	subs	r4, r0, #0
   3454c:	0a000002 	beq	3455c <CString::FormatV(char const*, std::__va_list)+0x6b4>
   34550:	e1a01004 	mov	r1, r4
   34554:	e1a0000b 	mov	r0, fp
   34558:	ebfffbe5 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   3455c:	e59b000c 	ldr	r0, [fp, #12]
   34560:	e1a0100a 	mov	r1, sl
   34564:	eb00065e 	bl	35ee4 <strcpy>
   34568:	e59b300c 	ldr	r3, [fp, #12]
   3456c:	e0833004 	add	r3, r3, r4
   34570:	e58b300c 	str	r3, [fp, #12]
   34574:	e2863008 	add	r3, r6, #8
   34578:	e58d3004 	str	r3, [sp, #4]
   3457c:	eafffebb 	b	34070 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   34580:	e59d3004 	ldr	r3, [sp, #4]
   34584:	e5937000 	ldr	r7, [r3]
   34588:	e1a00007 	mov	r0, r7
   3458c:	eb0005b0 	bl	35c54 <strlen>
   34590:	e59d3010 	ldr	r3, [sp, #16]
   34594:	e1a06000 	mov	r6, r0
   34598:	e3530000 	cmp	r3, #0
   3459c:	1a000121 	bne	34a28 <CString::FormatV(char const*, std::__va_list)+0xb80>
   345a0:	e1500004 	cmp	r0, r4
   345a4:	3a0000db 	bcc	34918 <CString::FormatV(char const*, std::__va_list)+0xa70>
   345a8:	e1a00007 	mov	r0, r7
   345ac:	eb0005a8 	bl	35c54 <strlen>
   345b0:	e2504000 	subs	r4, r0, #0
   345b4:	0a000002 	beq	345c4 <CString::FormatV(char const*, std::__va_list)+0x71c>
   345b8:	e1a01004 	mov	r1, r4
   345bc:	e1a0000b 	mov	r0, fp
   345c0:	ebfffbcb 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   345c4:	e59b000c 	ldr	r0, [fp, #12]
   345c8:	e1a01007 	mov	r1, r7
   345cc:	eb000644 	bl	35ee4 <strcpy>
   345d0:	e59b300c 	ldr	r3, [fp, #12]
   345d4:	e0833004 	add	r3, r3, r4
   345d8:	e58b300c 	str	r3, [fp, #12]
   345dc:	eaffffc4 	b	344f4 <CString::FormatV(char const*, std::__va_list)+0x64c>
   345e0:	e3500000 	cmp	r0, #0
   345e4:	03a0c008 	moveq	ip, #8
   345e8:	0afffec2 	beq	340f8 <CString::FormatV(char const*, std::__va_list)+0x250>
   345ec:	e3a01001 	mov	r1, #1
   345f0:	e1a0000b 	mov	r0, fp
   345f4:	e58d2008 	str	r2, [sp, #8]
   345f8:	ebfffbbd 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   345fc:	e59b300c 	ldr	r3, [fp, #12]
   34600:	e3a01030 	mov	r1, #48	; 0x30
   34604:	e59d2008 	ldr	r2, [sp, #8]
   34608:	e3a0c008 	mov	ip, #8
   3460c:	e2830001 	add	r0, r3, #1
   34610:	e58b000c 	str	r0, [fp, #12]
   34614:	e5c31000 	strb	r1, [r3]
   34618:	e3520000 	cmp	r2, #0
   3461c:	e59d3004 	ldr	r3, [sp, #4]
   34620:	e1d5a0d0 	ldrsb	sl, [r5]
   34624:	1afffeb6 	bne	34104 <CString::FormatV(char const*, std::__va_list)+0x25c>
   34628:	e493e004 	ldr	lr, [r3], #4
   3462c:	e58d301c 	str	r3, [sp, #28]
   34630:	e15c000e 	cmp	ip, lr
   34634:	93a03001 	movls	r3, #1
   34638:	8a00015b 	bhi	34bac <CString::FormatV(char const*, std::__va_list)+0xd04>
   3463c:	e003039c 	mul	r3, ip, r3
   34640:	e731f31e 	udiv	r1, lr, r3
   34644:	e1a02001 	mov	r2, r1
   34648:	e15c0001 	cmp	ip, r1
   3464c:	9afffffa 	bls	3463c <CString::FormatV(char const*, std::__va_list)+0x794>
   34650:	e25a7058 	subs	r7, sl, #88	; 0x58
   34654:	e28da034 	add	sl, sp, #52	; 0x34
   34658:	13a07001 	movne	r7, #1
   3465c:	e1a0600a 	mov	r6, sl
   34660:	e1a07287 	lsl	r7, r7, #5
   34664:	e2877037 	add	r7, r7, #55	; 0x37
   34668:	ea000002 	b	34678 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   3466c:	e732f11e 	udiv	r2, lr, r1
   34670:	e1a03001 	mov	r3, r1
   34674:	e1a01002 	mov	r1, r2
   34678:	e2828030 	add	r8, r2, #48	; 0x30
   3467c:	e0870002 	add	r0, r7, r2
   34680:	e3520009 	cmp	r2, #9
   34684:	e06ee193 	mls	lr, r3, r1, lr
   34688:	e731fc13 	udiv	r1, r3, ip
   3468c:	e6af2070 	sxtb	r2, r0
   34690:	96af2078 	sxtbls	r2, r8
   34694:	e15c0003 	cmp	ip, r3
   34698:	e4c62001 	strb	r2, [r6], #1
   3469c:	9afffff2 	bls	3466c <CString::FormatV(char const*, std::__va_list)+0x7c4>
   346a0:	e3a03000 	mov	r3, #0
   346a4:	e5c63000 	strb	r3, [r6]
   346a8:	eafffeef 	b	3426c <CString::FormatV(char const*, std::__va_list)+0x3c4>
   346ac:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   346b0:	e3a01000 	mov	r1, #0
   346b4:	e2855001 	add	r5, r5, #1
   346b8:	e24a3030 	sub	r3, sl, #48	; 0x30
   346bc:	e6ef3073 	uxtb	r3, r3
   346c0:	e3530009 	cmp	r3, #9
   346c4:	8afffe33 	bhi	33f98 <CString::FormatV(char const*, std::__va_list)+0xf0>
   346c8:	e3a0200a 	mov	r2, #10
   346cc:	e021a192 	mla	r1, r2, r1, sl
   346d0:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
   346d4:	e24a3030 	sub	r3, sl, #48	; 0x30
   346d8:	e2411030 	sub	r1, r1, #48	; 0x30
   346dc:	e6ef3073 	uxtb	r3, r3
   346e0:	e3530009 	cmp	r3, #9
   346e4:	9afffff8 	bls	346cc <CString::FormatV(char const*, std::__va_list)+0x824>
   346e8:	eafffe2a 	b	33f98 <CString::FormatV(char const*, std::__va_list)+0xf0>
   346ec:	e1a0000a 	mov	r0, sl
   346f0:	eb000557 	bl	35c54 <strlen>
   346f4:	e2507000 	subs	r7, r0, #0
   346f8:	0a000002 	beq	34708 <CString::FormatV(char const*, std::__va_list)+0x860>
   346fc:	e1a01007 	mov	r1, r7
   34700:	e1a0000b 	mov	r0, fp
   34704:	ebfffb7a 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34708:	e59b000c 	ldr	r0, [fp, #12]
   3470c:	e1a0100a 	mov	r1, sl
   34710:	eb0005f3 	bl	35ee4 <strcpy>
   34714:	e59b300c 	ldr	r3, [fp, #12]
   34718:	e1560004 	cmp	r6, r4
   3471c:	e0833007 	add	r3, r3, r7
   34720:	e58b300c 	str	r3, [fp, #12]
   34724:	2afffef5 	bcs	34300 <CString::FormatV(char const*, std::__va_list)+0x458>
   34728:	e0446006 	sub	r6, r4, r6
   3472c:	e1a0000b 	mov	r0, fp
   34730:	e1a01006 	mov	r1, r6
   34734:	ebfffb6e 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34738:	e2463001 	sub	r3, r6, #1
   3473c:	e3a00020 	mov	r0, #32
   34740:	e59b200c 	ldr	r2, [fp, #12]
   34744:	e2433001 	sub	r3, r3, #1
   34748:	e3730001 	cmn	r3, #1
   3474c:	e2821001 	add	r1, r2, #1
   34750:	e58b100c 	str	r1, [fp, #12]
   34754:	e5c20000 	strb	r0, [r2]
   34758:	1afffff8 	bne	34740 <CString::FormatV(char const*, std::__va_list)+0x898>
   3475c:	eafffee7 	b	34300 <CString::FormatV(char const*, std::__va_list)+0x458>
   34760:	ebfffb63 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34764:	e2443001 	sub	r3, r4, #1
   34768:	e3a00030 	mov	r0, #48	; 0x30
   3476c:	eafffecf 	b	342b0 <CString::FormatV(char const*, std::__va_list)+0x408>
   34770:	e4930004 	ldr	r0, [r3], #4
   34774:	e58d3004 	str	r3, [sp, #4]
   34778:	e3500000 	cmp	r0, #0
   3477c:	b2600000 	rsblt	r0, r0, #0
   34780:	b3a02001 	movlt	r2, #1
   34784:	e3500009 	cmp	r0, #9
   34788:	e1a0c000 	mov	ip, r0
   3478c:	c3a01001 	movgt	r1, #1
   34790:	c3a0e00a 	movgt	lr, #10
   34794:	da000133 	ble	34c68 <CString::FormatV(char const*, std::__va_list)+0xdc0>
   34798:	e001019e 	mul	r1, lr, r1
   3479c:	e733f110 	udiv	r3, r0, r1
   347a0:	e3530009 	cmp	r3, #9
   347a4:	8afffffb 	bhi	34798 <CString::FormatV(char const*, std::__va_list)+0x8f0>
   347a8:	e28da034 	add	sl, sp, #52	; 0x34
   347ac:	e30c8ccd 	movw	r8, #52429	; 0xcccd
   347b0:	e34c8ccc 	movt	r8, #52428	; 0xcccc
   347b4:	e1a0e00a 	mov	lr, sl
   347b8:	ea000001 	b	347c4 <CString::FormatV(char const*, std::__va_list)+0x91c>
   347bc:	e1a01003 	mov	r1, r3
   347c0:	e733f31c 	udiv	r3, ip, r3
   347c4:	e3530009 	cmp	r3, #9
   347c8:	e2830057 	add	r0, r3, #87	; 0x57
   347cc:	e736f11c 	udiv	r6, ip, r1
   347d0:	e2837030 	add	r7, r3, #48	; 0x30
   347d4:	e6af0070 	sxtb	r0, r0
   347d8:	96af0077 	sxtbls	r0, r7
   347dc:	e3510009 	cmp	r1, #9
   347e0:	e4ce0001 	strb	r0, [lr], #1
   347e4:	e06cc691 	mls	ip, r1, r6, ip
   347e8:	e0836198 	umull	r6, r3, r8, r1
   347ec:	e1a031a3 	lsr	r3, r3, #3
   347f0:	8afffff1 	bhi	347bc <CString::FormatV(char const*, std::__va_list)+0x914>
   347f4:	e3a03000 	mov	r3, #0
   347f8:	e5ce3000 	strb	r3, [lr]
   347fc:	e1a0000a 	mov	r0, sl
   34800:	e58d2008 	str	r2, [sp, #8]
   34804:	eb000512 	bl	35c54 <strlen>
   34808:	e59d2008 	ldr	r2, [sp, #8]
   3480c:	e59d3010 	ldr	r3, [sp, #16]
   34810:	e1a06000 	mov	r6, r0
   34814:	e3520000 	cmp	r2, #0
   34818:	1a00005a 	bne	34988 <CString::FormatV(char const*, std::__va_list)+0xae0>
   3481c:	e3530000 	cmp	r3, #0
   34820:	1a000063 	bne	349b4 <CString::FormatV(char const*, std::__va_list)+0xb0c>
   34824:	e59d3014 	ldr	r3, [sp, #20]
   34828:	e3530000 	cmp	r3, #0
   3482c:	0a0000e2 	beq	34bbc <CString::FormatV(char const*, std::__va_list)+0xd14>
   34830:	e1540006 	cmp	r4, r6
   34834:	8a0000fd 	bhi	34c30 <CString::FormatV(char const*, std::__va_list)+0xd88>
   34838:	e1a0000a 	mov	r0, sl
   3483c:	eb000504 	bl	35c54 <strlen>
   34840:	e2504000 	subs	r4, r0, #0
   34844:	0a000002 	beq	34854 <CString::FormatV(char const*, std::__va_list)+0x9ac>
   34848:	e1a01004 	mov	r1, r4
   3484c:	e1a0000b 	mov	r0, fp
   34850:	ebfffb27 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34854:	e59b000c 	ldr	r0, [fp, #12]
   34858:	e1a0100a 	mov	r1, sl
   3485c:	eb0005a0 	bl	35ee4 <strcpy>
   34860:	e59b300c 	ldr	r3, [fp, #12]
   34864:	e0833004 	add	r3, r3, r4
   34868:	e58b300c 	str	r3, [fp, #12]
   3486c:	eafffdff 	b	34070 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   34870:	e35a0058 	cmp	sl, #88	; 0x58
   34874:	e303325c 	movw	r3, #12892	; 0x325c
   34878:	e3403004 	movt	r3, #4
   3487c:	e3037260 	movw	r7, #12896	; 0x3260
   34880:	e3407004 	movt	r7, #4
   34884:	01a07003 	moveq	r7, r3
   34888:	e1a00007 	mov	r0, r7
   3488c:	e58d2008 	str	r2, [sp, #8]
   34890:	eb0004ef 	bl	35c54 <strlen>
   34894:	e59d2008 	ldr	r2, [sp, #8]
   34898:	e2508000 	subs	r8, r0, #0
   3489c:	0a000003 	beq	348b0 <CString::FormatV(char const*, std::__va_list)+0xa08>
   348a0:	e1a01008 	mov	r1, r8
   348a4:	e1a0000b 	mov	r0, fp
   348a8:	ebfffb11 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   348ac:	e59d2008 	ldr	r2, [sp, #8]
   348b0:	e59b000c 	ldr	r0, [fp, #12]
   348b4:	e1a01007 	mov	r1, r7
   348b8:	e58d2008 	str	r2, [sp, #8]
   348bc:	eb000588 	bl	35ee4 <strcpy>
   348c0:	e59b300c 	ldr	r3, [fp, #12]
   348c4:	e3a0c010 	mov	ip, #16
   348c8:	e59d2008 	ldr	r2, [sp, #8]
   348cc:	e0833008 	add	r3, r3, r8
   348d0:	e58b300c 	str	r3, [fp, #12]
   348d4:	e1d5a0d0 	ldrsb	sl, [r5]
   348d8:	eafffe06 	b	340f8 <CString::FormatV(char const*, std::__va_list)+0x250>
   348dc:	e3a0c00a 	mov	ip, #10
   348e0:	eafffe04 	b	340f8 <CString::FormatV(char const*, std::__va_list)+0x250>
   348e4:	e2441001 	sub	r1, r4, #1
   348e8:	e1a0000b 	mov	r0, fp
   348ec:	ebfffb00 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   348f0:	e2444002 	sub	r4, r4, #2
   348f4:	e3a01020 	mov	r1, #32
   348f8:	e59b300c 	ldr	r3, [fp, #12]
   348fc:	e2444001 	sub	r4, r4, #1
   34900:	e3740001 	cmn	r4, #1
   34904:	e2832001 	add	r2, r3, #1
   34908:	e58b200c 	str	r2, [fp, #12]
   3490c:	e5c31000 	strb	r1, [r3]
   34910:	1afffff8 	bne	348f8 <CString::FormatV(char const*, std::__va_list)+0xa50>
   34914:	eafffeef 	b	344d8 <CString::FormatV(char const*, std::__va_list)+0x630>
   34918:	e0446000 	sub	r6, r4, r0
   3491c:	e1a0000b 	mov	r0, fp
   34920:	e1a01006 	mov	r1, r6
   34924:	ebfffaf2 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34928:	e2463001 	sub	r3, r6, #1
   3492c:	e3a00020 	mov	r0, #32
   34930:	e59b200c 	ldr	r2, [fp, #12]
   34934:	e2433001 	sub	r3, r3, #1
   34938:	e3730001 	cmn	r3, #1
   3493c:	e2821001 	add	r1, r2, #1
   34940:	e58b100c 	str	r1, [fp, #12]
   34944:	e5c20000 	strb	r0, [r2]
   34948:	1afffff8 	bne	34930 <CString::FormatV(char const*, std::__va_list)+0xa88>
   3494c:	eaffff15 	b	345a8 <CString::FormatV(char const*, std::__va_list)+0x700>
   34950:	e0447000 	sub	r7, r4, r0
   34954:	e1a0000b 	mov	r0, fp
   34958:	e1a01007 	mov	r1, r7
   3495c:	ebfffae4 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34960:	e2473001 	sub	r3, r7, #1
   34964:	e3a00020 	mov	r0, #32
   34968:	e59b200c 	ldr	r2, [fp, #12]
   3496c:	e2433001 	sub	r3, r3, #1
   34970:	e3730001 	cmn	r3, #1
   34974:	e2821001 	add	r1, r2, #1
   34978:	e58b100c 	str	r1, [fp, #12]
   3497c:	e5c20000 	strb	r0, [r2]
   34980:	1afffff8 	bne	34968 <CString::FormatV(char const*, std::__va_list)+0xac0>
   34984:	eafffeed 	b	34540 <CString::FormatV(char const*, std::__va_list)+0x698>
   34988:	e3530000 	cmp	r3, #0
   3498c:	e2806001 	add	r6, r0, #1
   34990:	0a000074 	beq	34b68 <CString::FormatV(char const*, std::__va_list)+0xcc0>
   34994:	e3a01001 	mov	r1, #1
   34998:	e1a0000b 	mov	r0, fp
   3499c:	ebfffad4 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   349a0:	e59b300c 	ldr	r3, [fp, #12]
   349a4:	e3a0202d 	mov	r2, #45	; 0x2d
   349a8:	e2831001 	add	r1, r3, #1
   349ac:	e58b100c 	str	r1, [fp, #12]
   349b0:	e5c32000 	strb	r2, [r3]
   349b4:	e1a0000a 	mov	r0, sl
   349b8:	eb0004a5 	bl	35c54 <strlen>
   349bc:	e2507000 	subs	r7, r0, #0
   349c0:	0a000002 	beq	349d0 <CString::FormatV(char const*, std::__va_list)+0xb28>
   349c4:	e1a01007 	mov	r1, r7
   349c8:	e1a0000b 	mov	r0, fp
   349cc:	ebfffac8 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   349d0:	e59b000c 	ldr	r0, [fp, #12]
   349d4:	e1a0100a 	mov	r1, sl
   349d8:	eb000541 	bl	35ee4 <strcpy>
   349dc:	e59b300c 	ldr	r3, [fp, #12]
   349e0:	e1560004 	cmp	r6, r4
   349e4:	e0833007 	add	r3, r3, r7
   349e8:	e58b300c 	str	r3, [fp, #12]
   349ec:	2afffd9f 	bcs	34070 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   349f0:	e0444006 	sub	r4, r4, r6
   349f4:	e1a0000b 	mov	r0, fp
   349f8:	e1a01004 	mov	r1, r4
   349fc:	ebfffabc 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34a00:	e2443001 	sub	r3, r4, #1
   34a04:	e3a00020 	mov	r0, #32
   34a08:	e59b200c 	ldr	r2, [fp, #12]
   34a0c:	e2433001 	sub	r3, r3, #1
   34a10:	e3730001 	cmn	r3, #1
   34a14:	e2821001 	add	r1, r2, #1
   34a18:	e58b100c 	str	r1, [fp, #12]
   34a1c:	e5c20000 	strb	r0, [r2]
   34a20:	1afffff8 	bne	34a08 <CString::FormatV(char const*, std::__va_list)+0xb60>
   34a24:	eafffd91 	b	34070 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   34a28:	e1a00007 	mov	r0, r7
   34a2c:	eb000488 	bl	35c54 <strlen>
   34a30:	e2508000 	subs	r8, r0, #0
   34a34:	0a000002 	beq	34a44 <CString::FormatV(char const*, std::__va_list)+0xb9c>
   34a38:	e1a01008 	mov	r1, r8
   34a3c:	e1a0000b 	mov	r0, fp
   34a40:	ebfffaab 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34a44:	e59b000c 	ldr	r0, [fp, #12]
   34a48:	e1a01007 	mov	r1, r7
   34a4c:	eb000524 	bl	35ee4 <strcpy>
   34a50:	e59b300c 	ldr	r3, [fp, #12]
   34a54:	e1560004 	cmp	r6, r4
   34a58:	e0833008 	add	r3, r3, r8
   34a5c:	e58b300c 	str	r3, [fp, #12]
   34a60:	2afffea3 	bcs	344f4 <CString::FormatV(char const*, std::__va_list)+0x64c>
   34a64:	e0446006 	sub	r6, r4, r6
   34a68:	e1a0000b 	mov	r0, fp
   34a6c:	e1a01006 	mov	r1, r6
   34a70:	ebfffa9f 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34a74:	e2463001 	sub	r3, r6, #1
   34a78:	e3a00020 	mov	r0, #32
   34a7c:	e59b200c 	ldr	r2, [fp, #12]
   34a80:	e2433001 	sub	r3, r3, #1
   34a84:	e3730001 	cmn	r3, #1
   34a88:	e2821001 	add	r1, r2, #1
   34a8c:	e58b100c 	str	r1, [fp, #12]
   34a90:	e5c20000 	strb	r0, [r2]
   34a94:	1afffff8 	bne	34a7c <CString::FormatV(char const*, std::__va_list)+0xbd4>
   34a98:	eafffe95 	b	344f4 <CString::FormatV(char const*, std::__va_list)+0x64c>
   34a9c:	e3a01001 	mov	r1, #1
   34aa0:	e1a0000b 	mov	r0, fp
   34aa4:	ebfffa92 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34aa8:	e59b300c 	ldr	r3, [fp, #12]
   34aac:	e3540001 	cmp	r4, #1
   34ab0:	e2832001 	add	r2, r3, #1
   34ab4:	e58b200c 	str	r2, [fp, #12]
   34ab8:	e5c36000 	strb	r6, [r3]
   34abc:	9afffe8c 	bls	344f4 <CString::FormatV(char const*, std::__va_list)+0x64c>
   34ac0:	e2441001 	sub	r1, r4, #1
   34ac4:	e1a0000b 	mov	r0, fp
   34ac8:	ebfffa89 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34acc:	e2444002 	sub	r4, r4, #2
   34ad0:	e3a01020 	mov	r1, #32
   34ad4:	e59b300c 	ldr	r3, [fp, #12]
   34ad8:	e2444001 	sub	r4, r4, #1
   34adc:	e3740001 	cmn	r4, #1
   34ae0:	e2832001 	add	r2, r3, #1
   34ae4:	e58b200c 	str	r2, [fp, #12]
   34ae8:	e5c31000 	strb	r1, [r3]
   34aec:	1afffff8 	bne	34ad4 <CString::FormatV(char const*, std::__va_list)+0xc2c>
   34af0:	eafffe7f 	b	344f4 <CString::FormatV(char const*, std::__va_list)+0x64c>
   34af4:	e1a0000a 	mov	r0, sl
   34af8:	eb000455 	bl	35c54 <strlen>
   34afc:	e2508000 	subs	r8, r0, #0
   34b00:	0a000002 	beq	34b10 <CString::FormatV(char const*, std::__va_list)+0xc68>
   34b04:	e1a01008 	mov	r1, r8
   34b08:	e1a0000b 	mov	r0, fp
   34b0c:	ebfffa78 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34b10:	e59b000c 	ldr	r0, [fp, #12]
   34b14:	e1a0100a 	mov	r1, sl
   34b18:	eb0004f1 	bl	35ee4 <strcpy>
   34b1c:	e59b300c 	ldr	r3, [fp, #12]
   34b20:	e1570004 	cmp	r7, r4
   34b24:	e0833008 	add	r3, r3, r8
   34b28:	e58b300c 	str	r3, [fp, #12]
   34b2c:	2afffe90 	bcs	34574 <CString::FormatV(char const*, std::__va_list)+0x6cc>
   34b30:	e0447007 	sub	r7, r4, r7
   34b34:	e1a0000b 	mov	r0, fp
   34b38:	e1a01007 	mov	r1, r7
   34b3c:	ebfffa6c 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34b40:	e2473001 	sub	r3, r7, #1
   34b44:	e3a00020 	mov	r0, #32
   34b48:	e59b200c 	ldr	r2, [fp, #12]
   34b4c:	e2433001 	sub	r3, r3, #1
   34b50:	e3730001 	cmn	r3, #1
   34b54:	e2821001 	add	r1, r2, #1
   34b58:	e58b100c 	str	r1, [fp, #12]
   34b5c:	e5c20000 	strb	r0, [r2]
   34b60:	1afffff8 	bne	34b48 <CString::FormatV(char const*, std::__va_list)+0xca0>
   34b64:	eafffe82 	b	34574 <CString::FormatV(char const*, std::__va_list)+0x6cc>
   34b68:	e59d3014 	ldr	r3, [sp, #20]
   34b6c:	e3530000 	cmp	r3, #0
   34b70:	1a000025 	bne	34c0c <CString::FormatV(char const*, std::__va_list)+0xd64>
   34b74:	e1540006 	cmp	r4, r6
   34b78:	8a000011 	bhi	34bc4 <CString::FormatV(char const*, std::__va_list)+0xd1c>
   34b7c:	e3a01001 	mov	r1, #1
   34b80:	e1a0000b 	mov	r0, fp
   34b84:	ebfffa5a 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34b88:	e59b300c 	ldr	r3, [fp, #12]
   34b8c:	e3a0202d 	mov	r2, #45	; 0x2d
   34b90:	e2831001 	add	r1, r3, #1
   34b94:	e58b100c 	str	r1, [fp, #12]
   34b98:	e5c32000 	strb	r2, [r3]
   34b9c:	eaffff25 	b	34838 <CString::FormatV(char const*, std::__va_list)+0x990>
   34ba0:	e99d0140 	ldmib	sp, {r6, r8}
   34ba4:	e3a07001 	mov	r7, #1
   34ba8:	eafffd79 	b	34194 <CString::FormatV(char const*, std::__va_list)+0x2ec>
   34bac:	e1a0200e 	mov	r2, lr
   34bb0:	e3a03001 	mov	r3, #1
   34bb4:	e1a0100e 	mov	r1, lr
   34bb8:	eafffea4 	b	34650 <CString::FormatV(char const*, std::__va_list)+0x7a8>
   34bbc:	e1500004 	cmp	r0, r4
   34bc0:	2affff1c 	bcs	34838 <CString::FormatV(char const*, std::__va_list)+0x990>
   34bc4:	e0444006 	sub	r4, r4, r6
   34bc8:	e1a0000b 	mov	r0, fp
   34bcc:	e1a01004 	mov	r1, r4
   34bd0:	e58d2008 	str	r2, [sp, #8]
   34bd4:	ebfffa46 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34bd8:	e59d2008 	ldr	r2, [sp, #8]
   34bdc:	e2443001 	sub	r3, r4, #1
   34be0:	e3a0c020 	mov	ip, #32
   34be4:	e59b100c 	ldr	r1, [fp, #12]
   34be8:	e2433001 	sub	r3, r3, #1
   34bec:	e3730001 	cmn	r3, #1
   34bf0:	e2810001 	add	r0, r1, #1
   34bf4:	e58b000c 	str	r0, [fp, #12]
   34bf8:	e5c1c000 	strb	ip, [r1]
   34bfc:	1afffff8 	bne	34be4 <CString::FormatV(char const*, std::__va_list)+0xd3c>
   34c00:	e3520000 	cmp	r2, #0
   34c04:	0affff0b 	beq	34838 <CString::FormatV(char const*, std::__va_list)+0x990>
   34c08:	eaffffdb 	b	34b7c <CString::FormatV(char const*, std::__va_list)+0xcd4>
   34c0c:	e3a01001 	mov	r1, #1
   34c10:	e1a0000b 	mov	r0, fp
   34c14:	ebfffa36 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34c18:	e59b300c 	ldr	r3, [fp, #12]
   34c1c:	e3a0202d 	mov	r2, #45	; 0x2d
   34c20:	e2831001 	add	r1, r3, #1
   34c24:	e58b100c 	str	r1, [fp, #12]
   34c28:	e5c32000 	strb	r2, [r3]
   34c2c:	eafffeff 	b	34830 <CString::FormatV(char const*, std::__va_list)+0x988>
   34c30:	e0444006 	sub	r4, r4, r6
   34c34:	e1a0000b 	mov	r0, fp
   34c38:	e1a01004 	mov	r1, r4
   34c3c:	ebfffa2c 	bl	334f4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34c40:	e2443001 	sub	r3, r4, #1
   34c44:	e3a00030 	mov	r0, #48	; 0x30
   34c48:	e59b200c 	ldr	r2, [fp, #12]
   34c4c:	e2433001 	sub	r3, r3, #1
   34c50:	e3730001 	cmn	r3, #1
   34c54:	e2821001 	add	r1, r2, #1
   34c58:	e58b100c 	str	r1, [fp, #12]
   34c5c:	e5c20000 	strb	r0, [r2]
   34c60:	1afffff8 	bne	34c48 <CString::FormatV(char const*, std::__va_list)+0xda0>
   34c64:	eafffef3 	b	34838 <CString::FormatV(char const*, std::__va_list)+0x990>
   34c68:	e1a03000 	mov	r3, r0
   34c6c:	e3a01001 	mov	r1, #1
   34c70:	eafffecc 	b	347a8 <CString::FormatV(char const*, std::__va_list)+0x900>
   34c74:	e1a0800a 	mov	r8, sl
   34c78:	e1a0900e 	mov	r9, lr
   34c7c:	e3a06001 	mov	r6, #1
   34c80:	e3a07000 	mov	r7, #0
   34c84:	eafffdcb 	b	343b8 <CString::FormatV(char const*, std::__va_list)+0x510>

00034c88 <CString::Format(char const*, ...)>:
   34c88:	e92d000e 	push	{r1, r2, r3}
   34c8c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   34c90:	e24dd008 	sub	sp, sp, #8
   34c94:	e28d2010 	add	r2, sp, #16
   34c98:	e59d100c 	ldr	r1, [sp, #12]
   34c9c:	e58d2004 	str	r2, [sp, #4]
   34ca0:	ebfffc80 	bl	33ea8 <CString::FormatV(char const*, std::__va_list)>
   34ca4:	e28dd008 	add	sp, sp, #8
   34ca8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   34cac:	e28dd00c 	add	sp, sp, #12
   34cb0:	e12fff1e 	bx	lr

00034cb4 <__aeabi_atexit>:
   34cb4:	e12fff1e 	bx	lr

00034cb8 <__errno>:
   34cb8:	e3040f68 	movw	r0, #20328	; 0x4f68
   34cbc:	e3400004 	movt	r0, #4
   34cc0:	e12fff1e 	bx	lr

00034cc4 <set_qemu_exit_status>:
   34cc4:	e12fff1e 	bx	lr

00034cc8 <halt>:
   34cc8:	f10c0080 	cpsid	i
   34ccc:	f10c0040 	cpsid	f
   34cd0:	f57ff04f 	dsb	sy
   34cd4:	e320f003 	wfi
   34cd8:	eafffffc 	b	34cd0 <halt+0x8>

00034cdc <reboot>:
   34cdc:	e3a03000 	mov	r3, #0
   34ce0:	e3433f10 	movt	r3, #16144	; 0x3f10
   34ce4:	e3a01001 	mov	r1, #1
   34ce8:	e3451a00 	movt	r1, #23040	; 0x5a00
   34cec:	e3a02020 	mov	r2, #32
   34cf0:	e3452a00 	movt	r2, #23040	; 0x5a00
   34cf4:	e5831024 	str	r1, [r3, #36]	; 0x24
   34cf8:	e583201c 	str	r2, [r3, #28]
   34cfc:	eafffffe 	b	34cfc <reboot+0x20>

00034d00 <sysinit>:
   34d00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   34d04:	e24ddf4d 	sub	sp, sp, #308	; 0x134
   34d08:	f1080040 	cpsie	f
   34d0c:	f1080080 	cpsie	i
   34d10:	eb000b3f 	bl	37a14 <InvalidateDataCacheL1Only>
   34d14:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   34d18:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   34d1c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   34d20:	f57ff06f 	isb	sy
   34d24:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   34d28:	eee83a10 	vmsr	fpexc, r3
   34d2c:	e3a03403 	mov	r3, #50331648	; 0x3000000
   34d30:	eee13a10 	vmsr	fpscr, r3
   34d34:	e3054018 	movw	r4, #20504	; 0x5018
   34d38:	e3404004 	movt	r4, #4
   34d3c:	e3040e48 	movw	r0, #20040	; 0x4e48
   34d40:	e3400004 	movt	r0, #4
   34d44:	e0442000 	sub	r2, r4, r0
   34d48:	e3a01000 	mov	r1, #0
   34d4c:	eb0005b2 	bl	3641c <memset>
   34d50:	e3540982 	cmp	r4, #2129920	; 0x208000
   34d54:	8a000020 	bhi	34ddc <sysinit+0xdc>
   34d58:	e28d0018 	add	r0, sp, #24
   34d5c:	e3045c74 	movw	r5, #19572	; 0x4c74
   34d60:	e3405004 	movt	r5, #4
   34d64:	ebffeb41 	bl	2fa70 <CMachineInfo::CMachineInfo()>
   34d68:	e3a01001 	mov	r1, #1
   34d6c:	e28d0054 	add	r0, sp, #84	; 0x54
   34d70:	eb000d62 	bl	38300 <CMemorySystem::CMemorySystem(bool)>
   34d74:	e28d0008 	add	r0, sp, #8
   34d78:	ebfff9f7 	bl	3355c <CString::CString()>
   34d7c:	e3a03003 	mov	r3, #3
   34d80:	e3a0202d 	mov	r2, #45	; 0x2d
   34d84:	e3a01001 	mov	r1, #1
   34d88:	e28d0008 	add	r0, sp, #8
   34d8c:	e58d1000 	str	r1, [sp]
   34d90:	e3031274 	movw	r1, #12916	; 0x3274
   34d94:	e3401004 	movt	r1, #4
   34d98:	ebffffba 	bl	34c88 <CString::Format(char const*, ...)>
   34d9c:	e28d0008 	add	r0, sp, #8
   34da0:	ebfffa25 	bl	3363c <CString::operator char const*() const>
   34da4:	e3044c38 	movw	r4, #19512	; 0x4c38
   34da8:	e3404004 	movt	r4, #4
   34dac:	e1a01000 	mov	r1, r0
   34db0:	e59f004c 	ldr	r0, [pc, #76]	; 34e04 <sysinit+0x104>
   34db4:	eb00044a 	bl	35ee4 <strcpy>
   34db8:	e1540005 	cmp	r4, r5
   34dbc:	2a000003 	bcs	34dd0 <sysinit+0xd0>
   34dc0:	e4943004 	ldr	r3, [r4], #4
   34dc4:	e12fff33 	blx	r3
   34dc8:	e1540005 	cmp	r4, r5
   34dcc:	3afffffb 	bcc	34dc0 <sysinit+0xc0>
   34dd0:	ebff4ca6 	bl	8070 <main>
   34dd4:	e3500001 	cmp	r0, #1
   34dd8:	0a000000 	beq	34de0 <sysinit+0xe0>
   34ddc:	ebffffb9 	bl	34cc8 <halt>
   34de0:	eb00068a 	bl	36810 <IsChainBootEnabled>
   34de4:	e3500000 	cmp	r0, #0
   34de8:	1a000000 	bne	34df0 <sysinit+0xf0>
   34dec:	ebffffba 	bl	34cdc <reboot>
   34df0:	e28d0054 	add	r0, sp, #84	; 0x54
   34df4:	eb000ce7 	bl	38198 <CMemorySystem::Destructor()>
   34df8:	f10c0040 	cpsid	f
   34dfc:	eb000689 	bl	36828 <DoChainBoot>
   34e00:	eafffff9 	b	34dec <sysinit+0xec>
   34e04:	00044f6c 	.word	0x00044f6c

00034e08 <CTimer::CTimer(CInterruptSystem*)>:
   34e08:	e92d4070 	push	{r4, r5, r6, lr}
   34e0c:	e1a04000 	mov	r4, r0
   34e10:	e3a05000 	mov	r5, #0
   34e14:	e3a06001 	mov	r6, #1
   34e18:	e2800018 	add	r0, r0, #24
   34e1c:	e5845004 	str	r5, [r4, #4]
   34e20:	e5841000 	str	r1, [r4]
   34e24:	e5845008 	str	r5, [r4, #8]
   34e28:	e5846010 	str	r6, [r4, #16]
   34e2c:	e584500c 	str	r5, [r4, #12]
   34e30:	e5845014 	str	r5, [r4, #20]
   34e34:	ebffedeb 	bl	305e8 <CPtrList::CPtrList()>
   34e38:	e3043f7c 	movw	r3, #20348	; 0x4f7c
   34e3c:	e3403004 	movt	r3, #4
   34e40:	e3a02d35 	mov	r2, #3392	; 0xd40
   34e44:	e3402003 	movt	r2, #3
   34e48:	e5842020 	str	r2, [r4, #32]
   34e4c:	e3a010c8 	mov	r1, #200	; 0xc8
   34e50:	e584601c 	str	r6, [r4, #28]
   34e54:	e5932000 	ldr	r2, [r3]
   34e58:	e5841024 	str	r1, [r4, #36]	; 0x24
   34e5c:	e1520005 	cmp	r2, r5
   34e60:	e5845028 	str	r5, [r4, #40]	; 0x28
   34e64:	e584503c 	str	r5, [r4, #60]	; 0x3c
   34e68:	1a000002 	bne	34e78 <CTimer::CTimer(CInterruptSystem*)+0x70>
   34e6c:	e1a00004 	mov	r0, r4
   34e70:	e5834000 	str	r4, [r3]
   34e74:	e8bd8070 	pop	{r4, r5, r6, pc}
   34e78:	e3031280 	movw	r1, #12928	; 0x3280
   34e7c:	e3401004 	movt	r1, #4
   34e80:	e3000a74 	movw	r0, #2676	; 0xa74
   34e84:	e3400004 	movt	r0, #4
   34e88:	e3a02040 	mov	r2, #64	; 0x40
   34e8c:	ebffde8b 	bl	2c8c0 <assertion_failed>

00034e90 <CTimer::~CTimer()>:
   34e90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34e94:	e1a08000 	mov	r8, r0
   34e98:	e5900000 	ldr	r0, [r0]
   34e9c:	e3500000 	cmp	r0, #0
   34ea0:	0a00002f 	beq	34f64 <CTimer::~CTimer()+0xd4>
   34ea4:	e3a03000 	mov	r3, #0
   34ea8:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   34eac:	e3a01049 	mov	r1, #73	; 0x49
   34eb0:	e2886018 	add	r6, r8, #24
   34eb4:	eb000e4d 	bl	387f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   34eb8:	e1a00006 	mov	r0, r6
   34ebc:	e3047d43 	movw	r7, #19779	; 0x4d43
   34ec0:	e3447b54 	movt	r7, #19284	; 0x4b54
   34ec4:	ebffedd4 	bl	3061c <CPtrList::GetFirst()>
   34ec8:	e2504000 	subs	r4, r0, #0
   34ecc:	0a000011 	beq	34f18 <CTimer::~CTimer()+0x88>
   34ed0:	e1a01004 	mov	r1, r4
   34ed4:	e1a00006 	mov	r0, r6
   34ed8:	ebffede7 	bl	3067c <CPtrList::GetPtr(TPtrListElement*)>
   34edc:	e2505000 	subs	r5, r0, #0
   34ee0:	0a000013 	beq	34f34 <CTimer::~CTimer()+0xa4>
   34ee4:	e5953000 	ldr	r3, [r5]
   34ee8:	e1530007 	cmp	r3, r7
   34eec:	1a000016 	bne	34f4c <CTimer::~CTimer()+0xbc>
   34ef0:	e1a01004 	mov	r1, r4
   34ef4:	e1a00006 	mov	r0, r6
   34ef8:	ebffee6d 	bl	308b4 <CPtrList::Remove(TPtrListElement*)>
   34efc:	e3a01014 	mov	r1, #20
   34f00:	e1a00005 	mov	r0, r5
   34f04:	eb00077c 	bl	36cfc <operator delete(void*, unsigned int)>
   34f08:	e1a00006 	mov	r0, r6
   34f0c:	ebffedc2 	bl	3061c <CPtrList::GetFirst()>
   34f10:	e2504000 	subs	r4, r0, #0
   34f14:	1affffed 	bne	34ed0 <CTimer::~CTimer()+0x40>
   34f18:	e3043f7c 	movw	r3, #20348	; 0x4f7c
   34f1c:	e3403004 	movt	r3, #4
   34f20:	e1a00006 	mov	r0, r6
   34f24:	e5834000 	str	r4, [r3]
   34f28:	ebffedb1 	bl	305f4 <CPtrList::~CPtrList()>
   34f2c:	e1a00008 	mov	r0, r8
   34f30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34f34:	e3031280 	movw	r1, #12928	; 0x3280
   34f38:	e3401004 	movt	r1, #4
   34f3c:	e30d0c10 	movw	r0, #56336	; 0xdc10
   34f40:	e3400003 	movt	r0, #3
   34f44:	e3a02057 	mov	r2, #87	; 0x57
   34f48:	ebffde5c 	bl	2c8c0 <assertion_failed>
   34f4c:	e3031280 	movw	r1, #12928	; 0x3280
   34f50:	e3401004 	movt	r1, #4
   34f54:	e303028c 	movw	r0, #12940	; 0x328c
   34f58:	e3400004 	movt	r0, #4
   34f5c:	e3a02058 	mov	r2, #88	; 0x58
   34f60:	ebffde56 	bl	2c8c0 <assertion_failed>
   34f64:	e3031280 	movw	r1, #12928	; 0x3280
   34f68:	e3401004 	movt	r1, #4
   34f6c:	e30a0a44 	movw	r0, #43588	; 0xaa44
   34f70:	e3400003 	movt	r0, #3
   34f74:	e3a02046 	mov	r2, #70	; 0x46
   34f78:	ebffde50 	bl	2c8c0 <assertion_failed>

00034f7c <CTimer::SetTimeZone(int)>:
   34f7c:	e1a02000 	mov	r2, r0
   34f80:	e2813e59 	add	r3, r1, #1424	; 0x590
   34f84:	e283300f 	add	r3, r3, #15
   34f88:	e300cb3e 	movw	ip, #2878	; 0xb3e
   34f8c:	e153000c 	cmp	r3, ip
   34f90:	93a00001 	movls	r0, #1
   34f94:	95821014 	strls	r1, [r2, #20]
   34f98:	83a00000 	movhi	r0, #0
   34f9c:	e12fff1e 	bx	lr

00034fa0 <CTimer::GetTimeZone() const>:
   34fa0:	e5900014 	ldr	r0, [r0, #20]
   34fa4:	e12fff1e 	bx	lr

00034fa8 <CTimer::SetTime(unsigned int, bool)>:
   34fa8:	e5903014 	ldr	r3, [r0, #20]
   34fac:	e3a0c03c 	mov	ip, #60	; 0x3c
   34fb0:	e92d4070 	push	{r4, r5, r6, lr}
   34fb4:	e3520000 	cmp	r2, #0
   34fb8:	e1a04000 	mov	r4, r0
   34fbc:	e1a05001 	mov	r5, r1
   34fc0:	e003039c 	mul	r3, ip, r3
   34fc4:	1a000002 	bne	34fd4 <CTimer::SetTime(unsigned int, bool)+0x2c>
   34fc8:	e3530000 	cmp	r3, #0
   34fcc:	ba000017 	blt	35030 <CTimer::SetTime(unsigned int, bool)+0x88>
   34fd0:	e0855003 	add	r5, r5, r3
   34fd4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   34fd8:	e3520000 	cmp	r2, #0
   34fdc:	0a000007 	beq	35000 <CTimer::SetTime(unsigned int, bool)+0x58>
   34fe0:	e594100c 	ldr	r1, [r4, #12]
   34fe4:	e0450003 	sub	r0, r5, r3
   34fe8:	e1530001 	cmp	r3, r1
   34fec:	d0411003 	suble	r1, r1, r3
   34ff0:	c3a01000 	movgt	r1, #0
   34ff4:	e12fff32 	blx	r2
   34ff8:	e3500000 	cmp	r0, #0
   34ffc:	0a00000e 	beq	3503c <CTimer::SetTime(unsigned int, bool)+0x94>
   35000:	e5940010 	ldr	r0, [r4, #16]
   35004:	e3500000 	cmp	r0, #0
   35008:	0584500c 	streq	r5, [r4, #12]
   3500c:	0a000005 	beq	35028 <CTimer::SetTime(unsigned int, bool)+0x80>
   35010:	eb000d39 	bl	384fc <EnterCritical>
   35014:	e5943010 	ldr	r3, [r4, #16]
   35018:	e584500c 	str	r5, [r4, #12]
   3501c:	e3530000 	cmp	r3, #0
   35020:	0a000000 	beq	35028 <CTimer::SetTime(unsigned int, bool)+0x80>
   35024:	eb000d5f 	bl	385a8 <LeaveCritical>
   35028:	e3a00001 	mov	r0, #1
   3502c:	e8bd8070 	pop	{r4, r5, r6, pc}
   35030:	e2632000 	rsb	r2, r3, #0
   35034:	e1520001 	cmp	r2, r1
   35038:	daffffe4 	ble	34fd0 <CTimer::SetTime(unsigned int, bool)+0x28>
   3503c:	e3a00000 	mov	r0, #0
   35040:	e8bd8070 	pop	{r4, r5, r6, pc}

00035044 <CTimer::GetClockTicks()>:
   35044:	f57ff06f 	isb	sy
   35048:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
   3504c:	e12fff1e 	bx	lr

00035050 <CTimer::GetTicks() const>:
   35050:	e5900004 	ldr	r0, [r0, #4]
   35054:	e12fff1e 	bx	lr

00035058 <CTimer::GetUptime() const>:
   35058:	e5900008 	ldr	r0, [r0, #8]
   3505c:	e12fff1e 	bx	lr

00035060 <CTimer::GetTime() const>:
   35060:	e590000c 	ldr	r0, [r0, #12]
   35064:	e12fff1e 	bx	lr

00035068 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   35068:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3506c:	e1a04000 	mov	r4, r0
   35070:	e5900010 	ldr	r0, [r0, #16]
   35074:	e1a06001 	mov	r6, r1
   35078:	e1a07002 	mov	r7, r2
   3507c:	e3500000 	cmp	r0, #0
   35080:	1a000011 	bne	350cc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   35084:	e594800c 	ldr	r8, [r4, #12]
   35088:	e5945004 	ldr	r5, [r4, #4]
   3508c:	e3560000 	cmp	r6, #0
   35090:	0a000016 	beq	350f0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   35094:	e3570000 	cmp	r7, #0
   35098:	e5868000 	str	r8, [r6]
   3509c:	0a000019 	beq	35108 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   350a0:	e308351f 	movw	r3, #34079	; 0x851f
   350a4:	e34531eb 	movt	r3, #20971	; 0x51eb
   350a8:	e3a01064 	mov	r1, #100	; 0x64
   350ac:	e3022710 	movw	r2, #10000	; 0x2710
   350b0:	e0830593 	umull	r0, r3, r3, r5
   350b4:	e3a00001 	mov	r0, #1
   350b8:	e1a032a3 	lsr	r3, r3, #5
   350bc:	e0655391 	mls	r5, r1, r3, r5
   350c0:	e0050592 	mul	r5, r2, r5
   350c4:	e5875000 	str	r5, [r7]
   350c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   350cc:	eb000d0a 	bl	384fc <EnterCritical>
   350d0:	e5943010 	ldr	r3, [r4, #16]
   350d4:	e594800c 	ldr	r8, [r4, #12]
   350d8:	e3530000 	cmp	r3, #0
   350dc:	e5945004 	ldr	r5, [r4, #4]
   350e0:	0affffe9 	beq	3508c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   350e4:	eb000d2f 	bl	385a8 <LeaveCritical>
   350e8:	e3560000 	cmp	r6, #0
   350ec:	1affffe8 	bne	35094 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   350f0:	e3031280 	movw	r1, #12928	; 0x3280
   350f4:	e3401004 	movt	r1, #4
   350f8:	e30302b4 	movw	r0, #12980	; 0x32b4
   350fc:	e3400004 	movt	r0, #4
   35100:	e300210a 	movw	r2, #266	; 0x10a
   35104:	ebffdded 	bl	2c8c0 <assertion_failed>
   35108:	e3031280 	movw	r1, #12928	; 0x3280
   3510c:	e3401004 	movt	r1, #4
   35110:	e30302c4 	movw	r0, #12996	; 0x32c4
   35114:	e3400004 	movt	r0, #4
   35118:	e300210d 	movw	r2, #269	; 0x10d
   3511c:	ebffdde7 	bl	2c8c0 <assertion_failed>

00035120 <CTimer::GetUniversalTime() const>:
   35120:	e5903014 	ldr	r3, [r0, #20]
   35124:	e3a0203c 	mov	r2, #60	; 0x3c
   35128:	e590000c 	ldr	r0, [r0, #12]
   3512c:	e0030392 	mul	r3, r2, r3
   35130:	e1500003 	cmp	r0, r3
   35134:	a0400003 	subge	r0, r0, r3
   35138:	b3a00000 	movlt	r0, #0
   3513c:	e12fff1e 	bx	lr

00035140 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   35140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   35144:	e1a04000 	mov	r4, r0
   35148:	e5900010 	ldr	r0, [r0, #16]
   3514c:	e1a05001 	mov	r5, r1
   35150:	e1a06002 	mov	r6, r2
   35154:	e3500000 	cmp	r0, #0
   35158:	1a000019 	bne	351c4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   3515c:	e594700c 	ldr	r7, [r4, #12]
   35160:	e5948004 	ldr	r8, [r4, #4]
   35164:	e5943014 	ldr	r3, [r4, #20]
   35168:	e3a0203c 	mov	r2, #60	; 0x3c
   3516c:	e0030392 	mul	r3, r2, r3
   35170:	e1570003 	cmp	r7, r3
   35174:	ba000010 	blt	351bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   35178:	e3550000 	cmp	r5, #0
   3517c:	0a000018 	beq	351e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   35180:	e0477003 	sub	r7, r7, r3
   35184:	e3560000 	cmp	r6, #0
   35188:	e5857000 	str	r7, [r5]
   3518c:	0a00001a 	beq	351fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   35190:	e308351f 	movw	r3, #34079	; 0x851f
   35194:	e34531eb 	movt	r3, #20971	; 0x51eb
   35198:	e3a01064 	mov	r1, #100	; 0x64
   3519c:	e3022710 	movw	r2, #10000	; 0x2710
   351a0:	e0830893 	umull	r0, r3, r3, r8
   351a4:	e3a00001 	mov	r0, #1
   351a8:	e1a032a3 	lsr	r3, r3, #5
   351ac:	e0638391 	mls	r3, r1, r3, r8
   351b0:	e0030392 	mul	r3, r2, r3
   351b4:	e5863000 	str	r3, [r6]
   351b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   351bc:	e3a00000 	mov	r0, #0
   351c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   351c4:	eb000ccc 	bl	384fc <EnterCritical>
   351c8:	e5943010 	ldr	r3, [r4, #16]
   351cc:	e594700c 	ldr	r7, [r4, #12]
   351d0:	e3530000 	cmp	r3, #0
   351d4:	e5948004 	ldr	r8, [r4, #4]
   351d8:	0affffe1 	beq	35164 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   351dc:	eb000cf1 	bl	385a8 <LeaveCritical>
   351e0:	eaffffdf 	b	35164 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   351e4:	e3031280 	movw	r1, #12928	; 0x3280
   351e8:	e3401004 	movt	r1, #4
   351ec:	e30302b4 	movw	r0, #12980	; 0x32b4
   351f0:	e3400004 	movt	r0, #4
   351f4:	e300212f 	movw	r2, #303	; 0x12f
   351f8:	ebffddb0 	bl	2c8c0 <assertion_failed>
   351fc:	e3031280 	movw	r1, #12928	; 0x3280
   35200:	e3401004 	movt	r1, #4
   35204:	e30302c4 	movw	r0, #12996	; 0x32c4
   35208:	e3400004 	movt	r0, #4
   3520c:	e3002132 	movw	r2, #306	; 0x132
   35210:	ebffddaa 	bl	2c8c0 <assertion_failed>

00035214 <CTimer::GetTimeString()>:
   35214:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35218:	e1a04000 	mov	r4, r0
   3521c:	e5900010 	ldr	r0, [r0, #16]
   35220:	e24dd014 	sub	sp, sp, #20
   35224:	e3500000 	cmp	r0, #0
   35228:	1a000067 	bne	353cc <CTimer::GetTimeString()+0x1b8>
   3522c:	e594500c 	ldr	r5, [r4, #12]
   35230:	e594a004 	ldr	sl, [r4, #4]
   35234:	e19a3005 	orrs	r3, sl, r5
   35238:	01a0a003 	moveq	sl, r3
   3523c:	0a000054 	beq	35394 <CTimer::GetTimeString()+0x180>
   35240:	e3087889 	movw	r7, #34953	; 0x8889
   35244:	e3487888 	movt	r7, #34952	; 0x8888
   35248:	e30a4aab 	movw	r4, #43691	; 0xaaab
   3524c:	e34a4aaa 	movt	r4, #43690	; 0xaaaa
   35250:	e3050c29 	movw	r0, #23593	; 0x5c29
   35254:	e34c028f 	movt	r0, #49807	; 0xc28f
   35258:	e0832597 	umull	r2, r3, r7, r5
   3525c:	e30de70a 	movw	lr, #55050	; 0xd70a
   35260:	e340e0a3 	movt	lr, #163	; 0xa3
   35264:	e30067b2 	movw	r6, #1970	; 0x7b2
   35268:	e300c16d 	movw	ip, #365	; 0x16d
   3526c:	e1a082a3 	lsr	r8, r3, #5
   35270:	e1a03008 	mov	r3, r8
   35274:	e0872897 	umull	r2, r7, r7, r8
   35278:	e3a0203c 	mov	r2, #60	; 0x3c
   3527c:	e1a092a7 	lsr	r9, r7, #5
   35280:	e0685892 	mls	r8, r2, r8, r5
   35284:	e0673992 	mls	r7, r2, r9, r3
   35288:	e3052c28 	movw	r2, #23592	; 0x5c28
   3528c:	e340228f 	movt	r2, #655	; 0x28f
   35290:	e0843994 	umull	r3, r4, r4, r9
   35294:	e1a04224 	lsr	r4, r4, #4
   35298:	ea000007 	b	352bc <CTimer::GetTimeString()+0xa8>
   3529c:	e3160003 	tst	r6, #3
   352a0:	03a03001 	moveq	r3, #1
   352a4:	13a03000 	movne	r3, #0
   352a8:	e083100c 	add	r1, r3, ip
   352ac:	e1540001 	cmp	r4, r1
   352b0:	3a00000a 	bcc	352e0 <CTimer::GetTimeString()+0xcc>
   352b4:	e0444001 	sub	r4, r4, r1
   352b8:	e2866001 	add	r6, r6, #1
   352bc:	e0030690 	mul	r3, r0, r6
   352c0:	e1520163 	cmp	r2, r3, ror #2
   352c4:	3afffff4 	bcc	3529c <CTimer::GetTimeString()+0x88>
   352c8:	e15e0263 	cmp	lr, r3, ror #4
   352cc:	23a03001 	movcs	r3, #1
   352d0:	33a03000 	movcc	r3, #0
   352d4:	e083100c 	add	r1, r3, ip
   352d8:	e1540001 	cmp	r4, r1
   352dc:	2afffff4 	bcs	352b4 <CTimer::GetTimeString()+0xa0>
   352e0:	e3030430 	movw	r0, #13360	; 0x3430
   352e4:	e3400004 	movt	r0, #4
   352e8:	e3a05000 	mov	r5, #0
   352ec:	ea000001 	b	352f8 <CTimer::GetTimeString()+0xe4>
   352f0:	e0444001 	sub	r4, r4, r1
   352f4:	e2855001 	add	r5, r5, #1
   352f8:	e3550001 	cmp	r5, #1
   352fc:	13a02000 	movne	r2, #0
   35300:	02032001 	andeq	r2, r3, #1
   35304:	e3520000 	cmp	r2, #0
   35308:	13a0101d 	movne	r1, #29
   3530c:	07901105 	ldreq	r1, [r0, r5, lsl #2]
   35310:	e1540001 	cmp	r4, r1
   35314:	2afffff5 	bcs	352f0 <CTimer::GetTimeString()+0xdc>
   35318:	e308b51f 	movw	fp, #34079	; 0x851f
   3531c:	e345b1eb 	movt	fp, #20971	; 0x51eb
   35320:	e3a00010 	mov	r0, #16
   35324:	e08b3a9b 	umull	r3, fp, fp, sl
   35328:	e3a03064 	mov	r3, #100	; 0x64
   3532c:	e1a0b2ab 	lsr	fp, fp, #5
   35330:	e06bab93 	mls	fp, r3, fp, sl
   35334:	eb000658 	bl	36c9c <operator new(unsigned int)>
   35338:	e1a0a000 	mov	sl, r0
   3533c:	ebfff886 	bl	3355c <CString::CString()>
   35340:	e30037b7 	movw	r3, #1975	; 0x7b7
   35344:	e1560003 	cmp	r6, r3
   35348:	9a000014 	bls	353a0 <CTimer::GetTimeString()+0x18c>
   3534c:	e30a2aab 	movw	r2, #43691	; 0xaaab
   35350:	e34a2aaa 	movt	r2, #43690	; 0xaaaa
   35354:	e58db00c 	str	fp, [sp, #12]
   35358:	e2843001 	add	r3, r4, #1
   3535c:	e58d8008 	str	r8, [sp, #8]
   35360:	e1a0000a 	mov	r0, sl
   35364:	e0821992 	umull	r1, r2, r2, r9
   35368:	e3a01018 	mov	r1, #24
   3536c:	e58d7004 	str	r7, [sp, #4]
   35370:	e1a02222 	lsr	r2, r2, #4
   35374:	e0629291 	mls	r2, r1, r2, r9
   35378:	e30312d8 	movw	r1, #13016	; 0x32d8
   3537c:	e3401004 	movt	r1, #4
   35380:	e58d2000 	str	r2, [sp]
   35384:	e3042db8 	movw	r2, #19896	; 0x4db8
   35388:	e3402004 	movt	r2, #4
   3538c:	e7922105 	ldr	r2, [r2, r5, lsl #2]
   35390:	ebfffe3c 	bl	34c88 <CString::Format(char const*, ...)>
   35394:	e1a0000a 	mov	r0, sl
   35398:	e28dd014 	add	sp, sp, #20
   3539c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   353a0:	e1a0000a 	mov	r0, sl
   353a4:	e1a03007 	mov	r3, r7
   353a8:	e1a02009 	mov	r2, r9
   353ac:	e58db004 	str	fp, [sp, #4]
   353b0:	e58d8000 	str	r8, [sp]
   353b4:	e30312f4 	movw	r1, #13044	; 0x32f4
   353b8:	e3401004 	movt	r1, #4
   353bc:	ebfffe31 	bl	34c88 <CString::Format(char const*, ...)>
   353c0:	e1a0000a 	mov	r0, sl
   353c4:	e28dd014 	add	sp, sp, #20
   353c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   353cc:	eb000c4a 	bl	384fc <EnterCritical>
   353d0:	e5943010 	ldr	r3, [r4, #16]
   353d4:	e594500c 	ldr	r5, [r4, #12]
   353d8:	e3530000 	cmp	r3, #0
   353dc:	e594a004 	ldr	sl, [r4, #4]
   353e0:	0affff93 	beq	35234 <CTimer::GetTimeString()+0x20>
   353e4:	eb000c6f 	bl	385a8 <LeaveCritical>
   353e8:	eaffff91 	b	35234 <CTimer::GetTimeString()+0x20>

000353ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   353ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   353f0:	e1a08000 	mov	r8, r0
   353f4:	e3a00014 	mov	r0, #20
   353f8:	e1a05001 	mov	r5, r1
   353fc:	e1a04002 	mov	r4, r2
   35400:	e1a09003 	mov	r9, r3
   35404:	eb000624 	bl	36c9c <operator new(unsigned int)>
   35408:	e5987004 	ldr	r7, [r8, #4]
   3540c:	e3540000 	cmp	r4, #0
   35410:	e0877005 	add	r7, r7, r5
   35414:	0a00003c 	beq	3550c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   35418:	e1a06000 	mov	r6, r0
   3541c:	e5804004 	str	r4, [r0, #4]
   35420:	e598001c 	ldr	r0, [r8, #28]
   35424:	e59d3020 	ldr	r3, [sp, #32]
   35428:	e5863010 	str	r3, [r6, #16]
   3542c:	e3500000 	cmp	r0, #0
   35430:	e3043d43 	movw	r3, #19779	; 0x4d43
   35434:	e3443b54 	movt	r3, #19284	; 0x4b54
   35438:	e5867008 	str	r7, [r6, #8]
   3543c:	e586900c 	str	r9, [r6, #12]
   35440:	e5863000 	str	r3, [r6]
   35444:	1a000025 	bne	354e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   35448:	e2885018 	add	r5, r8, #24
   3544c:	e1a00005 	mov	r0, r5
   35450:	ebffec71 	bl	3061c <CPtrList::GetFirst()>
   35454:	e2504000 	subs	r4, r0, #0
   35458:	0a000033 	beq	3552c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   3545c:	e3049d43 	movw	r9, #19779	; 0x4d43
   35460:	e3449b54 	movt	r9, #19284	; 0x4b54
   35464:	e1a01004 	mov	r1, r4
   35468:	e1a00005 	mov	r0, r5
   3546c:	ebffec82 	bl	3067c <CPtrList::GetPtr(TPtrListElement*)>
   35470:	e3500000 	cmp	r0, #0
   35474:	0a00000d 	beq	354b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   35478:	e5903000 	ldr	r3, [r0]
   3547c:	e1530009 	cmp	r3, r9
   35480:	1a000010 	bne	354c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   35484:	e5903008 	ldr	r3, [r0, #8]
   35488:	e0433007 	sub	r3, r3, r7
   3548c:	e3530000 	cmp	r3, #0
   35490:	ca000014 	bgt	354e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   35494:	e1a01004 	mov	r1, r4
   35498:	e1a00005 	mov	r0, r5
   3549c:	ebffec60 	bl	30624 <CPtrList::GetNext(TPtrListElement*)>
   354a0:	e3500000 	cmp	r0, #0
   354a4:	0a000020 	beq	3552c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   354a8:	e1a04000 	mov	r4, r0
   354ac:	eaffffec 	b	35464 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
   354b0:	e3031280 	movw	r1, #12928	; 0x3280
   354b4:	e3401004 	movt	r1, #4
   354b8:	e3030308 	movw	r0, #13064	; 0x3308
   354bc:	e3400004 	movt	r0, #4
   354c0:	e3002199 	movw	r2, #409	; 0x199
   354c4:	ebffdcfd 	bl	2c8c0 <assertion_failed>
   354c8:	e3031280 	movw	r1, #12928	; 0x3280
   354cc:	e3401004 	movt	r1, #4
   354d0:	e3030318 	movw	r0, #13080	; 0x3318
   354d4:	e3400004 	movt	r0, #4
   354d8:	e300219a 	movw	r2, #410	; 0x19a
   354dc:	ebffdcf7 	bl	2c8c0 <assertion_failed>
   354e0:	eb000c05 	bl	384fc <EnterCritical>
   354e4:	eaffffd7 	b	35448 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   354e8:	e1a02006 	mov	r2, r6
   354ec:	e1a01004 	mov	r1, r4
   354f0:	e1a00005 	mov	r0, r5
   354f4:	ebffec76 	bl	306d4 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   354f8:	e598301c 	ldr	r3, [r8, #28]
   354fc:	e3530000 	cmp	r3, #0
   35500:	1a000007 	bne	35524 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   35504:	e1a00006 	mov	r0, r6
   35508:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3550c:	e3031280 	movw	r1, #12928	; 0x3280
   35510:	e3401004 	movt	r1, #4
   35514:	e303097c 	movw	r0, #14716	; 0x397c
   35518:	e3400004 	movt	r0, #4
   3551c:	e3002189 	movw	r2, #393	; 0x189
   35520:	ebffdce6 	bl	2c8c0 <assertion_failed>
   35524:	eb000c1f 	bl	385a8 <LeaveCritical>
   35528:	eafffff5 	b	35504 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   3552c:	e1a02006 	mov	r2, r6
   35530:	e1a01004 	mov	r1, r4
   35534:	e1a00005 	mov	r0, r5
   35538:	ebffeca1 	bl	307c4 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   3553c:	eaffffed 	b	354f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>

00035540 <CTimer::CancelKernelTimer(unsigned int)>:
   35540:	e92d4070 	push	{r4, r5, r6, lr}
   35544:	e2514000 	subs	r4, r1, #0
   35548:	0a00001a 	beq	355b8 <CTimer::CancelKernelTimer(unsigned int)+0x78>
   3554c:	e1a05000 	mov	r5, r0
   35550:	e590001c 	ldr	r0, [r0, #28]
   35554:	e3500000 	cmp	r0, #0
   35558:	1a000014 	bne	355b0 <CTimer::CancelKernelTimer(unsigned int)+0x70>
   3555c:	e2856018 	add	r6, r5, #24
   35560:	e1a01004 	mov	r1, r4
   35564:	e1a00006 	mov	r0, r6
   35568:	ebffed1b 	bl	309dc <CPtrList::Find(void*)>
   3556c:	e2501000 	subs	r1, r0, #0
   35570:	0a000009 	beq	3559c <CTimer::CancelKernelTimer(unsigned int)+0x5c>
   35574:	e5942000 	ldr	r2, [r4]
   35578:	e3043d43 	movw	r3, #19779	; 0x4d43
   3557c:	e3443b54 	movt	r3, #19284	; 0x4b54
   35580:	e1520003 	cmp	r2, r3
   35584:	1a000011 	bne	355d0 <CTimer::CancelKernelTimer(unsigned int)+0x90>
   35588:	e1a00006 	mov	r0, r6
   3558c:	ebffecc8 	bl	308b4 <CPtrList::Remove(TPtrListElement*)>
   35590:	e3a01014 	mov	r1, #20
   35594:	e1a00004 	mov	r0, r4
   35598:	eb0005d7 	bl	36cfc <operator delete(void*, unsigned int)>
   3559c:	e595301c 	ldr	r3, [r5, #28]
   355a0:	e3530000 	cmp	r3, #0
   355a4:	08bd8070 	popeq	{r4, r5, r6, pc}
   355a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   355ac:	ea000bfd 	b	385a8 <LeaveCritical>
   355b0:	eb000bd1 	bl	384fc <EnterCritical>
   355b4:	eaffffe8 	b	3555c <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   355b8:	e3031280 	movw	r1, #12928	; 0x3280
   355bc:	e3401004 	movt	r1, #4
   355c0:	e30d0c10 	movw	r0, #56336	; 0xdc10
   355c4:	e3400003 	movt	r0, #3
   355c8:	e30021b6 	movw	r2, #438	; 0x1b6
   355cc:	ebffdcbb 	bl	2c8c0 <assertion_failed>
   355d0:	e3031280 	movw	r1, #12928	; 0x3280
   355d4:	e3401004 	movt	r1, #4
   355d8:	e303028c 	movw	r0, #12940	; 0x328c
   355dc:	e3400004 	movt	r0, #4
   355e0:	e30021bd 	movw	r2, #445	; 0x1bd
   355e4:	ebffdcb5 	bl	2c8c0 <assertion_failed>

000355e8 <CTimer::PollKernelTimers()>:
   355e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   355ec:	e1a06000 	mov	r6, r0
   355f0:	e590001c 	ldr	r0, [r0, #28]
   355f4:	e3500000 	cmp	r0, #0
   355f8:	1a00003e 	bne	356f8 <CTimer::PollKernelTimers()+0x110>
   355fc:	e2867018 	add	r7, r6, #24
   35600:	e1a00007 	mov	r0, r7
   35604:	ebffec04 	bl	3061c <CPtrList::GetFirst()>
   35608:	e2505000 	subs	r5, r0, #0
   3560c:	0a000028 	beq	356b4 <CTimer::PollKernelTimers()+0xcc>
   35610:	e3048d43 	movw	r8, #19779	; 0x4d43
   35614:	e3448b54 	movt	r8, #19284	; 0x4b54
   35618:	e1a01005 	mov	r1, r5
   3561c:	e1a00007 	mov	r0, r7
   35620:	ebffec15 	bl	3067c <CPtrList::GetPtr(TPtrListElement*)>
   35624:	e2504000 	subs	r4, r0, #0
   35628:	0a000034 	beq	35700 <CTimer::PollKernelTimers()+0x118>
   3562c:	e5943000 	ldr	r3, [r4]
   35630:	e1530008 	cmp	r3, r8
   35634:	1a000037 	bne	35718 <CTimer::PollKernelTimers()+0x130>
   35638:	e5962004 	ldr	r2, [r6, #4]
   3563c:	e5943008 	ldr	r3, [r4, #8]
   35640:	e0433002 	sub	r3, r3, r2
   35644:	e3530000 	cmp	r3, #0
   35648:	ca000019 	bgt	356b4 <CTimer::PollKernelTimers()+0xcc>
   3564c:	e1a01005 	mov	r1, r5
   35650:	e1a00007 	mov	r0, r7
   35654:	ebffebf2 	bl	30624 <CPtrList::GetNext(TPtrListElement*)>
   35658:	e1a01005 	mov	r1, r5
   3565c:	e1a03000 	mov	r3, r0
   35660:	e1a00007 	mov	r0, r7
   35664:	e1a05003 	mov	r5, r3
   35668:	ebffec91 	bl	308b4 <CPtrList::Remove(TPtrListElement*)>
   3566c:	e596301c 	ldr	r3, [r6, #28]
   35670:	e3530000 	cmp	r3, #0
   35674:	1a000013 	bne	356c8 <CTimer::PollKernelTimers()+0xe0>
   35678:	e5943004 	ldr	r3, [r4, #4]
   3567c:	e3530000 	cmp	r3, #0
   35680:	0a000014 	beq	356d8 <CTimer::PollKernelTimers()+0xf0>
   35684:	e5942010 	ldr	r2, [r4, #16]
   35688:	e1a00004 	mov	r0, r4
   3568c:	e594100c 	ldr	r1, [r4, #12]
   35690:	e12fff33 	blx	r3
   35694:	e1a00004 	mov	r0, r4
   35698:	e3a01014 	mov	r1, #20
   3569c:	eb000596 	bl	36cfc <operator delete(void*, unsigned int)>
   356a0:	e596001c 	ldr	r0, [r6, #28]
   356a4:	e3500000 	cmp	r0, #0
   356a8:	1a000010 	bne	356f0 <CTimer::PollKernelTimers()+0x108>
   356ac:	e3550000 	cmp	r5, #0
   356b0:	1affffd8 	bne	35618 <CTimer::PollKernelTimers()+0x30>
   356b4:	e596301c 	ldr	r3, [r6, #28]
   356b8:	e3530000 	cmp	r3, #0
   356bc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   356c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   356c4:	ea000bb7 	b	385a8 <LeaveCritical>
   356c8:	eb000bb6 	bl	385a8 <LeaveCritical>
   356cc:	e5943004 	ldr	r3, [r4, #4]
   356d0:	e3530000 	cmp	r3, #0
   356d4:	1affffea 	bne	35684 <CTimer::PollKernelTimers()+0x9c>
   356d8:	e3031280 	movw	r1, #12928	; 0x3280
   356dc:	e3401004 	movt	r1, #4
   356e0:	e303097c 	movw	r0, #14716	; 0x397c
   356e4:	e3400004 	movt	r0, #4
   356e8:	e30021e1 	movw	r2, #481	; 0x1e1
   356ec:	ebffdc73 	bl	2c8c0 <assertion_failed>
   356f0:	eb000b81 	bl	384fc <EnterCritical>
   356f4:	eaffffec 	b	356ac <CTimer::PollKernelTimers()+0xc4>
   356f8:	eb000b7f 	bl	384fc <EnterCritical>
   356fc:	eaffffbe 	b	355fc <CTimer::PollKernelTimers()+0x14>
   35700:	e3031280 	movw	r1, #12928	; 0x3280
   35704:	e3401004 	movt	r1, #4
   35708:	e30d0c10 	movw	r0, #56336	; 0xdc10
   3570c:	e3400003 	movt	r0, #3
   35710:	e30021d2 	movw	r2, #466	; 0x1d2
   35714:	ebffdc69 	bl	2c8c0 <assertion_failed>
   35718:	e3031280 	movw	r1, #12928	; 0x3280
   3571c:	e3401004 	movt	r1, #4
   35720:	e303028c 	movw	r0, #12940	; 0x328c
   35724:	e3400004 	movt	r0, #4
   35728:	e30021d3 	movw	r2, #467	; 0x1d3
   3572c:	ebffdc63 	bl	2c8c0 <assertion_failed>

00035730 <CTimer::InterruptHandler()>:
   35730:	e92d4070 	push	{r4, r5, r6, lr}
   35734:	e1a04000 	mov	r4, r0
   35738:	ec5e3f2e 	mrrc	15, 2, r3, lr, cr14
   3573c:	e3a0c000 	mov	ip, #0
   35740:	e3022710 	movw	r2, #10000	; 0x2710
   35744:	e0933002 	adds	r3, r3, r2
   35748:	e1a0100c 	mov	r1, ip
   3574c:	e1a00003 	mov	r0, r3
   35750:	e2ae2000 	adc	r2, lr, #0
   35754:	e1a0300c 	mov	r3, ip
   35758:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
   3575c:	e5940010 	ldr	r0, [r4, #16]
   35760:	e150000c 	cmp	r0, ip
   35764:	1a00001e 	bne	357e4 <CTimer::InterruptHandler()+0xb4>
   35768:	e5943004 	ldr	r3, [r4, #4]
   3576c:	e3051c29 	movw	r1, #23593	; 0x5c29
   35770:	e34c128f 	movt	r1, #49807	; 0xc28f
   35774:	e3052c28 	movw	r2, #23592	; 0x5c28
   35778:	e340228f 	movt	r2, #655	; 0x28f
   3577c:	e2833001 	add	r3, r3, #1
   35780:	e5843004 	str	r3, [r4, #4]
   35784:	e0030391 	mul	r3, r1, r3
   35788:	e1520163 	cmp	r2, r3, ror #2
   3578c:	2a00000d 	bcs	357c8 <CTimer::InterruptHandler()+0x98>
   35790:	e1a00004 	mov	r0, r4
   35794:	ebffff93 	bl	355e8 <CTimer::PollKernelTimers()>
   35798:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   3579c:	e3530000 	cmp	r3, #0
   357a0:	08bd8070 	popeq	{r4, r5, r6, pc}
   357a4:	e2846028 	add	r6, r4, #40	; 0x28
   357a8:	e3a05000 	mov	r5, #0
   357ac:	e5b63004 	ldr	r3, [r6, #4]!
   357b0:	e2855001 	add	r5, r5, #1
   357b4:	e12fff33 	blx	r3
   357b8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   357bc:	e1530005 	cmp	r3, r5
   357c0:	8afffff9 	bhi	357ac <CTimer::InterruptHandler()+0x7c>
   357c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   357c8:	e5943008 	ldr	r3, [r4, #8]
   357cc:	e2833001 	add	r3, r3, #1
   357d0:	e5843008 	str	r3, [r4, #8]
   357d4:	e594300c 	ldr	r3, [r4, #12]
   357d8:	e2833001 	add	r3, r3, #1
   357dc:	e584300c 	str	r3, [r4, #12]
   357e0:	eaffffea 	b	35790 <CTimer::InterruptHandler()+0x60>
   357e4:	eb000b44 	bl	384fc <EnterCritical>
   357e8:	e5943004 	ldr	r3, [r4, #4]
   357ec:	e3051c29 	movw	r1, #23593	; 0x5c29
   357f0:	e34c128f 	movt	r1, #49807	; 0xc28f
   357f4:	e2833001 	add	r3, r3, #1
   357f8:	e5843004 	str	r3, [r4, #4]
   357fc:	e3052c28 	movw	r2, #23592	; 0x5c28
   35800:	e340228f 	movt	r2, #655	; 0x28f
   35804:	e5940010 	ldr	r0, [r4, #16]
   35808:	e0030391 	mul	r3, r1, r3
   3580c:	e1520163 	cmp	r2, r3, ror #2
   35810:	2a000003 	bcs	35824 <CTimer::InterruptHandler()+0xf4>
   35814:	e3500000 	cmp	r0, #0
   35818:	0affffdc 	beq	35790 <CTimer::InterruptHandler()+0x60>
   3581c:	eb000b61 	bl	385a8 <LeaveCritical>
   35820:	eaffffda 	b	35790 <CTimer::InterruptHandler()+0x60>
   35824:	e5943008 	ldr	r3, [r4, #8]
   35828:	e2833001 	add	r3, r3, #1
   3582c:	e5843008 	str	r3, [r4, #8]
   35830:	e594300c 	ldr	r3, [r4, #12]
   35834:	e2833001 	add	r3, r3, #1
   35838:	e584300c 	str	r3, [r4, #12]
   3583c:	eafffff4 	b	35814 <CTimer::InterruptHandler()+0xe4>

00035840 <CTimer::InterruptHandler(void*)>:
   35840:	e3500000 	cmp	r0, #0
   35844:	0a000000 	beq	3584c <CTimer::InterruptHandler(void*)+0xc>
   35848:	eaffffb8 	b	35730 <CTimer::InterruptHandler()>
   3584c:	e3031280 	movw	r1, #12928	; 0x3280
   35850:	e3401004 	movt	r1, #4
   35854:	e30a0a18 	movw	r0, #43544	; 0xaa18
   35858:	e3400003 	movt	r0, #3
   3585c:	e3a02f8a 	mov	r2, #552	; 0x228
   35860:	e92d4010 	push	{r4, lr}
   35864:	ebffdc15 	bl	2c8c0 <assertion_failed>

00035868 <CTimer::TuneMsDelay()>:
   35868:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3586c:	e1a06000 	mov	r6, r0
   35870:	e5900020 	ldr	r0, [r0, #32]
   35874:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   35878:	e24dd00c 	sub	sp, sp, #12
   3587c:	e5967004 	ldr	r7, [r6, #4]
   35880:	e3025710 	movw	r5, #10000	; 0x2710
   35884:	e308451f 	movw	r4, #34079	; 0x851f
   35888:	e34541eb 	movt	r4, #20971	; 0x51eb
   3588c:	e0000092 	mul	r0, r2, r0
   35890:	eb000f52 	bl	395e0 <DelayLoop>
   35894:	e5963004 	ldr	r3, [r6, #4]
   35898:	e0433007 	sub	r3, r3, r7
   3589c:	e735f315 	udiv	r5, r5, r3
   358a0:	e5963020 	ldr	r3, [r6, #32]
   358a4:	e0030593 	mul	r3, r3, r5
   358a8:	e0832394 	umull	r2, r3, r4, r3
   358ac:	e3042dd3 	movw	r2, #19923	; 0x4dd3
   358b0:	e3412062 	movt	r2, #4194	; 0x1062
   358b4:	e1a032a3 	lsr	r3, r3, #5
   358b8:	e5863020 	str	r3, [r6, #32]
   358bc:	e2833f7d 	add	r3, r3, #500	; 0x1f4
   358c0:	e0832392 	umull	r2, r3, r2, r3
   358c4:	e1a03323 	lsr	r3, r3, #6
   358c8:	e5863024 	str	r3, [r6, #36]	; 0x24
   358cc:	e0843594 	umull	r3, r4, r4, r5
   358d0:	ebffe677 	bl	2f2b4 <CLogger::Get()>
   358d4:	e3a02064 	mov	r2, #100	; 0x64
   358d8:	e59f1024 	ldr	r1, [pc, #36]	; 35904 <CTimer::TuneMsDelay()+0x9c>
   358dc:	e3033340 	movw	r3, #13120	; 0x3340
   358e0:	e3403004 	movt	r3, #4
   358e4:	e1a042a4 	lsr	r4, r4, #5
   358e8:	e58d4000 	str	r4, [sp]
   358ec:	e0655492 	mls	r5, r2, r4, r5
   358f0:	e3a02003 	mov	r2, #3
   358f4:	e58d5004 	str	r5, [sp, #4]
   358f8:	ebffe83b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   358fc:	e28dd00c 	add	sp, sp, #12
   35900:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35904:	00043460 	.word	0x00043460

00035908 <CTimer::Initialize()>:
   35908:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3590c:	e1a04000 	mov	r4, r0
   35910:	e5900000 	ldr	r0, [r0]
   35914:	e24dd00c 	sub	sp, sp, #12
   35918:	e3500000 	cmp	r0, #0
   3591c:	0a000028 	beq	359c4 <CTimer::Initialize()+0xbc>
   35920:	e1a03004 	mov	r3, r4
   35924:	e3a01049 	mov	r1, #73	; 0x49
   35928:	e3052840 	movw	r2, #22592	; 0x5840
   3592c:	e3402003 	movt	r2, #3
   35930:	eb000b7b 	bl	38724 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   35934:	ec5c3f0e 	mrrc	15, 0, r3, ip, cr14
   35938:	e3a05000 	mov	r5, #0
   3593c:	e3022710 	movw	r2, #10000	; 0x2710
   35940:	e0933002 	adds	r3, r3, r2
   35944:	e1a01005 	mov	r1, r5
   35948:	e1a00003 	mov	r0, r3
   3594c:	e2ac6000 	adc	r6, ip, #0
   35950:	e1a07005 	mov	r7, r5
   35954:	ec460f2e 	mcrr	15, 2, r0, r6, cr14
   35958:	e3a03001 	mov	r3, #1
   3595c:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   35960:	e1a00004 	mov	r0, r4
   35964:	ebffffbf 	bl	35868 <CTimer::TuneMsDelay()>
   35968:	ee1e4f10 	mrc	15, 0, r4, cr14, cr0, {0}
   3596c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   35970:	e3a02b3e 	mov	r2, #63488	; 0xf800
   35974:	e3402124 	movt	r2, #292	; 0x124
   35978:	e30a3aab 	movw	r3, #43691	; 0xaaab
   3597c:	e34036aa 	movt	r3, #1706	; 0x6aa
   35980:	e5916008 	ldr	r6, [r1, #8]
   35984:	e1560003 	cmp	r6, r3
   35988:	01540002 	cmpeq	r4, r2
   3598c:	1a000002 	bne	3599c <CTimer::Initialize()+0x94>
   35990:	e3a00001 	mov	r0, #1
   35994:	e28dd00c 	add	sp, sp, #12
   35998:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3599c:	ebffe644 	bl	2f2b4 <CLogger::Get()>
   359a0:	e59f1034 	ldr	r1, [pc, #52]	; 359dc <CTimer::Initialize()+0xd4>
   359a4:	e1a02005 	mov	r2, r5
   359a8:	e88d0050 	stm	sp, {r4, r6}
   359ac:	e3033358 	movw	r3, #13144	; 0x3358
   359b0:	e3403004 	movt	r3, #4
   359b4:	ebffe80c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   359b8:	e3a00001 	mov	r0, #1
   359bc:	e28dd00c 	add	sp, sp, #12
   359c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   359c4:	e3031280 	movw	r1, #12928	; 0x3280
   359c8:	e3401004 	movt	r1, #4
   359cc:	e30a0a44 	movw	r0, #43588	; 0xaa44
   359d0:	e3400003 	movt	r0, #3
   359d4:	e3a02064 	mov	r2, #100	; 0x64
   359d8:	ebffdbb8 	bl	2c8c0 <assertion_failed>
   359dc:	00043460 	.word	0x00043460

000359e0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   359e0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   359e4:	e92d4010 	push	{r4, lr}
   359e8:	e3530000 	cmp	r3, #0
   359ec:	1a000008 	bne	35a14 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
   359f0:	e3510000 	cmp	r1, #0
   359f4:	e5801028 	str	r1, [r0, #40]	; 0x28
   359f8:	18bd8010 	popne	{r4, pc}
   359fc:	e3031280 	movw	r1, #12928	; 0x3280
   35a00:	e3401004 	movt	r1, #4
   35a04:	e30303b0 	movw	r0, #13232	; 0x33b0
   35a08:	e3400004 	movt	r0, #4
   35a0c:	e3a02d09 	mov	r2, #576	; 0x240
   35a10:	ebffdbaa 	bl	2c8c0 <assertion_failed>
   35a14:	e3031280 	movw	r1, #12928	; 0x3280
   35a18:	e3401004 	movt	r1, #4
   35a1c:	e3030394 	movw	r0, #13204	; 0x3394
   35a20:	e3400004 	movt	r0, #4
   35a24:	e300223e 	movw	r2, #574	; 0x23e
   35a28:	ebffdba4 	bl	2c8c0 <assertion_failed>

00035a2c <CTimer::RegisterPeriodicHandler(void (*)())>:
   35a2c:	e3510000 	cmp	r1, #0
   35a30:	e92d4010 	push	{r4, lr}
   35a34:	0a00000a 	beq	35a64 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
   35a38:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   35a3c:	e3530003 	cmp	r3, #3
   35a40:	8a00000d 	bhi	35a7c <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   35a44:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   35a48:	e0803103 	add	r3, r0, r3, lsl #2
   35a4c:	e583102c 	str	r1, [r3, #44]	; 0x2c
   35a50:	f57ff04f 	dsb	sy
   35a54:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   35a58:	e2833001 	add	r3, r3, #1
   35a5c:	e580303c 	str	r3, [r0, #60]	; 0x3c
   35a60:	e8bd8010 	pop	{r4, pc}
   35a64:	e3031280 	movw	r1, #12928	; 0x3280
   35a68:	e3401004 	movt	r1, #4
   35a6c:	e303097c 	movw	r0, #14716	; 0x397c
   35a70:	e3400004 	movt	r0, #4
   35a74:	e3002245 	movw	r2, #581	; 0x245
   35a78:	ebffdb90 	bl	2c8c0 <assertion_failed>
   35a7c:	e3031280 	movw	r1, #12928	; 0x3280
   35a80:	e3401004 	movt	r1, #4
   35a84:	e30303cc 	movw	r0, #13260	; 0x33cc
   35a88:	e3400004 	movt	r0, #4
   35a8c:	e3002247 	movw	r2, #583	; 0x247
   35a90:	ebffdb8a 	bl	2c8c0 <assertion_failed>

00035a94 <CTimer::SimpleMsDelay(unsigned int)>:
   35a94:	e3500000 	cmp	r0, #0
   35a98:	012fff1e 	bxeq	lr
   35a9c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   35aa0:	e0000093 	mul	r0, r3, r0
   35aa4:	e3500000 	cmp	r0, #0
   35aa8:	012fff1e 	bxeq	lr
   35aac:	e2800001 	add	r0, r0, #1
   35ab0:	f57ff06f 	isb	sy
   35ab4:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   35ab8:	f57ff06f 	isb	sy
   35abc:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   35ac0:	e0433002 	sub	r3, r3, r2
   35ac4:	e1500003 	cmp	r0, r3
   35ac8:	8afffffa 	bhi	35ab8 <CTimer::SimpleMsDelay(unsigned int)+0x24>
   35acc:	e12fff1e 	bx	lr

00035ad0 <CTimer::SimpleusDelay(unsigned int)>:
   35ad0:	e3500000 	cmp	r0, #0
   35ad4:	012fff1e 	bxeq	lr
   35ad8:	e2800001 	add	r0, r0, #1
   35adc:	f57ff06f 	isb	sy
   35ae0:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   35ae4:	f57ff06f 	isb	sy
   35ae8:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   35aec:	e0433002 	sub	r3, r3, r2
   35af0:	e1500003 	cmp	r0, r3
   35af4:	8afffffa 	bhi	35ae4 <CTimer::SimpleusDelay(unsigned int)+0x14>
   35af8:	e12fff1e 	bx	lr

00035afc <CTimer::IsLeapYear(unsigned int)>:
   35afc:	e3053c29 	movw	r3, #23593	; 0x5c29
   35b00:	e34c328f 	movt	r3, #49807	; 0xc28f
   35b04:	e3052c28 	movw	r2, #23592	; 0x5c28
   35b08:	e340228f 	movt	r2, #655	; 0x28f
   35b0c:	e0030093 	mul	r3, r3, r0
   35b10:	e1520163 	cmp	r2, r3, ror #2
   35b14:	2a000003 	bcs	35b28 <CTimer::IsLeapYear(unsigned int)+0x2c>
   35b18:	e3100003 	tst	r0, #3
   35b1c:	03a00001 	moveq	r0, #1
   35b20:	13a00000 	movne	r0, #0
   35b24:	e12fff1e 	bx	lr
   35b28:	e30d270a 	movw	r2, #55050	; 0xd70a
   35b2c:	e34020a3 	movt	r2, #163	; 0xa3
   35b30:	e1520263 	cmp	r2, r3, ror #4
   35b34:	23a00001 	movcs	r0, #1
   35b38:	33a00000 	movcc	r0, #0
   35b3c:	e12fff1e 	bx	lr

00035b40 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   35b40:	e3500001 	cmp	r0, #1
   35b44:	0a000003 	beq	35b58 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   35b48:	e3033430 	movw	r3, #13360	; 0x3430
   35b4c:	e3403004 	movt	r3, #4
   35b50:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   35b54:	e12fff1e 	bx	lr
   35b58:	e3053c29 	movw	r3, #23593	; 0x5c29
   35b5c:	e34c328f 	movt	r3, #49807	; 0xc28f
   35b60:	e3052c28 	movw	r2, #23592	; 0x5c28
   35b64:	e340228f 	movt	r2, #655	; 0x28f
   35b68:	e0030193 	mul	r3, r3, r1
   35b6c:	e1520163 	cmp	r2, r3, ror #2
   35b70:	2a000003 	bcs	35b84 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   35b74:	e3110003 	tst	r1, #3
   35b78:	1afffff2 	bne	35b48 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   35b7c:	e3a0001d 	mov	r0, #29
   35b80:	e12fff1e 	bx	lr
   35b84:	e30d270a 	movw	r2, #55050	; 0xd70a
   35b88:	e34020a3 	movt	r2, #163	; 0xa3
   35b8c:	e1520263 	cmp	r2, r3, ror #4
   35b90:	3affffec 	bcc	35b48 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   35b94:	eafffff8 	b	35b7c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>

00035b98 <CTimer::Get()>:
   35b98:	e3043f7c 	movw	r3, #20348	; 0x4f7c
   35b9c:	e3403004 	movt	r3, #4
   35ba0:	e5930000 	ldr	r0, [r3]
   35ba4:	e3500000 	cmp	r0, #0
   35ba8:	112fff1e 	bxne	lr
   35bac:	e3031280 	movw	r1, #12928	; 0x3280
   35bb0:	e3401004 	movt	r1, #4
   35bb4:	e30c0730 	movw	r0, #50992	; 0xc730
   35bb8:	e3400003 	movt	r0, #3
   35bbc:	e3a02fa2 	mov	r2, #648	; 0x288
   35bc0:	e92d4010 	push	{r4, lr}
   35bc4:	ebffdb3d 	bl	2c8c0 <assertion_failed>

00035bc8 <memmove>:
   35bc8:	e1500001 	cmp	r0, r1
   35bcc:	9a000002 	bls	35bdc <memmove+0x14>
   35bd0:	e0813002 	add	r3, r1, r2
   35bd4:	e1530000 	cmp	r3, r0
   35bd8:	8a000000 	bhi	35be0 <memmove+0x18>
   35bdc:	ea000225 	b	36478 <memcpy>
   35be0:	e3520000 	cmp	r2, #0
   35be4:	e080c002 	add	ip, r0, r2
   35be8:	012fff1e 	bxeq	lr
   35bec:	e1a0200c 	mov	r2, ip
   35bf0:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   35bf4:	e562c001 	strb	ip, [r2, #-1]!
   35bf8:	e1510003 	cmp	r1, r3
   35bfc:	1afffffb 	bne	35bf0 <memmove+0x28>
   35c00:	e12fff1e 	bx	lr

00035c04 <memcmp>:
   35c04:	e242c001 	sub	ip, r2, #1
   35c08:	e3520000 	cmp	r2, #0
   35c0c:	0a00000c 	beq	35c44 <memcmp+0x40>
   35c10:	e2403001 	sub	r3, r0, #1
   35c14:	e2411001 	sub	r1, r1, #1
   35c18:	e080000c 	add	r0, r0, ip
   35c1c:	ea000002 	b	35c2c <memcmp+0x28>
   35c20:	3a000009 	bcc	35c4c <memcmp+0x48>
   35c24:	e1530000 	cmp	r3, r0
   35c28:	0a000005 	beq	35c44 <memcmp+0x40>
   35c2c:	e5f3c001 	ldrb	ip, [r3, #1]!
   35c30:	e5f12001 	ldrb	r2, [r1, #1]!
   35c34:	e15c0002 	cmp	ip, r2
   35c38:	9afffff8 	bls	35c20 <memcmp+0x1c>
   35c3c:	e3a00001 	mov	r0, #1
   35c40:	e12fff1e 	bx	lr
   35c44:	e3a00000 	mov	r0, #0
   35c48:	e12fff1e 	bx	lr
   35c4c:	e3e00000 	mvn	r0, #0
   35c50:	e12fff1e 	bx	lr

00035c54 <strlen>:
   35c54:	e1a03000 	mov	r3, r0
   35c58:	e0d300d1 	ldrsb	r0, [r3], #1
   35c5c:	e3500000 	cmp	r0, #0
   35c60:	012fff1e 	bxeq	lr
   35c64:	e3a00000 	mov	r0, #0
   35c68:	e0d320d1 	ldrsb	r2, [r3], #1
   35c6c:	e2800001 	add	r0, r0, #1
   35c70:	e3520000 	cmp	r2, #0
   35c74:	1afffffb 	bne	35c68 <strlen+0x14>
   35c78:	e12fff1e 	bx	lr

00035c7c <strcmp>:
   35c7c:	e1d030d0 	ldrsb	r3, [r0]
   35c80:	e3530000 	cmp	r3, #0
   35c84:	01d120d0 	ldrsbeq	r2, [r1]
   35c88:	1a000006 	bne	35ca8 <strcmp+0x2c>
   35c8c:	ea000009 	b	35cb8 <strcmp+0x3c>
   35c90:	e1520003 	cmp	r2, r3
   35c94:	ba00000c 	blt	35ccc <strcmp+0x50>
   35c98:	ca00000d 	bgt	35cd4 <strcmp+0x58>
   35c9c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   35ca0:	e3530000 	cmp	r3, #0
   35ca4:	0a00000c 	beq	35cdc <strcmp+0x60>
   35ca8:	e1a0c001 	mov	ip, r1
   35cac:	e0d120d1 	ldrsb	r2, [r1], #1
   35cb0:	e3520000 	cmp	r2, #0
   35cb4:	1afffff5 	bne	35c90 <strcmp+0x14>
   35cb8:	e1530002 	cmp	r3, r2
   35cbc:	ca000002 	bgt	35ccc <strcmp+0x50>
   35cc0:	a3a00000 	movge	r0, #0
   35cc4:	b3e00000 	mvnlt	r0, #0
   35cc8:	e12fff1e 	bx	lr
   35ccc:	e3a00001 	mov	r0, #1
   35cd0:	e12fff1e 	bx	lr
   35cd4:	e3e00000 	mvn	r0, #0
   35cd8:	e12fff1e 	bx	lr
   35cdc:	e1dc20d1 	ldrsb	r2, [ip, #1]
   35ce0:	e1530002 	cmp	r3, r2
   35ce4:	dafffff5 	ble	35cc0 <strcmp+0x44>
   35ce8:	eafffff7 	b	35ccc <strcmp+0x50>

00035cec <strcasecmp>:
   35cec:	e2400001 	sub	r0, r0, #1
   35cf0:	ea000009 	b	35d1c <strcasecmp+0x30>
   35cf4:	e0d130d1 	ldrsb	r3, [r1], #1
   35cf8:	e243c061 	sub	ip, r3, #97	; 0x61
   35cfc:	e35c0019 	cmp	ip, #25
   35d00:	92433020 	subls	r3, r3, #32
   35d04:	9a000001 	bls	35d10 <strcasecmp+0x24>
   35d08:	e3530000 	cmp	r3, #0
   35d0c:	0a000012 	beq	35d5c <strcasecmp+0x70>
   35d10:	e1520003 	cmp	r2, r3
   35d14:	ca000012 	bgt	35d64 <strcasecmp+0x78>
   35d18:	ba000013 	blt	35d6c <strcasecmp+0x80>
   35d1c:	e1f020d1 	ldrsb	r2, [r0, #1]!
   35d20:	e2423061 	sub	r3, r2, #97	; 0x61
   35d24:	e3530019 	cmp	r3, #25
   35d28:	92422020 	subls	r2, r2, #32
   35d2c:	9afffff0 	bls	35cf4 <strcasecmp+0x8>
   35d30:	e3520000 	cmp	r2, #0
   35d34:	1affffee 	bne	35cf4 <strcasecmp+0x8>
   35d38:	e1d130d0 	ldrsb	r3, [r1]
   35d3c:	e2431061 	sub	r1, r3, #97	; 0x61
   35d40:	e3510019 	cmp	r1, #25
   35d44:	8a000004 	bhi	35d5c <strcasecmp+0x70>
   35d48:	e2433020 	sub	r3, r3, #32
   35d4c:	e1530002 	cmp	r3, r2
   35d50:	d3a00000 	movle	r0, #0
   35d54:	c3e00000 	mvngt	r0, #0
   35d58:	e12fff1e 	bx	lr
   35d5c:	e1530002 	cmp	r3, r2
   35d60:	aafffff9 	bge	35d4c <strcasecmp+0x60>
   35d64:	e3a00001 	mov	r0, #1
   35d68:	e12fff1e 	bx	lr
   35d6c:	e3e00000 	mvn	r0, #0
   35d70:	e12fff1e 	bx	lr

00035d74 <strncmp>:
   35d74:	e3520000 	cmp	r2, #0
   35d78:	0a00001b 	beq	35dec <strncmp+0x78>
   35d7c:	e92d4010 	push	{r4, lr}
   35d80:	ea000007 	b	35da4 <strncmp+0x30>
   35d84:	e0d1c0d1 	ldrsb	ip, [r1], #1
   35d88:	e35c0000 	cmp	ip, #0
   35d8c:	0a000009 	beq	35db8 <strncmp+0x44>
   35d90:	e153000c 	cmp	r3, ip
   35d94:	ca00000e 	bgt	35dd4 <strncmp+0x60>
   35d98:	ba00000f 	blt	35ddc <strncmp+0x68>
   35d9c:	e2522001 	subs	r2, r2, #1
   35da0:	0a00000f 	beq	35de4 <strncmp+0x70>
   35da4:	e1a04000 	mov	r4, r0
   35da8:	e0d030d1 	ldrsb	r3, [r0], #1
   35dac:	e1a0e001 	mov	lr, r1
   35db0:	e3530000 	cmp	r3, #0
   35db4:	1afffff2 	bne	35d84 <strncmp+0x10>
   35db8:	e1d420d0 	ldrsb	r2, [r4]
   35dbc:	e1de30d0 	ldrsb	r3, [lr]
   35dc0:	e1520003 	cmp	r2, r3
   35dc4:	ca000002 	bgt	35dd4 <strncmp+0x60>
   35dc8:	a3a00000 	movge	r0, #0
   35dcc:	b3e00000 	mvnlt	r0, #0
   35dd0:	e8bd8010 	pop	{r4, pc}
   35dd4:	e3a00001 	mov	r0, #1
   35dd8:	e8bd8010 	pop	{r4, pc}
   35ddc:	e3e00000 	mvn	r0, #0
   35de0:	e8bd8010 	pop	{r4, pc}
   35de4:	e1a00002 	mov	r0, r2
   35de8:	e8bd8010 	pop	{r4, pc}
   35dec:	e1a00002 	mov	r0, r2
   35df0:	e12fff1e 	bx	lr

00035df4 <strncasecmp>:
   35df4:	e1a0c000 	mov	ip, r0
   35df8:	e2520000 	subs	r0, r2, #0
   35dfc:	012fff1e 	bxeq	lr
   35e00:	e24cc001 	sub	ip, ip, #1
   35e04:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   35e08:	e2432061 	sub	r2, r3, #97	; 0x61
   35e0c:	e3520019 	cmp	r2, #25
   35e10:	92433020 	subls	r3, r3, #32
   35e14:	8a00000d 	bhi	35e50 <strncasecmp+0x5c>
   35e18:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   35e1c:	e0d120d1 	ldrsb	r2, [r1], #1
   35e20:	e242e061 	sub	lr, r2, #97	; 0x61
   35e24:	e35e0019 	cmp	lr, #25
   35e28:	92422020 	subls	r2, r2, #32
   35e2c:	9a000012 	bls	35e7c <strncasecmp+0x88>
   35e30:	e3520000 	cmp	r2, #0
   35e34:	1a000010 	bne	35e7c <strncasecmp+0x88>
   35e38:	e1520003 	cmp	r2, r3
   35e3c:	ba000020 	blt	35ec4 <strncasecmp+0xd0>
   35e40:	e1520003 	cmp	r2, r3
   35e44:	d3a00000 	movle	r0, #0
   35e48:	c3e00000 	mvngt	r0, #0
   35e4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   35e50:	e3530000 	cmp	r3, #0
   35e54:	1affffef 	bne	35e18 <strncasecmp+0x24>
   35e58:	e1d120d0 	ldrsb	r2, [r1]
   35e5c:	e2421061 	sub	r1, r2, #97	; 0x61
   35e60:	e3510019 	cmp	r1, #25
   35e64:	92422020 	subls	r2, r2, #32
   35e68:	8a000017 	bhi	35ecc <strncasecmp+0xd8>
   35e6c:	e1520003 	cmp	r2, r3
   35e70:	d3a00000 	movle	r0, #0
   35e74:	c3e00000 	mvngt	r0, #0
   35e78:	e12fff1e 	bx	lr
   35e7c:	e1520003 	cmp	r2, r3
   35e80:	ba00000f 	blt	35ec4 <strncasecmp+0xd0>
   35e84:	ca000014 	bgt	35edc <strncasecmp+0xe8>
   35e88:	e2500001 	subs	r0, r0, #1
   35e8c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   35e90:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   35e94:	e2432061 	sub	r2, r3, #97	; 0x61
   35e98:	e3520019 	cmp	r2, #25
   35e9c:	92433020 	subls	r3, r3, #32
   35ea0:	9affffdd 	bls	35e1c <strncasecmp+0x28>
   35ea4:	e3530000 	cmp	r3, #0
   35ea8:	1affffdb 	bne	35e1c <strncasecmp+0x28>
   35eac:	e1d120d0 	ldrsb	r2, [r1]
   35eb0:	e2421061 	sub	r1, r2, #97	; 0x61
   35eb4:	e3510019 	cmp	r1, #25
   35eb8:	8affffde 	bhi	35e38 <strncasecmp+0x44>
   35ebc:	e2422020 	sub	r2, r2, #32
   35ec0:	eaffffde 	b	35e40 <strncasecmp+0x4c>
   35ec4:	e3a00001 	mov	r0, #1
   35ec8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   35ecc:	e1520003 	cmp	r2, r3
   35ed0:	aaffffe5 	bge	35e6c <strncasecmp+0x78>
   35ed4:	e3a00001 	mov	r0, #1
   35ed8:	e12fff1e 	bx	lr
   35edc:	e3e00000 	mvn	r0, #0
   35ee0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00035ee4 <strcpy>:
   35ee4:	e1d130d0 	ldrsb	r3, [r1]
   35ee8:	e1a02000 	mov	r2, r0
   35eec:	e3530000 	cmp	r3, #0
   35ef0:	0a000003 	beq	35f04 <strcpy+0x20>
   35ef4:	e4c23001 	strb	r3, [r2], #1
   35ef8:	e1f130d1 	ldrsb	r3, [r1, #1]!
   35efc:	e3530000 	cmp	r3, #0
   35f00:	1afffffb 	bne	35ef4 <strcpy+0x10>
   35f04:	e3a03000 	mov	r3, #0
   35f08:	e5c23000 	strb	r3, [r2]
   35f0c:	e12fff1e 	bx	lr

00035f10 <strncpy>:
   35f10:	e3520000 	cmp	r2, #0
   35f14:	012fff1e 	bxeq	lr
   35f18:	e2411001 	sub	r1, r1, #1
   35f1c:	e1a0c000 	mov	ip, r0
   35f20:	ea000002 	b	35f30 <strncpy+0x20>
   35f24:	e2522001 	subs	r2, r2, #1
   35f28:	e4cc3001 	strb	r3, [ip], #1
   35f2c:	012fff1e 	bxeq	lr
   35f30:	e1f130d1 	ldrsb	r3, [r1, #1]!
   35f34:	e3530000 	cmp	r3, #0
   35f38:	1afffff9 	bne	35f24 <strncpy+0x14>
   35f3c:	e5cc3000 	strb	r3, [ip]
   35f40:	e12fff1e 	bx	lr

00035f44 <strcat>:
   35f44:	e1d030d0 	ldrsb	r3, [r0]
   35f48:	e3530000 	cmp	r3, #0
   35f4c:	e1a03000 	mov	r3, r0
   35f50:	0a000002 	beq	35f60 <strcat+0x1c>
   35f54:	e1f320d1 	ldrsb	r2, [r3, #1]!
   35f58:	e3520000 	cmp	r2, #0
   35f5c:	1afffffc 	bne	35f54 <strcat+0x10>
   35f60:	e1d120d0 	ldrsb	r2, [r1]
   35f64:	e3520000 	cmp	r2, #0
   35f68:	0a000003 	beq	35f7c <strcat+0x38>
   35f6c:	e4c32001 	strb	r2, [r3], #1
   35f70:	e1f120d1 	ldrsb	r2, [r1, #1]!
   35f74:	e3520000 	cmp	r2, #0
   35f78:	1afffffb 	bne	35f6c <strcat+0x28>
   35f7c:	e3a02000 	mov	r2, #0
   35f80:	e5c32000 	strb	r2, [r3]
   35f84:	e12fff1e 	bx	lr

00035f88 <strchr>:
   35f88:	e1d030d0 	ldrsb	r3, [r0]
   35f8c:	e3530000 	cmp	r3, #0
   35f90:	0a000004 	beq	35fa8 <strchr+0x20>
   35f94:	e1530001 	cmp	r3, r1
   35f98:	012fff1e 	bxeq	lr
   35f9c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   35fa0:	e3530000 	cmp	r3, #0
   35fa4:	1afffffa 	bne	35f94 <strchr+0xc>
   35fa8:	e1a00003 	mov	r0, r3
   35fac:	e12fff1e 	bx	lr

00035fb0 <strstr>:
   35fb0:	e1d030d0 	ldrsb	r3, [r0]
   35fb4:	e3530000 	cmp	r3, #0
   35fb8:	0a000012 	beq	36008 <strstr+0x58>
   35fbc:	e92d4010 	push	{r4, lr}
   35fc0:	e1d140d0 	ldrsb	r4, [r1]
   35fc4:	e3540000 	cmp	r4, #0
   35fc8:	08bd8010 	popeq	{r4, pc}
   35fcc:	e2402001 	sub	r2, r0, #1
   35fd0:	e1a0e001 	mov	lr, r1
   35fd4:	e1a03004 	mov	r3, r4
   35fd8:	ea000002 	b	35fe8 <strstr+0x38>
   35fdc:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   35fe0:	e3530000 	cmp	r3, #0
   35fe4:	08bd8010 	popeq	{r4, pc}
   35fe8:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   35fec:	e15c0003 	cmp	ip, r3
   35ff0:	0afffff9 	beq	35fdc <strstr+0x2c>
   35ff4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   35ff8:	e3530000 	cmp	r3, #0
   35ffc:	1afffff2 	bne	35fcc <strstr+0x1c>
   36000:	e1a00003 	mov	r0, r3
   36004:	e8bd8010 	pop	{r4, pc}
   36008:	e1d130d0 	ldrsb	r3, [r1]
   3600c:	e3530000 	cmp	r3, #0
   36010:	13a00000 	movne	r0, #0
   36014:	e12fff1e 	bx	lr

00036018 <strtok_r>:
   36018:	e92d4030 	push	{r4, r5, lr}
   3601c:	e3500000 	cmp	r0, #0
   36020:	e1a05001 	mov	r5, r1
   36024:	e1a04002 	mov	r4, r2
   36028:	0a00002d 	beq	360e4 <strtok_r+0xcc>
   3602c:	e1d0c0d0 	ldrsb	ip, [r0]
   36030:	e35c0000 	cmp	ip, #0
   36034:	0a000026 	beq	360d4 <strtok_r+0xbc>
   36038:	e1d510d0 	ldrsb	r1, [r5]
   3603c:	e2802001 	add	r2, r0, #1
   36040:	e3510000 	cmp	r1, #0
   36044:	0a00000a 	beq	36074 <strtok_r+0x5c>
   36048:	e1a0e005 	mov	lr, r5
   3604c:	e1a03001 	mov	r3, r1
   36050:	ea000002 	b	36060 <strtok_r+0x48>
   36054:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   36058:	e3530000 	cmp	r3, #0
   3605c:	0a000004 	beq	36074 <strtok_r+0x5c>
   36060:	e153000c 	cmp	r3, ip
   36064:	1afffffa 	bne	36054 <strtok_r+0x3c>
   36068:	e1a00002 	mov	r0, r2
   3606c:	e0d2c0d1 	ldrsb	ip, [r2], #1
   36070:	eafffff4 	b	36048 <strtok_r+0x30>
   36074:	e35c0000 	cmp	ip, #0
   36078:	0a000015 	beq	360d4 <strtok_r+0xbc>
   3607c:	e1a02000 	mov	r2, r0
   36080:	e3510000 	cmp	r1, #0
   36084:	1a000006 	bne	360a4 <strtok_r+0x8c>
   36088:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   3608c:	e35c0000 	cmp	ip, #0
   36090:	1afffffc 	bne	36088 <strtok_r+0x70>
   36094:	ea00000c 	b	360cc <strtok_r+0xb4>
   36098:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   3609c:	e35c0000 	cmp	ip, #0
   360a0:	0a000009 	beq	360cc <strtok_r+0xb4>
   360a4:	e1a0e005 	mov	lr, r5
   360a8:	e1a03001 	mov	r3, r1
   360ac:	ea000002 	b	360bc <strtok_r+0xa4>
   360b0:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   360b4:	e3530000 	cmp	r3, #0
   360b8:	0afffff6 	beq	36098 <strtok_r+0x80>
   360bc:	e153000c 	cmp	r3, ip
   360c0:	1afffffa 	bne	360b0 <strtok_r+0x98>
   360c4:	e3a03000 	mov	r3, #0
   360c8:	e4c23001 	strb	r3, [r2], #1
   360cc:	e5842000 	str	r2, [r4]
   360d0:	e8bd8030 	pop	{r4, r5, pc}
   360d4:	e3a03000 	mov	r3, #0
   360d8:	e5843000 	str	r3, [r4]
   360dc:	e3a00000 	mov	r0, #0
   360e0:	e8bd8030 	pop	{r4, r5, pc}
   360e4:	e5920000 	ldr	r0, [r2]
   360e8:	e3500000 	cmp	r0, #0
   360ec:	1affffce 	bne	3602c <strtok_r+0x14>
   360f0:	eafffff9 	b	360dc <strtok_r+0xc4>

000360f4 <strtoul>:
   360f4:	e92d4070 	push	{r4, r5, r6, lr}
   360f8:	e2515000 	subs	r5, r1, #0
   360fc:	e2423002 	sub	r3, r2, #2
   36100:	15850000 	strne	r0, [r5]
   36104:	e3520000 	cmp	r2, #0
   36108:	13530022 	cmpne	r3, #34	; 0x22
   3610c:	8a000049 	bhi	36238 <strtoul+0x144>
   36110:	e1d030d0 	ldrsb	r3, [r0]
   36114:	e1a0e000 	mov	lr, r0
   36118:	e2800001 	add	r0, r0, #1
   3611c:	e243c009 	sub	ip, r3, #9
   36120:	e3530020 	cmp	r3, #32
   36124:	0afffff9 	beq	36110 <strtoul+0x1c>
   36128:	e6efc07c 	uxtb	ip, ip
   3612c:	e35c0004 	cmp	ip, #4
   36130:	9afffff6 	bls	36110 <strtoul+0x1c>
   36134:	e353002b 	cmp	r3, #43	; 0x2b
   36138:	0a00002c 	beq	361f0 <strtoul+0xfc>
   3613c:	e353002d 	cmp	r3, #45	; 0x2d
   36140:	03a06001 	moveq	r6, #1
   36144:	13a06000 	movne	r6, #0
   36148:	01de30d1 	ldrsbeq	r3, [lr, #1]
   3614c:	01a0e000 	moveq	lr, r0
   36150:	e3530030 	cmp	r3, #48	; 0x30
   36154:	0a00002a 	beq	36204 <strtoul+0x110>
   36158:	e3520000 	cmp	r2, #0
   3615c:	03a0200a 	moveq	r2, #10
   36160:	e353002f 	cmp	r3, #47	; 0x2f
   36164:	e1a0c003 	mov	ip, r3
   36168:	da000030 	ble	36230 <strtoul+0x13c>
   3616c:	e3a04001 	mov	r4, #1
   36170:	e3a01000 	mov	r1, #0
   36174:	ea00000d 	b	361b0 <strtoul+0xbc>
   36178:	e35c0040 	cmp	ip, #64	; 0x40
   3617c:	ca00000f 	bgt	361c0 <strtoul+0xcc>
   36180:	e24cc030 	sub	ip, ip, #48	; 0x30
   36184:	e15c0002 	cmp	ip, r2
   36188:	aa000010 	bge	361d0 <strtoul+0xdc>
   3618c:	e020c291 	mla	r0, r1, r2, ip
   36190:	e3a04000 	mov	r4, #0
   36194:	e1500001 	cmp	r0, r1
   36198:	3a00002c 	bcc	36250 <strtoul+0x15c>
   3619c:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   361a0:	e1a01000 	mov	r1, r0
   361a4:	e1a0300c 	mov	r3, ip
   361a8:	e35c002f 	cmp	ip, #47	; 0x2f
   361ac:	da00002b 	ble	36260 <strtoul+0x16c>
   361b0:	e2433061 	sub	r3, r3, #97	; 0x61
   361b4:	e3530019 	cmp	r3, #25
   361b8:	924cc020 	subls	ip, ip, #32
   361bc:	8affffed 	bhi	36178 <strtoul+0x84>
   361c0:	e24cc007 	sub	ip, ip, #7
   361c4:	e24cc030 	sub	ip, ip, #48	; 0x30
   361c8:	e15c0002 	cmp	ip, r2
   361cc:	baffffee 	blt	3618c <strtoul+0x98>
   361d0:	e2244001 	eor	r4, r4, #1
   361d4:	e1a00001 	mov	r0, r1
   361d8:	e0044006 	and	r4, r4, r6
   361dc:	e3550000 	cmp	r5, #0
   361e0:	1585e000 	strne	lr, [r5]
   361e4:	e3540000 	cmp	r4, #0
   361e8:	12600000 	rsbne	r0, r0, #0
   361ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   361f0:	e1de30d1 	ldrsb	r3, [lr, #1]
   361f4:	e3a06000 	mov	r6, #0
   361f8:	e1a0e000 	mov	lr, r0
   361fc:	e3530030 	cmp	r3, #48	; 0x30
   36200:	1affffd4 	bne	36158 <strtoul+0x64>
   36204:	e1de30d1 	ldrsb	r3, [lr, #1]
   36208:	e28e0001 	add	r0, lr, #1
   3620c:	e3c31020 	bic	r1, r3, #32
   36210:	e3510058 	cmp	r1, #88	; 0x58
   36214:	1a000009 	bne	36240 <strtoul+0x14c>
   36218:	e3d23010 	bics	r3, r2, #16
   3621c:	1a000005 	bne	36238 <strtoul+0x144>
   36220:	e1de30d2 	ldrsb	r3, [lr, #2]
   36224:	e3a02010 	mov	r2, #16
   36228:	e28ee002 	add	lr, lr, #2
   3622c:	eaffffcb 	b	36160 <strtoul+0x6c>
   36230:	e3550000 	cmp	r5, #0
   36234:	1585e000 	strne	lr, [r5]
   36238:	e3a00000 	mov	r0, #0
   3623c:	e8bd8070 	pop	{r4, r5, r6, pc}
   36240:	e3520000 	cmp	r2, #0
   36244:	e1a0e000 	mov	lr, r0
   36248:	03a02008 	moveq	r2, #8
   3624c:	eaffffc3 	b	36160 <strtoul+0x6c>
   36250:	e1550004 	cmp	r5, r4
   36254:	e3e00000 	mvn	r0, #0
   36258:	1585e000 	strne	lr, [r5]
   3625c:	e8bd8070 	pop	{r4, r5, r6, pc}
   36260:	e3a04001 	mov	r4, #1
   36264:	eaffffdb 	b	361d8 <strtoul+0xe4>

00036268 <strtoull>:
   36268:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3626c:	e2514000 	subs	r4, r1, #0
   36270:	e2423002 	sub	r3, r2, #2
   36274:	15840000 	strne	r0, [r4]
   36278:	e3520000 	cmp	r2, #0
   3627c:	13530022 	cmpne	r3, #34	; 0x22
   36280:	8a000048 	bhi	363a8 <strtoull+0x140>
   36284:	e1d030d0 	ldrsb	r3, [r0]
   36288:	e1a0e000 	mov	lr, r0
   3628c:	e2800001 	add	r0, r0, #1
   36290:	e243c009 	sub	ip, r3, #9
   36294:	e3530020 	cmp	r3, #32
   36298:	0afffff9 	beq	36284 <strtoull+0x1c>
   3629c:	e6efc07c 	uxtb	ip, ip
   362a0:	e35c0004 	cmp	ip, #4
   362a4:	9afffff6 	bls	36284 <strtoull+0x1c>
   362a8:	e353002b 	cmp	r3, #43	; 0x2b
   362ac:	0a00002b 	beq	36360 <strtoull+0xf8>
   362b0:	e353002d 	cmp	r3, #45	; 0x2d
   362b4:	03a07001 	moveq	r7, #1
   362b8:	13a07000 	movne	r7, #0
   362bc:	01de30d1 	ldrsbeq	r3, [lr, #1]
   362c0:	01a0e000 	moveq	lr, r0
   362c4:	e3530030 	cmp	r3, #48	; 0x30
   362c8:	0a000029 	beq	36374 <strtoull+0x10c>
   362cc:	e3520000 	cmp	r2, #0
   362d0:	03a0200a 	moveq	r2, #10
   362d4:	e353002f 	cmp	r3, #47	; 0x2f
   362d8:	e1a0c003 	mov	ip, r3
   362dc:	da00002f 	ble	363a0 <strtoull+0x138>
   362e0:	e3a05000 	mov	r5, #0
   362e4:	e3a09001 	mov	r9, #1
   362e8:	e1a06005 	mov	r6, r5
   362ec:	e1a08fc2 	asr	r8, r2, #31
   362f0:	ea000014 	b	36348 <strtoull+0xe0>
   362f4:	e35c0040 	cmp	ip, #64	; 0x40
   362f8:	ca000016 	bgt	36358 <strtoull+0xf0>
   362fc:	e0010692 	mul	r1, r2, r6
   36300:	e24cc030 	sub	ip, ip, #48	; 0x30
   36304:	e0830592 	umull	r0, r3, r2, r5
   36308:	e15c0002 	cmp	ip, r2
   3630c:	e0211895 	mla	r1, r5, r8, r1
   36310:	aa000027 	bge	363b4 <strtoull+0x14c>
   36314:	e09c0000 	adds	r0, ip, r0
   36318:	e0811003 	add	r1, r1, r3
   3631c:	e0a11fcc 	adc	r1, r1, ip, asr #31
   36320:	e1500005 	cmp	r0, r5
   36324:	e0d16006 	sbcs	r6, r1, r6
   36328:	3a000030 	bcc	363f0 <strtoull+0x188>
   3632c:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   36330:	e3a09000 	mov	r9, #0
   36334:	e1a05000 	mov	r5, r0
   36338:	e1a06001 	mov	r6, r1
   3633c:	e1a0300c 	mov	r3, ip
   36340:	e35c002f 	cmp	ip, #47	; 0x2f
   36344:	da00002e 	ble	36404 <strtoull+0x19c>
   36348:	e2433061 	sub	r3, r3, #97	; 0x61
   3634c:	e3530019 	cmp	r3, #25
   36350:	924cc020 	subls	ip, ip, #32
   36354:	8affffe6 	bhi	362f4 <strtoull+0x8c>
   36358:	e24cc007 	sub	ip, ip, #7
   3635c:	eaffffe6 	b	362fc <strtoull+0x94>
   36360:	e1de30d1 	ldrsb	r3, [lr, #1]
   36364:	e3a07000 	mov	r7, #0
   36368:	e1a0e000 	mov	lr, r0
   3636c:	e3530030 	cmp	r3, #48	; 0x30
   36370:	1affffd5 	bne	362cc <strtoull+0x64>
   36374:	e1de30d1 	ldrsb	r3, [lr, #1]
   36378:	e28e0001 	add	r0, lr, #1
   3637c:	e3c31020 	bic	r1, r3, #32
   36380:	e3510058 	cmp	r1, #88	; 0x58
   36384:	1a000015 	bne	363e0 <strtoull+0x178>
   36388:	e3d23010 	bics	r3, r2, #16
   3638c:	1a000005 	bne	363a8 <strtoull+0x140>
   36390:	e1de30d2 	ldrsb	r3, [lr, #2]
   36394:	e3a02010 	mov	r2, #16
   36398:	e28ee002 	add	lr, lr, #2
   3639c:	eaffffcc 	b	362d4 <strtoull+0x6c>
   363a0:	e3540000 	cmp	r4, #0
   363a4:	1584e000 	strne	lr, [r4]
   363a8:	e3a00000 	mov	r0, #0
   363ac:	e1a01000 	mov	r1, r0
   363b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   363b4:	e2299001 	eor	r9, r9, #1
   363b8:	e1a00005 	mov	r0, r5
   363bc:	e1a01006 	mov	r1, r6
   363c0:	e0099007 	and	r9, r9, r7
   363c4:	e3540000 	cmp	r4, #0
   363c8:	1584e000 	strne	lr, [r4]
   363cc:	e3590000 	cmp	r9, #0
   363d0:	08bd83f0 	popeq	{r4, r5, r6, r7, r8, r9, pc}
   363d4:	e2700000 	rsbs	r0, r0, #0
   363d8:	e2e11000 	rsc	r1, r1, #0
   363dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   363e0:	e3520000 	cmp	r2, #0
   363e4:	e1a0e000 	mov	lr, r0
   363e8:	03a02008 	moveq	r2, #8
   363ec:	eaffffb8 	b	362d4 <strtoull+0x6c>
   363f0:	e3540000 	cmp	r4, #0
   363f4:	e3a01000 	mov	r1, #0
   363f8:	1584e000 	strne	lr, [r4]
   363fc:	e3e00000 	mvn	r0, #0
   36400:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   36404:	e3a09001 	mov	r9, #1
   36408:	eaffffec 	b	363c0 <strtoull+0x158>

0003640c <atoi>:
   3640c:	e3a0200a 	mov	r2, #10
   36410:	e3a01000 	mov	r1, #0
   36414:	eaffff36 	b	360f4 <strtoul>

00036418 <char2int>:
   36418:	e12fff1e 	bx	lr

0003641c <memset>:
   3641c:	e3100003 	tst	r0, #3
   36420:	1a00000d 	bne	3645c <memset+0x40>
   36424:	e3520010 	cmp	r2, #16
   36428:	3a00000b 	bcc	3645c <memset+0x40>
   3642c:	e1813401 	orr	r3, r1, r1, lsl #8
   36430:	e183c803 	orr	ip, r3, r3, lsl #16
   36434:	e1a03000 	mov	r3, r0
   36438:	e583c000 	str	ip, [r3]
   3643c:	e583c004 	str	ip, [r3, #4]
   36440:	e583c008 	str	ip, [r3, #8]
   36444:	e583c00c 	str	ip, [r3, #12]
   36448:	e2833010 	add	r3, r3, #16
   3644c:	e2422010 	sub	r2, r2, #16
   36450:	e352000f 	cmp	r2, #15
   36454:	8afffff7 	bhi	36438 <memset+0x1c>
   36458:	ea000000 	b	36460 <memset+0x44>
   3645c:	e1a03000 	mov	r3, r0
   36460:	e3520000 	cmp	r2, #0
   36464:	012fff1e 	bxeq	lr
   36468:	e4c31001 	strb	r1, [r3], #1
   3646c:	e2522001 	subs	r2, r2, #1
   36470:	1afffffc 	bne	36468 <memset+0x4c>
   36474:	e12fff1e 	bx	lr

00036478 <memcpy>:
   36478:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   3647c:	e352007f 	cmp	r2, #127	; 0x7f
   36480:	9a00000b 	bls	364b4 <memcpy+0x3c>
   36484:	e3110003 	tst	r1, #3
   36488:	1a000009 	bne	364b4 <memcpy+0x3c>
   3648c:	e3100003 	tst	r0, #3
   36490:	1a000007 	bne	364b4 <memcpy+0x3c>
   36494:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   36498:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3649c:	e2422020 	sub	r2, r2, #32
   364a0:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   364a4:	f5d1f040 	pld	[r1, #64]	; 0x40
   364a8:	e352001f 	cmp	r2, #31
   364ac:	8afffff9 	bhi	36498 <memcpy+0x20>
   364b0:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   364b4:	e3520000 	cmp	r2, #0
   364b8:	0a000003 	beq	364cc <memcpy+0x54>
   364bc:	e4d13001 	ldrb	r3, [r1], #1
   364c0:	e2522001 	subs	r2, r2, #1
   364c4:	e4c03001 	strb	r3, [r0], #1
   364c8:	1afffffb 	bne	364bc <memcpy+0x44>
   364cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   364d0:	e12fff1e 	bx	lr

000364d4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   364d4:	e12fff1e 	bx	lr

000364d8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   364d8:	e92d4010 	push	{r4, lr}
   364dc:	e3a01014 	mov	r1, #20
   364e0:	e1a04000 	mov	r4, r0
   364e4:	eb000204 	bl	36cfc <operator delete(void*, unsigned int)>
   364e8:	e1a00004 	mov	r0, r4
   364ec:	e8bd8010 	pop	{r4, pc}

000364f0 <CVirtualGPIOPin::Write(unsigned int)>:
   364f0:	e92d4070 	push	{r4, r5, r6, lr}
   364f4:	e1a04000 	mov	r4, r0
   364f8:	e5d03004 	ldrb	r3, [r0, #4]
   364fc:	e24dd028 	sub	sp, sp, #40	; 0x28
   36500:	e1a05001 	mov	r5, r1
   36504:	e3530000 	cmp	r3, #0
   36508:	0a000013 	beq	3655c <CVirtualGPIOPin::Write(unsigned int)+0x6c>
   3650c:	e5901008 	ldr	r1, [r0, #8]
   36510:	e3510000 	cmp	r1, #0
   36514:	1a000032 	bne	365e4 <CVirtualGPIOPin::Write(unsigned int)+0xf4>
   36518:	e28d000c 	add	r0, sp, #12
   3651c:	ebffd908 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   36520:	e3a03014 	mov	r3, #20
   36524:	e3a01008 	mov	r1, #8
   36528:	e08d2003 	add	r2, sp, r3
   3652c:	e58d1000 	str	r1, [sp]
   36530:	e28d000c 	add	r0, sp, #12
   36534:	e3a01082 	mov	r1, #130	; 0x82
   36538:	e58d1020 	str	r1, [sp, #32]
   3653c:	e3081041 	movw	r1, #32833	; 0x8041
   36540:	e3401003 	movt	r1, #3
   36544:	e58d5024 	str	r5, [sp, #36]	; 0x24
   36548:	ebffd94f 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3654c:	e28d000c 	add	r0, sp, #12
   36550:	ebffd902 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   36554:	e28dd028 	add	sp, sp, #40	; 0x28
   36558:	e8bd8070 	pop	{r4, r5, r6, pc}
   3655c:	e5903008 	ldr	r3, [r0, #8]
   36560:	e1813003 	orr	r3, r1, r3
   36564:	e3530001 	cmp	r3, #1
   36568:	8afffff9 	bhi	36554 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   3656c:	e3046f80 	movw	r6, #20352	; 0x4f80
   36570:	e3406004 	movt	r6, #4
   36574:	e5963000 	ldr	r3, [r6]
   36578:	e3530000 	cmp	r3, #0
   3657c:	0afffff4 	beq	36554 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   36580:	e5960004 	ldr	r0, [r6, #4]
   36584:	e3500000 	cmp	r0, #0
   36588:	1a000020 	bne	36610 <CVirtualGPIOPin::Write(unsigned int)+0x120>
   3658c:	e1d421b0 	ldrh	r2, [r4, #16]
   36590:	e1d431b2 	ldrh	r3, [r4, #18]
   36594:	e584500c 	str	r5, [r4, #12]
   36598:	e0421003 	sub	r1, r2, r3
   3659c:	e6bf1071 	sxth	r1, r1
   365a0:	e3510000 	cmp	r1, #0
   365a4:	da000013 	ble	365f8 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   365a8:	e3550000 	cmp	r5, #0
   365ac:	1a000006 	bne	365cc <CVirtualGPIOPin::Write(unsigned int)+0xdc>
   365b0:	e2833001 	add	r3, r3, #1
   365b4:	e6ff3073 	uxth	r3, r3
   365b8:	e1c431b2 	strh	r3, [r4, #18]
   365bc:	e5940008 	ldr	r0, [r4, #8]
   365c0:	e1833802 	orr	r3, r3, r2, lsl #16
   365c4:	e5961000 	ldr	r1, [r6]
   365c8:	e7813100 	str	r3, [r1, r0, lsl #2]
   365cc:	e5963004 	ldr	r3, [r6, #4]
   365d0:	e3530000 	cmp	r3, #0
   365d4:	0affffde 	beq	36554 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   365d8:	e28dd028 	add	sp, sp, #40	; 0x28
   365dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   365e0:	ea0007f0 	b	385a8 <LeaveCritical>
   365e4:	e3031468 	movw	r1, #13416	; 0x3468
   365e8:	e3401004 	movt	r1, #4
   365ec:	e3a0205b 	mov	r2, #91	; 0x5b
   365f0:	e2810014 	add	r0, r1, #20
   365f4:	ebffd8b1 	bl	2c8c0 <assertion_failed>
   365f8:	e3550000 	cmp	r5, #0
   365fc:	0afffff2 	beq	365cc <CVirtualGPIOPin::Write(unsigned int)+0xdc>
   36600:	e2822001 	add	r2, r2, #1
   36604:	e6ff2072 	uxth	r2, r2
   36608:	e1c421b0 	strh	r2, [r4, #16]
   3660c:	eaffffea 	b	365bc <CVirtualGPIOPin::Write(unsigned int)+0xcc>
   36610:	eb0007b9 	bl	384fc <EnterCritical>
   36614:	eaffffdc 	b	3658c <CVirtualGPIOPin::Write(unsigned int)+0x9c>

00036618 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   36618:	e92d4070 	push	{r4, r5, r6, lr}
   3661c:	e1a04000 	mov	r4, r0
   36620:	e59f313c 	ldr	r3, [pc, #316]	; 36764 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   36624:	e3a00000 	mov	r0, #0
   36628:	e3510001 	cmp	r1, #1
   3662c:	91a0c002 	movls	ip, r2
   36630:	8382c001 	orrhi	ip, r2, #1
   36634:	e24dd020 	sub	sp, sp, #32
   36638:	e15c0000 	cmp	ip, r0
   3663c:	e5840010 	str	r0, [r4, #16]
   36640:	e5843000 	str	r3, [r4]
   36644:	e5c42004 	strb	r2, [r4, #4]
   36648:	e5841008 	str	r1, [r4, #8]
   3664c:	0a000002 	beq	3665c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   36650:	e1a00004 	mov	r0, r4
   36654:	e28dd020 	add	sp, sp, #32
   36658:	e8bd8070 	pop	{r4, r5, r6, pc}
   3665c:	e3045f80 	movw	r5, #20352	; 0x4f80
   36660:	e3405004 	movt	r5, #4
   36664:	e5950004 	ldr	r0, [r5, #4]
   36668:	e3500000 	cmp	r0, #0
   3666c:	1a00000e 	bne	366ac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   36670:	e5956000 	ldr	r6, [r5]
   36674:	e3560000 	cmp	r6, #0
   36678:	0a00000f 	beq	366bc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa4>
   3667c:	e5943008 	ldr	r3, [r4, #8]
   36680:	e3a02000 	mov	r2, #0
   36684:	e7862103 	str	r2, [r6, r3, lsl #2]
   36688:	e5953004 	ldr	r3, [r5, #4]
   3668c:	e3530000 	cmp	r3, #0
   36690:	1a000024 	bne	36728 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   36694:	e1a00004 	mov	r0, r4
   36698:	e3a01000 	mov	r1, #0
   3669c:	ebffff93 	bl	364f0 <CVirtualGPIOPin::Write(unsigned int)>
   366a0:	e1a00004 	mov	r0, r4
   366a4:	e28dd020 	add	sp, sp, #32
   366a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   366ac:	eb000792 	bl	384fc <EnterCritical>
   366b0:	e5956000 	ldr	r6, [r5]
   366b4:	e3560000 	cmp	r6, #0
   366b8:	1affffef 	bne	3667c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   366bc:	e3a00001 	mov	r0, #1
   366c0:	eb00075e 	bl	38440 <CMemorySystem::GetCoherentPage(unsigned int)>
   366c4:	e1a01006 	mov	r1, r6
   366c8:	e5850000 	str	r0, [r5]
   366cc:	e28d0008 	add	r0, sp, #8
   366d0:	ebffd89b 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   366d4:	e5953000 	ldr	r3, [r5]
   366d8:	e28d0008 	add	r0, sp, #8
   366dc:	e3081020 	movw	r1, #32800	; 0x8020
   366e0:	e3401004 	movt	r1, #4
   366e4:	e3833103 	orr	r3, r3, #-1073741824	; 0xc0000000
   366e8:	e58d301c 	str	r3, [sp, #28]
   366ec:	e3a03004 	mov	r3, #4
   366f0:	e58d3000 	str	r3, [sp]
   366f4:	e3a03010 	mov	r3, #16
   366f8:	e08d2003 	add	r2, sp, r3
   366fc:	ebffd8e2 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   36700:	e3500000 	cmp	r0, #0
   36704:	0a000009 	beq	36730 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   36708:	e28d0008 	add	r0, sp, #8
   3670c:	ebffd893 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   36710:	e5956000 	ldr	r6, [r5]
   36714:	e3560000 	cmp	r6, #0
   36718:	1affffd7 	bne	3667c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   3671c:	e5953004 	ldr	r3, [r5, #4]
   36720:	e3530000 	cmp	r3, #0
   36724:	0affffda 	beq	36694 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   36728:	eb00079e 	bl	385a8 <LeaveCritical>
   3672c:	eaffffd8 	b	36694 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   36730:	e3a03010 	mov	r3, #16
   36734:	e58d0000 	str	r0, [sp]
   36738:	e1a01003 	mov	r1, r3
   3673c:	e28d2010 	add	r2, sp, #16
   36740:	e3401004 	movt	r1, #4
   36744:	e28d0008 	add	r0, sp, #8
   36748:	ebffd8cf 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3674c:	e3500000 	cmp	r0, #0
   36750:	05850000 	streq	r0, [r5]
   36754:	159d301c 	ldrne	r3, [sp, #28]
   36758:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   3675c:	15853000 	strne	r3, [r5]
   36760:	eaffffe8 	b	36708 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   36764:	00043490 	.word	0x00043490

00036768 <CVirtualGPIOPin::Invert()>:
   36768:	e590100c 	ldr	r1, [r0, #12]
   3676c:	e2211001 	eor	r1, r1, #1
   36770:	eaffff5e 	b	364f0 <CVirtualGPIOPin::Write(unsigned int)>

00036774 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   36774:	e3043f80 	movw	r3, #20352	; 0x4f80
   36778:	e3403004 	movt	r3, #4
   3677c:	e3a02000 	mov	r2, #0
   36780:	e5832004 	str	r2, [r3, #4]
   36784:	e12fff1e 	bx	lr

00036788 <ChainBootStub(void const*, unsigned int)>:
   36788:	e2811003 	add	r1, r1, #3
   3678c:	e1b01121 	lsrs	r1, r1, #2
   36790:	0a000007 	beq	367b4 <ChainBootStub(void const*, unsigned int)+0x2c>
   36794:	e1a03000 	mov	r3, r0
   36798:	e0800101 	add	r0, r0, r1, lsl #2
   3679c:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   367a0:	e083200c 	add	r2, r3, ip
   367a4:	e4931004 	ldr	r1, [r3], #4
   367a8:	e1530000 	cmp	r3, r0
   367ac:	e5821000 	str	r1, [r2]
   367b0:	1afffffa 	bne	367a0 <ChainBootStub(void const*, unsigned int)+0x18>
   367b4:	e3a03000 	mov	r3, #0
   367b8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   367bc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   367c0:	f57ff04f 	dsb	sy
   367c4:	f57ff06f 	isb	sy
   367c8:	e3a03902 	mov	r3, #32768	; 0x8000
   367cc:	e12fff13 	bx	r3

000367d0 <EnableChainBoot>:
   367d0:	e3043f88 	movw	r3, #20360	; 0x4f88
   367d4:	e3403004 	movt	r3, #4
   367d8:	e1a0c001 	mov	ip, r1
   367dc:	e92d4010 	push	{r4, lr}
   367e0:	e3a02b01 	mov	r2, #1024	; 0x400
   367e4:	e8831001 	stm	r3, {r0, ip}
   367e8:	e3061788 	movw	r1, #26504	; 0x6788
   367ec:	e3401003 	movt	r1, #3
   367f0:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   367f4:	ebffff1f 	bl	36478 <memcpy>
   367f8:	e3a03000 	mov	r3, #0
   367fc:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   36800:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   36804:	f57ff04f 	dsb	sy
   36808:	f57ff06f 	isb	sy
   3680c:	e8bd8010 	pop	{r4, pc}

00036810 <IsChainBootEnabled>:
   36810:	e3043f88 	movw	r3, #20360	; 0x4f88
   36814:	e3403004 	movt	r3, #4
   36818:	e5930000 	ldr	r0, [r3]
   3681c:	e2500000 	subs	r0, r0, #0
   36820:	13a00001 	movne	r0, #1
   36824:	e12fff1e 	bx	lr

00036828 <DoChainBoot>:
   36828:	e3043f88 	movw	r3, #20360	; 0x4f88
   3682c:	e3403004 	movt	r3, #4
   36830:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   36834:	e8930003 	ldm	r3, {r0, r1}
   36838:	e12fff12 	bx	r2

0003683c <CMACAddress::CMACAddress()>:
   3683c:	e3a02000 	mov	r2, #0
   36840:	e5c02000 	strb	r2, [r0]
   36844:	e12fff1e 	bx	lr

00036848 <CMACAddress::CMACAddress(unsigned char const*)>:
   36848:	e3510000 	cmp	r1, #0
   3684c:	e92d4010 	push	{r4, lr}
   36850:	0a000007 	beq	36874 <CMACAddress::CMACAddress(unsigned char const*)+0x2c>
   36854:	e1a04000 	mov	r4, r0
   36858:	e3a02006 	mov	r2, #6
   3685c:	e2800001 	add	r0, r0, #1
   36860:	ebffff04 	bl	36478 <memcpy>
   36864:	e3a03001 	mov	r3, #1
   36868:	e1a00004 	mov	r0, r4
   3686c:	e5c43000 	strb	r3, [r4]
   36870:	e8bd8010 	pop	{r4, pc}
   36874:	e3031498 	movw	r1, #13464	; 0x3498
   36878:	e3401004 	movt	r1, #4
   3687c:	e30106d8 	movw	r0, #5848	; 0x16d8
   36880:	e3400004 	movt	r0, #4
   36884:	e3a02034 	mov	r2, #52	; 0x34
   36888:	ebffd80c 	bl	2c8c0 <assertion_failed>

0003688c <CMACAddress::~CMACAddress()>:
   3688c:	e12fff1e 	bx	lr

00036890 <CMACAddress::operator==(CMACAddress const&) const>:
   36890:	e5d03000 	ldrb	r3, [r0]
   36894:	e92d4010 	push	{r4, lr}
   36898:	e3530000 	cmp	r3, #0
   3689c:	0a000009 	beq	368c8 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   368a0:	e5d13000 	ldrb	r3, [r1]
   368a4:	e2800001 	add	r0, r0, #1
   368a8:	e3530000 	cmp	r3, #0
   368ac:	0a00000b 	beq	368e0 <CMACAddress::operator==(CMACAddress const&) const+0x50>
   368b0:	e3a02006 	mov	r2, #6
   368b4:	e2811001 	add	r1, r1, #1
   368b8:	ebfffcd1 	bl	35c04 <memcmp>
   368bc:	e16f0f10 	clz	r0, r0
   368c0:	e1a002a0 	lsr	r0, r0, #5
   368c4:	e8bd8010 	pop	{r4, pc}
   368c8:	e3031498 	movw	r1, #13464	; 0x3498
   368cc:	e3401004 	movt	r1, #4
   368d0:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   368d4:	e3400003 	movt	r0, #3
   368d8:	e3a02029 	mov	r2, #41	; 0x29
   368dc:	ebffd7f7 	bl	2c8c0 <assertion_failed>
   368e0:	e3031498 	movw	r1, #13464	; 0x3498
   368e4:	e3401004 	movt	r1, #4
   368e8:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   368ec:	e3400003 	movt	r0, #3
   368f0:	e3a02041 	mov	r2, #65	; 0x41
   368f4:	ebffd7f1 	bl	2c8c0 <assertion_failed>

000368f8 <CMACAddress::operator!=(CMACAddress const&) const>:
   368f8:	e5d03000 	ldrb	r3, [r0]
   368fc:	e92d4010 	push	{r4, lr}
   36900:	e3530000 	cmp	r3, #0
   36904:	0a000009 	beq	36930 <CMACAddress::operator!=(CMACAddress const&) const+0x38>
   36908:	e5d13000 	ldrb	r3, [r1]
   3690c:	e2800001 	add	r0, r0, #1
   36910:	e3530000 	cmp	r3, #0
   36914:	0a00000b 	beq	36948 <CMACAddress::operator!=(CMACAddress const&) const+0x50>
   36918:	e3a02006 	mov	r2, #6
   3691c:	e2811001 	add	r1, r1, #1
   36920:	ebfffcb7 	bl	35c04 <memcmp>
   36924:	e2500000 	subs	r0, r0, #0
   36928:	13a00001 	movne	r0, #1
   3692c:	e8bd8010 	pop	{r4, pc}
   36930:	e3031498 	movw	r1, #13464	; 0x3498
   36934:	e3401004 	movt	r1, #4
   36938:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   3693c:	e3400003 	movt	r0, #3
   36940:	e3a02029 	mov	r2, #41	; 0x29
   36944:	ebffd7dd 	bl	2c8c0 <assertion_failed>
   36948:	e3031498 	movw	r1, #13464	; 0x3498
   3694c:	e3401004 	movt	r1, #4
   36950:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   36954:	e3400003 	movt	r0, #3
   36958:	e3a02041 	mov	r2, #65	; 0x41
   3695c:	ebffd7d7 	bl	2c8c0 <assertion_failed>

00036960 <CMACAddress::Set(unsigned char const*)>:
   36960:	e3510000 	cmp	r1, #0
   36964:	e92d4010 	push	{r4, lr}
   36968:	0a000006 	beq	36988 <CMACAddress::Set(unsigned char const*)+0x28>
   3696c:	e1a04000 	mov	r4, r0
   36970:	e3a02006 	mov	r2, #6
   36974:	e2800001 	add	r0, r0, #1
   36978:	ebfffebe 	bl	36478 <memcpy>
   3697c:	e3a03001 	mov	r3, #1
   36980:	e5c43000 	strb	r3, [r4]
   36984:	e8bd8010 	pop	{r4, pc}
   36988:	e3031498 	movw	r1, #13464	; 0x3498
   3698c:	e3401004 	movt	r1, #4
   36990:	e30106d8 	movw	r0, #5848	; 0x16d8
   36994:	e3400004 	movt	r0, #4
   36998:	e3a02034 	mov	r2, #52	; 0x34
   3699c:	ebffd7c7 	bl	2c8c0 <assertion_failed>

000369a0 <CMACAddress::SetBroadcast()>:
   369a0:	e92d4010 	push	{r4, lr}
   369a4:	e1a04000 	mov	r4, r0
   369a8:	e3a02006 	mov	r2, #6
   369ac:	e3a010ff 	mov	r1, #255	; 0xff
   369b0:	e2800001 	add	r0, r0, #1
   369b4:	ebfffe98 	bl	3641c <memset>
   369b8:	e3a03001 	mov	r3, #1
   369bc:	e5c43000 	strb	r3, [r4]
   369c0:	e8bd8010 	pop	{r4, pc}

000369c4 <CMACAddress::Get() const>:
   369c4:	e5d03000 	ldrb	r3, [r0]
   369c8:	e3530000 	cmp	r3, #0
   369cc:	0a000001 	beq	369d8 <CMACAddress::Get() const+0x14>
   369d0:	e2800001 	add	r0, r0, #1
   369d4:	e12fff1e 	bx	lr
   369d8:	e3031498 	movw	r1, #13464	; 0x3498
   369dc:	e3401004 	movt	r1, #4
   369e0:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   369e4:	e3400003 	movt	r0, #3
   369e8:	e3a02041 	mov	r2, #65	; 0x41
   369ec:	e92d4010 	push	{r4, lr}
   369f0:	ebffd7b2 	bl	2c8c0 <assertion_failed>

000369f4 <CMACAddress::CopyTo(unsigned char*) const>:
   369f4:	e5d02000 	ldrb	r2, [r0]
   369f8:	e1a03000 	mov	r3, r0
   369fc:	e92d4010 	push	{r4, lr}
   36a00:	e3520000 	cmp	r2, #0
   36a04:	0a000006 	beq	36a24 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   36a08:	e1a00001 	mov	r0, r1
   36a0c:	e3510000 	cmp	r1, #0
   36a10:	0a000009 	beq	36a3c <CMACAddress::CopyTo(unsigned char*) const+0x48>
   36a14:	e8bd4010 	pop	{r4, lr}
   36a18:	e3a02006 	mov	r2, #6
   36a1c:	e2831001 	add	r1, r3, #1
   36a20:	eafffe94 	b	36478 <memcpy>
   36a24:	e3031498 	movw	r1, #13464	; 0x3498
   36a28:	e3401004 	movt	r1, #4
   36a2c:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   36a30:	e3400003 	movt	r0, #3
   36a34:	e3a02047 	mov	r2, #71	; 0x47
   36a38:	ebffd7a0 	bl	2c8c0 <assertion_failed>
   36a3c:	e3031498 	movw	r1, #13464	; 0x3498
   36a40:	e3401004 	movt	r1, #4
   36a44:	e30c05d4 	movw	r0, #50644	; 0xc5d4
   36a48:	e3400003 	movt	r0, #3
   36a4c:	e3a02048 	mov	r2, #72	; 0x48
   36a50:	ebffd79a 	bl	2c8c0 <assertion_failed>

00036a54 <CMACAddress::IsBroadcast() const>:
   36a54:	e1a03000 	mov	r3, r0
   36a58:	e5d00000 	ldrb	r0, [r0]
   36a5c:	e3500000 	cmp	r0, #0
   36a60:	12831006 	addne	r1, r3, #6
   36a64:	1a000002 	bne	36a74 <CMACAddress::IsBroadcast() const+0x20>
   36a68:	ea000006 	b	36a88 <CMACAddress::IsBroadcast() const+0x34>
   36a6c:	e1530001 	cmp	r3, r1
   36a70:	012fff1e 	bxeq	lr
   36a74:	e5f32001 	ldrb	r2, [r3, #1]!
   36a78:	e35200ff 	cmp	r2, #255	; 0xff
   36a7c:	0afffffa 	beq	36a6c <CMACAddress::IsBroadcast() const+0x18>
   36a80:	e3a00000 	mov	r0, #0
   36a84:	e12fff1e 	bx	lr
   36a88:	e3031498 	movw	r1, #13464	; 0x3498
   36a8c:	e3401004 	movt	r1, #4
   36a90:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   36a94:	e3400003 	movt	r0, #3
   36a98:	e3a0204e 	mov	r2, #78	; 0x4e
   36a9c:	e92d4010 	push	{r4, lr}
   36aa0:	ebffd786 	bl	2c8c0 <assertion_failed>

00036aa4 <CMACAddress::GetSize() const>:
   36aa4:	e3a00006 	mov	r0, #6
   36aa8:	e12fff1e 	bx	lr

00036aac <CMACAddress::Format(CString*) const>:
   36aac:	e5d03000 	ldrb	r3, [r0]
   36ab0:	e1a02000 	mov	r2, r0
   36ab4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   36ab8:	e3530000 	cmp	r3, #0
   36abc:	e24dd014 	sub	sp, sp, #20
   36ac0:	0a000010 	beq	36b08 <CMACAddress::Format(CString*) const+0x5c>
   36ac4:	e1a00001 	mov	r0, r1
   36ac8:	e3510000 	cmp	r1, #0
   36acc:	0a000013 	beq	36b20 <CMACAddress::Format(CString*) const+0x74>
   36ad0:	e5d21006 	ldrb	r1, [r2, #6]
   36ad4:	e5d23005 	ldrb	r3, [r2, #5]
   36ad8:	e5d2c004 	ldrb	ip, [r2, #4]
   36adc:	e58d100c 	str	r1, [sp, #12]
   36ae0:	e58d3008 	str	r3, [sp, #8]
   36ae4:	e5d21003 	ldrb	r1, [r2, #3]
   36ae8:	e5d23002 	ldrb	r3, [r2, #2]
   36aec:	e5d22001 	ldrb	r2, [r2, #1]
   36af0:	e88d1002 	stm	sp, {r1, ip}
   36af4:	e30314a8 	movw	r1, #13480	; 0x34a8
   36af8:	e3401004 	movt	r1, #4
   36afc:	ebfff861 	bl	34c88 <CString::Format(char const*, ...)>
   36b00:	e28dd014 	add	sp, sp, #20
   36b04:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   36b08:	e3031498 	movw	r1, #13464	; 0x3498
   36b0c:	e3401004 	movt	r1, #4
   36b10:	e30d0ac0 	movw	r0, #56000	; 0xdac0
   36b14:	e3400003 	movt	r0, #3
   36b18:	e3a02062 	mov	r2, #98	; 0x62
   36b1c:	ebffd767 	bl	2c8c0 <assertion_failed>
   36b20:	e3031498 	movw	r1, #13464	; 0x3498
   36b24:	e3401004 	movt	r1, #4
   36b28:	e3010720 	movw	r0, #5920	; 0x1720
   36b2c:	e3400004 	movt	r0, #4
   36b30:	e3a02063 	mov	r2, #99	; 0x63
   36b34:	ebffd761 	bl	2c8c0 <assertion_failed>

00036b38 <CNetDevice::AddNetDevice()>:
   36b38:	e3043f90 	movw	r3, #20368	; 0x4f90
   36b3c:	e3403004 	movt	r3, #4
   36b40:	e5932000 	ldr	r2, [r3]
   36b44:	e3520004 	cmp	r2, #4
   36b48:	90831102 	addls	r1, r3, r2, lsl #2
   36b4c:	92822001 	addls	r2, r2, #1
   36b50:	95832000 	strls	r2, [r3]
   36b54:	95810008 	strls	r0, [r1, #8]
   36b58:	e12fff1e 	bx	lr

00036b5c <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   36b5c:	e3500005 	cmp	r0, #5
   36b60:	93043de8 	movwls	r3, #19944	; 0x4de8
   36b64:	93403004 	movtls	r3, #4
   36b68:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   36b6c:	830304c8 	movwhi	r0, #13512	; 0x34c8
   36b70:	83400004 	movthi	r0, #4
   36b74:	e12fff1e 	bx	lr

00036b78 <CNetDevice::GetNetDevice(unsigned int)>:
   36b78:	e3043f90 	movw	r3, #20368	; 0x4f90
   36b7c:	e3403004 	movt	r3, #4
   36b80:	e5932000 	ldr	r2, [r3]
   36b84:	e1520000 	cmp	r2, r0
   36b88:	80833100 	addhi	r3, r3, r0, lsl #2
   36b8c:	85930008 	ldrhi	r0, [r3, #8]
   36b90:	93a00000 	movls	r0, #0
   36b94:	e12fff1e 	bx	lr

00036b98 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   36b98:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36b9c:	e3047f90 	movw	r7, #20368	; 0x4f90
   36ba0:	e3407004 	movt	r7, #4
   36ba4:	e5973000 	ldr	r3, [r7]
   36ba8:	e3530000 	cmp	r3, #0
   36bac:	0a00001f 	beq	36c30 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   36bb0:	e5974008 	ldr	r4, [r7, #8]
   36bb4:	e287600c 	add	r6, r7, #12
   36bb8:	e3540000 	cmp	r4, #0
   36bbc:	0a00001b 	beq	36c30 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   36bc0:	e1a08000 	mov	r8, r0
   36bc4:	e3500002 	cmp	r0, #2
   36bc8:	0a000016 	beq	36c28 <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   36bcc:	e30b975c 	movw	r9, #46940	; 0xb75c
   36bd0:	e3409001 	movt	r9, #1
   36bd4:	e3a05000 	mov	r5, #0
   36bd8:	ea000008 	b	36c00 <CNetDevice::GetNetDevice(TNetDeviceType)+0x68>
   36bdc:	e2855001 	add	r5, r5, #1
   36be0:	e1500008 	cmp	r0, r8
   36be4:	0a00000f 	beq	36c28 <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   36be8:	e5973000 	ldr	r3, [r7]
   36bec:	e1530005 	cmp	r3, r5
   36bf0:	9a00000e 	bls	36c30 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   36bf4:	e4964004 	ldr	r4, [r6], #4
   36bf8:	e3540000 	cmp	r4, #0
   36bfc:	0a00000b 	beq	36c30 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   36c00:	e5943000 	ldr	r3, [r4]
   36c04:	e3a00000 	mov	r0, #0
   36c08:	e5933008 	ldr	r3, [r3, #8]
   36c0c:	e1530009 	cmp	r3, r9
   36c10:	0afffff1 	beq	36bdc <CNetDevice::GetNetDevice(TNetDeviceType)+0x44>
   36c14:	e1a00004 	mov	r0, r4
   36c18:	e2855001 	add	r5, r5, #1
   36c1c:	e12fff33 	blx	r3
   36c20:	e1500008 	cmp	r0, r8
   36c24:	1affffef 	bne	36be8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x50>
   36c28:	e1a00004 	mov	r0, r4
   36c2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36c30:	e3a04000 	mov	r4, #0
   36c34:	e1a00004 	mov	r0, r4
   36c38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00036c3c <operator new(unsigned int, int)>:
   36c3c:	e3d13002 	bics	r3, r1, #2
   36c40:	0a000001 	beq	36c4c <operator new(unsigned int, int)+0x10>
   36c44:	e3a00000 	mov	r0, #0
   36c48:	e12fff1e 	bx	lr
   36c4c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36c50:	e3403004 	movt	r3, #4
   36c54:	e1a01000 	mov	r1, r0
   36c58:	e5930000 	ldr	r0, [r3]
   36c5c:	e280000c 	add	r0, r0, #12
   36c60:	ea00004f 	b	36da4 <CHeapAllocator::Allocate(unsigned int)>

00036c64 <operator new[](unsigned int, int)>:
   36c64:	e3d13002 	bics	r3, r1, #2
   36c68:	0a000001 	beq	36c74 <operator new[](unsigned int, int)+0x10>
   36c6c:	e3a00000 	mov	r0, #0
   36c70:	e12fff1e 	bx	lr
   36c74:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36c78:	e3403004 	movt	r3, #4
   36c7c:	e1a01000 	mov	r1, r0
   36c80:	e5930000 	ldr	r0, [r3]
   36c84:	e280000c 	add	r0, r0, #12
   36c88:	ea000045 	b	36da4 <CHeapAllocator::Allocate(unsigned int)>

00036c8c <operator new(unsigned int, void*)>:
   36c8c:	e1a00001 	mov	r0, r1
   36c90:	e12fff1e 	bx	lr

00036c94 <operator new[](unsigned int, void*)>:
   36c94:	e1a00001 	mov	r0, r1
   36c98:	e12fff1e 	bx	lr

00036c9c <operator new(unsigned int)>:
   36c9c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36ca0:	e3403004 	movt	r3, #4
   36ca4:	e1a01000 	mov	r1, r0
   36ca8:	e5930000 	ldr	r0, [r3]
   36cac:	e280000c 	add	r0, r0, #12
   36cb0:	ea00003b 	b	36da4 <CHeapAllocator::Allocate(unsigned int)>

00036cb4 <operator new[](unsigned int)>:
   36cb4:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36cb8:	e3403004 	movt	r3, #4
   36cbc:	e1a01000 	mov	r1, r0
   36cc0:	e5930000 	ldr	r0, [r3]
   36cc4:	e280000c 	add	r0, r0, #12
   36cc8:	ea000035 	b	36da4 <CHeapAllocator::Allocate(unsigned int)>

00036ccc <operator delete(void*)>:
   36ccc:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36cd0:	e3403004 	movt	r3, #4
   36cd4:	e1a01000 	mov	r1, r0
   36cd8:	e5930000 	ldr	r0, [r3]
   36cdc:	e280000c 	add	r0, r0, #12
   36ce0:	ea0000a9 	b	36f8c <CHeapAllocator::Free(void*)>

00036ce4 <operator delete[](void*)>:
   36ce4:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36ce8:	e3403004 	movt	r3, #4
   36cec:	e1a01000 	mov	r1, r0
   36cf0:	e5930000 	ldr	r0, [r3]
   36cf4:	e280000c 	add	r0, r0, #12
   36cf8:	ea0000a3 	b	36f8c <CHeapAllocator::Free(void*)>

00036cfc <operator delete(void*, unsigned int)>:
   36cfc:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36d00:	e3403004 	movt	r3, #4
   36d04:	e1a01000 	mov	r1, r0
   36d08:	e5930000 	ldr	r0, [r3]
   36d0c:	e280000c 	add	r0, r0, #12
   36d10:	ea00009d 	b	36f8c <CHeapAllocator::Free(void*)>

00036d14 <operator delete[](void*, unsigned int)>:
   36d14:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   36d18:	e3403004 	movt	r3, #4
   36d1c:	e1a01000 	mov	r1, r0
   36d20:	e5930000 	ldr	r0, [r3]
   36d24:	e280000c 	add	r0, r0, #12
   36d28:	ea000097 	b	36f8c <CHeapAllocator::Free(void*)>

00036d2c <CHeapAllocator::CHeapAllocator(char const*)>:
   36d2c:	e92d4010 	push	{r4, lr}
   36d30:	e1a04000 	mov	r4, r0
   36d34:	e3a03000 	mov	r3, #0
   36d38:	e3a00001 	mov	r0, #1
   36d3c:	e3a020a8 	mov	r2, #168	; 0xa8
   36d40:	e884000a 	stm	r4, {r1, r3}
   36d44:	e1a01003 	mov	r1, r3
   36d48:	e5843008 	str	r3, [r4, #8]
   36d4c:	e584300c 	str	r3, [r4, #12]
   36d50:	e58400b8 	str	r0, [r4, #184]	; 0xb8
   36d54:	e2840010 	add	r0, r4, #16
   36d58:	ebfffdaf 	bl	3641c <memset>
   36d5c:	e59f3020 	ldr	r3, [pc, #32]	; 36d84 <CHeapAllocator::CHeapAllocator(char const*)+0x58>
   36d60:	e1a02004 	mov	r2, r4
   36d64:	e283001c 	add	r0, r3, #28
   36d68:	e2822008 	add	r2, r2, #8
   36d6c:	e5b31004 	ldr	r1, [r3, #4]!
   36d70:	e1530000 	cmp	r3, r0
   36d74:	e5821008 	str	r1, [r2, #8]
   36d78:	1afffffa 	bne	36d68 <CHeapAllocator::CHeapAllocator(char const*)+0x3c>
   36d7c:	e1a00004 	mov	r0, r4
   36d80:	e8bd8010 	pop	{r4, pc}
   36d84:	00044dfc 	.word	0x00044dfc

00036d88 <CHeapAllocator::~CHeapAllocator()>:
   36d88:	e12fff1e 	bx	lr

00036d8c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   36d8c:	e0812002 	add	r2, r1, r2
   36d90:	e980000e 	stmib	r0, {r1, r2, r3}
   36d94:	e12fff1e 	bx	lr

00036d98 <CHeapAllocator::GetFreeSpace() const>:
   36d98:	e9900005 	ldmib	r0, {r0, r2}
   36d9c:	e0420000 	sub	r0, r2, r0
   36da0:	e12fff1e 	bx	lr

00036da4 <CHeapAllocator::Allocate(unsigned int)>:
   36da4:	e5903004 	ldr	r3, [r0, #4]
   36da8:	e3530000 	cmp	r3, #0
   36dac:	0a000074 	beq	36f84 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   36db0:	e92d4070 	push	{r4, r5, r6, lr}
   36db4:	e1a06000 	mov	r6, r0
   36db8:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   36dbc:	e1a04001 	mov	r4, r1
   36dc0:	e3500000 	cmp	r0, #0
   36dc4:	1a000060 	bne	36f4c <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   36dc8:	e5963010 	ldr	r3, [r6, #16]
   36dcc:	e2862010 	add	r2, r6, #16
   36dd0:	e3530000 	cmp	r3, #0
   36dd4:	1a000003 	bne	36de8 <CHeapAllocator::Allocate(unsigned int)+0x44>
   36dd8:	ea00002c 	b	36e90 <CHeapAllocator::Allocate(unsigned int)+0xec>
   36ddc:	e5b23008 	ldr	r3, [r2, #8]!
   36de0:	e3530000 	cmp	r3, #0
   36de4:	0a000029 	beq	36e90 <CHeapAllocator::Allocate(unsigned int)+0xec>
   36de8:	e1530004 	cmp	r3, r4
   36dec:	3afffffa 	bcc	36ddc <CHeapAllocator::Allocate(unsigned int)+0x38>
   36df0:	e5925004 	ldr	r5, [r2, #4]
   36df4:	e3550000 	cmp	r5, #0
   36df8:	0a000023 	beq	36e8c <CHeapAllocator::Allocate(unsigned int)+0xe8>
   36dfc:	e5d51001 	ldrb	r1, [r5, #1]
   36e00:	e5d53000 	ldrb	r3, [r5]
   36e04:	e1833401 	orr	r3, r3, r1, lsl #8
   36e08:	e5d51002 	ldrb	r1, [r5, #2]
   36e0c:	e1833801 	orr	r3, r3, r1, lsl #16
   36e10:	e5d51003 	ldrb	r1, [r5, #3]
   36e14:	e1833c01 	orr	r3, r3, r1, lsl #24
   36e18:	e3041d43 	movw	r1, #19779	; 0x4d43
   36e1c:	e344124c 	movt	r1, #16972	; 0x424c
   36e20:	e1530001 	cmp	r3, r1
   36e24:	1a000050 	bne	36f6c <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   36e28:	e5d51009 	ldrb	r1, [r5, #9]
   36e2c:	e5d53008 	ldrb	r3, [r5, #8]
   36e30:	e1833401 	orr	r3, r3, r1, lsl #8
   36e34:	e5d5100a 	ldrb	r1, [r5, #10]
   36e38:	e1833801 	orr	r3, r3, r1, lsl #16
   36e3c:	e5d5100b 	ldrb	r1, [r5, #11]
   36e40:	e1833c01 	orr	r3, r3, r1, lsl #24
   36e44:	e5823004 	str	r3, [r2, #4]
   36e48:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   36e4c:	e3530000 	cmp	r3, #0
   36e50:	1a00002c 	bne	36f08 <CHeapAllocator::Allocate(unsigned int)+0x164>
   36e54:	e315003f 	tst	r5, #63	; 0x3f
   36e58:	e3a03000 	mov	r3, #0
   36e5c:	e2850040 	add	r0, r5, #64	; 0x40
   36e60:	e5c53008 	strb	r3, [r5, #8]
   36e64:	e5c53009 	strb	r3, [r5, #9]
   36e68:	e5c5300a 	strb	r3, [r5, #10]
   36e6c:	e5c5300b 	strb	r3, [r5, #11]
   36e70:	08bd8070 	popeq	{r4, r5, r6, pc}
   36e74:	e3031560 	movw	r1, #13664	; 0x3560
   36e78:	e3401004 	movt	r1, #4
   36e7c:	e30305b0 	movw	r0, #13744	; 0x35b0
   36e80:	e3400004 	movt	r0, #4
   36e84:	e3a0208e 	mov	r2, #142	; 0x8e
   36e88:	ebffd68c 	bl	2c8c0 <assertion_failed>
   36e8c:	e1a04003 	mov	r4, r3
   36e90:	e5965004 	ldr	r5, [r6, #4]
   36e94:	e284307f 	add	r3, r4, #127	; 0x7f
   36e98:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   36e9c:	e596100c 	ldr	r1, [r6, #12]
   36ea0:	e0853003 	add	r3, r5, r3
   36ea4:	e1550003 	cmp	r5, r3
   36ea8:	2a000018 	bcs	36f10 <CHeapAllocator::Allocate(unsigned int)+0x16c>
   36eac:	e5962008 	ldr	r2, [r6, #8]
   36eb0:	e0422001 	sub	r2, r2, r1
   36eb4:	e1530002 	cmp	r3, r2
   36eb8:	8a000014 	bhi	36f10 <CHeapAllocator::Allocate(unsigned int)+0x16c>
   36ebc:	e5863004 	str	r3, [r6, #4]
   36ec0:	e3a02043 	mov	r2, #67	; 0x43
   36ec4:	e3a0304d 	mov	r3, #77	; 0x4d
   36ec8:	e5c52000 	strb	r2, [r5]
   36ecc:	e5c53001 	strb	r3, [r5, #1]
   36ed0:	e3a0204c 	mov	r2, #76	; 0x4c
   36ed4:	e3a03042 	mov	r3, #66	; 0x42
   36ed8:	e5c52002 	strb	r2, [r5, #2]
   36edc:	e5c53003 	strb	r3, [r5, #3]
   36ee0:	e7e72454 	ubfx	r2, r4, #8, #8
   36ee4:	e7e73854 	ubfx	r3, r4, #16, #8
   36ee8:	e5c54004 	strb	r4, [r5, #4]
   36eec:	e5c52005 	strb	r2, [r5, #5]
   36ef0:	e1a04c24 	lsr	r4, r4, #24
   36ef4:	e5c53006 	strb	r3, [r5, #6]
   36ef8:	e5c54007 	strb	r4, [r5, #7]
   36efc:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   36f00:	e3530000 	cmp	r3, #0
   36f04:	0affffd2 	beq	36e54 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   36f08:	eb0005a6 	bl	385a8 <LeaveCritical>
   36f0c:	eaffffd0 	b	36e54 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   36f10:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   36f14:	e3510000 	cmp	r1, #0
   36f18:	0a00000d 	beq	36f54 <CHeapAllocator::Allocate(unsigned int)+0x1b0>
   36f1c:	e3a02000 	mov	r2, #0
   36f20:	e586200c 	str	r2, [r6, #12]
   36f24:	e1530002 	cmp	r3, r2
   36f28:	1a00000d 	bne	36f64 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   36f2c:	ebffe0e0 	bl	2f2b4 <CLogger::Get()>
   36f30:	e30335a0 	movw	r3, #13728	; 0x35a0
   36f34:	e3403004 	movt	r3, #4
   36f38:	e5961000 	ldr	r1, [r6]
   36f3c:	e3a02000 	mov	r2, #0
   36f40:	ebffe2a9 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36f44:	e3a00000 	mov	r0, #0
   36f48:	e8bd8070 	pop	{r4, r5, r6, pc}
   36f4c:	eb00056a 	bl	384fc <EnterCritical>
   36f50:	eaffff9c 	b	36dc8 <CHeapAllocator::Allocate(unsigned int)+0x24>
   36f54:	e3530000 	cmp	r3, #0
   36f58:	0afffff9 	beq	36f44 <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   36f5c:	eb000591 	bl	385a8 <LeaveCritical>
   36f60:	eafffff7 	b	36f44 <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   36f64:	eb00058f 	bl	385a8 <LeaveCritical>
   36f68:	eaffffef 	b	36f2c <CHeapAllocator::Allocate(unsigned int)+0x188>
   36f6c:	e3031560 	movw	r1, #13664	; 0x3560
   36f70:	e3401004 	movt	r1, #4
   36f74:	e3030574 	movw	r0, #13684	; 0x3574
   36f78:	e3400004 	movt	r0, #4
   36f7c:	e3a0205e 	mov	r2, #94	; 0x5e
   36f80:	ebffd64e 	bl	2c8c0 <assertion_failed>
   36f84:	e3a00000 	mov	r0, #0
   36f88:	e12fff1e 	bx	lr

00036f8c <CHeapAllocator::Free(void*)>:
   36f8c:	e3510000 	cmp	r1, #0
   36f90:	012fff1e 	bxeq	lr
   36f94:	e92d4070 	push	{r4, r5, r6, lr}
   36f98:	e1a05000 	mov	r5, r0
   36f9c:	e2416040 	sub	r6, r1, #64	; 0x40
   36fa0:	e5513040 	ldrb	r3, [r1, #-64]	; 0xffffffc0
   36fa4:	e551003f 	ldrb	r0, [r1, #-63]	; 0xffffffc1
   36fa8:	e551203e 	ldrb	r2, [r1, #-62]	; 0xffffffc2
   36fac:	e551103d 	ldrb	r1, [r1, #-61]	; 0xffffffc3
   36fb0:	e1833400 	orr	r3, r3, r0, lsl #8
   36fb4:	e1833802 	orr	r3, r3, r2, lsl #16
   36fb8:	e3042d43 	movw	r2, #19779	; 0x4d43
   36fbc:	e344224c 	movt	r2, #16972	; 0x424c
   36fc0:	e1833c01 	orr	r3, r3, r1, lsl #24
   36fc4:	e1530002 	cmp	r3, r2
   36fc8:	1a00002c 	bne	37080 <CHeapAllocator::Free(void*)+0xf4>
   36fcc:	e5953010 	ldr	r3, [r5, #16]
   36fd0:	e3530000 	cmp	r3, #0
   36fd4:	08bd8070 	popeq	{r4, r5, r6, pc}
   36fd8:	e5d61005 	ldrb	r1, [r6, #5]
   36fdc:	e2854010 	add	r4, r5, #16
   36fe0:	e5d62004 	ldrb	r2, [r6, #4]
   36fe4:	e1822401 	orr	r2, r2, r1, lsl #8
   36fe8:	e5d61006 	ldrb	r1, [r6, #6]
   36fec:	e1822801 	orr	r2, r2, r1, lsl #16
   36ff0:	e5d61007 	ldrb	r1, [r6, #7]
   36ff4:	e1822c01 	orr	r2, r2, r1, lsl #24
   36ff8:	ea000002 	b	37008 <CHeapAllocator::Free(void*)+0x7c>
   36ffc:	e5b43008 	ldr	r3, [r4, #8]!
   37000:	e3530000 	cmp	r3, #0
   37004:	08bd8070 	popeq	{r4, r5, r6, pc}
   37008:	e1530002 	cmp	r3, r2
   3700c:	1afffffa 	bne	36ffc <CHeapAllocator::Free(void*)+0x70>
   37010:	e59500b8 	ldr	r0, [r5, #184]	; 0xb8
   37014:	e3500000 	cmp	r0, #0
   37018:	1a000009 	bne	37044 <CHeapAllocator::Free(void*)+0xb8>
   3701c:	e5943004 	ldr	r3, [r4, #4]
   37020:	e5c63008 	strb	r3, [r6, #8]
   37024:	e7e71453 	ubfx	r1, r3, #8, #8
   37028:	e7e72853 	ubfx	r2, r3, #16, #8
   3702c:	e5c61009 	strb	r1, [r6, #9]
   37030:	e1a03c23 	lsr	r3, r3, #24
   37034:	e5c6200a 	strb	r2, [r6, #10]
   37038:	e5c6300b 	strb	r3, [r6, #11]
   3703c:	e5846004 	str	r6, [r4, #4]
   37040:	e8bd8070 	pop	{r4, r5, r6, pc}
   37044:	eb00052c 	bl	384fc <EnterCritical>
   37048:	e59510b8 	ldr	r1, [r5, #184]	; 0xb8
   3704c:	e5943004 	ldr	r3, [r4, #4]
   37050:	e3510000 	cmp	r1, #0
   37054:	e5c63008 	strb	r3, [r6, #8]
   37058:	e7e72453 	ubfx	r2, r3, #8, #8
   3705c:	e5c62009 	strb	r2, [r6, #9]
   37060:	e7e72853 	ubfx	r2, r3, #16, #8
   37064:	e1a03c23 	lsr	r3, r3, #24
   37068:	e5c6200a 	strb	r2, [r6, #10]
   3706c:	e5c6300b 	strb	r3, [r6, #11]
   37070:	e5846004 	str	r6, [r4, #4]
   37074:	08bd8070 	popeq	{r4, r5, r6, pc}
   37078:	e8bd4070 	pop	{r4, r5, r6, lr}
   3707c:	ea000549 	b	385a8 <LeaveCritical>
   37080:	e3031560 	movw	r1, #13664	; 0x3560
   37084:	e3401004 	movt	r1, #4
   37088:	e3030574 	movw	r0, #13684	; 0x3574
   3708c:	e3400004 	movt	r0, #4
   37090:	e3a020bf 	mov	r2, #191	; 0xbf
   37094:	ebffd609 	bl	2c8c0 <assertion_failed>

00037098 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   37098:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3709c:	e2514000 	subs	r4, r1, #0
   370a0:	0a00002c 	beq	37158 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc0>
   370a4:	e3520000 	cmp	r2, #0
   370a8:	0a00002d 	beq	37164 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xcc>
   370ac:	e554103f 	ldrb	r1, [r4, #-63]	; 0xffffffc1
   370b0:	e2446040 	sub	r6, r4, #64	; 0x40
   370b4:	e5543040 	ldrb	r3, [r4, #-64]	; 0xffffffc0
   370b8:	e1833401 	orr	r3, r3, r1, lsl #8
   370bc:	e554103e 	ldrb	r1, [r4, #-62]	; 0xffffffc2
   370c0:	e1833801 	orr	r3, r3, r1, lsl #16
   370c4:	e554103d 	ldrb	r1, [r4, #-61]	; 0xffffffc3
   370c8:	e1833c01 	orr	r3, r3, r1, lsl #24
   370cc:	e3041d43 	movw	r1, #19779	; 0x4d43
   370d0:	e344124c 	movt	r1, #16972	; 0x424c
   370d4:	e1530001 	cmp	r3, r1
   370d8:	1a000024 	bne	37170 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   370dc:	e5d61005 	ldrb	r1, [r6, #5]
   370e0:	e5d63004 	ldrb	r3, [r6, #4]
   370e4:	e1833401 	orr	r3, r3, r1, lsl #8
   370e8:	e5d61006 	ldrb	r1, [r6, #6]
   370ec:	e1833801 	orr	r3, r3, r1, lsl #16
   370f0:	e5d61007 	ldrb	r1, [r6, #7]
   370f4:	e1833c01 	orr	r3, r3, r1, lsl #24
   370f8:	e1530002 	cmp	r3, r2
   370fc:	21a07004 	movcs	r7, r4
   37100:	3a000001 	bcc	3710c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x74>
   37104:	e1a00007 	mov	r0, r7
   37108:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3710c:	e1a01002 	mov	r1, r2
   37110:	e1a05000 	mov	r5, r0
   37114:	ebffff22 	bl	36da4 <CHeapAllocator::Allocate(unsigned int)>
   37118:	e2507000 	subs	r7, r0, #0
   3711c:	0a000011 	beq	37168 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd0>
   37120:	e5d62005 	ldrb	r2, [r6, #5]
   37124:	e1a01004 	mov	r1, r4
   37128:	e5d63004 	ldrb	r3, [r6, #4]
   3712c:	e1833402 	orr	r3, r3, r2, lsl #8
   37130:	e5d62006 	ldrb	r2, [r6, #6]
   37134:	e1833802 	orr	r3, r3, r2, lsl #16
   37138:	e5d62007 	ldrb	r2, [r6, #7]
   3713c:	e1832c02 	orr	r2, r3, r2, lsl #24
   37140:	ebfffccc 	bl	36478 <memcpy>
   37144:	e1a00005 	mov	r0, r5
   37148:	e1a01004 	mov	r1, r4
   3714c:	ebffff8e 	bl	36f8c <CHeapAllocator::Free(void*)>
   37150:	e1a00007 	mov	r0, r7
   37154:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37158:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3715c:	e1a01002 	mov	r1, r2
   37160:	eaffff0f 	b	36da4 <CHeapAllocator::Allocate(unsigned int)>
   37164:	ebffff88 	bl	36f8c <CHeapAllocator::Free(void*)>
   37168:	e3a07000 	mov	r7, #0
   3716c:	eaffffe4 	b	37104 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   37170:	e3031560 	movw	r1, #13664	; 0x3560
   37174:	e3401004 	movt	r1, #4
   37178:	e3030574 	movw	r0, #13684	; 0x3574
   3717c:	e3400004 	movt	r0, #4
   37180:	e3a020a3 	mov	r2, #163	; 0xa3
   37184:	ebffd5cd 	bl	2c8c0 <assertion_failed>

00037188 <CNumberPool::CNumberPool(unsigned int, unsigned int)>:
   37188:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   3718c:	e92d4010 	push	{r4, lr}
   37190:	e352003f 	cmp	r2, #63	; 0x3f
   37194:	e8800006 	stm	r0, {r1, r2}
   37198:	edc00b02 	vstr	d16, [r0, #8]
   3719c:	8a000007 	bhi	371c0 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x38>
   371a0:	e1510002 	cmp	r1, r2
   371a4:	98bd8010 	popls	{r4, pc}
   371a8:	e30315dc 	movw	r1, #13788	; 0x35dc
   371ac:	e3401004 	movt	r1, #4
   371b0:	e30305fc 	movw	r0, #13820	; 0x35fc
   371b4:	e3400004 	movt	r0, #4
   371b8:	e3a0201e 	mov	r2, #30
   371bc:	ebffd5bf 	bl	2c8c0 <assertion_failed>
   371c0:	e30315dc 	movw	r1, #13788	; 0x35dc
   371c4:	e3401004 	movt	r1, #4
   371c8:	e30305ec 	movw	r0, #13804	; 0x35ec
   371cc:	e3400004 	movt	r0, #4
   371d0:	e3a0201d 	mov	r2, #29
   371d4:	ebffd5b9 	bl	2c8c0 <assertion_failed>

000371d8 <CNumberPool::~CNumberPool()>:
   371d8:	e12fff1e 	bx	lr

000371dc <CNumberPool::AllocateNumber(bool, char const*)>:
   371dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   371e0:	e1a06000 	mov	r6, r0
   371e4:	e5900000 	ldr	r0, [r0]
   371e8:	e1a04002 	mov	r4, r2
   371ec:	e596e004 	ldr	lr, [r6, #4]
   371f0:	e150000e 	cmp	r0, lr
   371f4:	8a000013 	bhi	37248 <CNumberPool::AllocateNumber(bool, char const*)+0x6c>
   371f8:	e3a07001 	mov	r7, #1
   371fc:	e5965008 	ldr	r5, [r6, #8]
   37200:	e596200c 	ldr	r2, [r6, #12]
   37204:	e1a03017 	lsl	r3, r7, r0
   37208:	e0058003 	and	r8, r5, r3
   3720c:	e1a0c003 	mov	ip, r3
   37210:	e1a03fc3 	asr	r3, r3, #31
   37214:	e0029003 	and	r9, r2, r3
   37218:	e1988009 	orrs	r8, r8, r9
   3721c:	1a000006 	bne	3723c <CNumberPool::AllocateNumber(bool, char const*)+0x60>
   37220:	ea000014 	b	37278 <CNumberPool::AllocateNumber(bool, char const*)+0x9c>
   37224:	e1a0c017 	lsl	ip, r7, r0
   37228:	e00c8005 	and	r8, ip, r5
   3722c:	e1a03fcc 	asr	r3, ip, #31
   37230:	e0039002 	and	r9, r3, r2
   37234:	e1988009 	orrs	r8, r8, r9
   37238:	0a00000e 	beq	37278 <CNumberPool::AllocateNumber(bool, char const*)+0x9c>
   3723c:	e2800001 	add	r0, r0, #1
   37240:	e150000e 	cmp	r0, lr
   37244:	9afffff6 	bls	37224 <CNumberPool::AllocateNumber(bool, char const*)+0x48>
   37248:	e3510000 	cmp	r1, #0
   3724c:	0a000007 	beq	37270 <CNumberPool::AllocateNumber(bool, char const*)+0x94>
   37250:	e3540000 	cmp	r4, #0
   37254:	0a00000c 	beq	3728c <CNumberPool::AllocateNumber(bool, char const*)+0xb0>
   37258:	ebffe015 	bl	2f2b4 <CLogger::Get()>
   3725c:	e3033618 	movw	r3, #13848	; 0x3618
   37260:	e3403004 	movt	r3, #4
   37264:	e3a02000 	mov	r2, #0
   37268:	e1a01004 	mov	r1, r4
   3726c:	ebffe1de 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37270:	e3a00040 	mov	r0, #64	; 0x40
   37274:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37278:	e18cc005 	orr	ip, ip, r5
   3727c:	e1833002 	orr	r3, r3, r2
   37280:	e586c008 	str	ip, [r6, #8]
   37284:	e586300c 	str	r3, [r6, #12]
   37288:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3728c:	e30315dc 	movw	r1, #13788	; 0x35dc
   37290:	e3401004 	movt	r1, #4
   37294:	e303060c 	movw	r0, #13836	; 0x360c
   37298:	e3400004 	movt	r0, #4
   3729c:	e3a02034 	mov	r2, #52	; 0x34
   372a0:	ebffd586 	bl	2c8c0 <assertion_failed>

000372a4 <CNumberPool::FreeNumber(unsigned int)>:
   372a4:	e5903000 	ldr	r3, [r0]
   372a8:	e92d4010 	push	{r4, lr}
   372ac:	e1530001 	cmp	r3, r1
   372b0:	8a000010 	bhi	372f8 <CNumberPool::FreeNumber(unsigned int)+0x54>
   372b4:	e5903004 	ldr	r3, [r0, #4]
   372b8:	e1530001 	cmp	r3, r1
   372bc:	3a00000d 	bcc	372f8 <CNumberPool::FreeNumber(unsigned int)+0x54>
   372c0:	e3a03001 	mov	r3, #1
   372c4:	e590200c 	ldr	r2, [r0, #12]
   372c8:	e590c008 	ldr	ip, [r0, #8]
   372cc:	e1a03113 	lsl	r3, r3, r1
   372d0:	e003100c 	and	r1, r3, ip
   372d4:	e002efc3 	and	lr, r2, r3, asr #31
   372d8:	e191100e 	orrs	r1, r1, lr
   372dc:	0a00000b 	beq	37310 <CNumberPool::FreeNumber(unsigned int)+0x6c>
   372e0:	e1e01003 	mvn	r1, r3
   372e4:	e1ccc003 	bic	ip, ip, r3
   372e8:	e580c008 	str	ip, [r0, #8]
   372ec:	e0022fc1 	and	r2, r2, r1, asr #31
   372f0:	e580200c 	str	r2, [r0, #12]
   372f4:	e8bd8010 	pop	{r4, pc}
   372f8:	e30315dc 	movw	r1, #13788	; 0x35dc
   372fc:	e3401004 	movt	r1, #4
   37300:	e3030630 	movw	r0, #13872	; 0x3630
   37304:	e3400004 	movt	r0, #4
   37308:	e3a02042 	mov	r2, #66	; 0x42
   3730c:	ebffd56b 	bl	2c8c0 <assertion_failed>
   37310:	e30315dc 	movw	r1, #13788	; 0x35dc
   37314:	e3401004 	movt	r1, #4
   37318:	e3030658 	movw	r0, #13912	; 0x3658
   3731c:	e3400004 	movt	r0, #4
   37320:	e3a02043 	mov	r2, #67	; 0x43
   37324:	ebffd565 	bl	2c8c0 <assertion_failed>

00037328 <TPtrListElement::operator new(unsigned int)>:
   37328:	e3500010 	cmp	r0, #16
   3732c:	e92d4010 	push	{r4, lr}
   37330:	1a000006 	bne	37350 <TPtrListElement::operator new(unsigned int)+0x28>
   37334:	e3043fac 	movw	r3, #20396	; 0x4fac
   37338:	e3403004 	movt	r3, #4
   3733c:	e5930000 	ldr	r0, [r3]
   37340:	e3500000 	cmp	r0, #0
   37344:	0a000007 	beq	37368 <TPtrListElement::operator new(unsigned int)+0x40>
   37348:	e8bd4010 	pop	{r4, lr}
   3734c:	eaffd6a4 	b	2cde4 <CClassAllocator::Allocate()>
   37350:	e3031670 	movw	r1, #13936	; 0x3670
   37354:	e3401004 	movt	r1, #4
   37358:	e3030680 	movw	r0, #13952	; 0x3680
   3735c:	e3400004 	movt	r0, #4
   37360:	e3a02027 	mov	r2, #39	; 0x27
   37364:	ebffd555 	bl	2c8c0 <assertion_failed>
   37368:	e3031670 	movw	r1, #13936	; 0x3670
   3736c:	e3401004 	movt	r1, #4
   37370:	e30b0048 	movw	r0, #45128	; 0xb048
   37374:	e3400003 	movt	r0, #3
   37378:	e3a02027 	mov	r2, #39	; 0x27
   3737c:	ebffd54f 	bl	2c8c0 <assertion_failed>

00037380 <TPtrListElement::operator delete(void*, unsigned int)>:
   37380:	e3510010 	cmp	r1, #16
   37384:	e92d4010 	push	{r4, lr}
   37388:	1a000008 	bne	373b0 <TPtrListElement::operator delete(void*, unsigned int)+0x30>
   3738c:	e3042fac 	movw	r2, #20396	; 0x4fac
   37390:	e3402004 	movt	r2, #4
   37394:	e1a03000 	mov	r3, r0
   37398:	e5920000 	ldr	r0, [r2]
   3739c:	e3500000 	cmp	r0, #0
   373a0:	0a000008 	beq	373c8 <TPtrListElement::operator delete(void*, unsigned int)+0x48>
   373a4:	e8bd4010 	pop	{r4, lr}
   373a8:	e1a01003 	mov	r1, r3
   373ac:	eaffd6c7 	b	2ced0 <CClassAllocator::Free(void*)>
   373b0:	e3031670 	movw	r1, #13936	; 0x3670
   373b4:	e3401004 	movt	r1, #4
   373b8:	e3030680 	movw	r0, #13952	; 0x3680
   373bc:	e3400004 	movt	r0, #4
   373c0:	e3a02027 	mov	r2, #39	; 0x27
   373c4:	ebffd53d 	bl	2c8c0 <assertion_failed>
   373c8:	e3031670 	movw	r1, #13936	; 0x3670
   373cc:	e3401004 	movt	r1, #4
   373d0:	e30b0048 	movw	r0, #45128	; 0xb048
   373d4:	e3400003 	movt	r0, #3
   373d8:	e3a02027 	mov	r2, #39	; 0x27
   373dc:	ebffd537 	bl	2c8c0 <assertion_failed>

000373e0 <TPtrListElement::InitAllocator(unsigned int)>:
   373e0:	e92d4070 	push	{r4, r5, r6, lr}
   373e4:	e3044fac 	movw	r4, #20396	; 0x4fac
   373e8:	e3404004 	movt	r4, #4
   373ec:	e5943000 	ldr	r3, [r4]
   373f0:	e3530000 	cmp	r3, #0
   373f4:	1a00000a 	bne	37424 <TPtrListElement::InitAllocator(unsigned int)+0x44>
   373f8:	e1a05000 	mov	r5, r0
   373fc:	e3a00020 	mov	r0, #32
   37400:	ebfffe25 	bl	36c9c <operator new(unsigned int)>
   37404:	e1a02005 	mov	r2, r5
   37408:	e3a01010 	mov	r1, #16
   3740c:	e30336a4 	movw	r3, #13988	; 0x36a4
   37410:	e3403004 	movt	r3, #4
   37414:	e1a05000 	mov	r5, r0
   37418:	ebffd613 	bl	2cc6c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   3741c:	e5845000 	str	r5, [r4]
   37420:	e8bd8070 	pop	{r4, r5, r6, pc}
   37424:	e3031670 	movw	r1, #13936	; 0x3670
   37428:	e3401004 	movt	r1, #4
   3742c:	e30b0090 	movw	r0, #45200	; 0xb090
   37430:	e3400003 	movt	r0, #3
   37434:	e3a02027 	mov	r2, #39	; 0x27
   37438:	ebffd520 	bl	2c8c0 <assertion_failed>

0003743c <TPtrListElement::InitProtectedAllocator(unsigned int, unsigned int)>:
   3743c:	e92d4070 	push	{r4, r5, r6, lr}
   37440:	e3044fac 	movw	r4, #20396	; 0x4fac
   37444:	e3404004 	movt	r4, #4
   37448:	e1a05000 	mov	r5, r0
   3744c:	e24dd008 	sub	sp, sp, #8
   37450:	e1a06001 	mov	r6, r1
   37454:	e5940000 	ldr	r0, [r4]
   37458:	e3500000 	cmp	r0, #0
   3745c:	0a000004 	beq	37474 <TPtrListElement::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
   37460:	e1a02001 	mov	r2, r1
   37464:	e1a01005 	mov	r1, r5
   37468:	e28dd008 	add	sp, sp, #8
   3746c:	e8bd4070 	pop	{r4, r5, r6, lr}
   37470:	eaffd617 	b	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
   37474:	e3a00020 	mov	r0, #32
   37478:	ebfffe07 	bl	36c9c <operator new(unsigned int)>
   3747c:	e1a02005 	mov	r2, r5
   37480:	e1a03006 	mov	r3, r6
   37484:	e3a01010 	mov	r1, #16
   37488:	e303c6a4 	movw	ip, #13988	; 0x36a4
   3748c:	e340c004 	movt	ip, #4
   37490:	e58dc000 	str	ip, [sp]
   37494:	e1a05000 	mov	r5, r0
   37498:	ebffd5ff 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   3749c:	e5845000 	str	r5, [r4]
   374a0:	e28dd008 	add	sp, sp, #8
   374a4:	e8bd8070 	pop	{r4, r5, r6, pc}

000374a8 <CPtrListFIQ::CPtrListFIQ(unsigned int)>:
   374a8:	e92d4070 	push	{r4, r5, r6, lr}
   374ac:	e3046fac 	movw	r6, #20396	; 0x4fac
   374b0:	e3406004 	movt	r6, #4
   374b4:	e3a03000 	mov	r3, #0
   374b8:	e1a04000 	mov	r4, r0
   374bc:	e5803000 	str	r3, [r0]
   374c0:	e24dd008 	sub	sp, sp, #8
   374c4:	e5960000 	ldr	r0, [r6]
   374c8:	e1500003 	cmp	r0, r3
   374cc:	0a000004 	beq	374e4 <CPtrListFIQ::CPtrListFIQ(unsigned int)+0x3c>
   374d0:	e3a02002 	mov	r2, #2
   374d4:	ebffd5fe 	bl	2ccd4 <CClassAllocator::Extend(unsigned int, unsigned int)>
   374d8:	e1a00004 	mov	r0, r4
   374dc:	e28dd008 	add	sp, sp, #8
   374e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   374e4:	e1a05001 	mov	r5, r1
   374e8:	e3a00020 	mov	r0, #32
   374ec:	ebfffdea 	bl	36c9c <operator new(unsigned int)>
   374f0:	e1a02005 	mov	r2, r5
   374f4:	e3a03002 	mov	r3, #2
   374f8:	e3a01010 	mov	r1, #16
   374fc:	e303c6a4 	movw	ip, #13988	; 0x36a4
   37500:	e340c004 	movt	ip, #4
   37504:	e58dc000 	str	ip, [sp]
   37508:	e1a05000 	mov	r5, r0
   3750c:	ebffd5e2 	bl	2cc9c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   37510:	e1a00004 	mov	r0, r4
   37514:	e5865000 	str	r5, [r6]
   37518:	e28dd008 	add	sp, sp, #8
   3751c:	e8bd8070 	pop	{r4, r5, r6, pc}

00037520 <CPtrListFIQ::~CPtrListFIQ()>:
   37520:	e5903000 	ldr	r3, [r0]
   37524:	e3530000 	cmp	r3, #0
   37528:	012fff1e 	bxeq	lr
   3752c:	e3031670 	movw	r1, #13936	; 0x3670
   37530:	e3401004 	movt	r1, #4
   37534:	e3020efc 	movw	r0, #12028	; 0x2efc
   37538:	e3400004 	movt	r0, #4
   3753c:	e3a02031 	mov	r2, #49	; 0x31
   37540:	e92d4010 	push	{r4, lr}
   37544:	ebffd4dd 	bl	2c8c0 <assertion_failed>

00037548 <CPtrListFIQ::GetFirst()>:
   37548:	e5900000 	ldr	r0, [r0]
   3754c:	e12fff1e 	bx	lr

00037550 <CPtrListFIQ::GetNext(TPtrListElement*)>:
   37550:	e3510000 	cmp	r1, #0
   37554:	e92d4010 	push	{r4, lr}
   37558:	0a000006 	beq	37578 <CPtrListFIQ::GetNext(TPtrListElement*)+0x28>
   3755c:	e5912000 	ldr	r2, [r1]
   37560:	e3043651 	movw	r3, #18001	; 0x4651
   37564:	e345304c 	movt	r3, #20556	; 0x504c
   37568:	e1520003 	cmp	r2, r3
   3756c:	1a000007 	bne	37590 <CPtrListFIQ::GetNext(TPtrListElement*)+0x40>
   37570:	e5910008 	ldr	r0, [r1, #8]
   37574:	e8bd8010 	pop	{r4, pc}
   37578:	e3031670 	movw	r1, #13936	; 0x3670
   3757c:	e3401004 	movt	r1, #4
   37580:	e3020430 	movw	r0, #9264	; 0x2430
   37584:	e3400004 	movt	r0, #4
   37588:	e3a0203b 	mov	r2, #59	; 0x3b
   3758c:	ebffd4cb 	bl	2c8c0 <assertion_failed>
   37590:	e3031670 	movw	r1, #13936	; 0x3670
   37594:	e3401004 	movt	r1, #4
   37598:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   3759c:	e3400004 	movt	r0, #4
   375a0:	e3a0203c 	mov	r2, #60	; 0x3c
   375a4:	ebffd4c5 	bl	2c8c0 <assertion_failed>

000375a8 <CPtrListFIQ::GetPtr(TPtrListElement*)>:
   375a8:	e3510000 	cmp	r1, #0
   375ac:	e92d4010 	push	{r4, lr}
   375b0:	0a000006 	beq	375d0 <CPtrListFIQ::GetPtr(TPtrListElement*)+0x28>
   375b4:	e5912000 	ldr	r2, [r1]
   375b8:	e3043651 	movw	r3, #18001	; 0x4651
   375bc:	e345304c 	movt	r3, #20556	; 0x504c
   375c0:	e1520003 	cmp	r2, r3
   375c4:	1a000007 	bne	375e8 <CPtrListFIQ::GetPtr(TPtrListElement*)+0x40>
   375c8:	e591000c 	ldr	r0, [r1, #12]
   375cc:	e8bd8010 	pop	{r4, pc}
   375d0:	e3031670 	movw	r1, #13936	; 0x3670
   375d4:	e3401004 	movt	r1, #4
   375d8:	e3020430 	movw	r0, #9264	; 0x2430
   375dc:	e3400004 	movt	r0, #4
   375e0:	e3a02043 	mov	r2, #67	; 0x43
   375e4:	ebffd4b5 	bl	2c8c0 <assertion_failed>
   375e8:	e3031670 	movw	r1, #13936	; 0x3670
   375ec:	e3401004 	movt	r1, #4
   375f0:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   375f4:	e3400004 	movt	r0, #4
   375f8:	e3a02044 	mov	r2, #68	; 0x44
   375fc:	ebffd4af 	bl	2c8c0 <assertion_failed>

00037600 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)>:
   37600:	e3043fac 	movw	r3, #20396	; 0x4fac
   37604:	e3403004 	movt	r3, #4
   37608:	e92d4070 	push	{r4, r5, r6, lr}
   3760c:	e1a06000 	mov	r6, r0
   37610:	e5930000 	ldr	r0, [r3]
   37614:	e3500000 	cmp	r0, #0
   37618:	0a000022 	beq	376a8 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xa8>
   3761c:	e1a04001 	mov	r4, r1
   37620:	e1a05002 	mov	r5, r2
   37624:	ebffd5ee 	bl	2cde4 <CClassAllocator::Allocate()>
   37628:	e2503000 	subs	r3, r0, #0
   3762c:	0a000023 	beq	376c0 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xc0>
   37630:	e5961000 	ldr	r1, [r6]
   37634:	e3042651 	movw	r2, #18001	; 0x4651
   37638:	e345204c 	movt	r2, #20556	; 0x504c
   3763c:	e583500c 	str	r5, [r3, #12]
   37640:	e3510000 	cmp	r1, #0
   37644:	e5832000 	str	r2, [r3]
   37648:	0a000022 	beq	376d8 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xd8>
   3764c:	e3540000 	cmp	r4, #0
   37650:	0a000026 	beq	376f0 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xf0>
   37654:	e5940000 	ldr	r0, [r4]
   37658:	e1500002 	cmp	r0, r2
   3765c:	1a000029 	bne	37708 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x108>
   37660:	e1510004 	cmp	r1, r4
   37664:	0a000009 	beq	37690 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x90>
   37668:	e5942004 	ldr	r2, [r4, #4]
   3766c:	e9830014 	stmib	r3, {r2, r4}
   37670:	e3520000 	cmp	r2, #0
   37674:	0a000003 	beq	37688 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x88>
   37678:	e5921000 	ldr	r1, [r2]
   3767c:	e1510000 	cmp	r1, r0
   37680:	05823008 	streq	r3, [r2, #8]
   37684:	1a000025 	bne	37720 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x120>
   37688:	e5843004 	str	r3, [r4, #4]
   3768c:	e8bd8070 	pop	{r4, r5, r6, pc}
   37690:	e5831008 	str	r1, [r3, #8]
   37694:	e3a02000 	mov	r2, #0
   37698:	e5832004 	str	r2, [r3, #4]
   3769c:	e5813004 	str	r3, [r1, #4]
   376a0:	e5863000 	str	r3, [r6]
   376a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   376a8:	e3031670 	movw	r1, #13936	; 0x3670
   376ac:	e3401004 	movt	r1, #4
   376b0:	e30b0048 	movw	r0, #45128	; 0xb048
   376b4:	e3400003 	movt	r0, #3
   376b8:	e3a02027 	mov	r2, #39	; 0x27
   376bc:	ebffd47f 	bl	2c8c0 <assertion_failed>
   376c0:	e3031670 	movw	r1, #13936	; 0x3670
   376c4:	e3401004 	movt	r1, #4
   376c8:	e3020430 	movw	r0, #9264	; 0x2430
   376cc:	e3400004 	movt	r0, #4
   376d0:	e3a0204c 	mov	r2, #76	; 0x4c
   376d4:	ebffd479 	bl	2c8c0 <assertion_failed>
   376d8:	e3031670 	movw	r1, #13936	; 0x3670
   376dc:	e3401004 	movt	r1, #4
   376e0:	e3020f30 	movw	r0, #12080	; 0x2f30
   376e4:	e3400004 	movt	r0, #4
   376e8:	e3a02053 	mov	r2, #83	; 0x53
   376ec:	ebffd473 	bl	2c8c0 <assertion_failed>
   376f0:	e3031670 	movw	r1, #13936	; 0x3670
   376f4:	e3401004 	movt	r1, #4
   376f8:	e3020f40 	movw	r0, #12096	; 0x2f40
   376fc:	e3400004 	movt	r0, #4
   37700:	e3a02054 	mov	r2, #84	; 0x54
   37704:	ebffd46d 	bl	2c8c0 <assertion_failed>
   37708:	e3031670 	movw	r1, #13936	; 0x3670
   3770c:	e3401004 	movt	r1, #4
   37710:	e3020f4c 	movw	r0, #12108	; 0x2f4c
   37714:	e3400004 	movt	r0, #4
   37718:	e3a02055 	mov	r2, #85	; 0x55
   3771c:	ebffd467 	bl	2c8c0 <assertion_failed>
   37720:	e3031670 	movw	r1, #13936	; 0x3670
   37724:	e3401004 	movt	r1, #4
   37728:	e3020f70 	movw	r0, #12144	; 0x2f70
   3772c:	e3400004 	movt	r0, #4
   37730:	e3a02067 	mov	r2, #103	; 0x67
   37734:	ebffd461 	bl	2c8c0 <assertion_failed>

00037738 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)>:
   37738:	e3043fac 	movw	r3, #20396	; 0x4fac
   3773c:	e3403004 	movt	r3, #4
   37740:	e92d4070 	push	{r4, r5, r6, lr}
   37744:	e1a05000 	mov	r5, r0
   37748:	e5930000 	ldr	r0, [r3]
   3774c:	e3500000 	cmp	r0, #0
   37750:	0a000028 	beq	377f8 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xc0>
   37754:	e1a04001 	mov	r4, r1
   37758:	e1a06002 	mov	r6, r2
   3775c:	ebffd5a0 	bl	2cde4 <CClassAllocator::Allocate()>
   37760:	e2503000 	subs	r3, r0, #0
   37764:	0a000029 	beq	37810 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xd8>
   37768:	e3042651 	movw	r2, #18001	; 0x4651
   3776c:	e345204c 	movt	r2, #20556	; 0x504c
   37770:	e3540000 	cmp	r4, #0
   37774:	e5832000 	str	r2, [r3]
   37778:	e583600c 	str	r6, [r3, #12]
   3777c:	0a000010 	beq	377c4 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x8c>
   37780:	e5951000 	ldr	r1, [r5]
   37784:	e3510000 	cmp	r1, #0
   37788:	0a000014 	beq	377e0 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xa8>
   3778c:	e5941000 	ldr	r1, [r4]
   37790:	e1510002 	cmp	r1, r2
   37794:	1a000029 	bne	37840 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x108>
   37798:	e5942008 	ldr	r2, [r4, #8]
   3779c:	e5832008 	str	r2, [r3, #8]
   377a0:	e3520000 	cmp	r2, #0
   377a4:	e5834004 	str	r4, [r3, #4]
   377a8:	0a000003 	beq	377bc <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x84>
   377ac:	e5920000 	ldr	r0, [r2]
   377b0:	e1500001 	cmp	r0, r1
   377b4:	05823004 	streq	r3, [r2, #4]
   377b8:	1a000026 	bne	37858 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x120>
   377bc:	e5843008 	str	r3, [r4, #8]
   377c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   377c4:	e5952000 	ldr	r2, [r5]
   377c8:	e3520000 	cmp	r2, #0
   377cc:	1a000015 	bne	37828 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xf0>
   377d0:	e5832004 	str	r2, [r3, #4]
   377d4:	e5832008 	str	r2, [r3, #8]
   377d8:	e5853000 	str	r3, [r5]
   377dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   377e0:	e3031670 	movw	r1, #13936	; 0x3670
   377e4:	e3401004 	movt	r1, #4
   377e8:	e3020f30 	movw	r0, #12080	; 0x2f30
   377ec:	e3400004 	movt	r0, #4
   377f0:	e3a02084 	mov	r2, #132	; 0x84
   377f4:	ebffd431 	bl	2c8c0 <assertion_failed>
   377f8:	e3031670 	movw	r1, #13936	; 0x3670
   377fc:	e3401004 	movt	r1, #4
   37800:	e30b0048 	movw	r0, #45128	; 0xb048
   37804:	e3400003 	movt	r0, #3
   37808:	e3a02027 	mov	r2, #39	; 0x27
   3780c:	ebffd42b 	bl	2c8c0 <assertion_failed>
   37810:	e3031670 	movw	r1, #13936	; 0x3670
   37814:	e3401004 	movt	r1, #4
   37818:	e3020430 	movw	r0, #9264	; 0x2430
   3781c:	e3400004 	movt	r0, #4
   37820:	e3a02072 	mov	r2, #114	; 0x72
   37824:	ebffd425 	bl	2c8c0 <assertion_failed>
   37828:	e3031670 	movw	r1, #13936	; 0x3670
   3782c:	e3401004 	movt	r1, #4
   37830:	e3020efc 	movw	r0, #12028	; 0x2efc
   37834:	e3400004 	movt	r0, #4
   37838:	e3a0207b 	mov	r2, #123	; 0x7b
   3783c:	ebffd41f 	bl	2c8c0 <assertion_failed>
   37840:	e3031670 	movw	r1, #13936	; 0x3670
   37844:	e3401004 	movt	r1, #4
   37848:	e3020f98 	movw	r0, #12184	; 0x2f98
   3784c:	e3400004 	movt	r0, #4
   37850:	e3a02085 	mov	r2, #133	; 0x85
   37854:	ebffd419 	bl	2c8c0 <assertion_failed>
   37858:	e3031670 	movw	r1, #13936	; 0x3670
   3785c:	e3401004 	movt	r1, #4
   37860:	e3020fbc 	movw	r0, #12220	; 0x2fbc
   37864:	e3400004 	movt	r0, #4
   37868:	e3a0208c 	mov	r2, #140	; 0x8c
   3786c:	ebffd413 	bl	2c8c0 <assertion_failed>

00037870 <CPtrListFIQ::Remove(TPtrListElement*)>:
   37870:	e3510000 	cmp	r1, #0
   37874:	e92d4010 	push	{r4, lr}
   37878:	0a000031 	beq	37944 <CPtrListFIQ::Remove(TPtrListElement*)+0xd4>
   3787c:	e5912000 	ldr	r2, [r1]
   37880:	e3043651 	movw	r3, #18001	; 0x4651
   37884:	e345304c 	movt	r3, #20556	; 0x504c
   37888:	e1520003 	cmp	r2, r3
   3788c:	1a000032 	bne	3795c <CPtrListFIQ::Remove(TPtrListElement*)+0xec>
   37890:	e5903000 	ldr	r3, [r0]
   37894:	e1530001 	cmp	r3, r1
   37898:	0a000014 	beq	378f0 <CPtrListFIQ::Remove(TPtrListElement*)+0x80>
   3789c:	e5913004 	ldr	r3, [r1, #4]
   378a0:	e3530000 	cmp	r3, #0
   378a4:	0a000038 	beq	3798c <CPtrListFIQ::Remove(TPtrListElement*)+0x11c>
   378a8:	e5930000 	ldr	r0, [r3]
   378ac:	e1500002 	cmp	r0, r2
   378b0:	1a00001d 	bne	3792c <CPtrListFIQ::Remove(TPtrListElement*)+0xbc>
   378b4:	e5912008 	ldr	r2, [r1, #8]
   378b8:	e5832008 	str	r2, [r3, #8]
   378bc:	e3520000 	cmp	r2, #0
   378c0:	0a000003 	beq	378d4 <CPtrListFIQ::Remove(TPtrListElement*)+0x64>
   378c4:	e592c000 	ldr	ip, [r2]
   378c8:	e15c0000 	cmp	ip, r0
   378cc:	05823004 	streq	r3, [r2, #4]
   378d0:	1a000033 	bne	379a4 <CPtrListFIQ::Remove(TPtrListElement*)+0x134>
   378d4:	e3043fac 	movw	r3, #20396	; 0x4fac
   378d8:	e3403004 	movt	r3, #4
   378dc:	e5930000 	ldr	r0, [r3]
   378e0:	e3500000 	cmp	r0, #0
   378e4:	0a000022 	beq	37974 <CPtrListFIQ::Remove(TPtrListElement*)+0x104>
   378e8:	e8bd4010 	pop	{r4, lr}
   378ec:	eaffd577 	b	2ced0 <CClassAllocator::Free(void*)>
   378f0:	e5933008 	ldr	r3, [r3, #8]
   378f4:	e5803000 	str	r3, [r0]
   378f8:	e3530000 	cmp	r3, #0
   378fc:	0afffff4 	beq	378d4 <CPtrListFIQ::Remove(TPtrListElement*)+0x64>
   37900:	e5930000 	ldr	r0, [r3]
   37904:	e1500002 	cmp	r0, r2
   37908:	03a02000 	moveq	r2, #0
   3790c:	05832004 	streq	r2, [r3, #4]
   37910:	0affffef 	beq	378d4 <CPtrListFIQ::Remove(TPtrListElement*)+0x64>
   37914:	e3031670 	movw	r1, #13936	; 0x3670
   37918:	e3401004 	movt	r1, #4
   3791c:	e3020fe8 	movw	r0, #12264	; 0x2fe8
   37920:	e3400004 	movt	r0, #4
   37924:	e3a0209f 	mov	r2, #159	; 0x9f
   37928:	ebffd3e4 	bl	2c8c0 <assertion_failed>
   3792c:	e3031670 	movw	r1, #13936	; 0x3670
   37930:	e3401004 	movt	r1, #4
   37934:	e303002c 	movw	r0, #12332	; 0x302c
   37938:	e3400004 	movt	r0, #4
   3793c:	e3a020a6 	mov	r2, #166	; 0xa6
   37940:	ebffd3de 	bl	2c8c0 <assertion_failed>
   37944:	e3031670 	movw	r1, #13936	; 0x3670
   37948:	e3401004 	movt	r1, #4
   3794c:	e3020430 	movw	r0, #9264	; 0x2430
   37950:	e3400004 	movt	r0, #4
   37954:	e3a02096 	mov	r2, #150	; 0x96
   37958:	ebffd3d8 	bl	2c8c0 <assertion_failed>
   3795c:	e3031670 	movw	r1, #13936	; 0x3670
   37960:	e3401004 	movt	r1, #4
   37964:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   37968:	e3400004 	movt	r0, #4
   3796c:	e3a02097 	mov	r2, #151	; 0x97
   37970:	ebffd3d2 	bl	2c8c0 <assertion_failed>
   37974:	e3031670 	movw	r1, #13936	; 0x3670
   37978:	e3401004 	movt	r1, #4
   3797c:	e30b0048 	movw	r0, #45128	; 0xb048
   37980:	e3400003 	movt	r0, #3
   37984:	e3a02027 	mov	r2, #39	; 0x27
   37988:	ebffd3cc 	bl	2c8c0 <assertion_failed>
   3798c:	e3031670 	movw	r1, #13936	; 0x3670
   37990:	e3401004 	movt	r1, #4
   37994:	e3030014 	movw	r0, #12308	; 0x3014
   37998:	e3400004 	movt	r0, #4
   3799c:	e3a020a5 	mov	r2, #165	; 0xa5
   379a0:	ebffd3c6 	bl	2c8c0 <assertion_failed>
   379a4:	e3031670 	movw	r1, #13936	; 0x3670
   379a8:	e3401004 	movt	r1, #4
   379ac:	e3020fe8 	movw	r0, #12264	; 0x2fe8
   379b0:	e3400004 	movt	r0, #4
   379b4:	e3a020ab 	mov	r2, #171	; 0xab
   379b8:	ebffd3c0 	bl	2c8c0 <assertion_failed>

000379bc <CPtrListFIQ::Find(void*)>:
   379bc:	e5900000 	ldr	r0, [r0]
   379c0:	e3500000 	cmp	r0, #0
   379c4:	012fff1e 	bxeq	lr
   379c8:	e3042651 	movw	r2, #18001	; 0x4651
   379cc:	e345204c 	movt	r2, #20556	; 0x504c
   379d0:	ea000005 	b	379ec <CPtrListFIQ::Find(void*)+0x30>
   379d4:	e590300c 	ldr	r3, [r0, #12]
   379d8:	e1530001 	cmp	r3, r1
   379dc:	012fff1e 	bxeq	lr
   379e0:	e5900008 	ldr	r0, [r0, #8]
   379e4:	e3500000 	cmp	r0, #0
   379e8:	012fff1e 	bxeq	lr
   379ec:	e5903000 	ldr	r3, [r0]
   379f0:	e1530002 	cmp	r3, r2
   379f4:	0afffff6 	beq	379d4 <CPtrListFIQ::Find(void*)+0x18>
   379f8:	e3031670 	movw	r1, #13936	; 0x3670
   379fc:	e3401004 	movt	r1, #4
   37a00:	e3020f0c 	movw	r0, #12044	; 0x2f0c
   37a04:	e3400004 	movt	r0, #4
   37a08:	e3a020ba 	mov	r2, #186	; 0xba
   37a0c:	e92d4010 	push	{r4, lr}
   37a10:	ebffd3aa 	bl	2c8c0 <assertion_failed>

00037a14 <InvalidateDataCacheL1Only>:
   37a14:	e92d0070 	push	{r4, r5, r6}
   37a18:	e3a00000 	mov	r0, #0
   37a1c:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   37a20:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   37a24:	e3071fff 	movw	r1, #32767	; 0x7fff
   37a28:	e00126a0 	and	r2, r1, r0, lsr #13
   37a2c:	e30013ff 	movw	r1, #1023	; 0x3ff
   37a30:	e00131a0 	and	r3, r1, r0, lsr #3
   37a34:	e2822001 	add	r2, r2, #1
   37a38:	e2000007 	and	r0, r0, #7
   37a3c:	e2800004 	add	r0, r0, #4
   37a40:	e16f1f13 	clz	r1, r3
   37a44:	e2834001 	add	r4, r3, #1
   37a48:	e2422001 	sub	r2, r2, #1
   37a4c:	e1a03004 	mov	r3, r4
   37a50:	e2533001 	subs	r3, r3, #1
   37a54:	e1a05113 	lsl	r5, r3, r1
   37a58:	e1a06012 	lsl	r6, r2, r0
   37a5c:	e1855006 	orr	r5, r5, r6
   37a60:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   37a64:	cafffff9 	bgt	37a50 <InvalidateDataCacheL1Only+0x3c>
   37a68:	e3520000 	cmp	r2, #0
   37a6c:	cafffff5 	bgt	37a48 <InvalidateDataCacheL1Only+0x34>
   37a70:	f57ff04e 	dsb	st
   37a74:	f57ff06f 	isb	sy
   37a78:	e8bd0070 	pop	{r4, r5, r6}
   37a7c:	e12fff1e 	bx	lr

00037a80 <InvalidateDataCache>:
   37a80:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   37a84:	f57ff05f 	dmb	sy
   37a88:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   37a8c:	e1a03ba0 	lsr	r3, r0, #23
   37a90:	e213300e 	ands	r3, r3, #14
   37a94:	0a00001d 	beq	37b10 <InvalidateDataCache+0x90>
   37a98:	e3a0a000 	mov	sl, #0
   37a9c:	e08a20aa 	add	r2, sl, sl, lsr #1
   37aa0:	e1a01230 	lsr	r1, r0, r2
   37aa4:	e2011007 	and	r1, r1, #7
   37aa8:	e3510002 	cmp	r1, #2
   37aac:	ba000014 	blt	37b04 <InvalidateDataCache+0x84>
   37ab0:	e10f9000 	mrs	r9, CPSR
   37ab4:	f10c0080 	cpsid	i
   37ab8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   37abc:	f57ff06f 	isb	sy
   37ac0:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   37ac4:	e121f009 	msr	CPSR_c, r9
   37ac8:	e2012007 	and	r2, r1, #7
   37acc:	e2822004 	add	r2, r2, #4
   37ad0:	e30043ff 	movw	r4, #1023	; 0x3ff
   37ad4:	e01441a1 	ands	r4, r4, r1, lsr #3
   37ad8:	e16f5f14 	clz	r5, r4
   37adc:	e3077fff 	movw	r7, #32767	; 0x7fff
   37ae0:	e01776a1 	ands	r7, r7, r1, lsr #13
   37ae4:	e1a09007 	mov	r9, r7
   37ae8:	e18ab514 	orr	fp, sl, r4, lsl r5
   37aec:	e18bb219 	orr	fp, fp, r9, lsl r2
   37af0:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   37af4:	e2599001 	subs	r9, r9, #1
   37af8:	aafffffa 	bge	37ae8 <InvalidateDataCache+0x68>
   37afc:	e2544001 	subs	r4, r4, #1
   37b00:	aafffff7 	bge	37ae4 <InvalidateDataCache+0x64>
   37b04:	e28aa002 	add	sl, sl, #2
   37b08:	e153000a 	cmp	r3, sl
   37b0c:	caffffe2 	bgt	37a9c <InvalidateDataCache+0x1c>
   37b10:	e3a0a000 	mov	sl, #0
   37b14:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   37b18:	f57ff04e 	dsb	st
   37b1c:	f57ff06f 	isb	sy
   37b20:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   37b24:	e12fff1e 	bx	lr

00037b28 <CleanDataCache>:
   37b28:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   37b2c:	f57ff05f 	dmb	sy
   37b30:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   37b34:	e1a03ba0 	lsr	r3, r0, #23
   37b38:	e213300e 	ands	r3, r3, #14
   37b3c:	0a00001d 	beq	37bb8 <CleanDataCache+0x90>
   37b40:	e3a0a000 	mov	sl, #0
   37b44:	e08a20aa 	add	r2, sl, sl, lsr #1
   37b48:	e1a01230 	lsr	r1, r0, r2
   37b4c:	e2011007 	and	r1, r1, #7
   37b50:	e3510002 	cmp	r1, #2
   37b54:	ba000014 	blt	37bac <CleanDataCache+0x84>
   37b58:	e10f9000 	mrs	r9, CPSR
   37b5c:	f10c0080 	cpsid	i
   37b60:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   37b64:	f57ff06f 	isb	sy
   37b68:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   37b6c:	e121f009 	msr	CPSR_c, r9
   37b70:	e2012007 	and	r2, r1, #7
   37b74:	e2822004 	add	r2, r2, #4
   37b78:	e30043ff 	movw	r4, #1023	; 0x3ff
   37b7c:	e01441a1 	ands	r4, r4, r1, lsr #3
   37b80:	e16f5f14 	clz	r5, r4
   37b84:	e3077fff 	movw	r7, #32767	; 0x7fff
   37b88:	e01776a1 	ands	r7, r7, r1, lsr #13
   37b8c:	e1a09007 	mov	r9, r7
   37b90:	e18ab514 	orr	fp, sl, r4, lsl r5
   37b94:	e18bb219 	orr	fp, fp, r9, lsl r2
   37b98:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   37b9c:	e2599001 	subs	r9, r9, #1
   37ba0:	aafffffa 	bge	37b90 <CleanDataCache+0x68>
   37ba4:	e2544001 	subs	r4, r4, #1
   37ba8:	aafffff7 	bge	37b8c <CleanDataCache+0x64>
   37bac:	e28aa002 	add	sl, sl, #2
   37bb0:	e153000a 	cmp	r3, sl
   37bb4:	caffffe2 	bgt	37b44 <CleanDataCache+0x1c>
   37bb8:	e3a0a000 	mov	sl, #0
   37bbc:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   37bc0:	f57ff04e 	dsb	st
   37bc4:	f57ff06f 	isb	sy
   37bc8:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   37bcc:	e12fff1e 	bx	lr

00037bd0 <CleanAndInvalidateDataCacheRange>:
   37bd0:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   37bd4:	e1a03823 	lsr	r3, r3, #16
   37bd8:	e203300f 	and	r3, r3, #15
   37bdc:	e3a02004 	mov	r2, #4
   37be0:	e1a02312 	lsl	r2, r2, r3
   37be4:	e0801001 	add	r1, r0, r1
   37be8:	e2423001 	sub	r3, r2, #1
   37bec:	e1c00003 	bic	r0, r0, r3
   37bf0:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   37bf4:	e0800002 	add	r0, r0, r2
   37bf8:	e1500001 	cmp	r0, r1
   37bfc:	3afffffb 	bcc	37bf0 <CleanAndInvalidateDataCacheRange+0x20>
   37c00:	f57ff04e 	dsb	st
   37c04:	e12fff1e 	bx	lr

00037c08 <CExceptionHandler::~CExceptionHandler()>:
   37c08:	e3043fb0 	movw	r3, #20400	; 0x4fb0
   37c0c:	e3403004 	movt	r3, #4
   37c10:	e3a02000 	mov	r2, #0
   37c14:	e5832000 	str	r2, [r3]
   37c18:	e12fff1e 	bx	lr

00037c1c <CExceptionHandler::~CExceptionHandler()>:
   37c1c:	e3043fb0 	movw	r3, #20400	; 0x4fb0
   37c20:	e3403004 	movt	r3, #4
   37c24:	e92d4010 	push	{r4, lr}
   37c28:	e3a01004 	mov	r1, #4
   37c2c:	e1a04000 	mov	r4, r0
   37c30:	e3a02000 	mov	r2, #0
   37c34:	e5832000 	str	r2, [r3]
   37c38:	ebfffc2f 	bl	36cfc <operator delete(void*, unsigned int)>
   37c3c:	e1a00004 	mov	r0, r4
   37c40:	e8bd8010 	pop	{r4, pc}

00037c44 <CExceptionHandler::Throw(unsigned int)>:
   37c44:	e92d4010 	push	{r4, lr}
   37c48:	e1a04001 	mov	r4, r1
   37c4c:	e24dd008 	sub	sp, sp, #8
   37c50:	ebffdd97 	bl	2f2b4 <CLogger::Get()>
   37c54:	e304ce20 	movw	ip, #20000	; 0x4e20
   37c58:	e340c004 	movt	ip, #4
   37c5c:	e3a02000 	mov	r2, #0
   37c60:	e30336b4 	movw	r3, #14004	; 0x36b4
   37c64:	e3403004 	movt	r3, #4
   37c68:	e79c1104 	ldr	r1, [ip, r4, lsl #2]
   37c6c:	e58d1000 	str	r1, [sp]
   37c70:	e3031764 	movw	r1, #14180	; 0x3764
   37c74:	e3401004 	movt	r1, #4
   37c78:	ebffdf5b 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37c7c:	e28dd008 	add	sp, sp, #8
   37c80:	e8bd8010 	pop	{r4, pc}

00037c84 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   37c84:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   37c88:	e3510002 	cmp	r1, #2
   37c8c:	e1a05001 	mov	r5, r1
   37c90:	e24dd024 	sub	sp, sp, #36	; 0x24
   37c94:	e1a04002 	mov	r4, r2
   37c98:	0a000028 	beq	37d40 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   37c9c:	e3510003 	cmp	r1, #3
   37ca0:	13a07000 	movne	r7, #0
   37ca4:	11a09007 	movne	r9, r7
   37ca8:	1a000001 	bne	37cb4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   37cac:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   37cb0:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   37cb4:	e3540000 	cmp	r4, #0
   37cb8:	0a000024 	beq	37d50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   37cbc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   37cc0:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   37cc4:	e203301f 	and	r3, r3, #31
   37cc8:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   37ccc:	e3530011 	cmp	r3, #17
   37cd0:	0a000024 	beq	37d68 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   37cd4:	e3530012 	cmp	r3, #18
   37cd8:	08940140 	ldmeq	r4, {r6, r8}
   37cdc:	e1a00006 	mov	r0, r6
   37ce0:	e3031764 	movw	r1, #14180	; 0x3764
   37ce4:	e3401004 	movt	r1, #4
   37ce8:	ebffd4f2 	bl	2d0b8 <debug_stacktrace(unsigned int const*, char const*)>
   37cec:	ebffdd70 	bl	2f2b4 <CLogger::Get()>
   37cf0:	e58d8014 	str	r8, [sp, #20]
   37cf4:	e58d6010 	str	r6, [sp, #16]
   37cf8:	e3043e20 	movw	r3, #20000	; 0x4e20
   37cfc:	e3403004 	movt	r3, #4
   37d00:	e58d700c 	str	r7, [sp, #12]
   37d04:	e3031764 	movw	r1, #14180	; 0x3764
   37d08:	e3401004 	movt	r1, #4
   37d0c:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   37d10:	e58d2004 	str	r2, [sp, #4]
   37d14:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   37d18:	e58d2018 	str	r2, [sp, #24]
   37d1c:	e3a02000 	mov	r2, #0
   37d20:	e58d9008 	str	r9, [sp, #8]
   37d24:	e793c105 	ldr	ip, [r3, r5, lsl #2]
   37d28:	e30336dc 	movw	r3, #14044	; 0x36dc
   37d2c:	e3403004 	movt	r3, #4
   37d30:	e58dc000 	str	ip, [sp]
   37d34:	ebffdf2c 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37d38:	e28dd024 	add	sp, sp, #36	; 0x24
   37d3c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37d40:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   37d44:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   37d48:	e3540000 	cmp	r4, #0
   37d4c:	1affffda 	bne	37cbc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x38>
   37d50:	e30316c4 	movw	r1, #14020	; 0x36c4
   37d54:	e3401004 	movt	r1, #4
   37d58:	e3000dfc 	movw	r0, #3580	; 0xdfc
   37d5c:	e3400004 	movt	r0, #4
   37d60:	e3a02069 	mov	r2, #105	; 0x69
   37d64:	ebffd2d5 	bl	2c8c0 <assertion_failed>
   37d68:	e594800c 	ldr	r8, [r4, #12]
   37d6c:	e5946008 	ldr	r6, [r4, #8]
   37d70:	eaffffd9 	b	37cdc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>

00037d74 <CExceptionHandler::CExceptionHandler()>:
   37d74:	e3042fb0 	movw	r2, #20400	; 0x4fb0
   37d78:	e3402004 	movt	r2, #4
   37d7c:	e92d4010 	push	{r4, lr}
   37d80:	e59f10bc 	ldr	r1, [pc, #188]	; 37e44 <CExceptionHandler::CExceptionHandler()+0xd0>
   37d84:	e5923000 	ldr	r3, [r2]
   37d88:	e24dd008 	sub	sp, sp, #8
   37d8c:	e5801000 	str	r1, [r0]
   37d90:	e3530000 	cmp	r3, #0
   37d94:	1a000024 	bne	37e2c <CExceptionHandler::CExceptionHandler()+0xb8>
   37d98:	e3a03004 	mov	r3, #4
   37d9c:	e58d3004 	str	r3, [sp, #4]
   37da0:	e59d1004 	ldr	r1, [sp, #4]
   37da4:	e3083058 	movw	r3, #32856	; 0x8058
   37da8:	e3403003 	movt	r3, #3
   37dac:	e1a04000 	mov	r4, r0
   37db0:	e0433001 	sub	r3, r3, r1
   37db4:	e59d0004 	ldr	r0, [sp, #4]
   37db8:	e59d1004 	ldr	r1, [sp, #4]
   37dbc:	e1a03143 	asr	r3, r3, #2
   37dc0:	e5824000 	str	r4, [r2]
   37dc4:	e2433002 	sub	r3, r3, #2
   37dc8:	e2812008 	add	r2, r1, #8
   37dcc:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   37dd0:	e5803000 	str	r3, [r0]
   37dd4:	e59d0004 	ldr	r0, [sp, #4]
   37dd8:	e3073fb8 	movw	r3, #32696	; 0x7fb8
   37ddc:	e3403003 	movt	r3, #3
   37de0:	e59d1004 	ldr	r1, [sp, #4]
   37de4:	e0432002 	sub	r2, r3, r2
   37de8:	e3083008 	movw	r3, #32776	; 0x8008
   37dec:	e3403003 	movt	r3, #3
   37df0:	e281100c 	add	r1, r1, #12
   37df4:	e0433001 	sub	r3, r3, r1
   37df8:	e59d1004 	ldr	r1, [sp, #4]
   37dfc:	e1a02142 	asr	r2, r2, #2
   37e00:	e1a03143 	asr	r3, r3, #2
   37e04:	e2422002 	sub	r2, r2, #2
   37e08:	e2433002 	sub	r3, r3, #2
   37e0c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   37e10:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   37e14:	e5802008 	str	r2, [r0, #8]
   37e18:	e581300c 	str	r3, [r1, #12]
   37e1c:	eb0001f6 	bl	385fc <SyncDataAndInstructionCache>
   37e20:	e1a00004 	mov	r0, r4
   37e24:	e28dd008 	add	sp, sp, #8
   37e28:	e8bd8010 	pop	{r4, pc}
   37e2c:	e30316c4 	movw	r1, #14020	; 0x36c4
   37e30:	e3401004 	movt	r1, #4
   37e34:	e3000a74 	movw	r0, #2676	; 0xa74
   37e38:	e3400004 	movt	r0, #4
   37e3c:	e3a02030 	mov	r2, #48	; 0x30
   37e40:	ebffd29e 	bl	2c8c0 <assertion_failed>
   37e44:	00043774 	.word	0x00043774

00037e48 <CExceptionHandler::Get()>:
   37e48:	e3043fb0 	movw	r3, #20400	; 0x4fb0
   37e4c:	e3403004 	movt	r3, #4
   37e50:	e5930000 	ldr	r0, [r3]
   37e54:	e3500000 	cmp	r0, #0
   37e58:	112fff1e 	bxne	lr
   37e5c:	e30316c4 	movw	r1, #14020	; 0x36c4
   37e60:	e3401004 	movt	r1, #4
   37e64:	e30c0730 	movw	r0, #50992	; 0xc730
   37e68:	e3400003 	movt	r0, #3
   37e6c:	e3a02087 	mov	r2, #135	; 0x87
   37e70:	e92d4010 	push	{r4, lr}
   37e74:	ebffd291 	bl	2c8c0 <assertion_failed>

00037e78 <ExceptionHandler>:
   37e78:	e92d4070 	push	{r4, r5, r6, lr}
   37e7c:	e1a04000 	mov	r4, r0
   37e80:	e1a05001 	mov	r5, r1
   37e84:	eb00033b 	bl	38b78 <CInterruptSystem::DisableFIQ()>
   37e88:	f1080040 	cpsie	f
   37e8c:	e3043fb0 	movw	r3, #20400	; 0x4fb0
   37e90:	e3403004 	movt	r3, #4
   37e94:	e5930000 	ldr	r0, [r3]
   37e98:	e3500000 	cmp	r0, #0
   37e9c:	0a000005 	beq	37eb8 <ExceptionHandler+0x40>
   37ea0:	e5903000 	ldr	r3, [r0]
   37ea4:	e1a02005 	mov	r2, r5
   37ea8:	e1a01004 	mov	r1, r4
   37eac:	e8bd4070 	pop	{r4, r5, r6, lr}
   37eb0:	e593300c 	ldr	r3, [r3, #12]
   37eb4:	e12fff13 	bx	r3
   37eb8:	e30316c4 	movw	r1, #14020	; 0x36c4
   37ebc:	e3401004 	movt	r1, #4
   37ec0:	e30c0730 	movw	r0, #50992	; 0xc730
   37ec4:	e3400003 	movt	r0, #3
   37ec8:	e3a02087 	mov	r2, #135	; 0x87
   37ecc:	ebffd27b 	bl	2c8c0 <assertion_failed>

00037ed0 <raise>:
   37ed0:	e3043fb0 	movw	r3, #20400	; 0x4fb0
   37ed4:	e3403004 	movt	r3, #4
   37ed8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   37edc:	e5930000 	ldr	r0, [r3]
   37ee0:	e24dd00c 	sub	sp, sp, #12
   37ee4:	e3500000 	cmp	r0, #0
   37ee8:	0a000018 	beq	37f50 <raise+0x80>
   37eec:	e5902000 	ldr	r2, [r0]
   37ef0:	e3073c44 	movw	r3, #31812	; 0x7c44
   37ef4:	e3403003 	movt	r3, #3
   37ef8:	e5922008 	ldr	r2, [r2, #8]
   37efc:	e1520003 	cmp	r2, r3
   37f00:	1a00000d 	bne	37f3c <raise+0x6c>
   37f04:	ebffdcea 	bl	2f2b4 <CLogger::Get()>
   37f08:	e304ce20 	movw	ip, #20000	; 0x4e20
   37f0c:	e340c004 	movt	ip, #4
   37f10:	e3a02000 	mov	r2, #0
   37f14:	e30336b4 	movw	r3, #14004	; 0x36b4
   37f18:	e3403004 	movt	r3, #4
   37f1c:	e3031764 	movw	r1, #14180	; 0x3764
   37f20:	e3401004 	movt	r1, #4
   37f24:	e59cc010 	ldr	ip, [ip, #16]
   37f28:	e58dc000 	str	ip, [sp]
   37f2c:	ebffdeae 	bl	2f9ec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37f30:	e3a00000 	mov	r0, #0
   37f34:	e28dd00c 	add	sp, sp, #12
   37f38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   37f3c:	e3a01004 	mov	r1, #4
   37f40:	e12fff32 	blx	r2
   37f44:	e3a00000 	mov	r0, #0
   37f48:	e28dd00c 	add	sp, sp, #12
   37f4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   37f50:	e30316c4 	movw	r1, #14020	; 0x36c4
   37f54:	e3401004 	movt	r1, #4
   37f58:	e30c0730 	movw	r0, #50992	; 0xc730
   37f5c:	e3400003 	movt	r0, #3
   37f60:	e3a02087 	mov	r2, #135	; 0x87
   37f64:	ebffd255 	bl	2c8c0 <assertion_failed>

00037f68 <UndefinedInstructionInternal>:
   37f68:	e24dd004 	sub	sp, sp, #4
   37f6c:	e24ee004 	sub	lr, lr, #4
   37f70:	e92d4000 	stmfd	sp!, {lr}
   37f74:	e14fe000 	mrs	lr, SPSR
   37f78:	e92d4000 	stmfd	sp!, {lr}
   37f7c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   37f80:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   37f84:	e1a0100d 	mov	r1, sp
   37f88:	f1020012 	cps	#18
   37f8c:	e1a0200d 	mov	r2, sp
   37f90:	e1a0300e 	mov	r3, lr
   37f94:	f1020011 	cps	#17
   37f98:	e1a0400d 	mov	r4, sp
   37f9c:	e1a0500e 	mov	r5, lr
   37fa0:	f102001f 	cps	#31
   37fa4:	e1a0d001 	mov	sp, r1
   37fa8:	e92d003c 	push	{r2, r3, r4, r5}
   37fac:	e1a0100d 	mov	r1, sp
   37fb0:	e3a00001 	mov	r0, #1
   37fb4:	eaffffaf 	b	37e78 <ExceptionHandler>

00037fb8 <PrefetchAbortStub>:
   37fb8:	e24dd004 	sub	sp, sp, #4
   37fbc:	e24ee004 	sub	lr, lr, #4
   37fc0:	e92d4000 	stmfd	sp!, {lr}
   37fc4:	e14fe000 	mrs	lr, SPSR
   37fc8:	e92d4000 	stmfd	sp!, {lr}
   37fcc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   37fd0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   37fd4:	e1a0100d 	mov	r1, sp
   37fd8:	f1020012 	cps	#18
   37fdc:	e1a0200d 	mov	r2, sp
   37fe0:	e1a0300e 	mov	r3, lr
   37fe4:	f1020011 	cps	#17
   37fe8:	e1a0400d 	mov	r4, sp
   37fec:	e1a0500e 	mov	r5, lr
   37ff0:	f102001f 	cps	#31
   37ff4:	e1a0d001 	mov	sp, r1
   37ff8:	e92d003c 	push	{r2, r3, r4, r5}
   37ffc:	e1a0100d 	mov	r1, sp
   38000:	e3a00002 	mov	r0, #2
   38004:	eaffff9b 	b	37e78 <ExceptionHandler>

00038008 <DataAbortStub>:
   38008:	e24dd004 	sub	sp, sp, #4
   3800c:	e24ee008 	sub	lr, lr, #8
   38010:	e92d4000 	stmfd	sp!, {lr}
   38014:	e14fe000 	mrs	lr, SPSR
   38018:	e92d4000 	stmfd	sp!, {lr}
   3801c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   38020:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   38024:	e1a0100d 	mov	r1, sp
   38028:	f1020012 	cps	#18
   3802c:	e1a0200d 	mov	r2, sp
   38030:	e1a0300e 	mov	r3, lr
   38034:	f1020011 	cps	#17
   38038:	e1a0400d 	mov	r4, sp
   3803c:	e1a0500e 	mov	r5, lr
   38040:	f102001f 	cps	#31
   38044:	e1a0d001 	mov	sp, r1
   38048:	e92d003c 	push	{r2, r3, r4, r5}
   3804c:	e1a0100d 	mov	r1, sp
   38050:	e3a00003 	mov	r0, #3
   38054:	eaffff87 	b	37e78 <ExceptionHandler>

00038058 <UndefinedInstructionStub>:
   38058:	e92d4001 	push	{r0, lr}
   3805c:	eef80a10 	vmrs	r0, fpexc
   38060:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   38064:	0affffbf 	beq	37f68 <UndefinedInstructionInternal>
   38068:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   3806c:	eee80a10 	vmsr	fpexc, r0
   38070:	e8fd8001 	ldm	sp!, {r0, pc}^

00038074 <IRQStub>:
   38074:	e24ee004 	sub	lr, lr, #4
   38078:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   3807c:	e24dd004 	sub	sp, sp, #4
   38080:	eef10a10 	vmrs	r0, fpscr
   38084:	e92d0001 	stmfd	sp!, {r0}
   38088:	ed2d0b20 	vpush	{d0-d15}
   3808c:	ed6d0b20 	vpush	{d16-d31}
   38090:	e59f008c 	ldr	r0, [pc, #140]	; 38124 <FIQStub+0x70>
   38094:	e580e000 	str	lr, [r0]
   38098:	eb00032e 	bl	38d58 <InterruptHandler>
   3809c:	ecfd0b20 	vpop	{d16-d31}
   380a0:	ecbd0b20 	vpop	{d0-d15}
   380a4:	e8bd0001 	ldmfd	sp!, {r0}
   380a8:	eee10a10 	vmsr	fpscr, r0
   380ac:	e28dd004 	add	sp, sp, #4
   380b0:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

000380b4 <FIQStub>:
   380b4:	e24ee004 	sub	lr, lr, #4
   380b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   380bc:	e24dd004 	sub	sp, sp, #4
   380c0:	eef10a10 	vmrs	r0, fpscr
   380c4:	e92d0001 	stmfd	sp!, {r0}
   380c8:	ed2d0b20 	vpush	{d0-d15}
   380cc:	ed6d0b20 	vpush	{d16-d31}
   380d0:	e59f2050 	ldr	r2, [pc, #80]	; 38128 <FIQStub+0x74>
   380d4:	e5921000 	ldr	r1, [r2]
   380d8:	e3510000 	cmp	r1, #0
   380dc:	0a000007 	beq	38100 <FIQStub+0x4c>
   380e0:	e5920004 	ldr	r0, [r2, #4]
   380e4:	e12fff31 	blx	r1
   380e8:	ecfd0b20 	vpop	{d16-d31}
   380ec:	ecbd0b20 	vpop	{d0-d15}
   380f0:	e8bd0001 	ldmfd	sp!, {r0}
   380f4:	eee10a10 	vmsr	fpscr, r0
   380f8:	e28dd004 	add	sp, sp, #4
   380fc:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   38100:	e59f1024 	ldr	r1, [pc, #36]	; 3812c <FIQStub+0x78>
   38104:	e3a00000 	mov	r0, #0
   38108:	e5810000 	str	r0, [r1]
   3810c:	ecfd0b20 	vpop	{d16-d31}
   38110:	ecbd0b20 	vpop	{d0-d15}
   38114:	e8bd0001 	ldmfd	sp!, {r0}
   38118:	eee10a10 	vmsr	fpscr, r0
   3811c:	e28dd004 	add	sp, sp, #4
   38120:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   38124:	00044e40 	.word	0x00044e40
   38128:	00044e34 	.word	0x00044e34
   3812c:	3f00b20c 	.word	0x3f00b20c

00038130 <CMemorySystem::~CMemorySystem()>:
   38130:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38134:	e3403004 	movt	r3, #4
   38138:	e92d4070 	push	{r4, r5, r6, lr}
   3813c:	e1a04000 	mov	r4, r0
   38140:	e5932000 	ldr	r2, [r3]
   38144:	e1500002 	cmp	r0, r2
   38148:	0a000005 	beq	38164 <CMemorySystem::~CMemorySystem()+0x34>
   3814c:	e28400c8 	add	r0, r4, #200	; 0xc8
   38150:	eb000863 	bl	3a2e4 <CPageAllocator::~CPageAllocator()>
   38154:	e284000c 	add	r0, r4, #12
   38158:	ebfffb0a 	bl	36d88 <CHeapAllocator::~CHeapAllocator()>
   3815c:	e1a00004 	mov	r0, r4
   38160:	e8bd8070 	pop	{r4, r5, r6, pc}
   38164:	e5d02000 	ldrb	r2, [r0]
   38168:	e3a05000 	mov	r5, #0
   3816c:	e5835000 	str	r5, [r3]
   38170:	e1520005 	cmp	r2, r5
   38174:	0afffff4 	beq	3814c <CMemorySystem::~CMemorySystem()+0x1c>
   38178:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   3817c:	e3c33005 	bic	r3, r3, #5
   38180:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   38184:	ebfffe67 	bl	37b28 <CleanDataCache>
   38188:	ebfffe3c 	bl	37a80 <InvalidateDataCache>
   3818c:	ee085f17 	mcr	15, 0, r5, cr8, cr7, {0}
   38190:	f57ff04f 	dsb	sy
   38194:	eaffffec 	b	3814c <CMemorySystem::~CMemorySystem()+0x1c>

00038198 <CMemorySystem::Destructor()>:
   38198:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   3819c:	e3403004 	movt	r3, #4
   381a0:	e5932000 	ldr	r2, [r3]
   381a4:	e1520000 	cmp	r2, r0
   381a8:	112fff1e 	bxne	lr
   381ac:	e5d22000 	ldrb	r2, [r2]
   381b0:	e92d4010 	push	{r4, lr}
   381b4:	e3a04000 	mov	r4, #0
   381b8:	e1520004 	cmp	r2, r4
   381bc:	e5834000 	str	r4, [r3]
   381c0:	08bd8010 	popeq	{r4, pc}
   381c4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   381c8:	e3c33005 	bic	r3, r3, #5
   381cc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   381d0:	ebfffe54 	bl	37b28 <CleanDataCache>
   381d4:	ebfffe29 	bl	37a80 <InvalidateDataCache>
   381d8:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   381dc:	f57ff04f 	dsb	sy
   381e0:	e8bd8010 	pop	{r4, pc}

000381e4 <CMemorySystem::GetMemSize() const>:
   381e4:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   381e8:	e3403004 	movt	r3, #4
   381ec:	e5933000 	ldr	r3, [r3]
   381f0:	e3530000 	cmp	r3, #0
   381f4:	0a000002 	beq	38204 <CMemorySystem::GetMemSize() const+0x20>
   381f8:	e9930009 	ldmib	r3, {r0, r3}
   381fc:	e0800003 	add	r0, r0, r3
   38200:	e12fff1e 	bx	lr
   38204:	e3031784 	movw	r1, #14212	; 0x3784
   38208:	e3401004 	movt	r1, #4
   3820c:	e3a020a0 	mov	r2, #160	; 0xa0
   38210:	e281000c 	add	r0, r1, #12
   38214:	e92d4010 	push	{r4, lr}
   38218:	ebffd1a8 	bl	2c8c0 <assertion_failed>

0003821c <CMemorySystem::Get()>:
   3821c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38220:	e3403004 	movt	r3, #4
   38224:	e5930000 	ldr	r0, [r3]
   38228:	e3500000 	cmp	r0, #0
   3822c:	112fff1e 	bxne	lr
   38230:	e3031784 	movw	r1, #14212	; 0x3784
   38234:	e3401004 	movt	r1, #4
   38238:	e3a020a6 	mov	r2, #166	; 0xa6
   3823c:	e281000c 	add	r0, r1, #12
   38240:	e92d4010 	push	{r4, lr}
   38244:	ebffd19d 	bl	2c8c0 <assertion_failed>

00038248 <CMemorySystem::EnableMMU()>:
   38248:	e5d03000 	ldrb	r3, [r0]
   3824c:	e92d4010 	push	{r4, lr}
   38250:	e3530000 	cmp	r3, #0
   38254:	0a00001a 	beq	382c4 <CMemorySystem::EnableMMU()+0x7c>
   38258:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   3825c:	e3833040 	orr	r3, r3, #64	; 0x40
   38260:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   38264:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   38268:	e3130001 	tst	r3, #1
   3826c:	1a000019 	bne	382d8 <CMemorySystem::EnableMMU()+0x90>
   38270:	e3a04000 	mov	r4, #0
   38274:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   38278:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   3827c:	e1500004 	cmp	r0, r4
   38280:	0a000019 	beq	382ec <CMemorySystem::EnableMMU()+0xa4>
   38284:	eb000094 	bl	384dc <CPageTable::GetBaseAddress() const>
   38288:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   3828c:	e3a03001 	mov	r3, #1
   38290:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   38294:	ebfffdf9 	bl	37a80 <InvalidateDataCache>
   38298:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   3829c:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   382a0:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   382a4:	f57ff04f 	dsb	sy
   382a8:	f57ff06f 	isb	sy
   382ac:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   382b0:	e3c33002 	bic	r3, r3, #2
   382b4:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   382b8:	e3833005 	orr	r3, r3, #5
   382bc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   382c0:	e8bd8010 	pop	{r4, pc}
   382c4:	e3031784 	movw	r1, #14212	; 0x3784
   382c8:	e3401004 	movt	r1, #4
   382cc:	e3a020ac 	mov	r2, #172	; 0xac
   382d0:	e281001c 	add	r0, r1, #28
   382d4:	ebffd179 	bl	2c8c0 <assertion_failed>
   382d8:	e3031784 	movw	r1, #14212	; 0x3784
   382dc:	e3401004 	movt	r1, #4
   382e0:	e3a020ba 	mov	r2, #186	; 0xba
   382e4:	e281002c 	add	r0, r1, #44	; 0x2c
   382e8:	ebffd174 	bl	2c8c0 <assertion_failed>
   382ec:	e3031784 	movw	r1, #14212	; 0x3784
   382f0:	e3401004 	movt	r1, #4
   382f4:	e3a020c0 	mov	r2, #192	; 0xc0
   382f8:	e2810058 	add	r0, r1, #88	; 0x58
   382fc:	ebffd16f 	bl	2c8c0 <assertion_failed>

00038300 <CMemorySystem::CMemorySystem(bool)>:
   38300:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   38304:	e1a04000 	mov	r4, r0
   38308:	e280700c 	add	r7, r0, #12
   3830c:	e1a03001 	mov	r3, r1
   38310:	e3a05000 	mov	r5, #0
   38314:	e5c03000 	strb	r3, [r0]
   38318:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3831c:	e5805004 	str	r5, [r0, #4]
   38320:	e28460c8 	add	r6, r4, #200	; 0xc8
   38324:	e5805008 	str	r5, [r0, #8]
   38328:	e1a00007 	mov	r0, r7
   3832c:	e59f1108 	ldr	r1, [pc, #264]	; 3843c <CMemorySystem::CMemorySystem(bool)+0x13c>
   38330:	ebfffa7d 	bl	36d2c <CHeapAllocator::CHeapAllocator(char const*)>
   38334:	e1a00006 	mov	r0, r6
   38338:	eb0007e2 	bl	3a2c8 <CPageAllocator::CPageAllocator()>
   3833c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38340:	e3403004 	movt	r3, #4
   38344:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   38348:	e5935000 	ldr	r5, [r3]
   3834c:	e3550000 	cmp	r5, #0
   38350:	0a000002 	beq	38360 <CMemorySystem::CMemorySystem(bool)+0x60>
   38354:	e1a00004 	mov	r0, r4
   38358:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3835c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   38360:	e3a01001 	mov	r1, #1
   38364:	e28d000c 	add	r0, sp, #12
   38368:	e5834000 	str	r4, [r3]
   3836c:	ebffd174 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   38370:	e3a03014 	mov	r3, #20
   38374:	e3a01005 	mov	r1, #5
   38378:	e3401001 	movt	r1, #1
   3837c:	e08d2003 	add	r2, sp, r3
   38380:	e28d000c 	add	r0, sp, #12
   38384:	e58d5000 	str	r5, [sp]
   38388:	ebffd1bf 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3838c:	e3500000 	cmp	r0, #0
   38390:	0a00001e 	beq	38410 <CMemorySystem::CMemorySystem(bool)+0x110>
   38394:	e59d3020 	ldr	r3, [sp, #32]
   38398:	e3530000 	cmp	r3, #0
   3839c:	1a000021 	bne	38428 <CMemorySystem::CMemorySystem(bool)+0x128>
   383a0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   383a4:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   383a8:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   383ac:	e1a00007 	mov	r0, r7
   383b0:	e3a01605 	mov	r1, #5242880	; 0x500000
   383b4:	e5843004 	str	r3, [r4, #4]
   383b8:	e3a03701 	mov	r3, #262144	; 0x40000
   383bc:	ebfffa72 	bl	36d8c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   383c0:	e3a02501 	mov	r2, #4194304	; 0x400000
   383c4:	e1a01005 	mov	r1, r5
   383c8:	e1a00006 	mov	r0, r6
   383cc:	eb0007c5 	bl	3a2e8 <CPageAllocator::Setup(unsigned int, unsigned int)>
   383d0:	e5d43000 	ldrb	r3, [r4]
   383d4:	e3530000 	cmp	r3, #0
   383d8:	0a000007 	beq	383fc <CMemorySystem::CMemorySystem(bool)+0xfc>
   383dc:	e3a00004 	mov	r0, #4
   383e0:	ebfffa2d 	bl	36c9c <operator new(unsigned int)>
   383e4:	e5941004 	ldr	r1, [r4, #4]
   383e8:	e1a05000 	mov	r5, r0
   383ec:	eb000016 	bl	3844c <CPageTable::CPageTable(unsigned int)>
   383f0:	e1a00004 	mov	r0, r4
   383f4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   383f8:	ebffff92 	bl	38248 <CMemorySystem::EnableMMU()>
   383fc:	e28d000c 	add	r0, sp, #12
   38400:	ebffd156 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   38404:	e1a00004 	mov	r0, r4
   38408:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3840c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   38410:	e3a03303 	mov	r3, #201326592	; 0xc000000
   38414:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   38418:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   3841c:	e58d0020 	str	r0, [sp, #32]
   38420:	e58d3024 	str	r3, [sp, #36]	; 0x24
   38424:	eaffffe0 	b	383ac <CMemorySystem::CMemorySystem(bool)+0xac>
   38428:	e3031784 	movw	r1, #14212	; 0x3784
   3842c:	e3401004 	movt	r1, #4
   38430:	e3a0204e 	mov	r2, #78	; 0x4e
   38434:	e2810074 	add	r0, r1, #116	; 0x74
   38438:	ebffd120 	bl	2c8c0 <assertion_failed>
   3843c:	000437f0 	.word	0x000437f0

00038440 <CMemorySystem::GetCoherentPage(unsigned int)>:
   38440:	e1a00600 	lsl	r0, r0, #12
   38444:	e2800501 	add	r0, r0, #4194304	; 0x400000
   38448:	e12fff1e 	bx	lr

0003844c <CPageTable::CPageTable(unsigned int)>:
   3844c:	e3a039ba 	mov	r3, #3047424	; 0x2e8000
   38450:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   38454:	e1a02003 	mov	r2, r3
   38458:	e30ae8d8 	movw	lr, #43224	; 0xa8d8
   3845c:	e340e003 	movt	lr, #3
   38460:	e5803000 	str	r3, [r0]
   38464:	e3007412 	movw	r7, #1042	; 0x412
   38468:	e3407041 	movt	r7, #65	; 0x41
   3846c:	e30f5ffe 	movw	r5, #65534	; 0xfffe
   38470:	e3445003 	movt	r5, #16387	; 0x4003
   38474:	e1a08000 	mov	r8, r0
   38478:	e3a03000 	mov	r3, #0
   3847c:	e1a04001 	mov	r4, r1
   38480:	e300641e 	movw	r6, #1054	; 0x41e
   38484:	e300140e 	movw	r1, #1038	; 0x40e
   38488:	e153000e 	cmp	r3, lr
   3848c:	3183c001 	orrcc	ip, r3, r1
   38490:	3a000009 	bcc	384bc <CPageTable::CPageTable(unsigned int)+0x70>
   38494:	e3530501 	cmp	r3, #4194304	; 0x400000
   38498:	01a0c007 	moveq	ip, r7
   3849c:	0a000006 	beq	384bc <CPageTable::CPageTable(unsigned int)+0x70>
   384a0:	e1530004 	cmp	r3, r4
   384a4:	e1a0c003 	mov	ip, r3
   384a8:	3183c006 	orrcc	ip, r3, r6
   384ac:	3a000002 	bcc	384bc <CPageTable::CPageTable(unsigned int)+0x70>
   384b0:	e1530005 	cmp	r3, r5
   384b4:	9383cb41 	orrls	ip, r3, #66560	; 0x10400
   384b8:	938cc016 	orrls	ip, ip, #22
   384bc:	e482c004 	str	ip, [r2], #4
   384c0:	e2833601 	add	r3, r3, #1048576	; 0x100000
   384c4:	e35209bb 	cmp	r2, #3063808	; 0x2ec000
   384c8:	1affffee 	bne	38488 <CPageTable::CPageTable(unsigned int)+0x3c>
   384cc:	ebfffd95 	bl	37b28 <CleanDataCache>
   384d0:	e1a00008 	mov	r0, r8
   384d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000384d8 <CPageTable::~CPageTable()>:
   384d8:	e12fff1e 	bx	lr

000384dc <CPageTable::GetBaseAddress() const>:
   384dc:	e5900000 	ldr	r0, [r0]
   384e0:	e3800059 	orr	r0, r0, #89	; 0x59
   384e4:	e12fff1e 	bx	lr

000384e8 <CurrentExecutionLevel>:
   384e8:	e10f0000 	mrs	r0, CPSR
   384ec:	e3100040 	tst	r0, #64	; 0x40
   384f0:	07e003d0 	ubfxeq	r0, r0, #7, #1
   384f4:	13a00002 	movne	r0, #2
   384f8:	e12fff1e 	bx	lr

000384fc <EnterCritical>:
   384fc:	e2403001 	sub	r3, r0, #1
   38500:	e92d4010 	push	{r4, lr}
   38504:	e3530001 	cmp	r3, #1
   38508:	8a000012 	bhi	38558 <EnterCritical+0x5c>
   3850c:	e10f1000 	mrs	r1, CPSR
   38510:	e3500002 	cmp	r0, #2
   38514:	1a000015 	bne	38570 <EnterCritical+0x74>
   38518:	f10c00c0 	cpsid	if
   3851c:	e3043fb8 	movw	r3, #20408	; 0x4fb8
   38520:	e3403004 	movt	r3, #4
   38524:	e5932000 	ldr	r2, [r3]
   38528:	e3520013 	cmp	r2, #19
   3852c:	8a000017 	bhi	38590 <EnterCritical+0x94>
   38530:	e5932000 	ldr	r2, [r3]
   38534:	e3500001 	cmp	r0, #1
   38538:	e2820001 	add	r0, r2, #1
   3853c:	e5830000 	str	r0, [r3]
   38540:	e0833102 	add	r3, r3, r2, lsl #2
   38544:	e5831008 	str	r1, [r3, #8]
   38548:	1a000000 	bne	38550 <EnterCritical+0x54>
   3854c:	f1080040 	cpsie	f
   38550:	f57ff05f 	dmb	sy
   38554:	e8bd8010 	pop	{r4, pc}
   38558:	e3031814 	movw	r1, #14356	; 0x3814
   3855c:	e3401004 	movt	r1, #4
   38560:	e3030824 	movw	r0, #14372	; 0x3824
   38564:	e3400004 	movt	r0, #4
   38568:	e3a02064 	mov	r2, #100	; 0x64
   3856c:	ebffd0d3 	bl	2c8c0 <assertion_failed>
   38570:	e3110040 	tst	r1, #64	; 0x40
   38574:	0affffe7 	beq	38518 <EnterCritical+0x1c>
   38578:	e3031814 	movw	r1, #14356	; 0x3814
   3857c:	e3401004 	movt	r1, #4
   38580:	e303085c 	movw	r0, #14428	; 0x385c
   38584:	e3400004 	movt	r0, #4
   38588:	e3a0206a 	mov	r2, #106	; 0x6a
   3858c:	ebffd0cb 	bl	2c8c0 <assertion_failed>
   38590:	e3031814 	movw	r1, #14356	; 0x3814
   38594:	e3401004 	movt	r1, #4
   38598:	e303088c 	movw	r0, #14476	; 0x388c
   3859c:	e3400004 	movt	r0, #4
   385a0:	e3a0206e 	mov	r2, #110	; 0x6e
   385a4:	ebffd0c5 	bl	2c8c0 <assertion_failed>

000385a8 <LeaveCritical>:
   385a8:	f57ff05f 	dmb	sy
   385ac:	f10c0040 	cpsid	f
   385b0:	e3043fb8 	movw	r3, #20408	; 0x4fb8
   385b4:	e3403004 	movt	r3, #4
   385b8:	e5932000 	ldr	r2, [r3]
   385bc:	e3520000 	cmp	r2, #0
   385c0:	0a000006 	beq	385e0 <LeaveCritical+0x38>
   385c4:	e5932000 	ldr	r2, [r3]
   385c8:	e2422001 	sub	r2, r2, #1
   385cc:	e5832000 	str	r2, [r3]
   385d0:	e0833102 	add	r3, r3, r2, lsl #2
   385d4:	e5933008 	ldr	r3, [r3, #8]
   385d8:	e121f003 	msr	CPSR_c, r3
   385dc:	e12fff1e 	bx	lr
   385e0:	e3031814 	movw	r1, #14356	; 0x3814
   385e4:	e3401004 	movt	r1, #4
   385e8:	e30308b4 	movw	r0, #14516	; 0x38b4
   385ec:	e3400004 	movt	r0, #4
   385f0:	e3a0207f 	mov	r2, #127	; 0x7f
   385f4:	e92d4010 	push	{r4, lr}
   385f8:	ebffd0b0 	bl	2c8c0 <assertion_failed>

000385fc <SyncDataAndInstructionCache>:
   385fc:	e92d4010 	push	{r4, lr}
   38600:	ebfffd48 	bl	37b28 <CleanDataCache>
   38604:	e3a03000 	mov	r3, #0
   38608:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   3860c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   38610:	f57ff04f 	dsb	sy
   38614:	f57ff06f 	isb	sy
   38618:	e8bd8010 	pop	{r4, pc}

0003861c <CInterruptSystem::CInterruptSystem()>:
   3861c:	e3a02000 	mov	r2, #0
   38620:	e2403004 	sub	r3, r0, #4
   38624:	e2801f53 	add	r1, r0, #332	; 0x14c
   38628:	e5a32004 	str	r2, [r3, #4]!
   3862c:	e1530001 	cmp	r3, r1
   38630:	e5832150 	str	r2, [r3, #336]	; 0x150
   38634:	1afffffb 	bne	38628 <CInterruptSystem::CInterruptSystem()+0xc>
   38638:	e3053010 	movw	r3, #20496	; 0x5010
   3863c:	e3403004 	movt	r3, #4
   38640:	e5830000 	str	r0, [r3]
   38644:	e12fff1e 	bx	lr

00038648 <CInterruptSystem::~CInterruptSystem()>:
   38648:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3864c:	f10c0080 	cpsid	i
   38650:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
   38654:	e3a03a0b 	mov	r3, #45056	; 0xb000
   38658:	e3433f00 	movt	r3, #16128	; 0x3f00
   3865c:	e3052010 	movw	r2, #20496	; 0x5010
   38660:	e3402004 	movt	r2, #4
   38664:	e3a01000 	mov	r1, #0
   38668:	e3e0c000 	mvn	ip, #0
   3866c:	e583120c 	str	r1, [r3, #524]	; 0x20c
   38670:	e583c21c 	str	ip, [r3, #540]	; 0x21c
   38674:	e583c220 	str	ip, [r3, #544]	; 0x220
   38678:	e583c224 	str	ip, [r3, #548]	; 0x224
   3867c:	e58e1040 	str	r1, [lr, #64]	; 0x40
   38680:	e5821000 	str	r1, [r2]
   38684:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00038688 <CInterruptSystem::Initialize()>:
   38688:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3868c:	e3a03004 	mov	r3, #4
   38690:	e3082074 	movw	r2, #32884	; 0x8074
   38694:	e3402003 	movt	r2, #3
   38698:	e24dd00c 	sub	sp, sp, #12
   3869c:	e58d3004 	str	r3, [sp, #4]
   386a0:	e30830b4 	movw	r3, #32948	; 0x80b4
   386a4:	e3403003 	movt	r3, #3
   386a8:	e59d0004 	ldr	r0, [sp, #4]
   386ac:	e59dc004 	ldr	ip, [sp, #4]
   386b0:	e59d1004 	ldr	r1, [sp, #4]
   386b4:	e2800014 	add	r0, r0, #20
   386b8:	e0422000 	sub	r2, r2, r0
   386bc:	e2811018 	add	r1, r1, #24
   386c0:	e0433001 	sub	r3, r3, r1
   386c4:	e59d1004 	ldr	r1, [sp, #4]
   386c8:	e1a02142 	asr	r2, r2, #2
   386cc:	e1a03143 	asr	r3, r3, #2
   386d0:	e2422002 	sub	r2, r2, #2
   386d4:	e2433002 	sub	r3, r3, #2
   386d8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   386dc:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   386e0:	e58c2014 	str	r2, [ip, #20]
   386e4:	e5813018 	str	r3, [r1, #24]
   386e8:	ebffffc3 	bl	385fc <SyncDataAndInstructionCache>
   386ec:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   386f0:	e3a03a0b 	mov	r3, #45056	; 0xb000
   386f4:	e3433f00 	movt	r3, #16128	; 0x3f00
   386f8:	e3e02000 	mvn	r2, #0
   386fc:	e3a01000 	mov	r1, #0
   38700:	e583120c 	str	r1, [r3, #524]	; 0x20c
   38704:	e583221c 	str	r2, [r3, #540]	; 0x21c
   38708:	e5832220 	str	r2, [r3, #544]	; 0x220
   3870c:	e5832224 	str	r2, [r3, #548]	; 0x224
   38710:	e5801040 	str	r1, [r0, #64]	; 0x40
   38714:	f1080080 	cpsie	i
   38718:	e3a00001 	mov	r0, #1
   3871c:	e28dd00c 	add	sp, sp, #12
   38720:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00038724 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   38724:	e3510053 	cmp	r1, #83	; 0x53
   38728:	e92d4010 	push	{r4, lr}
   3872c:	8a00001d 	bhi	387a8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x84>
   38730:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   38734:	e080e101 	add	lr, r0, r1, lsl #2
   38738:	e35c0000 	cmp	ip, #0
   3873c:	1a00001f 	bne	387c0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
   38740:	e7802101 	str	r2, [r0, r1, lsl #2]
   38744:	e3510047 	cmp	r1, #71	; 0x47
   38748:	e58e3150 	str	r3, [lr, #336]	; 0x150
   3874c:	9a000006 	bls	3876c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   38750:	e3510049 	cmp	r1, #73	; 0x49
   38754:	1a00001f 	bne	387d8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb4>
   38758:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   3875c:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   38760:	e3833002 	orr	r3, r3, #2
   38764:	e5823040 	str	r3, [r2, #64]	; 0x40
   38768:	e8bd8010 	pop	{r4, pc}
   3876c:	e351001f 	cmp	r1, #31
   38770:	930b3210 	movwls	r3, #45584	; 0xb210
   38774:	93433f00 	movtls	r3, #16128	; 0x3f00
   38778:	9a000005 	bls	38794 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x70>
   3877c:	e351003f 	cmp	r1, #63	; 0x3f
   38780:	e30b2218 	movw	r2, #45592	; 0xb218
   38784:	e3432f00 	movt	r2, #16128	; 0x3f00
   38788:	e30b3214 	movw	r3, #45588	; 0xb214
   3878c:	e3433f00 	movt	r3, #16128	; 0x3f00
   38790:	81a03002 	movhi	r3, r2
   38794:	e201101f 	and	r1, r1, #31
   38798:	e3a02001 	mov	r2, #1
   3879c:	e1a02112 	lsl	r2, r2, r1
   387a0:	e5832000 	str	r2, [r3]
   387a4:	e8bd8010 	pop	{r4, pc}
   387a8:	e30318cc 	movw	r1, #14540	; 0x38cc
   387ac:	e3401004 	movt	r1, #4
   387b0:	e30308dc 	movw	r0, #14556	; 0x38dc
   387b4:	e3400004 	movt	r0, #4
   387b8:	e3a02076 	mov	r2, #118	; 0x76
   387bc:	ebffd03f 	bl	2c8c0 <assertion_failed>
   387c0:	e30318cc 	movw	r1, #14540	; 0x38cc
   387c4:	e3401004 	movt	r1, #4
   387c8:	e30308f0 	movw	r0, #14576	; 0x38f0
   387cc:	e3400004 	movt	r0, #4
   387d0:	e3a02077 	mov	r2, #119	; 0x77
   387d4:	ebffd039 	bl	2c8c0 <assertion_failed>
   387d8:	e30318cc 	movw	r1, #14540	; 0x38cc
   387dc:	e3401004 	movt	r1, #4
   387e0:	e303090c 	movw	r0, #14604	; 0x390c
   387e4:	e3400004 	movt	r0, #4
   387e8:	e3a020b0 	mov	r2, #176	; 0xb0
   387ec:	ebffd033 	bl	2c8c0 <assertion_failed>

000387f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   387f0:	e3510053 	cmp	r1, #83	; 0x53
   387f4:	e92d4010 	push	{r4, lr}
   387f8:	8a00001e 	bhi	38878 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x88>
   387fc:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   38800:	e0802101 	add	r2, r0, r1, lsl #2
   38804:	e3530000 	cmp	r3, #0
   38808:	0a000020 	beq	38890 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa0>
   3880c:	e3510047 	cmp	r1, #71	; 0x47
   38810:	9a000009 	bls	3883c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   38814:	e3510049 	cmp	r1, #73	; 0x49
   38818:	1a000022 	bne	388a8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb8>
   3881c:	e3a0c101 	mov	ip, #1073741824	; 0x40000000
   38820:	e59c3040 	ldr	r3, [ip, #64]	; 0x40
   38824:	e3c33002 	bic	r3, r3, #2
   38828:	e58c3040 	str	r3, [ip, #64]	; 0x40
   3882c:	e3a03000 	mov	r3, #0
   38830:	e7803101 	str	r3, [r0, r1, lsl #2]
   38834:	e5823150 	str	r3, [r2, #336]	; 0x150
   38838:	e8bd8010 	pop	{r4, pc}
   3883c:	e351001f 	cmp	r1, #31
   38840:	930b321c 	movwls	r3, #45596	; 0xb21c
   38844:	93433f00 	movtls	r3, #16128	; 0x3f00
   38848:	9a000005 	bls	38864 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   3884c:	e351003f 	cmp	r1, #63	; 0x3f
   38850:	e30bc224 	movw	ip, #45604	; 0xb224
   38854:	e343cf00 	movt	ip, #16128	; 0x3f00
   38858:	e30b3220 	movw	r3, #45600	; 0xb220
   3885c:	e3433f00 	movt	r3, #16128	; 0x3f00
   38860:	81a0300c 	movhi	r3, ip
   38864:	e201e01f 	and	lr, r1, #31
   38868:	e3a0c001 	mov	ip, #1
   3886c:	e1a0ce1c 	lsl	ip, ip, lr
   38870:	e583c000 	str	ip, [r3]
   38874:	eaffffec 	b	3882c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   38878:	e30318cc 	movw	r1, #14540	; 0x38cc
   3887c:	e3401004 	movt	r1, #4
   38880:	e30308dc 	movw	r0, #14556	; 0x38dc
   38884:	e3400004 	movt	r0, #4
   38888:	e3a02081 	mov	r2, #129	; 0x81
   3888c:	ebffd00b 	bl	2c8c0 <assertion_failed>
   38890:	e30318cc 	movw	r1, #14540	; 0x38cc
   38894:	e3401004 	movt	r1, #4
   38898:	e303092c 	movw	r0, #14636	; 0x392c
   3889c:	e3400004 	movt	r0, #4
   388a0:	e3a02082 	mov	r2, #130	; 0x82
   388a4:	ebffd005 	bl	2c8c0 <assertion_failed>
   388a8:	e30318cc 	movw	r1, #14540	; 0x38cc
   388ac:	e3401004 	movt	r1, #4
   388b0:	e303090c 	movw	r0, #14604	; 0x390c
   388b4:	e3400004 	movt	r0, #4
   388b8:	e3a020c8 	mov	r2, #200	; 0xc8
   388bc:	ebffcfff 	bl	2c8c0 <assertion_failed>

000388c0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   388c0:	e3510047 	cmp	r1, #71	; 0x47
   388c4:	e92d4010 	push	{r4, lr}
   388c8:	8a00001e 	bhi	38948 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   388cc:	e3520000 	cmp	r2, #0
   388d0:	0a000022 	beq	38960 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
   388d4:	e3040e34 	movw	r0, #20020	; 0x4e34
   388d8:	e3400004 	movt	r0, #4
   388dc:	e5d0e001 	ldrb	lr, [r0, #1]
   388e0:	e5d0c000 	ldrb	ip, [r0]
   388e4:	e18cc40e 	orr	ip, ip, lr, lsl #8
   388e8:	e5d0e002 	ldrb	lr, [r0, #2]
   388ec:	e18cc80e 	orr	ip, ip, lr, lsl #16
   388f0:	e5d0e003 	ldrb	lr, [r0, #3]
   388f4:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   388f8:	1a00001e 	bne	38978 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   388fc:	e7e7c452 	ubfx	ip, r2, #8, #8
   38900:	e5c0c001 	strb	ip, [r0, #1]
   38904:	e7e7c852 	ubfx	ip, r2, #16, #8
   38908:	e5c0c002 	strb	ip, [r0, #2]
   3890c:	e3a0ca0b 	mov	ip, #45056	; 0xb000
   38910:	e343cf00 	movt	ip, #16128	; 0x3f00
   38914:	e7e7e453 	ubfx	lr, r3, #8, #8
   38918:	e5c02000 	strb	r2, [r0]
   3891c:	e5c03004 	strb	r3, [r0, #4]
   38920:	e1a02c22 	lsr	r2, r2, #24
   38924:	e3811080 	orr	r1, r1, #128	; 0x80
   38928:	e5c02003 	strb	r2, [r0, #3]
   3892c:	e5c0e005 	strb	lr, [r0, #5]
   38930:	e7e72853 	ubfx	r2, r3, #16, #8
   38934:	e1a03c23 	lsr	r3, r3, #24
   38938:	e5c02006 	strb	r2, [r0, #6]
   3893c:	e5c03007 	strb	r3, [r0, #7]
   38940:	e58c120c 	str	r1, [ip, #524]	; 0x20c
   38944:	e8bd8010 	pop	{r4, pc}
   38948:	e30318cc 	movw	r1, #14540	; 0x38cc
   3894c:	e3401004 	movt	r1, #4
   38950:	e3030948 	movw	r0, #14664	; 0x3948
   38954:	e3400004 	movt	r0, #4
   38958:	e3a0208f 	mov	r2, #143	; 0x8f
   3895c:	ebffcfd7 	bl	2c8c0 <assertion_failed>
   38960:	e30318cc 	movw	r1, #14540	; 0x38cc
   38964:	e3401004 	movt	r1, #4
   38968:	e303097c 	movw	r0, #14716	; 0x397c
   3896c:	e3400004 	movt	r0, #4
   38970:	e3a02090 	mov	r2, #144	; 0x90
   38974:	ebffcfd1 	bl	2c8c0 <assertion_failed>
   38978:	e30318cc 	movw	r1, #14540	; 0x38cc
   3897c:	e3401004 	movt	r1, #4
   38980:	e303095c 	movw	r0, #14684	; 0x395c
   38984:	e3400004 	movt	r0, #4
   38988:	e3a02091 	mov	r2, #145	; 0x91
   3898c:	ebffcfcb 	bl	2c8c0 <assertion_failed>

00038990 <CInterruptSystem::DisconnectFIQ()>:
   38990:	e3043e34 	movw	r3, #20020	; 0x4e34
   38994:	e3403004 	movt	r3, #4
   38998:	e5d32000 	ldrb	r2, [r3]
   3899c:	e5d3c001 	ldrb	ip, [r3, #1]
   389a0:	e5d30002 	ldrb	r0, [r3, #2]
   389a4:	e5d31003 	ldrb	r1, [r3, #3]
   389a8:	e182240c 	orr	r2, r2, ip, lsl #8
   389ac:	e1822800 	orr	r2, r2, r0, lsl #16
   389b0:	e1922c01 	orrs	r2, r2, r1, lsl #24
   389b4:	0a00000c 	beq	389ec <CInterruptSystem::DisconnectFIQ()+0x5c>
   389b8:	e3a01a0b 	mov	r1, #45056	; 0xb000
   389bc:	e3431f00 	movt	r1, #16128	; 0x3f00
   389c0:	e3a02000 	mov	r2, #0
   389c4:	e581220c 	str	r2, [r1, #524]	; 0x20c
   389c8:	e5c32000 	strb	r2, [r3]
   389cc:	e5c32001 	strb	r2, [r3, #1]
   389d0:	e5c32002 	strb	r2, [r3, #2]
   389d4:	e5c32003 	strb	r2, [r3, #3]
   389d8:	e5c32004 	strb	r2, [r3, #4]
   389dc:	e5c32005 	strb	r2, [r3, #5]
   389e0:	e5c32006 	strb	r2, [r3, #6]
   389e4:	e5c32007 	strb	r2, [r3, #7]
   389e8:	e12fff1e 	bx	lr
   389ec:	e30318cc 	movw	r1, #14540	; 0x38cc
   389f0:	e3401004 	movt	r1, #4
   389f4:	e3030974 	movw	r0, #14708	; 0x3974
   389f8:	e3400004 	movt	r0, #4
   389fc:	e3a0209b 	mov	r2, #155	; 0x9b
   38a00:	e92d4010 	push	{r4, lr}
   38a04:	ebffcfad 	bl	2c8c0 <assertion_failed>

00038a08 <CInterruptSystem::EnableIRQ(unsigned int)>:
   38a08:	e3500053 	cmp	r0, #83	; 0x53
   38a0c:	e92d4010 	push	{r4, lr}
   38a10:	8a000017 	bhi	38a74 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   38a14:	e3500047 	cmp	r0, #71	; 0x47
   38a18:	8a00000e 	bhi	38a58 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   38a1c:	e350001f 	cmp	r0, #31
   38a20:	930b3210 	movwls	r3, #45584	; 0xb210
   38a24:	93433f00 	movtls	r3, #16128	; 0x3f00
   38a28:	9a000005 	bls	38a44 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   38a2c:	e350003f 	cmp	r0, #63	; 0x3f
   38a30:	e30b2218 	movw	r2, #45592	; 0xb218
   38a34:	e3432f00 	movt	r2, #16128	; 0x3f00
   38a38:	e30b3214 	movw	r3, #45588	; 0xb214
   38a3c:	e3433f00 	movt	r3, #16128	; 0x3f00
   38a40:	81a03002 	movhi	r3, r2
   38a44:	e200001f 	and	r0, r0, #31
   38a48:	e3a02001 	mov	r2, #1
   38a4c:	e1a02012 	lsl	r2, r2, r0
   38a50:	e5832000 	str	r2, [r3]
   38a54:	e8bd8010 	pop	{r4, pc}
   38a58:	e3500049 	cmp	r0, #73	; 0x49
   38a5c:	1a00000a 	bne	38a8c <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   38a60:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   38a64:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   38a68:	e3833002 	orr	r3, r3, #2
   38a6c:	e5823040 	str	r3, [r2, #64]	; 0x40
   38a70:	e8bd8010 	pop	{r4, pc}
   38a74:	e30318cc 	movw	r1, #14540	; 0x38cc
   38a78:	e3401004 	movt	r1, #4
   38a7c:	e30308dc 	movw	r0, #14556	; 0x38dc
   38a80:	e3400004 	movt	r0, #4
   38a84:	e3a020a7 	mov	r2, #167	; 0xa7
   38a88:	ebffcf8c 	bl	2c8c0 <assertion_failed>
   38a8c:	e30318cc 	movw	r1, #14540	; 0x38cc
   38a90:	e3401004 	movt	r1, #4
   38a94:	e303090c 	movw	r0, #14604	; 0x390c
   38a98:	e3400004 	movt	r0, #4
   38a9c:	e3a020b0 	mov	r2, #176	; 0xb0
   38aa0:	ebffcf86 	bl	2c8c0 <assertion_failed>

00038aa4 <CInterruptSystem::DisableIRQ(unsigned int)>:
   38aa4:	e3500053 	cmp	r0, #83	; 0x53
   38aa8:	e92d4010 	push	{r4, lr}
   38aac:	8a000017 	bhi	38b10 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   38ab0:	e3500047 	cmp	r0, #71	; 0x47
   38ab4:	8a00000e 	bhi	38af4 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   38ab8:	e350001f 	cmp	r0, #31
   38abc:	930b321c 	movwls	r3, #45596	; 0xb21c
   38ac0:	93433f00 	movtls	r3, #16128	; 0x3f00
   38ac4:	9a000005 	bls	38ae0 <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   38ac8:	e350003f 	cmp	r0, #63	; 0x3f
   38acc:	e30b2224 	movw	r2, #45604	; 0xb224
   38ad0:	e3432f00 	movt	r2, #16128	; 0x3f00
   38ad4:	e30b3220 	movw	r3, #45600	; 0xb220
   38ad8:	e3433f00 	movt	r3, #16128	; 0x3f00
   38adc:	81a03002 	movhi	r3, r2
   38ae0:	e200001f 	and	r0, r0, #31
   38ae4:	e3a02001 	mov	r2, #1
   38ae8:	e1a02012 	lsl	r2, r2, r0
   38aec:	e5832000 	str	r2, [r3]
   38af0:	e8bd8010 	pop	{r4, pc}
   38af4:	e3500049 	cmp	r0, #73	; 0x49
   38af8:	1a00000a 	bne	38b28 <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   38afc:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   38b00:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   38b04:	e3c33002 	bic	r3, r3, #2
   38b08:	e5823040 	str	r3, [r2, #64]	; 0x40
   38b0c:	e8bd8010 	pop	{r4, pc}
   38b10:	e30318cc 	movw	r1, #14540	; 0x38cc
   38b14:	e3401004 	movt	r1, #4
   38b18:	e30308dc 	movw	r0, #14556	; 0x38dc
   38b1c:	e3400004 	movt	r0, #4
   38b20:	e3a020bf 	mov	r2, #191	; 0xbf
   38b24:	ebffcf65 	bl	2c8c0 <assertion_failed>
   38b28:	e30318cc 	movw	r1, #14540	; 0x38cc
   38b2c:	e3401004 	movt	r1, #4
   38b30:	e303090c 	movw	r0, #14604	; 0x390c
   38b34:	e3400004 	movt	r0, #4
   38b38:	e3a020c8 	mov	r2, #200	; 0xc8
   38b3c:	ebffcf5f 	bl	2c8c0 <assertion_failed>

00038b40 <CInterruptSystem::EnableFIQ(unsigned int)>:
   38b40:	e3500047 	cmp	r0, #71	; 0x47
   38b44:	8a000004 	bhi	38b5c <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   38b48:	e3a03a0b 	mov	r3, #45056	; 0xb000
   38b4c:	e3433f00 	movt	r3, #16128	; 0x3f00
   38b50:	e3800080 	orr	r0, r0, #128	; 0x80
   38b54:	e583020c 	str	r0, [r3, #524]	; 0x20c
   38b58:	e12fff1e 	bx	lr
   38b5c:	e30318cc 	movw	r1, #14540	; 0x38cc
   38b60:	e3401004 	movt	r1, #4
   38b64:	e3030948 	movw	r0, #14664	; 0x3948
   38b68:	e3400004 	movt	r0, #4
   38b6c:	e3a020d7 	mov	r2, #215	; 0xd7
   38b70:	e92d4010 	push	{r4, lr}
   38b74:	ebffcf51 	bl	2c8c0 <assertion_failed>

00038b78 <CInterruptSystem::DisableFIQ()>:
   38b78:	e3a03a0b 	mov	r3, #45056	; 0xb000
   38b7c:	e3433f00 	movt	r3, #16128	; 0x3f00
   38b80:	e3a02000 	mov	r2, #0
   38b84:	e583220c 	str	r2, [r3, #524]	; 0x20c
   38b88:	e12fff1e 	bx	lr

00038b8c <CInterruptSystem::Get()>:
   38b8c:	e3053010 	movw	r3, #20496	; 0x5010
   38b90:	e3403004 	movt	r3, #4
   38b94:	e5930000 	ldr	r0, [r3]
   38b98:	e3500000 	cmp	r0, #0
   38b9c:	112fff1e 	bxne	lr
   38ba0:	e30318cc 	movw	r1, #14540	; 0x38cc
   38ba4:	e3401004 	movt	r1, #4
   38ba8:	e30c0730 	movw	r0, #50992	; 0xc730
   38bac:	e3400003 	movt	r0, #3
   38bb0:	e3a020e9 	mov	r2, #233	; 0xe9
   38bb4:	e92d4010 	push	{r4, lr}
   38bb8:	ebffcf40 	bl	2c8c0 <assertion_failed>

00038bbc <CInterruptSystem::CallIRQHandler(unsigned int)>:
   38bbc:	e3510053 	cmp	r1, #83	; 0x53
   38bc0:	e92d4010 	push	{r4, lr}
   38bc4:	8a00000b 	bhi	38bf8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   38bc8:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   38bcc:	e0803101 	add	r3, r0, r1, lsl #2
   38bd0:	e3540000 	cmp	r4, #0
   38bd4:	0a000003 	beq	38be8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   38bd8:	e5930150 	ldr	r0, [r3, #336]	; 0x150
   38bdc:	e12fff34 	blx	r4
   38be0:	e3a00001 	mov	r0, #1
   38be4:	e8bd8010 	pop	{r4, pc}
   38be8:	e1a00001 	mov	r0, r1
   38bec:	ebffffac 	bl	38aa4 <CInterruptSystem::DisableIRQ(unsigned int)>
   38bf0:	e1a00004 	mov	r0, r4
   38bf4:	e8bd8010 	pop	{r4, pc}
   38bf8:	e30318cc 	movw	r1, #14540	; 0x38cc
   38bfc:	e3401004 	movt	r1, #4
   38c00:	e30308dc 	movw	r0, #14556	; 0x38dc
   38c04:	e3400004 	movt	r0, #4
   38c08:	e3a020ef 	mov	r2, #239	; 0xef
   38c0c:	ebffcf2b 	bl	2c8c0 <assertion_failed>

00038c10 <CInterruptSystem::InterruptHandler()>:
   38c10:	e3053010 	movw	r3, #20496	; 0x5010
   38c14:	e3403004 	movt	r3, #4
   38c18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   38c1c:	e5938000 	ldr	r8, [r3]
   38c20:	e24dd010 	sub	sp, sp, #16
   38c24:	e3580000 	cmp	r8, #0
   38c28:	0a00003a 	beq	38d18 <CInterruptSystem::InterruptHandler()+0x108>
   38c2c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   38c30:	e5926060 	ldr	r6, [r2, #96]	; 0x60
   38c34:	e3c63e1f 	bic	r3, r6, #496	; 0x1f0
   38c38:	e3c33002 	bic	r3, r3, #2
   38c3c:	e3530000 	cmp	r3, #0
   38c40:	1a00003a 	bne	38d30 <CInterruptSystem::InterruptHandler()+0x120>
   38c44:	e2166002 	ands	r6, r6, #2
   38c48:	1a000025 	bne	38ce4 <CInterruptSystem::InterruptHandler()+0xd4>
   38c4c:	e3a03a0b 	mov	r3, #45056	; 0xb000
   38c50:	e3433f00 	movt	r3, #16128	; 0x3f00
   38c54:	e28d7004 	add	r7, sp, #4
   38c58:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   38c5c:	e58d2004 	str	r2, [sp, #4]
   38c60:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   38c64:	e58d2008 	str	r2, [sp, #8]
   38c68:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   38c6c:	e6ef3073 	uxtb	r3, r3
   38c70:	e58d300c 	str	r3, [sp, #12]
   38c74:	e4974004 	ldr	r4, [r7], #4
   38c78:	e3540000 	cmp	r4, #0
   38c7c:	1a000004 	bne	38c94 <CInterruptSystem::InterruptHandler()+0x84>
   38c80:	e2866020 	add	r6, r6, #32
   38c84:	e3560060 	cmp	r6, #96	; 0x60
   38c88:	1afffff9 	bne	38c74 <CInterruptSystem::InterruptHandler()+0x64>
   38c8c:	e28dd010 	add	sp, sp, #16
   38c90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   38c94:	e1a05006 	mov	r5, r6
   38c98:	ea000002 	b	38ca8 <CInterruptSystem::InterruptHandler()+0x98>
   38c9c:	e2855001 	add	r5, r5, #1
   38ca0:	e1b040a4 	lsrs	r4, r4, #1
   38ca4:	0afffff5 	beq	38c80 <CInterruptSystem::InterruptHandler()+0x70>
   38ca8:	e3140001 	tst	r4, #1
   38cac:	0afffffa 	beq	38c9c <CInterruptSystem::InterruptHandler()+0x8c>
   38cb0:	e3550053 	cmp	r5, #83	; 0x53
   38cb4:	8a000011 	bhi	38d00 <CInterruptSystem::InterruptHandler()+0xf0>
   38cb8:	e7983105 	ldr	r3, [r8, r5, lsl #2]
   38cbc:	e3530000 	cmp	r3, #0
   38cc0:	0a000004 	beq	38cd8 <CInterruptSystem::InterruptHandler()+0xc8>
   38cc4:	e2855054 	add	r5, r5, #84	; 0x54
   38cc8:	e7980105 	ldr	r0, [r8, r5, lsl #2]
   38ccc:	e28dd010 	add	sp, sp, #16
   38cd0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   38cd4:	e12fff13 	bx	r3
   38cd8:	e1a00005 	mov	r0, r5
   38cdc:	ebffff70 	bl	38aa4 <CInterruptSystem::DisableIRQ(unsigned int)>
   38ce0:	eaffffed 	b	38c9c <CInterruptSystem::InterruptHandler()+0x8c>
   38ce4:	e5983124 	ldr	r3, [r8, #292]	; 0x124
   38ce8:	e3530000 	cmp	r3, #0
   38cec:	0a000015 	beq	38d48 <CInterruptSystem::InterruptHandler()+0x138>
   38cf0:	e5980274 	ldr	r0, [r8, #628]	; 0x274
   38cf4:	e28dd010 	add	sp, sp, #16
   38cf8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   38cfc:	e12fff13 	bx	r3
   38d00:	e30318cc 	movw	r1, #14540	; 0x38cc
   38d04:	e3401004 	movt	r1, #4
   38d08:	e30308dc 	movw	r0, #14556	; 0x38dc
   38d0c:	e3400004 	movt	r0, #4
   38d10:	e3a020ef 	mov	r2, #239	; 0xef
   38d14:	ebffcee9 	bl	2c8c0 <assertion_failed>
   38d18:	e30318cc 	movw	r1, #14540	; 0x38cc
   38d1c:	e3401004 	movt	r1, #4
   38d20:	e30c0730 	movw	r0, #50992	; 0xc730
   38d24:	e3400003 	movt	r0, #3
   38d28:	e3002102 	movw	r2, #258	; 0x102
   38d2c:	ebffcee3 	bl	2c8c0 <assertion_failed>
   38d30:	e30318cc 	movw	r1, #14540	; 0x38cc
   38d34:	e3401004 	movt	r1, #4
   38d38:	e303098c 	movw	r0, #14732	; 0x398c
   38d3c:	e3400004 	movt	r0, #4
   38d40:	e3002106 	movw	r2, #262	; 0x106
   38d44:	ebffcedd 	bl	2c8c0 <assertion_failed>
   38d48:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   38d4c:	e3c33002 	bic	r3, r3, #2
   38d50:	e5823040 	str	r3, [r2, #64]	; 0x40
   38d54:	eaffffcc 	b	38c8c <CInterruptSystem::InterruptHandler()+0x7c>

00038d58 <InterruptHandler>:
   38d58:	eaffffac 	b	38c10 <CInterruptSystem::InterruptHandler()>

00038d5c <malloc>:
   38d5c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38d60:	e3403004 	movt	r3, #4
   38d64:	e1a01000 	mov	r1, r0
   38d68:	e5930000 	ldr	r0, [r3]
   38d6c:	e280000c 	add	r0, r0, #12
   38d70:	eafff80b 	b	36da4 <CHeapAllocator::Allocate(unsigned int)>

00038d74 <memalign>:
   38d74:	e3500040 	cmp	r0, #64	; 0x40
   38d78:	8a000004 	bhi	38d90 <memalign+0x1c>
   38d7c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38d80:	e3403004 	movt	r3, #4
   38d84:	e5930000 	ldr	r0, [r3]
   38d88:	e280000c 	add	r0, r0, #12
   38d8c:	eafff804 	b	36da4 <CHeapAllocator::Allocate(unsigned int)>
   38d90:	e30319c0 	movw	r1, #14784	; 0x39c0
   38d94:	e3401004 	movt	r1, #4
   38d98:	e3a02021 	mov	r2, #33	; 0x21
   38d9c:	e281000c 	add	r0, r1, #12
   38da0:	e92d4010 	push	{r4, lr}
   38da4:	ebffcec5 	bl	2c8c0 <assertion_failed>

00038da8 <free>:
   38da8:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38dac:	e3403004 	movt	r3, #4
   38db0:	e1a01000 	mov	r1, r0
   38db4:	e5930000 	ldr	r0, [r3]
   38db8:	e280000c 	add	r0, r0, #12
   38dbc:	eafff872 	b	36f8c <CHeapAllocator::Free(void*)>

00038dc0 <calloc>:
   38dc0:	e92d4070 	push	{r4, r5, r6, lr}
   38dc4:	e0040190 	mul	r4, r0, r1
   38dc8:	e3540001 	cmp	r4, #1
   38dcc:	33a04001 	movcc	r4, #1
   38dd0:	e1500004 	cmp	r0, r4
   38dd4:	8a00000c 	bhi	38e0c <calloc+0x4c>
   38dd8:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38ddc:	e3403004 	movt	r3, #4
   38de0:	e1a01004 	mov	r1, r4
   38de4:	e5930000 	ldr	r0, [r3]
   38de8:	e280000c 	add	r0, r0, #12
   38dec:	ebfff7ec 	bl	36da4 <CHeapAllocator::Allocate(unsigned int)>
   38df0:	e2505000 	subs	r5, r0, #0
   38df4:	0a000002 	beq	38e04 <calloc+0x44>
   38df8:	e1a02004 	mov	r2, r4
   38dfc:	e3a01000 	mov	r1, #0
   38e00:	ebfff585 	bl	3641c <memset>
   38e04:	e1a00005 	mov	r0, r5
   38e08:	e8bd8070 	pop	{r4, r5, r6, pc}
   38e0c:	e30319c0 	movw	r1, #14784	; 0x39c0
   38e10:	e3401004 	movt	r1, #4
   38e14:	e3a02031 	mov	r2, #49	; 0x31
   38e18:	e2810028 	add	r0, r1, #40	; 0x28
   38e1c:	ebffcea7 	bl	2c8c0 <assertion_failed>

00038e20 <realloc>:
   38e20:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38e24:	e3403004 	movt	r3, #4
   38e28:	e1a02001 	mov	r2, r1
   38e2c:	e1a01000 	mov	r1, r0
   38e30:	e5930000 	ldr	r0, [r3]
   38e34:	e280000c 	add	r0, r0, #12
   38e38:	eafff896 	b	37098 <CHeapAllocator::ReAllocate(void*, unsigned int)>

00038e3c <palloc>:
   38e3c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38e40:	e3403004 	movt	r3, #4
   38e44:	e5930000 	ldr	r0, [r3]
   38e48:	e28000c8 	add	r0, r0, #200	; 0xc8
   38e4c:	ea000542 	b	3a35c <CPageAllocator::Allocate()>

00038e50 <pfree>:
   38e50:	e3043fb4 	movw	r3, #20404	; 0x4fb4
   38e54:	e3403004 	movt	r3, #4
   38e58:	e1a01000 	mov	r1, r0
   38e5c:	e5930000 	ldr	r0, [r3]
   38e60:	e28000c8 	add	r0, r0, #200	; 0xc8
   38e64:	ea00056f 	b	3a428 <CPageAllocator::Free(void*)>

00038e68 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   38e68:	e92d4070 	push	{r4, r5, r6, lr}
   38e6c:	e1a04000 	mov	r4, r0
   38e70:	e24dd028 	sub	sp, sp, #40	; 0x28
   38e74:	e5803010 	str	r3, [r0, #16]
   38e78:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   38e7c:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   38e80:	e8801006 	stm	r0, {r1, r2, ip}
   38e84:	e3550000 	cmp	r5, #0
   38e88:	e5dd6044 	ldrb	r6, [sp, #68]	; 0x44
   38e8c:	e5805014 	str	r5, [r0, #20]
   38e90:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   38e94:	e584000c 	str	r0, [r4, #12]
   38e98:	e3a00000 	mov	r0, #0
   38e9c:	e5840018 	str	r0, [r4, #24]
   38ea0:	e584001c 	str	r0, [r4, #28]
   38ea4:	e5840020 	str	r0, [r4, #32]
   38ea8:	e5840024 	str	r0, [r4, #36]	; 0x24
   38eac:	1a000033 	bne	38f80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x118>
   38eb0:	e1520000 	cmp	r2, r0
   38eb4:	11510000 	cmpne	r1, r0
   38eb8:	1a00001a 	bne	38f28 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc0>
   38ebc:	e1a01005 	mov	r1, r5
   38ec0:	e28d000c 	add	r0, sp, #12
   38ec4:	ebffce9e 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   38ec8:	e3a03014 	mov	r3, #20
   38ecc:	e08d2003 	add	r2, sp, r3
   38ed0:	e3a01003 	mov	r1, #3
   38ed4:	e3401004 	movt	r1, #4
   38ed8:	e28d000c 	add	r0, sp, #12
   38edc:	e58d5000 	str	r5, [sp]
   38ee0:	ebffcee9 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   38ee4:	e3500000 	cmp	r0, #0
   38ee8:	0a000007 	beq	38f0c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa4>
   38eec:	e59d2020 	ldr	r2, [sp, #32]
   38ef0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   38ef4:	e884000c 	stm	r4, {r2, r3}
   38ef8:	e2422d0a 	sub	r2, r2, #640	; 0x280
   38efc:	e2433e1e 	sub	r3, r3, #480	; 0x1e0
   38f00:	e3530e69 	cmp	r3, #1680	; 0x690
   38f04:	93520d36 	cmpls	r2, #3456	; 0xd80
   38f08:	9a000002 	bls	38f18 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb0>
   38f0c:	e3a02d0a 	mov	r2, #640	; 0x280
   38f10:	e3a03e1e 	mov	r3, #480	; 0x1e0
   38f14:	e884000c 	stm	r4, {r2, r3}
   38f18:	e28d000c 	add	r0, sp, #12
   38f1c:	ebffce8f 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   38f20:	e594c008 	ldr	ip, [r4, #8]
   38f24:	e5943010 	ldr	r3, [r4, #16]
   38f28:	e35c0000 	cmp	ip, #0
   38f2c:	1a000016 	bne	38f8c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>
   38f30:	e8940006 	ldm	r4, {r1, r2}
   38f34:	e3530008 	cmp	r3, #8
   38f38:	e5841008 	str	r1, [r4, #8]
   38f3c:	e0222296 	mla	r2, r6, r2, r2
   38f40:	e584200c 	str	r2, [r4, #12]
   38f44:	9a000015 	bls	38fa0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x138>
   38f48:	e3a02070 	mov	r2, #112	; 0x70
   38f4c:	e2840028 	add	r0, r4, #40	; 0x28
   38f50:	e30319fc 	movw	r1, #14844	; 0x39fc
   38f54:	e3401004 	movt	r1, #4
   38f58:	ebfff546 	bl	36478 <memcpy>
   38f5c:	e5941008 	ldr	r1, [r4, #8]
   38f60:	e8940009 	ldm	r4, {r0, r3}
   38f64:	e5843038 	str	r3, [r4, #56]	; 0x38
   38f68:	e594200c 	ldr	r2, [r4, #12]
   38f6c:	e5943010 	ldr	r3, [r4, #16]
   38f70:	e5840034 	str	r0, [r4, #52]	; 0x34
   38f74:	e5841048 	str	r1, [r4, #72]	; 0x48
   38f78:	e584204c 	str	r2, [r4, #76]	; 0x4c
   38f7c:	e584305c 	str	r3, [r4, #92]	; 0x5c
   38f80:	e1a00004 	mov	r0, r4
   38f84:	e28dd028 	add	sp, sp, #40	; 0x28
   38f88:	e8bd8070 	pop	{r4, r5, r6, pc}
   38f8c:	e594200c 	ldr	r2, [r4, #12]
   38f90:	e3520000 	cmp	r2, #0
   38f94:	0affffe5 	beq	38f30 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc8>
   38f98:	e3530008 	cmp	r3, #8
   38f9c:	8affffe9 	bhi	38f48 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe0>
   38fa0:	e3000414 	movw	r0, #1044	; 0x414
   38fa4:	ebfff742 	bl	36cb4 <operator new[](unsigned int)>
   38fa8:	e3a02b01 	mov	r2, #1024	; 0x400
   38fac:	e1a03000 	mov	r3, r0
   38fb0:	e3a01000 	mov	r1, #0
   38fb4:	e5843024 	str	r3, [r4, #36]	; 0x24
   38fb8:	e2800014 	add	r0, r0, #20
   38fbc:	ebfff516 	bl	3641c <memset>
   38fc0:	eaffffe0 	b	38f48 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe0>

00038fc4 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   38fc4:	e92d4010 	push	{r4, lr}
   38fc8:	e1a04000 	mov	r4, r0
   38fcc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   38fd0:	e3500000 	cmp	r0, #0
   38fd4:	0a000001 	beq	38fe0 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   38fd8:	e3a01014 	mov	r1, #20
   38fdc:	ebfff746 	bl	36cfc <operator delete(void*, unsigned int)>
   38fe0:	e1a00004 	mov	r0, r4
   38fe4:	e8bd8010 	pop	{r4, pc}

00038fe8 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   38fe8:	e5903010 	ldr	r3, [r0, #16]
   38fec:	e3530008 	cmp	r3, #8
   38ff0:	812fff1e 	bxhi	lr
   38ff4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   38ff8:	e1a0c5a2 	lsr	ip, r2, #11
   38ffc:	e1a00982 	lsl	r0, r2, #19
   39000:	e2811004 	add	r1, r1, #4
   39004:	e200073e 	and	r0, r0, #16252928	; 0xf80000
   39008:	e1a02282 	lsl	r2, r2, #5
   3900c:	e180018c 	orr	r0, r0, ip, lsl #3
   39010:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   39014:	e0833101 	add	r3, r3, r1, lsl #2
   39018:	e1822000 	orr	r2, r2, r0
   3901c:	e38214ff 	orr	r1, r2, #-16777216	; 0xff000000
   39020:	e5c32004 	strb	r2, [r3, #4]
   39024:	e1a00421 	lsr	r0, r1, #8
   39028:	e1a02821 	lsr	r2, r1, #16
   3902c:	e5c30005 	strb	r0, [r3, #5]
   39030:	e1a01c21 	lsr	r1, r1, #24
   39034:	e5c32006 	strb	r2, [r3, #6]
   39038:	e5c31007 	strb	r1, [r3, #7]
   3903c:	e12fff1e 	bx	lr

00039040 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   39040:	e5903010 	ldr	r3, [r0, #16]
   39044:	e3530008 	cmp	r3, #8
   39048:	812fff1e 	bxhi	lr
   3904c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   39050:	e2811004 	add	r1, r1, #4
   39054:	e7e7c452 	ubfx	ip, r2, #8, #8
   39058:	e7e70852 	ubfx	r0, r2, #16, #8
   3905c:	e0833101 	add	r3, r3, r1, lsl #2
   39060:	e5c32004 	strb	r2, [r3, #4]
   39064:	e1a02c22 	lsr	r2, r2, #24
   39068:	e5c3c005 	strb	ip, [r3, #5]
   3906c:	e5c30006 	strb	r0, [r3, #6]
   39070:	e5c32007 	strb	r2, [r3, #7]
   39074:	e12fff1e 	bx	lr

00039078 <CBcmFrameBuffer::GetWidth() const>:
   39078:	e5900000 	ldr	r0, [r0]
   3907c:	e12fff1e 	bx	lr

00039080 <CBcmFrameBuffer::GetHeight() const>:
   39080:	e5900004 	ldr	r0, [r0, #4]
   39084:	e12fff1e 	bx	lr

00039088 <CBcmFrameBuffer::GetVirtWidth() const>:
   39088:	e5900008 	ldr	r0, [r0, #8]
   3908c:	e12fff1e 	bx	lr

00039090 <CBcmFrameBuffer::GetVirtHeight() const>:
   39090:	e590000c 	ldr	r0, [r0, #12]
   39094:	e12fff1e 	bx	lr

00039098 <CBcmFrameBuffer::GetPitch() const>:
   39098:	e5900020 	ldr	r0, [r0, #32]
   3909c:	e12fff1e 	bx	lr

000390a0 <CBcmFrameBuffer::GetDepth() const>:
   390a0:	e5900010 	ldr	r0, [r0, #16]
   390a4:	e12fff1e 	bx	lr

000390a8 <CBcmFrameBuffer::GetBuffer() const>:
   390a8:	e5900018 	ldr	r0, [r0, #24]
   390ac:	e12fff1e 	bx	lr

000390b0 <CBcmFrameBuffer::GetSize() const>:
   390b0:	e590001c 	ldr	r0, [r0, #28]
   390b4:	e12fff1e 	bx	lr

000390b8 <CBcmFrameBuffer::UpdatePalette()>:
   390b8:	e5903010 	ldr	r3, [r0, #16]
   390bc:	e3530008 	cmp	r3, #8
   390c0:	9a000001 	bls	390cc <CBcmFrameBuffer::UpdatePalette()+0x14>
   390c4:	e3a00001 	mov	r0, #1
   390c8:	e12fff1e 	bx	lr
   390cc:	e92d4010 	push	{r4, lr}
   390d0:	e1a04000 	mov	r4, r0
   390d4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   390d8:	e24dd010 	sub	sp, sp, #16
   390dc:	e3a01000 	mov	r1, #0
   390e0:	e3a02001 	mov	r2, #1
   390e4:	e28d0008 	add	r0, sp, #8
   390e8:	e5c32011 	strb	r2, [r3, #17]
   390ec:	e5c3100c 	strb	r1, [r3, #12]
   390f0:	e5c3100d 	strb	r1, [r3, #13]
   390f4:	e5c3100e 	strb	r1, [r3, #14]
   390f8:	e5c3100f 	strb	r1, [r3, #15]
   390fc:	e5c31010 	strb	r1, [r3, #16]
   39100:	e5c31012 	strb	r1, [r3, #18]
   39104:	e5c31013 	strb	r1, [r3, #19]
   39108:	ebffce0d 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3910c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   39110:	e3003408 	movw	r3, #1032	; 0x408
   39114:	e28d0008 	add	r0, sp, #8
   39118:	e58d3000 	str	r3, [sp]
   3911c:	e308100b 	movw	r1, #32779	; 0x800b
   39120:	e3401004 	movt	r1, #4
   39124:	e3003414 	movw	r3, #1044	; 0x414
   39128:	ebffce57 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3912c:	e3500000 	cmp	r0, #0
   39130:	0a000008 	beq	39158 <CBcmFrameBuffer::UpdatePalette()+0xa0>
   39134:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   39138:	e5d2300c 	ldrb	r3, [r2, #12]
   3913c:	e5d2000d 	ldrb	r0, [r2, #13]
   39140:	e5d2100e 	ldrb	r1, [r2, #14]
   39144:	e5d2200f 	ldrb	r2, [r2, #15]
   39148:	e1833400 	orr	r3, r3, r0, lsl #8
   3914c:	e1833801 	orr	r3, r3, r1, lsl #16
   39150:	e1933c02 	orrs	r3, r3, r2, lsl #24
   39154:	0a000004 	beq	3916c <CBcmFrameBuffer::UpdatePalette()+0xb4>
   39158:	e28d0008 	add	r0, sp, #8
   3915c:	ebffcdff 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   39160:	e3a00000 	mov	r0, #0
   39164:	e28dd010 	add	sp, sp, #16
   39168:	e8bd8010 	pop	{r4, pc}
   3916c:	e28d0008 	add	r0, sp, #8
   39170:	ebffcdfa 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   39174:	e3a00001 	mov	r0, #1
   39178:	e28dd010 	add	sp, sp, #16
   3917c:	e8bd8010 	pop	{r4, pc}

00039180 <CBcmFrameBuffer::Initialize()>:
   39180:	e5901014 	ldr	r1, [r0, #20]
   39184:	e92d4030 	push	{r4, r5, lr}
   39188:	e3510000 	cmp	r1, #0
   3918c:	e24dd00c 	sub	sp, sp, #12
   39190:	13a04000 	movne	r4, #0
   39194:	0a000002 	beq	391a4 <CBcmFrameBuffer::Initialize()+0x24>
   39198:	e1a00004 	mov	r0, r4
   3919c:	e28dd00c 	add	sp, sp, #12
   391a0:	e8bd8030 	pop	{r4, r5, pc}
   391a4:	e1a05000 	mov	r5, r0
   391a8:	e1a0000d 	mov	r0, sp
   391ac:	ebffcde4 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   391b0:	e3a02070 	mov	r2, #112	; 0x70
   391b4:	e2851028 	add	r1, r5, #40	; 0x28
   391b8:	e1a0000d 	mov	r0, sp
   391bc:	ebffcdec 	bl	2c974 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   391c0:	e2504000 	subs	r4, r0, #0
   391c4:	0a00001a 	beq	39234 <CBcmFrameBuffer::Initialize()+0xb4>
   391c8:	e5954034 	ldr	r4, [r5, #52]	; 0x34
   391cc:	e3540000 	cmp	r4, #0
   391d0:	0a000017 	beq	39234 <CBcmFrameBuffer::Initialize()+0xb4>
   391d4:	e5954038 	ldr	r4, [r5, #56]	; 0x38
   391d8:	e3540000 	cmp	r4, #0
   391dc:	0a000014 	beq	39234 <CBcmFrameBuffer::Initialize()+0xb4>
   391e0:	e5954048 	ldr	r4, [r5, #72]	; 0x48
   391e4:	e3540000 	cmp	r4, #0
   391e8:	0a000011 	beq	39234 <CBcmFrameBuffer::Initialize()+0xb4>
   391ec:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
   391f0:	e3540000 	cmp	r4, #0
   391f4:	0a00000e 	beq	39234 <CBcmFrameBuffer::Initialize()+0xb4>
   391f8:	e595405c 	ldr	r4, [r5, #92]	; 0x5c
   391fc:	e3540000 	cmp	r4, #0
   39200:	0a00000b 	beq	39234 <CBcmFrameBuffer::Initialize()+0xb4>
   39204:	e5954080 	ldr	r4, [r5, #128]	; 0x80
   39208:	e3540000 	cmp	r4, #0
   3920c:	0a000008 	beq	39234 <CBcmFrameBuffer::Initialize()+0xb4>
   39210:	e5952084 	ldr	r2, [r5, #132]	; 0x84
   39214:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   39218:	e5953094 	ldr	r3, [r5, #148]	; 0x94
   3921c:	e1a00005 	mov	r0, r5
   39220:	e5854018 	str	r4, [r5, #24]
   39224:	e585201c 	str	r2, [r5, #28]
   39228:	e5853020 	str	r3, [r5, #32]
   3922c:	ebffffa1 	bl	390b8 <CBcmFrameBuffer::UpdatePalette()>
   39230:	e1a04000 	mov	r4, r0
   39234:	e1a0000d 	mov	r0, sp
   39238:	ebffcdc8 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   3923c:	e1a00004 	mov	r0, r4
   39240:	e28dd00c 	add	sp, sp, #12
   39244:	e8bd8030 	pop	{r4, r5, pc}

00039248 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   39248:	e92d4070 	push	{r4, r5, r6, lr}
   3924c:	e1a05001 	mov	r5, r1
   39250:	e3a01000 	mov	r1, #0
   39254:	e24dd028 	sub	sp, sp, #40	; 0x28
   39258:	e1a06002 	mov	r6, r2
   3925c:	e28d000c 	add	r0, sp, #12
   39260:	ebffcdb7 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   39264:	e3a03014 	mov	r3, #20
   39268:	e3a02008 	mov	r2, #8
   3926c:	e28d000c 	add	r0, sp, #12
   39270:	e58d2000 	str	r2, [sp]
   39274:	e3081009 	movw	r1, #32777	; 0x8009
   39278:	e3401004 	movt	r1, #4
   3927c:	e08d2003 	add	r2, sp, r3
   39280:	e58d5020 	str	r5, [sp, #32]
   39284:	e58d6024 	str	r6, [sp, #36]	; 0x24
   39288:	ebffcdff 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3928c:	e2504000 	subs	r4, r0, #0
   39290:	0a000006 	beq	392b0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   39294:	e59d3020 	ldr	r3, [sp, #32]
   39298:	e1530005 	cmp	r3, r5
   3929c:	13a04000 	movne	r4, #0
   392a0:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   392a4:	00404006 	subeq	r4, r0, r6
   392a8:	016f4f14 	clzeq	r4, r4
   392ac:	01a042a4 	lsreq	r4, r4, #5
   392b0:	e28d000c 	add	r0, sp, #12
   392b4:	ebffcda9 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   392b8:	e1a00004 	mov	r0, r4
   392bc:	e28dd028 	add	sp, sp, #40	; 0x28
   392c0:	e8bd8070 	pop	{r4, r5, r6, pc}

000392c4 <CBcmFrameBuffer::WaitForVerticalSync()>:
   392c4:	e92d4010 	push	{r4, lr}
   392c8:	e3a01000 	mov	r1, #0
   392cc:	e24dd020 	sub	sp, sp, #32
   392d0:	e28d0008 	add	r0, sp, #8
   392d4:	ebffcd9a 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   392d8:	e3a03010 	mov	r3, #16
   392dc:	e08d2003 	add	r2, sp, r3
   392e0:	e3a01000 	mov	r1, #0
   392e4:	e28d0008 	add	r0, sp, #8
   392e8:	e58d1000 	str	r1, [sp]
   392ec:	e308100e 	movw	r1, #32782	; 0x800e
   392f0:	e3401004 	movt	r1, #4
   392f4:	ebffcde4 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   392f8:	e1a04000 	mov	r4, r0
   392fc:	e28d0008 	add	r0, sp, #8
   39300:	ebffcd96 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   39304:	e1a00004 	mov	r0, r4
   39308:	e28dd020 	add	sp, sp, #32
   3930c:	e8bd8010 	pop	{r4, pc}

00039310 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   39310:	e92d4010 	push	{r4, lr}
   39314:	e1a04001 	mov	r4, r1
   39318:	e3a01000 	mov	r1, #0
   3931c:	e24dd020 	sub	sp, sp, #32
   39320:	e28d0008 	add	r0, sp, #8
   39324:	ebffcd86 	bl	2c944 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   39328:	e3a03010 	mov	r3, #16
   3932c:	e08d2003 	add	r2, sp, r3
   39330:	e3a01004 	mov	r1, #4
   39334:	e28d0008 	add	r0, sp, #8
   39338:	e58d1000 	str	r1, [sp]
   3933c:	e308100f 	movw	r1, #32783	; 0x800f
   39340:	e3401004 	movt	r1, #4
   39344:	e58d401c 	str	r4, [sp, #28]
   39348:	ebffcdcf 	bl	2ca8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3934c:	e1a04000 	mov	r4, r0
   39350:	e28d0008 	add	r0, sp, #8
   39354:	ebffcd81 	bl	2c960 <CBcmPropertyTags::~CBcmPropertyTags()>
   39358:	e1a00004 	mov	r0, r4
   3935c:	e28dd020 	add	sp, sp, #32
   39360:	e8bd8010 	pop	{r4, pc}

00039364 <CBcmFrameBuffer::SetDisplay()>:
   39364:	e12fff1e 	bx	lr

00039368 <CBcmFrameBuffer::GetNumDisplays()>:
   39368:	e3a00001 	mov	r0, #1
   3936c:	e12fff1e 	bx	lr

00039370 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   39370:	e5801000 	str	r1, [r0]
   39374:	e5c02004 	strb	r2, [r0, #4]
   39378:	e12fff1e 	bx	lr

0003937c <CBcmMailBox::~CBcmMailBox()>:
   3937c:	e12fff1e 	bx	lr

00039380 <CBcmMailBox::WriteRead(unsigned int)>:
   39380:	e92d4070 	push	{r4, r5, r6, lr}
   39384:	e1a05000 	mov	r5, r0
   39388:	e5d03004 	ldrb	r3, [r0, #4]
   3938c:	e24dd008 	sub	sp, sp, #8
   39390:	e1a06001 	mov	r6, r1
   39394:	e3530000 	cmp	r3, #0
   39398:	1a000004 	bne	393b0 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   3939c:	e3053014 	movw	r3, #20500	; 0x5014
   393a0:	e3403004 	movt	r3, #4
   393a4:	e5930000 	ldr	r0, [r3]
   393a8:	e3500000 	cmp	r0, #0
   393ac:	1a000029 	bne	39458 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   393b0:	e3a04a0b 	mov	r4, #45056	; 0xb000
   393b4:	e3434f00 	movt	r4, #16128	; 0x3f00
   393b8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   393bc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   393c0:	1a000005 	bne	393dc <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   393c4:	e3a00014 	mov	r0, #20
   393c8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   393cc:	ebfff1b0 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   393d0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   393d4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   393d8:	0afffff9 	beq	393c4 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   393dc:	e3a00a0b 	mov	r0, #45056	; 0xb000
   393e0:	e3430f00 	movt	r0, #16128	; 0x3f00
   393e4:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   393e8:	e3530000 	cmp	r3, #0
   393ec:	bafffffc 	blt	393e4 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   393f0:	e316000f 	tst	r6, #15
   393f4:	1a00001e 	bne	39474 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   393f8:	e5953000 	ldr	r3, [r5]
   393fc:	e3a02a0b 	mov	r2, #45056	; 0xb000
   39400:	e3432f00 	movt	r2, #16128	; 0x3f00
   39404:	e1866003 	orr	r6, r6, r3
   39408:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   3940c:	e5950000 	ldr	r0, [r5]
   39410:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   39414:	e3130101 	tst	r3, #1073741824	; 0x40000000
   39418:	1afffffc 	bne	39410 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   3941c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   39420:	e203100f 	and	r1, r3, #15
   39424:	e1510000 	cmp	r1, r0
   39428:	1afffff8 	bne	39410 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   3942c:	e5d52004 	ldrb	r2, [r5, #4]
   39430:	e3c3000f 	bic	r0, r3, #15
   39434:	e3520000 	cmp	r2, #0
   39438:	1a000004 	bne	39450 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   3943c:	e3053014 	movw	r3, #20500	; 0x5014
   39440:	e3403004 	movt	r3, #4
   39444:	e5933000 	ldr	r3, [r3]
   39448:	e3530000 	cmp	r3, #0
   3944c:	1a000003 	bne	39460 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   39450:	e28dd008 	add	sp, sp, #8
   39454:	e8bd8070 	pop	{r4, r5, r6, pc}
   39458:	ebfffc27 	bl	384fc <EnterCritical>
   3945c:	eaffffd3 	b	393b0 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   39460:	e58d0004 	str	r0, [sp, #4]
   39464:	ebfffc4f 	bl	385a8 <LeaveCritical>
   39468:	e59d0004 	ldr	r0, [sp, #4]
   3946c:	e28dd008 	add	sp, sp, #8
   39470:	e8bd8070 	pop	{r4, r5, r6, pc}
   39474:	e3031a6c 	movw	r1, #14956	; 0x3a6c
   39478:	e3401004 	movt	r1, #4
   3947c:	e3030a7c 	movw	r0, #14972	; 0x3a7c
   39480:	e3400004 	movt	r0, #4
   39484:	e3a02062 	mov	r2, #98	; 0x62
   39488:	ebffcd0c 	bl	2c8c0 <assertion_failed>

0003948c <CBcmMailBox::Flush()>:
   3948c:	e92d4010 	push	{r4, lr}
   39490:	e3a04a0b 	mov	r4, #45056	; 0xb000
   39494:	e3434f00 	movt	r4, #16128	; 0x3f00
   39498:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   3949c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   394a0:	18bd8010 	popne	{r4, pc}
   394a4:	e3a00014 	mov	r0, #20
   394a8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   394ac:	ebfff178 	bl	35a94 <CTimer::SimpleMsDelay(unsigned int)>
   394b0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   394b4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   394b8:	0afffff9 	beq	394a4 <CBcmMailBox::Flush()+0x18>
   394bc:	e8bd8010 	pop	{r4, pc}

000394c0 <CBcmMailBox::Read()>:
   394c0:	e5901000 	ldr	r1, [r0]
   394c4:	e3a02a0b 	mov	r2, #45056	; 0xb000
   394c8:	e3432f00 	movt	r2, #16128	; 0x3f00
   394cc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   394d0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   394d4:	1afffffc 	bne	394cc <CBcmMailBox::Read()+0xc>
   394d8:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   394dc:	e200300f 	and	r3, r0, #15
   394e0:	e1530001 	cmp	r3, r1
   394e4:	1afffff8 	bne	394cc <CBcmMailBox::Read()+0xc>
   394e8:	e3c0000f 	bic	r0, r0, #15
   394ec:	e12fff1e 	bx	lr

000394f0 <CBcmMailBox::Write(unsigned int)>:
   394f0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   394f4:	e3432f00 	movt	r2, #16128	; 0x3f00
   394f8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   394fc:	e3530000 	cmp	r3, #0
   39500:	bafffffc 	blt	394f8 <CBcmMailBox::Write(unsigned int)+0x8>
   39504:	e311000f 	tst	r1, #15
   39508:	1a000003 	bne	3951c <CBcmMailBox::Write(unsigned int)+0x2c>
   3950c:	e5903000 	ldr	r3, [r0]
   39510:	e1811003 	orr	r1, r1, r3
   39514:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   39518:	e12fff1e 	bx	lr
   3951c:	e3031a6c 	movw	r1, #14956	; 0x3a6c
   39520:	e3401004 	movt	r1, #4
   39524:	e3030a7c 	movw	r0, #14972	; 0x3a7c
   39528:	e3400004 	movt	r0, #4
   3952c:	e3a02062 	mov	r2, #98	; 0x62
   39530:	e92d4010 	push	{r4, lr}
   39534:	ebffcce1 	bl	2c8c0 <assertion_failed>

00039538 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   39538:	e3053014 	movw	r3, #20500	; 0x5014
   3953c:	e3403004 	movt	r3, #4
   39540:	e3a02000 	mov	r2, #0
   39544:	e5832000 	str	r2, [r3]
   39548:	e12fff1e 	bx	lr

0003954c <CCharGenerator::CCharGenerator()>:
   3954c:	e3a03008 	mov	r3, #8
   39550:	e5803000 	str	r3, [r0]
   39554:	e12fff1e 	bx	lr

00039558 <CCharGenerator::~CCharGenerator()>:
   39558:	e12fff1e 	bx	lr

0003955c <CCharGenerator::GetCharWidth() const>:
   3955c:	e5900000 	ldr	r0, [r0]
   39560:	e12fff1e 	bx	lr

00039564 <CCharGenerator::GetCharHeight() const>:
   39564:	e3a00013 	mov	r0, #19
   39568:	e12fff1e 	bx	lr

0003956c <CCharGenerator::GetUnderline() const>:
   3956c:	e3a00010 	mov	r0, #16
   39570:	e12fff1e 	bx	lr

00039574 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   39574:	e6ef1071 	uxtb	r1, r1
   39578:	e2411021 	sub	r1, r1, #33	; 0x21
   3957c:	e35100de 	cmp	r1, #222	; 0xde
   39580:	8a00000d 	bhi	395bc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   39584:	e5900000 	ldr	r0, [r0]
   39588:	e1500002 	cmp	r0, r2
   3958c:	9a00000c 	bls	395c4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   39590:	e353000f 	cmp	r3, #15
   39594:	8a000008 	bhi	395bc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   39598:	e3030ac0 	movw	r0, #15040	; 0x3ac0
   3959c:	e3400004 	movt	r0, #4
   395a0:	e0800201 	add	r0, r0, r1, lsl #4
   395a4:	e3a01080 	mov	r1, #128	; 0x80
   395a8:	e7d03003 	ldrb	r3, [r0, r3]
   395ac:	e0133251 	ands	r3, r3, r1, asr r2
   395b0:	13a00001 	movne	r0, #1
   395b4:	03a00000 	moveq	r0, #0
   395b8:	e12fff1e 	bx	lr
   395bc:	e3a00000 	mov	r0, #0
   395c0:	e12fff1e 	bx	lr
   395c4:	e3031a90 	movw	r1, #14992	; 0x3a90
   395c8:	e3401004 	movt	r1, #4
   395cc:	e3030aa4 	movw	r0, #15012	; 0x3aa4
   395d0:	e3400004 	movt	r0, #4
   395d4:	e3a0204e 	mov	r2, #78	; 0x4e
   395d8:	e92d4010 	push	{r4, lr}
   395dc:	ebffccb7 	bl	2c8c0 <assertion_failed>

000395e0 <DelayLoop>:
   395e0:	e1a01001 	mov	r1, r1
   395e4:	e1a02002 	mov	r2, r2
   395e8:	e2500001 	subs	r0, r0, #1
   395ec:	8afffffb 	bhi	395e0 <DelayLoop>
   395f0:	e1a0f00e 	mov	pc, lr

000395f4 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   395f4:	e92d4070 	push	{r4, r5, r6, lr}
   395f8:	e1a04000 	mov	r4, r0
   395fc:	e1a06001 	mov	r6, r1
   39600:	e1a05002 	mov	r5, r2
   39604:	ebffdb38 	bl	302ec <CMachineInfo::Get()>
   39608:	e1a01006 	mov	r1, r6
   3960c:	ebffdae0 	bl	30194 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   39610:	e3a01000 	mov	r1, #0
   39614:	e3500080 	cmp	r0, #128	; 0x80
   39618:	e8840003 	stm	r4, {r0, r1}
   3961c:	e5841008 	str	r1, [r4, #8]
   39620:	e584500c 	str	r5, [r4, #12]
   39624:	e5c41010 	strb	r1, [r4, #16]
   39628:	e5841014 	str	r1, [r4, #20]
   3962c:	e5841018 	str	r1, [r4, #24]
   39630:	e5c4101c 	strb	r1, [r4, #28]
   39634:	0a00001c 	beq	396ac <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb8>
   39638:	e350000b 	cmp	r0, #11
   3963c:	8a00001f 	bhi	396c0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xcc>
   39640:	e3a0003f 	mov	r0, #63	; 0x3f
   39644:	ebfff586 	bl	36c64 <operator new[](unsigned int, int)>
   39648:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   3964c:	e280301f 	add	r3, r0, #31
   39650:	e3a02a07 	mov	r2, #28672	; 0x7000
   39654:	e3432f00 	movt	r2, #16128	; 0x3f00
   39658:	e3c3301f 	bic	r3, r3, #31
   3965c:	e5941000 	ldr	r1, [r4]
   39660:	e9840009 	stmib	r4, {r0, r3}
   39664:	e3a00001 	mov	r0, #1
   39668:	edc30b06 	vstr	d16, [r3, #24]
   3966c:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   39670:	e1833110 	orr	r3, r3, r0, lsl r1
   39674:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   39678:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   3967c:	ebfff113 	bl	35ad0 <CTimer::SimpleusDelay(unsigned int)>
   39680:	e5942000 	ldr	r2, [r4]
   39684:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   39688:	e282283f 	add	r2, r2, #4128768	; 0x3f0000
   3968c:	e2822070 	add	r2, r2, #112	; 0x70
   39690:	e1a02402 	lsl	r2, r2, #8
   39694:	e5823000 	str	r3, [r2]
   39698:	e5923000 	ldr	r3, [r2]
   3969c:	e3530000 	cmp	r3, #0
   396a0:	bafffffc 	blt	39698 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xa4>
   396a4:	e1a00004 	mov	r0, r4
   396a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   396ac:	e30418b0 	movw	r1, #18608	; 0x48b0
   396b0:	e3401004 	movt	r1, #4
   396b4:	e3a02039 	mov	r2, #57	; 0x39
   396b8:	e2810010 	add	r0, r1, #16
   396bc:	ebffcc7f 	bl	2c8c0 <assertion_failed>
   396c0:	e30418b0 	movw	r1, #18608	; 0x48b0
   396c4:	e3401004 	movt	r1, #4
   396c8:	e3a0203a 	mov	r2, #58	; 0x3a
   396cc:	e2810030 	add	r0, r1, #48	; 0x30
   396d0:	ebffcc7a 	bl	2c8c0 <assertion_failed>

000396d4 <CDMAChannel::~CDMAChannel()>:
   396d4:	e5903000 	ldr	r3, [r0]
   396d8:	e92d4010 	push	{r4, lr}
   396dc:	e353000b 	cmp	r3, #11
   396e0:	8a00002c 	bhi	39798 <CDMAChannel::~CDMAChannel()+0xc4>
   396e4:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   396e8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   396ec:	e2833070 	add	r3, r3, #112	; 0x70
   396f0:	e1a04000 	mov	r4, r0
   396f4:	e1a03403 	lsl	r3, r3, #8
   396f8:	e5832000 	str	r2, [r3]
   396fc:	e5901000 	ldr	r1, [r0]
   39700:	e281283f 	add	r2, r1, #4128768	; 0x3f0000
   39704:	e2822070 	add	r2, r2, #112	; 0x70
   39708:	e1a02402 	lsl	r2, r2, #8
   3970c:	e5923000 	ldr	r3, [r2]
   39710:	e3530000 	cmp	r3, #0
   39714:	bafffffc 	blt	3970c <CDMAChannel::~CDMAChannel()+0x38>
   39718:	e3a03a07 	mov	r3, #28672	; 0x7000
   3971c:	e3433f00 	movt	r3, #16128	; 0x3f00
   39720:	e594000c 	ldr	r0, [r4, #12]
   39724:	e3a0e001 	mov	lr, #1
   39728:	e3a0c000 	mov	ip, #0
   3972c:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   39730:	e150000c 	cmp	r0, ip
   39734:	e1c2211e 	bic	r2, r2, lr, lsl r1
   39738:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   3973c:	e584c014 	str	ip, [r4, #20]
   39740:	0a000009 	beq	3976c <CDMAChannel::~CDMAChannel()+0x98>
   39744:	e5d43010 	ldrb	r3, [r4, #16]
   39748:	e153000c 	cmp	r3, ip
   3974c:	0a000004 	beq	39764 <CDMAChannel::~CDMAChannel()+0x90>
   39750:	e5941000 	ldr	r1, [r4]
   39754:	e351000c 	cmp	r1, #12
   39758:	8a000013 	bhi	397ac <CDMAChannel::~CDMAChannel()+0xd8>
   3975c:	e2811010 	add	r1, r1, #16
   39760:	ebfffc22 	bl	387f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   39764:	e3a03000 	mov	r3, #0
   39768:	e584300c 	str	r3, [r4, #12]
   3976c:	ebffdade 	bl	302ec <CMachineInfo::Get()>
   39770:	e5941000 	ldr	r1, [r4]
   39774:	ebffdabb 	bl	30268 <CMachineInfo::FreeDMAChannel(unsigned int)>
   39778:	e5940004 	ldr	r0, [r4, #4]
   3977c:	e3a03000 	mov	r3, #0
   39780:	e5843008 	str	r3, [r4, #8]
   39784:	e1500003 	cmp	r0, r3
   39788:	0a000000 	beq	39790 <CDMAChannel::~CDMAChannel()+0xbc>
   3978c:	ebfff554 	bl	36ce4 <operator delete[](void*)>
   39790:	e1a00004 	mov	r0, r4
   39794:	e8bd8010 	pop	{r4, pc}
   39798:	e30418b0 	movw	r1, #18608	; 0x48b0
   3979c:	e3401004 	movt	r1, #4
   397a0:	e3a02062 	mov	r2, #98	; 0x62
   397a4:	e2810030 	add	r0, r1, #48	; 0x30
   397a8:	ebffcc44 	bl	2c8c0 <assertion_failed>
   397ac:	e30418b0 	movw	r1, #18608	; 0x48b0
   397b0:	e3401004 	movt	r1, #4
   397b4:	e3a02074 	mov	r2, #116	; 0x74
   397b8:	e281004c 	add	r0, r1, #76	; 0x4c
   397bc:	ebffcc3f 	bl	2c8c0 <assertion_failed>

000397c0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   397c0:	e92d4070 	push	{r4, r5, r6, lr}
   397c4:	e2515000 	subs	r5, r1, #0
   397c8:	e59de010 	ldr	lr, [sp, #16]
   397cc:	e5dd1014 	ldrb	r1, [sp, #20]
   397d0:	0a00004e 	beq	39910 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x150>
   397d4:	e3520000 	cmp	r2, #0
   397d8:	0a000051 	beq	39924 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x164>
   397dc:	e1a04003 	mov	r4, r3
   397e0:	e3530000 	cmp	r3, #0
   397e4:	0a000053 	beq	39938 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x178>
   397e8:	e35e000f 	cmp	lr, #15
   397ec:	8a000056 	bhi	3994c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x18c>
   397f0:	e590c008 	ldr	ip, [r0, #8]
   397f4:	e1a06000 	mov	r6, r0
   397f8:	e35c0000 	cmp	ip, #0
   397fc:	0a000057 	beq	39960 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1a0>
   39800:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   39804:	8a00005a 	bhi	39974 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b4>
   39808:	e5903000 	ldr	r3, [r0]
   3980c:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   39810:	e2833070 	add	r3, r3, #112	; 0x70
   39814:	e1a03403 	lsl	r3, r3, #8
   39818:	e5933020 	ldr	r3, [r3, #32]
   3981c:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   39820:	e7e03e53 	ubfx	r3, r3, #28, #1
   39824:	e3540801 	cmp	r4, #65536	; 0x10000
   39828:	33833001 	orrcc	r3, r3, #1
   3982c:	e3530000 	cmp	r3, #0
   39830:	0a000054 	beq	39988 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   39834:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   39838:	e1a0e60e 	lsl	lr, lr, #12
   3983c:	e38eee33 	orr	lr, lr, #816	; 0x330
   39840:	e3510000 	cmp	r1, #0
   39844:	e1a03c23 	lsr	r3, r3, #24
   39848:	e5cc3007 	strb	r3, [ip, #7]
   3984c:	e3853103 	orr	r3, r5, #-1073741824	; 0xc0000000
   39850:	e5cc2004 	strb	r2, [ip, #4]
   39854:	e5cc5008 	strb	r5, [ip, #8]
   39858:	e1a03c23 	lsr	r3, r3, #24
   3985c:	e5cc400c 	strb	r4, [ip, #12]
   39860:	e5cc300b 	strb	r3, [ip, #11]
   39864:	e3a03000 	mov	r3, #0
   39868:	e5cc3010 	strb	r3, [ip, #16]
   3986c:	e5cc3011 	strb	r3, [ip, #17]
   39870:	e5cc3012 	strb	r3, [ip, #18]
   39874:	e5cc3013 	strb	r3, [ip, #19]
   39878:	e5cc3014 	strb	r3, [ip, #20]
   3987c:	e5cc3015 	strb	r3, [ip, #21]
   39880:	e5cc3016 	strb	r3, [ip, #22]
   39884:	e5cc3017 	strb	r3, [ip, #23]
   39888:	e3a03030 	mov	r3, #48	; 0x30
   3988c:	e5cc3000 	strb	r3, [ip]
   39890:	e1a0342e 	lsr	r3, lr, #8
   39894:	e5cc3001 	strb	r3, [ip, #1]
   39898:	e7e7385e 	ubfx	r3, lr, #16, #8
   3989c:	e1a0ec2e 	lsr	lr, lr, #24
   398a0:	e5cc3002 	strb	r3, [ip, #2]
   398a4:	e5cce003 	strb	lr, [ip, #3]
   398a8:	e7e73452 	ubfx	r3, r2, #8, #8
   398ac:	e5cc3005 	strb	r3, [ip, #5]
   398b0:	e7e73852 	ubfx	r3, r2, #16, #8
   398b4:	e5cc3006 	strb	r3, [ip, #6]
   398b8:	e7e73455 	ubfx	r3, r5, #8, #8
   398bc:	e5cc3009 	strb	r3, [ip, #9]
   398c0:	e7e73855 	ubfx	r3, r5, #16, #8
   398c4:	e5cc300a 	strb	r3, [ip, #10]
   398c8:	e7e73454 	ubfx	r3, r4, #8, #8
   398cc:	e5cc300d 	strb	r3, [ip, #13]
   398d0:	e7e73854 	ubfx	r3, r4, #16, #8
   398d4:	e5cc300e 	strb	r3, [ip, #14]
   398d8:	e1a03c24 	lsr	r3, r4, #24
   398dc:	e5cc300f 	strb	r3, [ip, #15]
   398e0:	1a000001 	bne	398ec <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x12c>
   398e4:	e5801020 	str	r1, [r0, #32]
   398e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   398ec:	e1a01004 	mov	r1, r4
   398f0:	e1a00002 	mov	r0, r2
   398f4:	e5865020 	str	r5, [r6, #32]
   398f8:	e5864024 	str	r4, [r6, #36]	; 0x24
   398fc:	ebfff8b3 	bl	37bd0 <CleanAndInvalidateDataCacheRange>
   39900:	e1a01004 	mov	r1, r4
   39904:	e1a00005 	mov	r0, r5
   39908:	e8bd4070 	pop	{r4, r5, r6, lr}
   3990c:	eafff8af 	b	37bd0 <CleanAndInvalidateDataCacheRange>
   39910:	e30418b0 	movw	r1, #18608	; 0x48b0
   39914:	e3401004 	movt	r1, #4
   39918:	e3a0208f 	mov	r2, #143	; 0x8f
   3991c:	e2810060 	add	r0, r1, #96	; 0x60
   39920:	ebffcbe6 	bl	2c8c0 <assertion_failed>
   39924:	e30418b0 	movw	r1, #18608	; 0x48b0
   39928:	e3401004 	movt	r1, #4
   3992c:	e3a02090 	mov	r2, #144	; 0x90
   39930:	e2810074 	add	r0, r1, #116	; 0x74
   39934:	ebffcbe1 	bl	2c8c0 <assertion_failed>
   39938:	e30418b0 	movw	r1, #18608	; 0x48b0
   3993c:	e3401004 	movt	r1, #4
   39940:	e3a02091 	mov	r2, #145	; 0x91
   39944:	e2810084 	add	r0, r1, #132	; 0x84
   39948:	ebffcbdc 	bl	2c8c0 <assertion_failed>
   3994c:	e30418b0 	movw	r1, #18608	; 0x48b0
   39950:	e3401004 	movt	r1, #4
   39954:	e3a02092 	mov	r2, #146	; 0x92
   39958:	e2810090 	add	r0, r1, #144	; 0x90
   3995c:	ebffcbd7 	bl	2c8c0 <assertion_failed>
   39960:	e30418b0 	movw	r1, #18608	; 0x48b0
   39964:	e3401004 	movt	r1, #4
   39968:	e3a02094 	mov	r2, #148	; 0x94
   3996c:	e28100a4 	add	r0, r1, #164	; 0xa4
   39970:	ebffcbd2 	bl	2c8c0 <assertion_failed>
   39974:	e30418b0 	movw	r1, #18608	; 0x48b0
   39978:	e3401004 	movt	r1, #4
   3997c:	e3a02095 	mov	r2, #149	; 0x95
   39980:	e28100bc 	add	r0, r1, #188	; 0xbc
   39984:	ebffcbcd 	bl	2c8c0 <assertion_failed>
   39988:	e30418b0 	movw	r1, #18608	; 0x48b0
   3998c:	e3401004 	movt	r1, #4
   39990:	e3a02096 	mov	r2, #150	; 0x96
   39994:	e28100d4 	add	r0, r1, #212	; 0xd4
   39998:	ebffcbc8 	bl	2c8c0 <assertion_failed>

0003999c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   3999c:	e92d4010 	push	{r4, lr}
   399a0:	e1a0e000 	mov	lr, r0
   399a4:	e2510000 	subs	r0, r1, #0
   399a8:	e5dd4008 	ldrb	r4, [sp, #8]
   399ac:	0a00003e 	beq	39aac <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x110>
   399b0:	e3530000 	cmp	r3, #0
   399b4:	0a000041 	beq	39ac0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x124>
   399b8:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   399bc:	8a000044 	bhi	39ad4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x138>
   399c0:	e59e1000 	ldr	r1, [lr]
   399c4:	e281183f 	add	r1, r1, #4128768	; 0x3f0000
   399c8:	e2811070 	add	r1, r1, #112	; 0x70
   399cc:	e1a01401 	lsl	r1, r1, #8
   399d0:	e5911020 	ldr	r1, [r1, #32]
   399d4:	e2211201 	eor	r1, r1, #268435456	; 0x10000000
   399d8:	e7e01e51 	ubfx	r1, r1, #28, #1
   399dc:	e3530801 	cmp	r3, #65536	; 0x10000
   399e0:	33811001 	orrcc	r1, r1, #1
   399e4:	e3510000 	cmp	r1, #0
   399e8:	0a000048 	beq	39b10 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x174>
   399ec:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   399f0:	0a00003c 	beq	39ae8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x14c>
   399f4:	e59ec008 	ldr	ip, [lr, #8]
   399f8:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   399fc:	e35c0000 	cmp	ip, #0
   39a00:	0a00003d 	beq	39afc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x160>
   39a04:	e3801103 	orr	r1, r0, #-1073741824	; 0xc0000000
   39a08:	e5cc4002 	strb	r4, [ip, #2]
   39a0c:	e5cc2004 	strb	r2, [ip, #4]
   39a10:	e1a01c21 	lsr	r1, r1, #24
   39a14:	e5cc100b 	strb	r1, [ip, #11]
   39a18:	e3001438 	movw	r1, #1080	; 0x438
   39a1c:	e5cc0008 	strb	r0, [ip, #8]
   39a20:	e5cc1000 	strb	r1, [ip]
   39a24:	e1a01421 	lsr	r1, r1, #8
   39a28:	e5cc300c 	strb	r3, [ip, #12]
   39a2c:	e5cc1001 	strb	r1, [ip, #1]
   39a30:	e3a01000 	mov	r1, #0
   39a34:	e5cc1010 	strb	r1, [ip, #16]
   39a38:	e5cc1011 	strb	r1, [ip, #17]
   39a3c:	e5cc1012 	strb	r1, [ip, #18]
   39a40:	e5cc1013 	strb	r1, [ip, #19]
   39a44:	e5cc1014 	strb	r1, [ip, #20]
   39a48:	e5cc1015 	strb	r1, [ip, #21]
   39a4c:	e5cc1016 	strb	r1, [ip, #22]
   39a50:	e5cc1017 	strb	r1, [ip, #23]
   39a54:	e5cc1003 	strb	r1, [ip, #3]
   39a58:	e7e71452 	ubfx	r1, r2, #8, #8
   39a5c:	e5cc1005 	strb	r1, [ip, #5]
   39a60:	e7e71852 	ubfx	r1, r2, #16, #8
   39a64:	e1a02c22 	lsr	r2, r2, #24
   39a68:	e5cc1006 	strb	r1, [ip, #6]
   39a6c:	e5cc2007 	strb	r2, [ip, #7]
   39a70:	e1a01003 	mov	r1, r3
   39a74:	e7e72450 	ubfx	r2, r0, #8, #8
   39a78:	e5cc2009 	strb	r2, [ip, #9]
   39a7c:	e7e72850 	ubfx	r2, r0, #16, #8
   39a80:	e5cc200a 	strb	r2, [ip, #10]
   39a84:	e7e72453 	ubfx	r2, r3, #8, #8
   39a88:	e5cc200d 	strb	r2, [ip, #13]
   39a8c:	e7e72853 	ubfx	r2, r3, #16, #8
   39a90:	e5cc200e 	strb	r2, [ip, #14]
   39a94:	e1a02c23 	lsr	r2, r3, #24
   39a98:	e5cc200f 	strb	r2, [ip, #15]
   39a9c:	e58e0020 	str	r0, [lr, #32]
   39aa0:	e58e3024 	str	r3, [lr, #36]	; 0x24
   39aa4:	e8bd4010 	pop	{r4, lr}
   39aa8:	eafff848 	b	37bd0 <CleanAndInvalidateDataCacheRange>
   39aac:	e30418b0 	movw	r1, #18608	; 0x48b0
   39ab0:	e3401004 	movt	r1, #4
   39ab4:	e3a020bd 	mov	r2, #189	; 0xbd
   39ab8:	e2810060 	add	r0, r1, #96	; 0x60
   39abc:	ebffcb7f 	bl	2c8c0 <assertion_failed>
   39ac0:	e30418b0 	movw	r1, #18608	; 0x48b0
   39ac4:	e3401004 	movt	r1, #4
   39ac8:	e3a020be 	mov	r2, #190	; 0xbe
   39acc:	e2810084 	add	r0, r1, #132	; 0x84
   39ad0:	ebffcb7a 	bl	2c8c0 <assertion_failed>
   39ad4:	e30418b0 	movw	r1, #18608	; 0x48b0
   39ad8:	e3401004 	movt	r1, #4
   39adc:	e3a020bf 	mov	r2, #191	; 0xbf
   39ae0:	e28100bc 	add	r0, r1, #188	; 0xbc
   39ae4:	ebffcb75 	bl	2c8c0 <assertion_failed>
   39ae8:	e30418b0 	movw	r1, #18608	; 0x48b0
   39aec:	e3401004 	movt	r1, #4
   39af0:	e3a020c4 	mov	r2, #196	; 0xc4
   39af4:	e2810f4b 	add	r0, r1, #300	; 0x12c
   39af8:	ebffcb70 	bl	2c8c0 <assertion_failed>
   39afc:	e30418b0 	movw	r1, #18608	; 0x48b0
   39b00:	e3401004 	movt	r1, #4
   39b04:	e3a020c7 	mov	r2, #199	; 0xc7
   39b08:	e28100a4 	add	r0, r1, #164	; 0xa4
   39b0c:	ebffcb6b 	bl	2c8c0 <assertion_failed>
   39b10:	e30418b0 	movw	r1, #18608	; 0x48b0
   39b14:	e3401004 	movt	r1, #4
   39b18:	e3a020c0 	mov	r2, #192	; 0xc0
   39b1c:	e28100d4 	add	r0, r1, #212	; 0xd4
   39b20:	ebffcb66 	bl	2c8c0 <assertion_failed>

00039b24 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   39b24:	e92d4070 	push	{r4, r5, r6, lr}
   39b28:	e1a04000 	mov	r4, r0
   39b2c:	e2520000 	subs	r0, r2, #0
   39b30:	e5dd5010 	ldrb	r5, [sp, #16]
   39b34:	0a00003e 	beq	39c34 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x110>
   39b38:	e1a0e001 	mov	lr, r1
   39b3c:	e3530000 	cmp	r3, #0
   39b40:	e1a01003 	mov	r1, r3
   39b44:	0a00003f 	beq	39c48 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x124>
   39b48:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   39b4c:	8a000042 	bhi	39c5c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x138>
   39b50:	e594c000 	ldr	ip, [r4]
   39b54:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   39b58:	e28cc070 	add	ip, ip, #112	; 0x70
   39b5c:	e1a0c40c 	lsl	ip, ip, #8
   39b60:	e59cc020 	ldr	ip, [ip, #32]
   39b64:	e22cc201 	eor	ip, ip, #268435456	; 0x10000000
   39b68:	e7e0ce5c 	ubfx	ip, ip, #28, #1
   39b6c:	e3530801 	cmp	r3, #65536	; 0x10000
   39b70:	338cc001 	orrcc	ip, ip, #1
   39b74:	e35c0000 	cmp	ip, #0
   39b78:	0a000046 	beq	39c98 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   39b7c:	e3dee4ff 	bics	lr, lr, #-16777216	; 0xff000000
   39b80:	0a00003a 	beq	39c70 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x14c>
   39b84:	e594c008 	ldr	ip, [r4, #8]
   39b88:	e28ee47e 	add	lr, lr, #2113929216	; 0x7e000000
   39b8c:	e35c0000 	cmp	ip, #0
   39b90:	0a00003b 	beq	39c84 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x160>
   39b94:	e5cc300c 	strb	r3, [ip, #12]
   39b98:	e3803103 	orr	r3, r0, #-1073741824	; 0xc0000000
   39b9c:	e3a02048 	mov	r2, #72	; 0x48
   39ba0:	e5cc5002 	strb	r5, [ip, #2]
   39ba4:	e1a03c23 	lsr	r3, r3, #24
   39ba8:	e5cce008 	strb	lr, [ip, #8]
   39bac:	e5cc3007 	strb	r3, [ip, #7]
   39bb0:	e3a03000 	mov	r3, #0
   39bb4:	e5cc2000 	strb	r2, [ip]
   39bb8:	e3a02003 	mov	r2, #3
   39bbc:	e5cc0004 	strb	r0, [ip, #4]
   39bc0:	e5cc2001 	strb	r2, [ip, #1]
   39bc4:	e7e72450 	ubfx	r2, r0, #8, #8
   39bc8:	e5cc3010 	strb	r3, [ip, #16]
   39bcc:	e5cc2005 	strb	r2, [ip, #5]
   39bd0:	e7e72850 	ubfx	r2, r0, #16, #8
   39bd4:	e5cc3011 	strb	r3, [ip, #17]
   39bd8:	e5cc2006 	strb	r2, [ip, #6]
   39bdc:	e7e7245e 	ubfx	r2, lr, #8, #8
   39be0:	e5cc3012 	strb	r3, [ip, #18]
   39be4:	e5cc2009 	strb	r2, [ip, #9]
   39be8:	e7e7285e 	ubfx	r2, lr, #16, #8
   39bec:	e5cc3013 	strb	r3, [ip, #19]
   39bf0:	e1a0ec2e 	lsr	lr, lr, #24
   39bf4:	e5cc200a 	strb	r2, [ip, #10]
   39bf8:	e7e72451 	ubfx	r2, r1, #8, #8
   39bfc:	e5cce00b 	strb	lr, [ip, #11]
   39c00:	e5cc200d 	strb	r2, [ip, #13]
   39c04:	e7e72851 	ubfx	r2, r1, #16, #8
   39c08:	e5cc3014 	strb	r3, [ip, #20]
   39c0c:	e5cc200e 	strb	r2, [ip, #14]
   39c10:	e1a02c21 	lsr	r2, r1, #24
   39c14:	e5cc3015 	strb	r3, [ip, #21]
   39c18:	e5cc3016 	strb	r3, [ip, #22]
   39c1c:	e5cc3017 	strb	r3, [ip, #23]
   39c20:	e5cc3003 	strb	r3, [ip, #3]
   39c24:	e5cc200f 	strb	r2, [ip, #15]
   39c28:	e5843020 	str	r3, [r4, #32]
   39c2c:	e8bd4070 	pop	{r4, r5, r6, lr}
   39c30:	eafff7e6 	b	37bd0 <CleanAndInvalidateDataCacheRange>
   39c34:	e30418b0 	movw	r1, #18608	; 0x48b0
   39c38:	e3401004 	movt	r1, #4
   39c3c:	e3a020e5 	mov	r2, #229	; 0xe5
   39c40:	e2810074 	add	r0, r1, #116	; 0x74
   39c44:	ebffcb1d 	bl	2c8c0 <assertion_failed>
   39c48:	e30418b0 	movw	r1, #18608	; 0x48b0
   39c4c:	e3401004 	movt	r1, #4
   39c50:	e3a020e6 	mov	r2, #230	; 0xe6
   39c54:	e2810084 	add	r0, r1, #132	; 0x84
   39c58:	ebffcb18 	bl	2c8c0 <assertion_failed>
   39c5c:	e30418b0 	movw	r1, #18608	; 0x48b0
   39c60:	e3401004 	movt	r1, #4
   39c64:	e3a020e7 	mov	r2, #231	; 0xe7
   39c68:	e28100bc 	add	r0, r1, #188	; 0xbc
   39c6c:	ebffcb13 	bl	2c8c0 <assertion_failed>
   39c70:	e30418b0 	movw	r1, #18608	; 0x48b0
   39c74:	e3401004 	movt	r1, #4
   39c78:	e3a020ec 	mov	r2, #236	; 0xec
   39c7c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   39c80:	ebffcb0e 	bl	2c8c0 <assertion_failed>
   39c84:	e30418b0 	movw	r1, #18608	; 0x48b0
   39c88:	e3401004 	movt	r1, #4
   39c8c:	e3a020ef 	mov	r2, #239	; 0xef
   39c90:	e28100a4 	add	r0, r1, #164	; 0xa4
   39c94:	ebffcb09 	bl	2c8c0 <assertion_failed>
   39c98:	e30418b0 	movw	r1, #18608	; 0x48b0
   39c9c:	e3401004 	movt	r1, #4
   39ca0:	e3a020e8 	mov	r2, #232	; 0xe8
   39ca4:	e28100d4 	add	r0, r1, #212	; 0xd4
   39ca8:	ebffcb04 	bl	2c8c0 <assertion_failed>

00039cac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   39cac:	e92d4070 	push	{r4, r5, r6, lr}
   39cb0:	e1a05000 	mov	r5, r0
   39cb4:	e59d6010 	ldr	r6, [sp, #16]
   39cb8:	e1a00002 	mov	r0, r2
   39cbc:	e59de018 	ldr	lr, [sp, #24]
   39cc0:	e59d2014 	ldr	r2, [sp, #20]
   39cc4:	e2514000 	subs	r4, r1, #0
   39cc8:	0a00004c 	beq	39e00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x154>
   39ccc:	e3500000 	cmp	r0, #0
   39cd0:	0a00004f 	beq	39e14 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x168>
   39cd4:	e3530000 	cmp	r3, #0
   39cd8:	0a000052 	beq	39e28 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x17c>
   39cdc:	e3530801 	cmp	r3, #65536	; 0x10000
   39ce0:	2a000055 	bcs	39e3c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
   39ce4:	e3560000 	cmp	r6, #0
   39ce8:	0a000058 	beq	39e50 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a4>
   39cec:	e3560901 	cmp	r6, #16384	; 0x4000
   39cf0:	2a00005b 	bcs	39e64 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b8>
   39cf4:	e3520801 	cmp	r2, #65536	; 0x10000
   39cf8:	2a00003b 	bcs	39dec <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x140>
   39cfc:	e35e000f 	cmp	lr, #15
   39d00:	8a00005c 	bhi	39e78 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1cc>
   39d04:	e595c000 	ldr	ip, [r5]
   39d08:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   39d0c:	e28cc070 	add	ip, ip, #112	; 0x70
   39d10:	e1a0c40c 	lsl	ip, ip, #8
   39d14:	e59c1020 	ldr	r1, [ip, #32]
   39d18:	e3110201 	tst	r1, #268435456	; 0x10000000
   39d1c:	1a00005a 	bne	39e8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
   39d20:	e595c008 	ldr	ip, [r5, #8]
   39d24:	e35c0000 	cmp	ip, #0
   39d28:	0a00005c 	beq	39ea0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f4>
   39d2c:	e5cc2012 	strb	r2, [ip, #18]
   39d30:	e7e72452 	ubfx	r2, r2, #8, #8
   39d34:	e5cc2013 	strb	r2, [ip, #19]
   39d38:	e2462001 	sub	r2, r6, #1
   39d3c:	e0010396 	mul	r1, r6, r3
   39d40:	e5cc300c 	strb	r3, [ip, #12]
   39d44:	e1832802 	orr	r2, r3, r2, lsl #16
   39d48:	e7e73453 	ubfx	r3, r3, #8, #8
   39d4c:	e5cc300d 	strb	r3, [ip, #13]
   39d50:	e3003332 	movw	r3, #818	; 0x332
   39d54:	e183e60e 	orr	lr, r3, lr, lsl #12
   39d58:	e5cc3000 	strb	r3, [ip]
   39d5c:	e3803103 	orr	r3, r0, #-1073741824	; 0xc0000000
   39d60:	e3a06000 	mov	r6, #0
   39d64:	e5cc4008 	strb	r4, [ip, #8]
   39d68:	e1a03c23 	lsr	r3, r3, #24
   39d6c:	e5cc3007 	strb	r3, [ip, #7]
   39d70:	e3843103 	orr	r3, r4, #-1073741824	; 0xc0000000
   39d74:	e5cc6014 	strb	r6, [ip, #20]
   39d78:	e5cc6015 	strb	r6, [ip, #21]
   39d7c:	e1a03c23 	lsr	r3, r3, #24
   39d80:	e5cc6016 	strb	r6, [ip, #22]
   39d84:	e5cc300b 	strb	r3, [ip, #11]
   39d88:	e1a0342e 	lsr	r3, lr, #8
   39d8c:	e5cc6017 	strb	r6, [ip, #23]
   39d90:	e5cc3001 	strb	r3, [ip, #1]
   39d94:	e7e7385e 	ubfx	r3, lr, #16, #8
   39d98:	e5cc6010 	strb	r6, [ip, #16]
   39d9c:	e1a0ec2e 	lsr	lr, lr, #24
   39da0:	e5cc3002 	strb	r3, [ip, #2]
   39da4:	e7e73450 	ubfx	r3, r0, #8, #8
   39da8:	e5cce003 	strb	lr, [ip, #3]
   39dac:	e5cc3005 	strb	r3, [ip, #5]
   39db0:	e7e73850 	ubfx	r3, r0, #16, #8
   39db4:	e5cc6011 	strb	r6, [ip, #17]
   39db8:	e5cc3006 	strb	r3, [ip, #6]
   39dbc:	e7e73454 	ubfx	r3, r4, #8, #8
   39dc0:	e5cc0004 	strb	r0, [ip, #4]
   39dc4:	e5cc3009 	strb	r3, [ip, #9]
   39dc8:	e7e73854 	ubfx	r3, r4, #16, #8
   39dcc:	e5cc300a 	strb	r3, [ip, #10]
   39dd0:	e7e73852 	ubfx	r3, r2, #16, #8
   39dd4:	e1a02c22 	lsr	r2, r2, #24
   39dd8:	e5cc300e 	strb	r3, [ip, #14]
   39ddc:	e5cc200f 	strb	r2, [ip, #15]
   39de0:	e5856020 	str	r6, [r5, #32]
   39de4:	e8bd4070 	pop	{r4, r5, r6, lr}
   39de8:	eafff778 	b	37bd0 <CleanAndInvalidateDataCacheRange>
   39dec:	e30418b0 	movw	r1, #18608	; 0x48b0
   39df0:	e3401004 	movt	r1, #4
   39df4:	e2810e19 	add	r0, r1, #400	; 0x190
   39df8:	e3002115 	movw	r2, #277	; 0x115
   39dfc:	ebffcaaf 	bl	2c8c0 <assertion_failed>
   39e00:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e04:	e3401004 	movt	r1, #4
   39e08:	e2810060 	add	r0, r1, #96	; 0x60
   39e0c:	e300210f 	movw	r2, #271	; 0x10f
   39e10:	ebffcaaa 	bl	2c8c0 <assertion_failed>
   39e14:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e18:	e3401004 	movt	r1, #4
   39e1c:	e3a02e11 	mov	r2, #272	; 0x110
   39e20:	e2810074 	add	r0, r1, #116	; 0x74
   39e24:	ebffcaa5 	bl	2c8c0 <assertion_failed>
   39e28:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e2c:	e3401004 	movt	r1, #4
   39e30:	e2810f4f 	add	r0, r1, #316	; 0x13c
   39e34:	e3002111 	movw	r2, #273	; 0x111
   39e38:	ebffcaa0 	bl	2c8c0 <assertion_failed>
   39e3c:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e40:	e3401004 	movt	r1, #4
   39e44:	e2810e15 	add	r0, r1, #336	; 0x150
   39e48:	e3002112 	movw	r2, #274	; 0x112
   39e4c:	ebffca9b 	bl	2c8c0 <assertion_failed>
   39e50:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e54:	e3401004 	movt	r1, #4
   39e58:	e2810f5a 	add	r0, r1, #360	; 0x168
   39e5c:	e3002113 	movw	r2, #275	; 0x113
   39e60:	ebffca96 	bl	2c8c0 <assertion_failed>
   39e64:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e68:	e3401004 	movt	r1, #4
   39e6c:	e3a02f45 	mov	r2, #276	; 0x114
   39e70:	e2810f5e 	add	r0, r1, #376	; 0x178
   39e74:	ebffca91 	bl	2c8c0 <assertion_failed>
   39e78:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e7c:	e3401004 	movt	r1, #4
   39e80:	e2810090 	add	r0, r1, #144	; 0x90
   39e84:	e3002116 	movw	r2, #278	; 0x116
   39e88:	ebffca8c 	bl	2c8c0 <assertion_failed>
   39e8c:	e30418b0 	movw	r1, #18608	; 0x48b0
   39e90:	e3401004 	movt	r1, #4
   39e94:	e3a02f46 	mov	r2, #280	; 0x118
   39e98:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   39e9c:	ebffca87 	bl	2c8c0 <assertion_failed>
   39ea0:	e30418b0 	movw	r1, #18608	; 0x48b0
   39ea4:	e3401004 	movt	r1, #4
   39ea8:	e28100a4 	add	r0, r1, #164	; 0xa4
   39eac:	e300211a 	movw	r2, #282	; 0x11a
   39eb0:	ebffca82 	bl	2c8c0 <assertion_failed>

00039eb4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   39eb4:	e92d4070 	push	{r4, r5, r6, lr}
   39eb8:	e1a05001 	mov	r5, r1
   39ebc:	e5901000 	ldr	r1, [r0]
   39ec0:	e351000c 	cmp	r1, #12
   39ec4:	8a000014 	bhi	39f1c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   39ec8:	e1a04000 	mov	r4, r0
   39ecc:	e590000c 	ldr	r0, [r0, #12]
   39ed0:	e3500000 	cmp	r0, #0
   39ed4:	0a000015 	beq	39f30 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   39ed8:	e5d43010 	ldrb	r3, [r4, #16]
   39edc:	e1a06002 	mov	r6, r2
   39ee0:	e3530000 	cmp	r3, #0
   39ee4:	0a000004 	beq	39efc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   39ee8:	e3550000 	cmp	r5, #0
   39eec:	e5845014 	str	r5, [r4, #20]
   39ef0:	0a000013 	beq	39f44 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   39ef4:	e5846018 	str	r6, [r4, #24]
   39ef8:	e8bd8070 	pop	{r4, r5, r6, pc}
   39efc:	e1a03004 	mov	r3, r4
   39f00:	e2811010 	add	r1, r1, #16
   39f04:	e30a22a4 	movw	r2, #41636	; 0xa2a4
   39f08:	e3402003 	movt	r2, #3
   39f0c:	ebfffa04 	bl	38724 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   39f10:	e3a03001 	mov	r3, #1
   39f14:	e5c43010 	strb	r3, [r4, #16]
   39f18:	eafffff2 	b	39ee8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   39f1c:	e30418b0 	movw	r1, #18608	; 0x48b0
   39f20:	e3401004 	movt	r1, #4
   39f24:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   39f28:	e3002139 	movw	r2, #313	; 0x139
   39f2c:	ebffca63 	bl	2c8c0 <assertion_failed>
   39f30:	e30418b0 	movw	r1, #18608	; 0x48b0
   39f34:	e3401004 	movt	r1, #4
   39f38:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   39f3c:	e300213a 	movw	r2, #314	; 0x13a
   39f40:	ebffca5e 	bl	2c8c0 <assertion_failed>
   39f44:	e30418b0 	movw	r1, #18608	; 0x48b0
   39f48:	e3401004 	movt	r1, #4
   39f4c:	e3a02f51 	mov	r2, #324	; 0x144
   39f50:	e2810f85 	add	r0, r1, #532	; 0x214
   39f54:	ebffca59 	bl	2c8c0 <assertion_failed>

00039f58 <CDMAChannel::Start()>:
   39f58:	e5902000 	ldr	r2, [r0]
   39f5c:	e92d4010 	push	{r4, lr}
   39f60:	e352000b 	cmp	r2, #11
   39f64:	8a000038 	bhi	3a04c <CDMAChannel::Start()+0xf4>
   39f68:	e1a04000 	mov	r4, r0
   39f6c:	e5900008 	ldr	r0, [r0, #8]
   39f70:	e3500000 	cmp	r0, #0
   39f74:	0a000039 	beq	3a060 <CDMAChannel::Start()+0x108>
   39f78:	e5943014 	ldr	r3, [r4, #20]
   39f7c:	e3530000 	cmp	r3, #0
   39f80:	0a000014 	beq	39fd8 <CDMAChannel::Start()+0x80>
   39f84:	e594300c 	ldr	r3, [r4, #12]
   39f88:	e3530000 	cmp	r3, #0
   39f8c:	0a000042 	beq	3a09c <CDMAChannel::Start()+0x144>
   39f90:	e5d43010 	ldrb	r3, [r4, #16]
   39f94:	e3530000 	cmp	r3, #0
   39f98:	0a000026 	beq	3a038 <CDMAChannel::Start()+0xe0>
   39f9c:	e5d01001 	ldrb	r1, [r0, #1]
   39fa0:	e5d03000 	ldrb	r3, [r0]
   39fa4:	e1833401 	orr	r3, r3, r1, lsl #8
   39fa8:	e5d01002 	ldrb	r1, [r0, #2]
   39fac:	e1833801 	orr	r3, r3, r1, lsl #16
   39fb0:	e5d01003 	ldrb	r1, [r0, #3]
   39fb4:	e1833c01 	orr	r3, r3, r1, lsl #24
   39fb8:	e3833001 	orr	r3, r3, #1
   39fbc:	e5c03000 	strb	r3, [r0]
   39fc0:	e7e71453 	ubfx	r1, r3, #8, #8
   39fc4:	e5c01001 	strb	r1, [r0, #1]
   39fc8:	e7e71853 	ubfx	r1, r3, #16, #8
   39fcc:	e1a03c23 	lsr	r3, r3, #24
   39fd0:	e5c01002 	strb	r1, [r0, #2]
   39fd4:	e5c03003 	strb	r3, [r0, #3]
   39fd8:	e282383f 	add	r3, r2, #4128768	; 0x3f0000
   39fdc:	e2833070 	add	r3, r3, #112	; 0x70
   39fe0:	e1a03403 	lsl	r3, r3, #8
   39fe4:	e5931000 	ldr	r1, [r3]
   39fe8:	e3110004 	tst	r1, #4
   39fec:	1a000020 	bne	3a074 <CDMAChannel::Start()+0x11c>
   39ff0:	e3a01a07 	mov	r1, #28672	; 0x7000
   39ff4:	e3431f00 	movt	r1, #16128	; 0x3f00
   39ff8:	e3a0c001 	mov	ip, #1
   39ffc:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   3a000:	e011121c 	ands	r1, r1, ip, lsl r2
   3a004:	1a00001f 	bne	3a088 <CDMAChannel::Start()+0x130>
   3a008:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   3a00c:	e3a01020 	mov	r1, #32
   3a010:	e5832004 	str	r2, [r3, #4]
   3a014:	ebfff6ed 	bl	37bd0 <CleanAndInvalidateDataCacheRange>
   3a018:	e5943000 	ldr	r3, [r4]
   3a01c:	e3a02001 	mov	r2, #1
   3a020:	e34120f1 	movt	r2, #4337	; 0x10f1
   3a024:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   3a028:	e2833070 	add	r3, r3, #112	; 0x70
   3a02c:	e1a03403 	lsl	r3, r3, #8
   3a030:	e5832000 	str	r2, [r3]
   3a034:	e8bd8010 	pop	{r4, pc}
   3a038:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a03c:	e3401004 	movt	r1, #4
   3a040:	e2810e23 	add	r0, r1, #560	; 0x230
   3a044:	e300215a 	movw	r2, #346	; 0x15a
   3a048:	ebffca1c 	bl	2c8c0 <assertion_failed>
   3a04c:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a050:	e3401004 	movt	r1, #4
   3a054:	e3a02f55 	mov	r2, #340	; 0x154
   3a058:	e2810030 	add	r0, r1, #48	; 0x30
   3a05c:	ebffca17 	bl	2c8c0 <assertion_failed>
   3a060:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a064:	e3401004 	movt	r1, #4
   3a068:	e28100a4 	add	r0, r1, #164	; 0xa4
   3a06c:	e3002155 	movw	r2, #341	; 0x155
   3a070:	ebffca12 	bl	2c8c0 <assertion_failed>
   3a074:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a078:	e3401004 	movt	r1, #4
   3a07c:	e3a02e16 	mov	r2, #352	; 0x160
   3a080:	e2810d09 	add	r0, r1, #576	; 0x240
   3a084:	ebffca0d 	bl	2c8c0 <assertion_failed>
   3a088:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a08c:	e3401004 	movt	r1, #4
   3a090:	e2810f9d 	add	r0, r1, #628	; 0x274
   3a094:	e3002161 	movw	r2, #353	; 0x161
   3a098:	ebffca08 	bl	2c8c0 <assertion_failed>
   3a09c:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a0a0:	e3401004 	movt	r1, #4
   3a0a4:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   3a0a8:	e3002159 	movw	r2, #345	; 0x159
   3a0ac:	ebffca03 	bl	2c8c0 <assertion_failed>

0003a0b0 <CDMAChannel::Wait()>:
   3a0b0:	e5902000 	ldr	r2, [r0]
   3a0b4:	e92d4010 	push	{r4, lr}
   3a0b8:	e352000b 	cmp	r2, #11
   3a0bc:	8a000014 	bhi	3a114 <CDMAChannel::Wait()+0x64>
   3a0c0:	e5903014 	ldr	r3, [r0, #20]
   3a0c4:	e1a04000 	mov	r4, r0
   3a0c8:	e3530000 	cmp	r3, #0
   3a0cc:	0282283f 	addeq	r2, r2, #4128768	; 0x3f0000
   3a0d0:	02822070 	addeq	r2, r2, #112	; 0x70
   3a0d4:	01a02402 	lsleq	r2, r2, #8
   3a0d8:	1a000012 	bne	3a128 <CDMAChannel::Wait()+0x78>
   3a0dc:	e5923000 	ldr	r3, [r2]
   3a0e0:	e3130001 	tst	r3, #1
   3a0e4:	1afffffc 	bne	3a0dc <CDMAChannel::Wait()+0x2c>
   3a0e8:	e5942020 	ldr	r2, [r4, #32]
   3a0ec:	e2233c01 	eor	r3, r3, #256	; 0x100
   3a0f0:	e3520000 	cmp	r2, #0
   3a0f4:	e7e00453 	ubfx	r0, r3, #8, #1
   3a0f8:	e5c4001c 	strb	r0, [r4, #28]
   3a0fc:	08bd8010 	popeq	{r4, pc}
   3a100:	e1a00002 	mov	r0, r2
   3a104:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   3a108:	ebfff6b0 	bl	37bd0 <CleanAndInvalidateDataCacheRange>
   3a10c:	e5d4001c 	ldrb	r0, [r4, #28]
   3a110:	e8bd8010 	pop	{r4, pc}
   3a114:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a118:	e3401004 	movt	r1, #4
   3a11c:	e3a02f5e 	mov	r2, #376	; 0x178
   3a120:	e2810030 	add	r0, r1, #48	; 0x30
   3a124:	ebffc9e5 	bl	2c8c0 <assertion_failed>
   3a128:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a12c:	e3401004 	movt	r1, #4
   3a130:	e2810faa 	add	r0, r1, #680	; 0x2a8
   3a134:	e3002179 	movw	r2, #377	; 0x179
   3a138:	ebffc9e0 	bl	2c8c0 <assertion_failed>

0003a13c <CDMAChannel::GetStatus()>:
   3a13c:	e5903000 	ldr	r3, [r0]
   3a140:	e92d4010 	push	{r4, lr}
   3a144:	e353000b 	cmp	r3, #11
   3a148:	8a000007 	bhi	3a16c <CDMAChannel::GetStatus()+0x30>
   3a14c:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   3a150:	e2833070 	add	r3, r3, #112	; 0x70
   3a154:	e1a03403 	lsl	r3, r3, #8
   3a158:	e5933000 	ldr	r3, [r3]
   3a15c:	e3130001 	tst	r3, #1
   3a160:	1a000006 	bne	3a180 <CDMAChannel::GetStatus()+0x44>
   3a164:	e5d0001c 	ldrb	r0, [r0, #28]
   3a168:	e8bd8010 	pop	{r4, pc}
   3a16c:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a170:	e3401004 	movt	r1, #4
   3a174:	e3a02f66 	mov	r2, #408	; 0x198
   3a178:	e2810030 	add	r0, r1, #48	; 0x30
   3a17c:	ebffc9cf 	bl	2c8c0 <assertion_failed>
   3a180:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a184:	e3401004 	movt	r1, #4
   3a188:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   3a18c:	e3002199 	movw	r2, #409	; 0x199
   3a190:	ebffc9ca 	bl	2c8c0 <assertion_failed>

0003a194 <CDMAChannel::InterruptHandler()>:
   3a194:	e92d4010 	push	{r4, lr}
   3a198:	e1a04000 	mov	r4, r0
   3a19c:	e5900020 	ldr	r0, [r0, #32]
   3a1a0:	e3500000 	cmp	r0, #0
   3a1a4:	1a000020 	bne	3a22c <CDMAChannel::InterruptHandler()+0x98>
   3a1a8:	e5941000 	ldr	r1, [r4]
   3a1ac:	e351000b 	cmp	r1, #11
   3a1b0:	8a000022 	bhi	3a240 <CDMAChannel::InterruptHandler()+0xac>
   3a1b4:	e3a02a07 	mov	r2, #28672	; 0x7000
   3a1b8:	e3432f00 	movt	r2, #16128	; 0x3f00
   3a1bc:	e3a03001 	mov	r3, #1
   3a1c0:	e5920fe0 	ldr	r0, [r2, #4064]	; 0xfe0
   3a1c4:	e1a03113 	lsl	r3, r3, r1
   3a1c8:	e1130000 	tst	r3, r0
   3a1cc:	0a000020 	beq	3a254 <CDMAChannel::InterruptHandler()+0xc0>
   3a1d0:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   3a1d4:	e5943000 	ldr	r3, [r4]
   3a1d8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   3a1dc:	e2833070 	add	r3, r3, #112	; 0x70
   3a1e0:	e1a03403 	lsl	r3, r3, #8
   3a1e4:	e5931000 	ldr	r1, [r3]
   3a1e8:	e3110004 	tst	r1, #4
   3a1ec:	0a00001d 	beq	3a268 <CDMAChannel::InterruptHandler()+0xd4>
   3a1f0:	e3110001 	tst	r1, #1
   3a1f4:	1a000020 	bne	3a27c <CDMAChannel::InterruptHandler()+0xe8>
   3a1f8:	e594e014 	ldr	lr, [r4, #20]
   3a1fc:	e2211c01 	eor	r1, r1, #256	; 0x100
   3a200:	e3a02004 	mov	r2, #4
   3a204:	e5832000 	str	r2, [r3]
   3a208:	e7e01451 	ubfx	r1, r1, #8, #1
   3a20c:	e35e0000 	cmp	lr, #0
   3a210:	e5c4101c 	strb	r1, [r4, #28]
   3a214:	0a00001d 	beq	3a290 <CDMAChannel::InterruptHandler()+0xfc>
   3a218:	e5942018 	ldr	r2, [r4, #24]
   3a21c:	e1a0300e 	mov	r3, lr
   3a220:	e5940000 	ldr	r0, [r4]
   3a224:	e8bd4010 	pop	{r4, lr}
   3a228:	e12fff13 	bx	r3
   3a22c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   3a230:	ebfff666 	bl	37bd0 <CleanAndInvalidateDataCacheRange>
   3a234:	e5941000 	ldr	r1, [r4]
   3a238:	e351000b 	cmp	r1, #11
   3a23c:	9affffdc 	bls	3a1b4 <CDMAChannel::InterruptHandler()+0x20>
   3a240:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a244:	e3401004 	movt	r1, #4
   3a248:	e2810030 	add	r0, r1, #48	; 0x30
   3a24c:	e30021a7 	movw	r2, #423	; 0x1a7
   3a250:	ebffc99a 	bl	2c8c0 <assertion_failed>
   3a254:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a258:	e3401004 	movt	r1, #4
   3a25c:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   3a260:	e30021ad 	movw	r2, #429	; 0x1ad
   3a264:	ebffc995 	bl	2c8c0 <assertion_failed>
   3a268:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a26c:	e3401004 	movt	r1, #4
   3a270:	e2810e31 	add	r0, r1, #784	; 0x310
   3a274:	e30021b1 	movw	r2, #433	; 0x1b1
   3a278:	ebffc990 	bl	2c8c0 <assertion_failed>
   3a27c:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a280:	e3401004 	movt	r1, #4
   3a284:	e2810e32 	add	r0, r1, #800	; 0x320
   3a288:	e30021b2 	movw	r2, #434	; 0x1b2
   3a28c:	ebffc98b 	bl	2c8c0 <assertion_failed>
   3a290:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a294:	e3401004 	movt	r1, #4
   3a298:	e2810f85 	add	r0, r1, #532	; 0x214
   3a29c:	e30021b9 	movw	r2, #441	; 0x1b9
   3a2a0:	ebffc986 	bl	2c8c0 <assertion_failed>

0003a2a4 <CDMAChannel::InterruptStub(void*)>:
   3a2a4:	e3500000 	cmp	r0, #0
   3a2a8:	0a000000 	beq	3a2b0 <CDMAChannel::InterruptStub(void*)+0xc>
   3a2ac:	eaffffb8 	b	3a194 <CDMAChannel::InterruptHandler()>
   3a2b0:	e30418b0 	movw	r1, #18608	; 0x48b0
   3a2b4:	e3401004 	movt	r1, #4
   3a2b8:	e3a02d07 	mov	r2, #448	; 0x1c0
   3a2bc:	e2810fcd 	add	r0, r1, #820	; 0x334
   3a2c0:	e92d4010 	push	{r4, lr}
   3a2c4:	ebffc97d 	bl	2c8c0 <assertion_failed>

0003a2c8 <CPageAllocator::CPageAllocator()>:
   3a2c8:	e3a02000 	mov	r2, #0
   3a2cc:	e3a01001 	mov	r1, #1
   3a2d0:	e5802000 	str	r2, [r0]
   3a2d4:	e5802004 	str	r2, [r0, #4]
   3a2d8:	e5802008 	str	r2, [r0, #8]
   3a2dc:	e580100c 	str	r1, [r0, #12]
   3a2e0:	e12fff1e 	bx	lr

0003a2e4 <CPageAllocator::~CPageAllocator()>:
   3a2e4:	e12fff1e 	bx	lr

0003a2e8 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   3a2e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3a2ec:	e28db000 	add	fp, sp, #0
   3a2f0:	e24dd014 	sub	sp, sp, #20
   3a2f4:	e50b0008 	str	r0, [fp, #-8]
   3a2f8:	e50b100c 	str	r1, [fp, #-12]
   3a2fc:	e50b2010 	str	r2, [fp, #-16]
   3a300:	e51b300c 	ldr	r3, [fp, #-12]
   3a304:	e2833eff 	add	r3, r3, #4080	; 0xff0
   3a308:	e283300f 	add	r3, r3, #15
   3a30c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   3a310:	e3c3300f 	bic	r3, r3, #15
   3a314:	e1a02003 	mov	r2, r3
   3a318:	e51b3008 	ldr	r3, [fp, #-8]
   3a31c:	e5832000 	str	r2, [r3]
   3a320:	e51b200c 	ldr	r2, [fp, #-12]
   3a324:	e51b3010 	ldr	r3, [fp, #-16]
   3a328:	e0823003 	add	r3, r2, r3
   3a32c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   3a330:	e3c3300f 	bic	r3, r3, #15
   3a334:	e1a02003 	mov	r2, r3
   3a338:	e51b3008 	ldr	r3, [fp, #-8]
   3a33c:	e5832004 	str	r2, [r3, #4]
   3a340:	e320f000 	nop	{0}
   3a344:	e28bd000 	add	sp, fp, #0
   3a348:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3a34c:	e12fff1e 	bx	lr

0003a350 <CPageAllocator::GetFreeSpace() const>:
   3a350:	e8900005 	ldm	r0, {r0, r2}
   3a354:	e0420000 	sub	r0, r2, r0
   3a358:	e12fff1e 	bx	lr

0003a35c <CPageAllocator::Allocate()>:
   3a35c:	e5903000 	ldr	r3, [r0]
   3a360:	e92d4070 	push	{r4, r5, r6, lr}
   3a364:	e3530000 	cmp	r3, #0
   3a368:	0a000024 	beq	3a400 <CPageAllocator::Allocate()+0xa4>
   3a36c:	e1a04000 	mov	r4, r0
   3a370:	e590000c 	ldr	r0, [r0, #12]
   3a374:	e3500000 	cmp	r0, #0
   3a378:	1a000010 	bne	3a3c0 <CPageAllocator::Allocate()+0x64>
   3a37c:	e5945008 	ldr	r5, [r4, #8]
   3a380:	e3550000 	cmp	r5, #0
   3a384:	0a000011 	beq	3a3d0 <CPageAllocator::Allocate()+0x74>
   3a388:	e5952000 	ldr	r2, [r5]
   3a38c:	e3043d43 	movw	r3, #19779	; 0x4d43
   3a390:	e3453047 	movt	r3, #20551	; 0x5047
   3a394:	e1520003 	cmp	r2, r3
   3a398:	1a00001d 	bne	3a414 <CPageAllocator::Allocate()+0xb8>
   3a39c:	e5952004 	ldr	r2, [r5, #4]
   3a3a0:	e3a03000 	mov	r3, #0
   3a3a4:	e5842008 	str	r2, [r4, #8]
   3a3a8:	e5853000 	str	r3, [r5]
   3a3ac:	e594300c 	ldr	r3, [r4, #12]
   3a3b0:	e3530000 	cmp	r3, #0
   3a3b4:	1a00000e 	bne	3a3f4 <CPageAllocator::Allocate()+0x98>
   3a3b8:	e1a00005 	mov	r0, r5
   3a3bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a3c0:	ebfff84d 	bl	384fc <EnterCritical>
   3a3c4:	e5945008 	ldr	r5, [r4, #8]
   3a3c8:	e3550000 	cmp	r5, #0
   3a3cc:	1affffed 	bne	3a388 <CPageAllocator::Allocate()+0x2c>
   3a3d0:	e5942000 	ldr	r2, [r4]
   3a3d4:	e5941004 	ldr	r1, [r4, #4]
   3a3d8:	e2823a01 	add	r3, r2, #4096	; 0x1000
   3a3dc:	e5843000 	str	r3, [r4]
   3a3e0:	e1530001 	cmp	r3, r1
   3a3e4:	e594300c 	ldr	r3, [r4, #12]
   3a3e8:	91a05002 	movls	r5, r2
   3a3ec:	e3530000 	cmp	r3, #0
   3a3f0:	0afffff0 	beq	3a3b8 <CPageAllocator::Allocate()+0x5c>
   3a3f4:	ebfff86b 	bl	385a8 <LeaveCritical>
   3a3f8:	e1a00005 	mov	r0, r5
   3a3fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a400:	e3041bf0 	movw	r1, #19440	; 0x4bf0
   3a404:	e3401004 	movt	r1, #4
   3a408:	e3a02036 	mov	r2, #54	; 0x36
   3a40c:	e2810014 	add	r0, r1, #20
   3a410:	ebffc92a 	bl	2c8c0 <assertion_failed>
   3a414:	e3041bf0 	movw	r1, #19440	; 0x4bf0
   3a418:	e3401004 	movt	r1, #4
   3a41c:	e3a02044 	mov	r2, #68	; 0x44
   3a420:	e2810024 	add	r0, r1, #36	; 0x24
   3a424:	ebffc925 	bl	2c8c0 <assertion_failed>

0003a428 <CPageAllocator::Free(void*)>:
   3a428:	e92d4070 	push	{r4, r5, r6, lr}
   3a42c:	e2514000 	subs	r4, r1, #0
   3a430:	08bd8070 	popeq	{r4, r5, r6, pc}
   3a434:	e1a05000 	mov	r5, r0
   3a438:	e590000c 	ldr	r0, [r0, #12]
   3a43c:	e3500000 	cmp	r0, #0
   3a440:	1a000006 	bne	3a460 <CPageAllocator::Free(void*)+0x38>
   3a444:	e5952008 	ldr	r2, [r5, #8]
   3a448:	e3043d43 	movw	r3, #19779	; 0x4d43
   3a44c:	e3453047 	movt	r3, #20551	; 0x5047
   3a450:	e5842004 	str	r2, [r4, #4]
   3a454:	e5843000 	str	r3, [r4]
   3a458:	e5854008 	str	r4, [r5, #8]
   3a45c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a460:	ebfff825 	bl	384fc <EnterCritical>
   3a464:	e595200c 	ldr	r2, [r5, #12]
   3a468:	e5951008 	ldr	r1, [r5, #8]
   3a46c:	e3043d43 	movw	r3, #19779	; 0x4d43
   3a470:	e3453047 	movt	r3, #20551	; 0x5047
   3a474:	e3520000 	cmp	r2, #0
   3a478:	e5841004 	str	r1, [r4, #4]
   3a47c:	e5843000 	str	r3, [r4]
   3a480:	e5854008 	str	r4, [r5, #8]
   3a484:	08bd8070 	popeq	{r4, r5, r6, pc}
   3a488:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a48c:	eafff845 	b	385a8 <LeaveCritical>

0003a490 <__aeabi_ldivmod>:
   3a490:	b97b      	cbnz	r3, 3a4b2 <__aeabi_ldivmod+0x22>
   3a492:	b972      	cbnz	r2, 3a4b2 <__aeabi_ldivmod+0x22>
   3a494:	2900      	cmp	r1, #0
   3a496:	bfbe      	ittt	lt
   3a498:	2000      	movlt	r0, #0
   3a49a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   3a49e:	e006      	blt.n	3a4ae <__aeabi_ldivmod+0x1e>
   3a4a0:	bf08      	it	eq
   3a4a2:	2800      	cmpeq	r0, #0
   3a4a4:	bf1c      	itt	ne
   3a4a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   3a4aa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3a4ae:	f000 ba11 	b.w	3a8d4 <__aeabi_idiv0>
   3a4b2:	f1ad 0c08 	sub.w	ip, sp, #8
   3a4b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   3a4ba:	2900      	cmp	r1, #0
   3a4bc:	db09      	blt.n	3a4d2 <__aeabi_ldivmod+0x42>
   3a4be:	2b00      	cmp	r3, #0
   3a4c0:	db1a      	blt.n	3a4f8 <__aeabi_ldivmod+0x68>
   3a4c2:	f000 f84d 	bl	3a560 <__udivmoddi4>
   3a4c6:	f8dd e004 	ldr.w	lr, [sp, #4]
   3a4ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3a4ce:	b004      	add	sp, #16
   3a4d0:	4770      	bx	lr
   3a4d2:	4240      	negs	r0, r0
   3a4d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3a4d8:	2b00      	cmp	r3, #0
   3a4da:	db1b      	blt.n	3a514 <__aeabi_ldivmod+0x84>
   3a4dc:	f000 f840 	bl	3a560 <__udivmoddi4>
   3a4e0:	f8dd e004 	ldr.w	lr, [sp, #4]
   3a4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3a4e8:	b004      	add	sp, #16
   3a4ea:	4240      	negs	r0, r0
   3a4ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3a4f0:	4252      	negs	r2, r2
   3a4f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   3a4f6:	4770      	bx	lr
   3a4f8:	4252      	negs	r2, r2
   3a4fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   3a4fe:	f000 f82f 	bl	3a560 <__udivmoddi4>
   3a502:	f8dd e004 	ldr.w	lr, [sp, #4]
   3a506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3a50a:	b004      	add	sp, #16
   3a50c:	4240      	negs	r0, r0
   3a50e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3a512:	4770      	bx	lr
   3a514:	4252      	negs	r2, r2
   3a516:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   3a51a:	f000 f821 	bl	3a560 <__udivmoddi4>
   3a51e:	f8dd e004 	ldr.w	lr, [sp, #4]
   3a522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3a526:	b004      	add	sp, #16
   3a528:	4252      	negs	r2, r2
   3a52a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   3a52e:	4770      	bx	lr

0003a530 <__aeabi_uldivmod>:
   3a530:	b953      	cbnz	r3, 3a548 <__aeabi_uldivmod+0x18>
   3a532:	b94a      	cbnz	r2, 3a548 <__aeabi_uldivmod+0x18>
   3a534:	2900      	cmp	r1, #0
   3a536:	bf08      	it	eq
   3a538:	2800      	cmpeq	r0, #0
   3a53a:	bf1c      	itt	ne
   3a53c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   3a540:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3a544:	f000 b9c6 	b.w	3a8d4 <__aeabi_idiv0>
   3a548:	f1ad 0c08 	sub.w	ip, sp, #8
   3a54c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   3a550:	f000 f806 	bl	3a560 <__udivmoddi4>
   3a554:	f8dd e004 	ldr.w	lr, [sp, #4]
   3a558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3a55c:	b004      	add	sp, #16
   3a55e:	4770      	bx	lr

0003a560 <__udivmoddi4>:
   3a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a564:	4681      	mov	r9, r0
   3a566:	468a      	mov	sl, r1
   3a568:	b085      	sub	sp, #20
   3a56a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   3a56c:	2b00      	cmp	r3, #0
   3a56e:	d15f      	bne.n	3a630 <__udivmoddi4+0xd0>
   3a570:	4684      	mov	ip, r0
   3a572:	4696      	mov	lr, r2
   3a574:	428a      	cmp	r2, r1
   3a576:	d97c      	bls.n	3a672 <__udivmoddi4+0x112>
   3a578:	4608      	mov	r0, r1
   3a57a:	fab2 f382 	clz	r3, r2
   3a57e:	b153      	cbz	r3, 3a596 <__udivmoddi4+0x36>
   3a580:	f1c3 0020 	rsb	r0, r3, #32
   3a584:	fa02 fe03 	lsl.w	lr, r2, r3
   3a588:	fa01 f203 	lsl.w	r2, r1, r3
   3a58c:	fa29 f000 	lsr.w	r0, r9, r0
   3a590:	4310      	orrs	r0, r2
   3a592:	fa09 fc03 	lsl.w	ip, r9, r3
   3a596:	ea4f 451e 	mov.w	r5, lr, lsr #16
   3a59a:	fa1f f48e 	uxth.w	r4, lr
   3a59e:	ea4f 421c 	mov.w	r2, ip, lsr #16
   3a5a2:	fbb0 f1f5 	udiv	r1, r0, r5
   3a5a6:	fb05 0011 	mls	r0, r5, r1, r0
   3a5aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   3a5ae:	fb01 f004 	mul.w	r0, r1, r4
   3a5b2:	4290      	cmp	r0, r2
   3a5b4:	d910      	bls.n	3a5d8 <__udivmoddi4+0x78>
   3a5b6:	eb1e 0202 	adds.w	r2, lr, r2
   3a5ba:	f04f 0701 	mov.w	r7, #1
   3a5be:	bf28      	it	cs
   3a5c0:	2700      	movcs	r7, #0
   3a5c2:	4290      	cmp	r0, r2
   3a5c4:	f007 0701 	and.w	r7, r7, #1
   3a5c8:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   3a5cc:	bf98      	it	ls
   3a5ce:	2700      	movls	r7, #0
   3a5d0:	2f00      	cmp	r7, #0
   3a5d2:	f040 817c 	bne.w	3a8ce <__udivmoddi4+0x36e>
   3a5d6:	4641      	mov	r1, r8
   3a5d8:	1a12      	subs	r2, r2, r0
   3a5da:	fa1f fc8c 	uxth.w	ip, ip
   3a5de:	fbb2 f0f5 	udiv	r0, r2, r5
   3a5e2:	fb05 2210 	mls	r2, r5, r0, r2
   3a5e6:	fb00 f404 	mul.w	r4, r0, r4
   3a5ea:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   3a5ee:	4564      	cmp	r4, ip
   3a5f0:	d910      	bls.n	3a614 <__udivmoddi4+0xb4>
   3a5f2:	eb1e 0c0c 	adds.w	ip, lr, ip
   3a5f6:	f04f 0201 	mov.w	r2, #1
   3a5fa:	bf28      	it	cs
   3a5fc:	2200      	movcs	r2, #0
   3a5fe:	4564      	cmp	r4, ip
   3a600:	f002 0201 	and.w	r2, r2, #1
   3a604:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   3a608:	bf98      	it	ls
   3a60a:	2200      	movls	r2, #0
   3a60c:	2a00      	cmp	r2, #0
   3a60e:	f040 8158 	bne.w	3a8c2 <__udivmoddi4+0x362>
   3a612:	4628      	mov	r0, r5
   3a614:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   3a618:	ebac 0c04 	sub.w	ip, ip, r4
   3a61c:	2100      	movs	r1, #0
   3a61e:	b126      	cbz	r6, 3a62a <__udivmoddi4+0xca>
   3a620:	fa2c f303 	lsr.w	r3, ip, r3
   3a624:	2200      	movs	r2, #0
   3a626:	e9c6 3200 	strd	r3, r2, [r6]
   3a62a:	b005      	add	sp, #20
   3a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a630:	428b      	cmp	r3, r1
   3a632:	d905      	bls.n	3a640 <__udivmoddi4+0xe0>
   3a634:	b10e      	cbz	r6, 3a63a <__udivmoddi4+0xda>
   3a636:	e9c6 9a00 	strd	r9, sl, [r6]
   3a63a:	2100      	movs	r1, #0
   3a63c:	4608      	mov	r0, r1
   3a63e:	e7f4      	b.n	3a62a <__udivmoddi4+0xca>
   3a640:	fab3 f183 	clz	r1, r3
   3a644:	2900      	cmp	r1, #0
   3a646:	d162      	bne.n	3a70e <__udivmoddi4+0x1ae>
   3a648:	ec4a 9b30 	vmov	d16, r9, sl
   3a64c:	4608      	mov	r0, r1
   3a64e:	4553      	cmp	r3, sl
   3a650:	bf28      	it	cs
   3a652:	454a      	cmpcs	r2, r9
   3a654:	d808      	bhi.n	3a668 <__udivmoddi4+0x108>
   3a656:	ebb9 0002 	subs.w	r0, r9, r2
   3a65a:	eb6a 0203 	sbc.w	r2, sl, r3
   3a65e:	e9cd 0202 	strd	r0, r2, [sp, #8]
   3a662:	2001      	movs	r0, #1
   3a664:	eddd 0b02 	vldr	d16, [sp, #8]
   3a668:	2e00      	cmp	r6, #0
   3a66a:	d0de      	beq.n	3a62a <__udivmoddi4+0xca>
   3a66c:	edc6 0b00 	vstr	d16, [r6]
   3a670:	e7db      	b.n	3a62a <__udivmoddi4+0xca>
   3a672:	fab2 f382 	clz	r3, r2
   3a676:	2b00      	cmp	r3, #0
   3a678:	f040 80bd 	bne.w	3a7f6 <__udivmoddi4+0x296>
   3a67c:	1a8a      	subs	r2, r1, r2
   3a67e:	ea4f 471e 	mov.w	r7, lr, lsr #16
   3a682:	fa1f f58e 	uxth.w	r5, lr
   3a686:	2101      	movs	r1, #1
   3a688:	fbb2 f4f7 	udiv	r4, r2, r7
   3a68c:	fb07 2014 	mls	r0, r7, r4, r2
   3a690:	ea4f 421c 	mov.w	r2, ip, lsr #16
   3a694:	fb05 f804 	mul.w	r8, r5, r4
   3a698:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   3a69c:	4590      	cmp	r8, r2
   3a69e:	d912      	bls.n	3a6c6 <__udivmoddi4+0x166>
   3a6a0:	eb1e 0202 	adds.w	r2, lr, r2
   3a6a4:	f04f 0001 	mov.w	r0, #1
   3a6a8:	bf38      	it	cc
   3a6aa:	2000      	movcc	r0, #0
   3a6ac:	4590      	cmp	r8, r2
   3a6ae:	f080 0001 	eor.w	r0, r0, #1
   3a6b2:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   3a6b6:	f000 0001 	and.w	r0, r0, #1
   3a6ba:	bf98      	it	ls
   3a6bc:	2000      	movls	r0, #0
   3a6be:	2800      	cmp	r0, #0
   3a6c0:	f040 8102 	bne.w	3a8c8 <__udivmoddi4+0x368>
   3a6c4:	464c      	mov	r4, r9
   3a6c6:	eba2 0208 	sub.w	r2, r2, r8
   3a6ca:	fa1f fc8c 	uxth.w	ip, ip
   3a6ce:	fbb2 f0f7 	udiv	r0, r2, r7
   3a6d2:	fb07 2210 	mls	r2, r7, r0, r2
   3a6d6:	fb00 f505 	mul.w	r5, r0, r5
   3a6da:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   3a6de:	4565      	cmp	r5, ip
   3a6e0:	d910      	bls.n	3a704 <__udivmoddi4+0x1a4>
   3a6e2:	eb1e 0c0c 	adds.w	ip, lr, ip
   3a6e6:	f04f 0201 	mov.w	r2, #1
   3a6ea:	bf28      	it	cs
   3a6ec:	2200      	movcs	r2, #0
   3a6ee:	4565      	cmp	r5, ip
   3a6f0:	f002 0201 	and.w	r2, r2, #1
   3a6f4:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
   3a6f8:	bf98      	it	ls
   3a6fa:	2200      	movls	r2, #0
   3a6fc:	2a00      	cmp	r2, #0
   3a6fe:	f040 80dd 	bne.w	3a8bc <__udivmoddi4+0x35c>
   3a702:	4638      	mov	r0, r7
   3a704:	ebac 0c05 	sub.w	ip, ip, r5
   3a708:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   3a70c:	e787      	b.n	3a61e <__udivmoddi4+0xbe>
   3a70e:	f1c1 0720 	rsb	r7, r1, #32
   3a712:	408b      	lsls	r3, r1
   3a714:	fa02 fc01 	lsl.w	ip, r2, r1
   3a718:	40fa      	lsrs	r2, r7
   3a71a:	431a      	orrs	r2, r3
   3a71c:	fa29 f507 	lsr.w	r5, r9, r7
   3a720:	fa09 f301 	lsl.w	r3, r9, r1
   3a724:	9301      	str	r3, [sp, #4]
   3a726:	fa2a f007 	lsr.w	r0, sl, r7
   3a72a:	ea4f 4912 	mov.w	r9, r2, lsr #16
   3a72e:	fa0a fe01 	lsl.w	lr, sl, r1
   3a732:	ea4e 0305 	orr.w	r3, lr, r5
   3a736:	fa1f fe82 	uxth.w	lr, r2
   3a73a:	fbb0 f8f9 	udiv	r8, r0, r9
   3a73e:	0c1d      	lsrs	r5, r3, #16
   3a740:	fb09 0018 	mls	r0, r9, r8, r0
   3a744:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   3a748:	fb08 f00e 	mul.w	r0, r8, lr
   3a74c:	42a8      	cmp	r0, r5
   3a74e:	d911      	bls.n	3a774 <__udivmoddi4+0x214>
   3a750:	1955      	adds	r5, r2, r5
   3a752:	f04f 0401 	mov.w	r4, #1
   3a756:	bf38      	it	cc
   3a758:	2400      	movcc	r4, #0
   3a75a:	42a8      	cmp	r0, r5
   3a75c:	f084 0a01 	eor.w	sl, r4, #1
   3a760:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
   3a764:	f00a 0401 	and.w	r4, sl, #1
   3a768:	bf98      	it	ls
   3a76a:	2400      	movls	r4, #0
   3a76c:	2c00      	cmp	r4, #0
   3a76e:	f040 809b 	bne.w	3a8a8 <__udivmoddi4+0x348>
   3a772:	46d8      	mov	r8, fp
   3a774:	1a2d      	subs	r5, r5, r0
   3a776:	b29b      	uxth	r3, r3
   3a778:	fbb5 f0f9 	udiv	r0, r5, r9
   3a77c:	fb09 5510 	mls	r5, r9, r0, r5
   3a780:	fb00 fe0e 	mul.w	lr, r0, lr
   3a784:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   3a788:	459e      	cmp	lr, r3
   3a78a:	d90e      	bls.n	3a7aa <__udivmoddi4+0x24a>
   3a78c:	18d3      	adds	r3, r2, r3
   3a78e:	f04f 0501 	mov.w	r5, #1
   3a792:	bf28      	it	cs
   3a794:	2500      	movcs	r5, #0
   3a796:	459e      	cmp	lr, r3
   3a798:	f005 0501 	and.w	r5, r5, #1
   3a79c:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
   3a7a0:	bf98      	it	ls
   3a7a2:	2500      	movls	r5, #0
   3a7a4:	2d00      	cmp	r5, #0
   3a7a6:	d17c      	bne.n	3a8a2 <__udivmoddi4+0x342>
   3a7a8:	4648      	mov	r0, r9
   3a7aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   3a7ae:	eba3 0b0e 	sub.w	fp, r3, lr
   3a7b2:	fba0 850c 	umull	r8, r5, r0, ip
   3a7b6:	46c6      	mov	lr, r8
   3a7b8:	46a9      	mov	r9, r5
   3a7ba:	45ab      	cmp	fp, r5
   3a7bc:	d367      	bcc.n	3a88e <__udivmoddi4+0x32e>
   3a7be:	9b01      	ldr	r3, [sp, #4]
   3a7c0:	f04f 0401 	mov.w	r4, #1
   3a7c4:	bf18      	it	ne
   3a7c6:	2400      	movne	r4, #0
   3a7c8:	4543      	cmp	r3, r8
   3a7ca:	f004 0401 	and.w	r4, r4, #1
   3a7ce:	bf28      	it	cs
   3a7d0:	2400      	movcs	r4, #0
   3a7d2:	2c00      	cmp	r4, #0
   3a7d4:	d15b      	bne.n	3a88e <__udivmoddi4+0x32e>
   3a7d6:	2e00      	cmp	r6, #0
   3a7d8:	d06e      	beq.n	3a8b8 <__udivmoddi4+0x358>
   3a7da:	9c01      	ldr	r4, [sp, #4]
   3a7dc:	ebb4 020e 	subs.w	r2, r4, lr
   3a7e0:	eb6b 0309 	sbc.w	r3, fp, r9
   3a7e4:	fa23 f401 	lsr.w	r4, r3, r1
   3a7e8:	40ca      	lsrs	r2, r1
   3a7ea:	2100      	movs	r1, #0
   3a7ec:	40bb      	lsls	r3, r7
   3a7ee:	4313      	orrs	r3, r2
   3a7f0:	e9c6 3400 	strd	r3, r4, [r6]
   3a7f4:	e719      	b.n	3a62a <__udivmoddi4+0xca>
   3a7f6:	fa02 fe03 	lsl.w	lr, r2, r3
   3a7fa:	f1c3 0120 	rsb	r1, r3, #32
   3a7fe:	fa0a f203 	lsl.w	r2, sl, r3
   3a802:	fa2a f801 	lsr.w	r8, sl, r1
   3a806:	ea4f 471e 	mov.w	r7, lr, lsr #16
   3a80a:	fa20 f101 	lsr.w	r1, r0, r1
   3a80e:	fa1f f58e 	uxth.w	r5, lr
   3a812:	430a      	orrs	r2, r1
   3a814:	fa00 fc03 	lsl.w	ip, r0, r3
   3a818:	fbb8 faf7 	udiv	sl, r8, r7
   3a81c:	0c11      	lsrs	r1, r2, #16
   3a81e:	fb07 881a 	mls	r8, r7, sl, r8
   3a822:	fb0a f405 	mul.w	r4, sl, r5
   3a826:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   3a82a:	428c      	cmp	r4, r1
   3a82c:	d910      	bls.n	3a850 <__udivmoddi4+0x2f0>
   3a82e:	eb1e 0101 	adds.w	r1, lr, r1
   3a832:	f04f 0001 	mov.w	r0, #1
   3a836:	bf38      	it	cc
   3a838:	2000      	movcc	r0, #0
   3a83a:	428c      	cmp	r4, r1
   3a83c:	f080 0801 	eor.w	r8, r0, #1
   3a840:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
   3a844:	f008 0001 	and.w	r0, r8, #1
   3a848:	bf98      	it	ls
   3a84a:	2000      	movls	r0, #0
   3a84c:	bb80      	cbnz	r0, 3a8b0 <__udivmoddi4+0x350>
   3a84e:	46ca      	mov	sl, r9
   3a850:	1b09      	subs	r1, r1, r4
   3a852:	b292      	uxth	r2, r2
   3a854:	fbb1 f4f7 	udiv	r4, r1, r7
   3a858:	fb07 1114 	mls	r1, r7, r4, r1
   3a85c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3a860:	fb04 f105 	mul.w	r1, r4, r5
   3a864:	4291      	cmp	r1, r2
   3a866:	d90e      	bls.n	3a886 <__udivmoddi4+0x326>
   3a868:	eb1e 0202 	adds.w	r2, lr, r2
   3a86c:	f04f 0001 	mov.w	r0, #1
   3a870:	bf28      	it	cs
   3a872:	2000      	movcs	r0, #0
   3a874:	4291      	cmp	r1, r2
   3a876:	f000 0001 	and.w	r0, r0, #1
   3a87a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   3a87e:	bf98      	it	ls
   3a880:	2000      	movls	r0, #0
   3a882:	b958      	cbnz	r0, 3a89c <__udivmoddi4+0x33c>
   3a884:	464c      	mov	r4, r9
   3a886:	1a52      	subs	r2, r2, r1
   3a888:	ea44 410a 	orr.w	r1, r4, sl, lsl #16
   3a88c:	e6fc      	b.n	3a688 <__udivmoddi4+0x128>
   3a88e:	ebb8 0e0c 	subs.w	lr, r8, ip
   3a892:	eb65 0202 	sbc.w	r2, r5, r2
   3a896:	3801      	subs	r0, #1
   3a898:	4691      	mov	r9, r2
   3a89a:	e79c      	b.n	3a7d6 <__udivmoddi4+0x276>
   3a89c:	3c02      	subs	r4, #2
   3a89e:	4472      	add	r2, lr
   3a8a0:	e7f1      	b.n	3a886 <__udivmoddi4+0x326>
   3a8a2:	3802      	subs	r0, #2
   3a8a4:	4413      	add	r3, r2
   3a8a6:	e780      	b.n	3a7aa <__udivmoddi4+0x24a>
   3a8a8:	f1a8 0802 	sub.w	r8, r8, #2
   3a8ac:	4415      	add	r5, r2
   3a8ae:	e761      	b.n	3a774 <__udivmoddi4+0x214>
   3a8b0:	f1aa 0a02 	sub.w	sl, sl, #2
   3a8b4:	4471      	add	r1, lr
   3a8b6:	e7cb      	b.n	3a850 <__udivmoddi4+0x2f0>
   3a8b8:	4631      	mov	r1, r6
   3a8ba:	e6b6      	b.n	3a62a <__udivmoddi4+0xca>
   3a8bc:	44f4      	add	ip, lr
   3a8be:	3802      	subs	r0, #2
   3a8c0:	e720      	b.n	3a704 <__udivmoddi4+0x1a4>
   3a8c2:	44f4      	add	ip, lr
   3a8c4:	3802      	subs	r0, #2
   3a8c6:	e6a5      	b.n	3a614 <__udivmoddi4+0xb4>
   3a8c8:	3c02      	subs	r4, #2
   3a8ca:	4472      	add	r2, lr
   3a8cc:	e6fb      	b.n	3a6c6 <__udivmoddi4+0x166>
   3a8ce:	3902      	subs	r1, #2
   3a8d0:	4472      	add	r2, lr
   3a8d2:	e681      	b.n	3a5d8 <__udivmoddi4+0x78>

0003a8d4 <__aeabi_idiv0>:
   3a8d4:	4770      	bx	lr
   3a8d6:	bf00      	nop
